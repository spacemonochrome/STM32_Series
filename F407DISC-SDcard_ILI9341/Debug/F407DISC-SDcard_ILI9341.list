
F407DISC-SDcard_ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0a8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000145c  0800c230  0800c230  0000d230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d68c  0800d68c  0000f11c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d68c  0800d68c  0000e68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d694  0800d694  0000f11c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d694  0800d694  0000e694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d698  0800d698  0000e698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000011c  20000000  0800d69c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f11c  2**0
                  CONTENTS
 10 .bss          0000a368  2000011c  2000011c  0000f11c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000a484  2000a484  0000f11c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f11c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c0d2  00000000  00000000  0000f14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000266e  00000000  00000000  0001b21e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  0001d890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000853  00000000  00000000  0001e3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000238dd  00000000  00000000  0001ec13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000104b1  00000000  00000000  000424f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca47f  00000000  00000000  000529a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b1  00000000  00000000  0011ce20  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b94  00000000  00000000  0011ced4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0011fa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000011c 	.word	0x2000011c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c218 	.word	0x0800c218

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000120 	.word	0x20000120
 80001c4:	0800c218 	.word	0x0800c218

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004fe:	4804      	ldr	r0, [pc, #16]	@ (8000510 <SELECT+0x1c>)
 8000500:	f001 fe38 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000504:	2001      	movs	r0, #1
 8000506:	f001 fb47 	bl	8001b98 <HAL_Delay>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40020400 	.word	0x40020400

08000514 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800051e:	4804      	ldr	r0, [pc, #16]	@ (8000530 <DESELECT+0x1c>)
 8000520:	f001 fe28 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000524:	2001      	movs	r0, #1
 8000526:	f001 fb37 	bl	8001b98 <HAL_Delay>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40020400 	.word	0x40020400

08000534 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800053e:	bf00      	nop
 8000540:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <SPI_TxByte+0x30>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	2b02      	cmp	r3, #2
 800054c:	d1f8      	bne.n	8000540 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800054e:	1df9      	adds	r1, r7, #7
 8000550:	2364      	movs	r3, #100	@ 0x64
 8000552:	2201      	movs	r2, #1
 8000554:	4803      	ldr	r0, [pc, #12]	@ (8000564 <SPI_TxByte+0x30>)
 8000556:	f002 fb38 	bl	8002bca <HAL_SPI_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20007b74 	.word	0x20007b74

08000568 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000574:	bf00      	nop
 8000576:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <SPI_TxBuffer+0x30>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	f003 0302 	and.w	r3, r3, #2
 8000580:	2b02      	cmp	r3, #2
 8000582:	d1f8      	bne.n	8000576 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000584:	887a      	ldrh	r2, [r7, #2]
 8000586:	2364      	movs	r3, #100	@ 0x64
 8000588:	6879      	ldr	r1, [r7, #4]
 800058a:	4803      	ldr	r0, [pc, #12]	@ (8000598 <SPI_TxBuffer+0x30>)
 800058c:	f002 fb1d 	bl	8002bca <HAL_SPI_Transmit>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20007b74 	.word	0x20007b74

0800059c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80005a2:	23ff      	movs	r3, #255	@ 0xff
 80005a4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005a6:	bf00      	nop
 80005a8:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <SPI_RxByte+0x34>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	f003 0302 	and.w	r3, r3, #2
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d1f8      	bne.n	80005a8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80005b6:	1dba      	adds	r2, r7, #6
 80005b8:	1df9      	adds	r1, r7, #7
 80005ba:	2364      	movs	r3, #100	@ 0x64
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2301      	movs	r3, #1
 80005c0:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <SPI_RxByte+0x34>)
 80005c2:	f002 fc46 	bl	8002e52 <HAL_SPI_TransmitReceive>

	return data;
 80005c6:	79bb      	ldrb	r3, [r7, #6]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20007b74 	.word	0x20007b74

080005d4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005dc:	f7ff ffde 	bl	800059c <SPI_RxByte>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	701a      	strb	r2, [r3, #0]
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <SD_ReadyWait+0x30>)
 80005f8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005fc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005fe:	f7ff ffcd 	bl	800059c <SPI_RxByte>
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	2bff      	cmp	r3, #255	@ 0xff
 800060a:	d003      	beq.n	8000614 <SD_ReadyWait+0x24>
 800060c:	4b04      	ldr	r3, [pc, #16]	@ (8000620 <SD_ReadyWait+0x30>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1f4      	bne.n	80005fe <SD_ReadyWait+0xe>

	return res;
 8000614:	79fb      	ldrb	r3, [r7, #7]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	2000030e 	.word	0x2000030e

08000624 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800062a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800062e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000630:	f7ff ff70 	bl	8000514 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	e005      	b.n	8000646 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800063a:	20ff      	movs	r0, #255	@ 0xff
 800063c:	f7ff ff7a 	bl	8000534 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	3301      	adds	r3, #1
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	2b09      	cmp	r3, #9
 800064a:	ddf6      	ble.n	800063a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800064c:	f7ff ff52 	bl	80004f4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000650:	2340      	movs	r3, #64	@ 0x40
 8000652:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000664:	2395      	movs	r3, #149	@ 0x95
 8000666:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000668:	463b      	mov	r3, r7
 800066a:	2106      	movs	r1, #6
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ff7b 	bl	8000568 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000672:	e002      	b.n	800067a <SD_PowerOn+0x56>
	{
		cnt--;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	3b01      	subs	r3, #1
 8000678:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800067a:	f7ff ff8f 	bl	800059c <SPI_RxByte>
 800067e:	4603      	mov	r3, r0
 8000680:	2b01      	cmp	r3, #1
 8000682:	d002      	beq.n	800068a <SD_PowerOn+0x66>
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f4      	bne.n	8000674 <SD_PowerOn+0x50>
	}

	DESELECT();
 800068a:	f7ff ff43 	bl	8000514 <DESELECT>
	SPI_TxByte(0XFF);
 800068e:	20ff      	movs	r0, #255	@ 0xff
 8000690:	f7ff ff50 	bl	8000534 <SPI_TxByte>

	PowerFlag = 1;
 8000694:	4b03      	ldr	r3, [pc, #12]	@ (80006a4 <SD_PowerOn+0x80>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000311 	.word	0x20000311

080006a8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80006ac:	4b03      	ldr	r3, [pc, #12]	@ (80006bc <SD_PowerOff+0x14>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	20000311 	.word	0x20000311

080006c0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80006c4:	4b03      	ldr	r3, [pc, #12]	@ (80006d4 <SD_CheckPower+0x14>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	20000311 	.word	0x20000311

080006d8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006e2:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <SD_RxDataBlock+0x58>)
 80006e4:	22c8      	movs	r2, #200	@ 0xc8
 80006e6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006e8:	f7ff ff58 	bl	800059c <SPI_RxByte>
 80006ec:	4603      	mov	r3, r0
 80006ee:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2bff      	cmp	r3, #255	@ 0xff
 80006f4:	d103      	bne.n	80006fe <SD_RxDataBlock+0x26>
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <SD_RxDataBlock+0x58>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d1f4      	bne.n	80006e8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	2bfe      	cmp	r3, #254	@ 0xfe
 8000702:	d001      	beq.n	8000708 <SD_RxDataBlock+0x30>
 8000704:	2300      	movs	r3, #0
 8000706:	e00f      	b.n	8000728 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	607a      	str	r2, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff60 	bl	80005d4 <SPI_RxBytePtr>
	} while(len--);
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	1e5a      	subs	r2, r3, #1
 8000718:	603a      	str	r2, [r7, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f4      	bne.n	8000708 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800071e:	f7ff ff3d 	bl	800059c <SPI_RxByte>
	SPI_RxByte();
 8000722:	f7ff ff3b 	bl	800059c <SPI_RxByte>

	return TRUE;
 8000726:	2301      	movs	r3, #1
}
 8000728:	4618      	mov	r0, r3
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000030c 	.word	0x2000030c

08000734 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000744:	f7ff ff54 	bl	80005f0 <SD_ReadyWait>
 8000748:	4603      	mov	r3, r0
 800074a:	2bff      	cmp	r3, #255	@ 0xff
 800074c:	d001      	beq.n	8000752 <SD_TxDataBlock+0x1e>
 800074e:	2300      	movs	r3, #0
 8000750:	e02f      	b.n	80007b2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000752:	78fb      	ldrb	r3, [r7, #3]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff feed 	bl	8000534 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	2bfd      	cmp	r3, #253	@ 0xfd
 800075e:	d020      	beq.n	80007a2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000760:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff feff 	bl	8000568 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800076a:	f7ff ff17 	bl	800059c <SPI_RxByte>
		SPI_RxByte();
 800076e:	f7ff ff15 	bl	800059c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000772:	e00b      	b.n	800078c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000774:	f7ff ff12 	bl	800059c <SPI_RxByte>
 8000778:	4603      	mov	r3, r0
 800077a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	f003 031f 	and.w	r3, r3, #31
 8000782:	2b05      	cmp	r3, #5
 8000784:	d006      	beq.n	8000794 <SD_TxDataBlock+0x60>
			i++;
 8000786:	7bbb      	ldrb	r3, [r7, #14]
 8000788:	3301      	adds	r3, #1
 800078a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800078c:	7bbb      	ldrb	r3, [r7, #14]
 800078e:	2b40      	cmp	r3, #64	@ 0x40
 8000790:	d9f0      	bls.n	8000774 <SD_TxDataBlock+0x40>
 8000792:	e000      	b.n	8000796 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000794:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000796:	bf00      	nop
 8000798:	f7ff ff00 	bl	800059c <SPI_RxByte>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0fa      	beq.n	8000798 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	f003 031f 	and.w	r3, r3, #31
 80007a8:	2b05      	cmp	r3, #5
 80007aa:	d101      	bne.n	80007b0 <SD_TxDataBlock+0x7c>
 80007ac:	2301      	movs	r3, #1
 80007ae:	e000      	b.n	80007b2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b084      	sub	sp, #16
 80007be:	af00      	add	r7, sp, #0
 80007c0:	4603      	mov	r3, r0
 80007c2:	6039      	str	r1, [r7, #0]
 80007c4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80007c6:	f7ff ff13 	bl	80005f0 <SD_ReadyWait>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2bff      	cmp	r3, #255	@ 0xff
 80007ce:	d001      	beq.n	80007d4 <SD_SendCmd+0x1a>
 80007d0:	23ff      	movs	r3, #255	@ 0xff
 80007d2:	e042      	b.n	800085a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff feac 	bl	8000534 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	0e1b      	lsrs	r3, r3, #24
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fea6 	bl	8000534 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	0c1b      	lsrs	r3, r3, #16
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fea0 	bl	8000534 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	0a1b      	lsrs	r3, r3, #8
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fe9a 	bl	8000534 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fe95 	bl	8000534 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b40      	cmp	r3, #64	@ 0x40
 800080e:	d102      	bne.n	8000816 <SD_SendCmd+0x5c>
 8000810:	2395      	movs	r3, #149	@ 0x95
 8000812:	73fb      	strb	r3, [r7, #15]
 8000814:	e007      	b.n	8000826 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b48      	cmp	r3, #72	@ 0x48
 800081a:	d102      	bne.n	8000822 <SD_SendCmd+0x68>
 800081c:	2387      	movs	r3, #135	@ 0x87
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	e001      	b.n	8000826 <SD_SendCmd+0x6c>
	else crc = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fe83 	bl	8000534 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b4c      	cmp	r3, #76	@ 0x4c
 8000832:	d101      	bne.n	8000838 <SD_SendCmd+0x7e>
 8000834:	f7ff feb2 	bl	800059c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000838:	230a      	movs	r3, #10
 800083a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800083c:	f7ff feae 	bl	800059c <SPI_RxByte>
 8000840:	4603      	mov	r3, r0
 8000842:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000844:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000848:	2b00      	cmp	r3, #0
 800084a:	da05      	bge.n	8000858 <SD_SendCmd+0x9e>
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	3b01      	subs	r3, #1
 8000850:	73bb      	strb	r3, [r7, #14]
 8000852:	7bbb      	ldrb	r3, [r7, #14]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1f1      	bne.n	800083c <SD_SendCmd+0x82>

	return res;
 8000858:	7b7b      	ldrb	r3, [r7, #13]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SD_disk_initialize+0x14>
 8000874:	2301      	movs	r3, #1
 8000876:	e0d1      	b.n	8000a1c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000878:	4b6a      	ldr	r3, [pc, #424]	@ (8000a24 <SD_disk_initialize+0x1c0>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	2b00      	cmp	r3, #0
 8000884:	d003      	beq.n	800088e <SD_disk_initialize+0x2a>
 8000886:	4b67      	ldr	r3, [pc, #412]	@ (8000a24 <SD_disk_initialize+0x1c0>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	e0c6      	b.n	8000a1c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800088e:	f7ff fec9 	bl	8000624 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000892:	f7ff fe2f 	bl	80004f4 <SELECT>

	/* check disk type */
	type = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800089a:	2100      	movs	r1, #0
 800089c:	2040      	movs	r0, #64	@ 0x40
 800089e:	f7ff ff8c 	bl	80007ba <SD_SendCmd>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	f040 80a1 	bne.w	80009ec <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80008aa:	4b5f      	ldr	r3, [pc, #380]	@ (8000a28 <SD_disk_initialize+0x1c4>)
 80008ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80008b2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80008b6:	2048      	movs	r0, #72	@ 0x48
 80008b8:	f7ff ff7f 	bl	80007ba <SD_SendCmd>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d155      	bne.n	800096e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	73fb      	strb	r3, [r7, #15]
 80008c6:	e00c      	b.n	80008e2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008c8:	7bfc      	ldrb	r4, [r7, #15]
 80008ca:	f7ff fe67 	bl	800059c <SPI_RxByte>
 80008ce:	4603      	mov	r3, r0
 80008d0:	461a      	mov	r2, r3
 80008d2:	f104 0310 	add.w	r3, r4, #16
 80008d6:	443b      	add	r3, r7
 80008d8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	3301      	adds	r3, #1
 80008e0:	73fb      	strb	r3, [r7, #15]
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	d9ef      	bls.n	80008c8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008e8:	7abb      	ldrb	r3, [r7, #10]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d17e      	bne.n	80009ec <SD_disk_initialize+0x188>
 80008ee:	7afb      	ldrb	r3, [r7, #11]
 80008f0:	2baa      	cmp	r3, #170	@ 0xaa
 80008f2:	d17b      	bne.n	80009ec <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008f4:	2100      	movs	r1, #0
 80008f6:	2077      	movs	r0, #119	@ 0x77
 80008f8:	f7ff ff5f 	bl	80007ba <SD_SendCmd>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d807      	bhi.n	8000912 <SD_disk_initialize+0xae>
 8000902:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000906:	2069      	movs	r0, #105	@ 0x69
 8000908:	f7ff ff57 	bl	80007ba <SD_SendCmd>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d004      	beq.n	800091c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000912:	4b45      	ldr	r3, [pc, #276]	@ (8000a28 <SD_disk_initialize+0x1c4>)
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1ec      	bne.n	80008f4 <SD_disk_initialize+0x90>
 800091a:	e000      	b.n	800091e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800091c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800091e:	4b42      	ldr	r3, [pc, #264]	@ (8000a28 <SD_disk_initialize+0x1c4>)
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d062      	beq.n	80009ec <SD_disk_initialize+0x188>
 8000926:	2100      	movs	r1, #0
 8000928:	207a      	movs	r0, #122	@ 0x7a
 800092a:	f7ff ff46 	bl	80007ba <SD_SendCmd>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d15b      	bne.n	80009ec <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000934:	2300      	movs	r3, #0
 8000936:	73fb      	strb	r3, [r7, #15]
 8000938:	e00c      	b.n	8000954 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800093a:	7bfc      	ldrb	r4, [r7, #15]
 800093c:	f7ff fe2e 	bl	800059c <SPI_RxByte>
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	f104 0310 	add.w	r3, r4, #16
 8000948:	443b      	add	r3, r7
 800094a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	3301      	adds	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	2b03      	cmp	r3, #3
 8000958:	d9ef      	bls.n	800093a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800095a:	7a3b      	ldrb	r3, [r7, #8]
 800095c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SD_disk_initialize+0x104>
 8000964:	230c      	movs	r3, #12
 8000966:	e000      	b.n	800096a <SD_disk_initialize+0x106>
 8000968:	2304      	movs	r3, #4
 800096a:	73bb      	strb	r3, [r7, #14]
 800096c:	e03e      	b.n	80009ec <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800096e:	2100      	movs	r1, #0
 8000970:	2077      	movs	r0, #119	@ 0x77
 8000972:	f7ff ff22 	bl	80007ba <SD_SendCmd>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	d808      	bhi.n	800098e <SD_disk_initialize+0x12a>
 800097c:	2100      	movs	r1, #0
 800097e:	2069      	movs	r0, #105	@ 0x69
 8000980:	f7ff ff1b 	bl	80007ba <SD_SendCmd>
 8000984:	4603      	mov	r3, r0
 8000986:	2b01      	cmp	r3, #1
 8000988:	d801      	bhi.n	800098e <SD_disk_initialize+0x12a>
 800098a:	2302      	movs	r3, #2
 800098c:	e000      	b.n	8000990 <SD_disk_initialize+0x12c>
 800098e:	2301      	movs	r3, #1
 8000990:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000992:	7bbb      	ldrb	r3, [r7, #14]
 8000994:	2b02      	cmp	r3, #2
 8000996:	d10e      	bne.n	80009b6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000998:	2100      	movs	r1, #0
 800099a:	2077      	movs	r0, #119	@ 0x77
 800099c:	f7ff ff0d 	bl	80007ba <SD_SendCmd>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d80e      	bhi.n	80009c4 <SD_disk_initialize+0x160>
 80009a6:	2100      	movs	r1, #0
 80009a8:	2069      	movs	r0, #105	@ 0x69
 80009aa:	f7ff ff06 	bl	80007ba <SD_SendCmd>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d107      	bne.n	80009c4 <SD_disk_initialize+0x160>
 80009b4:	e00c      	b.n	80009d0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009b6:	2100      	movs	r1, #0
 80009b8:	2041      	movs	r0, #65	@ 0x41
 80009ba:	f7ff fefe 	bl	80007ba <SD_SendCmd>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d004      	beq.n	80009ce <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80009c4:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <SD_disk_initialize+0x1c4>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1e2      	bne.n	8000992 <SD_disk_initialize+0x12e>
 80009cc:	e000      	b.n	80009d0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009ce:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009d0:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <SD_disk_initialize+0x1c4>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d007      	beq.n	80009e8 <SD_disk_initialize+0x184>
 80009d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009dc:	2050      	movs	r0, #80	@ 0x50
 80009de:	f7ff feec 	bl	80007ba <SD_SendCmd>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SD_disk_initialize+0x188>
 80009e8:	2300      	movs	r3, #0
 80009ea:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009ec:	4a0f      	ldr	r2, [pc, #60]	@ (8000a2c <SD_disk_initialize+0x1c8>)
 80009ee:	7bbb      	ldrb	r3, [r7, #14]
 80009f0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009f2:	f7ff fd8f 	bl	8000514 <DESELECT>
	SPI_RxByte();
 80009f6:	f7ff fdd1 	bl	800059c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009fa:	7bbb      	ldrb	r3, [r7, #14]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d008      	beq.n	8000a12 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a00:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <SD_disk_initialize+0x1c0>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	f023 0301 	bic.w	r3, r3, #1
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <SD_disk_initialize+0x1c0>)
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e001      	b.n	8000a16 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a12:	f7ff fe49 	bl	80006a8 <SD_PowerOff>
	}

	return Stat;
 8000a16:	4b03      	ldr	r3, [pc, #12]	@ (8000a24 <SD_disk_initialize+0x1c0>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	20000048 	.word	0x20000048
 8000a28:	2000030c 	.word	0x2000030c
 8000a2c:	20000310 	.word	0x20000310

08000a30 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SD_disk_status+0x14>
 8000a40:	2301      	movs	r3, #1
 8000a42:	e002      	b.n	8000a4a <SD_disk_status+0x1a>
	return Stat;
 8000a44:	4b04      	ldr	r3, [pc, #16]	@ (8000a58 <SD_disk_status+0x28>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b2db      	uxtb	r3, r3
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000048 	.word	0x20000048

08000a5c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	4603      	mov	r3, r0
 8000a6a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <SD_disk_read+0x1c>
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d101      	bne.n	8000a7c <SD_disk_read+0x20>
 8000a78:	2304      	movs	r3, #4
 8000a7a:	e051      	b.n	8000b20 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b28 <SD_disk_read+0xcc>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SD_disk_read+0x32>
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	e048      	b.n	8000b20 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a8e:	4b27      	ldr	r3, [pc, #156]	@ (8000b2c <SD_disk_read+0xd0>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d102      	bne.n	8000aa0 <SD_disk_read+0x44>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	025b      	lsls	r3, r3, #9
 8000a9e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000aa0:	f7ff fd28 	bl	80004f4 <SELECT>

	if (count == 1)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d111      	bne.n	8000ace <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	2051      	movs	r0, #81	@ 0x51
 8000aae:	f7ff fe84 	bl	80007ba <SD_SendCmd>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d129      	bne.n	8000b0c <SD_disk_read+0xb0>
 8000ab8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000abc:	68b8      	ldr	r0, [r7, #8]
 8000abe:	f7ff fe0b 	bl	80006d8 <SD_RxDataBlock>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d021      	beq.n	8000b0c <SD_disk_read+0xb0>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	e01e      	b.n	8000b0c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	2052      	movs	r0, #82	@ 0x52
 8000ad2:	f7ff fe72 	bl	80007ba <SD_SendCmd>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d117      	bne.n	8000b0c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000adc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ae0:	68b8      	ldr	r0, [r7, #8]
 8000ae2:	f7ff fdf9 	bl	80006d8 <SD_RxDataBlock>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d00a      	beq.n	8000b02 <SD_disk_read+0xa6>
				buff += 512;
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000af2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1ed      	bne.n	8000adc <SD_disk_read+0x80>
 8000b00:	e000      	b.n	8000b04 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b02:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b04:	2100      	movs	r1, #0
 8000b06:	204c      	movs	r0, #76	@ 0x4c
 8000b08:	f7ff fe57 	bl	80007ba <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b0c:	f7ff fd02 	bl	8000514 <DESELECT>
	SPI_RxByte();
 8000b10:	f7ff fd44 	bl	800059c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf14      	ite	ne
 8000b1a:	2301      	movne	r3, #1
 8000b1c:	2300      	moveq	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000048 	.word	0x20000048
 8000b2c:	20000310 	.word	0x20000310

08000b30 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d102      	bne.n	8000b4c <SD_disk_write+0x1c>
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d101      	bne.n	8000b50 <SD_disk_write+0x20>
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	e06b      	b.n	8000c28 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b50:	4b37      	ldr	r3, [pc, #220]	@ (8000c30 <SD_disk_write+0x100>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SD_disk_write+0x32>
 8000b5e:	2303      	movs	r3, #3
 8000b60:	e062      	b.n	8000c28 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b62:	4b33      	ldr	r3, [pc, #204]	@ (8000c30 <SD_disk_write+0x100>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SD_disk_write+0x44>
 8000b70:	2302      	movs	r3, #2
 8000b72:	e059      	b.n	8000c28 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b74:	4b2f      	ldr	r3, [pc, #188]	@ (8000c34 <SD_disk_write+0x104>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <SD_disk_write+0x56>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	025b      	lsls	r3, r3, #9
 8000b84:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b86:	f7ff fcb5 	bl	80004f4 <SELECT>

	if (count == 1)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d110      	bne.n	8000bb2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b90:	6879      	ldr	r1, [r7, #4]
 8000b92:	2058      	movs	r0, #88	@ 0x58
 8000b94:	f7ff fe11 	bl	80007ba <SD_SendCmd>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d13a      	bne.n	8000c14 <SD_disk_write+0xe4>
 8000b9e:	21fe      	movs	r1, #254	@ 0xfe
 8000ba0:	68b8      	ldr	r0, [r7, #8]
 8000ba2:	f7ff fdc7 	bl	8000734 <SD_TxDataBlock>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d033      	beq.n	8000c14 <SD_disk_write+0xe4>
			count = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	e030      	b.n	8000c14 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000bb2:	4b20      	ldr	r3, [pc, #128]	@ (8000c34 <SD_disk_write+0x104>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d007      	beq.n	8000bce <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2077      	movs	r0, #119	@ 0x77
 8000bc2:	f7ff fdfa 	bl	80007ba <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000bc6:	6839      	ldr	r1, [r7, #0]
 8000bc8:	2057      	movs	r0, #87	@ 0x57
 8000bca:	f7ff fdf6 	bl	80007ba <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	2059      	movs	r0, #89	@ 0x59
 8000bd2:	f7ff fdf2 	bl	80007ba <SD_SendCmd>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d11b      	bne.n	8000c14 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bdc:	21fc      	movs	r1, #252	@ 0xfc
 8000bde:	68b8      	ldr	r0, [r7, #8]
 8000be0:	f7ff fda8 	bl	8000734 <SD_TxDataBlock>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d00a      	beq.n	8000c00 <SD_disk_write+0xd0>
				buff += 512;
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000bf0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1ee      	bne.n	8000bdc <SD_disk_write+0xac>
 8000bfe:	e000      	b.n	8000c02 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c00:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c02:	21fd      	movs	r1, #253	@ 0xfd
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff fd95 	bl	8000734 <SD_TxDataBlock>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d101      	bne.n	8000c14 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c10:	2301      	movs	r3, #1
 8000c12:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c14:	f7ff fc7e 	bl	8000514 <DESELECT>
	SPI_RxByte();
 8000c18:	f7ff fcc0 	bl	800059c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	bf14      	ite	ne
 8000c22:	2301      	movne	r3, #1
 8000c24:	2300      	moveq	r3, #0
 8000c26:	b2db      	uxtb	r3, r3
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000048 	.word	0x20000048
 8000c34:	20000310 	.word	0x20000310

08000c38 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b08b      	sub	sp, #44	@ 0x2c
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	603a      	str	r2, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
 8000c44:	460b      	mov	r3, r1
 8000c46:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SD_disk_ioctl+0x1e>
 8000c52:	2304      	movs	r3, #4
 8000c54:	e113      	b.n	8000e7e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	2b05      	cmp	r3, #5
 8000c60:	d124      	bne.n	8000cac <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c62:	6a3b      	ldr	r3, [r7, #32]
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d012      	beq.n	8000c90 <SD_disk_ioctl+0x58>
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	dc1a      	bgt.n	8000ca4 <SD_disk_ioctl+0x6c>
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <SD_disk_ioctl+0x40>
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d006      	beq.n	8000c84 <SD_disk_ioctl+0x4c>
 8000c76:	e015      	b.n	8000ca4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c78:	f7ff fd16 	bl	80006a8 <SD_PowerOff>
			res = RES_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c82:	e0fa      	b.n	8000e7a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c84:	f7ff fcce 	bl	8000624 <SD_PowerOn>
			res = RES_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c8e:	e0f4      	b.n	8000e7a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c90:	6a3b      	ldr	r3, [r7, #32]
 8000c92:	1c5c      	adds	r4, r3, #1
 8000c94:	f7ff fd14 	bl	80006c0 <SD_CheckPower>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ca2:	e0ea      	b.n	8000e7a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000caa:	e0e6      	b.n	8000e7a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000cac:	4b76      	ldr	r3, [pc, #472]	@ (8000e88 <SD_disk_ioctl+0x250>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SD_disk_ioctl+0x86>
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e0df      	b.n	8000e7e <SD_disk_ioctl+0x246>

		SELECT();
 8000cbe:	f7ff fc19 	bl	80004f4 <SELECT>

		switch (ctrl)
 8000cc2:	79bb      	ldrb	r3, [r7, #6]
 8000cc4:	2b0d      	cmp	r3, #13
 8000cc6:	f200 80c9 	bhi.w	8000e5c <SD_disk_ioctl+0x224>
 8000cca:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd0 <SD_disk_ioctl+0x98>)
 8000ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd0:	08000dc7 	.word	0x08000dc7
 8000cd4:	08000d09 	.word	0x08000d09
 8000cd8:	08000db7 	.word	0x08000db7
 8000cdc:	08000e5d 	.word	0x08000e5d
 8000ce0:	08000e5d 	.word	0x08000e5d
 8000ce4:	08000e5d 	.word	0x08000e5d
 8000ce8:	08000e5d 	.word	0x08000e5d
 8000cec:	08000e5d 	.word	0x08000e5d
 8000cf0:	08000e5d 	.word	0x08000e5d
 8000cf4:	08000e5d 	.word	0x08000e5d
 8000cf8:	08000e5d 	.word	0x08000e5d
 8000cfc:	08000dd9 	.word	0x08000dd9
 8000d00:	08000dfd 	.word	0x08000dfd
 8000d04:	08000e21 	.word	0x08000e21
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2049      	movs	r0, #73	@ 0x49
 8000d0c:	f7ff fd55 	bl	80007ba <SD_SendCmd>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 80a6 	bne.w	8000e64 <SD_disk_ioctl+0x22c>
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2110      	movs	r1, #16
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fcda 	bl	80006d8 <SD_RxDataBlock>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 809c 	beq.w	8000e64 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000d2c:	7b3b      	ldrb	r3, [r7, #12]
 8000d2e:	099b      	lsrs	r3, r3, #6
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d10d      	bne.n	8000d52 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d36:	7d7b      	ldrb	r3, [r7, #21]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	7d3b      	ldrb	r3, [r7, #20]
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	4413      	add	r3, r2
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	3301      	adds	r3, #1
 8000d46:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d48:	8bfb      	ldrh	r3, [r7, #30]
 8000d4a:	029a      	lsls	r2, r3, #10
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	e02d      	b.n	8000dae <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d52:	7c7b      	ldrb	r3, [r7, #17]
 8000d54:	f003 030f 	and.w	r3, r3, #15
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	7dbb      	ldrb	r3, [r7, #22]
 8000d5c:	09db      	lsrs	r3, r3, #7
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	4413      	add	r3, r2
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	7d7b      	ldrb	r3, [r7, #21]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	f003 0306 	and.w	r3, r3, #6
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	4413      	add	r3, r2
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	3302      	adds	r3, #2
 8000d76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d7a:	7d3b      	ldrb	r3, [r7, #20]
 8000d7c:	099b      	lsrs	r3, r3, #6
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	461a      	mov	r2, r3
 8000d82:	7cfb      	ldrb	r3, [r7, #19]
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	4413      	add	r3, r2
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	7cbb      	ldrb	r3, [r7, #18]
 8000d8e:	029b      	lsls	r3, r3, #10
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4413      	add	r3, r2
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000da0:	8bfa      	ldrh	r2, [r7, #30]
 8000da2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000da6:	3b09      	subs	r3, #9
 8000da8:	409a      	lsls	r2, r3
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000db4:	e056      	b.n	8000e64 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dbc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dc4:	e055      	b.n	8000e72 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000dc6:	f7ff fc13 	bl	80005f0 <SD_ReadyWait>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2bff      	cmp	r3, #255	@ 0xff
 8000dce:	d14b      	bne.n	8000e68 <SD_disk_ioctl+0x230>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dd6:	e047      	b.n	8000e68 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2049      	movs	r0, #73	@ 0x49
 8000ddc:	f7ff fced 	bl	80007ba <SD_SendCmd>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d142      	bne.n	8000e6c <SD_disk_ioctl+0x234>
 8000de6:	2110      	movs	r1, #16
 8000de8:	6a38      	ldr	r0, [r7, #32]
 8000dea:	f7ff fc75 	bl	80006d8 <SD_RxDataBlock>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d03b      	beq.n	8000e6c <SD_disk_ioctl+0x234>
 8000df4:	2300      	movs	r3, #0
 8000df6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dfa:	e037      	b.n	8000e6c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	204a      	movs	r0, #74	@ 0x4a
 8000e00:	f7ff fcdb 	bl	80007ba <SD_SendCmd>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d132      	bne.n	8000e70 <SD_disk_ioctl+0x238>
 8000e0a:	2110      	movs	r1, #16
 8000e0c:	6a38      	ldr	r0, [r7, #32]
 8000e0e:	f7ff fc63 	bl	80006d8 <SD_RxDataBlock>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d02b      	beq.n	8000e70 <SD_disk_ioctl+0x238>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e1e:	e027      	b.n	8000e70 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e20:	2100      	movs	r1, #0
 8000e22:	207a      	movs	r0, #122	@ 0x7a
 8000e24:	f7ff fcc9 	bl	80007ba <SD_SendCmd>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d116      	bne.n	8000e5c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e34:	e00b      	b.n	8000e4e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000e36:	6a3c      	ldr	r4, [r7, #32]
 8000e38:	1c63      	adds	r3, r4, #1
 8000e3a:	623b      	str	r3, [r7, #32]
 8000e3c:	f7ff fbae 	bl	800059c <SPI_RxByte>
 8000e40:	4603      	mov	r3, r0
 8000e42:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e48:	3301      	adds	r3, #1
 8000e4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d9ef      	bls.n	8000e36 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e62:	e006      	b.n	8000e72 <SD_disk_ioctl+0x23a>
			break;
 8000e64:	bf00      	nop
 8000e66:	e004      	b.n	8000e72 <SD_disk_ioctl+0x23a>
			break;
 8000e68:	bf00      	nop
 8000e6a:	e002      	b.n	8000e72 <SD_disk_ioctl+0x23a>
			break;
 8000e6c:	bf00      	nop
 8000e6e:	e000      	b.n	8000e72 <SD_disk_ioctl+0x23a>
			break;
 8000e70:	bf00      	nop
		}

		DESELECT();
 8000e72:	f7ff fb4f 	bl	8000514 <DESELECT>
		SPI_RxByte();
 8000e76:	f7ff fb91 	bl	800059c <SPI_RxByte>
	}

	return res;
 8000e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	372c      	adds	r7, #44	@ 0x2c
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd90      	pop	{r4, r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000048 	.word	0x20000048

08000e8c <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8000e90:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8000e94:	4803      	ldr	r0, [pc, #12]	@ (8000ea4 <GUI_X_Config+0x18>)
 8000e96:	f005 fd85 	bl	80069a4 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8000e9a:	4803      	ldr	r0, [pc, #12]	@ (8000ea8 <GUI_X_Config+0x1c>)
 8000e9c:	f006 feae 	bl	8007bfc <GUI_SetDefaultFont>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000314 	.word	0x20000314
 8000ea8:	0800c998 	.word	0x0800c998

08000eac <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <LcdWriteReg>:
*
* Function description:
*   Sets display register
*/
static void LcdWriteReg(U8 Data)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2102      	movs	r1, #2
 8000eca:	480b      	ldr	r0, [pc, #44]	@ (8000ef8 <LcdWriteReg+0x3c>)
 8000ecc:	f001 f952 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	4808      	ldr	r0, [pc, #32]	@ (8000ef8 <LcdWriteReg+0x3c>)
 8000ed6:	f001 f94d 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 1);
 8000eda:	1df9      	adds	r1, r7, #7
 8000edc:	2301      	movs	r3, #1
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4806      	ldr	r0, [pc, #24]	@ (8000efc <LcdWriteReg+0x40>)
 8000ee2:	f001 fe72 	bl	8002bca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2102      	movs	r1, #2
 8000eea:	4803      	ldr	r0, [pc, #12]	@ (8000ef8 <LcdWriteReg+0x3c>)
 8000eec:	f001 f942 	bl	8002174 <HAL_GPIO_WritePin>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	20007b1c 	.word	0x20007b1c

08000f00 <LcdReadReg>:
*       LcdWriteReg
*
* Function description:
*   Sets display register
*/
static U8 LcdReadReg(void) {
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  // ... TBD by user
	return 0;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LcdWriteData>:
*
* Function description:
*   Writes a value to a display register
*/
static void LcdWriteData(U8 Data)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	480b      	ldr	r0, [pc, #44]	@ (8000f4c <LcdWriteData+0x3c>)
 8000f20:	f001 f928 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2104      	movs	r1, #4
 8000f28:	4808      	ldr	r0, [pc, #32]	@ (8000f4c <LcdWriteData+0x3c>)
 8000f2a:	f001 f923 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 1);
 8000f2e:	1df9      	adds	r1, r7, #7
 8000f30:	2301      	movs	r3, #1
 8000f32:	2201      	movs	r2, #1
 8000f34:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <LcdWriteData+0x40>)
 8000f36:	f001 fe48 	bl	8002bca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <LcdWriteData+0x3c>)
 8000f40:	f001 f918 	bl	8002174 <HAL_GPIO_WritePin>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	20007b1c 	.word	0x20007b1c

08000f54 <LcdWriteDataMultiple>:
*       LcdWriteDataMultiple
*
* Function description:
*   Writes multiple values to a display register.
*/
static void LcdWriteDataMultiple(U8 * pData, int NumItems) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]

	while (NumItems--)
 8000f5e:	e011      	b.n	8000f84 <LcdWriteDataMultiple+0x30>
	{
		HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2102      	movs	r1, #2
 8000f64:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <LcdWriteDataMultiple+0x44>)
 8000f66:	f001 f905 	bl	8002174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	480a      	ldr	r0, [pc, #40]	@ (8000f98 <LcdWriteDataMultiple+0x44>)
 8000f70:	f001 f900 	bl	8002174 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, pData++, 1, 1);
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	1c4b      	adds	r3, r1, #1
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <LcdWriteDataMultiple+0x48>)
 8000f80:	f001 fe23 	bl	8002bca <HAL_SPI_Transmit>
	while (NumItems--)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	1e5a      	subs	r2, r3, #1
 8000f88:	603a      	str	r2, [r7, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1e8      	bne.n	8000f60 <LcdWriteDataMultiple+0xc>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	20007b1c 	.word	0x20007b1c

08000fa0 <LcdReadDataMultiple>:
*       LcdReadDataMultiple
*
* Function description:
*   Reads multiple values from a display register.
*/
static void LcdReadDataMultiple(U8 * pData, int NumItems) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  while (NumItems--) {
 8000faa:	bf00      	nop
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	1e5a      	subs	r2, r3, #1
 8000fb0:	603a      	str	r2, [r7, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1fa      	bne.n	8000fac <LcdReadDataMultiple+0xc>
    // ... TBD by user
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LcdInit>:

void LcdInit(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2102      	movs	r1, #2
 8000fce:	489a      	ldr	r0, [pc, #616]	@ (8001238 <LcdInit+0x274>)
 8000fd0:	f001 f8d0 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	4897      	ldr	r0, [pc, #604]	@ (8001238 <LcdInit+0x274>)
 8000fda:	f001 f8cb 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	4895      	ldr	r0, [pc, #596]	@ (8001238 <LcdInit+0x274>)
 8000fe4:	f001 f8c6 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_Delay(2);//Reset delay
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f000 fdd5 	bl	8001b98 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	4891      	ldr	r0, [pc, #580]	@ (8001238 <LcdInit+0x274>)
 8000ff4:	f001 f8be 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	488e      	ldr	r0, [pc, #568]	@ (8001238 <LcdInit+0x274>)
 8000ffe:	f001 f8b9 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	2108      	movs	r1, #8
 8001006:	488c      	ldr	r0, [pc, #560]	@ (8001238 <LcdInit+0x274>)
 8001008:	f001 f8b4 	bl	8002174 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<3; i++)  {
 800100c:	2300      	movs	r3, #0
 800100e:	71fb      	strb	r3, [r7, #7]
 8001010:	e005      	b.n	800101e <LcdInit+0x5a>
		LcdWriteReg(0x00);
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff ff52 	bl	8000ebc <LcdWriteReg>
	for(uint8_t i=0; i<3; i++)  {
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	3301      	adds	r3, #1
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d9f6      	bls.n	8001012 <LcdInit+0x4e>
	} // Three extra 0x00s
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2102      	movs	r1, #2
 8001028:	4883      	ldr	r0, [pc, #524]	@ (8001238 <LcdInit+0x274>)
 800102a:	f001 f8a3 	bl	8002174 <HAL_GPIO_WritePin>

//ILI9341 initialization sequence

	LcdWriteReg(0x01);//soft reset
 800102e:	2001      	movs	r0, #1
 8001030:	f7ff ff44 	bl	8000ebc <LcdWriteReg>
	HAL_Delay(1000);
 8001034:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001038:	f000 fdae 	bl	8001b98 <HAL_Delay>
	//power control A
	LcdWriteReg(0xCB);
 800103c:	20cb      	movs	r0, #203	@ 0xcb
 800103e:	f7ff ff3d 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x39);
 8001042:	2039      	movs	r0, #57	@ 0x39
 8001044:	f7ff ff64 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x2C);
 8001048:	202c      	movs	r0, #44	@ 0x2c
 800104a:	f7ff ff61 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x00);
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff ff5e 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x34);
 8001054:	2034      	movs	r0, #52	@ 0x34
 8001056:	f7ff ff5b 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x02);
 800105a:	2002      	movs	r0, #2
 800105c:	f7ff ff58 	bl	8000f10 <LcdWriteData>

	//power control B
	LcdWriteReg(0xCF);
 8001060:	20cf      	movs	r0, #207	@ 0xcf
 8001062:	f7ff ff2b 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x00);
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff ff52 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0xC1);
 800106c:	20c1      	movs	r0, #193	@ 0xc1
 800106e:	f7ff ff4f 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x30);
 8001072:	2030      	movs	r0, #48	@ 0x30
 8001074:	f7ff ff4c 	bl	8000f10 <LcdWriteData>

	//driver timing control A
	LcdWriteReg(0xE8);
 8001078:	20e8      	movs	r0, #232	@ 0xe8
 800107a:	f7ff ff1f 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x85);
 800107e:	2085      	movs	r0, #133	@ 0x85
 8001080:	f7ff ff46 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x00);
 8001084:	2000      	movs	r0, #0
 8001086:	f7ff ff43 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x78);
 800108a:	2078      	movs	r0, #120	@ 0x78
 800108c:	f7ff ff40 	bl	8000f10 <LcdWriteData>

	//driver timing control B
	LcdWriteReg(0xEA);
 8001090:	20ea      	movs	r0, #234	@ 0xea
 8001092:	f7ff ff13 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x00);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ff3a 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x00);
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff ff37 	bl	8000f10 <LcdWriteData>

	//power on sequence control
	LcdWriteReg(0xED);
 80010a2:	20ed      	movs	r0, #237	@ 0xed
 80010a4:	f7ff ff0a 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x64);
 80010a8:	2064      	movs	r0, #100	@ 0x64
 80010aa:	f7ff ff31 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x03);
 80010ae:	2003      	movs	r0, #3
 80010b0:	f7ff ff2e 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x12);
 80010b4:	2012      	movs	r0, #18
 80010b6:	f7ff ff2b 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x81);
 80010ba:	2081      	movs	r0, #129	@ 0x81
 80010bc:	f7ff ff28 	bl	8000f10 <LcdWriteData>

	//pump ratio control
	LcdWriteReg(0xF7);
 80010c0:	20f7      	movs	r0, #247	@ 0xf7
 80010c2:	f7ff fefb 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x20);
 80010c6:	2020      	movs	r0, #32
 80010c8:	f7ff ff22 	bl	8000f10 <LcdWriteData>

	//power control,VRH[5:0]
	LcdWriteReg(0xC0);
 80010cc:	20c0      	movs	r0, #192	@ 0xc0
 80010ce:	f7ff fef5 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x23);
 80010d2:	2023      	movs	r0, #35	@ 0x23
 80010d4:	f7ff ff1c 	bl	8000f10 <LcdWriteData>

	//Power control,SAP[2:0];BT[3:0]
	LcdWriteReg(0xC1);
 80010d8:	20c1      	movs	r0, #193	@ 0xc1
 80010da:	f7ff feef 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x10);
 80010de:	2010      	movs	r0, #16
 80010e0:	f7ff ff16 	bl	8000f10 <LcdWriteData>

	//vcm control
	LcdWriteReg(0xC5);
 80010e4:	20c5      	movs	r0, #197	@ 0xc5
 80010e6:	f7ff fee9 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x3E);
 80010ea:	203e      	movs	r0, #62	@ 0x3e
 80010ec:	f7ff ff10 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x28);
 80010f0:	2028      	movs	r0, #40	@ 0x28
 80010f2:	f7ff ff0d 	bl	8000f10 <LcdWriteData>

	//vcm control 2
	LcdWriteReg(0xC7);
 80010f6:	20c7      	movs	r0, #199	@ 0xc7
 80010f8:	f7ff fee0 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x86);
 80010fc:	2086      	movs	r0, #134	@ 0x86
 80010fe:	f7ff ff07 	bl	8000f10 <LcdWriteData>

	//memory access control
	LcdWriteReg(0x36);
 8001102:	2036      	movs	r0, #54	@ 0x36
 8001104:	f7ff feda 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x48);
 8001108:	2048      	movs	r0, #72	@ 0x48
 800110a:	f7ff ff01 	bl	8000f10 <LcdWriteData>

	//pixel format
	LcdWriteReg(0x3A);
 800110e:	203a      	movs	r0, #58	@ 0x3a
 8001110:	f7ff fed4 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x55);
 8001114:	2055      	movs	r0, #85	@ 0x55
 8001116:	f7ff fefb 	bl	8000f10 <LcdWriteData>

	//frameration control,normal mode full colours
	LcdWriteReg(0xB1);
 800111a:	20b1      	movs	r0, #177	@ 0xb1
 800111c:	f7ff fece 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x00);
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff fef5 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x18);
 8001126:	2018      	movs	r0, #24
 8001128:	f7ff fef2 	bl	8000f10 <LcdWriteData>

	//display function control
	LcdWriteReg(0xB6);
 800112c:	20b6      	movs	r0, #182	@ 0xb6
 800112e:	f7ff fec5 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x08);
 8001132:	2008      	movs	r0, #8
 8001134:	f7ff feec 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x82);
 8001138:	2082      	movs	r0, #130	@ 0x82
 800113a:	f7ff fee9 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x27);
 800113e:	2027      	movs	r0, #39	@ 0x27
 8001140:	f7ff fee6 	bl	8000f10 <LcdWriteData>

	//3gamma function disable
	LcdWriteReg(0xF2);
 8001144:	20f2      	movs	r0, #242	@ 0xf2
 8001146:	f7ff feb9 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x00);
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff fee0 	bl	8000f10 <LcdWriteData>

	//gamma curve selected
	LcdWriteReg(0x26);
 8001150:	2026      	movs	r0, #38	@ 0x26
 8001152:	f7ff feb3 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x01);
 8001156:	2001      	movs	r0, #1
 8001158:	f7ff feda 	bl	8000f10 <LcdWriteData>

	//set positive gamma correction
	LcdWriteReg(0xE0);
 800115c:	20e0      	movs	r0, #224	@ 0xe0
 800115e:	f7ff fead 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x0F);
 8001162:	200f      	movs	r0, #15
 8001164:	f7ff fed4 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x31);
 8001168:	2031      	movs	r0, #49	@ 0x31
 800116a:	f7ff fed1 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x2B);
 800116e:	202b      	movs	r0, #43	@ 0x2b
 8001170:	f7ff fece 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x0C);
 8001174:	200c      	movs	r0, #12
 8001176:	f7ff fecb 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x0E);
 800117a:	200e      	movs	r0, #14
 800117c:	f7ff fec8 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x08);
 8001180:	2008      	movs	r0, #8
 8001182:	f7ff fec5 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x4E);
 8001186:	204e      	movs	r0, #78	@ 0x4e
 8001188:	f7ff fec2 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0xF1);
 800118c:	20f1      	movs	r0, #241	@ 0xf1
 800118e:	f7ff febf 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x37);
 8001192:	2037      	movs	r0, #55	@ 0x37
 8001194:	f7ff febc 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x07);
 8001198:	2007      	movs	r0, #7
 800119a:	f7ff feb9 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x10);
 800119e:	2010      	movs	r0, #16
 80011a0:	f7ff feb6 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x03);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f7ff feb3 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x0E);
 80011aa:	200e      	movs	r0, #14
 80011ac:	f7ff feb0 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x09);
 80011b0:	2009      	movs	r0, #9
 80011b2:	f7ff fead 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x00);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff feaa 	bl	8000f10 <LcdWriteData>

	//set negative gamma correction
	LcdWriteReg(0xE1);
 80011bc:	20e1      	movs	r0, #225	@ 0xe1
 80011be:	f7ff fe7d 	bl	8000ebc <LcdWriteReg>
	LcdWriteData(0x00);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff fea4 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x0E);
 80011c8:	200e      	movs	r0, #14
 80011ca:	f7ff fea1 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x14);
 80011ce:	2014      	movs	r0, #20
 80011d0:	f7ff fe9e 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x03);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f7ff fe9b 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x11);
 80011da:	2011      	movs	r0, #17
 80011dc:	f7ff fe98 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x07);
 80011e0:	2007      	movs	r0, #7
 80011e2:	f7ff fe95 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x31);
 80011e6:	2031      	movs	r0, #49	@ 0x31
 80011e8:	f7ff fe92 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0xC1);
 80011ec:	20c1      	movs	r0, #193	@ 0xc1
 80011ee:	f7ff fe8f 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x48);
 80011f2:	2048      	movs	r0, #72	@ 0x48
 80011f4:	f7ff fe8c 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x08);
 80011f8:	2008      	movs	r0, #8
 80011fa:	f7ff fe89 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x0F);
 80011fe:	200f      	movs	r0, #15
 8001200:	f7ff fe86 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x0C);
 8001204:	200c      	movs	r0, #12
 8001206:	f7ff fe83 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x31);
 800120a:	2031      	movs	r0, #49	@ 0x31
 800120c:	f7ff fe80 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x36);
 8001210:	2036      	movs	r0, #54	@ 0x36
 8001212:	f7ff fe7d 	bl	8000f10 <LcdWriteData>
	LcdWriteData(0x0F);
 8001216:	200f      	movs	r0, #15
 8001218:	f7ff fe7a 	bl	8000f10 <LcdWriteData>

	//exit sleep
	LcdWriteReg(0x11);
 800121c:	2011      	movs	r0, #17
 800121e:	f7ff fe4d 	bl	8000ebc <LcdWriteReg>
	HAL_Delay(120);
 8001222:	2078      	movs	r0, #120	@ 0x78
 8001224:	f000 fcb8 	bl	8001b98 <HAL_Delay>
	//display on
	LcdWriteReg(0x29);
 8001228:	2029      	movs	r0, #41	@ 0x29
 800122a:	f7ff fe47 	bl	8000ebc <LcdWriteReg>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020800 	.word	0x40020800

0800123c <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b0a0      	sub	sp, #128	@ 0x80
 8001240:	af00      	add	r7, sp, #0
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 8001242:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]
  GUI_PORT_API PortAPI = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2268      	movs	r2, #104	@ 0x68
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f00a ffa3 	bl	800c1a4 <memset>
  //
  // Set display driver and color conversion
  //
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_565, 0, 0);//16bit color flexcolor driver
 800125e:	2300      	movs	r3, #0
 8001260:	2200      	movs	r2, #0
 8001262:	4916      	ldr	r1, [pc, #88]	@ (80012bc <LCD_X_Config+0x80>)
 8001264:	4816      	ldr	r0, [pc, #88]	@ (80012c0 <LCD_X_Config+0x84>)
 8001266:	f006 fe7b 	bl	8007f60 <GUI_DEVICE_CreateAndLink>
 800126a:	67f8      	str	r0, [r7, #124]	@ 0x7c
  //
  // Display driver configuration, required for Lin-driver
  //
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 800126c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001270:	21f0      	movs	r1, #240	@ 0xf0
 8001272:	2000      	movs	r0, #0
 8001274:	f007 fc44 	bl	8008b00 <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);
 8001278:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800127c:	21f0      	movs	r1, #240	@ 0xf0
 800127e:	2000      	movs	r0, #0
 8001280:	f007 fc56 	bl	8008b30 <LCD_SetVSizeEx>
  //
  // Orientation
  //
  Config.Orientation = GUI_SWAP_XY;
 8001284:	2304      	movs	r3, #4
 8001286:	673b      	str	r3, [r7, #112]	@ 0x70
  GUIDRV_FlexColor_Config(pDevice, &Config);
 8001288:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800128c:	4619      	mov	r1, r3
 800128e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001290:	f007 ff4f 	bl	8009132 <GUIDRV_FlexColor_Config>
  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite8_A0  = LcdWriteReg;
 8001294:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <LCD_X_Config+0x88>)
 8001296:	603b      	str	r3, [r7, #0]
  PortAPI.pfWrite8_A1  = LcdWriteData;
 8001298:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <LCD_X_Config+0x8c>)
 800129a:	607b      	str	r3, [r7, #4]
  PortAPI.pfWriteM8_A1  = LcdWriteDataMultiple;
 800129c:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <LCD_X_Config+0x90>)
 800129e:	60fb      	str	r3, [r7, #12]
  PortAPI.pfRead8_A1  = LcdReadReg;
 80012a0:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <LCD_X_Config+0x94>)
 80012a2:	617b      	str	r3, [r7, #20]
  PortAPI.pfReadM8_A1 = LcdReadDataMultiple;
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <LCD_X_Config+0x98>)
 80012a6:	61fb      	str	r3, [r7, #28]

  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M16C0B8);//ILI9341, 16bit color, 8 bit bus, no cache
 80012a8:	4639      	mov	r1, r7
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <LCD_X_Config+0x9c>)
 80012ac:	4a0b      	ldr	r2, [pc, #44]	@ (80012dc <LCD_X_Config+0xa0>)
 80012ae:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80012b0:	f007 ff5d 	bl	800916e <GUIDRV_FlexColor_SetFunc>
}
 80012b4:	bf00      	nop
 80012b6:	3780      	adds	r7, #128	@ 0x80
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	0800c53c 	.word	0x0800c53c
 80012c0:	0800c938 	.word	0x0800c938
 80012c4:	08000ebd 	.word	0x08000ebd
 80012c8:	08000f11 	.word	0x08000f11
 80012cc:	08000f55 	.word	0x08000f55
 80012d0:	08000f01 	.word	0x08000f01
 80012d4:	08000fa1 	.word	0x08000fa1
 80012d8:	08009841 	.word	0x08009841
 80012dc:	08009bd5 	.word	0x08009bd5

080012e0 <LCD_X_DisplayDriver>:
* Return Value:
*   < -1 - Error
*     -1 - Command not handled
*      0 - Ok
*/
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d103      	bne.n	80012fa <LCD_X_DisplayDriver+0x1a>
  case LCD_X_INITCONTROLLER: {
	LcdInit();	//ili9341 init code
 80012f2:	f7ff fe67 	bl	8000fc4 <LcdInit>
    return 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e003      	b.n	8001302 <LCD_X_DisplayDriver+0x22>
  }
  default:
    r = -1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001300:	697b      	ldr	r3, [r7, #20]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <_GetData>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static int _GetData(void * p, const U8 ** ppData, unsigned NumBytesReq, U32 Offset) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
    UINT NumBytesRead;
    FIL* fp = (FIL*)p;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	617b      	str	r3, [r7, #20]
    if(f_lseek(fp, Offset) != FR_OK) return 0;
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	6978      	ldr	r0, [r7, #20]
 8001322:	f004 fe7a 	bl	800601a <f_lseek>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <_GetData+0x24>
 800132c:	2300      	movs	r3, #0
 800132e:	e00a      	b.n	8001346 <_GetData+0x3a>
    f_read(fp, _acBuffer, NumBytesReq, &NumBytesRead);
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4906      	ldr	r1, [pc, #24]	@ (8001350 <_GetData+0x44>)
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f004 fc67 	bl	8005c0c <f_read>
    *ppData = _acBuffer;
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	4a03      	ldr	r2, [pc, #12]	@ (8001350 <_GetData+0x44>)
 8001342:	601a      	str	r2, [r3, #0]
    return NumBytesRead;
 8001344:	693b      	ldr	r3, [r7, #16]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20009c90 	.word	0x20009c90

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001358:	f000 fbac 	bl	8001ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135c:	f000 f856 	bl	800140c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001360:	f000 f974 	bl	800164c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001364:	f000 f8d0 	bl	8001508 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001368:	f000 f904 	bl	8001574 <MX_SPI2_Init>
  MX_SPI3_Init();
 800136c:	f000 f938 	bl	80015e0 <MX_SPI3_Init>
  MX_CRC_Init();
 8001370:	f000 f8b6 	bl	80014e0 <MX_CRC_Init>
  MX_FATFS_Init();
 8001374:	f001 fff2 	bl	800335c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  GUI_Init();
 8001378:	f006 fcd0 	bl	8007d1c <GUI_Init>

  res = f_mount(&fileSystem, (TCHAR const*) "0:/", 1);
 800137c:	2201      	movs	r2, #1
 800137e:	491c      	ldr	r1, [pc, #112]	@ (80013f0 <main+0x9c>)
 8001380:	481c      	ldr	r0, [pc, #112]	@ (80013f4 <main+0xa0>)
 8001382:	f004 fa35 	bl	80057f0 <f_mount>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <main+0xa4>)
 800138c:	701a      	strb	r2, [r3, #0]
  if(res != FR_OK) while(1);
 800138e:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <main+0xa4>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <main+0x46>
 8001396:	bf00      	nop
 8001398:	e7fd      	b.n	8001396 <main+0x42>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      res = f_open(&ImgFile, file_name[i++], FA_OPEN_EXISTING | FA_READ);
 800139a:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <main+0xa8>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	b2d1      	uxtb	r1, r2
 80013a2:	4a16      	ldr	r2, [pc, #88]	@ (80013fc <main+0xa8>)
 80013a4:	7011      	strb	r1, [r2, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <main+0xac>)
 80013aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ae:	2201      	movs	r2, #1
 80013b0:	4619      	mov	r1, r3
 80013b2:	4814      	ldr	r0, [pc, #80]	@ (8001404 <main+0xb0>)
 80013b4:	f004 fa62 	bl	800587c <f_open>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <main+0xa4>)
 80013be:	701a      	strb	r2, [r3, #0]
      if (res == FR_OK)
 80013c0:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <main+0xa4>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d105      	bne.n	80013d4 <main+0x80>
          GUI_BMP_DrawEx(_GetData, &ImgFile, 0, 0);
 80013c8:	2300      	movs	r3, #0
 80013ca:	2200      	movs	r2, #0
 80013cc:	490d      	ldr	r1, [pc, #52]	@ (8001404 <main+0xb0>)
 80013ce:	480e      	ldr	r0, [pc, #56]	@ (8001408 <main+0xb4>)
 80013d0:	f006 f8b2 	bl	8007538 <GUI_BMP_DrawEx>
      f_close(&ImgFile);
 80013d4:	480b      	ldr	r0, [pc, #44]	@ (8001404 <main+0xb0>)
 80013d6:	f004 fdf6 	bl	8005fc6 <f_close>

      if(i>=43) i=0;
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <main+0xa8>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b2a      	cmp	r3, #42	@ 0x2a
 80013e0:	d902      	bls.n	80013e8 <main+0x94>
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <main+0xa8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
      HAL_Delay(0);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f000 fbd5 	bl	8001b98 <HAL_Delay>
      res = f_open(&ImgFile, file_name[i++], FA_OPEN_EXISTING | FA_READ);
 80013ee:	e7d4      	b.n	800139a <main+0x46>
 80013f0:	0800c4f0 	.word	0x0800c4f0
 80013f4:	20007c24 	.word	0x20007c24
 80013f8:	20009c8c 	.word	0x20009c8c
 80013fc:	2000a090 	.word	0x2000a090
 8001400:	2000004c 	.word	0x2000004c
 8001404:	20008c5c 	.word	0x20008c5c
 8001408:	0800130d 	.word	0x0800130d

0800140c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b094      	sub	sp, #80	@ 0x50
 8001410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001412:	f107 0320 	add.w	r3, r7, #32
 8001416:	2230      	movs	r2, #48	@ 0x30
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f00a fec2 	bl	800c1a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	4b28      	ldr	r3, [pc, #160]	@ (80014d8 <SystemClock_Config+0xcc>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	4a27      	ldr	r2, [pc, #156]	@ (80014d8 <SystemClock_Config+0xcc>)
 800143a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001440:	4b25      	ldr	r3, [pc, #148]	@ (80014d8 <SystemClock_Config+0xcc>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	4b22      	ldr	r3, [pc, #136]	@ (80014dc <SystemClock_Config+0xd0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a21      	ldr	r2, [pc, #132]	@ (80014dc <SystemClock_Config+0xd0>)
 8001456:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <SystemClock_Config+0xd0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001468:	2302      	movs	r3, #2
 800146a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800146c:	2301      	movs	r3, #1
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001470:	2310      	movs	r3, #16
 8001472:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001474:	2302      	movs	r3, #2
 8001476:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001478:	2300      	movs	r3, #0
 800147a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800147c:	2308      	movs	r3, #8
 800147e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001480:	23a8      	movs	r3, #168	@ 0xa8
 8001482:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001484:	2302      	movs	r3, #2
 8001486:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001488:	2304      	movs	r3, #4
 800148a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fead 	bl	80021f0 <HAL_RCC_OscConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800149c:	f000 f978 	bl	8001790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a0:	230f      	movs	r3, #15
 80014a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a4:	2302      	movs	r3, #2
 80014a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	2105      	movs	r1, #5
 80014be:	4618      	mov	r0, r3
 80014c0:	f001 f90e 	bl	80026e0 <HAL_RCC_ClockConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014ca:	f000 f961 	bl	8001790 <Error_Handler>
  }
}
 80014ce:	bf00      	nop
 80014d0:	3750      	adds	r7, #80	@ 0x50
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40007000 	.word	0x40007000

080014e0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <MX_CRC_Init+0x20>)
 80014e6:	4a07      	ldr	r2, [pc, #28]	@ (8001504 <MX_CRC_Init+0x24>)
 80014e8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	@ (8001500 <MX_CRC_Init+0x20>)
 80014ec:	f000 fc89 	bl	8001e02 <HAL_CRC_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80014f6:	f000 f94b 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20007b14 	.word	0x20007b14
 8001504:	40023000 	.word	0x40023000

08001508 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800150c:	4b17      	ldr	r3, [pc, #92]	@ (800156c <MX_SPI1_Init+0x64>)
 800150e:	4a18      	ldr	r2, [pc, #96]	@ (8001570 <MX_SPI1_Init+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001512:	4b16      	ldr	r3, [pc, #88]	@ (800156c <MX_SPI1_Init+0x64>)
 8001514:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001518:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800151a:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_SPI1_Init+0x64>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <MX_SPI1_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_SPI1_Init+0x64>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_SPI1_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_SPI1_Init+0x64>)
 8001534:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001538:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_SPI1_Init+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001540:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <MX_SPI1_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_SPI1_Init+0x64>)
 8001548:	2200      	movs	r2, #0
 800154a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <MX_SPI1_Init+0x64>)
 800154e:	2200      	movs	r2, #0
 8001550:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_SPI1_Init+0x64>)
 8001554:	220a      	movs	r2, #10
 8001556:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	@ (800156c <MX_SPI1_Init+0x64>)
 800155a:	f001 faad 	bl	8002ab8 <HAL_SPI_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001564:	f000 f914 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20007b1c 	.word	0x20007b1c
 8001570:	40013000 	.word	0x40013000

08001574 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001578:	4b17      	ldr	r3, [pc, #92]	@ (80015d8 <MX_SPI2_Init+0x64>)
 800157a:	4a18      	ldr	r2, [pc, #96]	@ (80015dc <MX_SPI2_Init+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800157e:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <MX_SPI2_Init+0x64>)
 8001580:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001584:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001586:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <MX_SPI2_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <MX_SPI2_Init+0x64>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_SPI2_Init+0x64>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <MX_SPI2_Init+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MX_SPI2_Init+0x64>)
 80015a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_SPI2_Init+0x64>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <MX_SPI2_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b2:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_SPI2_Init+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b8:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <MX_SPI2_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_SPI2_Init+0x64>)
 80015c0:	220a      	movs	r2, #10
 80015c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	@ (80015d8 <MX_SPI2_Init+0x64>)
 80015c6:	f001 fa77 	bl	8002ab8 <HAL_SPI_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80015d0:	f000 f8de 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20007b74 	.word	0x20007b74
 80015dc:	40003800 	.word	0x40003800

080015e0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80015e4:	4b17      	ldr	r3, [pc, #92]	@ (8001644 <MX_SPI3_Init+0x64>)
 80015e6:	4a18      	ldr	r2, [pc, #96]	@ (8001648 <MX_SPI3_Init+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015ea:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <MX_SPI3_Init+0x64>)
 80015ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015f2:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <MX_SPI3_Init+0x64>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f8:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <MX_SPI3_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fe:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <MX_SPI3_Init+0x64>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001604:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <MX_SPI3_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <MX_SPI3_Init+0x64>)
 800160c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001610:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001612:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <MX_SPI3_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001618:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <MX_SPI3_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <MX_SPI3_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001624:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <MX_SPI3_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <MX_SPI3_Init+0x64>)
 800162c:	220a      	movs	r2, #10
 800162e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001630:	4804      	ldr	r0, [pc, #16]	@ (8001644 <MX_SPI3_Init+0x64>)
 8001632:	f001 fa41 	bl	8002ab8 <HAL_SPI_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800163c:	f000 f8a8 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20007bcc 	.word	0x20007bcc
 8001648:	40003c00 	.word	0x40003c00

0800164c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	@ 0x28
 8001650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b46      	ldr	r3, [pc, #280]	@ (8001780 <MX_GPIO_Init+0x134>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a45      	ldr	r2, [pc, #276]	@ (8001780 <MX_GPIO_Init+0x134>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b43      	ldr	r3, [pc, #268]	@ (8001780 <MX_GPIO_Init+0x134>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b3f      	ldr	r3, [pc, #252]	@ (8001780 <MX_GPIO_Init+0x134>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a3e      	ldr	r2, [pc, #248]	@ (8001780 <MX_GPIO_Init+0x134>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b3c      	ldr	r3, [pc, #240]	@ (8001780 <MX_GPIO_Init+0x134>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	4b38      	ldr	r3, [pc, #224]	@ (8001780 <MX_GPIO_Init+0x134>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a37      	ldr	r2, [pc, #220]	@ (8001780 <MX_GPIO_Init+0x134>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b35      	ldr	r3, [pc, #212]	@ (8001780 <MX_GPIO_Init+0x134>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	4b31      	ldr	r3, [pc, #196]	@ (8001780 <MX_GPIO_Init+0x134>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a30      	ldr	r2, [pc, #192]	@ (8001780 <MX_GPIO_Init+0x134>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001780 <MX_GPIO_Init+0x134>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	210e      	movs	r1, #14
 80016d6:	482b      	ldr	r0, [pc, #172]	@ (8001784 <MX_GPIO_Init+0x138>)
 80016d8:	f000 fd4c 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016e2:	4829      	ldr	r0, [pc, #164]	@ (8001788 <MX_GPIO_Init+0x13c>)
 80016e4:	f000 fd46 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016ee:	4827      	ldr	r0, [pc, #156]	@ (800178c <MX_GPIO_Init+0x140>)
 80016f0:	f000 fd40 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 80016f4:	230e      	movs	r3, #14
 80016f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	481e      	ldr	r0, [pc, #120]	@ (8001784 <MX_GPIO_Init+0x138>)
 800170c:	f000 fb96 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4817      	ldr	r0, [pc, #92]	@ (8001788 <MX_GPIO_Init+0x13c>)
 800172a:	f000 fb87 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800172e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4811      	ldr	r0, [pc, #68]	@ (800178c <MX_GPIO_Init+0x140>)
 8001748:	f000 fb78 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800174c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001752:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	480a      	ldr	r0, [pc, #40]	@ (800178c <MX_GPIO_Init+0x140>)
 8001764:	f000 fb6a 	bl	8001e3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	2028      	movs	r0, #40	@ 0x28
 800176e:	f000 fb12 	bl	8001d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001772:	2028      	movs	r0, #40	@ 0x28
 8001774:	f000 fb2b 	bl	8001dce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001778:	bf00      	nop
 800177a:	3728      	adds	r7, #40	@ 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40023800 	.word	0x40023800
 8001784:	40020800 	.word	0x40020800
 8001788:	40020400 	.word	0x40020400
 800178c:	40020000 	.word	0x40020000

08001790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001794:	b672      	cpsid	i
}
 8001796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <Error_Handler+0x8>

0800179c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <HAL_MspInit+0x4c>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017aa:	4a0f      	ldr	r2, [pc, #60]	@ (80017e8 <HAL_MspInit+0x4c>)
 80017ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017b2:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <HAL_MspInit+0x4c>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <HAL_MspInit+0x4c>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	4a08      	ldr	r2, [pc, #32]	@ (80017e8 <HAL_MspInit+0x4c>)
 80017c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ce:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_MspInit+0x4c>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800

080017ec <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001828 <HAL_CRC_MspInit+0x3c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d10d      	bne.n	800181a <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <HAL_CRC_MspInit+0x40>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a09      	ldr	r2, [pc, #36]	@ (800182c <HAL_CRC_MspInit+0x40>)
 8001808:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b07      	ldr	r3, [pc, #28]	@ (800182c <HAL_CRC_MspInit+0x40>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40023000 	.word	0x40023000
 800182c:	40023800 	.word	0x40023800

08001830 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08e      	sub	sp, #56	@ 0x38
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a4c      	ldr	r2, [pc, #304]	@ (8001980 <HAL_SPI_MspInit+0x150>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d12c      	bne.n	80018ac <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
 8001856:	4b4b      	ldr	r3, [pc, #300]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185a:	4a4a      	ldr	r2, [pc, #296]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 800185c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001860:	6453      	str	r3, [r2, #68]	@ 0x44
 8001862:	4b48      	ldr	r3, [pc, #288]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001866:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800186a:	623b      	str	r3, [r7, #32]
 800186c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	4b44      	ldr	r3, [pc, #272]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4a43      	ldr	r2, [pc, #268]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4b41      	ldr	r3, [pc, #260]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800188a:	23e0      	movs	r3, #224	@ 0xe0
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800189a:	2305      	movs	r3, #5
 800189c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a2:	4619      	mov	r1, r3
 80018a4:	4838      	ldr	r0, [pc, #224]	@ (8001988 <HAL_SPI_MspInit+0x158>)
 80018a6:	f000 fac9 	bl	8001e3c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018aa:	e064      	b.n	8001976 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a36      	ldr	r2, [pc, #216]	@ (800198c <HAL_SPI_MspInit+0x15c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d12d      	bne.n	8001912 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	4a31      	ldr	r2, [pc, #196]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 80018c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a2a      	ldr	r2, [pc, #168]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b28      	ldr	r3, [pc, #160]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018ee:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001900:	2305      	movs	r3, #5
 8001902:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	4821      	ldr	r0, [pc, #132]	@ (8001990 <HAL_SPI_MspInit+0x160>)
 800190c:	f000 fa96 	bl	8001e3c <HAL_GPIO_Init>
}
 8001910:	e031      	b.n	8001976 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a1f      	ldr	r2, [pc, #124]	@ (8001994 <HAL_SPI_MspInit+0x164>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d12c      	bne.n	8001976 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	4a17      	ldr	r2, [pc, #92]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 8001926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800192a:	6413      	str	r3, [r2, #64]	@ 0x40
 800192c:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001940:	4a10      	ldr	r2, [pc, #64]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 8001942:	f043 0304 	orr.w	r3, r3, #4
 8001946:	6313      	str	r3, [r2, #48]	@ 0x30
 8001948:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <HAL_SPI_MspInit+0x154>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001954:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001966:	2306      	movs	r3, #6
 8001968:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196e:	4619      	mov	r1, r3
 8001970:	4809      	ldr	r0, [pc, #36]	@ (8001998 <HAL_SPI_MspInit+0x168>)
 8001972:	f000 fa63 	bl	8001e3c <HAL_GPIO_Init>
}
 8001976:	bf00      	nop
 8001978:	3738      	adds	r7, #56	@ 0x38
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40013000 	.word	0x40013000
 8001984:	40023800 	.word	0x40023800
 8001988:	40020000 	.word	0x40020000
 800198c:	40003800 	.word	0x40003800
 8001990:	40020400 	.word	0x40020400
 8001994:	40003c00 	.word	0x40003c00
 8001998:	40020800 	.word	0x40020800

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <NMI_Handler+0x4>

080019a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <MemManage_Handler+0x4>

080019b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80019f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <SysTick_Handler+0x34>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <SysTick_Handler+0x18>
		Timer1--;
 80019fc:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <SysTick_Handler+0x34>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b07      	ldr	r3, [pc, #28]	@ (8001a24 <SysTick_Handler+0x34>)
 8001a06:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001a08:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <SysTick_Handler+0x38>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <SysTick_Handler+0x2c>
		Timer2--;
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <SysTick_Handler+0x38>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	4b03      	ldr	r3, [pc, #12]	@ (8001a28 <SysTick_Handler+0x38>)
 8001a1a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1c:	f000 f89c 	bl	8001b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	2000030c 	.word	0x2000030c
 8001a28:	2000030e 	.word	0x2000030e

08001a2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001a30:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001a34:	f000 fbb8 	bl	80021a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <SystemInit+0x20>)
 8001a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a46:	4a05      	ldr	r2, [pc, #20]	@ (8001a5c <SystemInit+0x20>)
 8001a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a64:	f7ff ffea 	bl	8001a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a68:	480c      	ldr	r0, [pc, #48]	@ (8001a9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a6a:	490d      	ldr	r1, [pc, #52]	@ (8001aa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a70:	e002      	b.n	8001a78 <LoopCopyDataInit>

08001a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a76:	3304      	adds	r3, #4

08001a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a7c:	d3f9      	bcc.n	8001a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a80:	4c0a      	ldr	r4, [pc, #40]	@ (8001aac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a84:	e001      	b.n	8001a8a <LoopFillZerobss>

08001a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a88:	3204      	adds	r2, #4

08001a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a8c:	d3fb      	bcc.n	8001a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a8e:	f00a fb91 	bl	800c1b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a92:	f7ff fc5f 	bl	8001354 <main>
  bx  lr    
 8001a96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa0:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8001aa4:	0800d69c 	.word	0x0800d69c
  ldr r2, =_sbss
 8001aa8:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8001aac:	2000a484 	.word	0x2000a484

08001ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC_IRQHandler>
	...

08001ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <HAL_Init+0x40>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <HAL_Init+0x40>)
 8001abe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <HAL_Init+0x40>)
 8001aca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad0:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <HAL_Init+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a07      	ldr	r2, [pc, #28]	@ (8001af4 <HAL_Init+0x40>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f000 f94f 	bl	8001d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae2:	200f      	movs	r0, #15
 8001ae4:	f000 f808 	bl	8001af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae8:	f7ff fe58 	bl	800179c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023c00 	.word	0x40023c00

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b00:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <HAL_InitTick+0x54>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <HAL_InitTick+0x58>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 f967 	bl	8001dea <HAL_SYSTICK_Config>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00e      	b.n	8001b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b0f      	cmp	r3, #15
 8001b2a:	d80a      	bhi.n	8001b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f000 f92f 	bl	8001d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b38:	4a06      	ldr	r2, [pc, #24]	@ (8001b54 <HAL_InitTick+0x5c>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200000fc 	.word	0x200000fc
 8001b50:	20000104 	.word	0x20000104
 8001b54:	20000100 	.word	0x20000100

08001b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_IncTick+0x20>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_IncTick+0x24>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	4a04      	ldr	r2, [pc, #16]	@ (8001b7c <HAL_IncTick+0x24>)
 8001b6a:	6013      	str	r3, [r2, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000104 	.word	0x20000104
 8001b7c:	2000a094 	.word	0x2000a094

08001b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return uwTick;
 8001b84:	4b03      	ldr	r3, [pc, #12]	@ (8001b94 <HAL_GetTick+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	2000a094 	.word	0x2000a094

08001b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f7ff ffee 	bl	8001b80 <HAL_GetTick>
 8001ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb0:	d005      	beq.n	8001bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <HAL_Delay+0x44>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bbe:	bf00      	nop
 8001bc0:	f7ff ffde 	bl	8001b80 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d8f7      	bhi.n	8001bc0 <HAL_Delay+0x28>
  {
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000104 	.word	0x20000104

08001be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c12:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	60d3      	str	r3, [r2, #12]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c2c:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <__NVIC_GetPriorityGrouping+0x18>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	f003 0307 	and.w	r3, r3, #7
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	db0b      	blt.n	8001c6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	f003 021f 	and.w	r2, r3, #31
 8001c5c:	4907      	ldr	r1, [pc, #28]	@ (8001c7c <__NVIC_EnableIRQ+0x38>)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	095b      	lsrs	r3, r3, #5
 8001c64:	2001      	movs	r0, #1
 8001c66:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000e100 	.word	0xe000e100

08001c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	6039      	str	r1, [r7, #0]
 8001c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	db0a      	blt.n	8001caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	490c      	ldr	r1, [pc, #48]	@ (8001ccc <__NVIC_SetPriority+0x4c>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	0112      	lsls	r2, r2, #4
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca8:	e00a      	b.n	8001cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4908      	ldr	r1, [pc, #32]	@ (8001cd0 <__NVIC_SetPriority+0x50>)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	3b04      	subs	r3, #4
 8001cb8:	0112      	lsls	r2, r2, #4
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	761a      	strb	r2, [r3, #24]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000e100 	.word	0xe000e100
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	@ 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f1c3 0307 	rsb	r3, r3, #7
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	bf28      	it	cs
 8001cf2:	2304      	movcs	r3, #4
 8001cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d902      	bls.n	8001d04 <NVIC_EncodePriority+0x30>
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3b03      	subs	r3, #3
 8001d02:	e000      	b.n	8001d06 <NVIC_EncodePriority+0x32>
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43da      	mvns	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	401a      	ands	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	43d9      	mvns	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	4313      	orrs	r3, r2
         );
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3724      	adds	r7, #36	@ 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d4c:	d301      	bcc.n	8001d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00f      	b.n	8001d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d52:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <SysTick_Config+0x40>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f7ff ff8e 	bl	8001c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d64:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <SysTick_Config+0x40>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6a:	4b04      	ldr	r3, [pc, #16]	@ (8001d7c <SysTick_Config+0x40>)
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	e000e010 	.word	0xe000e010

08001d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff29 	bl	8001be0 <__NVIC_SetPriorityGrouping>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da8:	f7ff ff3e 	bl	8001c28 <__NVIC_GetPriorityGrouping>
 8001dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	6978      	ldr	r0, [r7, #20]
 8001db4:	f7ff ff8e 	bl	8001cd4 <NVIC_EncodePriority>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff5d 	bl	8001c80 <__NVIC_SetPriority>
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff31 	bl	8001c44 <__NVIC_EnableIRQ>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ffa2 	bl	8001d3c <SysTick_Config>
 8001df8:	4603      	mov	r3, r0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e00e      	b.n	8001e32 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	795b      	ldrb	r3, [r3, #5]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff fce1 	bl	80017ec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	@ 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	e16b      	b.n	8002130 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	f040 815a 	bne.w	800212a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d005      	beq.n	8001e8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d130      	bne.n	8001ef0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 0201 	and.w	r2, r3, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d017      	beq.n	8001f2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d123      	bne.n	8001f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	220f      	movs	r2, #15
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	08da      	lsrs	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	69b9      	ldr	r1, [r7, #24]
 8001f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0203 	and.w	r2, r3, #3
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80b4 	beq.w	800212a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b60      	ldr	r3, [pc, #384]	@ (8002148 <HAL_GPIO_Init+0x30c>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	4a5f      	ldr	r2, [pc, #380]	@ (8002148 <HAL_GPIO_Init+0x30c>)
 8001fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002148 <HAL_GPIO_Init+0x30c>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fde:	4a5b      	ldr	r2, [pc, #364]	@ (800214c <HAL_GPIO_Init+0x310>)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a52      	ldr	r2, [pc, #328]	@ (8002150 <HAL_GPIO_Init+0x314>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d02b      	beq.n	8002062 <HAL_GPIO_Init+0x226>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a51      	ldr	r2, [pc, #324]	@ (8002154 <HAL_GPIO_Init+0x318>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d025      	beq.n	800205e <HAL_GPIO_Init+0x222>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a50      	ldr	r2, [pc, #320]	@ (8002158 <HAL_GPIO_Init+0x31c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d01f      	beq.n	800205a <HAL_GPIO_Init+0x21e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4f      	ldr	r2, [pc, #316]	@ (800215c <HAL_GPIO_Init+0x320>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d019      	beq.n	8002056 <HAL_GPIO_Init+0x21a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4e      	ldr	r2, [pc, #312]	@ (8002160 <HAL_GPIO_Init+0x324>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <HAL_GPIO_Init+0x216>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4d      	ldr	r2, [pc, #308]	@ (8002164 <HAL_GPIO_Init+0x328>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00d      	beq.n	800204e <HAL_GPIO_Init+0x212>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4c      	ldr	r2, [pc, #304]	@ (8002168 <HAL_GPIO_Init+0x32c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d007      	beq.n	800204a <HAL_GPIO_Init+0x20e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4b      	ldr	r2, [pc, #300]	@ (800216c <HAL_GPIO_Init+0x330>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d101      	bne.n	8002046 <HAL_GPIO_Init+0x20a>
 8002042:	2307      	movs	r3, #7
 8002044:	e00e      	b.n	8002064 <HAL_GPIO_Init+0x228>
 8002046:	2308      	movs	r3, #8
 8002048:	e00c      	b.n	8002064 <HAL_GPIO_Init+0x228>
 800204a:	2306      	movs	r3, #6
 800204c:	e00a      	b.n	8002064 <HAL_GPIO_Init+0x228>
 800204e:	2305      	movs	r3, #5
 8002050:	e008      	b.n	8002064 <HAL_GPIO_Init+0x228>
 8002052:	2304      	movs	r3, #4
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x228>
 8002056:	2303      	movs	r3, #3
 8002058:	e004      	b.n	8002064 <HAL_GPIO_Init+0x228>
 800205a:	2302      	movs	r3, #2
 800205c:	e002      	b.n	8002064 <HAL_GPIO_Init+0x228>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_GPIO_Init+0x228>
 8002062:	2300      	movs	r3, #0
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	f002 0203 	and.w	r2, r2, #3
 800206a:	0092      	lsls	r2, r2, #2
 800206c:	4093      	lsls	r3, r2
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002074:	4935      	ldr	r1, [pc, #212]	@ (800214c <HAL_GPIO_Init+0x310>)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	3302      	adds	r3, #2
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002082:	4b3b      	ldr	r3, [pc, #236]	@ (8002170 <HAL_GPIO_Init+0x334>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020a6:	4a32      	ldr	r2, [pc, #200]	@ (8002170 <HAL_GPIO_Init+0x334>)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ac:	4b30      	ldr	r3, [pc, #192]	@ (8002170 <HAL_GPIO_Init+0x334>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020d0:	4a27      	ldr	r2, [pc, #156]	@ (8002170 <HAL_GPIO_Init+0x334>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020d6:	4b26      	ldr	r3, [pc, #152]	@ (8002170 <HAL_GPIO_Init+0x334>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002170 <HAL_GPIO_Init+0x334>)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002100:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <HAL_GPIO_Init+0x334>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002124:	4a12      	ldr	r2, [pc, #72]	@ (8002170 <HAL_GPIO_Init+0x334>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3301      	adds	r3, #1
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	2b0f      	cmp	r3, #15
 8002134:	f67f ae90 	bls.w	8001e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3724      	adds	r7, #36	@ 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800
 800214c:	40013800 	.word	0x40013800
 8002150:	40020000 	.word	0x40020000
 8002154:	40020400 	.word	0x40020400
 8002158:	40020800 	.word	0x40020800
 800215c:	40020c00 	.word	0x40020c00
 8002160:	40021000 	.word	0x40021000
 8002164:	40021400 	.word	0x40021400
 8002168:	40021800 	.word	0x40021800
 800216c:	40021c00 	.word	0x40021c00
 8002170:	40013c00 	.word	0x40013c00

08002174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002184:	787b      	ldrb	r3, [r7, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002190:	e003      	b.n	800219a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	041a      	lsls	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	619a      	str	r2, [r3, #24]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021b2:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021be:	4a05      	ldr	r2, [pc, #20]	@ (80021d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f806 	bl	80021d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40013c00 	.word	0x40013c00

080021d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e267      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d075      	beq.n	80022fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800220e:	4b88      	ldr	r3, [pc, #544]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b04      	cmp	r3, #4
 8002218:	d00c      	beq.n	8002234 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221a:	4b85      	ldr	r3, [pc, #532]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002222:	2b08      	cmp	r3, #8
 8002224:	d112      	bne.n	800224c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002226:	4b82      	ldr	r3, [pc, #520]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800222e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002232:	d10b      	bne.n	800224c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	4b7e      	ldr	r3, [pc, #504]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d05b      	beq.n	80022f8 <HAL_RCC_OscConfig+0x108>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d157      	bne.n	80022f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e242      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002254:	d106      	bne.n	8002264 <HAL_RCC_OscConfig+0x74>
 8002256:	4b76      	ldr	r3, [pc, #472]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a75      	ldr	r2, [pc, #468]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e01d      	b.n	80022a0 <HAL_RCC_OscConfig+0xb0>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x98>
 800226e:	4b70      	ldr	r3, [pc, #448]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6f      	ldr	r2, [pc, #444]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b6d      	ldr	r3, [pc, #436]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a6c      	ldr	r2, [pc, #432]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0xb0>
 8002288:	4b69      	ldr	r3, [pc, #420]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a68      	ldr	r2, [pc, #416]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800228e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b66      	ldr	r3, [pc, #408]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a65      	ldr	r2, [pc, #404]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800229e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff fc6a 	bl	8001b80 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7ff fc66 	bl	8001b80 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	@ 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e207      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0xc0>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7ff fc56 	bl	8001b80 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d8:	f7ff fc52 	bl	8001b80 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	@ 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1f3      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	4b51      	ldr	r3, [pc, #324]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0xe8>
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d063      	beq.n	80023ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002306:	4b4a      	ldr	r3, [pc, #296]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002312:	4b47      	ldr	r3, [pc, #284]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800231a:	2b08      	cmp	r3, #8
 800231c:	d11c      	bne.n	8002358 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800231e:	4b44      	ldr	r3, [pc, #272]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d116      	bne.n	8002358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232a:	4b41      	ldr	r3, [pc, #260]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_RCC_OscConfig+0x152>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e1c7      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b3b      	ldr	r3, [pc, #236]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4937      	ldr	r1, [pc, #220]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	e03a      	b.n	80023ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002360:	4b34      	ldr	r3, [pc, #208]	@ (8002434 <HAL_RCC_OscConfig+0x244>)
 8002362:	2201      	movs	r2, #1
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002366:	f7ff fc0b 	bl	8001b80 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236e:	f7ff fc07 	bl	8001b80 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e1a8      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002380:	4b2b      	ldr	r3, [pc, #172]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238c:	4b28      	ldr	r3, [pc, #160]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4925      	ldr	r1, [pc, #148]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800239c:	4313      	orrs	r3, r2
 800239e:	600b      	str	r3, [r1, #0]
 80023a0:	e015      	b.n	80023ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a2:	4b24      	ldr	r3, [pc, #144]	@ (8002434 <HAL_RCC_OscConfig+0x244>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7ff fbea 	bl	8001b80 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b0:	f7ff fbe6 	bl	8001b80 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e187      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d036      	beq.n	8002448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d016      	beq.n	8002410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e2:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <HAL_RCC_OscConfig+0x248>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e8:	f7ff fbca 	bl	8001b80 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f0:	f7ff fbc6 	bl	8001b80 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e167      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002402:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x200>
 800240e:	e01b      	b.n	8002448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002410:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <HAL_RCC_OscConfig+0x248>)
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7ff fbb3 	bl	8001b80 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241c:	e00e      	b.n	800243c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241e:	f7ff fbaf 	bl	8001b80 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d907      	bls.n	800243c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e150      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
 8002430:	40023800 	.word	0x40023800
 8002434:	42470000 	.word	0x42470000
 8002438:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243c:	4b88      	ldr	r3, [pc, #544]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800243e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ea      	bne.n	800241e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8097 	beq.w	8002584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245a:	4b81      	ldr	r3, [pc, #516]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10f      	bne.n	8002486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	4b7d      	ldr	r3, [pc, #500]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	4a7c      	ldr	r2, [pc, #496]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	@ 0x40
 8002476:	4b7a      	ldr	r3, [pc, #488]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002482:	2301      	movs	r3, #1
 8002484:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002486:	4b77      	ldr	r3, [pc, #476]	@ (8002664 <HAL_RCC_OscConfig+0x474>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d118      	bne.n	80024c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002492:	4b74      	ldr	r3, [pc, #464]	@ (8002664 <HAL_RCC_OscConfig+0x474>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a73      	ldr	r2, [pc, #460]	@ (8002664 <HAL_RCC_OscConfig+0x474>)
 8002498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800249c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249e:	f7ff fb6f 	bl	8001b80 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a6:	f7ff fb6b 	bl	8001b80 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e10c      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002664 <HAL_RCC_OscConfig+0x474>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x2ea>
 80024cc:	4b64      	ldr	r3, [pc, #400]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d0:	4a63      	ldr	r2, [pc, #396]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d8:	e01c      	b.n	8002514 <HAL_RCC_OscConfig+0x324>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x30c>
 80024e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80024ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_OscConfig+0x324>
 80024fc:	4b58      	ldr	r3, [pc, #352]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002500:	4a57      	ldr	r2, [pc, #348]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	6713      	str	r3, [r2, #112]	@ 0x70
 8002508:	4b55      	ldr	r3, [pc, #340]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250c:	4a54      	ldr	r2, [pc, #336]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800250e:	f023 0304 	bic.w	r3, r3, #4
 8002512:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d015      	beq.n	8002548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251c:	f7ff fb30 	bl	8001b80 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002522:	e00a      	b.n	800253a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002524:	f7ff fb2c 	bl	8001b80 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e0cb      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253a:	4b49      	ldr	r3, [pc, #292]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0ee      	beq.n	8002524 <HAL_RCC_OscConfig+0x334>
 8002546:	e014      	b.n	8002572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002548:	f7ff fb1a 	bl	8001b80 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254e:	e00a      	b.n	8002566 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f7ff fb16 	bl	8001b80 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0b5      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002566:	4b3e      	ldr	r3, [pc, #248]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1ee      	bne.n	8002550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002572:	7dfb      	ldrb	r3, [r7, #23]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d105      	bne.n	8002584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002578:	4b39      	ldr	r3, [pc, #228]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257c:	4a38      	ldr	r2, [pc, #224]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800257e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002582:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80a1 	beq.w	80026d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800258e:	4b34      	ldr	r3, [pc, #208]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b08      	cmp	r3, #8
 8002598:	d05c      	beq.n	8002654 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d141      	bne.n	8002626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a2:	4b31      	ldr	r3, [pc, #196]	@ (8002668 <HAL_RCC_OscConfig+0x478>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7ff faea 	bl	8001b80 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b0:	f7ff fae6 	bl	8001b80 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e087      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c2:	4b27      	ldr	r3, [pc, #156]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69da      	ldr	r2, [r3, #28]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025dc:	019b      	lsls	r3, r3, #6
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	3b01      	subs	r3, #1
 80025e8:	041b      	lsls	r3, r3, #16
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	061b      	lsls	r3, r3, #24
 80025f2:	491b      	ldr	r1, [pc, #108]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002668 <HAL_RCC_OscConfig+0x478>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7ff fabf 	bl	8001b80 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002606:	f7ff fabb 	bl	8001b80 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e05c      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002618:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x416>
 8002624:	e054      	b.n	80026d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <HAL_RCC_OscConfig+0x478>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff faa8 	bl	8001b80 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7ff faa4 	bl	8001b80 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e045      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x444>
 8002652:	e03d      	b.n	80026d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d107      	bne.n	800266c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e038      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
 8002660:	40023800 	.word	0x40023800
 8002664:	40007000 	.word	0x40007000
 8002668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800266c:	4b1b      	ldr	r3, [pc, #108]	@ (80026dc <HAL_RCC_OscConfig+0x4ec>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d028      	beq.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d121      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d11a      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800269c:	4013      	ands	r3, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d111      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	3b01      	subs	r3, #1
 80026b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d107      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800

080026e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0cc      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f4:	4b68      	ldr	r3, [pc, #416]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d90c      	bls.n	800271c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b65      	ldr	r3, [pc, #404]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b63      	ldr	r3, [pc, #396]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0b8      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002734:	4b59      	ldr	r3, [pc, #356]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4a58      	ldr	r2, [pc, #352]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800273e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800274c:	4b53      	ldr	r3, [pc, #332]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a52      	ldr	r2, [pc, #328]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002758:	4b50      	ldr	r3, [pc, #320]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	494d      	ldr	r1, [pc, #308]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d044      	beq.n	8002800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	4b47      	ldr	r3, [pc, #284]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d119      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e07f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d003      	beq.n	800279e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279a:	2b03      	cmp	r3, #3
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279e:	4b3f      	ldr	r3, [pc, #252]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e06f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ae:	4b3b      	ldr	r3, [pc, #236]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e067      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027be:	4b37      	ldr	r3, [pc, #220]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f023 0203 	bic.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4934      	ldr	r1, [pc, #208]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d0:	f7ff f9d6 	bl	8001b80 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d8:	f7ff f9d2 	bl	8001b80 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e04f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	4b2b      	ldr	r3, [pc, #172]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 020c 	and.w	r2, r3, #12
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d1eb      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002800:	4b25      	ldr	r3, [pc, #148]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d20c      	bcs.n	8002828 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b22      	ldr	r3, [pc, #136]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b20      	ldr	r3, [pc, #128]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e032      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002834:	4b19      	ldr	r3, [pc, #100]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4916      	ldr	r1, [pc, #88]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002852:	4b12      	ldr	r3, [pc, #72]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	490e      	ldr	r1, [pc, #56]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002866:	f000 f821 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 800286a:	4602      	mov	r2, r0
 800286c:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	490a      	ldr	r1, [pc, #40]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	5ccb      	ldrb	r3, [r1, r3]
 800287a:	fa22 f303 	lsr.w	r3, r2, r3
 800287e:	4a09      	ldr	r2, [pc, #36]	@ (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f936 	bl	8001af8 <HAL_InitTick>

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023c00 	.word	0x40023c00
 800289c:	40023800 	.word	0x40023800
 80028a0:	0800d23c 	.word	0x0800d23c
 80028a4:	200000fc 	.word	0x200000fc
 80028a8:	20000100 	.word	0x20000100

080028ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b0:	b094      	sub	sp, #80	@ 0x50
 80028b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c4:	4b79      	ldr	r3, [pc, #484]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d00d      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x40>
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	f200 80e1 	bhi.w	8002a98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x34>
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028de:	e0db      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028e0:	4b73      	ldr	r3, [pc, #460]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80028e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028e4:	e0db      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028e6:	4b73      	ldr	r3, [pc, #460]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x208>)
 80028e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028ea:	e0d8      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ec:	4b6f      	ldr	r3, [pc, #444]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f6:	4b6d      	ldr	r3, [pc, #436]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d063      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002902:	4b6a      	ldr	r3, [pc, #424]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	099b      	lsrs	r3, r3, #6
 8002908:	2200      	movs	r2, #0
 800290a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800290c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800290e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002914:	633b      	str	r3, [r7, #48]	@ 0x30
 8002916:	2300      	movs	r3, #0
 8002918:	637b      	str	r3, [r7, #52]	@ 0x34
 800291a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800291e:	4622      	mov	r2, r4
 8002920:	462b      	mov	r3, r5
 8002922:	f04f 0000 	mov.w	r0, #0
 8002926:	f04f 0100 	mov.w	r1, #0
 800292a:	0159      	lsls	r1, r3, #5
 800292c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002930:	0150      	lsls	r0, r2, #5
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4621      	mov	r1, r4
 8002938:	1a51      	subs	r1, r2, r1
 800293a:	6139      	str	r1, [r7, #16]
 800293c:	4629      	mov	r1, r5
 800293e:	eb63 0301 	sbc.w	r3, r3, r1
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002950:	4659      	mov	r1, fp
 8002952:	018b      	lsls	r3, r1, #6
 8002954:	4651      	mov	r1, sl
 8002956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800295a:	4651      	mov	r1, sl
 800295c:	018a      	lsls	r2, r1, #6
 800295e:	4651      	mov	r1, sl
 8002960:	ebb2 0801 	subs.w	r8, r2, r1
 8002964:	4659      	mov	r1, fp
 8002966:	eb63 0901 	sbc.w	r9, r3, r1
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800297a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297e:	4690      	mov	r8, r2
 8002980:	4699      	mov	r9, r3
 8002982:	4623      	mov	r3, r4
 8002984:	eb18 0303 	adds.w	r3, r8, r3
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	462b      	mov	r3, r5
 800298c:	eb49 0303 	adc.w	r3, r9, r3
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800299e:	4629      	mov	r1, r5
 80029a0:	024b      	lsls	r3, r1, #9
 80029a2:	4621      	mov	r1, r4
 80029a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029a8:	4621      	mov	r1, r4
 80029aa:	024a      	lsls	r2, r1, #9
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029b2:	2200      	movs	r2, #0
 80029b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029bc:	f7fd fc04 	bl	80001c8 <__aeabi_uldivmod>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4613      	mov	r3, r2
 80029c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029c8:	e058      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ca:	4b38      	ldr	r3, [pc, #224]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	2200      	movs	r2, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	4611      	mov	r1, r2
 80029d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029da:	623b      	str	r3, [r7, #32]
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029e4:	4642      	mov	r2, r8
 80029e6:	464b      	mov	r3, r9
 80029e8:	f04f 0000 	mov.w	r0, #0
 80029ec:	f04f 0100 	mov.w	r1, #0
 80029f0:	0159      	lsls	r1, r3, #5
 80029f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f6:	0150      	lsls	r0, r2, #5
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4641      	mov	r1, r8
 80029fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a02:	4649      	mov	r1, r9
 8002a04:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a1c:	ebb2 040a 	subs.w	r4, r2, sl
 8002a20:	eb63 050b 	sbc.w	r5, r3, fp
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	00eb      	lsls	r3, r5, #3
 8002a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a32:	00e2      	lsls	r2, r4, #3
 8002a34:	4614      	mov	r4, r2
 8002a36:	461d      	mov	r5, r3
 8002a38:	4643      	mov	r3, r8
 8002a3a:	18e3      	adds	r3, r4, r3
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	464b      	mov	r3, r9
 8002a40:	eb45 0303 	adc.w	r3, r5, r3
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a52:	4629      	mov	r1, r5
 8002a54:	028b      	lsls	r3, r1, #10
 8002a56:	4621      	mov	r1, r4
 8002a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	028a      	lsls	r2, r1, #10
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a66:	2200      	movs	r2, #0
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	61fa      	str	r2, [r7, #28]
 8002a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a70:	f7fd fbaa 	bl	80001c8 <__aeabi_uldivmod>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4613      	mov	r3, r2
 8002a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	0c1b      	lsrs	r3, r3, #16
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	3301      	adds	r3, #1
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a96:	e002      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3750      	adds	r7, #80	@ 0x50
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	00f42400 	.word	0x00f42400
 8002ab4:	007a1200 	.word	0x007a1200

08002ab8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e07b      	b.n	8002bc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d108      	bne.n	8002ae4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ada:	d009      	beq.n	8002af0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	61da      	str	r2, [r3, #28]
 8002ae2:	e005      	b.n	8002af0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe fe90 	bl	8001830 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b74:	ea42 0103 	orr.w	r1, r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	f003 0104 	and.w	r1, r3, #4
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	f003 0210 	and.w	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b088      	sub	sp, #32
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bda:	f7fe ffd1 	bl	8001b80 <HAL_GetTick>
 8002bde:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d001      	beq.n	8002bf4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e12a      	b.n	8002e4a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_SPI_Transmit+0x36>
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e122      	b.n	8002e4a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_SPI_Transmit+0x48>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e11b      	b.n	8002e4a <HAL_SPI_Transmit+0x280>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	88fa      	ldrh	r2, [r7, #6]
 8002c32:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	88fa      	ldrh	r2, [r7, #6]
 8002c38:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c60:	d10f      	bne.n	8002c82 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c8c:	2b40      	cmp	r3, #64	@ 0x40
 8002c8e:	d007      	beq.n	8002ca0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ca8:	d152      	bne.n	8002d50 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <HAL_SPI_Transmit+0xee>
 8002cb2:	8b7b      	ldrh	r3, [r7, #26]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d145      	bne.n	8002d44 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbc:	881a      	ldrh	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc8:	1c9a      	adds	r2, r3, #2
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cdc:	e032      	b.n	8002d44 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d112      	bne.n	8002d12 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf0:	881a      	ldrh	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfc:	1c9a      	adds	r2, r3, #2
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d10:	e018      	b.n	8002d44 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d12:	f7fe ff35 	bl	8001b80 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d803      	bhi.n	8002d2a <HAL_SPI_Transmit+0x160>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d102      	bne.n	8002d30 <HAL_SPI_Transmit+0x166>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d109      	bne.n	8002d44 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e082      	b.n	8002e4a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1c7      	bne.n	8002cde <HAL_SPI_Transmit+0x114>
 8002d4e:	e053      	b.n	8002df8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <HAL_SPI_Transmit+0x194>
 8002d58:	8b7b      	ldrh	r3, [r7, #26]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d147      	bne.n	8002dee <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	330c      	adds	r3, #12
 8002d68:	7812      	ldrb	r2, [r2, #0]
 8002d6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d84:	e033      	b.n	8002dee <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d113      	bne.n	8002dbc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	330c      	adds	r3, #12
 8002d9e:	7812      	ldrb	r2, [r2, #0]
 8002da0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002dba:	e018      	b.n	8002dee <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dbc:	f7fe fee0 	bl	8001b80 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d803      	bhi.n	8002dd4 <HAL_SPI_Transmit+0x20a>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd2:	d102      	bne.n	8002dda <HAL_SPI_Transmit+0x210>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e02d      	b.n	8002e4a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1c6      	bne.n	8002d86 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	6839      	ldr	r1, [r7, #0]
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fa59 	bl	80032b4 <SPI_EndRxTxTransaction>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10a      	bne.n	8002e2c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002e48:	2300      	movs	r3, #0
  }
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b08a      	sub	sp, #40	@ 0x28
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e60:	2301      	movs	r3, #1
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e64:	f7fe fe8c 	bl	8001b80 <HAL_GetTick>
 8002e68:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e70:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002e78:	887b      	ldrh	r3, [r7, #2]
 8002e7a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e7c:	7ffb      	ldrb	r3, [r7, #31]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d00c      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x4a>
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e88:	d106      	bne.n	8002e98 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d102      	bne.n	8002e98 <HAL_SPI_TransmitReceive+0x46>
 8002e92:	7ffb      	ldrb	r3, [r7, #31]
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d001      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e17f      	b.n	800319c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_SPI_TransmitReceive+0x5c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <HAL_SPI_TransmitReceive+0x5c>
 8002ea8:	887b      	ldrh	r3, [r7, #2]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e174      	b.n	800319c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_SPI_TransmitReceive+0x6e>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e16d      	b.n	800319c <HAL_SPI_TransmitReceive+0x34a>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d003      	beq.n	8002edc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2205      	movs	r2, #5
 8002ed8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	887a      	ldrh	r2, [r7, #2]
 8002ef2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	887a      	ldrh	r2, [r7, #2]
 8002efe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	887a      	ldrh	r2, [r7, #2]
 8002f04:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f1c:	2b40      	cmp	r3, #64	@ 0x40
 8002f1e:	d007      	beq.n	8002f30 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f38:	d17e      	bne.n	8003038 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HAL_SPI_TransmitReceive+0xf6>
 8002f42:	8afb      	ldrh	r3, [r7, #22]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d16c      	bne.n	8003022 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4c:	881a      	ldrh	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	1c9a      	adds	r2, r3, #2
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f6c:	e059      	b.n	8003022 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_SPI_TransmitReceive+0x162>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d016      	beq.n	8002fb4 <HAL_SPI_TransmitReceive+0x162>
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d113      	bne.n	8002fb4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f90:	881a      	ldrh	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	1c9a      	adds	r2, r3, #2
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d119      	bne.n	8002ff6 <HAL_SPI_TransmitReceive+0x1a4>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d014      	beq.n	8002ff6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd6:	b292      	uxth	r2, r2
 8002fd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fde:	1c9a      	adds	r2, r3, #2
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ff6:	f7fe fdc3 	bl	8001b80 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003002:	429a      	cmp	r2, r3
 8003004:	d80d      	bhi.n	8003022 <HAL_SPI_TransmitReceive+0x1d0>
 8003006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d009      	beq.n	8003022 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e0bc      	b.n	800319c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1a0      	bne.n	8002f6e <HAL_SPI_TransmitReceive+0x11c>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d19b      	bne.n	8002f6e <HAL_SPI_TransmitReceive+0x11c>
 8003036:	e082      	b.n	800313e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_SPI_TransmitReceive+0x1f4>
 8003040:	8afb      	ldrh	r3, [r7, #22]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d171      	bne.n	800312a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	330c      	adds	r3, #12
 8003050:	7812      	ldrb	r2, [r2, #0]
 8003052:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800306c:	e05d      	b.n	800312a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b02      	cmp	r3, #2
 800307a:	d11c      	bne.n	80030b6 <HAL_SPI_TransmitReceive+0x264>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d017      	beq.n	80030b6 <HAL_SPI_TransmitReceive+0x264>
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	2b01      	cmp	r3, #1
 800308a:	d114      	bne.n	80030b6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	330c      	adds	r3, #12
 8003096:	7812      	ldrb	r2, [r2, #0]
 8003098:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d119      	bne.n	80030f8 <HAL_SPI_TransmitReceive+0x2a6>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d014      	beq.n	80030f8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030f4:	2301      	movs	r3, #1
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030f8:	f7fe fd42 	bl	8001b80 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003104:	429a      	cmp	r2, r3
 8003106:	d803      	bhi.n	8003110 <HAL_SPI_TransmitReceive+0x2be>
 8003108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d102      	bne.n	8003116 <HAL_SPI_TransmitReceive+0x2c4>
 8003110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e038      	b.n	800319c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d19c      	bne.n	800306e <HAL_SPI_TransmitReceive+0x21c>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d197      	bne.n	800306e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800313e:	6a3a      	ldr	r2, [r7, #32]
 8003140:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f8b6 	bl	80032b4 <SPI_EndRxTxTransaction>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e01d      	b.n	800319c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800319a:	2300      	movs	r3, #0
  }
}
 800319c:	4618      	mov	r0, r3
 800319e:	3728      	adds	r7, #40	@ 0x28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031b4:	f7fe fce4 	bl	8001b80 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	4413      	add	r3, r2
 80031c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031c4:	f7fe fcdc 	bl	8001b80 <HAL_GetTick>
 80031c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031ca:	4b39      	ldr	r3, [pc, #228]	@ (80032b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	015b      	lsls	r3, r3, #5
 80031d0:	0d1b      	lsrs	r3, r3, #20
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	fb02 f303 	mul.w	r3, r2, r3
 80031d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031da:	e055      	b.n	8003288 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d051      	beq.n	8003288 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031e4:	f7fe fccc 	bl	8001b80 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d902      	bls.n	80031fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d13d      	bne.n	8003276 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003208:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003212:	d111      	bne.n	8003238 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800321c:	d004      	beq.n	8003228 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003226:	d107      	bne.n	8003238 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003236:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003240:	d10f      	bne.n	8003262 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003260:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e018      	b.n	80032a8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d102      	bne.n	8003282 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
 8003280:	e002      	b.n	8003288 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	3b01      	subs	r3, #1
 8003286:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4013      	ands	r3, r2
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	429a      	cmp	r2, r3
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d19a      	bne.n	80031dc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3720      	adds	r7, #32
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	200000fc 	.word	0x200000fc

080032b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2201      	movs	r2, #1
 80032c8:	2102      	movs	r1, #2
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f7ff ff6a 	bl	80031a4 <SPI_WaitFlagStateUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e032      	b.n	800334c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80032e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003354 <SPI_EndRxTxTransaction+0xa0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003358 <SPI_EndRxTxTransaction+0xa4>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	0d5b      	lsrs	r3, r3, #21
 80032f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003304:	d112      	bne.n	800332c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2200      	movs	r2, #0
 800330e:	2180      	movs	r1, #128	@ 0x80
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7ff ff47 	bl	80031a4 <SPI_WaitFlagStateUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d016      	beq.n	800334a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003320:	f043 0220 	orr.w	r2, r3, #32
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e00f      	b.n	800334c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	3b01      	subs	r3, #1
 8003336:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003342:	2b80      	cmp	r3, #128	@ 0x80
 8003344:	d0f2      	beq.n	800332c <SPI_EndRxTxTransaction+0x78>
 8003346:	e000      	b.n	800334a <SPI_EndRxTxTransaction+0x96>
        break;
 8003348:	bf00      	nop
  }

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	200000fc 	.word	0x200000fc
 8003358:	165e9f81 	.word	0x165e9f81

0800335c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003360:	4904      	ldr	r1, [pc, #16]	@ (8003374 <MX_FATFS_Init+0x18>)
 8003362:	4805      	ldr	r0, [pc, #20]	@ (8003378 <MX_FATFS_Init+0x1c>)
 8003364:	f003 f8ca 	bl	80064fc <FATFS_LinkDriver>
 8003368:	4603      	mov	r3, r0
 800336a:	461a      	mov	r2, r3
 800336c:	4b03      	ldr	r3, [pc, #12]	@ (800337c <MX_FATFS_Init+0x20>)
 800336e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003370:	bf00      	nop
 8003372:	bd80      	pop	{r7, pc}
 8003374:	2000a09c 	.word	0x2000a09c
 8003378:	20000108 	.word	0x20000108
 800337c:	2000a098 	.word	0x2000a098

08003380 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003384:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003386:	4618      	mov	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	4618      	mov	r0, r3
 800339e:	f7fd fa61 	bl	8000864 <SD_disk_initialize>
 80033a2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd fb39 	bl	8000a30 <SD_disk_status>
 80033be:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	4603      	mov	r3, r0
 80033d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80033d8:	7bf8      	ldrb	r0, [r7, #15]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	f7fd fb3c 	bl	8000a5c <SD_disk_read>
 80033e4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4603      	mov	r3, r0
 80033fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80033fe:	7bf8      	ldrb	r0, [r7, #15]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	f7fd fb93 	bl	8000b30 <SD_disk_write>
 800340a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	603a      	str	r2, [r7, #0]
 800341e:	71fb      	strb	r3, [r7, #7]
 8003420:	460b      	mov	r3, r1
 8003422:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8003424:	79b9      	ldrb	r1, [r7, #6]
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fc04 	bl	8000c38 <SD_disk_ioctl>
 8003430:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	4a08      	ldr	r2, [pc, #32]	@ (800346c <disk_status+0x30>)
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	79fa      	ldrb	r2, [r7, #7]
 8003454:	4905      	ldr	r1, [pc, #20]	@ (800346c <disk_status+0x30>)
 8003456:	440a      	add	r2, r1
 8003458:	7a12      	ldrb	r2, [r2, #8]
 800345a:	4610      	mov	r0, r2
 800345c:	4798      	blx	r3
 800345e:	4603      	mov	r3, r0
 8003460:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003462:	7bfb      	ldrb	r3, [r7, #15]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	2000a2c8 	.word	0x2000a2c8

08003470 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	4a0e      	ldr	r2, [pc, #56]	@ (80034bc <disk_initialize+0x4c>)
 8003482:	5cd3      	ldrb	r3, [r2, r3]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d114      	bne.n	80034b2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	4a0c      	ldr	r2, [pc, #48]	@ (80034bc <disk_initialize+0x4c>)
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	79fa      	ldrb	r2, [r7, #7]
 8003496:	4909      	ldr	r1, [pc, #36]	@ (80034bc <disk_initialize+0x4c>)
 8003498:	440a      	add	r2, r1
 800349a:	7a12      	ldrb	r2, [r2, #8]
 800349c:	4610      	mov	r0, r2
 800349e:	4798      	blx	r3
 80034a0:	4603      	mov	r3, r0
 80034a2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	4a03      	ldr	r2, [pc, #12]	@ (80034bc <disk_initialize+0x4c>)
 80034ae:	2101      	movs	r1, #1
 80034b0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	2000a2c8 	.word	0x2000a2c8

080034c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	4603      	mov	r3, r0
 80034ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	4a0a      	ldr	r2, [pc, #40]	@ (80034fc <disk_read+0x3c>)
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	689c      	ldr	r4, [r3, #8]
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	4a07      	ldr	r2, [pc, #28]	@ (80034fc <disk_read+0x3c>)
 80034e0:	4413      	add	r3, r2
 80034e2:	7a18      	ldrb	r0, [r3, #8]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	47a0      	blx	r4
 80034ec:	4603      	mov	r3, r0
 80034ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd90      	pop	{r4, r7, pc}
 80034fa:	bf00      	nop
 80034fc:	2000a2c8 	.word	0x2000a2c8

08003500 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003500:	b590      	push	{r4, r7, lr}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	4603      	mov	r3, r0
 800350e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	4a0a      	ldr	r2, [pc, #40]	@ (800353c <disk_write+0x3c>)
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	68dc      	ldr	r4, [r3, #12]
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	4a07      	ldr	r2, [pc, #28]	@ (800353c <disk_write+0x3c>)
 8003520:	4413      	add	r3, r2
 8003522:	7a18      	ldrb	r0, [r3, #8]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	47a0      	blx	r4
 800352c:	4603      	mov	r3, r0
 800352e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003530:	7dfb      	ldrb	r3, [r7, #23]
}
 8003532:	4618      	mov	r0, r3
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	bd90      	pop	{r4, r7, pc}
 800353a:	bf00      	nop
 800353c:	2000a2c8 	.word	0x2000a2c8

08003540 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	603a      	str	r2, [r7, #0]
 800354a:	71fb      	strb	r3, [r7, #7]
 800354c:	460b      	mov	r3, r1
 800354e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	4a09      	ldr	r2, [pc, #36]	@ (8003578 <disk_ioctl+0x38>)
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	79fa      	ldrb	r2, [r7, #7]
 800355e:	4906      	ldr	r1, [pc, #24]	@ (8003578 <disk_ioctl+0x38>)
 8003560:	440a      	add	r2, r1
 8003562:	7a10      	ldrb	r0, [r2, #8]
 8003564:	79b9      	ldrb	r1, [r7, #6]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	4798      	blx	r3
 800356a:	4603      	mov	r3, r0
 800356c:	73fb      	strb	r3, [r7, #15]
  return res;
 800356e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	2000a2c8 	.word	0x2000a2c8

0800357c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3301      	adds	r3, #1
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800358c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	b21a      	sxth	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	b21b      	sxth	r3, r3
 800359a:	4313      	orrs	r3, r2
 800359c:	b21b      	sxth	r3, r3
 800359e:	81fb      	strh	r3, [r7, #14]
	return rv;
 80035a0:	89fb      	ldrh	r3, [r7, #14]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3303      	adds	r3, #3
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	021b      	lsls	r3, r3, #8
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	3202      	adds	r2, #2
 80035c6:	7812      	ldrb	r2, [r2, #0]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	3201      	adds	r2, #1
 80035d4:	7812      	ldrb	r2, [r2, #0]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	7812      	ldrb	r2, [r2, #0]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
	return rv;
 80035e6:	68fb      	ldr	r3, [r7, #12]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	607a      	str	r2, [r7, #4]
 8003606:	887a      	ldrh	r2, [r7, #2]
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	701a      	strb	r2, [r3, #0]
 800360c:	887b      	ldrh	r3, [r7, #2]
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	887a      	ldrh	r2, [r7, #2]
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	0a1b      	lsrs	r3, r3, #8
 8003656:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	701a      	strb	r2, [r3, #0]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003682:	b480      	push	{r7}
 8003684:	b087      	sub	sp, #28
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00d      	beq.n	80036b8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	1c53      	adds	r3, r2, #1
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	1c59      	adds	r1, r3, #1
 80036a6:	6179      	str	r1, [r7, #20]
 80036a8:	7812      	ldrb	r2, [r2, #0]
 80036aa:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	607b      	str	r3, [r7, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f1      	bne.n	800369c <mem_cpy+0x1a>
	}
}
 80036b8:	bf00      	nop
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	617a      	str	r2, [r7, #20]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	607b      	str	r3, [r7, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f3      	bne.n	80036d4 <mem_set+0x10>
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80036fa:	b480      	push	{r7}
 80036fc:	b089      	sub	sp, #36	@ 0x24
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	61fb      	str	r3, [r7, #28]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	61fa      	str	r2, [r7, #28]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	4619      	mov	r1, r3
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	61ba      	str	r2, [r7, #24]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	1acb      	subs	r3, r1, r3
 8003726:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <mem_cmp+0x40>
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0eb      	beq.n	8003712 <mem_cmp+0x18>

	return r;
 800373a:	697b      	ldr	r3, [r7, #20]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3724      	adds	r7, #36	@ 0x24
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003752:	e002      	b.n	800375a <chk_chr+0x12>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3301      	adds	r3, #1
 8003758:	607b      	str	r3, [r7, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <chk_chr+0x26>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	4293      	cmp	r3, r2
 800376c:	d1f2      	bne.n	8003754 <chk_chr+0xc>
	return *str;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	781b      	ldrb	r3, [r3, #0]
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
	...

08003780 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	e029      	b.n	80037e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003794:	4a27      	ldr	r2, [pc, #156]	@ (8003834 <chk_lock+0xb4>)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	4413      	add	r3, r2
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d01d      	beq.n	80037de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80037a2:	4a24      	ldr	r2, [pc, #144]	@ (8003834 <chk_lock+0xb4>)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	4413      	add	r3, r2
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d116      	bne.n	80037e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80037b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003834 <chk_lock+0xb4>)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	4413      	add	r3, r2
 80037bc:	3304      	adds	r3, #4
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d10c      	bne.n	80037e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80037c8:	4a1a      	ldr	r2, [pc, #104]	@ (8003834 <chk_lock+0xb4>)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	4413      	add	r3, r2
 80037d0:	3308      	adds	r3, #8
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80037d8:	429a      	cmp	r2, r3
 80037da:	d102      	bne.n	80037e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80037dc:	e007      	b.n	80037ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80037de:	2301      	movs	r3, #1
 80037e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3301      	adds	r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d9d2      	bls.n	8003794 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d109      	bne.n	8003808 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d102      	bne.n	8003800 <chk_lock+0x80>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d101      	bne.n	8003804 <chk_lock+0x84>
 8003800:	2300      	movs	r3, #0
 8003802:	e010      	b.n	8003826 <chk_lock+0xa6>
 8003804:	2312      	movs	r3, #18
 8003806:	e00e      	b.n	8003826 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d108      	bne.n	8003820 <chk_lock+0xa0>
 800380e:	4a09      	ldr	r2, [pc, #36]	@ (8003834 <chk_lock+0xb4>)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	4413      	add	r3, r2
 8003816:	330c      	adds	r3, #12
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800381e:	d101      	bne.n	8003824 <chk_lock+0xa4>
 8003820:	2310      	movs	r3, #16
 8003822:	e000      	b.n	8003826 <chk_lock+0xa6>
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	2000a0a8 	.word	0x2000a0a8

08003838 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800383e:	2300      	movs	r3, #0
 8003840:	607b      	str	r3, [r7, #4]
 8003842:	e002      	b.n	800384a <enq_lock+0x12>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3301      	adds	r3, #1
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d806      	bhi.n	800385e <enq_lock+0x26>
 8003850:	4a09      	ldr	r2, [pc, #36]	@ (8003878 <enq_lock+0x40>)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	4413      	add	r3, r2
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f2      	bne.n	8003844 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b02      	cmp	r3, #2
 8003862:	bf14      	ite	ne
 8003864:	2301      	movne	r3, #1
 8003866:	2300      	moveq	r3, #0
 8003868:	b2db      	uxtb	r3, r3
}
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	2000a0a8 	.word	0x2000a0a8

0800387c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	e01f      	b.n	80038cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800388c:	4a41      	ldr	r2, [pc, #260]	@ (8003994 <inc_lock+0x118>)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	4413      	add	r3, r2
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d113      	bne.n	80038c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800389e:	4a3d      	ldr	r2, [pc, #244]	@ (8003994 <inc_lock+0x118>)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	4413      	add	r3, r2
 80038a6:	3304      	adds	r3, #4
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d109      	bne.n	80038c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80038b2:	4a38      	ldr	r2, [pc, #224]	@ (8003994 <inc_lock+0x118>)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	4413      	add	r3, r2
 80038ba:	3308      	adds	r3, #8
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d006      	beq.n	80038d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3301      	adds	r3, #1
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d9dc      	bls.n	800388c <inc_lock+0x10>
 80038d2:	e000      	b.n	80038d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80038d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d132      	bne.n	8003942 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	e002      	b.n	80038e8 <inc_lock+0x6c>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3301      	adds	r3, #1
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d806      	bhi.n	80038fc <inc_lock+0x80>
 80038ee:	4a29      	ldr	r2, [pc, #164]	@ (8003994 <inc_lock+0x118>)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	4413      	add	r3, r2
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1f2      	bne.n	80038e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d101      	bne.n	8003906 <inc_lock+0x8a>
 8003902:	2300      	movs	r3, #0
 8003904:	e040      	b.n	8003988 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4922      	ldr	r1, [pc, #136]	@ (8003994 <inc_lock+0x118>)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	440b      	add	r3, r1
 8003912:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	491e      	ldr	r1, [pc, #120]	@ (8003994 <inc_lock+0x118>)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	440b      	add	r3, r1
 8003920:	3304      	adds	r3, #4
 8003922:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	491a      	ldr	r1, [pc, #104]	@ (8003994 <inc_lock+0x118>)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	440b      	add	r3, r1
 8003930:	3308      	adds	r3, #8
 8003932:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003934:	4a17      	ldr	r2, [pc, #92]	@ (8003994 <inc_lock+0x118>)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	4413      	add	r3, r2
 800393c:	330c      	adds	r3, #12
 800393e:	2200      	movs	r2, #0
 8003940:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d009      	beq.n	800395c <inc_lock+0xe0>
 8003948:	4a12      	ldr	r2, [pc, #72]	@ (8003994 <inc_lock+0x118>)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	4413      	add	r3, r2
 8003950:	330c      	adds	r3, #12
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <inc_lock+0xe0>
 8003958:	2300      	movs	r3, #0
 800395a:	e015      	b.n	8003988 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d108      	bne.n	8003974 <inc_lock+0xf8>
 8003962:	4a0c      	ldr	r2, [pc, #48]	@ (8003994 <inc_lock+0x118>)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	4413      	add	r3, r2
 800396a:	330c      	adds	r3, #12
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	3301      	adds	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	e001      	b.n	8003978 <inc_lock+0xfc>
 8003974:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003978:	4906      	ldr	r1, [pc, #24]	@ (8003994 <inc_lock+0x118>)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	440b      	add	r3, r1
 8003980:	330c      	adds	r3, #12
 8003982:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3301      	adds	r3, #1
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	2000a0a8 	.word	0x2000a0a8

08003998 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d825      	bhi.n	80039f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80039ac:	4a17      	ldr	r2, [pc, #92]	@ (8003a0c <dec_lock+0x74>)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	4413      	add	r3, r2
 80039b4:	330c      	adds	r3, #12
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80039ba:	89fb      	ldrh	r3, [r7, #14]
 80039bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039c0:	d101      	bne.n	80039c6 <dec_lock+0x2e>
 80039c2:	2300      	movs	r3, #0
 80039c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80039c6:	89fb      	ldrh	r3, [r7, #14]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <dec_lock+0x3a>
 80039cc:	89fb      	ldrh	r3, [r7, #14]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80039d2:	4a0e      	ldr	r2, [pc, #56]	@ (8003a0c <dec_lock+0x74>)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	4413      	add	r3, r2
 80039da:	330c      	adds	r3, #12
 80039dc:	89fa      	ldrh	r2, [r7, #14]
 80039de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80039e0:	89fb      	ldrh	r3, [r7, #14]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d105      	bne.n	80039f2 <dec_lock+0x5a>
 80039e6:	4a09      	ldr	r2, [pc, #36]	@ (8003a0c <dec_lock+0x74>)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	4413      	add	r3, r2
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	737b      	strb	r3, [r7, #13]
 80039f6:	e001      	b.n	80039fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80039f8:	2302      	movs	r3, #2
 80039fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80039fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	2000a0a8 	.word	0x2000a0a8

08003a10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	e010      	b.n	8003a40 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8003a54 <clear_lock+0x44>)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	4413      	add	r3, r2
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d105      	bne.n	8003a3a <clear_lock+0x2a>
 8003a2e:	4a09      	ldr	r2, [pc, #36]	@ (8003a54 <clear_lock+0x44>)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	4413      	add	r3, r2
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d9eb      	bls.n	8003a1e <clear_lock+0xe>
	}
}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	2000a0a8 	.word	0x2000a0a8

08003a58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	78db      	ldrb	r3, [r3, #3]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d034      	beq.n	8003ad6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	7858      	ldrb	r0, [r3, #1]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	f7ff fd3e 	bl	8003500 <disk_write>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
 8003a8e:	e022      	b.n	8003ad6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	1ad2      	subs	r2, r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d217      	bcs.n	8003ad6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	789b      	ldrb	r3, [r3, #2]
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	e010      	b.n	8003ad0 <sync_window+0x78>
					wsect += fs->fsize;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	7858      	ldrb	r0, [r3, #1]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	f7ff fd1b 	bl	8003500 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d8eb      	bhi.n	8003aae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d01b      	beq.n	8003b30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ffad 	bl	8003a58 <sync_window>
 8003afe:	4603      	mov	r3, r0
 8003b00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d113      	bne.n	8003b30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	7858      	ldrb	r0, [r3, #1]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003b12:	2301      	movs	r3, #1
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	f7ff fcd3 	bl	80034c0 <disk_read>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d004      	beq.n	8003b2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295
 8003b24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff ff87 	bl	8003a58 <sync_window>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d159      	bne.n	8003c08 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d149      	bne.n	8003bf0 <sync_fs+0xb4>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	791b      	ldrb	r3, [r3, #4]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d145      	bne.n	8003bf0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	899b      	ldrh	r3, [r3, #12]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2100      	movs	r1, #0
 8003b72:	f7ff fda7 	bl	80036c4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3338      	adds	r3, #56	@ 0x38
 8003b7a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8003b7e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff fd36 	bl	80035f4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3338      	adds	r3, #56	@ 0x38
 8003b8c:	4921      	ldr	r1, [pc, #132]	@ (8003c14 <sync_fs+0xd8>)
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fd4b 	bl	800362a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3338      	adds	r3, #56	@ 0x38
 8003b98:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003b9c:	491e      	ldr	r1, [pc, #120]	@ (8003c18 <sync_fs+0xdc>)
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fd43 	bl	800362a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3338      	adds	r3, #56	@ 0x38
 8003ba8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f7ff fd39 	bl	800362a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3338      	adds	r3, #56	@ 0x38
 8003bbc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f7ff fd2f 	bl	800362a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	7858      	ldrb	r0, [r3, #1]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003be4:	2301      	movs	r3, #1
 8003be6:	f7ff fc8b 	bl	8003500 <disk_write>
			fs->fsi_flag = 0;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	785b      	ldrb	r3, [r3, #1]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff fca1 	bl	8003540 <disk_ioctl>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <sync_fs+0xcc>
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	41615252 	.word	0x41615252
 8003c18:	61417272 	.word	0x61417272

08003c1c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	3b02      	subs	r3, #2
 8003c2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	3b02      	subs	r3, #2
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d301      	bcc.n	8003c3c <clust2sect+0x20>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e008      	b.n	8003c4e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	895b      	ldrh	r3, [r3, #10]
 8003c40:	461a      	mov	r2, r3
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	fb03 f202 	mul.w	r2, r3, r2
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4c:	4413      	add	r3, r2
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b086      	sub	sp, #24
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d904      	bls.n	8003c7a <get_fat+0x20>
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d302      	bcc.n	8003c80 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	e0ba      	b.n	8003df6 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003c80:	f04f 33ff 	mov.w	r3, #4294967295
 8003c84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	f000 8082 	beq.w	8003d94 <get_fat+0x13a>
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	f300 80a6 	bgt.w	8003de2 <get_fat+0x188>
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d002      	beq.n	8003ca0 <get_fat+0x46>
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d055      	beq.n	8003d4a <get_fat+0xf0>
 8003c9e:	e0a0      	b.n	8003de2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	899b      	ldrh	r3, [r3, #12]
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cbe:	4413      	add	r3, r2
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6938      	ldr	r0, [r7, #16]
 8003cc4:	f7ff ff0c 	bl	8003ae0 <move_window>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f040 808c 	bne.w	8003de8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	60fa      	str	r2, [r7, #12]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	8992      	ldrh	r2, [r2, #12]
 8003cda:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cde:	fb01 f202 	mul.w	r2, r1, r2
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003cec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	899b      	ldrh	r3, [r3, #12]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cfe:	4413      	add	r3, r2
 8003d00:	4619      	mov	r1, r3
 8003d02:	6938      	ldr	r0, [r7, #16]
 8003d04:	f7ff feec 	bl	8003ae0 <move_window>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d16e      	bne.n	8003dec <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	899b      	ldrh	r3, [r3, #12]
 8003d12:	461a      	mov	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d1a:	fb01 f202 	mul.w	r2, r1, r2
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4413      	add	r3, r2
 8003d24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <get_fat+0xe6>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	e002      	b.n	8003d46 <get_fat+0xec>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d46:	617b      	str	r3, [r7, #20]
			break;
 8003d48:	e055      	b.n	8003df6 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	899b      	ldrh	r3, [r3, #12]
 8003d52:	085b      	lsrs	r3, r3, #1
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	4619      	mov	r1, r3
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d5e:	4413      	add	r3, r2
 8003d60:	4619      	mov	r1, r3
 8003d62:	6938      	ldr	r0, [r7, #16]
 8003d64:	f7ff febc 	bl	8003ae0 <move_window>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d140      	bne.n	8003df0 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	8992      	ldrh	r2, [r2, #12]
 8003d7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d80:	fb00 f202 	mul.w	r2, r0, r2
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	440b      	add	r3, r1
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff fbf7 	bl	800357c <ld_word>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	617b      	str	r3, [r7, #20]
			break;
 8003d92:	e030      	b.n	8003df6 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	899b      	ldrh	r3, [r3, #12]
 8003d9c:	089b      	lsrs	r3, r3, #2
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	4619      	mov	r1, r3
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	fbb3 f3f1 	udiv	r3, r3, r1
 8003da8:	4413      	add	r3, r2
 8003daa:	4619      	mov	r1, r3
 8003dac:	6938      	ldr	r0, [r7, #16]
 8003dae:	f7ff fe97 	bl	8003ae0 <move_window>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d11d      	bne.n	8003df4 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	8992      	ldrh	r2, [r2, #12]
 8003dc6:	fbb3 f0f2 	udiv	r0, r3, r2
 8003dca:	fb00 f202 	mul.w	r2, r0, r2
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff fbeb 	bl	80035ae <ld_dword>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003dde:	617b      	str	r3, [r7, #20]
			break;
 8003de0:	e009      	b.n	8003df6 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003de2:	2301      	movs	r3, #1
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	e006      	b.n	8003df6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003de8:	bf00      	nop
 8003dea:	e004      	b.n	8003df6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003dec:	bf00      	nop
 8003dee:	e002      	b.n	8003df6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003df0:	bf00      	nop
 8003df2:	e000      	b.n	8003df6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003df4:	bf00      	nop
		}
	}

	return val;
 8003df6:	697b      	ldr	r3, [r7, #20]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003e00:	b590      	push	{r4, r7, lr}
 8003e02:	b089      	sub	sp, #36	@ 0x24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	f240 8109 	bls.w	800402a <put_fat+0x22a>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	f080 8103 	bcs.w	800402a <put_fat+0x22a>
		switch (fs->fs_type) {
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	f000 80b6 	beq.w	8003f9a <put_fat+0x19a>
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	f300 80fb 	bgt.w	800402a <put_fat+0x22a>
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d003      	beq.n	8003e40 <put_fat+0x40>
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	f000 8083 	beq.w	8003f44 <put_fat+0x144>
 8003e3e:	e0f4      	b.n	800402a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	899b      	ldrh	r3, [r3, #12]
 8003e56:	4619      	mov	r1, r3
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e5e:	4413      	add	r3, r2
 8003e60:	4619      	mov	r1, r3
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f7ff fe3c 	bl	8003ae0 <move_window>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e6c:	7ffb      	ldrb	r3, [r7, #31]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f040 80d4 	bne.w	800401c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	61ba      	str	r2, [r7, #24]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	8992      	ldrh	r2, [r2, #12]
 8003e84:	fbb3 f0f2 	udiv	r0, r3, r2
 8003e88:	fb00 f202 	mul.w	r2, r0, r2
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	440b      	add	r3, r1
 8003e90:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00d      	beq.n	8003eb8 <put_fat+0xb8>
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	b25b      	sxtb	r3, r3
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	b25a      	sxtb	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	b25b      	sxtb	r3, r3
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	b25b      	sxtb	r3, r3
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	b25b      	sxtb	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	e001      	b.n	8003ebc <put_fat+0xbc>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	899b      	ldrh	r3, [r3, #12]
 8003ece:	4619      	mov	r1, r3
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ed6:	4413      	add	r3, r2
 8003ed8:	4619      	mov	r1, r3
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff fe00 	bl	8003ae0 <move_window>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003ee4:	7ffb      	ldrb	r3, [r7, #31]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f040 809a 	bne.w	8004020 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	899b      	ldrh	r3, [r3, #12]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	fbb3 f0f2 	udiv	r0, r3, r2
 8003efe:	fb00 f202 	mul.w	r2, r0, r2
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	440b      	add	r3, r1
 8003f06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <put_fat+0x11a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	e00e      	b.n	8003f38 <put_fat+0x138>
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	b25b      	sxtb	r3, r3
 8003f20:	f023 030f 	bic.w	r3, r3, #15
 8003f24:	b25a      	sxtb	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	0a1b      	lsrs	r3, r3, #8
 8003f2a:	b25b      	sxtb	r3, r3
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	b25b      	sxtb	r3, r3
 8003f32:	4313      	orrs	r3, r2
 8003f34:	b25b      	sxtb	r3, r3
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	70da      	strb	r2, [r3, #3]
			break;
 8003f42:	e072      	b.n	800402a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	899b      	ldrh	r3, [r3, #12]
 8003f4c:	085b      	lsrs	r3, r3, #1
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	4619      	mov	r1, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f58:	4413      	add	r3, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f7ff fdbf 	bl	8003ae0 <move_window>
 8003f62:	4603      	mov	r3, r0
 8003f64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f66:	7ffb      	ldrb	r3, [r7, #31]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d15b      	bne.n	8004024 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	8992      	ldrh	r2, [r2, #12]
 8003f7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8003f7e:	fb00 f202 	mul.w	r2, r0, r2
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	440b      	add	r3, r1
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	b292      	uxth	r2, r2
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff fb31 	bl	80035f4 <st_word>
			fs->wflag = 1;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	70da      	strb	r2, [r3, #3]
			break;
 8003f98:	e047      	b.n	800402a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	899b      	ldrh	r3, [r3, #12]
 8003fa2:	089b      	lsrs	r3, r3, #2
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fae:	4413      	add	r3, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f7ff fd94 	bl	8003ae0 <move_window>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003fbc:	7ffb      	ldrb	r3, [r7, #31]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d132      	bne.n	8004028 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	8992      	ldrh	r2, [r2, #12]
 8003fd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8003fda:	fb00 f202 	mul.w	r2, r0, r2
 8003fde:	1a9b      	subs	r3, r3, r2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fae3 	bl	80035ae <ld_dword>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003fee:	4323      	orrs	r3, r4
 8003ff0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	8992      	ldrh	r2, [r2, #12]
 8004000:	fbb3 f0f2 	udiv	r0, r3, r2
 8004004:	fb00 f202 	mul.w	r2, r0, r2
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	440b      	add	r3, r1
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fb0b 	bl	800362a <st_dword>
			fs->wflag = 1;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	70da      	strb	r2, [r3, #3]
			break;
 800401a:	e006      	b.n	800402a <put_fat+0x22a>
			if (res != FR_OK) break;
 800401c:	bf00      	nop
 800401e:	e004      	b.n	800402a <put_fat+0x22a>
			if (res != FR_OK) break;
 8004020:	bf00      	nop
 8004022:	e002      	b.n	800402a <put_fat+0x22a>
			if (res != FR_OK) break;
 8004024:	bf00      	nop
 8004026:	e000      	b.n	800402a <put_fat+0x22a>
			if (res != FR_OK) break;
 8004028:	bf00      	nop
		}
	}
	return res;
 800402a:	7ffb      	ldrb	r3, [r7, #31]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3724      	adds	r7, #36	@ 0x24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd90      	pop	{r4, r7, pc}

08004034 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d904      	bls.n	800405a <remove_chain+0x26>
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	d301      	bcc.n	800405e <remove_chain+0x2a>
 800405a:	2302      	movs	r3, #2
 800405c:	e04b      	b.n	80040f6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00c      	beq.n	800407e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004064:	f04f 32ff 	mov.w	r2, #4294967295
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	69b8      	ldr	r0, [r7, #24]
 800406c:	f7ff fec8 	bl	8003e00 <put_fat>
 8004070:	4603      	mov	r3, r0
 8004072:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004074:	7ffb      	ldrb	r3, [r7, #31]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <remove_chain+0x4a>
 800407a:	7ffb      	ldrb	r3, [r7, #31]
 800407c:	e03b      	b.n	80040f6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f7ff fdea 	bl	8003c5a <get_fat>
 8004086:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d031      	beq.n	80040f2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <remove_chain+0x64>
 8004094:	2302      	movs	r3, #2
 8004096:	e02e      	b.n	80040f6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d101      	bne.n	80040a4 <remove_chain+0x70>
 80040a0:	2301      	movs	r3, #1
 80040a2:	e028      	b.n	80040f6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80040a4:	2200      	movs	r2, #0
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	69b8      	ldr	r0, [r7, #24]
 80040aa:	f7ff fea9 	bl	8003e00 <put_fat>
 80040ae:	4603      	mov	r3, r0
 80040b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80040b2:	7ffb      	ldrb	r3, [r7, #31]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <remove_chain+0x88>
 80040b8:	7ffb      	ldrb	r3, [r7, #31]
 80040ba:	e01c      	b.n	80040f6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	699a      	ldr	r2, [r3, #24]
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	3b02      	subs	r3, #2
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d20b      	bcs.n	80040e2 <remove_chain+0xae>
			fs->free_clst++;
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	791b      	ldrb	r3, [r3, #4]
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d3c6      	bcc.n	800407e <remove_chain+0x4a>
 80040f0:	e000      	b.n	80040f4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80040f2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b088      	sub	sp, #32
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10d      	bne.n	8004130 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d004      	beq.n	800412a <create_chain+0x2c>
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	429a      	cmp	r2, r3
 8004128:	d31b      	bcc.n	8004162 <create_chain+0x64>
 800412a:	2301      	movs	r3, #1
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	e018      	b.n	8004162 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004130:	6839      	ldr	r1, [r7, #0]
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff fd91 	bl	8003c5a <get_fat>
 8004138:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d801      	bhi.n	8004144 <create_chain+0x46>
 8004140:	2301      	movs	r3, #1
 8004142:	e070      	b.n	8004226 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414a:	d101      	bne.n	8004150 <create_chain+0x52>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	e06a      	b.n	8004226 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	429a      	cmp	r2, r3
 8004158:	d201      	bcs.n	800415e <create_chain+0x60>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	e063      	b.n	8004226 <create_chain+0x128>
		scl = clst;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3301      	adds	r3, #1
 800416a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	429a      	cmp	r2, r3
 8004174:	d307      	bcc.n	8004186 <create_chain+0x88>
				ncl = 2;
 8004176:	2302      	movs	r3, #2
 8004178:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	429a      	cmp	r2, r3
 8004180:	d901      	bls.n	8004186 <create_chain+0x88>
 8004182:	2300      	movs	r3, #0
 8004184:	e04f      	b.n	8004226 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004186:	69f9      	ldr	r1, [r7, #28]
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff fd66 	bl	8003c5a <get_fat>
 800418e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00e      	beq.n	80041b4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d003      	beq.n	80041a4 <create_chain+0xa6>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d101      	bne.n	80041a8 <create_chain+0xaa>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	e03e      	b.n	8004226 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d1da      	bne.n	8004166 <create_chain+0x68>
 80041b0:	2300      	movs	r3, #0
 80041b2:	e038      	b.n	8004226 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80041b4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80041b6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ba:	69f9      	ldr	r1, [r7, #28]
 80041bc:	6938      	ldr	r0, [r7, #16]
 80041be:	f7ff fe1f 	bl	8003e00 <put_fat>
 80041c2:	4603      	mov	r3, r0
 80041c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80041c6:	7dfb      	ldrb	r3, [r7, #23]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d109      	bne.n	80041e0 <create_chain+0xe2>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d006      	beq.n	80041e0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	6839      	ldr	r1, [r7, #0]
 80041d6:	6938      	ldr	r0, [r7, #16]
 80041d8:	f7ff fe12 	bl	8003e00 <put_fat>
 80041dc:	4603      	mov	r3, r0
 80041de:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80041e0:	7dfb      	ldrb	r3, [r7, #23]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d116      	bne.n	8004214 <create_chain+0x116>
		fs->last_clst = ncl;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	3b02      	subs	r3, #2
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d804      	bhi.n	8004204 <create_chain+0x106>
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	1e5a      	subs	r2, r3, #1
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	791b      	ldrb	r3, [r3, #4]
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	b2da      	uxtb	r2, r3
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	711a      	strb	r2, [r3, #4]
 8004212:	e007      	b.n	8004224 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004214:	7dfb      	ldrb	r3, [r7, #23]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d102      	bne.n	8004220 <create_chain+0x122>
 800421a:	f04f 33ff 	mov.w	r3, #4294967295
 800421e:	e000      	b.n	8004222 <create_chain+0x124>
 8004220:	2301      	movs	r3, #1
 8004222:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004224:	69fb      	ldr	r3, [r7, #28]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3720      	adds	r7, #32
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800422e:	b480      	push	{r7}
 8004230:	b087      	sub	sp, #28
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	3304      	adds	r3, #4
 8004244:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	899b      	ldrh	r3, [r3, #12]
 800424a:	461a      	mov	r2, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	8952      	ldrh	r2, [r2, #10]
 8004256:	fbb3 f3f2 	udiv	r3, r3, r2
 800425a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1d1a      	adds	r2, r3, #4
 8004260:	613a      	str	r2, [r7, #16]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <clmt_clust+0x42>
 800426c:	2300      	movs	r3, #0
 800426e:	e010      	b.n	8004292 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	429a      	cmp	r2, r3
 8004276:	d307      	bcc.n	8004288 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	3304      	adds	r3, #4
 8004284:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004286:	e7e9      	b.n	800425c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004288:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	4413      	add	r3, r2
}
 8004292:	4618      	mov	r0, r3
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b086      	sub	sp, #24
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042b4:	d204      	bcs.n	80042c0 <dir_sdi+0x22>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80042c0:	2302      	movs	r3, #2
 80042c2:	e071      	b.n	80043a8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <dir_sdi+0x46>
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d902      	bls.n	80042e4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10c      	bne.n	8004304 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	8912      	ldrh	r2, [r2, #8]
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d301      	bcc.n	80042fa <dir_sdi+0x5c>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e056      	b.n	80043a8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	61da      	str	r2, [r3, #28]
 8004302:	e02d      	b.n	8004360 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	895b      	ldrh	r3, [r3, #10]
 8004308:	461a      	mov	r2, r3
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	899b      	ldrh	r3, [r3, #12]
 800430e:	fb02 f303 	mul.w	r3, r2, r3
 8004312:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004314:	e019      	b.n	800434a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6979      	ldr	r1, [r7, #20]
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff fc9d 	bl	8003c5a <get_fat>
 8004320:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004328:	d101      	bne.n	800432e <dir_sdi+0x90>
 800432a:	2301      	movs	r3, #1
 800432c:	e03c      	b.n	80043a8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d904      	bls.n	800433e <dir_sdi+0xa0>
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	429a      	cmp	r2, r3
 800433c:	d301      	bcc.n	8004342 <dir_sdi+0xa4>
 800433e:	2302      	movs	r3, #2
 8004340:	e032      	b.n	80043a8 <dir_sdi+0x10a>
			ofs -= csz;
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	429a      	cmp	r2, r3
 8004350:	d2e1      	bcs.n	8004316 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004352:	6979      	ldr	r1, [r7, #20]
 8004354:	6938      	ldr	r0, [r7, #16]
 8004356:	f7ff fc61 	bl	8003c1c <clust2sect>
 800435a:	4602      	mov	r2, r0
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <dir_sdi+0xd4>
 800436e:	2302      	movs	r3, #2
 8004370:	e01a      	b.n	80043a8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69da      	ldr	r2, [r3, #28]
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	899b      	ldrh	r3, [r3, #12]
 800437a:	4619      	mov	r1, r3
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004382:	441a      	add	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	899b      	ldrh	r3, [r3, #12]
 8004392:	461a      	mov	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	fbb3 f0f2 	udiv	r0, r3, r2
 800439a:	fb00 f202 	mul.w	r2, r0, r2
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	18ca      	adds	r2, r1, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	3320      	adds	r3, #32
 80043c6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <dir_next+0x28>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043d6:	d301      	bcc.n	80043dc <dir_next+0x2c>
 80043d8:	2304      	movs	r3, #4
 80043da:	e0bb      	b.n	8004554 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	899b      	ldrh	r3, [r3, #12]
 80043e0:	461a      	mov	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80043e8:	fb01 f202 	mul.w	r2, r1, r2
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f040 809d 	bne.w	800452e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10b      	bne.n	800441e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	8912      	ldrh	r2, [r2, #8]
 800440e:	4293      	cmp	r3, r2
 8004410:	f0c0 808d 	bcc.w	800452e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	61da      	str	r2, [r3, #28]
 800441a:	2304      	movs	r3, #4
 800441c:	e09a      	b.n	8004554 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	899b      	ldrh	r3, [r3, #12]
 8004422:	461a      	mov	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	fbb3 f3f2 	udiv	r3, r3, r2
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	8952      	ldrh	r2, [r2, #10]
 800442e:	3a01      	subs	r2, #1
 8004430:	4013      	ands	r3, r2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d17b      	bne.n	800452e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f7ff fc0b 	bl	8003c5a <get_fat>
 8004444:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d801      	bhi.n	8004450 <dir_next+0xa0>
 800444c:	2302      	movs	r3, #2
 800444e:	e081      	b.n	8004554 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004456:	d101      	bne.n	800445c <dir_next+0xac>
 8004458:	2301      	movs	r3, #1
 800445a:	e07b      	b.n	8004554 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	429a      	cmp	r2, r3
 8004464:	d359      	bcc.n	800451a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	61da      	str	r2, [r3, #28]
 8004472:	2304      	movs	r3, #4
 8004474:	e06e      	b.n	8004554 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	4619      	mov	r1, r3
 800447e:	4610      	mov	r0, r2
 8004480:	f7ff fe3d 	bl	80040fe <create_chain>
 8004484:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <dir_next+0xe0>
 800448c:	2307      	movs	r3, #7
 800448e:	e061      	b.n	8004554 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <dir_next+0xea>
 8004496:	2302      	movs	r3, #2
 8004498:	e05c      	b.n	8004554 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a0:	d101      	bne.n	80044a6 <dir_next+0xf6>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e056      	b.n	8004554 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f7ff fad6 	bl	8003a58 <sync_window>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <dir_next+0x106>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e04e      	b.n	8004554 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	899b      	ldrh	r3, [r3, #12]
 80044c0:	461a      	mov	r2, r3
 80044c2:	2100      	movs	r1, #0
 80044c4:	f7ff f8fe 	bl	80036c4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	6979      	ldr	r1, [r7, #20]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f7ff fba4 	bl	8003c1c <clust2sect>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80044da:	e012      	b.n	8004502 <dir_next+0x152>
						fs->wflag = 1;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f7ff fab8 	bl	8003a58 <sync_window>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <dir_next+0x142>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e030      	b.n	8004554 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	3301      	adds	r3, #1
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	635a      	str	r2, [r3, #52]	@ 0x34
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	895b      	ldrh	r3, [r3, #10]
 8004506:	461a      	mov	r2, r3
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	4293      	cmp	r3, r2
 800450c:	d3e6      	bcc.n	80044dc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad2      	subs	r2, r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004520:	6979      	ldr	r1, [r7, #20]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f7ff fb7a 	bl	8003c1c <clust2sect>
 8004528:	4602      	mov	r2, r0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	899b      	ldrh	r3, [r3, #12]
 800453e:	461a      	mov	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	fbb3 f0f2 	udiv	r0, r3, r2
 8004546:	fb00 f202 	mul.w	r2, r0, r2
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	18ca      	adds	r2, r1, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800456c:	2100      	movs	r1, #0
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff fe95 	bl	800429e <dir_sdi>
 8004574:	4603      	mov	r3, r0
 8004576:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004578:	7dfb      	ldrb	r3, [r7, #23]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d12b      	bne.n	80045d6 <dir_alloc+0x7a>
		n = 0;
 800457e:	2300      	movs	r3, #0
 8004580:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	4619      	mov	r1, r3
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f7ff faa9 	bl	8003ae0 <move_window>
 800458e:	4603      	mov	r3, r0
 8004590:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004592:	7dfb      	ldrb	r3, [r7, #23]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d11d      	bne.n	80045d4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2be5      	cmp	r3, #229	@ 0xe5
 80045a0:	d004      	beq.n	80045ac <dir_alloc+0x50>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d107      	bne.n	80045bc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	3301      	adds	r3, #1
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d102      	bne.n	80045c0 <dir_alloc+0x64>
 80045ba:	e00c      	b.n	80045d6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80045bc:	2300      	movs	r3, #0
 80045be:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80045c0:	2101      	movs	r1, #1
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff fef4 	bl	80043b0 <dir_next>
 80045c8:	4603      	mov	r3, r0
 80045ca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0d7      	beq.n	8004582 <dir_alloc+0x26>
 80045d2:	e000      	b.n	80045d6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80045d4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80045d6:	7dfb      	ldrb	r3, [r7, #23]
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d101      	bne.n	80045e0 <dir_alloc+0x84>
 80045dc:	2307      	movs	r3, #7
 80045de:	75fb      	strb	r3, [r7, #23]
	return res;
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	331a      	adds	r3, #26
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe ffbf 	bl	800357c <ld_word>
 80045fe:	4603      	mov	r3, r0
 8004600:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b03      	cmp	r3, #3
 8004608:	d109      	bne.n	800461e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	3314      	adds	r3, #20
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe ffb4 	bl	800357c <ld_word>
 8004614:	4603      	mov	r3, r0
 8004616:	041b      	lsls	r3, r3, #16
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800461e:	68fb      	ldr	r3, [r7, #12]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	331a      	adds	r3, #26
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	b292      	uxth	r2, r2
 800463c:	4611      	mov	r1, r2
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe ffd8 	bl	80035f4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d109      	bne.n	8004660 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f103 0214 	add.w	r2, r3, #20
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	0c1b      	lsrs	r3, r3, #16
 8004656:	b29b      	uxth	r3, r3
 8004658:	4619      	mov	r1, r3
 800465a:	4610      	mov	r0, r2
 800465c:	f7fe ffca 	bl	80035f4 <st_word>
	}
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004668:	b590      	push	{r4, r7, lr}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	331a      	adds	r3, #26
 8004676:	4618      	mov	r0, r3
 8004678:	f7fe ff80 	bl	800357c <ld_word>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <cmp_lfn+0x1e>
 8004682:	2300      	movs	r3, #0
 8004684:	e059      	b.n	800473a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800468e:	1e5a      	subs	r2, r3, #1
 8004690:	4613      	mov	r3, r2
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800469c:	2301      	movs	r3, #1
 800469e:	81fb      	strh	r3, [r7, #14]
 80046a0:	2300      	movs	r3, #0
 80046a2:	613b      	str	r3, [r7, #16]
 80046a4:	e033      	b.n	800470e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80046a6:	4a27      	ldr	r2, [pc, #156]	@ (8004744 <cmp_lfn+0xdc>)
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4413      	add	r3, r2
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	4413      	add	r3, r2
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fe ff61 	bl	800357c <ld_word>
 80046ba:	4603      	mov	r3, r0
 80046bc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80046be:	89fb      	ldrh	r3, [r7, #14]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01a      	beq.n	80046fa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2bfe      	cmp	r3, #254	@ 0xfe
 80046c8:	d812      	bhi.n	80046f0 <cmp_lfn+0x88>
 80046ca:	89bb      	ldrh	r3, [r7, #12]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f001 ff61 	bl	8006594 <ff_wtoupper>
 80046d2:	4603      	mov	r3, r0
 80046d4:	461c      	mov	r4, r3
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	617a      	str	r2, [r7, #20]
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	4413      	add	r3, r2
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f001 ff55 	bl	8006594 <ff_wtoupper>
 80046ea:	4603      	mov	r3, r0
 80046ec:	429c      	cmp	r4, r3
 80046ee:	d001      	beq.n	80046f4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80046f0:	2300      	movs	r3, #0
 80046f2:	e022      	b.n	800473a <cmp_lfn+0xd2>
			}
			wc = uc;
 80046f4:	89bb      	ldrh	r3, [r7, #12]
 80046f6:	81fb      	strh	r3, [r7, #14]
 80046f8:	e006      	b.n	8004708 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80046fa:	89bb      	ldrh	r3, [r7, #12]
 80046fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004700:	4293      	cmp	r3, r2
 8004702:	d001      	beq.n	8004708 <cmp_lfn+0xa0>
 8004704:	2300      	movs	r3, #0
 8004706:	e018      	b.n	800473a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	3301      	adds	r3, #1
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b0c      	cmp	r3, #12
 8004712:	d9c8      	bls.n	80046a6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00b      	beq.n	8004738 <cmp_lfn+0xd0>
 8004720:	89fb      	ldrh	r3, [r7, #14]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d008      	beq.n	8004738 <cmp_lfn+0xd0>
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4413      	add	r3, r2
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <cmp_lfn+0xd0>
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8004738:	2301      	movs	r3, #1
}
 800473a:	4618      	mov	r0, r3
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	bd90      	pop	{r4, r7, pc}
 8004742:	bf00      	nop
 8004744:	0800d2cc 	.word	0x0800d2cc

08004748 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b088      	sub	sp, #32
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	4611      	mov	r1, r2
 8004754:	461a      	mov	r2, r3
 8004756:	460b      	mov	r3, r1
 8004758:	71fb      	strb	r3, [r7, #7]
 800475a:	4613      	mov	r3, r2
 800475c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	330d      	adds	r3, #13
 8004762:	79ba      	ldrb	r2, [r7, #6]
 8004764:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	330b      	adds	r3, #11
 800476a:	220f      	movs	r2, #15
 800476c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	330c      	adds	r3, #12
 8004772:	2200      	movs	r2, #0
 8004774:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	331a      	adds	r3, #26
 800477a:	2100      	movs	r1, #0
 800477c:	4618      	mov	r0, r3
 800477e:	f7fe ff39 	bl	80035f4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	1e5a      	subs	r2, r3, #1
 8004786:	4613      	mov	r3, r2
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	82fb      	strh	r3, [r7, #22]
 8004796:	2300      	movs	r3, #0
 8004798:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800479a:	8afb      	ldrh	r3, [r7, #22]
 800479c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d007      	beq.n	80047b4 <put_lfn+0x6c>
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	61fa      	str	r2, [r7, #28]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80047b4:	4a17      	ldr	r2, [pc, #92]	@ (8004814 <put_lfn+0xcc>)
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	4413      	add	r3, r2
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	461a      	mov	r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	4413      	add	r3, r2
 80047c2:	8afa      	ldrh	r2, [r7, #22]
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fe ff14 	bl	80035f4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80047cc:	8afb      	ldrh	r3, [r7, #22]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d102      	bne.n	80047d8 <put_lfn+0x90>
 80047d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80047d6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	3301      	adds	r3, #1
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b0c      	cmp	r3, #12
 80047e2:	d9da      	bls.n	800479a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80047e4:	8afb      	ldrh	r3, [r7, #22]
 80047e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d006      	beq.n	80047fc <put_lfn+0xb4>
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4413      	add	r3, r2
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d103      	bne.n	8004804 <put_lfn+0xbc>
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004802:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	79fa      	ldrb	r2, [r7, #7]
 8004808:	701a      	strb	r2, [r3, #0]
}
 800480a:	bf00      	nop
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	0800d2cc 	.word	0x0800d2cc

08004818 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08c      	sub	sp, #48	@ 0x30
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004826:	220b      	movs	r2, #11
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f7fe ff29 	bl	8003682 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b05      	cmp	r3, #5
 8004834:	d92b      	bls.n	800488e <gen_numname+0x76>
		sr = seq;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800483a:	e022      	b.n	8004882 <gen_numname+0x6a>
			wc = *lfn++;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	1c9a      	adds	r2, r3, #2
 8004840:	607a      	str	r2, [r7, #4]
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8004846:	2300      	movs	r3, #0
 8004848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800484a:	e017      	b.n	800487c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	005a      	lsls	r2, r3, #1
 8004850:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	4413      	add	r3, r2
 8004858:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800485a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800485c:	085b      	lsrs	r3, r3, #1
 800485e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d005      	beq.n	8004876 <gen_numname+0x5e>
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8004870:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8004874:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004878:	3301      	adds	r3, #1
 800487a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800487c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487e:	2b0f      	cmp	r3, #15
 8004880:	d9e4      	bls.n	800484c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1d8      	bne.n	800483c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800488e:	2307      	movs	r3, #7
 8004890:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	b2db      	uxtb	r3, r3
 800489c:	3330      	adds	r3, #48	@ 0x30
 800489e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80048a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80048a6:	2b39      	cmp	r3, #57	@ 0x39
 80048a8:	d904      	bls.n	80048b4 <gen_numname+0x9c>
 80048aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80048ae:	3307      	adds	r3, #7
 80048b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80048b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b6:	1e5a      	subs	r2, r3, #1
 80048b8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80048ba:	3330      	adds	r3, #48	@ 0x30
 80048bc:	443b      	add	r3, r7
 80048be:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80048c2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	603b      	str	r3, [r7, #0]
	} while (seq);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1df      	bne.n	8004892 <gen_numname+0x7a>
	ns[i] = '~';
 80048d2:	f107 0214 	add.w	r2, r7, #20
 80048d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d8:	4413      	add	r3, r2
 80048da:	227e      	movs	r2, #126	@ 0x7e
 80048dc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80048de:	2300      	movs	r3, #0
 80048e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80048e2:	e002      	b.n	80048ea <gen_numname+0xd2>
 80048e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e6:	3301      	adds	r3, #1
 80048e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d205      	bcs.n	80048fe <gen_numname+0xe6>
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f6:	4413      	add	r3, r2
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d1f2      	bne.n	80048e4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80048fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004900:	2b07      	cmp	r3, #7
 8004902:	d807      	bhi.n	8004914 <gen_numname+0xfc>
 8004904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	62ba      	str	r2, [r7, #40]	@ 0x28
 800490a:	3330      	adds	r3, #48	@ 0x30
 800490c:	443b      	add	r3, r7
 800490e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004912:	e000      	b.n	8004916 <gen_numname+0xfe>
 8004914:	2120      	movs	r1, #32
 8004916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	627a      	str	r2, [r7, #36]	@ 0x24
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4413      	add	r3, r2
 8004920:	460a      	mov	r2, r1
 8004922:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	2b07      	cmp	r3, #7
 8004928:	d9e9      	bls.n	80048fe <gen_numname+0xe6>
}
 800492a:	bf00      	nop
 800492c:	bf00      	nop
 800492e:	3730      	adds	r7, #48	@ 0x30
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004940:	230b      	movs	r3, #11
 8004942:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	b2da      	uxtb	r2, r3
 8004948:	0852      	lsrs	r2, r2, #1
 800494a:	01db      	lsls	r3, r3, #7
 800494c:	4313      	orrs	r3, r2
 800494e:	b2da      	uxtb	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	1c59      	adds	r1, r3, #1
 8004954:	6079      	str	r1, [r7, #4]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	4413      	add	r3, r2
 800495a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	3b01      	subs	r3, #1
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1ed      	bne.n	8004944 <sum_sfn+0x10>
	return sum;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b086      	sub	sp, #24
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004984:	2100      	movs	r1, #0
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff fc89 	bl	800429e <dir_sdi>
 800498c:	4603      	mov	r3, r0
 800498e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <dir_find+0x24>
 8004996:	7dfb      	ldrb	r3, [r7, #23]
 8004998:	e0a9      	b.n	8004aee <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800499a:	23ff      	movs	r3, #255	@ 0xff
 800499c:	753b      	strb	r3, [r7, #20]
 800499e:	7d3b      	ldrb	r3, [r7, #20]
 80049a0:	757b      	strb	r3, [r7, #21]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f04f 32ff 	mov.w	r2, #4294967295
 80049a8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	4619      	mov	r1, r3
 80049b0:	6938      	ldr	r0, [r7, #16]
 80049b2:	f7ff f895 	bl	8003ae0 <move_window>
 80049b6:	4603      	mov	r3, r0
 80049b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f040 8090 	bne.w	8004ae2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80049ca:	7dbb      	ldrb	r3, [r7, #22]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <dir_find+0x60>
 80049d0:	2304      	movs	r3, #4
 80049d2:	75fb      	strb	r3, [r7, #23]
 80049d4:	e08a      	b.n	8004aec <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	330b      	adds	r3, #11
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049e2:	73fb      	strb	r3, [r7, #15]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	7bfa      	ldrb	r2, [r7, #15]
 80049e8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80049ea:	7dbb      	ldrb	r3, [r7, #22]
 80049ec:	2be5      	cmp	r3, #229	@ 0xe5
 80049ee:	d007      	beq.n	8004a00 <dir_find+0x8a>
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d009      	beq.n	8004a0e <dir_find+0x98>
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	2b0f      	cmp	r3, #15
 80049fe:	d006      	beq.n	8004a0e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004a00:	23ff      	movs	r3, #255	@ 0xff
 8004a02:	757b      	strb	r3, [r7, #21]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a0c:	e05e      	b.n	8004acc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b0f      	cmp	r3, #15
 8004a12:	d136      	bne.n	8004a82 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d154      	bne.n	8004acc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004a22:	7dbb      	ldrb	r3, [r7, #22]
 8004a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00d      	beq.n	8004a48 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	7b5b      	ldrb	r3, [r3, #13]
 8004a32:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004a34:	7dbb      	ldrb	r3, [r7, #22]
 8004a36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a3a:	75bb      	strb	r3, [r7, #22]
 8004a3c:	7dbb      	ldrb	r3, [r7, #22]
 8004a3e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	695a      	ldr	r2, [r3, #20]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004a48:	7dba      	ldrb	r2, [r7, #22]
 8004a4a:	7d7b      	ldrb	r3, [r7, #21]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d115      	bne.n	8004a7c <dir_find+0x106>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	330d      	adds	r3, #13
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	7d3a      	ldrb	r2, [r7, #20]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d10e      	bne.n	8004a7c <dir_find+0x106>
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	4619      	mov	r1, r3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	f7ff fdfd 	bl	8004668 <cmp_lfn>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <dir_find+0x106>
 8004a74:	7d7b      	ldrb	r3, [r7, #21]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	e000      	b.n	8004a7e <dir_find+0x108>
 8004a7c:	23ff      	movs	r3, #255	@ 0xff
 8004a7e:	757b      	strb	r3, [r7, #21]
 8004a80:	e024      	b.n	8004acc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004a82:	7d7b      	ldrb	r3, [r7, #21]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <dir_find+0x126>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff ff51 	bl	8004934 <sum_sfn>
 8004a92:	4603      	mov	r3, r0
 8004a94:	461a      	mov	r2, r3
 8004a96:	7d3b      	ldrb	r3, [r7, #20]
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d024      	beq.n	8004ae6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10a      	bne.n	8004ac0 <dir_find+0x14a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a18      	ldr	r0, [r3, #32]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3324      	adds	r3, #36	@ 0x24
 8004ab2:	220b      	movs	r2, #11
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	f7fe fe20 	bl	80036fa <mem_cmp>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d014      	beq.n	8004aea <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004ac0:	23ff      	movs	r3, #255	@ 0xff
 8004ac2:	757b      	strb	r3, [r7, #21]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aca:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004acc:	2100      	movs	r1, #0
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff fc6e 	bl	80043b0 <dir_next>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004ad8:	7dfb      	ldrb	r3, [r7, #23]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f43f af65 	beq.w	80049aa <dir_find+0x34>
 8004ae0:	e004      	b.n	8004aec <dir_find+0x176>
		if (res != FR_OK) break;
 8004ae2:	bf00      	nop
 8004ae4:	e002      	b.n	8004aec <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004ae6:	bf00      	nop
 8004ae8:	e000      	b.n	8004aec <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004aea:	bf00      	nop

	return res;
 8004aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08c      	sub	sp, #48	@ 0x30
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004b0c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <dir_register+0x20>
 8004b14:	2306      	movs	r3, #6
 8004b16:	e0e0      	b.n	8004cda <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8004b18:	2300      	movs	r3, #0
 8004b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b1c:	e002      	b.n	8004b24 <dir_register+0x2c>
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b20:	3301      	adds	r3, #1
 8004b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	4413      	add	r3, r2
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f4      	bne.n	8004b1e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8004b3a:	f107 030c 	add.w	r3, r7, #12
 8004b3e:	220c      	movs	r2, #12
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fe fd9e 	bl	8003682 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004b46:	7dfb      	ldrb	r3, [r7, #23]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d032      	beq.n	8004bb6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2240      	movs	r2, #64	@ 0x40
 8004b54:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8004b58:	2301      	movs	r3, #1
 8004b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b5c:	e016      	b.n	8004b8c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	f107 010c 	add.w	r1, r7, #12
 8004b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6e:	f7ff fe53 	bl	8004818 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff feff 	bl	8004976 <dir_find>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8004b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8004b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b88:	3301      	adds	r3, #1
 8004b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8e:	2b63      	cmp	r3, #99	@ 0x63
 8004b90:	d9e5      	bls.n	8004b5e <dir_register+0x66>
 8004b92:	e000      	b.n	8004b96 <dir_register+0x9e>
			if (res != FR_OK) break;
 8004b94:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b98:	2b64      	cmp	r3, #100	@ 0x64
 8004b9a:	d101      	bne.n	8004ba0 <dir_register+0xa8>
 8004b9c:	2307      	movs	r3, #7
 8004b9e:	e09c      	b.n	8004cda <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d002      	beq.n	8004bae <dir_register+0xb6>
 8004ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004bac:	e095      	b.n	8004cda <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004bae:	7dfa      	ldrb	r2, [r7, #23]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <dir_register+0xd8>
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	4a47      	ldr	r2, [pc, #284]	@ (8004ce4 <dir_register+0x1ec>)
 8004bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bca:	089b      	lsrs	r3, r3, #2
 8004bcc:	3301      	adds	r3, #1
 8004bce:	e000      	b.n	8004bd2 <dir_register+0xda>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004bd4:	6a39      	ldr	r1, [r7, #32]
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff fcc0 	bl	800455c <dir_alloc>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004be2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d148      	bne.n	8004c7c <dir_register+0x184>
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	623b      	str	r3, [r7, #32]
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d042      	beq.n	8004c7c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695a      	ldr	r2, [r3, #20]
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	015b      	lsls	r3, r3, #5
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	4619      	mov	r1, r3
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff fb4b 	bl	800429e <dir_sdi>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8004c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d132      	bne.n	8004c7c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3324      	adds	r3, #36	@ 0x24
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff fe8a 	bl	8004934 <sum_sfn>
 8004c20:	4603      	mov	r3, r0
 8004c22:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	69f8      	ldr	r0, [r7, #28]
 8004c2c:	f7fe ff58 	bl	8003ae0 <move_window>
 8004c30:	4603      	mov	r3, r0
 8004c32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8004c36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d11d      	bne.n	8004c7a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	6918      	ldr	r0, [r3, #16]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a19      	ldr	r1, [r3, #32]
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	7efb      	ldrb	r3, [r7, #27]
 8004c4c:	f7ff fd7c 	bl	8004748 <put_lfn>
				fs->wflag = 1;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	2201      	movs	r2, #1
 8004c54:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8004c56:	2100      	movs	r1, #0
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff fba9 	bl	80043b0 <dir_next>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8004c64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d107      	bne.n	8004c7c <dir_register+0x184>
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	623b      	str	r3, [r7, #32]
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1d5      	bne.n	8004c24 <dir_register+0x12c>
 8004c78:	e000      	b.n	8004c7c <dir_register+0x184>
				if (res != FR_OK) break;
 8004c7a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004c7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d128      	bne.n	8004cd6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	69f8      	ldr	r0, [r7, #28]
 8004c8c:	f7fe ff28 	bl	8003ae0 <move_window>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8004c96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d11b      	bne.n	8004cd6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fe fd0c 	bl	80036c4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a18      	ldr	r0, [r3, #32]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3324      	adds	r3, #36	@ 0x24
 8004cb4:	220b      	movs	r2, #11
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f7fe fce3 	bl	8003682 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	f002 0218 	and.w	r2, r2, #24
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3730      	adds	r7, #48	@ 0x30
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	4ec4ec4f 	.word	0x4ec4ec4f

08004ce8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	@ 0x28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	61ba      	str	r2, [r7, #24]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4413      	add	r3, r2
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8004d16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d18:	2b1f      	cmp	r3, #31
 8004d1a:	d940      	bls.n	8004d9e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004d1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d1e:	2b2f      	cmp	r3, #47	@ 0x2f
 8004d20:	d006      	beq.n	8004d30 <create_name+0x48>
 8004d22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d24:	2b5c      	cmp	r3, #92	@ 0x5c
 8004d26:	d110      	bne.n	8004d4a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004d28:	e002      	b.n	8004d30 <create_name+0x48>
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	61bb      	str	r3, [r7, #24]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	4413      	add	r3, r2
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b2f      	cmp	r3, #47	@ 0x2f
 8004d3a:	d0f6      	beq.n	8004d2a <create_name+0x42>
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	4413      	add	r3, r2
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b5c      	cmp	r3, #92	@ 0x5c
 8004d46:	d0f0      	beq.n	8004d2a <create_name+0x42>
			break;
 8004d48:	e02a      	b.n	8004da0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2bfe      	cmp	r3, #254	@ 0xfe
 8004d4e:	d901      	bls.n	8004d54 <create_name+0x6c>
 8004d50:	2306      	movs	r3, #6
 8004d52:	e17d      	b.n	8005050 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004d54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004d5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f001 fbdc 	bl	800651c <ff_convert>
 8004d64:	4603      	mov	r3, r0
 8004d66:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004d68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <create_name+0x8a>
 8004d6e:	2306      	movs	r3, #6
 8004d70:	e16e      	b.n	8005050 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004d72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d74:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d76:	d809      	bhi.n	8004d8c <create_name+0xa4>
 8004d78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	488d      	ldr	r0, [pc, #564]	@ (8004fb4 <create_name+0x2cc>)
 8004d7e:	f7fe fce3 	bl	8003748 <chk_chr>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <create_name+0xa4>
 8004d88:	2306      	movs	r3, #6
 8004d8a:	e161      	b.n	8005050 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	617a      	str	r2, [r7, #20]
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4413      	add	r3, r2
 8004d98:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004d9a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004d9c:	e7b4      	b.n	8004d08 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8004d9e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	441a      	add	r2, r3
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004daa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004dac:	2b1f      	cmp	r3, #31
 8004dae:	d801      	bhi.n	8004db4 <create_name+0xcc>
 8004db0:	2304      	movs	r3, #4
 8004db2:	e000      	b.n	8004db6 <create_name+0xce>
 8004db4:	2300      	movs	r3, #0
 8004db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004dba:	e011      	b.n	8004de0 <create_name+0xf8>
		w = lfn[di - 1];
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4413      	add	r3, r2
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8004dce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d002      	beq.n	8004dda <create_name+0xf2>
 8004dd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004dd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dd8:	d106      	bne.n	8004de8 <create_name+0x100>
		di--;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1ea      	bne.n	8004dbc <create_name+0xd4>
 8004de6:	e000      	b.n	8004dea <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8004de8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4413      	add	r3, r2
 8004df2:	2200      	movs	r2, #0
 8004df4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <create_name+0x118>
 8004dfc:	2306      	movs	r3, #6
 8004dfe:	e127      	b.n	8005050 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3324      	adds	r3, #36	@ 0x24
 8004e04:	220b      	movs	r2, #11
 8004e06:	2120      	movs	r1, #32
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fe fc5b 	bl	80036c4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	e002      	b.n	8004e1a <create_name+0x132>
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	3301      	adds	r3, #1
 8004e18:	61bb      	str	r3, [r7, #24]
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4413      	add	r3, r2
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d0f5      	beq.n	8004e14 <create_name+0x12c>
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e34:	d0ee      	beq.n	8004e14 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d009      	beq.n	8004e50 <create_name+0x168>
 8004e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e40:	f043 0303 	orr.w	r3, r3, #3
 8004e44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004e48:	e002      	b.n	8004e50 <create_name+0x168>
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <create_name+0x182>
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4413      	add	r3, r2
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e68:	d1ef      	bne.n	8004e4a <create_name+0x162>

	i = b = 0; ni = 8;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004e70:	2300      	movs	r3, #0
 8004e72:	623b      	str	r3, [r7, #32]
 8004e74:	2308      	movs	r3, #8
 8004e76:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	61ba      	str	r2, [r7, #24]
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004e88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 8090 	beq.w	8004fb0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004e90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	d006      	beq.n	8004ea4 <create_name+0x1bc>
 8004e96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e98:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e9a:	d10a      	bne.n	8004eb2 <create_name+0x1ca>
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d006      	beq.n	8004eb2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ea8:	f043 0303 	orr.w	r3, r3, #3
 8004eac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004eb0:	e07d      	b.n	8004fae <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004eb2:	6a3a      	ldr	r2, [r7, #32]
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d203      	bcs.n	8004ec2 <create_name+0x1da>
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d123      	bne.n	8004f0a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	2b0b      	cmp	r3, #11
 8004ec6:	d106      	bne.n	8004ed6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8004ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ecc:	f043 0303 	orr.w	r3, r3, #3
 8004ed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004ed4:	e075      	b.n	8004fc2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d005      	beq.n	8004eea <create_name+0x202>
 8004ede:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ee2:	f043 0303 	orr.w	r3, r3, #3
 8004ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d866      	bhi.n	8004fc0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	61bb      	str	r3, [r7, #24]
 8004ef6:	2308      	movs	r3, #8
 8004ef8:	623b      	str	r3, [r7, #32]
 8004efa:	230b      	movs	r3, #11
 8004efc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004efe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004f08:	e051      	b.n	8004fae <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004f0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f0e:	d914      	bls.n	8004f3a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004f10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f12:	2100      	movs	r1, #0
 8004f14:	4618      	mov	r0, r3
 8004f16:	f001 fb01 	bl	800651c <ff_convert>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004f1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d004      	beq.n	8004f2e <create_name+0x246>
 8004f24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f26:	3b80      	subs	r3, #128	@ 0x80
 8004f28:	4a23      	ldr	r2, [pc, #140]	@ (8004fb8 <create_name+0x2d0>)
 8004f2a:	5cd3      	ldrb	r3, [r2, r3]
 8004f2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f32:	f043 0302 	orr.w	r3, r3, #2
 8004f36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004f3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d007      	beq.n	8004f50 <create_name+0x268>
 8004f40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f42:	4619      	mov	r1, r3
 8004f44:	481d      	ldr	r0, [pc, #116]	@ (8004fbc <create_name+0x2d4>)
 8004f46:	f7fe fbff 	bl	8003748 <chk_chr>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004f50:	235f      	movs	r3, #95	@ 0x5f
 8004f52:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004f54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f58:	f043 0303 	orr.w	r3, r3, #3
 8004f5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004f60:	e01b      	b.n	8004f9a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004f62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f64:	2b40      	cmp	r3, #64	@ 0x40
 8004f66:	d909      	bls.n	8004f7c <create_name+0x294>
 8004f68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f6a:	2b5a      	cmp	r3, #90	@ 0x5a
 8004f6c:	d806      	bhi.n	8004f7c <create_name+0x294>
					b |= 2;
 8004f6e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f72:	f043 0302 	orr.w	r3, r3, #2
 8004f76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004f7a:	e00e      	b.n	8004f9a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004f7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f7e:	2b60      	cmp	r3, #96	@ 0x60
 8004f80:	d90b      	bls.n	8004f9a <create_name+0x2b2>
 8004f82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f84:	2b7a      	cmp	r3, #122	@ 0x7a
 8004f86:	d808      	bhi.n	8004f9a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8004f88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f8c:	f043 0301 	orr.w	r3, r3, #1
 8004f90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004f94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f96:	3b20      	subs	r3, #32
 8004f98:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	623a      	str	r2, [r7, #32]
 8004fa0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004fa2:	b2d1      	uxtb	r1, r2
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	460a      	mov	r2, r1
 8004faa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8004fae:	e763      	b.n	8004e78 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8004fb0:	bf00      	nop
 8004fb2:	e006      	b.n	8004fc2 <create_name+0x2da>
 8004fb4:	0800c4f4 	.word	0x0800c4f4
 8004fb8:	0800d24c 	.word	0x0800d24c
 8004fbc:	0800c500 	.word	0x0800c500
			if (si > di) break;			/* No extension */
 8004fc0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004fc8:	2be5      	cmp	r3, #229	@ 0xe5
 8004fca:	d103      	bne.n	8004fd4 <create_name+0x2ec>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2205      	movs	r2, #5
 8004fd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d104      	bne.n	8004fe4 <create_name+0x2fc>
 8004fda:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004fe4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004fe8:	f003 030c 	and.w	r3, r3, #12
 8004fec:	2b0c      	cmp	r3, #12
 8004fee:	d005      	beq.n	8004ffc <create_name+0x314>
 8004ff0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004ff4:	f003 0303 	and.w	r3, r3, #3
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d105      	bne.n	8005008 <create_name+0x320>
 8004ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005000:	f043 0302 	orr.w	r3, r3, #2
 8005004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d117      	bne.n	8005044 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005014:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	2b01      	cmp	r3, #1
 800501e:	d105      	bne.n	800502c <create_name+0x344>
 8005020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005024:	f043 0310 	orr.w	r3, r3, #16
 8005028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800502c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005030:	f003 030c 	and.w	r3, r3, #12
 8005034:	2b04      	cmp	r3, #4
 8005036:	d105      	bne.n	8005044 <create_name+0x35c>
 8005038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800503c:	f043 0308 	orr.w	r3, r3, #8
 8005040:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800504a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800504e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005050:	4618      	mov	r0, r3
 8005052:	3728      	adds	r7, #40	@ 0x28
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800506c:	e002      	b.n	8005074 <follow_path+0x1c>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	3301      	adds	r3, #1
 8005072:	603b      	str	r3, [r7, #0]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b2f      	cmp	r3, #47	@ 0x2f
 800507a:	d0f8      	beq.n	800506e <follow_path+0x16>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b5c      	cmp	r3, #92	@ 0x5c
 8005082:	d0f4      	beq.n	800506e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	2200      	movs	r2, #0
 8005088:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b1f      	cmp	r3, #31
 8005090:	d80a      	bhi.n	80050a8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2280      	movs	r2, #128	@ 0x80
 8005096:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800509a:	2100      	movs	r1, #0
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff f8fe 	bl	800429e <dir_sdi>
 80050a2:	4603      	mov	r3, r0
 80050a4:	75fb      	strb	r3, [r7, #23]
 80050a6:	e048      	b.n	800513a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80050a8:	463b      	mov	r3, r7
 80050aa:	4619      	mov	r1, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff fe1b 	bl	8004ce8 <create_name>
 80050b2:	4603      	mov	r3, r0
 80050b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80050b6:	7dfb      	ldrb	r3, [r7, #23]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d139      	bne.n	8005130 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff fc5a 	bl	8004976 <dir_find>
 80050c2:	4603      	mov	r3, r0
 80050c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80050cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d12c      	bne.n	8005134 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80050da:	7afb      	ldrb	r3, [r7, #11]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d127      	bne.n	8005134 <follow_path+0xdc>
 80050e4:	2305      	movs	r3, #5
 80050e6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80050e8:	e024      	b.n	8005134 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80050ea:	7afb      	ldrb	r3, [r7, #11]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d121      	bne.n	8005138 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	799b      	ldrb	r3, [r3, #6]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d102      	bne.n	8005106 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005100:	2305      	movs	r3, #5
 8005102:	75fb      	strb	r3, [r7, #23]
 8005104:	e019      	b.n	800513a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	8992      	ldrh	r2, [r2, #12]
 8005114:	fbb3 f0f2 	udiv	r0, r3, r2
 8005118:	fb00 f202 	mul.w	r2, r0, r2
 800511c:	1a9b      	subs	r3, r3, r2
 800511e:	440b      	add	r3, r1
 8005120:	4619      	mov	r1, r3
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f7ff fa61 	bl	80045ea <ld_clust>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800512e:	e7bb      	b.n	80050a8 <follow_path+0x50>
			if (res != FR_OK) break;
 8005130:	bf00      	nop
 8005132:	e002      	b.n	800513a <follow_path+0xe2>
				break;
 8005134:	bf00      	nop
 8005136:	e000      	b.n	800513a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005138:	bf00      	nop
			}
		}
	}

	return res;
 800513a:	7dfb      	ldrb	r3, [r7, #23]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800514c:	f04f 33ff 	mov.w	r3, #4294967295
 8005150:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d031      	beq.n	80051be <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	e002      	b.n	8005168 <get_ldnumber+0x24>
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	3301      	adds	r3, #1
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b1f      	cmp	r3, #31
 800516e:	d903      	bls.n	8005178 <get_ldnumber+0x34>
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b3a      	cmp	r3, #58	@ 0x3a
 8005176:	d1f4      	bne.n	8005162 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b3a      	cmp	r3, #58	@ 0x3a
 800517e:	d11c      	bne.n	80051ba <get_ldnumber+0x76>
			tp = *path;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	60fa      	str	r2, [r7, #12]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	3b30      	subs	r3, #48	@ 0x30
 8005190:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b09      	cmp	r3, #9
 8005196:	d80e      	bhi.n	80051b6 <get_ldnumber+0x72>
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	429a      	cmp	r2, r3
 800519e:	d10a      	bne.n	80051b6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d107      	bne.n	80051b6 <get_ldnumber+0x72>
					vol = (int)i;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	3301      	adds	r3, #1
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	e002      	b.n	80051c0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80051be:	693b      	ldr	r3, [r7, #16]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	371c      	adds	r7, #28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	70da      	strb	r2, [r3, #3]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f04f 32ff 	mov.w	r2, #4294967295
 80051e2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80051e4:	6839      	ldr	r1, [r7, #0]
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fe fc7a 	bl	8003ae0 <move_window>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <check_fs+0x2a>
 80051f2:	2304      	movs	r3, #4
 80051f4:	e038      	b.n	8005268 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3338      	adds	r3, #56	@ 0x38
 80051fa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fe f9bc 	bl	800357c <ld_word>
 8005204:	4603      	mov	r3, r0
 8005206:	461a      	mov	r2, r3
 8005208:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800520c:	429a      	cmp	r2, r3
 800520e:	d001      	beq.n	8005214 <check_fs+0x48>
 8005210:	2303      	movs	r3, #3
 8005212:	e029      	b.n	8005268 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800521a:	2be9      	cmp	r3, #233	@ 0xe9
 800521c:	d009      	beq.n	8005232 <check_fs+0x66>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005224:	2beb      	cmp	r3, #235	@ 0xeb
 8005226:	d11e      	bne.n	8005266 <check_fs+0x9a>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800522e:	2b90      	cmp	r3, #144	@ 0x90
 8005230:	d119      	bne.n	8005266 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3338      	adds	r3, #56	@ 0x38
 8005236:	3336      	adds	r3, #54	@ 0x36
 8005238:	4618      	mov	r0, r3
 800523a:	f7fe f9b8 	bl	80035ae <ld_dword>
 800523e:	4603      	mov	r3, r0
 8005240:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005244:	4a0a      	ldr	r2, [pc, #40]	@ (8005270 <check_fs+0xa4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d101      	bne.n	800524e <check_fs+0x82>
 800524a:	2300      	movs	r3, #0
 800524c:	e00c      	b.n	8005268 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3338      	adds	r3, #56	@ 0x38
 8005252:	3352      	adds	r3, #82	@ 0x52
 8005254:	4618      	mov	r0, r3
 8005256:	f7fe f9aa 	bl	80035ae <ld_dword>
 800525a:	4603      	mov	r3, r0
 800525c:	4a05      	ldr	r2, [pc, #20]	@ (8005274 <check_fs+0xa8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d101      	bne.n	8005266 <check_fs+0x9a>
 8005262:	2300      	movs	r3, #0
 8005264:	e000      	b.n	8005268 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005266:	2302      	movs	r3, #2
}
 8005268:	4618      	mov	r0, r3
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	00544146 	.word	0x00544146
 8005274:	33544146 	.word	0x33544146

08005278 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b096      	sub	sp, #88	@ 0x58
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7ff ff59 	bl	8005144 <get_ldnumber>
 8005292:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005296:	2b00      	cmp	r3, #0
 8005298:	da01      	bge.n	800529e <find_volume+0x26>
 800529a:	230b      	movs	r3, #11
 800529c:	e265      	b.n	800576a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800529e:	4a9f      	ldr	r2, [pc, #636]	@ (800551c <find_volume+0x2a4>)
 80052a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80052a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <find_volume+0x3a>
 80052ae:	230c      	movs	r3, #12
 80052b0:	e25b      	b.n	800576a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80052b8:	79fb      	ldrb	r3, [r7, #7]
 80052ba:	f023 0301 	bic.w	r3, r3, #1
 80052be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80052c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01a      	beq.n	80052fe <find_volume+0x86>
		stat = disk_status(fs->drv);
 80052c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ca:	785b      	ldrb	r3, [r3, #1]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fe f8b5 	bl	800343c <disk_status>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80052d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10c      	bne.n	80052fe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d007      	beq.n	80052fa <find_volume+0x82>
 80052ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80052f6:	230a      	movs	r3, #10
 80052f8:	e237      	b.n	800576a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80052fa:	2300      	movs	r3, #0
 80052fc:	e235      	b.n	800576a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80052fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005306:	b2da      	uxtb	r2, r3
 8005308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800530c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530e:	785b      	ldrb	r3, [r3, #1]
 8005310:	4618      	mov	r0, r3
 8005312:	f7fe f8ad 	bl	8003470 <disk_initialize>
 8005316:	4603      	mov	r3, r0
 8005318:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800531c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005328:	2303      	movs	r3, #3
 800532a:	e21e      	b.n	800576a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d007      	beq.n	8005342 <find_volume+0xca>
 8005332:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005336:	f003 0304 	and.w	r3, r3, #4
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800533e:	230a      	movs	r3, #10
 8005340:	e213      	b.n	800576a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005344:	7858      	ldrb	r0, [r3, #1]
 8005346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005348:	330c      	adds	r3, #12
 800534a:	461a      	mov	r2, r3
 800534c:	2102      	movs	r1, #2
 800534e:	f7fe f8f7 	bl	8003540 <disk_ioctl>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <find_volume+0xe4>
 8005358:	2301      	movs	r3, #1
 800535a:	e206      	b.n	800576a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800535c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535e:	899b      	ldrh	r3, [r3, #12]
 8005360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005364:	d80d      	bhi.n	8005382 <find_volume+0x10a>
 8005366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005368:	899b      	ldrh	r3, [r3, #12]
 800536a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800536e:	d308      	bcc.n	8005382 <find_volume+0x10a>
 8005370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005372:	899b      	ldrh	r3, [r3, #12]
 8005374:	461a      	mov	r2, r3
 8005376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005378:	899b      	ldrh	r3, [r3, #12]
 800537a:	3b01      	subs	r3, #1
 800537c:	4013      	ands	r3, r2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <find_volume+0x10e>
 8005382:	2301      	movs	r3, #1
 8005384:	e1f1      	b.n	800576a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800538a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800538c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800538e:	f7ff ff1d 	bl	80051cc <check_fs>
 8005392:	4603      	mov	r3, r0
 8005394:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005398:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800539c:	2b02      	cmp	r3, #2
 800539e:	d149      	bne.n	8005434 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80053a0:	2300      	movs	r3, #0
 80053a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80053a4:	e01e      	b.n	80053e4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80053a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80053ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80053b4:	4413      	add	r3, r2
 80053b6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80053b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ba:	3304      	adds	r3, #4
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d006      	beq.n	80053d0 <find_volume+0x158>
 80053c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c4:	3308      	adds	r3, #8
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fe f8f1 	bl	80035ae <ld_dword>
 80053cc:	4602      	mov	r2, r0
 80053ce:	e000      	b.n	80053d2 <find_volume+0x15a>
 80053d0:	2200      	movs	r2, #0
 80053d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	3358      	adds	r3, #88	@ 0x58
 80053d8:	443b      	add	r3, r7
 80053da:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80053de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053e0:	3301      	adds	r3, #1
 80053e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80053e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d9dd      	bls.n	80053a6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80053ea:	2300      	movs	r3, #0
 80053ec:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80053ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <find_volume+0x182>
 80053f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053f6:	3b01      	subs	r3, #1
 80053f8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80053fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	3358      	adds	r3, #88	@ 0x58
 8005400:	443b      	add	r3, r7
 8005402:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005406:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <find_volume+0x1a2>
 800540e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005410:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005412:	f7ff fedb 	bl	80051cc <check_fs>
 8005416:	4603      	mov	r3, r0
 8005418:	e000      	b.n	800541c <find_volume+0x1a4>
 800541a:	2303      	movs	r3, #3
 800541c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005420:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005424:	2b01      	cmp	r3, #1
 8005426:	d905      	bls.n	8005434 <find_volume+0x1bc>
 8005428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800542a:	3301      	adds	r3, #1
 800542c:	643b      	str	r3, [r7, #64]	@ 0x40
 800542e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005430:	2b03      	cmp	r3, #3
 8005432:	d9e2      	bls.n	80053fa <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005434:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005438:	2b04      	cmp	r3, #4
 800543a:	d101      	bne.n	8005440 <find_volume+0x1c8>
 800543c:	2301      	movs	r3, #1
 800543e:	e194      	b.n	800576a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005440:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005444:	2b01      	cmp	r3, #1
 8005446:	d901      	bls.n	800544c <find_volume+0x1d4>
 8005448:	230d      	movs	r3, #13
 800544a:	e18e      	b.n	800576a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800544c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544e:	3338      	adds	r3, #56	@ 0x38
 8005450:	330b      	adds	r3, #11
 8005452:	4618      	mov	r0, r3
 8005454:	f7fe f892 	bl	800357c <ld_word>
 8005458:	4603      	mov	r3, r0
 800545a:	461a      	mov	r2, r3
 800545c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545e:	899b      	ldrh	r3, [r3, #12]
 8005460:	429a      	cmp	r2, r3
 8005462:	d001      	beq.n	8005468 <find_volume+0x1f0>
 8005464:	230d      	movs	r3, #13
 8005466:	e180      	b.n	800576a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546a:	3338      	adds	r3, #56	@ 0x38
 800546c:	3316      	adds	r3, #22
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe f884 	bl	800357c <ld_word>
 8005474:	4603      	mov	r3, r0
 8005476:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d106      	bne.n	800548c <find_volume+0x214>
 800547e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005480:	3338      	adds	r3, #56	@ 0x38
 8005482:	3324      	adds	r3, #36	@ 0x24
 8005484:	4618      	mov	r0, r3
 8005486:	f7fe f892 	bl	80035ae <ld_dword>
 800548a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800548c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005490:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005494:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8005498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800549c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549e:	789b      	ldrb	r3, [r3, #2]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d005      	beq.n	80054b0 <find_volume+0x238>
 80054a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a6:	789b      	ldrb	r3, [r3, #2]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d001      	beq.n	80054b0 <find_volume+0x238>
 80054ac:	230d      	movs	r3, #13
 80054ae:	e15c      	b.n	800576a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80054b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b2:	789b      	ldrb	r3, [r3, #2]
 80054b4:	461a      	mov	r2, r3
 80054b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054b8:	fb02 f303 	mul.w	r3, r2, r3
 80054bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80054be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054c4:	461a      	mov	r2, r3
 80054c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80054ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054cc:	895b      	ldrh	r3, [r3, #10]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d008      	beq.n	80054e4 <find_volume+0x26c>
 80054d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d4:	895b      	ldrh	r3, [r3, #10]
 80054d6:	461a      	mov	r2, r3
 80054d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054da:	895b      	ldrh	r3, [r3, #10]
 80054dc:	3b01      	subs	r3, #1
 80054de:	4013      	ands	r3, r2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <find_volume+0x270>
 80054e4:	230d      	movs	r3, #13
 80054e6:	e140      	b.n	800576a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80054e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ea:	3338      	adds	r3, #56	@ 0x38
 80054ec:	3311      	adds	r3, #17
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fe f844 	bl	800357c <ld_word>
 80054f4:	4603      	mov	r3, r0
 80054f6:	461a      	mov	r2, r3
 80054f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80054fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fe:	891b      	ldrh	r3, [r3, #8]
 8005500:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005502:	8992      	ldrh	r2, [r2, #12]
 8005504:	0952      	lsrs	r2, r2, #5
 8005506:	b292      	uxth	r2, r2
 8005508:	fbb3 f1f2 	udiv	r1, r3, r2
 800550c:	fb01 f202 	mul.w	r2, r1, r2
 8005510:	1a9b      	subs	r3, r3, r2
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <find_volume+0x2a8>
 8005518:	230d      	movs	r3, #13
 800551a:	e126      	b.n	800576a <find_volume+0x4f2>
 800551c:	2000a0a0 	.word	0x2000a0a0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005522:	3338      	adds	r3, #56	@ 0x38
 8005524:	3313      	adds	r3, #19
 8005526:	4618      	mov	r0, r3
 8005528:	f7fe f828 	bl	800357c <ld_word>
 800552c:	4603      	mov	r3, r0
 800552e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005530:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <find_volume+0x2cc>
 8005536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005538:	3338      	adds	r3, #56	@ 0x38
 800553a:	3320      	adds	r3, #32
 800553c:	4618      	mov	r0, r3
 800553e:	f7fe f836 	bl	80035ae <ld_dword>
 8005542:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005546:	3338      	adds	r3, #56	@ 0x38
 8005548:	330e      	adds	r3, #14
 800554a:	4618      	mov	r0, r3
 800554c:	f7fe f816 	bl	800357c <ld_word>
 8005550:	4603      	mov	r3, r0
 8005552:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005554:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <find_volume+0x2e6>
 800555a:	230d      	movs	r3, #13
 800555c:	e105      	b.n	800576a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800555e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005562:	4413      	add	r3, r2
 8005564:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005566:	8911      	ldrh	r1, [r2, #8]
 8005568:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800556a:	8992      	ldrh	r2, [r2, #12]
 800556c:	0952      	lsrs	r2, r2, #5
 800556e:	b292      	uxth	r2, r2
 8005570:	fbb1 f2f2 	udiv	r2, r1, r2
 8005574:	b292      	uxth	r2, r2
 8005576:	4413      	add	r3, r2
 8005578:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800557a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800557c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557e:	429a      	cmp	r2, r3
 8005580:	d201      	bcs.n	8005586 <find_volume+0x30e>
 8005582:	230d      	movs	r3, #13
 8005584:	e0f1      	b.n	800576a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800558e:	8952      	ldrh	r2, [r2, #10]
 8005590:	fbb3 f3f2 	udiv	r3, r3, r2
 8005594:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <find_volume+0x328>
 800559c:	230d      	movs	r3, #13
 800559e:	e0e4      	b.n	800576a <find_volume+0x4f2>
		fmt = FS_FAT32;
 80055a0:	2303      	movs	r3, #3
 80055a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80055a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d802      	bhi.n	80055b6 <find_volume+0x33e>
 80055b0:	2302      	movs	r3, #2
 80055b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80055b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80055bc:	4293      	cmp	r3, r2
 80055be:	d802      	bhi.n	80055c6 <find_volume+0x34e>
 80055c0:	2301      	movs	r3, #1
 80055c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	1c9a      	adds	r2, r3, #2
 80055ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055cc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80055ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80055d2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80055d4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80055d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055d8:	441a      	add	r2, r3
 80055da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055dc:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80055de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80055e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e2:	441a      	add	r2, r3
 80055e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e6:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80055e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d11e      	bne.n	800562e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80055f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f2:	3338      	adds	r3, #56	@ 0x38
 80055f4:	332a      	adds	r3, #42	@ 0x2a
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fd ffc0 	bl	800357c <ld_word>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <find_volume+0x38e>
 8005602:	230d      	movs	r3, #13
 8005604:	e0b1      	b.n	800576a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005608:	891b      	ldrh	r3, [r3, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <find_volume+0x39a>
 800560e:	230d      	movs	r3, #13
 8005610:	e0ab      	b.n	800576a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005614:	3338      	adds	r3, #56	@ 0x38
 8005616:	332c      	adds	r3, #44	@ 0x2c
 8005618:	4618      	mov	r0, r3
 800561a:	f7fd ffc8 	bl	80035ae <ld_dword>
 800561e:	4602      	mov	r2, r0
 8005620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005622:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	647b      	str	r3, [r7, #68]	@ 0x44
 800562c:	e01f      	b.n	800566e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800562e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005630:	891b      	ldrh	r3, [r3, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <find_volume+0x3c2>
 8005636:	230d      	movs	r3, #13
 8005638:	e097      	b.n	800576a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800563a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800563e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005640:	441a      	add	r2, r3
 8005642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005644:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005646:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800564a:	2b02      	cmp	r3, #2
 800564c:	d103      	bne.n	8005656 <find_volume+0x3de>
 800564e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	e00a      	b.n	800566c <find_volume+0x3f4>
 8005656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005658:	69da      	ldr	r2, [r3, #28]
 800565a:	4613      	mov	r3, r2
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	4413      	add	r3, r2
 8005660:	085a      	lsrs	r2, r3, #1
 8005662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800566c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800566e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005670:	6a1a      	ldr	r2, [r3, #32]
 8005672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005674:	899b      	ldrh	r3, [r3, #12]
 8005676:	4619      	mov	r1, r3
 8005678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800567a:	440b      	add	r3, r1
 800567c:	3b01      	subs	r3, #1
 800567e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005680:	8989      	ldrh	r1, [r1, #12]
 8005682:	fbb3 f3f1 	udiv	r3, r3, r1
 8005686:	429a      	cmp	r2, r3
 8005688:	d201      	bcs.n	800568e <find_volume+0x416>
 800568a:	230d      	movs	r3, #13
 800568c:	e06d      	b.n	800576a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800568e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005690:	f04f 32ff 	mov.w	r2, #4294967295
 8005694:	619a      	str	r2, [r3, #24]
 8005696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800569e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a0:	2280      	movs	r2, #128	@ 0x80
 80056a2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80056a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d149      	bne.n	8005740 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80056ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ae:	3338      	adds	r3, #56	@ 0x38
 80056b0:	3330      	adds	r3, #48	@ 0x30
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fd ff62 	bl	800357c <ld_word>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d140      	bne.n	8005740 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80056be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056c0:	3301      	adds	r3, #1
 80056c2:	4619      	mov	r1, r3
 80056c4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80056c6:	f7fe fa0b 	bl	8003ae0 <move_window>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d137      	bne.n	8005740 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80056d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d2:	2200      	movs	r2, #0
 80056d4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80056d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d8:	3338      	adds	r3, #56	@ 0x38
 80056da:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fd ff4c 	bl	800357c <ld_word>
 80056e4:	4603      	mov	r3, r0
 80056e6:	461a      	mov	r2, r3
 80056e8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d127      	bne.n	8005740 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80056f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f2:	3338      	adds	r3, #56	@ 0x38
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fd ff5a 	bl	80035ae <ld_dword>
 80056fa:	4603      	mov	r3, r0
 80056fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005774 <find_volume+0x4fc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d11e      	bne.n	8005740 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005704:	3338      	adds	r3, #56	@ 0x38
 8005706:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800570a:	4618      	mov	r0, r3
 800570c:	f7fd ff4f 	bl	80035ae <ld_dword>
 8005710:	4603      	mov	r3, r0
 8005712:	4a19      	ldr	r2, [pc, #100]	@ (8005778 <find_volume+0x500>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d113      	bne.n	8005740 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571a:	3338      	adds	r3, #56	@ 0x38
 800571c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005720:	4618      	mov	r0, r3
 8005722:	f7fd ff44 	bl	80035ae <ld_dword>
 8005726:	4602      	mov	r2, r0
 8005728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800572c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572e:	3338      	adds	r3, #56	@ 0x38
 8005730:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005734:	4618      	mov	r0, r3
 8005736:	f7fd ff3a 	bl	80035ae <ld_dword>
 800573a:	4602      	mov	r2, r0
 800573c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005742:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005746:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005748:	4b0c      	ldr	r3, [pc, #48]	@ (800577c <find_volume+0x504>)
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	3301      	adds	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	4b0a      	ldr	r3, [pc, #40]	@ (800577c <find_volume+0x504>)
 8005752:	801a      	strh	r2, [r3, #0]
 8005754:	4b09      	ldr	r3, [pc, #36]	@ (800577c <find_volume+0x504>)
 8005756:	881a      	ldrh	r2, [r3, #0]
 8005758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800575c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575e:	4a08      	ldr	r2, [pc, #32]	@ (8005780 <find_volume+0x508>)
 8005760:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005762:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005764:	f7fe f954 	bl	8003a10 <clear_lock>
#endif
	return FR_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3758      	adds	r7, #88	@ 0x58
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	41615252 	.word	0x41615252
 8005778:	61417272 	.word	0x61417272
 800577c:	2000a0a4 	.word	0x2000a0a4
 8005780:	2000a0c8 	.word	0x2000a0c8

08005784 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800578e:	2309      	movs	r3, #9
 8005790:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01c      	beq.n	80057d2 <validate+0x4e>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d018      	beq.n	80057d2 <validate+0x4e>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d013      	beq.n	80057d2 <validate+0x4e>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	889a      	ldrh	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	88db      	ldrh	r3, [r3, #6]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d10c      	bne.n	80057d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	785b      	ldrb	r3, [r3, #1]
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fd fe3c 	bl	800343c <disk_status>
 80057c4:	4603      	mov	r3, r0
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <validate+0x4e>
			res = FR_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <validate+0x5a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	e000      	b.n	80057e0 <validate+0x5c>
 80057de:	2300      	movs	r3, #0
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	6013      	str	r3, [r2, #0]
	return res;
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	4613      	mov	r3, r2
 80057fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005802:	f107 0310 	add.w	r3, r7, #16
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff fc9c 	bl	8005144 <get_ldnumber>
 800580c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	2b00      	cmp	r3, #0
 8005812:	da01      	bge.n	8005818 <f_mount+0x28>
 8005814:	230b      	movs	r3, #11
 8005816:	e02b      	b.n	8005870 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005818:	4a17      	ldr	r2, [pc, #92]	@ (8005878 <f_mount+0x88>)
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005820:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005828:	69b8      	ldr	r0, [r7, #24]
 800582a:	f7fe f8f1 	bl	8003a10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	490d      	ldr	r1, [pc, #52]	@ (8005878 <f_mount+0x88>)
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <f_mount+0x66>
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d001      	beq.n	800585a <f_mount+0x6a>
 8005856:	2300      	movs	r3, #0
 8005858:	e00a      	b.n	8005870 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800585a:	f107 010c 	add.w	r1, r7, #12
 800585e:	f107 0308 	add.w	r3, r7, #8
 8005862:	2200      	movs	r2, #0
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff fd07 	bl	8005278 <find_volume>
 800586a:	4603      	mov	r3, r0
 800586c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800586e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	2000a0a0 	.word	0x2000a0a0

0800587c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b09a      	sub	sp, #104	@ 0x68
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	4613      	mov	r3, r2
 8005888:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <f_open+0x18>
 8005890:	2309      	movs	r3, #9
 8005892:	e1b7      	b.n	8005c04 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800589a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800589c:	79fa      	ldrb	r2, [r7, #7]
 800589e:	f107 0114 	add.w	r1, r7, #20
 80058a2:	f107 0308 	add.w	r3, r7, #8
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff fce6 	bl	8005278 <find_volume>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80058b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f040 819b 	bne.w	8005bf2 <f_open+0x376>
		dj.obj.fs = fs;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	f107 0318 	add.w	r3, r7, #24
 80058c6:	4611      	mov	r1, r2
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7ff fbc5 	bl	8005058 <follow_path>
 80058ce:	4603      	mov	r3, r0
 80058d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80058d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d118      	bne.n	800590e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80058dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80058e0:	b25b      	sxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	da03      	bge.n	80058ee <f_open+0x72>
				res = FR_INVALID_NAME;
 80058e6:	2306      	movs	r3, #6
 80058e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80058ec:	e00f      	b.n	800590e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	bf8c      	ite	hi
 80058f4:	2301      	movhi	r3, #1
 80058f6:	2300      	movls	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	461a      	mov	r2, r3
 80058fc:	f107 0318 	add.w	r3, r7, #24
 8005900:	4611      	mov	r1, r2
 8005902:	4618      	mov	r0, r3
 8005904:	f7fd ff3c 	bl	8003780 <chk_lock>
 8005908:	4603      	mov	r3, r0
 800590a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800590e:	79fb      	ldrb	r3, [r7, #7]
 8005910:	f003 031c 	and.w	r3, r3, #28
 8005914:	2b00      	cmp	r3, #0
 8005916:	d07f      	beq.n	8005a18 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8005918:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800591c:	2b00      	cmp	r3, #0
 800591e:	d017      	beq.n	8005950 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005920:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005924:	2b04      	cmp	r3, #4
 8005926:	d10e      	bne.n	8005946 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005928:	f7fd ff86 	bl	8003838 <enq_lock>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d006      	beq.n	8005940 <f_open+0xc4>
 8005932:	f107 0318 	add.w	r3, r7, #24
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff f8de 	bl	8004af8 <dir_register>
 800593c:	4603      	mov	r3, r0
 800593e:	e000      	b.n	8005942 <f_open+0xc6>
 8005940:	2312      	movs	r3, #18
 8005942:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	f043 0308 	orr.w	r3, r3, #8
 800594c:	71fb      	strb	r3, [r7, #7]
 800594e:	e010      	b.n	8005972 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005950:	7fbb      	ldrb	r3, [r7, #30]
 8005952:	f003 0311 	and.w	r3, r3, #17
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <f_open+0xe6>
					res = FR_DENIED;
 800595a:	2307      	movs	r3, #7
 800595c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005960:	e007      	b.n	8005972 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <f_open+0xf6>
 800596c:	2308      	movs	r3, #8
 800596e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005972:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005976:	2b00      	cmp	r3, #0
 8005978:	d168      	bne.n	8005a4c <f_open+0x1d0>
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b00      	cmp	r3, #0
 8005982:	d063      	beq.n	8005a4c <f_open+0x1d0>
				dw = GET_FATTIME();
 8005984:	f7fd fcfc 	bl	8003380 <get_fattime>
 8005988:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800598a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598c:	330e      	adds	r3, #14
 800598e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005990:	4618      	mov	r0, r3
 8005992:	f7fd fe4a 	bl	800362a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005998:	3316      	adds	r3, #22
 800599a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800599c:	4618      	mov	r0, r3
 800599e:	f7fd fe44 	bl	800362a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80059a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a4:	330b      	adds	r3, #11
 80059a6:	2220      	movs	r2, #32
 80059a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059ae:	4611      	mov	r1, r2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fe fe1a 	bl	80045ea <ld_clust>
 80059b6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80059bc:	2200      	movs	r2, #0
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fe fe32 	bl	8004628 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80059c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c6:	331c      	adds	r3, #28
 80059c8:	2100      	movs	r1, #0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fd fe2d 	bl	800362a <st_dword>
					fs->wflag = 1;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2201      	movs	r2, #1
 80059d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80059d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d037      	beq.n	8005a4c <f_open+0x1d0>
						dw = fs->winsect;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80059e2:	f107 0318 	add.w	r3, r7, #24
 80059e6:	2200      	movs	r2, #0
 80059e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fe fb22 	bl	8004034 <remove_chain>
 80059f0:	4603      	mov	r3, r0
 80059f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80059f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d126      	bne.n	8005a4c <f_open+0x1d0>
							res = move_window(fs, dw);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fe f86c 	bl	8003ae0 <move_window>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a12:	3a01      	subs	r2, #1
 8005a14:	615a      	str	r2, [r3, #20]
 8005a16:	e019      	b.n	8005a4c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005a18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d115      	bne.n	8005a4c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005a20:	7fbb      	ldrb	r3, [r7, #30]
 8005a22:	f003 0310 	and.w	r3, r3, #16
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <f_open+0x1b6>
					res = FR_NO_FILE;
 8005a2a:	2304      	movs	r3, #4
 8005a2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005a30:	e00c      	b.n	8005a4c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <f_open+0x1d0>
 8005a3c:	7fbb      	ldrb	r3, [r7, #30]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <f_open+0x1d0>
						res = FR_DENIED;
 8005a46:	2307      	movs	r3, #7
 8005a48:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8005a4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d126      	bne.n	8005aa2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a64:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8005a6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005a74:	79fb      	ldrb	r3, [r7, #7]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	bf8c      	ite	hi
 8005a7a:	2301      	movhi	r3, #1
 8005a7c:	2300      	movls	r3, #0
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	461a      	mov	r2, r3
 8005a82:	f107 0318 	add.w	r3, r7, #24
 8005a86:	4611      	mov	r1, r2
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fd fef7 	bl	800387c <inc_lock>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d102      	bne.n	8005aa2 <f_open+0x226>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005aa2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f040 80a3 	bne.w	8005bf2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe fd99 	bl	80045ea <ld_clust>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac0:	331c      	adds	r3, #28
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fd fd73 	bl	80035ae <ld_dword>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	88da      	ldrh	r2, [r3, #6]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	79fa      	ldrb	r2, [r7, #7]
 8005ae6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3330      	adds	r3, #48	@ 0x30
 8005afe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005b02:	2100      	movs	r1, #0
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fd fddd 	bl	80036c4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d06e      	beq.n	8005bf2 <f_open+0x376>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d06a      	beq.n	8005bf2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	895b      	ldrh	r3, [r3, #10]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	899b      	ldrh	r3, [r3, #12]
 8005b2e:	fb02 f303 	mul.w	r3, r2, r3
 8005b32:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b40:	e016      	b.n	8005b70 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fe f887 	bl	8003c5a <get_fat>
 8005b4c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8005b4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d802      	bhi.n	8005b5a <f_open+0x2de>
 8005b54:	2302      	movs	r3, #2
 8005b56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005b5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b60:	d102      	bne.n	8005b68 <f_open+0x2ec>
 8005b62:	2301      	movs	r3, #1
 8005b64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005b68:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005b6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b70:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d103      	bne.n	8005b80 <f_open+0x304>
 8005b78:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005b7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d8e0      	bhi.n	8005b42 <f_open+0x2c6>
				}
				fp->clust = clst;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b84:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005b86:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d131      	bne.n	8005bf2 <f_open+0x376>
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	899b      	ldrh	r3, [r3, #12]
 8005b92:	461a      	mov	r2, r3
 8005b94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b96:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b9a:	fb01 f202 	mul.w	r2, r1, r2
 8005b9e:	1a9b      	subs	r3, r3, r2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d026      	beq.n	8005bf2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe f837 	bl	8003c1c <clust2sect>
 8005bae:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8005bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d103      	bne.n	8005bbe <f_open+0x342>
						res = FR_INT_ERR;
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005bbc:	e019      	b.n	8005bf2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	899b      	ldrh	r3, [r3, #12]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bcc:	441a      	add	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	7858      	ldrb	r0, [r3, #1]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6a1a      	ldr	r2, [r3, #32]
 8005be0:	2301      	movs	r3, #1
 8005be2:	f7fd fc6d 	bl	80034c0 <disk_read>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <f_open+0x376>
 8005bec:	2301      	movs	r3, #1
 8005bee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005bf2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <f_open+0x384>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005c00:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3768      	adds	r7, #104	@ 0x68
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08e      	sub	sp, #56	@ 0x38
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f107 0214 	add.w	r2, r7, #20
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff fda9 	bl	8005784 <validate>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005c38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d107      	bne.n	8005c50 <f_read+0x44>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	7d5b      	ldrb	r3, [r3, #21]
 8005c44:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005c48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <f_read+0x4a>
 8005c50:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005c54:	e135      	b.n	8005ec2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	7d1b      	ldrb	r3, [r3, #20]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <f_read+0x5a>
 8005c62:	2307      	movs	r3, #7
 8005c64:	e12d      	b.n	8005ec2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	f240 811e 	bls.w	8005eb8 <f_read+0x2ac>
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005c80:	e11a      	b.n	8005eb8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	8992      	ldrh	r2, [r2, #12]
 8005c8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c8e:	fb01 f202 	mul.w	r2, r1, r2
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f040 80d5 	bne.w	8005e44 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	8992      	ldrh	r2, [r2, #12]
 8005ca2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	8952      	ldrh	r2, [r2, #10]
 8005caa:	3a01      	subs	r2, #1
 8005cac:	4013      	ands	r3, r2
 8005cae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d12f      	bne.n	8005d16 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d103      	bne.n	8005cc6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cc4:	e013      	b.n	8005cee <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d007      	beq.n	8005cde <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f7fe faaa 	bl	800422e <clmt_clust>
 8005cda:	6338      	str	r0, [r7, #48]	@ 0x30
 8005cdc:	e007      	b.n	8005cee <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	f7fd ffb7 	bl	8003c5a <get_fat>
 8005cec:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d804      	bhi.n	8005cfe <f_read+0xf2>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	755a      	strb	r2, [r3, #21]
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	e0e1      	b.n	8005ec2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d04:	d104      	bne.n	8005d10 <f_read+0x104>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	755a      	strb	r2, [r3, #21]
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0d8      	b.n	8005ec2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d14:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4610      	mov	r0, r2
 8005d20:	f7fd ff7c 	bl	8003c1c <clust2sect>
 8005d24:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d104      	bne.n	8005d36 <f_read+0x12a>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	755a      	strb	r2, [r3, #21]
 8005d32:	2302      	movs	r3, #2
 8005d34:	e0c5      	b.n	8005ec2 <f_read+0x2b6>
			sect += csect;
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	899b      	ldrh	r3, [r3, #12]
 8005d42:	461a      	mov	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d041      	beq.n	8005dd6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d56:	4413      	add	r3, r2
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	8952      	ldrh	r2, [r2, #10]
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d905      	bls.n	8005d6c <f_read+0x160>
					cc = fs->csize - csect;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	895b      	ldrh	r3, [r3, #10]
 8005d64:	461a      	mov	r2, r3
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	7858      	ldrb	r0, [r3, #1]
 8005d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d76:	f7fd fba3 	bl	80034c0 <disk_read>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d004      	beq.n	8005d8a <f_read+0x17e>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2201      	movs	r2, #1
 8005d84:	755a      	strb	r2, [r3, #21]
 8005d86:	2301      	movs	r3, #1
 8005d88:	e09b      	b.n	8005ec2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	7d1b      	ldrb	r3, [r3, #20]
 8005d8e:	b25b      	sxtb	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	da18      	bge.n	8005dc6 <f_read+0x1ba>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a1a      	ldr	r2, [r3, #32]
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d911      	bls.n	8005dc6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1a      	ldr	r2, [r3, #32]
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	8992      	ldrh	r2, [r2, #12]
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
 8005db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005db4:	18d0      	adds	r0, r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	899b      	ldrh	r3, [r3, #12]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	f7fd fc5e 	bl	8003682 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	899b      	ldrh	r3, [r3, #12]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dce:	fb02 f303 	mul.w	r3, r2, r3
 8005dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8005dd4:	e05c      	b.n	8005e90 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d02e      	beq.n	8005e3e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	7d1b      	ldrb	r3, [r3, #20]
 8005de4:	b25b      	sxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	da18      	bge.n	8005e1c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	7858      	ldrb	r0, [r3, #1]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a1a      	ldr	r2, [r3, #32]
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f7fd fb81 	bl	8003500 <disk_write>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <f_read+0x202>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	755a      	strb	r2, [r3, #21]
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e059      	b.n	8005ec2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	7d1b      	ldrb	r3, [r3, #20]
 8005e12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	7858      	ldrb	r0, [r3, #1]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005e26:	2301      	movs	r3, #1
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	f7fd fb49 	bl	80034c0 <disk_read>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d004      	beq.n	8005e3e <f_read+0x232>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	755a      	strb	r2, [r3, #21]
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e041      	b.n	8005ec2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	899b      	ldrh	r3, [r3, #12]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	8992      	ldrh	r2, [r2, #12]
 8005e52:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e56:	fb01 f202 	mul.w	r2, r1, r2
 8005e5a:	1a9b      	subs	r3, r3, r2
 8005e5c:	1ac3      	subs	r3, r0, r3
 8005e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005e60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d901      	bls.n	8005e6c <f_read+0x260>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	8992      	ldrh	r2, [r2, #12]
 8005e7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e7e:	fb00 f202 	mul.w	r2, r0, r2
 8005e82:	1a9b      	subs	r3, r3, r2
 8005e84:	440b      	add	r3, r1
 8005e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e8c:	f7fd fbf9 	bl	8003682 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e94:	4413      	add	r3, r2
 8005e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	699a      	ldr	r2, [r3, #24]
 8005e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9e:	441a      	add	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	619a      	str	r2, [r3, #24]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eaa:	441a      	add	r2, r3
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f47f aee1 	bne.w	8005c82 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3738      	adds	r7, #56	@ 0x38
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b086      	sub	sp, #24
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f107 0208 	add.w	r2, r7, #8
 8005ed8:	4611      	mov	r1, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff fc52 	bl	8005784 <validate>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005ee4:	7dfb      	ldrb	r3, [r7, #23]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d168      	bne.n	8005fbc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	7d1b      	ldrb	r3, [r3, #20]
 8005eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d062      	beq.n	8005fbc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	7d1b      	ldrb	r3, [r3, #20]
 8005efa:	b25b      	sxtb	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	da15      	bge.n	8005f2c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	7858      	ldrb	r0, [r3, #1]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1a      	ldr	r2, [r3, #32]
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f7fd faf6 	bl	8003500 <disk_write>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <f_sync+0x54>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e04f      	b.n	8005fbe <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	7d1b      	ldrb	r3, [r3, #20]
 8005f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005f2c:	f7fd fa28 	bl	8003380 <get_fattime>
 8005f30:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	f7fd fdd0 	bl	8003ae0 <move_window>
 8005f40:	4603      	mov	r3, r0
 8005f42:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005f44:	7dfb      	ldrb	r3, [r7, #23]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d138      	bne.n	8005fbc <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	330b      	adds	r3, #11
 8005f54:	781a      	ldrb	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	330b      	adds	r3, #11
 8005f5a:	f042 0220 	orr.w	r2, r2, #32
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	68f9      	ldr	r1, [r7, #12]
 8005f6e:	f7fe fb5b 	bl	8004628 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f103 021c 	add.w	r2, r3, #28
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4610      	mov	r0, r2
 8005f80:	f7fd fb53 	bl	800362a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3316      	adds	r3, #22
 8005f88:	6939      	ldr	r1, [r7, #16]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fd fb4d 	bl	800362a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3312      	adds	r3, #18
 8005f94:	2100      	movs	r1, #0
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fd fb2c 	bl	80035f4 <st_word>
					fs->wflag = 1;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fd fdc9 	bl	8003b3c <sync_fs>
 8005faa:	4603      	mov	r3, r0
 8005fac:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	7d1b      	ldrb	r3, [r3, #20]
 8005fb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7ff ff7b 	bl	8005eca <f_sync>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d118      	bne.n	8006010 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f107 0208 	add.w	r2, r7, #8
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff fbcc 	bl	8005784 <validate>
 8005fec:	4603      	mov	r3, r0
 8005fee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10c      	bne.n	8006010 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fd fccc 	bl	8003998 <dec_lock>
 8006000:	4603      	mov	r3, r0
 8006002:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d102      	bne.n	8006010 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006010:	7bfb      	ldrb	r3, [r7, #15]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b090      	sub	sp, #64	@ 0x40
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f107 0208 	add.w	r2, r7, #8
 800602a:	4611      	mov	r1, r2
 800602c:	4618      	mov	r0, r3
 800602e:	f7ff fba9 	bl	8005784 <validate>
 8006032:	4603      	mov	r3, r0
 8006034:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006038:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800603c:	2b00      	cmp	r3, #0
 800603e:	d103      	bne.n	8006048 <f_lseek+0x2e>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	7d5b      	ldrb	r3, [r3, #21]
 8006044:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006048:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <f_lseek+0x3c>
 8006050:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006054:	e201      	b.n	800645a <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 80d9 	beq.w	8006212 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006066:	d15a      	bne.n	800611e <f_lseek+0x104>
			tbl = fp->cltbl;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	1d1a      	adds	r2, r3, #4
 8006072:	627a      	str	r2, [r7, #36]	@ 0x24
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	2302      	movs	r3, #2
 800607a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8006082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006084:	2b00      	cmp	r3, #0
 8006086:	d03a      	beq.n	80060fe <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	2300      	movs	r3, #0
 800608e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006092:	3302      	adds	r3, #2
 8006094:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8006096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609c:	3301      	adds	r3, #1
 800609e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fd fdd8 	bl	8003c5a <get_fat>
 80060aa:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80060ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d804      	bhi.n	80060bc <f_lseek+0xa2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2202      	movs	r2, #2
 80060b6:	755a      	strb	r2, [r3, #21]
 80060b8:	2302      	movs	r3, #2
 80060ba:	e1ce      	b.n	800645a <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80060bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c2:	d104      	bne.n	80060ce <f_lseek+0xb4>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	755a      	strb	r2, [r3, #21]
 80060ca:	2301      	movs	r3, #1
 80060cc:	e1c5      	b.n	800645a <f_lseek+0x440>
					} while (cl == pcl + 1);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3301      	adds	r3, #1
 80060d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d0de      	beq.n	8006096 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80060d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d809      	bhi.n	80060f4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	1d1a      	adds	r2, r3, #4
 80060e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80060e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	1d1a      	adds	r2, r3, #4
 80060ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d3c4      	bcc.n	8006088 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006102:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006104:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8006106:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	429a      	cmp	r2, r3
 800610c:	d803      	bhi.n	8006116 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	e19f      	b.n	8006456 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006116:	2311      	movs	r3, #17
 8006118:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800611c:	e19b      	b.n	8006456 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	429a      	cmp	r2, r3
 8006126:	d902      	bls.n	800612e <f_lseek+0x114>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 818d 	beq.w	8006456 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	3b01      	subs	r3, #1
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fe f873 	bl	800422e <clmt_clust>
 8006148:	4602      	mov	r2, r0
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f7fd fd60 	bl	8003c1c <clust2sect>
 800615c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d104      	bne.n	800616e <f_lseek+0x154>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2202      	movs	r2, #2
 8006168:	755a      	strb	r2, [r3, #21]
 800616a:	2302      	movs	r3, #2
 800616c:	e175      	b.n	800645a <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	3b01      	subs	r3, #1
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	8992      	ldrh	r2, [r2, #12]
 8006176:	fbb3 f3f2 	udiv	r3, r3, r2
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	8952      	ldrh	r2, [r2, #10]
 800617e:	3a01      	subs	r2, #1
 8006180:	4013      	ands	r3, r2
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	4413      	add	r3, r2
 8006186:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	8992      	ldrh	r2, [r2, #12]
 8006190:	fbb3 f1f2 	udiv	r1, r3, r2
 8006194:	fb01 f202 	mul.w	r2, r1, r2
 8006198:	1a9b      	subs	r3, r3, r2
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 815b 	beq.w	8006456 <f_lseek+0x43c>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	f000 8155 	beq.w	8006456 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	7d1b      	ldrb	r3, [r3, #20]
 80061b0:	b25b      	sxtb	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	da18      	bge.n	80061e8 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	7858      	ldrb	r0, [r3, #1]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a1a      	ldr	r2, [r3, #32]
 80061c4:	2301      	movs	r3, #1
 80061c6:	f7fd f99b 	bl	8003500 <disk_write>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d004      	beq.n	80061da <f_lseek+0x1c0>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	755a      	strb	r2, [r3, #21]
 80061d6:	2301      	movs	r3, #1
 80061d8:	e13f      	b.n	800645a <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	7d1b      	ldrb	r3, [r3, #20]
 80061de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	7858      	ldrb	r0, [r3, #1]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80061f2:	2301      	movs	r3, #1
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	f7fd f963 	bl	80034c0 <disk_read>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d004      	beq.n	800620a <f_lseek+0x1f0>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	755a      	strb	r2, [r3, #21]
 8006206:	2301      	movs	r3, #1
 8006208:	e127      	b.n	800645a <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	621a      	str	r2, [r3, #32]
 8006210:	e121      	b.n	8006456 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	429a      	cmp	r2, r3
 800621a:	d908      	bls.n	800622e <f_lseek+0x214>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	7d1b      	ldrb	r3, [r3, #20]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d102      	bne.n	800622e <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	637b      	str	r3, [r7, #52]	@ 0x34
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800623c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 80b5 	beq.w	80063b0 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	895b      	ldrh	r3, [r3, #10]
 800624a:	461a      	mov	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	899b      	ldrh	r3, [r3, #12]
 8006250:	fb02 f303 	mul.w	r3, r2, r3
 8006254:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01b      	beq.n	8006294 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	1e5a      	subs	r2, r3, #1
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	fbb2 f2f3 	udiv	r2, r2, r3
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	1e59      	subs	r1, r3, #1
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006270:	429a      	cmp	r2, r3
 8006272:	d30f      	bcc.n	8006294 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	1e5a      	subs	r2, r3, #1
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	425b      	negs	r3, r3
 800627c:	401a      	ands	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006292:	e022      	b.n	80062da <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800629a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629c:	2b00      	cmp	r3, #0
 800629e:	d119      	bne.n	80062d4 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2100      	movs	r1, #0
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fd ff2a 	bl	80040fe <create_chain>
 80062aa:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80062ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d104      	bne.n	80062bc <f_lseek+0x2a2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2202      	movs	r2, #2
 80062b6:	755a      	strb	r2, [r3, #21]
 80062b8:	2302      	movs	r3, #2
 80062ba:	e0ce      	b.n	800645a <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80062bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c2:	d104      	bne.n	80062ce <f_lseek+0x2b4>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	755a      	strb	r2, [r3, #21]
 80062ca:	2301      	movs	r3, #1
 80062cc:	e0c5      	b.n	800645a <f_lseek+0x440>
					fp->obj.sclust = clst;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062d2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062d8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80062da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d067      	beq.n	80063b0 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80062e0:	e03a      	b.n	8006358 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	603b      	str	r3, [r7, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	441a      	add	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	7d1b      	ldrb	r3, [r3, #20]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00b      	beq.n	800631a <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006306:	4618      	mov	r0, r3
 8006308:	f7fd fef9 	bl	80040fe <create_chain>
 800630c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800630e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006310:	2b00      	cmp	r3, #0
 8006312:	d108      	bne.n	8006326 <f_lseek+0x30c>
							ofs = 0; break;
 8006314:	2300      	movs	r3, #0
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	e022      	b.n	8006360 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800631e:	4618      	mov	r0, r3
 8006320:	f7fd fc9b 	bl	8003c5a <get_fat>
 8006324:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632c:	d104      	bne.n	8006338 <f_lseek+0x31e>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	755a      	strb	r2, [r3, #21]
 8006334:	2301      	movs	r3, #1
 8006336:	e090      	b.n	800645a <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633a:	2b01      	cmp	r3, #1
 800633c:	d904      	bls.n	8006348 <f_lseek+0x32e>
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006344:	429a      	cmp	r2, r3
 8006346:	d304      	bcc.n	8006352 <f_lseek+0x338>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	755a      	strb	r2, [r3, #21]
 800634e:	2302      	movs	r3, #2
 8006350:	e083      	b.n	800645a <f_lseek+0x440>
					fp->clust = clst;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006356:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	429a      	cmp	r2, r3
 800635e:	d8c0      	bhi.n	80062e2 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699a      	ldr	r2, [r3, #24]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	441a      	add	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	899b      	ldrh	r3, [r3, #12]
 8006370:	461a      	mov	r2, r3
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	fbb3 f1f2 	udiv	r1, r3, r2
 8006378:	fb01 f202 	mul.w	r2, r1, r2
 800637c:	1a9b      	subs	r3, r3, r2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d016      	beq.n	80063b0 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006386:	4618      	mov	r0, r3
 8006388:	f7fd fc48 	bl	8003c1c <clust2sect>
 800638c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800638e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006390:	2b00      	cmp	r3, #0
 8006392:	d104      	bne.n	800639e <f_lseek+0x384>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	755a      	strb	r2, [r3, #21]
 800639a:	2302      	movs	r3, #2
 800639c:	e05d      	b.n	800645a <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	899b      	ldrh	r3, [r3, #12]
 80063a2:	461a      	mov	r2, r3
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80063aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063ac:	4413      	add	r3, r2
 80063ae:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699a      	ldr	r2, [r3, #24]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d90a      	bls.n	80063d2 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	699a      	ldr	r2, [r3, #24]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	7d1b      	ldrb	r3, [r3, #20]
 80063c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	8992      	ldrh	r2, [r2, #12]
 80063da:	fbb3 f1f2 	udiv	r1, r3, r2
 80063de:	fb01 f202 	mul.w	r2, r1, r2
 80063e2:	1a9b      	subs	r3, r3, r2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d036      	beq.n	8006456 <f_lseek+0x43c>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d031      	beq.n	8006456 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	7d1b      	ldrb	r3, [r3, #20]
 80063f6:	b25b      	sxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	da18      	bge.n	800642e <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	7858      	ldrb	r0, [r3, #1]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1a      	ldr	r2, [r3, #32]
 800640a:	2301      	movs	r3, #1
 800640c:	f7fd f878 	bl	8003500 <disk_write>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d004      	beq.n	8006420 <f_lseek+0x406>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	755a      	strb	r2, [r3, #21]
 800641c:	2301      	movs	r3, #1
 800641e:	e01c      	b.n	800645a <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	7d1b      	ldrb	r3, [r3, #20]
 8006424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006428:	b2da      	uxtb	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	7858      	ldrb	r0, [r3, #1]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006438:	2301      	movs	r3, #1
 800643a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800643c:	f7fd f840 	bl	80034c0 <disk_read>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d004      	beq.n	8006450 <f_lseek+0x436>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	755a      	strb	r2, [r3, #21]
 800644c:	2301      	movs	r3, #1
 800644e:	e004      	b.n	800645a <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006454:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8006456:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800645a:	4618      	mov	r0, r3
 800645c:	3740      	adds	r7, #64	@ 0x40
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	4613      	mov	r3, r2
 8006470:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006472:	2301      	movs	r3, #1
 8006474:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006476:	2300      	movs	r3, #0
 8006478:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800647a:	4b1f      	ldr	r3, [pc, #124]	@ (80064f8 <FATFS_LinkDriverEx+0x94>)
 800647c:	7a5b      	ldrb	r3, [r3, #9]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d131      	bne.n	80064e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006484:	4b1c      	ldr	r3, [pc, #112]	@ (80064f8 <FATFS_LinkDriverEx+0x94>)
 8006486:	7a5b      	ldrb	r3, [r3, #9]
 8006488:	b2db      	uxtb	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	4b1a      	ldr	r3, [pc, #104]	@ (80064f8 <FATFS_LinkDriverEx+0x94>)
 800648e:	2100      	movs	r1, #0
 8006490:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006492:	4b19      	ldr	r3, [pc, #100]	@ (80064f8 <FATFS_LinkDriverEx+0x94>)
 8006494:	7a5b      	ldrb	r3, [r3, #9]
 8006496:	b2db      	uxtb	r3, r3
 8006498:	4a17      	ldr	r2, [pc, #92]	@ (80064f8 <FATFS_LinkDriverEx+0x94>)
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80064a2:	4b15      	ldr	r3, [pc, #84]	@ (80064f8 <FATFS_LinkDriverEx+0x94>)
 80064a4:	7a5b      	ldrb	r3, [r3, #9]
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	461a      	mov	r2, r3
 80064aa:	4b13      	ldr	r3, [pc, #76]	@ (80064f8 <FATFS_LinkDriverEx+0x94>)
 80064ac:	4413      	add	r3, r2
 80064ae:	79fa      	ldrb	r2, [r7, #7]
 80064b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80064b2:	4b11      	ldr	r3, [pc, #68]	@ (80064f8 <FATFS_LinkDriverEx+0x94>)
 80064b4:	7a5b      	ldrb	r3, [r3, #9]
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	b2d1      	uxtb	r1, r2
 80064bc:	4a0e      	ldr	r2, [pc, #56]	@ (80064f8 <FATFS_LinkDriverEx+0x94>)
 80064be:	7251      	strb	r1, [r2, #9]
 80064c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80064c2:	7dbb      	ldrb	r3, [r7, #22]
 80064c4:	3330      	adds	r3, #48	@ 0x30
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	3301      	adds	r3, #1
 80064d0:	223a      	movs	r2, #58	@ 0x3a
 80064d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	3302      	adds	r3, #2
 80064d8:	222f      	movs	r2, #47	@ 0x2f
 80064da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	3303      	adds	r3, #3
 80064e0:	2200      	movs	r2, #0
 80064e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	2000a2c8 	.word	0x2000a2c8

080064fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006506:	2200      	movs	r2, #0
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff ffaa 	bl	8006464 <FATFS_LinkDriverEx>
 8006510:	4603      	mov	r3, r0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	4603      	mov	r3, r0
 8006524:	6039      	str	r1, [r7, #0]
 8006526:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006528:	88fb      	ldrh	r3, [r7, #6]
 800652a:	2b7f      	cmp	r3, #127	@ 0x7f
 800652c:	d802      	bhi.n	8006534 <ff_convert+0x18>
		c = chr;
 800652e:	88fb      	ldrh	r3, [r7, #6]
 8006530:	81fb      	strh	r3, [r7, #14]
 8006532:	e025      	b.n	8006580 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00b      	beq.n	8006552 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800653a:	88fb      	ldrh	r3, [r7, #6]
 800653c:	2bff      	cmp	r3, #255	@ 0xff
 800653e:	d805      	bhi.n	800654c <ff_convert+0x30>
 8006540:	88fb      	ldrh	r3, [r7, #6]
 8006542:	3b80      	subs	r3, #128	@ 0x80
 8006544:	4a12      	ldr	r2, [pc, #72]	@ (8006590 <ff_convert+0x74>)
 8006546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800654a:	e000      	b.n	800654e <ff_convert+0x32>
 800654c:	2300      	movs	r3, #0
 800654e:	81fb      	strh	r3, [r7, #14]
 8006550:	e016      	b.n	8006580 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006552:	2300      	movs	r3, #0
 8006554:	81fb      	strh	r3, [r7, #14]
 8006556:	e009      	b.n	800656c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006558:	89fb      	ldrh	r3, [r7, #14]
 800655a:	4a0d      	ldr	r2, [pc, #52]	@ (8006590 <ff_convert+0x74>)
 800655c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006560:	88fa      	ldrh	r2, [r7, #6]
 8006562:	429a      	cmp	r2, r3
 8006564:	d006      	beq.n	8006574 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006566:	89fb      	ldrh	r3, [r7, #14]
 8006568:	3301      	adds	r3, #1
 800656a:	81fb      	strh	r3, [r7, #14]
 800656c:	89fb      	ldrh	r3, [r7, #14]
 800656e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006570:	d9f2      	bls.n	8006558 <ff_convert+0x3c>
 8006572:	e000      	b.n	8006576 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006574:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006576:	89fb      	ldrh	r3, [r7, #14]
 8006578:	3380      	adds	r3, #128	@ 0x80
 800657a:	b29b      	uxth	r3, r3
 800657c:	b2db      	uxtb	r3, r3
 800657e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006580:	89fb      	ldrh	r3, [r7, #14]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	0800d2dc 	.word	0x0800d2dc

08006594 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	4603      	mov	r3, r0
 800659c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800659e:	88fb      	ldrh	r3, [r7, #6]
 80065a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065a4:	d201      	bcs.n	80065aa <ff_wtoupper+0x16>
 80065a6:	4b3e      	ldr	r3, [pc, #248]	@ (80066a0 <ff_wtoupper+0x10c>)
 80065a8:	e000      	b.n	80065ac <ff_wtoupper+0x18>
 80065aa:	4b3e      	ldr	r3, [pc, #248]	@ (80066a4 <ff_wtoupper+0x110>)
 80065ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	1c9a      	adds	r2, r3, #2
 80065b2:	617a      	str	r2, [r7, #20]
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80065b8:	8a7b      	ldrh	r3, [r7, #18]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d068      	beq.n	8006690 <ff_wtoupper+0xfc>
 80065be:	88fa      	ldrh	r2, [r7, #6]
 80065c0:	8a7b      	ldrh	r3, [r7, #18]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d364      	bcc.n	8006690 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	1c9a      	adds	r2, r3, #2
 80065ca:	617a      	str	r2, [r7, #20]
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	823b      	strh	r3, [r7, #16]
 80065d0:	8a3b      	ldrh	r3, [r7, #16]
 80065d2:	0a1b      	lsrs	r3, r3, #8
 80065d4:	81fb      	strh	r3, [r7, #14]
 80065d6:	8a3b      	ldrh	r3, [r7, #16]
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80065dc:	88fa      	ldrh	r2, [r7, #6]
 80065de:	8a79      	ldrh	r1, [r7, #18]
 80065e0:	8a3b      	ldrh	r3, [r7, #16]
 80065e2:	440b      	add	r3, r1
 80065e4:	429a      	cmp	r2, r3
 80065e6:	da49      	bge.n	800667c <ff_wtoupper+0xe8>
			switch (cmd) {
 80065e8:	89fb      	ldrh	r3, [r7, #14]
 80065ea:	2b08      	cmp	r3, #8
 80065ec:	d84f      	bhi.n	800668e <ff_wtoupper+0xfa>
 80065ee:	a201      	add	r2, pc, #4	@ (adr r2, 80065f4 <ff_wtoupper+0x60>)
 80065f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f4:	08006619 	.word	0x08006619
 80065f8:	0800662b 	.word	0x0800662b
 80065fc:	08006641 	.word	0x08006641
 8006600:	08006649 	.word	0x08006649
 8006604:	08006651 	.word	0x08006651
 8006608:	08006659 	.word	0x08006659
 800660c:	08006661 	.word	0x08006661
 8006610:	08006669 	.word	0x08006669
 8006614:	08006671 	.word	0x08006671
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006618:	88fa      	ldrh	r2, [r7, #6]
 800661a:	8a7b      	ldrh	r3, [r7, #18]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	4413      	add	r3, r2
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	80fb      	strh	r3, [r7, #6]
 8006628:	e027      	b.n	800667a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800662a:	88fa      	ldrh	r2, [r7, #6]
 800662c:	8a7b      	ldrh	r3, [r7, #18]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	b29b      	uxth	r3, r3
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	b29b      	uxth	r3, r3
 8006638:	88fa      	ldrh	r2, [r7, #6]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	80fb      	strh	r3, [r7, #6]
 800663e:	e01c      	b.n	800667a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006640:	88fb      	ldrh	r3, [r7, #6]
 8006642:	3b10      	subs	r3, #16
 8006644:	80fb      	strh	r3, [r7, #6]
 8006646:	e018      	b.n	800667a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006648:	88fb      	ldrh	r3, [r7, #6]
 800664a:	3b20      	subs	r3, #32
 800664c:	80fb      	strh	r3, [r7, #6]
 800664e:	e014      	b.n	800667a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006650:	88fb      	ldrh	r3, [r7, #6]
 8006652:	3b30      	subs	r3, #48	@ 0x30
 8006654:	80fb      	strh	r3, [r7, #6]
 8006656:	e010      	b.n	800667a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006658:	88fb      	ldrh	r3, [r7, #6]
 800665a:	3b1a      	subs	r3, #26
 800665c:	80fb      	strh	r3, [r7, #6]
 800665e:	e00c      	b.n	800667a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006660:	88fb      	ldrh	r3, [r7, #6]
 8006662:	3308      	adds	r3, #8
 8006664:	80fb      	strh	r3, [r7, #6]
 8006666:	e008      	b.n	800667a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006668:	88fb      	ldrh	r3, [r7, #6]
 800666a:	3b50      	subs	r3, #80	@ 0x50
 800666c:	80fb      	strh	r3, [r7, #6]
 800666e:	e004      	b.n	800667a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006670:	88fb      	ldrh	r3, [r7, #6]
 8006672:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8006676:	80fb      	strh	r3, [r7, #6]
 8006678:	bf00      	nop
			}
			break;
 800667a:	e008      	b.n	800668e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800667c:	89fb      	ldrh	r3, [r7, #14]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d195      	bne.n	80065ae <ff_wtoupper+0x1a>
 8006682:	8a3b      	ldrh	r3, [r7, #16]
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	4413      	add	r3, r2
 800668a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800668c:	e78f      	b.n	80065ae <ff_wtoupper+0x1a>
			break;
 800668e:	bf00      	nop
	}

	return chr;
 8006690:	88fb      	ldrh	r3, [r7, #6]
}
 8006692:	4618      	mov	r0, r3
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	0800d3dc 	.word	0x0800d3dc
 80066a4:	0800d5d0 	.word	0x0800d5d0

080066a8 <LCD_Index2Color_565>:
 80066a8:	f000 011f 	and.w	r1, r0, #31
 80066ac:	4a07      	ldr	r2, [pc, #28]	@ (80066cc <LCD_Index2Color_565+0x24>)
 80066ae:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 80066b2:	f3c0 1045 	ubfx	r0, r0, #5, #6
 80066b6:	5cd3      	ldrb	r3, [r2, r3]
 80066b8:	5c52      	ldrb	r2, [r2, r1]
 80066ba:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80066be:	4a04      	ldr	r2, [pc, #16]	@ (80066d0 <LCD_Index2Color_565+0x28>)
 80066c0:	5c10      	ldrb	r0, [r2, r0]
 80066c2:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80066c6:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 80066ca:	4770      	bx	lr
 80066cc:	0800c8bc 	.word	0x0800c8bc
 80066d0:	0800c87c 	.word	0x0800c87c

080066d4 <_Color2Index_565>:
 80066d4:	b2c1      	uxtb	r1, r0
 80066d6:	4a07      	ldr	r2, [pc, #28]	@ (80066f4 <_Color2Index_565+0x20>)
 80066d8:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80066dc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80066e0:	5cd3      	ldrb	r3, [r2, r3]
 80066e2:	5c52      	ldrb	r2, [r2, r1]
 80066e4:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 80066e8:	4a03      	ldr	r2, [pc, #12]	@ (80066f8 <_Color2Index_565+0x24>)
 80066ea:	5c10      	ldrb	r0, [r2, r0]
 80066ec:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	0800c67c 	.word	0x0800c67c
 80066f8:	0800c57c 	.word	0x0800c57c

080066fc <_GetIndexMask_565>:
 80066fc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006700:	4770      	bx	lr
	...

08006704 <_Color2IndexBulk>:
 8006704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006706:	4e0b      	ldr	r6, [pc, #44]	@ (8006734 <_Color2IndexBulk+0x30>)
 8006708:	4f0b      	ldr	r7, [pc, #44]	@ (8006738 <_Color2IndexBulk+0x34>)
 800670a:	f850 5b04 	ldr.w	r5, [r0], #4
 800670e:	f3c5 4407 	ubfx	r4, r5, #16, #8
 8006712:	fa5f fe85 	uxtb.w	lr, r5
 8006716:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800671a:	5d34      	ldrb	r4, [r6, r4]
 800671c:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8006720:	5d7d      	ldrb	r5, [r7, r5]
 8006722:	eb04 24ce 	add.w	r4, r4, lr, lsl #11
 8006726:	eb04 1445 	add.w	r4, r4, r5, lsl #5
 800672a:	3a01      	subs	r2, #1
 800672c:	800c      	strh	r4, [r1, #0]
 800672e:	4419      	add	r1, r3
 8006730:	d1eb      	bne.n	800670a <_Color2IndexBulk+0x6>
 8006732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006734:	0800c67c 	.word	0x0800c67c
 8006738:	0800c57c 	.word	0x0800c57c

0800673c <_Index2ColorBulk>:
 800673c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800673e:	1e54      	subs	r4, r2, #1
 8006740:	fb03 0004 	mla	r0, r3, r4, r0
 8006744:	f102 4480 	add.w	r4, r2, #1073741824	@ 0x40000000
 8006748:	3c01      	subs	r4, #1
 800674a:	4e0e      	ldr	r6, [pc, #56]	@ (8006784 <_Index2ColorBulk+0x48>)
 800674c:	4f0e      	ldr	r7, [pc, #56]	@ (8006788 <_Index2ColorBulk+0x4c>)
 800674e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006752:	8805      	ldrh	r5, [r0, #0]
 8006754:	f005 041f 	and.w	r4, r5, #31
 8006758:	3a01      	subs	r2, #1
 800675a:	f816 e004 	ldrb.w	lr, [r6, r4]
 800675e:	ea4f 24d5 	mov.w	r4, r5, lsr #11
 8006762:	f3c5 1545 	ubfx	r5, r5, #5, #6
 8006766:	5d34      	ldrb	r4, [r6, r4]
 8006768:	5d7d      	ldrb	r5, [r7, r5]
 800676a:	eb04 440e 	add.w	r4, r4, lr, lsl #16
 800676e:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 8006772:	f044 447f 	orr.w	r4, r4, #4278190080	@ 0xff000000
 8006776:	f841 4904 	str.w	r4, [r1], #-4
 800677a:	eba0 0003 	sub.w	r0, r0, r3
 800677e:	d1e8      	bne.n	8006752 <_Index2ColorBulk+0x16>
 8006780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006782:	bf00      	nop
 8006784:	0800c8bc 	.word	0x0800c8bc
 8006788:	0800c87c 	.word	0x0800c87c

0800678c <_PushFreeBlock>:
 800678c:	4b07      	ldr	r3, [pc, #28]	@ (80067ac <_PushFreeBlock+0x20>)
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	3201      	adds	r2, #1
 8006792:	b510      	push	{r4, lr}
 8006794:	605a      	str	r2, [r3, #4]
 8006796:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006798:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800679a:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 800679e:	604c      	str	r4, [r1, #4]
 80067a0:	2100      	movs	r1, #0
 80067a2:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 80067a6:	6258      	str	r0, [r3, #36]	@ 0x24
 80067a8:	bd10      	pop	{r4, pc}
 80067aa:	bf00      	nop
 80067ac:	2000a2d4 	.word	0x2000a2d4

080067b0 <_RemoveFreeBlock>:
 80067b0:	b510      	push	{r4, lr}
 80067b2:	490e      	ldr	r1, [pc, #56]	@ (80067ec <_RemoveFreeBlock+0x3c>)
 80067b4:	6844      	ldr	r4, [r0, #4]
 80067b6:	230f      	movs	r3, #15
 80067b8:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80067bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80067be:	4294      	cmp	r4, r2
 80067c0:	4a0a      	ldr	r2, [pc, #40]	@ (80067ec <_RemoveFreeBlock+0x3c>)
 80067c2:	d203      	bcs.n	80067cc <_RemoveFreeBlock+0x1c>
 80067c4:	f113 33ff 	adds.w	r3, r3, #4294967295
 80067c8:	d2f6      	bcs.n	80067b8 <_RemoveFreeBlock+0x8>
 80067ca:	bd10      	pop	{r4, pc}
 80067cc:	2b0f      	cmp	r3, #15
 80067ce:	d80c      	bhi.n	80067ea <_RemoveFreeBlock+0x3a>
 80067d0:	6811      	ldr	r1, [r2, #0]
 80067d2:	1b09      	subs	r1, r1, r4
 80067d4:	6011      	str	r1, [r2, #0]
 80067d6:	6881      	ldr	r1, [r0, #8]
 80067d8:	68c0      	ldr	r0, [r0, #12]
 80067da:	b101      	cbz	r1, 80067de <_RemoveFreeBlock+0x2e>
 80067dc:	6048      	str	r0, [r1, #4]
 80067de:	b108      	cbz	r0, 80067e4 <_RemoveFreeBlock+0x34>
 80067e0:	6001      	str	r1, [r0, #0]
 80067e2:	bd10      	pop	{r4, pc}
 80067e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067e8:	6459      	str	r1, [r3, #68]	@ 0x44
 80067ea:	bd10      	pop	{r4, pc}
 80067ec:	2000a2d4 	.word	0x2000a2d4

080067f0 <_AddFreeMemory>:
 80067f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f2:	4e27      	ldr	r6, [pc, #156]	@ (8006890 <_AddFreeMemory+0xa0>)
 80067f4:	68f3      	ldr	r3, [r6, #12]
 80067f6:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80067f8:	3b01      	subs	r3, #1
 80067fa:	4605      	mov	r5, r0
 80067fc:	4413      	add	r3, r2
 80067fe:	1808      	adds	r0, r1, r0
 8006800:	4283      	cmp	r3, r0
 8006802:	460c      	mov	r4, r1
 8006804:	d305      	bcc.n	8006812 <_AddFreeMemory+0x22>
 8006806:	594b      	ldr	r3, [r1, r5]
 8006808:	b91b      	cbnz	r3, 8006812 <_AddFreeMemory+0x22>
 800680a:	6843      	ldr	r3, [r0, #4]
 800680c:	441d      	add	r5, r3
 800680e:	f7ff ffcf 	bl	80067b0 <_RemoveFreeBlock>
 8006812:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8006814:	429c      	cmp	r4, r3
 8006816:	d90a      	bls.n	800682e <_AddFreeMemory+0x3e>
 8006818:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800681c:	1be7      	subs	r7, r4, r7
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	b92b      	cbnz	r3, 800682e <_AddFreeMemory+0x3e>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4638      	mov	r0, r7
 8006826:	441d      	add	r5, r3
 8006828:	f7ff ffc2 	bl	80067b0 <_RemoveFreeBlock>
 800682c:	463c      	mov	r4, r7
 800682e:	230f      	movs	r3, #15
 8006830:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8006834:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006836:	4295      	cmp	r5, r2
 8006838:	d203      	bcs.n	8006842 <_AddFreeMemory+0x52>
 800683a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800683e:	d2f7      	bcs.n	8006830 <_AddFreeMemory+0x40>
 8006840:	e023      	b.n	800688a <_AddFreeMemory+0x9a>
 8006842:	2b0f      	cmp	r3, #15
 8006844:	d821      	bhi.n	800688a <_AddFreeMemory+0x9a>
 8006846:	3308      	adds	r3, #8
 8006848:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800684c:	1960      	adds	r0, r4, r5
 800684e:	6851      	ldr	r1, [r2, #4]
 8006850:	60a1      	str	r1, [r4, #8]
 8006852:	2200      	movs	r2, #0
 8006854:	e884 0024 	stmia.w	r4, {r2, r5}
 8006858:	6124      	str	r4, [r4, #16]
 800685a:	f840 5c04 	str.w	r5, [r0, #-4]
 800685e:	f104 0008 	add.w	r0, r4, #8
 8006862:	b101      	cbz	r1, 8006866 <_AddFreeMemory+0x76>
 8006864:	6048      	str	r0, [r1, #4]
 8006866:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800686a:	60a1      	str	r1, [r4, #8]
 800686c:	60e2      	str	r2, [r4, #12]
 800686e:	6058      	str	r0, [r3, #4]
 8006870:	6833      	ldr	r3, [r6, #0]
 8006872:	4907      	ldr	r1, [pc, #28]	@ (8006890 <_AddFreeMemory+0xa0>)
 8006874:	18ea      	adds	r2, r5, r3
 8006876:	f896 3029 	ldrb.w	r3, [r6, #41]	@ 0x29
 800687a:	6032      	str	r2, [r6, #0]
 800687c:	b92b      	cbnz	r3, 800688a <_AddFreeMemory+0x9a>
 800687e:	68cb      	ldr	r3, [r1, #12]
 8006880:	1a9b      	subs	r3, r3, r2
 8006882:	688a      	ldr	r2, [r1, #8]
 8006884:	4293      	cmp	r3, r2
 8006886:	bf88      	it	hi
 8006888:	608b      	strhi	r3, [r1, #8]
 800688a:	4628      	mov	r0, r5
 800688c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800688e:	bf00      	nop
 8006890:	2000a2d4 	.word	0x2000a2d4

08006894 <_RemoveHoles>:
 8006894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006898:	4f24      	ldr	r7, [pc, #144]	@ (800692c <_RemoveHoles+0x98>)
 800689a:	68fe      	ldr	r6, [r7, #12]
 800689c:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 800689e:	3e01      	subs	r6, #1
 80068a0:	4683      	mov	fp, r0
 80068a2:	4426      	add	r6, r4
 80068a4:	46b8      	mov	r8, r7
 80068a6:	e894 0028 	ldmia.w	r4, {r3, r5}
 80068aa:	bbab      	cbnz	r3, 8006918 <_RemoveHoles+0x84>
 80068ac:	1961      	adds	r1, r4, r5
 80068ae:	428e      	cmp	r6, r1
 80068b0:	d932      	bls.n	8006918 <_RemoveHoles+0x84>
 80068b2:	f854 a005 	ldr.w	sl, [r4, r5]
 80068b6:	f1ba 0f00 	cmp.w	sl, #0
 80068ba:	d02d      	beq.n	8006918 <_RemoveHoles+0x84>
 80068bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068be:	f813 303a 	ldrb.w	r3, [r3, sl, lsl #3]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d128      	bne.n	8006918 <_RemoveHoles+0x84>
 80068c6:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
 80068ca:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	4620      	mov	r0, r4
 80068d2:	9101      	str	r1, [sp, #4]
 80068d4:	f7ff ff6c 	bl	80067b0 <_RemoveFreeBlock>
 80068d8:	9901      	ldr	r1, [sp, #4]
 80068da:	f8d8 2034 	ldr.w	r2, [r8, #52]	@ 0x34
 80068de:	6808      	ldr	r0, [r1, #0]
 80068e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80068e4:	4620      	mov	r0, r4
 80068e6:	6054      	str	r4, [r2, #4]
 80068e8:	464a      	mov	r2, r9
 80068ea:	f005 fc41 	bl	800c170 <memmove>
 80068ee:	9b00      	ldr	r3, [sp, #0]
 80068f0:	459a      	cmp	sl, r3
 80068f2:	bf08      	it	eq
 80068f4:	f8d8 3034 	ldreq.w	r3, [r8, #52]	@ 0x34
 80068f8:	eb04 0109 	add.w	r1, r4, r9
 80068fc:	bf08      	it	eq
 80068fe:	1b5b      	subeq	r3, r3, r5
 8006900:	4628      	mov	r0, r5
 8006902:	bf08      	it	eq
 8006904:	f8c8 3034 	streq.w	r3, [r8, #52]	@ 0x34
 8006908:	f7ff ff72 	bl	80067f0 <_AddFreeMemory>
 800690c:	f1bb 0f00 	cmp.w	fp, #0
 8006910:	d001      	beq.n	8006916 <_RemoveHoles+0x82>
 8006912:	4558      	cmp	r0, fp
 8006914:	d205      	bcs.n	8006922 <_RemoveHoles+0x8e>
 8006916:	464d      	mov	r5, r9
 8006918:	442c      	add	r4, r5
 800691a:	42a6      	cmp	r6, r4
 800691c:	d8c3      	bhi.n	80068a6 <_RemoveHoles+0x12>
 800691e:	2001      	movs	r0, #1
 8006920:	e000      	b.n	8006924 <_RemoveHoles+0x90>
 8006922:	2000      	movs	r0, #0
 8006924:	b003      	add	sp, #12
 8006926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692a:	bf00      	nop
 800692c:	2000a2d4 	.word	0x2000a2d4

08006930 <GUI_ALLOC_FreeFixedBlock>:
 8006930:	b128      	cbz	r0, 800693e <GUI_ALLOC_FreeFixedBlock+0xe>
 8006932:	4b03      	ldr	r3, [pc, #12]	@ (8006940 <GUI_ALLOC_FreeFixedBlock+0x10>)
 8006934:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006936:	6002      	str	r2, [r0, #0]
 8006938:	b102      	cbz	r2, 800693c <GUI_ALLOC_FreeFixedBlock+0xc>
 800693a:	6050      	str	r0, [r2, #4]
 800693c:	63d8      	str	r0, [r3, #60]	@ 0x3c
 800693e:	4770      	bx	lr
 8006940:	2000a2d4 	.word	0x2000a2d4

08006944 <GUI_ALLOC_h2p>:
 8006944:	4b03      	ldr	r3, [pc, #12]	@ (8006954 <GUI_ALLOC_h2p+0x10>)
 8006946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006948:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800694c:	6840      	ldr	r0, [r0, #4]
 800694e:	3008      	adds	r0, #8
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	2000a2d4 	.word	0x2000a2d4

08006958 <GUI_ALLOC_LockH>:
 8006958:	4b05      	ldr	r3, [pc, #20]	@ (8006970 <GUI_ALLOC_LockH+0x18>)
 800695a:	69da      	ldr	r2, [r3, #28]
 800695c:	3201      	adds	r2, #1
 800695e:	61da      	str	r2, [r3, #28]
 8006960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006962:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
 8006966:	3301      	adds	r3, #1
 8006968:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
 800696c:	f7ff bfea 	b.w	8006944 <GUI_ALLOC_h2p>
 8006970:	2000a2d4 	.word	0x2000a2d4

08006974 <GUI_ALLOC_UnlockH>:
 8006974:	b530      	push	{r4, r5, lr}
 8006976:	6803      	ldr	r3, [r0, #0]
 8006978:	4909      	ldr	r1, [pc, #36]	@ (80069a0 <GUI_ALLOC_UnlockH+0x2c>)
 800697a:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800697e:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8006980:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d903      	bls.n	8006990 <GUI_ALLOC_UnlockH+0x1c>
 8006988:	69ca      	ldr	r2, [r1, #28]
 800698a:	b10a      	cbz	r2, 8006990 <GUI_ALLOC_UnlockH+0x1c>
 800698c:	3a01      	subs	r2, #1
 800698e:	61ca      	str	r2, [r1, #28]
 8006990:	3b01      	subs	r3, #1
 8006992:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
 8006996:	2300      	movs	r3, #0
 8006998:	6003      	str	r3, [r0, #0]
 800699a:	4618      	mov	r0, r3
 800699c:	bd30      	pop	{r4, r5, pc}
 800699e:	bf00      	nop
 80069a0:	2000a2d4 	.word	0x2000a2d4

080069a4 <GUI_ALLOC_AssignMemory>:
 80069a4:	4b02      	ldr	r3, [pc, #8]	@ (80069b0 <GUI_ALLOC_AssignMemory+0xc>)
 80069a6:	f021 0103 	bic.w	r1, r1, #3
 80069aa:	6018      	str	r0, [r3, #0]
 80069ac:	6059      	str	r1, [r3, #4]
 80069ae:	4770      	bx	lr
 80069b0:	20000138 	.word	0x20000138

080069b4 <GUI_ALLOC_Free>:
 80069b4:	b510      	push	{r4, lr}
 80069b6:	4604      	mov	r4, r0
 80069b8:	b160      	cbz	r0, 80069d4 <GUI_ALLOC_Free+0x20>
 80069ba:	4b07      	ldr	r3, [pc, #28]	@ (80069d8 <GUI_ALLOC_Free+0x24>)
 80069bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069be:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80069c2:	6859      	ldr	r1, [r3, #4]
 80069c4:	6848      	ldr	r0, [r1, #4]
 80069c6:	f7ff ff13 	bl	80067f0 <_AddFreeMemory>
 80069ca:	4620      	mov	r0, r4
 80069cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069d0:	f7ff bedc 	b.w	800678c <_PushFreeBlock>
 80069d4:	bd10      	pop	{r4, pc}
 80069d6:	bf00      	nop
 80069d8:	2000a2d4 	.word	0x2000a2d4

080069dc <_EnlargeBlocks>:
 80069dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e0:	4c22      	ldr	r4, [pc, #136]	@ (8006a6c <_EnlargeBlocks+0x90>)
 80069e2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80069e4:	b93b      	cbnz	r3, 80069f6 <_EnlargeBlocks+0x1a>
 80069e6:	4b22      	ldr	r3, [pc, #136]	@ (8006a70 <_EnlargeBlocks+0x94>)
 80069e8:	689d      	ldr	r5, [r3, #8]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	3508      	adds	r5, #8
 80069ee:	fbb3 f5f5 	udiv	r5, r3, r5
 80069f2:	3502      	adds	r5, #2
 80069f4:	e003      	b.n	80069fe <_EnlargeBlocks+0x22>
 80069f6:	6923      	ldr	r3, [r4, #16]
 80069f8:	1d1d      	adds	r5, r3, #4
 80069fa:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 80069fe:	00e8      	lsls	r0, r5, #3
 8006a00:	f000 f8de 	bl	8006bc0 <_Alloc>
 8006a04:	4680      	mov	r8, r0
 8006a06:	b360      	cbz	r0, 8006a62 <_EnlargeBlocks+0x86>
 8006a08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a0a:	6922      	ldr	r2, [r4, #16]
 8006a0c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006a0e:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 8006a12:	00d2      	lsls	r2, r2, #3
 8006a14:	685e      	ldr	r6, [r3, #4]
 8006a16:	4b17      	ldr	r3, [pc, #92]	@ (8006a74 <_EnlargeBlocks+0x98>)
 8006a18:	3608      	adds	r6, #8
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	4798      	blx	r3
 8006a20:	6922      	ldr	r2, [r4, #16]
 8006a22:	6366      	str	r6, [r4, #52]	@ 0x34
 8006a24:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 8006a28:	4613      	mov	r3, r2
 8006a2a:	1e69      	subs	r1, r5, #1
 8006a2c:	428b      	cmp	r3, r1
 8006a2e:	d205      	bcs.n	8006a3c <_EnlargeBlocks+0x60>
 8006a30:	3301      	adds	r3, #1
 8006a32:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 8006a36:	f840 3c04 	str.w	r3, [r0, #-4]
 8006a3a:	e7f7      	b.n	8006a2c <_EnlargeBlocks+0x50>
 8006a3c:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 8006a40:	f04f 0800 	mov.w	r8, #0
 8006a44:	f8c6 8004 	str.w	r8, [r6, #4]
 8006a48:	6863      	ldr	r3, [r4, #4]
 8006a4a:	6262      	str	r2, [r4, #36]	@ 0x24
 8006a4c:	1a9b      	subs	r3, r3, r2
 8006a4e:	442b      	add	r3, r5
 8006a50:	6063      	str	r3, [r4, #4]
 8006a52:	6125      	str	r5, [r4, #16]
 8006a54:	4638      	mov	r0, r7
 8006a56:	b13f      	cbz	r7, 8006a68 <_EnlargeBlocks+0x8c>
 8006a58:	f7ff ffac 	bl	80069b4 <GUI_ALLOC_Free>
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a62:	2001      	movs	r0, #1
 8006a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a6c:	2000a2d4 	.word	0x2000a2d4
 8006a70:	20000138 	.word	0x20000138
 8006a74:	20000030 	.word	0x20000030

08006a78 <_InitOnce>:
 8006a78:	b570      	push	{r4, r5, r6, lr}
 8006a7a:	4a17      	ldr	r2, [pc, #92]	@ (8006ad8 <_InitOnce+0x60>)
 8006a7c:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8006a80:	bb43      	cbnz	r3, 8006ad4 <_InitOnce+0x5c>
 8006a82:	2301      	movs	r3, #1
 8006a84:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8006a88:	4b14      	ldr	r3, [pc, #80]	@ (8006adc <_InitOnce+0x64>)
 8006a8a:	6899      	ldr	r1, [r3, #8]
 8006a8c:	b911      	cbnz	r1, 8006a94 <_InitOnce+0x1c>
 8006a8e:	6859      	ldr	r1, [r3, #4]
 8006a90:	0889      	lsrs	r1, r1, #2
 8006a92:	6099      	str	r1, [r3, #8]
 8006a94:	215a      	movs	r1, #90	@ 0x5a
 8006a96:	6211      	str	r1, [r2, #32]
 8006a98:	2610      	movs	r6, #16
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 8006aa0:	fa06 f501 	lsl.w	r5, r6, r1
 8006aa4:	3101      	adds	r1, #1
 8006aa6:	2910      	cmp	r1, #16
 8006aa8:	4c0b      	ldr	r4, [pc, #44]	@ (8006ad8 <_InitOnce+0x60>)
 8006aaa:	6405      	str	r5, [r0, #64]	@ 0x40
 8006aac:	d1f6      	bne.n	8006a9c <_InitOnce+0x24>
 8006aae:	6858      	ldr	r0, [r3, #4]
 8006ab0:	6819      	ldr	r1, [r3, #0]
 8006ab2:	63a1      	str	r1, [r4, #56]	@ 0x38
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	6123      	str	r3, [r4, #16]
 8006ab8:	f1a0 0314 	sub.w	r3, r0, #20
 8006abc:	440b      	add	r3, r1
 8006abe:	2501      	movs	r5, #1
 8006ac0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ac2:	60e0      	str	r0, [r4, #12]
 8006ac4:	605d      	str	r5, [r3, #4]
 8006ac6:	6265      	str	r5, [r4, #36]	@ 0x24
 8006ac8:	6065      	str	r5, [r4, #4]
 8006aca:	f7ff fe91 	bl	80067f0 <_AddFreeMemory>
 8006ace:	f7ff ff85 	bl	80069dc <_EnlargeBlocks>
 8006ad2:	6325      	str	r5, [r4, #48]	@ 0x30
 8006ad4:	bd70      	pop	{r4, r5, r6, pc}
 8006ad6:	bf00      	nop
 8006ad8:	2000a2d4 	.word	0x2000a2d4
 8006adc:	20000138 	.word	0x20000138

08006ae0 <GUI_ALLOC_GetFixedBlock>:
 8006ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	4e26      	ldr	r6, [pc, #152]	@ (8006b80 <GUI_ALLOC_GetFixedBlock+0xa0>)
 8006ae8:	3703      	adds	r7, #3
 8006aea:	f7ff ffc5 	bl	8006a78 <_InitOnce>
 8006aee:	f027 0703 	bic.w	r7, r7, #3
 8006af2:	6c30      	ldr	r0, [r6, #64]	@ 0x40
 8006af4:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8006af6:	3704      	adds	r7, #4
 8006af8:	4287      	cmp	r7, r0
 8006afa:	bf38      	it	cc
 8006afc:	4607      	movcc	r7, r0
 8006afe:	4614      	mov	r4, r2
 8006b00:	b134      	cbz	r4, 8006b10 <GUI_ALLOC_GetFixedBlock+0x30>
 8006b02:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006b06:	429f      	cmp	r7, r3
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	d02c      	beq.n	8006b66 <GUI_ALLOC_GetFixedBlock+0x86>
 8006b0c:	461c      	mov	r4, r3
 8006b0e:	e7f7      	b.n	8006b00 <GUI_ALLOC_GetFixedBlock+0x20>
 8006b10:	68f3      	ldr	r3, [r6, #12]
 8006b12:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8006b14:	eb02 0803 	add.w	r8, r2, r3
 8006b18:	f858 5c04 	ldr.w	r5, [r8, #-4]
 8006b1c:	ebc5 0508 	rsb	r5, r5, r8
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	b133      	cbz	r3, 8006b32 <GUI_ALLOC_GetFixedBlock+0x52>
 8006b24:	4620      	mov	r0, r4
 8006b26:	f7ff feb5 	bl	8006894 <_RemoveHoles>
 8006b2a:	f858 5c04 	ldr.w	r5, [r8, #-4]
 8006b2e:	ebc5 0508 	rsb	r5, r5, r8
 8006b32:	682b      	ldr	r3, [r5, #0]
 8006b34:	bb0b      	cbnz	r3, 8006b7a <GUI_ALLOC_GetFixedBlock+0x9a>
 8006b36:	686b      	ldr	r3, [r5, #4]
 8006b38:	429f      	cmp	r7, r3
 8006b3a:	dc1e      	bgt.n	8006b7a <GUI_ALLOC_GetFixedBlock+0x9a>
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	1d1c      	adds	r4, r3, #4
 8006b40:	f7ff fe36 	bl	80067b0 <_RemoveFreeBlock>
 8006b44:	68f3      	ldr	r3, [r6, #12]
 8006b46:	6868      	ldr	r0, [r5, #4]
 8006b48:	1bdb      	subs	r3, r3, r7
 8006b4a:	60f3      	str	r3, [r6, #12]
 8006b4c:	6973      	ldr	r3, [r6, #20]
 8006b4e:	1be4      	subs	r4, r4, r7
 8006b50:	443b      	add	r3, r7
 8006b52:	1bc0      	subs	r0, r0, r7
 8006b54:	442c      	add	r4, r5
 8006b56:	6173      	str	r3, [r6, #20]
 8006b58:	d002      	beq.n	8006b60 <GUI_ALLOC_GetFixedBlock+0x80>
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	f7ff fe48 	bl	80067f0 <_AddFreeMemory>
 8006b60:	f844 7c04 	str.w	r7, [r4, #-4]
 8006b64:	e009      	b.n	8006b7a <GUI_ALLOC_GetFixedBlock+0x9a>
 8006b66:	b10b      	cbz	r3, 8006b6c <GUI_ALLOC_GetFixedBlock+0x8c>
 8006b68:	6861      	ldr	r1, [r4, #4]
 8006b6a:	6059      	str	r1, [r3, #4]
 8006b6c:	6861      	ldr	r1, [r4, #4]
 8006b6e:	b101      	cbz	r1, 8006b72 <GUI_ALLOC_GetFixedBlock+0x92>
 8006b70:	600b      	str	r3, [r1, #0]
 8006b72:	42a2      	cmp	r2, r4
 8006b74:	d101      	bne.n	8006b7a <GUI_ALLOC_GetFixedBlock+0x9a>
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	63f3      	str	r3, [r6, #60]	@ 0x3c
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b80:	2000a2d4 	.word	0x2000a2d4

08006b84 <GUI_ALLOC_GetMaxSize>:
 8006b84:	b508      	push	{r3, lr}
 8006b86:	f7ff ff77 	bl	8006a78 <_InitOnce>
 8006b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8006bbc <GUI_ALLOC_GetMaxSize+0x38>)
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	1899      	adds	r1, r3, r2
 8006b90:	f8d1 00bc 	ldr.w	r0, [r1, #188]	@ 0xbc
 8006b94:	b110      	cbz	r0, 8006b9c <GUI_ALLOC_GetMaxSize+0x18>
 8006b96:	6883      	ldr	r3, [r0, #8]
 8006b98:	2000      	movs	r0, #0
 8006b9a:	e00b      	b.n	8006bb4 <GUI_ALLOC_GetMaxSize+0x30>
 8006b9c:	3b08      	subs	r3, #8
 8006b9e:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8006ba2:	d1f4      	bne.n	8006b8e <GUI_ALLOC_GetMaxSize+0xa>
 8006ba4:	e008      	b.n	8006bb8 <GUI_ALLOC_GetMaxSize+0x34>
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	4290      	cmp	r0, r2
 8006bac:	bf38      	it	cc
 8006bae:	4610      	movcc	r0, r2
 8006bb0:	b113      	cbz	r3, 8006bb8 <GUI_ALLOC_GetMaxSize+0x34>
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1f6      	bne.n	8006ba6 <GUI_ALLOC_GetMaxSize+0x22>
 8006bb8:	380c      	subs	r0, #12
 8006bba:	bd08      	pop	{r3, pc}
 8006bbc:	2000a2d4 	.word	0x2000a2d4

08006bc0 <_Alloc>:
 8006bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bc4:	4e39      	ldr	r6, [pc, #228]	@ (8006cac <_Alloc+0xec>)
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	f7ff ff56 	bl	8006a78 <_InitOnce>
 8006bcc:	6c35      	ldr	r5, [r6, #64]	@ 0x40
 8006bce:	6833      	ldr	r3, [r6, #0]
 8006bd0:	42ac      	cmp	r4, r5
 8006bd2:	bf24      	itt	cs
 8006bd4:	3403      	addcs	r4, #3
 8006bd6:	f024 0503 	biccs.w	r5, r4, #3
 8006bda:	350c      	adds	r5, #12
 8006bdc:	42ab      	cmp	r3, r5
 8006bde:	4c33      	ldr	r4, [pc, #204]	@ (8006cac <_Alloc+0xec>)
 8006be0:	d33e      	bcc.n	8006c60 <_Alloc+0xa0>
 8006be2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006be4:	6862      	ldr	r2, [r4, #4]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d90f      	bls.n	8006c0a <_Alloc+0x4a>
 8006bea:	6873      	ldr	r3, [r6, #4]
 8006bec:	6a77      	ldr	r7, [r6, #36]	@ 0x24
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	6073      	str	r3, [r6, #4]
 8006bf2:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8006bf4:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8006bf8:	eb03 0208 	add.w	r2, r3, r8
 8006bfc:	6852      	ldr	r2, [r2, #4]
 8006bfe:	6272      	str	r2, [r6, #36]	@ 0x24
 8006c00:	2201      	movs	r2, #1
 8006c02:	f803 2037 	strb.w	r2, [r3, r7, lsl #3]
 8006c06:	b957      	cbnz	r7, 8006c1e <_Alloc+0x5e>
 8006c08:	e02a      	b.n	8006c60 <_Alloc+0xa0>
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c0e:	f7ff fee5 	bl	80069dc <_EnlargeBlocks>
 8006c12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006c14:	3301      	adds	r3, #1
 8006c16:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d0e6      	beq.n	8006bea <_Alloc+0x2a>
 8006c1c:	e020      	b.n	8006c60 <_Alloc+0xa0>
 8006c1e:	230f      	movs	r3, #15
 8006c20:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8006c24:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006c26:	4295      	cmp	r5, r2
 8006c28:	d20c      	bcs.n	8006c44 <_Alloc+0x84>
 8006c2a:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006c2e:	d2f7      	bcs.n	8006c20 <_Alloc+0x60>
 8006c30:	e008      	b.n	8006c44 <_Alloc+0x84>
 8006c32:	6894      	ldr	r4, [r2, #8]
 8006c34:	b12c      	cbz	r4, 8006c42 <_Alloc+0x82>
 8006c36:	6862      	ldr	r2, [r4, #4]
 8006c38:	4295      	cmp	r5, r2
 8006c3a:	d914      	bls.n	8006c66 <_Alloc+0xa6>
 8006c3c:	68a2      	ldr	r2, [r4, #8]
 8006c3e:	2a00      	cmp	r2, #0
 8006c40:	d1f7      	bne.n	8006c32 <_Alloc+0x72>
 8006c42:	3301      	adds	r3, #1
 8006c44:	2b0f      	cmp	r3, #15
 8006c46:	d803      	bhi.n	8006c50 <_Alloc+0x90>
 8006c48:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8006c4c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006c4e:	e7f6      	b.n	8006c3e <_Alloc+0x7e>
 8006c50:	4628      	mov	r0, r5
 8006c52:	f7ff fe1f 	bl	8006894 <_RemoveHoles>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d0e1      	beq.n	8006c1e <_Alloc+0x5e>
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	f7ff fd96 	bl	800678c <_PushFreeBlock>
 8006c60:	2000      	movs	r0, #0
 8006c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c66:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8006c6a:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8006c6c:	ebc5 0209 	rsb	r2, r5, r9
 8006c70:	330c      	adds	r3, #12
 8006c72:	4620      	mov	r0, r4
 8006c74:	429a      	cmp	r2, r3
 8006c76:	bf38      	it	cc
 8006c78:	464d      	movcc	r5, r9
 8006c7a:	f7ff fd99 	bl	80067b0 <_RemoveFreeBlock>
 8006c7e:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8006c80:	1961      	adds	r1, r4, r5
 8006c82:	4498      	add	r8, r3
 8006c84:	454d      	cmp	r5, r9
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	f8c8 4004 	str.w	r4, [r8, #4]
 8006c8e:	6027      	str	r7, [r4, #0]
 8006c90:	6065      	str	r5, [r4, #4]
 8006c92:	60a3      	str	r3, [r4, #8]
 8006c94:	6124      	str	r4, [r4, #16]
 8006c96:	f841 5c04 	str.w	r5, [r1, #-4]
 8006c9a:	da03      	bge.n	8006ca4 <_Alloc+0xe4>
 8006c9c:	ebc5 0009 	rsb	r0, r5, r9
 8006ca0:	f7ff fda6 	bl	80067f0 <_AddFreeMemory>
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006caa:	bf00      	nop
 8006cac:	2000a2d4 	.word	0x2000a2d4

08006cb0 <GUI_ALLOC_AllocNoInit>:
 8006cb0:	b108      	cbz	r0, 8006cb6 <GUI_ALLOC_AllocNoInit+0x6>
 8006cb2:	f7ff bf85 	b.w	8006bc0 <_Alloc>
 8006cb6:	4770      	bx	lr

08006cb8 <GUI_ALLOC_AllocZero>:
 8006cb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cba:	4606      	mov	r6, r0
 8006cbc:	f7ff fff8 	bl	8006cb0 <GUI_ALLOC_AllocNoInit>
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	b160      	cbz	r0, 8006cde <GUI_ALLOC_AllocZero+0x26>
 8006cc4:	f7ff fe48 	bl	8006958 <GUI_ALLOC_LockH>
 8006cc8:	ac02      	add	r4, sp, #8
 8006cca:	4b06      	ldr	r3, [pc, #24]	@ (8006ce4 <GUI_ALLOC_AllocZero+0x2c>)
 8006ccc:	f844 0d04 	str.w	r0, [r4, #-4]!
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4632      	mov	r2, r6
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	4798      	blx	r3
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f7ff fe4b 	bl	8006974 <GUI_ALLOC_UnlockH>
 8006cde:	4628      	mov	r0, r5
 8006ce0:	b002      	add	sp, #8
 8006ce2:	bd70      	pop	{r4, r5, r6, pc}
 8006ce4:	20000034 	.word	0x20000034

08006ce8 <_GetClipParam>:
 8006ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cea:	4f34      	ldr	r7, [pc, #208]	@ (8006dbc <_GetClipParam+0xd4>)
 8006cec:	9c07      	ldr	r4, [sp, #28]
 8006cee:	683f      	ldr	r7, [r7, #0]
 8006cf0:	9e05      	ldr	r6, [sp, #20]
 8006cf2:	f9b7 e008 	ldrsh.w	lr, [r7, #8]
 8006cf6:	9d06      	ldr	r5, [sp, #24]
 8006cf8:	ebc0 0e0e 	rsb	lr, r0, lr
 8006cfc:	f1be 0f00 	cmp.w	lr, #0
 8006d00:	bfc8      	it	gt
 8006d02:	f8c4 e00c 	strgt.w	lr, [r4, #12]
 8006d06:	f9b7 e00a 	ldrsh.w	lr, [r7, #10]
 8006d0a:	4402      	add	r2, r0
 8006d0c:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8006d10:	ebc1 0e0e 	rsb	lr, r1, lr
 8006d14:	440b      	add	r3, r1
 8006d16:	3a01      	subs	r2, #1
 8006d18:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8006d1c:	f1be 0f00 	cmp.w	lr, #0
 8006d20:	eba2 0200 	sub.w	r2, r2, r0
 8006d24:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d28:	eba3 0301 	sub.w	r3, r3, r1
 8006d2c:	bfc8      	it	gt
 8006d2e:	f8c4 e010 	strgt.w	lr, [r4, #16]
 8006d32:	2a00      	cmp	r2, #0
 8006d34:	bfc8      	it	gt
 8006d36:	60a2      	strgt	r2, [r4, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	bfc8      	it	gt
 8006d3c:	6163      	strgt	r3, [r4, #20]
 8006d3e:	2e08      	cmp	r6, #8
 8006d40:	d024      	beq.n	8006d8c <_GetClipParam+0xa4>
 8006d42:	dc04      	bgt.n	8006d4e <_GetClipParam+0x66>
 8006d44:	2e01      	cmp	r6, #1
 8006d46:	d00f      	beq.n	8006d68 <_GetClipParam+0x80>
 8006d48:	2e04      	cmp	r6, #4
 8006d4a:	d016      	beq.n	8006d7a <_GetClipParam+0x92>
 8006d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d4e:	2e18      	cmp	r6, #24
 8006d50:	d021      	beq.n	8006d96 <_GetClipParam+0xae>
 8006d52:	2e20      	cmp	r6, #32
 8006d54:	d029      	beq.n	8006daa <_GetClipParam+0xc2>
 8006d56:	2e10      	cmp	r6, #16
 8006d58:	d12f      	bne.n	8006dba <_GetClipParam+0xd2>
 8006d5a:	68e2      	ldr	r2, [r4, #12]
 8006d5c:	68a3      	ldr	r3, [r4, #8]
 8006d5e:	0052      	lsls	r2, r2, #1
 8006d60:	6022      	str	r2, [r4, #0]
 8006d62:	eba5 0543 	sub.w	r5, r5, r3, lsl #1
 8006d66:	e01e      	b.n	8006da6 <_GetClipParam+0xbe>
 8006d68:	68e2      	ldr	r2, [r4, #12]
 8006d6a:	10d2      	asrs	r2, r2, #3
 8006d6c:	00d3      	lsls	r3, r2, #3
 8006d6e:	60e3      	str	r3, [r4, #12]
 8006d70:	68a3      	ldr	r3, [r4, #8]
 8006d72:	6022      	str	r2, [r4, #0]
 8006d74:	eba5 05e3 	sub.w	r5, r5, r3, asr #3
 8006d78:	e015      	b.n	8006da6 <_GetClipParam+0xbe>
 8006d7a:	68e2      	ldr	r2, [r4, #12]
 8006d7c:	1052      	asrs	r2, r2, #1
 8006d7e:	0053      	lsls	r3, r2, #1
 8006d80:	60e3      	str	r3, [r4, #12]
 8006d82:	68a3      	ldr	r3, [r4, #8]
 8006d84:	6022      	str	r2, [r4, #0]
 8006d86:	eba5 0563 	sub.w	r5, r5, r3, asr #1
 8006d8a:	e00c      	b.n	8006da6 <_GetClipParam+0xbe>
 8006d8c:	68a3      	ldr	r3, [r4, #8]
 8006d8e:	68e2      	ldr	r2, [r4, #12]
 8006d90:	6022      	str	r2, [r4, #0]
 8006d92:	1aed      	subs	r5, r5, r3
 8006d94:	e007      	b.n	8006da6 <_GetClipParam+0xbe>
 8006d96:	68e2      	ldr	r2, [r4, #12]
 8006d98:	68a3      	ldr	r3, [r4, #8]
 8006d9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006d9e:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8006da2:	6022      	str	r2, [r4, #0]
 8006da4:	441d      	add	r5, r3
 8006da6:	1aad      	subs	r5, r5, r2
 8006da8:	e006      	b.n	8006db8 <_GetClipParam+0xd0>
 8006daa:	68e3      	ldr	r3, [r4, #12]
 8006dac:	68a2      	ldr	r2, [r4, #8]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	eba5 0582 	sub.w	r5, r5, r2, lsl #2
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	1aed      	subs	r5, r5, r3
 8006db8:	6065      	str	r5, [r4, #4]
 8006dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dbc:	2000002c 	.word	0x2000002c

08006dc0 <_GetBitfieldsPara>:
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	600b      	str	r3, [r1, #0]
 8006dc4:	07c3      	lsls	r3, r0, #31
 8006dc6:	d403      	bmi.n	8006dd0 <_GetBitfieldsPara+0x10>
 8006dc8:	680b      	ldr	r3, [r1, #0]
 8006dca:	0840      	lsrs	r0, r0, #1
 8006dcc:	3301      	adds	r3, #1
 8006dce:	e7f8      	b.n	8006dc2 <_GetBitfieldsPara+0x2>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	07c3      	lsls	r3, r0, #31
 8006dd6:	d503      	bpl.n	8006de0 <_GetBitfieldsPara+0x20>
 8006dd8:	6813      	ldr	r3, [r2, #0]
 8006dda:	0840      	lsrs	r0, r0, #1
 8006ddc:	3301      	adds	r3, #1
 8006dde:	e7f8      	b.n	8006dd2 <_GetBitfieldsPara+0x12>
 8006de0:	4770      	bx	lr
	...

08006de4 <_Index2ColorBitfields>:
 8006de4:	4916      	ldr	r1, [pc, #88]	@ (8006e40 <_Index2ColorBitfields+0x5c>)
 8006de6:	684b      	ldr	r3, [r1, #4]
 8006de8:	690a      	ldr	r2, [r1, #16]
 8006dea:	b530      	push	{r4, r5, lr}
 8006dec:	69cc      	ldr	r4, [r1, #28]
 8006dee:	2501      	movs	r5, #1
 8006df0:	4003      	ands	r3, r0
 8006df2:	40d3      	lsrs	r3, r2
 8006df4:	fa05 f404 	lsl.w	r4, r5, r4
 8006df8:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 8006dfc:	3c01      	subs	r4, #1
 8006dfe:	fbb3 f4f4 	udiv	r4, r3, r4
 8006e02:	688b      	ldr	r3, [r1, #8]
 8006e04:	694a      	ldr	r2, [r1, #20]
 8006e06:	4003      	ands	r3, r0
 8006e08:	40d3      	lsrs	r3, r2
 8006e0a:	6a0a      	ldr	r2, [r1, #32]
 8006e0c:	fa05 f202 	lsl.w	r2, r5, r2
 8006e10:	3a01      	subs	r2, #1
 8006e12:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 8006e16:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e1a:	680a      	ldr	r2, [r1, #0]
 8006e1c:	4002      	ands	r2, r0
 8006e1e:	68c8      	ldr	r0, [r1, #12]
 8006e20:	fa22 f000 	lsr.w	r0, r2, r0
 8006e24:	698a      	ldr	r2, [r1, #24]
 8006e26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e2a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8006e2e:	4095      	lsls	r5, r2
 8006e30:	3d01      	subs	r5, #1
 8006e32:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 8006e36:	fbb0 f0f5 	udiv	r0, r0, r5
 8006e3a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006e3e:	bd30      	pop	{r4, r5, pc}
 8006e40:	20000144 	.word	0x20000144

08006e44 <_DrawLine_RGB>:
 8006e44:	6983      	ldr	r3, [r0, #24]
 8006e46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e48:	4604      	mov	r4, r0
 8006e4a:	b1bb      	cbz	r3, 8006e7c <_DrawLine_RGB+0x38>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	6063      	str	r3, [r4, #4]
 8006e50:	6863      	ldr	r3, [r4, #4]
 8006e52:	68e2      	ldr	r2, [r4, #12]
 8006e54:	4293      	cmp	r3, r2
 8006e56:	da2c      	bge.n	8006eb2 <_DrawLine_RGB+0x6e>
 8006e58:	6921      	ldr	r1, [r4, #16]
 8006e5a:	6822      	ldr	r2, [r4, #0]
 8006e5c:	a801      	add	r0, sp, #4
 8006e5e:	fb01 2303 	mla	r3, r1, r3, r2
 8006e62:	9301      	str	r3, [sp, #4]
 8006e64:	f001 f92a 	bl	80080bc <GUI__Read32>
 8006e68:	69a3      	ldr	r3, [r4, #24]
 8006e6a:	4798      	blx	r3
 8006e6c:	6963      	ldr	r3, [r4, #20]
 8006e6e:	4798      	blx	r3
 8006e70:	69e3      	ldr	r3, [r4, #28]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	4798      	blx	r3
 8006e76:	6863      	ldr	r3, [r4, #4]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	e7e8      	b.n	8006e4e <_DrawLine_RGB+0xa>
 8006e7c:	6063      	str	r3, [r4, #4]
 8006e7e:	6862      	ldr	r2, [r4, #4]
 8006e80:	68e3      	ldr	r3, [r4, #12]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	da15      	bge.n	8006eb2 <_DrawLine_RGB+0x6e>
 8006e86:	6923      	ldr	r3, [r4, #16]
 8006e88:	6825      	ldr	r5, [r4, #0]
 8006e8a:	435a      	muls	r2, r3
 8006e8c:	18a9      	adds	r1, r5, r2
 8006e8e:	9101      	str	r1, [sp, #4]
 8006e90:	5cab      	ldrb	r3, [r5, r2]
 8006e92:	7888      	ldrb	r0, [r1, #2]
 8006e94:	6962      	ldr	r2, [r4, #20]
 8006e96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e9a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e9e:	7848      	ldrb	r0, [r1, #1]
 8006ea0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8006ea4:	4790      	blx	r2
 8006ea6:	69e3      	ldr	r3, [r4, #28]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	4798      	blx	r3
 8006eac:	6863      	ldr	r3, [r4, #4]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	e7e4      	b.n	8006e7c <_DrawLine_RGB+0x38>
 8006eb2:	68a3      	ldr	r3, [r4, #8]
 8006eb4:	b113      	cbz	r3, 8006ebc <_DrawLine_RGB+0x78>
 8006eb6:	69e3      	ldr	r3, [r4, #28]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	4798      	blx	r3
 8006ebc:	b003      	add	sp, #12
 8006ebe:	bd30      	pop	{r4, r5, pc}

08006ec0 <_NextPixel_FlushBuffer>:
 8006ec0:	b530      	push	{r4, r5, lr}
 8006ec2:	4c10      	ldr	r4, [pc, #64]	@ (8006f04 <_NextPixel_FlushBuffer+0x44>)
 8006ec4:	b089      	sub	sp, #36	@ 0x24
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	9207      	str	r2, [sp, #28]
 8006eca:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006ecc:	9202      	str	r2, [sp, #8]
 8006ece:	2300      	movs	r3, #0
 8006ed0:	2a01      	cmp	r2, #1
 8006ed2:	9306      	str	r3, [sp, #24]
 8006ed4:	bf08      	it	eq
 8006ed6:	ab06      	addeq	r3, sp, #24
 8006ed8:	9305      	str	r3, [sp, #20]
 8006eda:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006edc:	9304      	str	r3, [sp, #16]
 8006ede:	2500      	movs	r5, #0
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	9301      	str	r3, [sp, #4]
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	9503      	str	r5, [sp, #12]
 8006ee8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006eec:	c807      	ldmia	r0, {r0, r1, r2}
 8006eee:	f001 fa75 	bl	80083dc <LCD_DrawBitmap>
 8006ef2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006ef4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006ef6:	64e5      	str	r5, [r4, #76]	@ 0x4c
 8006ef8:	4413      	add	r3, r2
 8006efa:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006efc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006efe:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8006f00:	b009      	add	sp, #36	@ 0x24
 8006f02:	bd30      	pop	{r4, r5, pc}
 8006f04:	20000144 	.word	0x20000144

08006f08 <_NextPixel_NextLine>:
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	4c06      	ldr	r4, [pc, #24]	@ (8006f24 <_NextPixel_NextLine+0x1c>)
 8006f0c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006f0e:	b10b      	cbz	r3, 8006f14 <_NextPixel_NextLine+0xc>
 8006f10:	f7ff ffd6 	bl	8006ec0 <_NextPixel_FlushBuffer>
 8006f14:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006f16:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f18:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f1e:	2300      	movs	r3, #0
 8006f20:	6523      	str	r3, [r4, #80]	@ 0x50
 8006f22:	bd10      	pop	{r4, pc}
 8006f24:	20000144 	.word	0x20000144

08006f28 <_NextPixel_SetPixel>:
 8006f28:	4b3c      	ldr	r3, [pc, #240]	@ (800701c <_NextPixel_SetPixel+0xf4>)
 8006f2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f2c:	2a02      	cmp	r2, #2
 8006f2e:	b470      	push	{r4, r5, r6}
 8006f30:	d060      	beq.n	8006ff4 <_NextPixel_SetPixel+0xcc>
 8006f32:	2a04      	cmp	r2, #4
 8006f34:	d062      	beq.n	8006ffc <_NextPixel_SetPixel+0xd4>
 8006f36:	2a01      	cmp	r2, #1
 8006f38:	d164      	bne.n	8007004 <_NextPixel_SetPixel+0xdc>
 8006f3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f3c:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8006f3e:	3a01      	subs	r2, #1
 8006f40:	2a07      	cmp	r2, #7
 8006f42:	d85f      	bhi.n	8007004 <_NextPixel_SetPixel+0xdc>
 8006f44:	e8df f002 	tbb	[pc, r2]
 8006f48:	385e1e04 	.word	0x385e1e04
 8006f4c:	525e5e5e 	.word	0x525e5e5e
 8006f50:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 8006f52:	4e32      	ldr	r6, [pc, #200]	@ (800701c <_NextPixel_SetPixel+0xf4>)
 8006f54:	f1c4 0407 	rsb	r4, r4, #7
 8006f58:	2201      	movs	r2, #1
 8006f5a:	fa02 f104 	lsl.w	r1, r2, r4
 8006f5e:	782a      	ldrb	r2, [r5, #0]
 8006f60:	fa00 f404 	lsl.w	r4, r0, r4
 8006f64:	ea22 0201 	bic.w	r2, r2, r1
 8006f68:	4314      	orrs	r4, r2
 8006f6a:	702c      	strb	r4, [r5, #0]
 8006f6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f6e:	3201      	adds	r2, #1
 8006f70:	2a08      	cmp	r2, #8
 8006f72:	bf03      	ittte	eq
 8006f74:	2200      	moveq	r2, #0
 8006f76:	6532      	streq	r2, [r6, #80]	@ 0x50
 8006f78:	6bf2      	ldreq	r2, [r6, #60]	@ 0x3c
 8006f7a:	6532      	strne	r2, [r6, #80]	@ 0x50
 8006f7c:	bf04      	itt	eq
 8006f7e:	3201      	addeq	r2, #1
 8006f80:	63f2      	streq	r2, [r6, #60]	@ 0x3c
 8006f82:	e03f      	b.n	8007004 <_NextPixel_SetPixel+0xdc>
 8006f84:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006f86:	4c25      	ldr	r4, [pc, #148]	@ (800701c <_NextPixel_SetPixel+0xf4>)
 8006f88:	f1c1 0106 	rsb	r1, r1, #6
 8006f8c:	2203      	movs	r2, #3
 8006f8e:	fa02 f601 	lsl.w	r6, r2, r1
 8006f92:	782a      	ldrb	r2, [r5, #0]
 8006f94:	fa00 f101 	lsl.w	r1, r0, r1
 8006f98:	ea22 0206 	bic.w	r2, r2, r6
 8006f9c:	4311      	orrs	r1, r2
 8006f9e:	7029      	strb	r1, [r5, #0]
 8006fa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fa2:	3202      	adds	r2, #2
 8006fa4:	2a08      	cmp	r2, #8
 8006fa6:	bf03      	ittte	eq
 8006fa8:	2200      	moveq	r2, #0
 8006faa:	6522      	streq	r2, [r4, #80]	@ 0x50
 8006fac:	6be2      	ldreq	r2, [r4, #60]	@ 0x3c
 8006fae:	6522      	strne	r2, [r4, #80]	@ 0x50
 8006fb0:	bf04      	itt	eq
 8006fb2:	3201      	addeq	r2, #1
 8006fb4:	63e2      	streq	r2, [r4, #60]	@ 0x3c
 8006fb6:	e025      	b.n	8007004 <_NextPixel_SetPixel+0xdc>
 8006fb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fba:	4918      	ldr	r1, [pc, #96]	@ (800701c <_NextPixel_SetPixel+0xf4>)
 8006fbc:	f1c2 0204 	rsb	r2, r2, #4
 8006fc0:	240f      	movs	r4, #15
 8006fc2:	fa04 f602 	lsl.w	r6, r4, r2
 8006fc6:	782c      	ldrb	r4, [r5, #0]
 8006fc8:	fa00 f202 	lsl.w	r2, r0, r2
 8006fcc:	ea24 0406 	bic.w	r4, r4, r6
 8006fd0:	4322      	orrs	r2, r4
 8006fd2:	702a      	strb	r2, [r5, #0]
 8006fd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fd6:	3204      	adds	r2, #4
 8006fd8:	2a08      	cmp	r2, #8
 8006fda:	bf03      	ittte	eq
 8006fdc:	2200      	moveq	r2, #0
 8006fde:	650a      	streq	r2, [r1, #80]	@ 0x50
 8006fe0:	6bca      	ldreq	r2, [r1, #60]	@ 0x3c
 8006fe2:	650a      	strne	r2, [r1, #80]	@ 0x50
 8006fe4:	bf04      	itt	eq
 8006fe6:	3201      	addeq	r2, #1
 8006fe8:	63ca      	streq	r2, [r1, #60]	@ 0x3c
 8006fea:	e00b      	b.n	8007004 <_NextPixel_SetPixel+0xdc>
 8006fec:	7028      	strb	r0, [r5, #0]
 8006fee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ff0:	3201      	adds	r2, #1
 8006ff2:	e006      	b.n	8007002 <_NextPixel_SetPixel+0xda>
 8006ff4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ff6:	f822 0b02 	strh.w	r0, [r2], #2
 8006ffa:	e002      	b.n	8007002 <_NextPixel_SetPixel+0xda>
 8006ffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ffe:	f842 0b04 	str.w	r0, [r2], #4
 8007002:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007004:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007006:	3201      	adds	r2, #1
 8007008:	64da      	str	r2, [r3, #76]	@ 0x4c
 800700a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800700c:	429a      	cmp	r2, r3
 800700e:	d102      	bne.n	8007016 <_NextPixel_SetPixel+0xee>
 8007010:	bc70      	pop	{r4, r5, r6}
 8007012:	f7ff bf55 	b.w	8006ec0 <_NextPixel_FlushBuffer>
 8007016:	bc70      	pop	{r4, r5, r6}
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	20000144 	.word	0x20000144

08007020 <_NextPixel_End>:
 8007020:	4b07      	ldr	r3, [pc, #28]	@ (8007040 <_NextPixel_End+0x20>)
 8007022:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007024:	b510      	push	{r4, lr}
 8007026:	461c      	mov	r4, r3
 8007028:	b10a      	cbz	r2, 800702e <_NextPixel_End+0xe>
 800702a:	f7ff ff49 	bl	8006ec0 <_NextPixel_FlushBuffer>
 800702e:	4805      	ldr	r0, [pc, #20]	@ (8007044 <_NextPixel_End+0x24>)
 8007030:	f7ff fca0 	bl	8006974 <GUI_ALLOC_UnlockH>
 8007034:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8007036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800703a:	f7ff bcbb 	b.w	80069b4 <GUI_ALLOC_Free>
 800703e:	bf00      	nop
 8007040:	20000144 	.word	0x20000144
 8007044:	2000017c 	.word	0x2000017c

08007048 <_NextPixel_Start>:
 8007048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800704c:	461f      	mov	r7, r3
 800704e:	4b21      	ldr	r3, [pc, #132]	@ (80070d4 <_NextPixel_Start+0x8c>)
 8007050:	4c21      	ldr	r4, [pc, #132]	@ (80070d8 <_NextPixel_Start+0x90>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	1a12      	subs	r2, r2, r0
 8007056:	3201      	adds	r2, #1
 8007058:	4680      	mov	r8, r0
 800705a:	7c58      	ldrb	r0, [r3, #17]
 800705c:	6322      	str	r2, [r4, #48]	@ 0x30
 800705e:	f001 fc65 	bl	800892c <GUI_GetBitsPerPixelEx>
 8007062:	2817      	cmp	r0, #23
 8007064:	bfc8      	it	gt
 8007066:	2020      	movgt	r0, #32
 8007068:	2808      	cmp	r0, #8
 800706a:	6460      	str	r0, [r4, #68]	@ 0x44
 800706c:	dd04      	ble.n	8007078 <_NextPixel_Start+0x30>
 800706e:	2811      	cmp	r0, #17
 8007070:	bfb4      	ite	lt
 8007072:	2602      	movlt	r6, #2
 8007074:	2604      	movge	r6, #4
 8007076:	e000      	b.n	800707a <_NextPixel_Start+0x32>
 8007078:	2601      	movs	r6, #1
 800707a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800707c:	f8df 9058 	ldr.w	r9, [pc, #88]	@ 80070d8 <_NextPixel_Start+0x90>
 8007080:	fb03 fa06 	mul.w	sl, r3, r6
 8007084:	f7ff fd7e 	bl	8006b84 <GUI_ALLOC_GetMaxSize>
 8007088:	4550      	cmp	r0, sl
 800708a:	bf2c      	ite	cs
 800708c:	4650      	movcs	r0, sl
 800708e:	fbb0 f0f6 	udivcc	r0, r0, r6
 8007092:	f04f 0500 	mov.w	r5, #0
 8007096:	bf38      	it	cc
 8007098:	4370      	mulcc	r0, r6
 800709a:	fb90 f0f6 	sdiv	r0, r0, r6
 800709e:	64a0      	str	r0, [r4, #72]	@ 0x48
 80070a0:	4650      	mov	r0, sl
 80070a2:	64e5      	str	r5, [r4, #76]	@ 0x4c
 80070a4:	f8c4 8028 	str.w	r8, [r4, #40]	@ 0x28
 80070a8:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
 80070ac:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80070ae:	6426      	str	r6, [r4, #64]	@ 0x40
 80070b0:	6525      	str	r5, [r4, #80]	@ 0x50
 80070b2:	f7ff fdfd 	bl	8006cb0 <GUI_ALLOC_AllocNoInit>
 80070b6:	6360      	str	r0, [r4, #52]	@ 0x34
 80070b8:	b140      	cbz	r0, 80070cc <_NextPixel_Start+0x84>
 80070ba:	f7ff fc4d 	bl	8006958 <GUI_ALLOC_LockH>
 80070be:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
 80070c2:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 80070c6:	4628      	mov	r0, r5
 80070c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070cc:	2001      	movs	r0, #1
 80070ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d2:	bf00      	nop
 80070d4:	2000002c 	.word	0x2000002c
 80070d8:	20000144 	.word	0x20000144

080070dc <_GetEarlyOut.isra.0>:
 80070dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e0:	680c      	ldr	r4, [r1, #0]
 80070e2:	6807      	ldr	r7, [r0, #0]
 80070e4:	f8dd e018 	ldr.w	lr, [sp, #24]
 80070e8:	9d07      	ldr	r5, [sp, #28]
 80070ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 80070ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80070f0:	eb07 0804 	add.w	r8, r7, r4
 80070f4:	681c      	ldr	r4, [r3, #0]
 80070f6:	f8c0 8000 	str.w	r8, [r0]
 80070fa:	2c00      	cmp	r4, #0
 80070fc:	dd04      	ble.n	8007108 <_GetEarlyOut.isra.0+0x2c>
 80070fe:	3c01      	subs	r4, #1
 8007100:	602c      	str	r4, [r5, #0]
 8007102:	f04f 34ff 	mov.w	r4, #4294967295
 8007106:	e005      	b.n	8007114 <_GetEarlyOut.isra.0+0x38>
 8007108:	d004      	beq.n	8007114 <_GetEarlyOut.isra.0+0x38>
 800710a:	4264      	negs	r4, r4
 800710c:	601c      	str	r4, [r3, #0]
 800710e:	2400      	movs	r4, #0
 8007110:	602c      	str	r4, [r5, #0]
 8007112:	2401      	movs	r4, #1
 8007114:	f8cc 4000 	str.w	r4, [ip]
 8007118:	b914      	cbnz	r4, 8007120 <_GetEarlyOut.isra.0+0x44>
 800711a:	2001      	movs	r0, #1
 800711c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007120:	694f      	ldr	r7, [r1, #20]
 8007122:	690c      	ldr	r4, [r1, #16]
 8007124:	443c      	add	r4, r7
 8007126:	681f      	ldr	r7, [r3, #0]
 8007128:	1b3f      	subs	r7, r7, r4
 800712a:	2f00      	cmp	r7, #0
 800712c:	601f      	str	r7, [r3, #0]
 800712e:	ddf4      	ble.n	800711a <_GetEarlyOut.isra.0+0x3e>
 8007130:	f8dc 3000 	ldr.w	r3, [ip]
 8007134:	2b00      	cmp	r3, #0
 8007136:	da08      	bge.n	800714a <_GetEarlyOut.isra.0+0x6e>
 8007138:	694f      	ldr	r7, [r1, #20]
 800713a:	2f00      	cmp	r7, #0
 800713c:	dd0e      	ble.n	800715c <_GetEarlyOut.isra.0+0x80>
 800713e:	682b      	ldr	r3, [r5, #0]
 8007140:	fb07 8406 	mla	r4, r7, r6, r8
 8007144:	6004      	str	r4, [r0, #0]
 8007146:	1bdb      	subs	r3, r3, r7
 8007148:	e007      	b.n	800715a <_GetEarlyOut.isra.0+0x7e>
 800714a:	690b      	ldr	r3, [r1, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	dd05      	ble.n	800715c <_GetEarlyOut.isra.0+0x80>
 8007150:	fb03 8406 	mla	r4, r3, r6, r8
 8007154:	6004      	str	r4, [r0, #0]
 8007156:	6828      	ldr	r0, [r5, #0]
 8007158:	4403      	add	r3, r0
 800715a:	602b      	str	r3, [r5, #0]
 800715c:	68cb      	ldr	r3, [r1, #12]
 800715e:	6888      	ldr	r0, [r1, #8]
 8007160:	4418      	add	r0, r3
 8007162:	6813      	ldr	r3, [r2, #0]
 8007164:	1a1b      	subs	r3, r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	ddd6      	ble.n	800711a <_GetEarlyOut.isra.0+0x3e>
 800716c:	f8de 2000 	ldr.w	r2, [lr]
 8007170:	68cb      	ldr	r3, [r1, #12]
 8007172:	4413      	add	r3, r2
 8007174:	f8ce 3000 	str.w	r3, [lr]
 8007178:	684b      	ldr	r3, [r1, #4]
 800717a:	1af6      	subs	r6, r6, r3
 800717c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800717e:	2000      	movs	r0, #0
 8007180:	601e      	str	r6, [r3, #0]
 8007182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007186 <GUI_BMP__ReadData>:
 8007186:	b570      	push	{r4, r5, r6, lr}
 8007188:	460d      	mov	r5, r1
 800718a:	4604      	mov	r4, r0
 800718c:	4611      	mov	r1, r2
 800718e:	b10b      	cbz	r3, 8007194 <GUI_BMP__ReadData+0xe>
 8007190:	2300      	movs	r3, #0
 8007192:	6043      	str	r3, [r0, #4]
 8007194:	6863      	ldr	r3, [r4, #4]
 8007196:	6826      	ldr	r6, [r4, #0]
 8007198:	68a0      	ldr	r0, [r4, #8]
 800719a:	462a      	mov	r2, r5
 800719c:	47b0      	blx	r6
 800719e:	4285      	cmp	r5, r0
 80071a0:	bf01      	itttt	eq
 80071a2:	6863      	ldreq	r3, [r4, #4]
 80071a4:	18ed      	addeq	r5, r5, r3
 80071a6:	2000      	moveq	r0, #0
 80071a8:	6065      	streq	r5, [r4, #4]
 80071aa:	bf18      	it	ne
 80071ac:	2001      	movne	r0, #1
 80071ae:	bd70      	pop	{r4, r5, r6, pc}

080071b0 <GUI_BMP__ReadPalette>:
 80071b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80071b4:	4f12      	ldr	r7, [pc, #72]	@ (8007200 <GUI_BMP__ReadPalette+0x50>)
 80071b6:	4606      	mov	r6, r0
 80071b8:	460d      	mov	r5, r1
 80071ba:	2400      	movs	r4, #0
 80071bc:	42ac      	cmp	r4, r5
 80071be:	da18      	bge.n	80071f2 <GUI_BMP__ReadPalette+0x42>
 80071c0:	2300      	movs	r3, #0
 80071c2:	aa01      	add	r2, sp, #4
 80071c4:	2104      	movs	r1, #4
 80071c6:	4630      	mov	r0, r6
 80071c8:	f7ff ffdd 	bl	8007186 <GUI_BMP__ReadData>
 80071cc:	b998      	cbnz	r0, 80071f6 <GUI_BMP__ReadPalette+0x46>
 80071ce:	9a01      	ldr	r2, [sp, #4]
 80071d0:	f8d7 8000 	ldr.w	r8, [r7]
 80071d4:	7813      	ldrb	r3, [r2, #0]
 80071d6:	7890      	ldrb	r0, [r2, #2]
 80071d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80071e0:	7850      	ldrb	r0, [r2, #1]
 80071e2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80071e6:	f001 fa6b 	bl	80086c0 <LCD_Color2Index>
 80071ea:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
 80071ee:	3401      	adds	r4, #1
 80071f0:	e7e4      	b.n	80071bc <GUI_BMP__ReadPalette+0xc>
 80071f2:	2000      	movs	r0, #0
 80071f4:	e000      	b.n	80071f8 <GUI_BMP__ReadPalette+0x48>
 80071f6:	2001      	movs	r0, #1
 80071f8:	b002      	add	sp, #8
 80071fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071fe:	bf00      	nop
 8007200:	2000a3f4 	.word	0x2000a3f4

08007204 <_DrawBitmap_RGB>:
 8007204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007208:	b09d      	sub	sp, #116	@ 0x74
 800720a:	ad0a      	add	r5, sp, #40	@ 0x28
 800720c:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
 800720e:	9107      	str	r1, [sp, #28]
 8007210:	4607      	mov	r7, r0
 8007212:	468a      	mov	sl, r1
 8007214:	4690      	mov	r8, r2
 8007216:	2100      	movs	r1, #0
 8007218:	2218      	movs	r2, #24
 800721a:	4628      	mov	r0, r5
 800721c:	469b      	mov	fp, r3
 800721e:	f8dd 909c 	ldr.w	r9, [sp, #156]	@ 0x9c
 8007222:	9306      	str	r3, [sp, #24]
 8007224:	9e2a      	ldr	r6, [sp, #168]	@ 0xa8
 8007226:	f004 ffbd 	bl	800c1a4 <memset>
 800722a:	00e3      	lsls	r3, r4, #3
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	465a      	mov	r2, fp
 8007230:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007232:	9502      	str	r5, [sp, #8]
 8007234:	4641      	mov	r1, r8
 8007236:	4650      	mov	r0, sl
 8007238:	f8cd 9004 	str.w	r9, [sp, #4]
 800723c:	f7ff fd54 	bl	8006ce8 <_GetClipParam>
 8007240:	ab09      	add	r3, sp, #36	@ 0x24
 8007242:	9303      	str	r3, [sp, #12]
 8007244:	ab08      	add	r3, sp, #32
 8007246:	9302      	str	r3, [sp, #8]
 8007248:	ab12      	add	r3, sp, #72	@ 0x48
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	ab07      	add	r3, sp, #28
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	f8cd 9010 	str.w	r9, [sp, #16]
 8007254:	ab26      	add	r3, sp, #152	@ 0x98
 8007256:	aa06      	add	r2, sp, #24
 8007258:	4629      	mov	r1, r5
 800725a:	1d38      	adds	r0, r7, #4
 800725c:	f7ff ff3e 	bl	80070dc <_GetEarlyOut.isra.0>
 8007260:	b108      	cbz	r0, 8007266 <_DrawBitmap_RGB+0x62>
 8007262:	2400      	movs	r4, #0
 8007264:	e04c      	b.n	8007300 <_DrawBitmap_RGB+0xfc>
 8007266:	4b28      	ldr	r3, [pc, #160]	@ (8007308 <_DrawBitmap_RGB+0x104>)
 8007268:	4d28      	ldr	r5, [pc, #160]	@ (800730c <_DrawBitmap_RGB+0x108>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	7c58      	ldrb	r0, [r3, #17]
 800726e:	f001 fb8b 	bl	8008988 <GUI_GetpfColor2IndexEx>
 8007272:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8007274:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8007310 <_DrawBitmap_RGB+0x10c>
 8007278:	9015      	str	r0, [sp, #84]	@ 0x54
 800727a:	42ae      	cmp	r6, r5
 800727c:	9316      	str	r3, [sp, #88]	@ 0x58
 800727e:	f8cd e05c 	str.w	lr, [sp, #92]	@ 0x5c
 8007282:	9807      	ldr	r0, [sp, #28]
 8007284:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007286:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007288:	9a06      	ldr	r2, [sp, #24]
 800728a:	d109      	bne.n	80072a0 <_DrawBitmap_RGB+0x9c>
 800728c:	4441      	add	r1, r8
 800728e:	440b      	add	r3, r1
 8007290:	4402      	add	r2, r0
 8007292:	f8de 8000 	ldr.w	r8, [lr]
 8007296:	3b01      	subs	r3, #1
 8007298:	3a01      	subs	r2, #1
 800729a:	47c0      	blx	r8
 800729c:	b148      	cbz	r0, 80072b2 <_DrawBitmap_RGB+0xae>
 800729e:	e019      	b.n	80072d4 <_DrawBitmap_RGB+0xd0>
 80072a0:	4441      	add	r1, r8
 80072a2:	9018      	str	r0, [sp, #96]	@ 0x60
 80072a4:	440b      	add	r3, r1
 80072a6:	4410      	add	r0, r2
 80072a8:	3801      	subs	r0, #1
 80072aa:	3b01      	subs	r3, #1
 80072ac:	9119      	str	r1, [sp, #100]	@ 0x64
 80072ae:	901a      	str	r0, [sp, #104]	@ 0x68
 80072b0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80072b2:	9b06      	ldr	r3, [sp, #24]
 80072b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072b6:	2300      	movs	r3, #0
 80072b8:	9414      	str	r4, [sp, #80]	@ 0x50
 80072ba:	9311      	str	r3, [sp, #68]	@ 0x44
 80072bc:	2300      	movs	r3, #0
 80072be:	aa10      	add	r2, sp, #64	@ 0x40
 80072c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072c2:	4638      	mov	r0, r7
 80072c4:	f7ff ff5f 	bl	8007186 <GUI_BMP__ReadData>
 80072c8:	b130      	cbz	r0, 80072d8 <_DrawBitmap_RGB+0xd4>
 80072ca:	42ae      	cmp	r6, r5
 80072cc:	d102      	bne.n	80072d4 <_DrawBitmap_RGB+0xd0>
 80072ce:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	4798      	blx	r3
 80072d4:	2401      	movs	r4, #1
 80072d6:	e013      	b.n	8007300 <_DrawBitmap_RGB+0xfc>
 80072d8:	a810      	add	r0, sp, #64	@ 0x40
 80072da:	47b0      	blx	r6
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072e0:	9c26      	ldr	r4, [sp, #152]	@ 0x98
 80072e2:	4413      	add	r3, r2
 80072e4:	607b      	str	r3, [r7, #4]
 80072e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80072e8:	9b08      	ldr	r3, [sp, #32]
 80072ea:	3c01      	subs	r4, #1
 80072ec:	4413      	add	r3, r2
 80072ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80072f0:	9426      	str	r4, [sp, #152]	@ 0x98
 80072f2:	2c00      	cmp	r4, #0
 80072f4:	d1e2      	bne.n	80072bc <_DrawBitmap_RGB+0xb8>
 80072f6:	42ae      	cmp	r6, r5
 80072f8:	d1b3      	bne.n	8007262 <_DrawBitmap_RGB+0x5e>
 80072fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	4798      	blx	r3
 8007300:	4620      	mov	r0, r4
 8007302:	b01d      	add	sp, #116	@ 0x74
 8007304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007308:	2000002c 	.word	0x2000002c
 800730c:	08006e45 	.word	0x08006e45
 8007310:	20000000 	.word	0x20000000

08007314 <_DrawBitmap_16bpp>:
 8007314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007318:	b092      	sub	sp, #72	@ 0x48
 800731a:	af0c      	add	r7, sp, #48	@ 0x30
 800731c:	461c      	mov	r4, r3
 800731e:	4606      	mov	r6, r0
 8007320:	460d      	mov	r5, r1
 8007322:	9107      	str	r1, [sp, #28]
 8007324:	4690      	mov	r8, r2
 8007326:	2100      	movs	r1, #0
 8007328:	2218      	movs	r2, #24
 800732a:	4638      	mov	r0, r7
 800732c:	9306      	str	r3, [sp, #24]
 800732e:	f004 ff39 	bl	800c1a4 <memset>
 8007332:	4622      	mov	r2, r4
 8007334:	0124      	lsls	r4, r4, #4
 8007336:	341f      	adds	r4, #31
 8007338:	1164      	asrs	r4, r4, #5
 800733a:	00a4      	lsls	r4, r4, #2
 800733c:	2310      	movs	r3, #16
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	4641      	mov	r1, r8
 8007342:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8007344:	9702      	str	r7, [sp, #8]
 8007346:	4628      	mov	r0, r5
 8007348:	9401      	str	r4, [sp, #4]
 800734a:	f7ff fccd 	bl	8006ce8 <_GetClipParam>
 800734e:	ab0b      	add	r3, sp, #44	@ 0x2c
 8007350:	9303      	str	r3, [sp, #12]
 8007352:	ab0a      	add	r3, sp, #40	@ 0x28
 8007354:	9302      	str	r3, [sp, #8]
 8007356:	ab09      	add	r3, sp, #36	@ 0x24
 8007358:	9301      	str	r3, [sp, #4]
 800735a:	ab07      	add	r3, sp, #28
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	9404      	str	r4, [sp, #16]
 8007360:	ab18      	add	r3, sp, #96	@ 0x60
 8007362:	aa06      	add	r2, sp, #24
 8007364:	4639      	mov	r1, r7
 8007366:	1d30      	adds	r0, r6, #4
 8007368:	f7ff feb8 	bl	80070dc <_GetEarlyOut.isra.0>
 800736c:	2800      	cmp	r0, #0
 800736e:	d140      	bne.n	80073f2 <_DrawBitmap_16bpp+0xde>
 8007370:	4b22      	ldr	r3, [pc, #136]	@ (80073fc <_DrawBitmap_16bpp+0xe8>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	7c58      	ldrb	r0, [r3, #17]
 8007376:	f001 faff 	bl	8008978 <LCD_GetpfColor2IndexEx>
 800737a:	4605      	mov	r5, r0
 800737c:	b908      	cbnz	r0, 8007382 <_DrawBitmap_16bpp+0x6e>
 800737e:	2401      	movs	r4, #1
 8007380:	e038      	b.n	80073f4 <_DrawBitmap_16bpp+0xe0>
 8007382:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007384:	9807      	ldr	r0, [sp, #28]
 8007386:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8007388:	9a06      	ldr	r2, [sp, #24]
 800738a:	4f1d      	ldr	r7, [pc, #116]	@ (8007400 <_DrawBitmap_16bpp+0xec>)
 800738c:	4441      	add	r1, r8
 800738e:	440b      	add	r3, r1
 8007390:	4402      	add	r2, r0
 8007392:	683c      	ldr	r4, [r7, #0]
 8007394:	3b01      	subs	r3, #1
 8007396:	3a01      	subs	r2, #1
 8007398:	47a0      	blx	r4
 800739a:	2800      	cmp	r0, #0
 800739c:	d1ef      	bne.n	800737e <_DrawBitmap_16bpp+0x6a>
 800739e:	2300      	movs	r3, #0
 80073a0:	aa08      	add	r2, sp, #32
 80073a2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80073a4:	4630      	mov	r0, r6
 80073a6:	f7ff feee 	bl	8007186 <GUI_BMP__ReadData>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d1e7      	bne.n	800737e <_DrawBitmap_16bpp+0x6a>
 80073ae:	4604      	mov	r4, r0
 80073b0:	9b06      	ldr	r3, [sp, #24]
 80073b2:	429c      	cmp	r4, r3
 80073b4:	da09      	bge.n	80073ca <_DrawBitmap_16bpp+0xb6>
 80073b6:	a808      	add	r0, sp, #32
 80073b8:	f000 fe7a 	bl	80080b0 <GUI__Read16>
 80073bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073be:	4798      	blx	r3
 80073c0:	47a8      	blx	r5
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4798      	blx	r3
 80073c6:	3401      	adds	r4, #1
 80073c8:	e7f2      	b.n	80073b0 <_DrawBitmap_16bpp+0x9c>
 80073ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073cc:	b10b      	cbz	r3, 80073d2 <_DrawBitmap_16bpp+0xbe>
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	4798      	blx	r3
 80073d2:	6872      	ldr	r2, [r6, #4]
 80073d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073d6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80073d8:	4413      	add	r3, r2
 80073da:	6073      	str	r3, [r6, #4]
 80073dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073e0:	3c01      	subs	r4, #1
 80073e2:	4413      	add	r3, r2
 80073e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073e6:	9418      	str	r4, [sp, #96]	@ 0x60
 80073e8:	2c00      	cmp	r4, #0
 80073ea:	d1d8      	bne.n	800739e <_DrawBitmap_16bpp+0x8a>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4798      	blx	r3
 80073f0:	e000      	b.n	80073f4 <_DrawBitmap_16bpp+0xe0>
 80073f2:	2400      	movs	r4, #0
 80073f4:	4620      	mov	r0, r4
 80073f6:	b012      	add	sp, #72	@ 0x48
 80073f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073fc:	2000002c 	.word	0x2000002c
 8007400:	20000000 	.word	0x20000000

08007404 <GUI_BMP__Init>:
 8007404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007408:	468b      	mov	fp, r1
 800740a:	4692      	mov	sl, r2
 800740c:	461c      	mov	r4, r3
 800740e:	466a      	mov	r2, sp
 8007410:	2301      	movs	r3, #1
 8007412:	2136      	movs	r1, #54	@ 0x36
 8007414:	4606      	mov	r6, r0
 8007416:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8007418:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800741a:	f7ff feb4 	bl	8007186 <GUI_BMP__ReadData>
 800741e:	2800      	cmp	r0, #0
 8007420:	f040 8083 	bne.w	800752a <GUI_BMP__Init+0x126>
 8007424:	4668      	mov	r0, sp
 8007426:	f000 fe43 	bl	80080b0 <GUI__Read16>
 800742a:	9b00      	ldr	r3, [sp, #0]
 800742c:	4680      	mov	r8, r0
 800742e:	330c      	adds	r3, #12
 8007430:	4668      	mov	r0, sp
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	f000 fe42 	bl	80080bc <GUI__Read32>
 8007438:	4681      	mov	r9, r0
 800743a:	4668      	mov	r0, sp
 800743c:	f000 fe3e 	bl	80080bc <GUI__Read32>
 8007440:	f8cb 0000 	str.w	r0, [fp]
 8007444:	4668      	mov	r0, sp
 8007446:	f000 fe39 	bl	80080bc <GUI__Read32>
 800744a:	9b00      	ldr	r3, [sp, #0]
 800744c:	f8ca 0000 	str.w	r0, [sl]
 8007450:	3302      	adds	r3, #2
 8007452:	4668      	mov	r0, sp
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	f000 fe2b 	bl	80080b0 <GUI__Read16>
 800745a:	8020      	strh	r0, [r4, #0]
 800745c:	4668      	mov	r0, sp
 800745e:	f000 fe2d 	bl	80080bc <GUI__Read32>
 8007462:	9b00      	ldr	r3, [sp, #0]
 8007464:	6038      	str	r0, [r7, #0]
 8007466:	330c      	adds	r3, #12
 8007468:	4668      	mov	r0, sp
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	f000 fe26 	bl	80080bc <GUI__Read32>
 8007470:	8823      	ldrh	r3, [r4, #0]
 8007472:	2b08      	cmp	r3, #8
 8007474:	d00f      	beq.n	8007496 <GUI_BMP__Init+0x92>
 8007476:	d805      	bhi.n	8007484 <GUI_BMP__Init+0x80>
 8007478:	2b01      	cmp	r3, #1
 800747a:	d00a      	beq.n	8007492 <GUI_BMP__Init+0x8e>
 800747c:	2b04      	cmp	r3, #4
 800747e:	d154      	bne.n	800752a <GUI_BMP__Init+0x126>
 8007480:	2310      	movs	r3, #16
 8007482:	e00c      	b.n	800749e <GUI_BMP__Init+0x9a>
 8007484:	2b18      	cmp	r3, #24
 8007486:	d009      	beq.n	800749c <GUI_BMP__Init+0x98>
 8007488:	2b20      	cmp	r3, #32
 800748a:	d007      	beq.n	800749c <GUI_BMP__Init+0x98>
 800748c:	2b10      	cmp	r3, #16
 800748e:	d14c      	bne.n	800752a <GUI_BMP__Init+0x126>
 8007490:	e004      	b.n	800749c <GUI_BMP__Init+0x98>
 8007492:	2302      	movs	r3, #2
 8007494:	e003      	b.n	800749e <GUI_BMP__Init+0x9a>
 8007496:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800749a:	e000      	b.n	800749e <GUI_BMP__Init+0x9a>
 800749c:	2300      	movs	r3, #0
 800749e:	602b      	str	r3, [r5, #0]
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	b10b      	cbz	r3, 80074a8 <GUI_BMP__Init+0xa4>
 80074a4:	b100      	cbz	r0, 80074a8 <GUI_BMP__Init+0xa4>
 80074a6:	6028      	str	r0, [r5, #0]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b03      	cmp	r3, #3
 80074ac:	d12b      	bne.n	8007506 <GUI_BMP__Init+0x102>
 80074ae:	2300      	movs	r3, #0
 80074b0:	aa01      	add	r2, sp, #4
 80074b2:	2110      	movs	r1, #16
 80074b4:	4630      	mov	r0, r6
 80074b6:	f7ff fe66 	bl	8007186 <GUI_BMP__ReadData>
 80074ba:	bb08      	cbnz	r0, 8007500 <GUI_BMP__Init+0xfc>
 80074bc:	a801      	add	r0, sp, #4
 80074be:	f000 fdfd 	bl	80080bc <GUI__Read32>
 80074c2:	4c1c      	ldr	r4, [pc, #112]	@ (8007534 <GUI_BMP__Init+0x130>)
 80074c4:	6020      	str	r0, [r4, #0]
 80074c6:	a801      	add	r0, sp, #4
 80074c8:	f000 fdf8 	bl	80080bc <GUI__Read32>
 80074cc:	6060      	str	r0, [r4, #4]
 80074ce:	a801      	add	r0, sp, #4
 80074d0:	f000 fdf4 	bl	80080bc <GUI__Read32>
 80074d4:	f104 0218 	add.w	r2, r4, #24
 80074d8:	60a0      	str	r0, [r4, #8]
 80074da:	f104 010c 	add.w	r1, r4, #12
 80074de:	6820      	ldr	r0, [r4, #0]
 80074e0:	f7ff fc6e 	bl	8006dc0 <_GetBitfieldsPara>
 80074e4:	f104 021c 	add.w	r2, r4, #28
 80074e8:	f104 0110 	add.w	r1, r4, #16
 80074ec:	6860      	ldr	r0, [r4, #4]
 80074ee:	f7ff fc67 	bl	8006dc0 <_GetBitfieldsPara>
 80074f2:	f104 0220 	add.w	r2, r4, #32
 80074f6:	f104 0114 	add.w	r1, r4, #20
 80074fa:	68a0      	ldr	r0, [r4, #8]
 80074fc:	f7ff fc60 	bl	8006dc0 <_GetBitfieldsPara>
 8007500:	6870      	ldr	r0, [r6, #4]
 8007502:	3838      	subs	r0, #56	@ 0x38
 8007504:	e001      	b.n	800750a <GUI_BMP__Init+0x106>
 8007506:	6870      	ldr	r0, [r6, #4]
 8007508:	3828      	subs	r0, #40	@ 0x28
 800750a:	682b      	ldr	r3, [r5, #0]
 800750c:	4448      	add	r0, r9
 800750e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007512:	6070      	str	r0, [r6, #4]
 8007514:	dc09      	bgt.n	800752a <GUI_BMP__Init+0x126>
 8007516:	f644 5342 	movw	r3, #19778	@ 0x4d42
 800751a:	4598      	cmp	r8, r3
 800751c:	d105      	bne.n	800752a <GUI_BMP__Init+0x126>
 800751e:	6838      	ldr	r0, [r7, #0]
 8007520:	2803      	cmp	r0, #3
 8007522:	bf94      	ite	ls
 8007524:	2000      	movls	r0, #0
 8007526:	2001      	movhi	r0, #1
 8007528:	e000      	b.n	800752c <GUI_BMP__Init+0x128>
 800752a:	2001      	movs	r0, #1
 800752c:	b003      	add	sp, #12
 800752e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007532:	bf00      	nop
 8007534:	20000144 	.word	0x20000144

08007538 <GUI_BMP_DrawEx>:
 8007538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753c:	b0a7      	sub	sp, #156	@ 0x9c
 800753e:	461e      	mov	r6, r3
 8007540:	ab13      	add	r3, sp, #76	@ 0x4c
 8007542:	9301      	str	r3, [sp, #4]
 8007544:	ab12      	add	r3, sp, #72	@ 0x48
 8007546:	901d      	str	r0, [sp, #116]	@ 0x74
 8007548:	911f      	str	r1, [sp, #124]	@ 0x7c
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	4617      	mov	r7, r2
 800754e:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 8007552:	aa11      	add	r2, sp, #68	@ 0x44
 8007554:	a910      	add	r1, sp, #64	@ 0x40
 8007556:	a81d      	add	r0, sp, #116	@ 0x74
 8007558:	f7ff ff54 	bl	8007404 <GUI_BMP__Init>
 800755c:	4605      	mov	r5, r0
 800755e:	2800      	cmp	r0, #0
 8007560:	f040 821e 	bne.w	80079a0 <GUI_BMP_DrawEx+0x468>
 8007564:	4c9f      	ldr	r4, [pc, #636]	@ (80077e4 <GUI_BMP_DrawEx+0x2ac>)
 8007566:	6823      	ldr	r3, [r4, #0]
 8007568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800756a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800756c:	18ba      	adds	r2, r7, r2
 800756e:	9206      	str	r2, [sp, #24]
 8007570:	eb06 0b03 	add.w	fp, r6, r3
 8007574:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8007578:	f8ad 306c 	strh.w	r3, [sp, #108]	@ 0x6c
 800757c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800757e:	f8ad b06e 	strh.w	fp, [sp, #110]	@ 0x6e
 8007582:	3b01      	subs	r3, #1
 8007584:	4413      	add	r3, r2
 8007586:	f8ad 3070 	strh.w	r3, [sp, #112]	@ 0x70
 800758a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800758c:	3b01      	subs	r3, #1
 800758e:	445b      	add	r3, fp
 8007590:	a81b      	add	r0, sp, #108	@ 0x6c
 8007592:	f8ad 3072 	strh.w	r3, [sp, #114]	@ 0x72
 8007596:	f004 f96f 	bl	800b878 <WM__InitIVRSearch>
 800759a:	2800      	cmp	r0, #0
 800759c:	f000 820a 	beq.w	80079b4 <GUI_BMP_DrawEx+0x47c>
 80075a0:	9508      	str	r5, [sp, #32]
 80075a2:	9507      	str	r5, [sp, #28]
 80075a4:	46a0      	mov	r8, r4
 80075a6:	9b08      	ldr	r3, [sp, #32]
 80075a8:	b15b      	cbz	r3, 80075c2 <GUI_BMP_DrawEx+0x8a>
 80075aa:	ab13      	add	r3, sp, #76	@ 0x4c
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	ab12      	add	r3, sp, #72	@ 0x48
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	aa11      	add	r2, sp, #68	@ 0x44
 80075b4:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 80075b8:	a910      	add	r1, sp, #64	@ 0x40
 80075ba:	a81d      	add	r0, sp, #116	@ 0x74
 80075bc:	f7ff ff22 	bl	8007404 <GUI_BMP__Init>
 80075c0:	9007      	str	r0, [sp, #28]
 80075c2:	9b07      	ldr	r3, [sp, #28]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f040 81e1 	bne.w	800798c <GUI_BMP_DrawEx+0x454>
 80075ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80075cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	f200 81dc 	bhi.w	800798c <GUI_BMP_DrawEx+0x454>
 80075d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80075d8:	009e0004 	.word	0x009e0004
 80075dc:	01bc009e 	.word	0x01bc009e
 80075e0:	f8bd 503e 	ldrh.w	r5, [sp, #62]	@ 0x3e
 80075e4:	2d08      	cmp	r5, #8
 80075e6:	d010      	beq.n	800760a <GUI_BMP_DrawEx+0xd2>
 80075e8:	d805      	bhi.n	80075f6 <GUI_BMP_DrawEx+0xbe>
 80075ea:	2d01      	cmp	r5, #1
 80075ec:	d00d      	beq.n	800760a <GUI_BMP_DrawEx+0xd2>
 80075ee:	2d04      	cmp	r5, #4
 80075f0:	f040 81ca 	bne.w	8007988 <GUI_BMP_DrawEx+0x450>
 80075f4:	e009      	b.n	800760a <GUI_BMP_DrawEx+0xd2>
 80075f6:	2d18      	cmp	r5, #24
 80075f8:	d071      	beq.n	80076de <GUI_BMP_DrawEx+0x1a6>
 80075fa:	2d20      	cmp	r5, #32
 80075fc:	f000 8084 	beq.w	8007708 <GUI_BMP_DrawEx+0x1d0>
 8007600:	2d10      	cmp	r5, #16
 8007602:	f040 81c1 	bne.w	8007988 <GUI_BMP_DrawEx+0x450>
 8007606:	4b78      	ldr	r3, [pc, #480]	@ (80077e8 <GUI_BMP_DrawEx+0x2b0>)
 8007608:	e1ae      	b.n	8007968 <GUI_BMP_DrawEx+0x430>
 800760a:	9b06      	ldr	r3, [sp, #24]
 800760c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800760e:	9314      	str	r3, [sp, #80]	@ 0x50
 8007610:	ae20      	add	r6, sp, #128	@ 0x80
 8007612:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007614:	9315      	str	r3, [sp, #84]	@ 0x54
 8007616:	2100      	movs	r1, #0
 8007618:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800761a:	9316      	str	r3, [sp, #88]	@ 0x58
 800761c:	2218      	movs	r2, #24
 800761e:	4630      	mov	r0, r6
 8007620:	f004 fdc0 	bl	800c1a4 <memset>
 8007624:	4621      	mov	r1, r4
 8007626:	a81d      	add	r0, sp, #116	@ 0x74
 8007628:	f7ff fdc2 	bl	80071b0 <GUI_BMP__ReadPalette>
 800762c:	2800      	cmp	r0, #0
 800762e:	f040 81ab 	bne.w	8007988 <GUI_BMP_DrawEx+0x450>
 8007632:	2d04      	cmp	r5, #4
 8007634:	d005      	beq.n	8007642 <GUI_BMP_DrawEx+0x10a>
 8007636:	2d08      	cmp	r5, #8
 8007638:	d009      	beq.n	800764e <GUI_BMP_DrawEx+0x116>
 800763a:	2d01      	cmp	r5, #1
 800763c:	d10c      	bne.n	8007658 <GUI_BMP_DrawEx+0x120>
 800763e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8007640:	e001      	b.n	8007646 <GUI_BMP_DrawEx+0x10e>
 8007642:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8007644:	00a4      	lsls	r4, r4, #2
 8007646:	341f      	adds	r4, #31
 8007648:	1164      	asrs	r4, r4, #5
 800764a:	00a4      	lsls	r4, r4, #2
 800764c:	e005      	b.n	800765a <GUI_BMP_DrawEx+0x122>
 800764e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8007650:	3403      	adds	r4, #3
 8007652:	f024 0403 	bic.w	r4, r4, #3
 8007656:	e000      	b.n	800765a <GUI_BMP_DrawEx+0x122>
 8007658:	4604      	mov	r4, r0
 800765a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800765c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800765e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8007660:	9602      	str	r6, [sp, #8]
 8007662:	4659      	mov	r1, fp
 8007664:	9401      	str	r4, [sp, #4]
 8007666:	9500      	str	r5, [sp, #0]
 8007668:	f7ff fb3e 	bl	8006ce8 <_GetClipParam>
 800766c:	ab1a      	add	r3, sp, #104	@ 0x68
 800766e:	9303      	str	r3, [sp, #12]
 8007670:	ab19      	add	r3, sp, #100	@ 0x64
 8007672:	9302      	str	r3, [sp, #8]
 8007674:	ab18      	add	r3, sp, #96	@ 0x60
 8007676:	9301      	str	r3, [sp, #4]
 8007678:	ab14      	add	r3, sp, #80	@ 0x50
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	9404      	str	r4, [sp, #16]
 800767e:	ab16      	add	r3, sp, #88	@ 0x58
 8007680:	aa15      	add	r2, sp, #84	@ 0x54
 8007682:	4631      	mov	r1, r6
 8007684:	a81e      	add	r0, sp, #120	@ 0x78
 8007686:	f7ff fd29 	bl	80070dc <_GetEarlyOut.isra.0>
 800768a:	2800      	cmp	r0, #0
 800768c:	f040 817e 	bne.w	800798c <GUI_BMP_DrawEx+0x454>
 8007690:	4c56      	ldr	r4, [pc, #344]	@ (80077ec <GUI_BMP_DrawEx+0x2b4>)
 8007692:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8007694:	2300      	movs	r3, #0
 8007696:	aa17      	add	r2, sp, #92	@ 0x5c
 8007698:	a81d      	add	r0, sp, #116	@ 0x74
 800769a:	f7ff fd74 	bl	8007186 <GUI_BMP__ReadData>
 800769e:	2800      	cmp	r0, #0
 80076a0:	f040 8172 	bne.w	8007988 <GUI_BMP_DrawEx+0x450>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	9305      	str	r3, [sp, #20]
 80076a8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80076aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076ac:	9304      	str	r3, [sp, #16]
 80076ae:	2301      	movs	r3, #1
 80076b0:	9303      	str	r3, [sp, #12]
 80076b2:	9301      	str	r3, [sp, #4]
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80076b8:	9502      	str	r5, [sp, #8]
 80076ba:	4459      	add	r1, fp
 80076bc:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80076be:	f000 fe8d 	bl	80083dc <LCD_DrawBitmap>
 80076c2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80076c4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80076c6:	4413      	add	r3, r2
 80076c8:	931e      	str	r3, [sp, #120]	@ 0x78
 80076ca:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80076cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076ce:	4413      	add	r3, r2
 80076d0:	9318      	str	r3, [sp, #96]	@ 0x60
 80076d2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80076d4:	3b01      	subs	r3, #1
 80076d6:	9316      	str	r3, [sp, #88]	@ 0x58
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1da      	bne.n	8007692 <GUI_BMP_DrawEx+0x15a>
 80076dc:	e156      	b.n	800798c <GUI_BMP_DrawEx+0x454>
 80076de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80076e0:	4a43      	ldr	r2, [pc, #268]	@ (80077f0 <GUI_BMP_DrawEx+0x2b8>)
 80076e2:	9204      	str	r2, [sp, #16]
 80076e4:	435d      	muls	r5, r3
 80076e6:	351f      	adds	r5, #31
 80076e8:	2200      	movs	r2, #0
 80076ea:	116d      	asrs	r5, r5, #5
 80076ec:	9203      	str	r2, [sp, #12]
 80076ee:	00ad      	lsls	r5, r5, #2
 80076f0:	2203      	movs	r2, #3
 80076f2:	9202      	str	r2, [sp, #8]
 80076f4:	9501      	str	r5, [sp, #4]
 80076f6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80076f8:	9200      	str	r2, [sp, #0]
 80076fa:	9906      	ldr	r1, [sp, #24]
 80076fc:	465a      	mov	r2, fp
 80076fe:	a81d      	add	r0, sp, #116	@ 0x74
 8007700:	f7ff fd80 	bl	8007204 <_DrawBitmap_RGB>
 8007704:	9007      	str	r0, [sp, #28]
 8007706:	e141      	b.n	800798c <GUI_BMP_DrawEx+0x454>
 8007708:	4a3a      	ldr	r2, [pc, #232]	@ (80077f4 <GUI_BMP_DrawEx+0x2bc>)
 800770a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800770c:	6912      	ldr	r2, [r2, #16]
 800770e:	9204      	str	r2, [sp, #16]
 8007710:	2200      	movs	r2, #0
 8007712:	e133      	b.n	800797c <GUI_BMP_DrawEx+0x444>
 8007714:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007716:	930a      	str	r3, [sp, #40]	@ 0x28
 8007718:	f8d8 3000 	ldr.w	r3, [r8]
 800771c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800771e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007720:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	930c      	str	r3, [sp, #48]	@ 0x30
 8007726:	a81d      	add	r0, sp, #116	@ 0x74
 8007728:	f7ff fd42 	bl	80071b0 <GUI_BMP__ReadPalette>
 800772c:	2800      	cmp	r0, #0
 800772e:	f040 812b 	bne.w	8007988 <GUI_BMP_DrawEx+0x450>
 8007732:	445d      	add	r5, fp
 8007734:	9e06      	ldr	r6, [sp, #24]
 8007736:	f8df 90b4 	ldr.w	r9, [pc, #180]	@ 80077ec <GUI_BMP_DrawEx+0x2b4>
 800773a:	3d01      	subs	r5, #1
 800773c:	2300      	movs	r3, #0
 800773e:	aa20      	add	r2, sp, #128	@ 0x80
 8007740:	2102      	movs	r1, #2
 8007742:	a81d      	add	r0, sp, #116	@ 0x74
 8007744:	f7ff fd1f 	bl	8007186 <GUI_BMP__ReadData>
 8007748:	2800      	cmp	r0, #0
 800774a:	f040 811d 	bne.w	8007988 <GUI_BMP_DrawEx+0x450>
 800774e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	9220      	str	r2, [sp, #128]	@ 0x80
 8007754:	f893 a000 	ldrb.w	sl, [r3]
 8007758:	785f      	ldrb	r7, [r3, #1]
 800775a:	f1ba 0f00 	cmp.w	sl, #0
 800775e:	f040 80bd 	bne.w	80078dc <GUI_BMP_DrawEx+0x3a4>
 8007762:	2f01      	cmp	r7, #1
 8007764:	d01a      	beq.n	800779c <GUI_BMP_DrawEx+0x264>
 8007766:	d302      	bcc.n	800776e <GUI_BMP_DrawEx+0x236>
 8007768:	2f02      	cmp	r7, #2
 800776a:	d045      	beq.n	80077f8 <GUI_BMP_DrawEx+0x2c0>
 800776c:	e063      	b.n	8007836 <GUI_BMP_DrawEx+0x2fe>
 800776e:	9b06      	ldr	r3, [sp, #24]
 8007770:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007772:	189a      	adds	r2, r3, r2
 8007774:	3a01      	subs	r2, #1
 8007776:	42b2      	cmp	r2, r6
 8007778:	dd0a      	ble.n	8007790 <GUI_BMP_DrawEx+0x258>
 800777a:	f8d9 3000 	ldr.w	r3, [r9]
 800777e:	6819      	ldr	r1, [r3, #0]
 8007780:	f8d8 3000 	ldr.w	r3, [r8]
 8007784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007786:	4630      	mov	r0, r6
 8007788:	6019      	str	r1, [r3, #0]
 800778a:	4629      	mov	r1, r5
 800778c:	f000 fce6 	bl	800815c <LCD_DrawHLine>
 8007790:	3d01      	subs	r5, #1
 8007792:	45ab      	cmp	fp, r5
 8007794:	f300 80f8 	bgt.w	8007988 <GUI_BMP_DrawEx+0x450>
 8007798:	9c06      	ldr	r4, [sp, #24]
 800779a:	e103      	b.n	80079a4 <GUI_BMP_DrawEx+0x46c>
 800779c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800779e:	9a06      	ldr	r2, [sp, #24]
 80077a0:	4413      	add	r3, r2
 80077a2:	1e5c      	subs	r4, r3, #1
 80077a4:	42a6      	cmp	r6, r4
 80077a6:	da0b      	bge.n	80077c0 <GUI_BMP_DrawEx+0x288>
 80077a8:	4b10      	ldr	r3, [pc, #64]	@ (80077ec <GUI_BMP_DrawEx+0x2b4>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	f8d8 3000 	ldr.w	r3, [r8]
 80077b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077b4:	4629      	mov	r1, r5
 80077b6:	601a      	str	r2, [r3, #0]
 80077b8:	4630      	mov	r0, r6
 80077ba:	4622      	mov	r2, r4
 80077bc:	f000 fcce 	bl	800815c <LCD_DrawHLine>
 80077c0:	45ab      	cmp	fp, r5
 80077c2:	f280 80f1 	bge.w	80079a8 <GUI_BMP_DrawEx+0x470>
 80077c6:	4b09      	ldr	r3, [pc, #36]	@ (80077ec <GUI_BMP_DrawEx+0x2b4>)
 80077c8:	9806      	ldr	r0, [sp, #24]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	f8d8 3000 	ldr.w	r3, [r8]
 80077d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d4:	4659      	mov	r1, fp
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	1e6b      	subs	r3, r5, #1
 80077da:	4622      	mov	r2, r4
 80077dc:	f000 fce6 	bl	80081ac <LCD_FillRect>
 80077e0:	e0e2      	b.n	80079a8 <GUI_BMP_DrawEx+0x470>
 80077e2:	bf00      	nop
 80077e4:	2000002c 	.word	0x2000002c
 80077e8:	0800bd6d 	.word	0x0800bd6d
 80077ec:	2000a3f4 	.word	0x2000a3f4
 80077f0:	08006e45 	.word	0x08006e45
 80077f4:	20000000 	.word	0x20000000
 80077f8:	4653      	mov	r3, sl
 80077fa:	aa20      	add	r2, sp, #128	@ 0x80
 80077fc:	4639      	mov	r1, r7
 80077fe:	a81d      	add	r0, sp, #116	@ 0x74
 8007800:	f7ff fcc1 	bl	8007186 <GUI_BMP__ReadData>
 8007804:	2800      	cmp	r0, #0
 8007806:	f040 80bf 	bne.w	8007988 <GUI_BMP_DrawEx+0x450>
 800780a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800780c:	1c53      	adds	r3, r2, #1
 800780e:	9320      	str	r3, [sp, #128]	@ 0x80
 8007810:	f8d9 3000 	ldr.w	r3, [r9]
 8007814:	7814      	ldrb	r4, [r2, #0]
 8007816:	7857      	ldrb	r7, [r2, #1]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	f8d8 3000 	ldr.w	r3, [r8]
 800781e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007820:	1bef      	subs	r7, r5, r7
 8007822:	4434      	add	r4, r6
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	4639      	mov	r1, r7
 8007828:	462b      	mov	r3, r5
 800782a:	4622      	mov	r2, r4
 800782c:	4630      	mov	r0, r6
 800782e:	f000 fcbd 	bl	80081ac <LCD_FillRect>
 8007832:	463d      	mov	r5, r7
 8007834:	e0b6      	b.n	80079a4 <GUI_BMP_DrawEx+0x46c>
 8007836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007838:	2b02      	cmp	r3, #2
 800783a:	d125      	bne.n	8007888 <GUI_BMP_DrawEx+0x350>
 800783c:	1c7b      	adds	r3, r7, #1
 800783e:	105c      	asrs	r4, r3, #1
 8007840:	930d      	str	r3, [sp, #52]	@ 0x34
 8007842:	aa20      	add	r2, sp, #128	@ 0x80
 8007844:	4653      	mov	r3, sl
 8007846:	4621      	mov	r1, r4
 8007848:	a81d      	add	r0, sp, #116	@ 0x74
 800784a:	f7ff fc9c 	bl	8007186 <GUI_BMP__ReadData>
 800784e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007850:	2800      	cmp	r0, #0
 8007852:	f040 8099 	bne.w	8007988 <GUI_BMP_DrawEx+0x450>
 8007856:	f8d9 3000 	ldr.w	r3, [r9]
 800785a:	9305      	str	r3, [sp, #20]
 800785c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800785e:	9304      	str	r3, [sp, #16]
 8007860:	f04f 0a01 	mov.w	sl, #1
 8007864:	2304      	movs	r3, #4
 8007866:	9403      	str	r4, [sp, #12]
 8007868:	9302      	str	r3, [sp, #8]
 800786a:	f8cd a004 	str.w	sl, [sp, #4]
 800786e:	4653      	mov	r3, sl
 8007870:	f8cd a000 	str.w	sl, [sp]
 8007874:	463a      	mov	r2, r7
 8007876:	4629      	mov	r1, r5
 8007878:	4630      	mov	r0, r6
 800787a:	f000 fdaf 	bl	80083dc <LCD_DrawBitmap>
 800787e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007880:	19f4      	adds	r4, r6, r7
 8007882:	f013 0f02 	tst.w	r3, #2
 8007886:	e01f      	b.n	80078c8 <GUI_BMP_DrawEx+0x390>
 8007888:	4653      	mov	r3, sl
 800788a:	aa20      	add	r2, sp, #128	@ 0x80
 800788c:	4639      	mov	r1, r7
 800788e:	a81d      	add	r0, sp, #116	@ 0x74
 8007890:	f7ff fc79 	bl	8007186 <GUI_BMP__ReadData>
 8007894:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007896:	2800      	cmp	r0, #0
 8007898:	d176      	bne.n	8007988 <GUI_BMP_DrawEx+0x450>
 800789a:	f8d9 3000 	ldr.w	r3, [r9]
 800789e:	9305      	str	r3, [sp, #20]
 80078a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80078a2:	9304      	str	r3, [sp, #16]
 80078a4:	f04f 0a01 	mov.w	sl, #1
 80078a8:	2308      	movs	r3, #8
 80078aa:	9302      	str	r3, [sp, #8]
 80078ac:	9703      	str	r7, [sp, #12]
 80078ae:	f8cd a004 	str.w	sl, [sp, #4]
 80078b2:	f8cd a000 	str.w	sl, [sp]
 80078b6:	4653      	mov	r3, sl
 80078b8:	463a      	mov	r2, r7
 80078ba:	4629      	mov	r1, r5
 80078bc:	4630      	mov	r0, r6
 80078be:	f000 fd8d 	bl	80083dc <LCD_DrawBitmap>
 80078c2:	19f4      	adds	r4, r6, r7
 80078c4:	f017 0f01 	tst.w	r7, #1
 80078c8:	d06c      	beq.n	80079a4 <GUI_BMP_DrawEx+0x46c>
 80078ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078cc:	aa20      	add	r2, sp, #128	@ 0x80
 80078ce:	4651      	mov	r1, sl
 80078d0:	a81d      	add	r0, sp, #116	@ 0x74
 80078d2:	f7ff fc58 	bl	8007186 <GUI_BMP__ReadData>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d064      	beq.n	80079a4 <GUI_BMP_DrawEx+0x46c>
 80078da:	e055      	b.n	8007988 <GUI_BMP_DrawEx+0x450>
 80078dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d126      	bne.n	8007930 <GUI_BMP_DrawEx+0x3f8>
 80078e2:	f007 030f 	and.w	r3, r7, #15
 80078e6:	093f      	lsrs	r7, r7, #4
 80078e8:	42bb      	cmp	r3, r7
 80078ea:	b21b      	sxth	r3, r3
 80078ec:	d004      	beq.n	80078f8 <GUI_BMP_DrawEx+0x3c0>
 80078ee:	00ba      	lsls	r2, r7, #2
 80078f0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80078f2:	009f      	lsls	r7, r3, #2
 80078f4:	4604      	mov	r4, r0
 80078f6:	e004      	b.n	8007902 <GUI_BMP_DrawEx+0x3ca>
 80078f8:	f8d9 2000 	ldr.w	r2, [r9]
 80078fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007900:	e01a      	b.n	8007938 <GUI_BMP_DrawEx+0x400>
 8007902:	4554      	cmp	r4, sl
 8007904:	eb04 0006 	add.w	r0, r4, r6
 8007908:	da0f      	bge.n	800792a <GUI_BMP_DrawEx+0x3f2>
 800790a:	07e2      	lsls	r2, r4, #31
 800790c:	f8d9 3000 	ldr.w	r3, [r9]
 8007910:	bf56      	itet	pl
 8007912:	9a0b      	ldrpl	r2, [sp, #44]	@ 0x2c
 8007914:	59da      	ldrmi	r2, [r3, r7]
 8007916:	589a      	ldrpl	r2, [r3, r2]
 8007918:	f8d8 3000 	ldr.w	r3, [r8]
 800791c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800791e:	4629      	mov	r1, r5
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	f000 fbeb 	bl	80080fc <LCD_DrawPixel>
 8007926:	3401      	adds	r4, #1
 8007928:	e7eb      	b.n	8007902 <GUI_BMP_DrawEx+0x3ca>
 800792a:	eb06 040a 	add.w	r4, r6, sl
 800792e:	e039      	b.n	80079a4 <GUI_BMP_DrawEx+0x46c>
 8007930:	f8d9 3000 	ldr.w	r3, [r9]
 8007934:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
 8007938:	f8d8 3000 	ldr.w	r3, [r8]
 800793c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800793e:	eb0a 0406 	add.w	r4, sl, r6
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	4629      	mov	r1, r5
 8007946:	1e62      	subs	r2, r4, #1
 8007948:	4630      	mov	r0, r6
 800794a:	f000 fc07 	bl	800815c <LCD_DrawHLine>
 800794e:	e029      	b.n	80079a4 <GUI_BMP_DrawEx+0x46c>
 8007950:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 8007954:	2b10      	cmp	r3, #16
 8007956:	d006      	beq.n	8007966 <GUI_BMP_DrawEx+0x42e>
 8007958:	2b20      	cmp	r3, #32
 800795a:	d115      	bne.n	8007988 <GUI_BMP_DrawEx+0x450>
 800795c:	4a17      	ldr	r2, [pc, #92]	@ (80079bc <GUI_BMP_DrawEx+0x484>)
 800795e:	9204      	str	r2, [sp, #16]
 8007960:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007962:	4a17      	ldr	r2, [pc, #92]	@ (80079c0 <GUI_BMP_DrawEx+0x488>)
 8007964:	e00a      	b.n	800797c <GUI_BMP_DrawEx+0x444>
 8007966:	4b16      	ldr	r3, [pc, #88]	@ (80079c0 <GUI_BMP_DrawEx+0x488>)
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	465a      	mov	r2, fp
 8007970:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007972:	9906      	ldr	r1, [sp, #24]
 8007974:	a81d      	add	r0, sp, #116	@ 0x74
 8007976:	f7ff fccd 	bl	8007314 <_DrawBitmap_16bpp>
 800797a:	e6c3      	b.n	8007704 <GUI_BMP_DrawEx+0x1cc>
 800797c:	9203      	str	r2, [sp, #12]
 800797e:	2204      	movs	r2, #4
 8007980:	9202      	str	r2, [sp, #8]
 8007982:	009a      	lsls	r2, r3, #2
 8007984:	9201      	str	r2, [sp, #4]
 8007986:	e6b6      	b.n	80076f6 <GUI_BMP_DrawEx+0x1be>
 8007988:	2301      	movs	r3, #1
 800798a:	9307      	str	r3, [sp, #28]
 800798c:	f003 feb2 	bl	800b6f4 <WM__GetNextIVR>
 8007990:	9b08      	ldr	r3, [sp, #32]
 8007992:	3301      	adds	r3, #1
 8007994:	9308      	str	r3, [sp, #32]
 8007996:	2800      	cmp	r0, #0
 8007998:	f47f ae05 	bne.w	80075a6 <GUI_BMP_DrawEx+0x6e>
 800799c:	9807      	ldr	r0, [sp, #28]
 800799e:	e009      	b.n	80079b4 <GUI_BMP_DrawEx+0x47c>
 80079a0:	2001      	movs	r0, #1
 80079a2:	e007      	b.n	80079b4 <GUI_BMP_DrawEx+0x47c>
 80079a4:	4626      	mov	r6, r4
 80079a6:	e6c9      	b.n	800773c <GUI_BMP_DrawEx+0x204>
 80079a8:	f8d8 3000 	ldr.w	r3, [r8]
 80079ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80079ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	e7eb      	b.n	800798c <GUI_BMP_DrawEx+0x454>
 80079b4:	b027      	add	sp, #156	@ 0x9c
 80079b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ba:	bf00      	nop
 80079bc:	08006e45 	.word	0x08006e45
 80079c0:	08006de5 	.word	0x08006de5

080079c4 <GUI_CalcColorDist>:
 80079c4:	b2c3      	uxtb	r3, r0
 80079c6:	b2ca      	uxtb	r2, r1
 80079c8:	1a9a      	subs	r2, r3, r2
 80079ca:	b292      	uxth	r2, r2
 80079cc:	b510      	push	{r4, lr}
 80079ce:	b214      	sxth	r4, r2
 80079d0:	2c00      	cmp	r4, #0
 80079d2:	bfbc      	itt	lt
 80079d4:	4252      	neglt	r2, r2
 80079d6:	b214      	sxthlt	r4, r2
 80079d8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80079dc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80079e0:	1a9b      	subs	r3, r3, r2
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	0c09      	lsrs	r1, r1, #16
 80079e6:	b21a      	sxth	r2, r3
 80079e8:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 80079ec:	2a00      	cmp	r2, #0
 80079ee:	b289      	uxth	r1, r1
 80079f0:	b208      	sxth	r0, r1
 80079f2:	bfbc      	itt	lt
 80079f4:	425b      	neglt	r3, r3
 80079f6:	b21a      	sxthlt	r2, r3
 80079f8:	2800      	cmp	r0, #0
 80079fa:	bfbc      	itt	lt
 80079fc:	4249      	neglt	r1, r1
 80079fe:	b208      	sxthlt	r0, r1
 8007a00:	4352      	muls	r2, r2
 8007a02:	fb04 2204 	mla	r2, r4, r4, r2
 8007a06:	b280      	uxth	r0, r0
 8007a08:	fb00 2000 	mla	r0, r0, r0, r2
 8007a0c:	bd10      	pop	{r4, pc}
	...

08007a10 <GUI_GetVersionString>:
 8007a10:	4804      	ldr	r0, [pc, #16]	@ (8007a24 <GUI_GetVersionString+0x14>)
 8007a12:	2335      	movs	r3, #53	@ 0x35
 8007a14:	7003      	strb	r3, [r0, #0]
 8007a16:	2334      	movs	r3, #52	@ 0x34
 8007a18:	7083      	strb	r3, [r0, #2]
 8007a1a:	70c3      	strb	r3, [r0, #3]
 8007a1c:	2361      	movs	r3, #97	@ 0x61
 8007a1e:	7103      	strb	r3, [r0, #4]
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	20000014 	.word	0x20000014

08007a28 <GUI_MergeRect>:
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	b338      	cbz	r0, 8007a7c <GUI_MergeRect+0x54>
 8007a2c:	b309      	cbz	r1, 8007a72 <GUI_MergeRect+0x4a>
 8007a2e:	b30a      	cbz	r2, 8007a74 <GUI_MergeRect+0x4c>
 8007a30:	f9b2 4000 	ldrsh.w	r4, [r2]
 8007a34:	f9b1 3000 	ldrsh.w	r3, [r1]
 8007a38:	42a3      	cmp	r3, r4
 8007a3a:	bfa8      	it	ge
 8007a3c:	4623      	movge	r3, r4
 8007a3e:	8003      	strh	r3, [r0, #0]
 8007a40:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8007a44:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8007a48:	42a3      	cmp	r3, r4
 8007a4a:	bfa8      	it	ge
 8007a4c:	4623      	movge	r3, r4
 8007a4e:	8043      	strh	r3, [r0, #2]
 8007a50:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 8007a54:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8007a58:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8007a5c:	42a3      	cmp	r3, r4
 8007a5e:	bfb8      	it	lt
 8007a60:	4623      	movlt	r3, r4
 8007a62:	8083      	strh	r3, [r0, #4]
 8007a64:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	bfb8      	it	lt
 8007a6c:	4613      	movlt	r3, r2
 8007a6e:	80c3      	strh	r3, [r0, #6]
 8007a70:	bd10      	pop	{r4, pc}
 8007a72:	4611      	mov	r1, r2
 8007a74:	680b      	ldr	r3, [r1, #0]
 8007a76:	6003      	str	r3, [r0, #0]
 8007a78:	684b      	ldr	r3, [r1, #4]
 8007a7a:	6043      	str	r3, [r0, #4]
 8007a7c:	bd10      	pop	{r4, pc}

08007a7e <GUI_MoveRect>:
 8007a7e:	b168      	cbz	r0, 8007a9c <GUI_MoveRect+0x1e>
 8007a80:	8803      	ldrh	r3, [r0, #0]
 8007a82:	b289      	uxth	r1, r1
 8007a84:	440b      	add	r3, r1
 8007a86:	8003      	strh	r3, [r0, #0]
 8007a88:	8883      	ldrh	r3, [r0, #4]
 8007a8a:	4419      	add	r1, r3
 8007a8c:	8843      	ldrh	r3, [r0, #2]
 8007a8e:	8081      	strh	r1, [r0, #4]
 8007a90:	b292      	uxth	r2, r2
 8007a92:	4413      	add	r3, r2
 8007a94:	8043      	strh	r3, [r0, #2]
 8007a96:	88c3      	ldrh	r3, [r0, #6]
 8007a98:	441a      	add	r2, r3
 8007a9a:	80c2      	strh	r2, [r0, #6]
 8007a9c:	4770      	bx	lr
	...

08007aa0 <GUI_GotoXY>:
 8007aa0:	4b02      	ldr	r3, [pc, #8]	@ (8007aac <GUI_GotoXY+0xc>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	8458      	strh	r0, [r3, #34]	@ 0x22
 8007aa6:	8499      	strh	r1, [r3, #36]	@ 0x24
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	4770      	bx	lr
 8007aac:	2000002c 	.word	0x2000002c

08007ab0 <GUI_RectsIntersect>:
 8007ab0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8007ab4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	dc14      	bgt.n	8007ae6 <GUI_RectsIntersect+0x36>
 8007abc:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8007ac0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	dc0e      	bgt.n	8007ae6 <GUI_RectsIntersect+0x36>
 8007ac8:	f9b0 2000 	ldrsh.w	r2, [r0]
 8007acc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	dc08      	bgt.n	8007ae6 <GUI_RectsIntersect+0x36>
 8007ad4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007ad8:	f9b1 3000 	ldrsh.w	r3, [r1]
 8007adc:	4283      	cmp	r3, r0
 8007ade:	bfcc      	ite	gt
 8007ae0:	2000      	movgt	r0, #0
 8007ae2:	2001      	movle	r0, #1
 8007ae4:	4770      	bx	lr
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	4770      	bx	lr

08007aea <GUI_SelectLCD>:
 8007aea:	b508      	push	{r3, lr}
 8007aec:	f000 ffd0 	bl	8008a90 <LCD_SelectLCD>
 8007af0:	f001 f836 	bl	8008b60 <LCD_UpdateColorIndices>
 8007af4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007af8:	f003 bf3e 	b.w	800b978 <WM_Activate>

08007afc <GUI_SetBkColor>:
 8007afc:	f000 be34 	b.w	8008768 <LCD_SetBkColor>

08007b00 <GUI_SetOrg>:
 8007b00:	4b09      	ldr	r3, [pc, #36]	@ (8007b28 <GUI_SetOrg+0x28>)
 8007b02:	b410      	push	{r4}
 8007b04:	8018      	strh	r0, [r3, #0]
 8007b06:	4b09      	ldr	r3, [pc, #36]	@ (8007b2c <GUI_SetOrg+0x2c>)
 8007b08:	8019      	strh	r1, [r3, #0]
 8007b0a:	4b09      	ldr	r3, [pc, #36]	@ (8007b30 <GUI_SetOrg+0x30>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	460a      	mov	r2, r1
 8007b10:	7c59      	ldrb	r1, [r3, #17]
 8007b12:	4b08      	ldr	r3, [pc, #32]	@ (8007b34 <GUI_SetOrg+0x34>)
 8007b14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b18:	68d9      	ldr	r1, [r3, #12]
 8007b1a:	6a0c      	ldr	r4, [r1, #32]
 8007b1c:	4601      	mov	r1, r0
 8007b1e:	4618      	mov	r0, r3
 8007b20:	4623      	mov	r3, r4
 8007b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b26:	4718      	bx	r3
 8007b28:	2000a3bc 	.word	0x2000a3bc
 8007b2c:	2000a3ac 	.word	0x2000a3ac
 8007b30:	2000002c 	.word	0x2000002c
 8007b34:	2000a3e4 	.word	0x2000a3e4

08007b38 <_InitContext>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4d19      	ldr	r5, [pc, #100]	@ (8007ba0 <_InitContext+0x68>)
 8007b3c:	4b19      	ldr	r3, [pc, #100]	@ (8007ba4 <_InitContext+0x6c>)
 8007b3e:	6703      	str	r3, [r0, #112]	@ 0x70
 8007b40:	692b      	ldr	r3, [r5, #16]
 8007b42:	1d1a      	adds	r2, r3, #4
 8007b44:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007b46:	f103 0208 	add.w	r2, r3, #8
 8007b4a:	639b      	str	r3, [r3, #56]	@ 0x38
 8007b4c:	641b      	str	r3, [r3, #64]	@ 0x40
 8007b4e:	6142      	str	r2, [r0, #20]
 8007b50:	7c5a      	ldrb	r2, [r3, #17]
 8007b52:	4b15      	ldr	r3, [pc, #84]	@ (8007ba8 <_InitContext+0x70>)
 8007b54:	4604      	mov	r4, r0
 8007b56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007b5a:	68c3      	ldr	r3, [r0, #12]
 8007b5c:	f104 0108 	add.w	r1, r4, #8
 8007b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b62:	4798      	blx	r3
 8007b64:	4b11      	ldr	r3, [pc, #68]	@ (8007bac <_InitContext+0x74>)
 8007b66:	6663      	str	r3, [r4, #100]	@ 0x64
 8007b68:	686b      	ldr	r3, [r5, #4]
 8007b6a:	61e3      	str	r3, [r4, #28]
 8007b6c:	692b      	ldr	r3, [r5, #16]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	6163      	str	r3, [r4, #20]
 8007b72:	2301      	movs	r3, #1
 8007b74:	7623      	strb	r3, [r4, #24]
 8007b76:	76e3      	strb	r3, [r4, #27]
 8007b78:	f003 ffd6 	bl	800bb28 <WM_GetDesktopWindow>
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8007b82:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8007b86:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b88:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b8a:	64a0      	str	r0, [r4, #72]	@ 0x48
 8007b8c:	68e8      	ldr	r0, [r5, #12]
 8007b8e:	f000 fdeb 	bl	8008768 <LCD_SetBkColor>
 8007b92:	68a8      	ldr	r0, [r5, #8]
 8007b94:	f000 fdee 	bl	8008774 <LCD_SetColor>
 8007b98:	4b05      	ldr	r3, [pc, #20]	@ (8007bb0 <_InitContext+0x78>)
 8007b9a:	4a06      	ldr	r2, [pc, #24]	@ (8007bb4 <_InitContext+0x7c>)
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ba0:	2000001c 	.word	0x2000001c
 8007ba4:	20000220 	.word	0x20000220
 8007ba8:	2000a3e4 	.word	0x2000a3e4
 8007bac:	0800c554 	.word	0x0800c554
 8007bb0:	2000a3dc 	.word	0x2000a3dc
 8007bb4:	0800c56c 	.word	0x0800c56c

08007bb8 <_OnExit>:
 8007bb8:	b570      	push	{r4, r5, r6, lr}
 8007bba:	4d0a      	ldr	r5, [pc, #40]	@ (8007be4 <_OnExit+0x2c>)
 8007bbc:	4e0a      	ldr	r6, [pc, #40]	@ (8007be8 <_OnExit+0x30>)
 8007bbe:	2400      	movs	r4, #0
 8007bc0:	6833      	ldr	r3, [r6, #0]
 8007bc2:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8007bc4:	2274      	movs	r2, #116	@ 0x74
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	4628      	mov	r0, r5
 8007bca:	4798      	blx	r3
 8007bcc:	6833      	ldr	r3, [r6, #0]
 8007bce:	4807      	ldr	r0, [pc, #28]	@ (8007bec <_OnExit+0x34>)
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4798      	blx	r3
 8007bd6:	4b06      	ldr	r3, [pc, #24]	@ (8007bf0 <_OnExit+0x38>)
 8007bd8:	611d      	str	r5, [r3, #16]
 8007bda:	4b06      	ldr	r3, [pc, #24]	@ (8007bf4 <_OnExit+0x3c>)
 8007bdc:	701c      	strb	r4, [r3, #0]
 8007bde:	4b06      	ldr	r3, [pc, #24]	@ (8007bf8 <_OnExit+0x40>)
 8007be0:	601c      	str	r4, [r3, #0]
 8007be2:	bd70      	pop	{r4, r5, r6, pc}
 8007be4:	200001a0 	.word	0x200001a0
 8007be8:	20000034 	.word	0x20000034
 8007bec:	2000a3e4 	.word	0x2000a3e4
 8007bf0:	2000001c 	.word	0x2000001c
 8007bf4:	2000a3cc 	.word	0x2000a3cc
 8007bf8:	2000a3a8 	.word	0x2000a3a8

08007bfc <GUI_SetDefaultFont>:
 8007bfc:	4b01      	ldr	r3, [pc, #4]	@ (8007c04 <GUI_SetDefaultFont+0x8>)
 8007bfe:	6058      	str	r0, [r3, #4]
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	2000001c 	.word	0x2000001c

08007c08 <GUI_ClearRect>:
 8007c08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	2004      	movs	r0, #4
 8007c10:	4616      	mov	r6, r2
 8007c12:	461f      	mov	r7, r3
 8007c14:	460d      	mov	r5, r1
 8007c16:	f000 fa6b 	bl	80080f0 <LCD_SetDrawMode>
 8007c1a:	4b13      	ldr	r3, [pc, #76]	@ (8007c68 <GUI_ClearRect+0x60>)
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c22:	4680      	mov	r8, r0
 8007c24:	4414      	add	r4, r2
 8007c26:	441d      	add	r5, r3
 8007c28:	4416      	add	r6, r2
 8007c2a:	441f      	add	r7, r3
 8007c2c:	4668      	mov	r0, sp
 8007c2e:	f8ad 4000 	strh.w	r4, [sp]
 8007c32:	f8ad 6004 	strh.w	r6, [sp, #4]
 8007c36:	f8ad 5002 	strh.w	r5, [sp, #2]
 8007c3a:	f8ad 7006 	strh.w	r7, [sp, #6]
 8007c3e:	f003 fe1b 	bl	800b878 <WM__InitIVRSearch>
 8007c42:	b928      	cbnz	r0, 8007c50 <GUI_ClearRect+0x48>
 8007c44:	4640      	mov	r0, r8
 8007c46:	f000 fa53 	bl	80080f0 <LCD_SetDrawMode>
 8007c4a:	b002      	add	sp, #8
 8007c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c50:	463b      	mov	r3, r7
 8007c52:	4632      	mov	r2, r6
 8007c54:	4629      	mov	r1, r5
 8007c56:	4620      	mov	r0, r4
 8007c58:	f000 faa8 	bl	80081ac <LCD_FillRect>
 8007c5c:	f003 fd4a 	bl	800b6f4 <WM__GetNextIVR>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d1f5      	bne.n	8007c50 <GUI_ClearRect+0x48>
 8007c64:	e7ee      	b.n	8007c44 <GUI_ClearRect+0x3c>
 8007c66:	bf00      	nop
 8007c68:	2000001c 	.word	0x2000001c

08007c6c <GUI_Clear>:
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	2100      	movs	r1, #0
 8007c70:	4608      	mov	r0, r1
 8007c72:	f7ff ff15 	bl	8007aa0 <GUI_GotoXY>
 8007c76:	4904      	ldr	r1, [pc, #16]	@ (8007c88 <GUI_Clear+0x1c>)
 8007c78:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	4608      	mov	r0, r1
 8007c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c84:	f7ff bfc0 	b.w	8007c08 <GUI_ClearRect>
 8007c88:	ffffc001 	.word	0xffffc001

08007c8c <GUI__Config>:
 8007c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c8e:	4d1e      	ldr	r5, [pc, #120]	@ (8007d08 <GUI__Config+0x7c>)
 8007c90:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8007c92:	b085      	sub	sp, #20
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d135      	bne.n	8007d04 <GUI__Config+0x78>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8007c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8007d0c <GUI__Config+0x80>)
 8007c9e:	466a      	mov	r2, sp
 8007ca0:	f103 0708 	add.w	r7, r3, #8
 8007ca4:	466e      	mov	r6, sp
 8007ca6:	6818      	ldr	r0, [r3, #0]
 8007ca8:	6859      	ldr	r1, [r3, #4]
 8007caa:	4614      	mov	r4, r2
 8007cac:	c403      	stmia	r4!, {r0, r1}
 8007cae:	3308      	adds	r3, #8
 8007cb0:	42bb      	cmp	r3, r7
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	d1f7      	bne.n	8007ca6 <GUI__Config+0x1a>
 8007cb6:	6818      	ldr	r0, [r3, #0]
 8007cb8:	8899      	ldrh	r1, [r3, #4]
 8007cba:	799b      	ldrb	r3, [r3, #6]
 8007cbc:	71a3      	strb	r3, [r4, #6]
 8007cbe:	6020      	str	r0, [r4, #0]
 8007cc0:	80a1      	strh	r1, [r4, #4]
 8007cc2:	4c13      	ldr	r4, [pc, #76]	@ (8007d10 <GUI__Config+0x84>)
 8007cc4:	4633      	mov	r3, r6
 8007cc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cca:	f804 2b01 	strb.w	r2, [r4], #1
 8007cce:	781a      	ldrb	r2, [r3, #0]
 8007cd0:	2a00      	cmp	r2, #0
 8007cd2:	d1f8      	bne.n	8007cc6 <GUI__Config+0x3a>
 8007cd4:	f7ff fe9c 	bl	8007a10 <GUI_GetVersionString>
 8007cd8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007cdc:	4622      	mov	r2, r4
 8007cde:	f804 3b01 	strb.w	r3, [r4], #1
 8007ce2:	7803      	ldrb	r3, [r0, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1f7      	bne.n	8007cd8 <GUI__Config+0x4c>
 8007ce8:	7053      	strb	r3, [r2, #1]
 8007cea:	f7f9 f8cf 	bl	8000e8c <GUI_X_Config>
 8007cee:	f7f9 faa5 	bl	800123c <LCD_X_Config>
 8007cf2:	4b08      	ldr	r3, [pc, #32]	@ (8007d14 <GUI__Config+0x88>)
 8007cf4:	4808      	ldr	r0, [pc, #32]	@ (8007d18 <GUI__Config+0x8c>)
 8007cf6:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 8007cfa:	b005      	add	sp, #20
 8007cfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007d00:	f000 b888 	b.w	8007e14 <GUI__RegisterExit>
 8007d04:	b005      	add	sp, #20
 8007d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d08:	200001a0 	.word	0x200001a0
 8007d0c:	0800c55c 	.word	0x0800c55c
 8007d10:	20000220 	.word	0x20000220
 8007d14:	08007bb9 	.word	0x08007bb9
 8007d18:	20000234 	.word	0x20000234

08007d1c <GUI_Init>:
 8007d1c:	b590      	push	{r4, r7, lr}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4a33      	ldr	r2, [pc, #204]	@ (8007df0 <GUI_Init+0xd4>)
 8007d24:	4b32      	ldr	r3, [pc, #200]	@ (8007df0 <GUI_Init+0xd4>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f023 0301 	bic.w	r3, r3, #1
 8007d2c:	6013      	str	r3, [r2, #0]
 8007d2e:	4b31      	ldr	r3, [pc, #196]	@ (8007df4 <GUI_Init+0xd8>)
 8007d30:	2201      	movs	r2, #1
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	bf00      	nop
 8007d36:	4b2f      	ldr	r3, [pc, #188]	@ (8007df4 <GUI_Init+0xd8>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1fb      	bne.n	8007d36 <GUI_Init+0x1a>
 8007d3e:	4b2e      	ldr	r3, [pc, #184]	@ (8007df8 <GUI_Init+0xdc>)
 8007d40:	4a2e      	ldr	r2, [pc, #184]	@ (8007dfc <GUI_Init+0xe0>)
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	4b2c      	ldr	r3, [pc, #176]	@ (8007df8 <GUI_Init+0xdc>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a2d      	ldr	r2, [pc, #180]	@ (8007e00 <GUI_Init+0xe4>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d000      	beq.n	8007d50 <GUI_Init+0x34>
 8007d4e:	e7fe      	b.n	8007d4e <GUI_Init+0x32>
 8007d50:	f7ff ff9c 	bl	8007c8c <GUI__Config>
 8007d54:	4b2b      	ldr	r3, [pc, #172]	@ (8007e04 <GUI_Init+0xe8>)
 8007d56:	222e      	movs	r2, #46	@ 0x2e
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	f7f9 f8a7 	bl	8000eac <GUI_X_Init>
 8007d5e:	482a      	ldr	r0, [pc, #168]	@ (8007e08 <GUI_Init+0xec>)
 8007d60:	f7ff feea 	bl	8007b38 <_InitContext>
 8007d64:	f000 fc5a 	bl	800861c <emWin_LCD_Init>
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	f000 fe21 	bl	80089b0 <LCD_GetXSizeDisplay>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	bf0c      	ite	eq
 8007d74:	2301      	moveq	r3, #1
 8007d76:	2300      	movne	r3, #0
 8007d78:	b2dc      	uxtb	r4, r3
 8007d7a:	f000 fe1f 	bl	80089bc <LCD_GetYSizeDisplay>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	bf0c      	ite	eq
 8007d84:	2301      	moveq	r3, #1
 8007d86:	2300      	movne	r3, #0
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	4323      	orrs	r3, r4
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d009      	beq.n	8007da6 <GUI_Init+0x8a>
 8007d92:	f000 fe01 	bl	8008998 <LCD_GetXSizeMax>
 8007d96:	4604      	mov	r4, r0
 8007d98:	f000 fe01 	bl	800899e <LCD_GetYSizeMax>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4620      	mov	r0, r4
 8007da2:	f000 fdff 	bl	80089a4 <LCD_SetDisplaySize>
 8007da6:	2100      	movs	r1, #0
 8007da8:	2000      	movs	r0, #0
 8007daa:	f7ff fea9 	bl	8007b00 <GUI_SetOrg>
 8007dae:	f003 fe43 	bl	800ba38 <WM_Init>
 8007db2:	4b16      	ldr	r3, [pc, #88]	@ (8007e0c <GUI_Init+0xf0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d012      	beq.n	8007de0 <GUI_Init+0xc4>
 8007dba:	e00d      	b.n	8007dd8 <GUI_Init+0xbc>
 8007dbc:	4b13      	ldr	r3, [pc, #76]	@ (8007e0c <GUI_Init+0xf0>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <GUI_Init+0xb2>
 8007dc6:	4b11      	ldr	r3, [pc, #68]	@ (8007e0c <GUI_Init+0xf0>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4798      	blx	r3
 8007dce:	4b0f      	ldr	r3, [pc, #60]	@ (8007e0c <GUI_Init+0xf0>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8007e0c <GUI_Init+0xf0>)
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8007e0c <GUI_Init+0xf0>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1ed      	bne.n	8007dbc <GUI_Init+0xa0>
 8007de0:	4b0b      	ldr	r3, [pc, #44]	@ (8007e10 <GUI_Init+0xf4>)
 8007de2:	2201      	movs	r2, #1
 8007de4:	701a      	strb	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd90      	pop	{r4, r7, pc}
 8007df0:	e0002000 	.word	0xe0002000
 8007df4:	40023008 	.word	0x40023008
 8007df8:	40023000 	.word	0x40023000
 8007dfc:	f407a5c2 	.word	0xf407a5c2
 8007e00:	b5e8b5cd 	.word	0xb5e8b5cd
 8007e04:	2000a39c 	.word	0x2000a39c
 8007e08:	200001a0 	.word	0x200001a0
 8007e0c:	20000218 	.word	0x20000218
 8007e10:	2000a3c4 	.word	0x2000a3c4

08007e14 <GUI__RegisterExit>:
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	4b06      	ldr	r3, [pc, #24]	@ (8007e38 <GUI__RegisterExit+0x24>)
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	605a      	str	r2, [r3, #4]
 8007e24:	4a04      	ldr	r2, [pc, #16]	@ (8007e38 <GUI__RegisterExit+0x24>)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6013      	str	r3, [r2, #0]
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	20000214 	.word	0x20000214

08007e3c <GUI_DEVICE__GetpDriver>:
 8007e3c:	2801      	cmp	r0, #1
 8007e3e:	dc09      	bgt.n	8007e54 <GUI_DEVICE__GetpDriver+0x18>
 8007e40:	4b05      	ldr	r3, [pc, #20]	@ (8007e58 <GUI_DEVICE__GetpDriver+0x1c>)
 8007e42:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007e46:	b120      	cbz	r0, 8007e52 <GUI_DEVICE__GetpDriver+0x16>
 8007e48:	68c3      	ldr	r3, [r0, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	b11b      	cbz	r3, 8007e56 <GUI_DEVICE__GetpDriver+0x1a>
 8007e4e:	6800      	ldr	r0, [r0, #0]
 8007e50:	e7f9      	b.n	8007e46 <GUI_DEVICE__GetpDriver+0xa>
 8007e52:	4770      	bx	lr
 8007e54:	2000      	movs	r0, #0
 8007e56:	4770      	bx	lr
 8007e58:	2000a3e4 	.word	0x2000a3e4

08007e5c <GUI_DEVICE_Delete>:
 8007e5c:	f7fe bd68 	b.w	8006930 <GUI_ALLOC_FreeFixedBlock>

08007e60 <GUI_DEVICE_Create>:
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e64:	4606      	mov	r6, r0
 8007e66:	460d      	mov	r5, r1
 8007e68:	4617      	mov	r7, r2
 8007e6a:	461c      	mov	r4, r3
 8007e6c:	dd01      	ble.n	8007e72 <GUI_DEVICE_Create+0x12>
 8007e6e:	2000      	movs	r0, #0
 8007e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e72:	201c      	movs	r0, #28
 8007e74:	f7fe fe34 	bl	8006ae0 <GUI_ALLOC_GetFixedBlock>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	d0f8      	beq.n	8007e6e <GUI_DEVICE_Create+0xe>
 8007e7c:	b10d      	cbz	r5, 8007e82 <GUI_DEVICE_Create+0x22>
 8007e7e:	6105      	str	r5, [r0, #16]
 8007e80:	e009      	b.n	8007e96 <GUI_DEVICE_Create+0x36>
 8007e82:	4b09      	ldr	r3, [pc, #36]	@ (8007ea8 <GUI_DEVICE_Create+0x48>)
 8007e84:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8007e88:	b129      	cbz	r1, 8007e96 <GUI_DEVICE_Create+0x36>
 8007e8a:	680b      	ldr	r3, [r1, #0]
 8007e8c:	b10b      	cbz	r3, 8007e92 <GUI_DEVICE_Create+0x32>
 8007e8e:	4619      	mov	r1, r3
 8007e90:	e7fb      	b.n	8007e8a <GUI_DEVICE_Create+0x2a>
 8007e92:	690b      	ldr	r3, [r1, #16]
 8007e94:	6103      	str	r3, [r0, #16]
 8007e96:	2300      	movs	r3, #0
 8007e98:	6083      	str	r3, [r0, #8]
 8007e9a:	6184      	str	r4, [r0, #24]
 8007e9c:	8287      	strh	r7, [r0, #20]
 8007e9e:	60c6      	str	r6, [r0, #12]
 8007ea0:	6003      	str	r3, [r0, #0]
 8007ea2:	6043      	str	r3, [r0, #4]
 8007ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	2000a3e4 	.word	0x2000a3e4

08007eac <GUI_DEVICE_Unlink>:
 8007eac:	6981      	ldr	r1, [r0, #24]
 8007eae:	4a0a      	ldr	r2, [pc, #40]	@ (8007ed8 <GUI_DEVICE_Unlink+0x2c>)
 8007eb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007eb4:	4298      	cmp	r0, r3
 8007eb6:	6803      	ldr	r3, [r0, #0]
 8007eb8:	d104      	bne.n	8007ec4 <GUI_DEVICE_Unlink+0x18>
 8007eba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007ebe:	b10b      	cbz	r3, 8007ec4 <GUI_DEVICE_Unlink+0x18>
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	605a      	str	r2, [r3, #4]
 8007ec4:	6842      	ldr	r2, [r0, #4]
 8007ec6:	b102      	cbz	r2, 8007eca <GUI_DEVICE_Unlink+0x1e>
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	6803      	ldr	r3, [r0, #0]
 8007ecc:	b103      	cbz	r3, 8007ed0 <GUI_DEVICE_Unlink+0x24>
 8007ece:	605a      	str	r2, [r3, #4]
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	6003      	str	r3, [r0, #0]
 8007ed4:	6043      	str	r3, [r0, #4]
 8007ed6:	4770      	bx	lr
 8007ed8:	2000a3e4 	.word	0x2000a3e4

08007edc <GUI_DEVICE_Link>:
 8007edc:	b530      	push	{r4, r5, lr}
 8007ede:	b908      	cbnz	r0, 8007ee4 <GUI_DEVICE_Link+0x8>
 8007ee0:	2001      	movs	r0, #1
 8007ee2:	bd30      	pop	{r4, r5, pc}
 8007ee4:	6984      	ldr	r4, [r0, #24]
 8007ee6:	2c01      	cmp	r4, #1
 8007ee8:	dcfa      	bgt.n	8007ee0 <GUI_DEVICE_Link+0x4>
 8007eea:	4b1b      	ldr	r3, [pc, #108]	@ (8007f58 <GUI_DEVICE_Link+0x7c>)
 8007eec:	781a      	ldrb	r2, [r3, #0]
 8007eee:	4294      	cmp	r4, r2
 8007ef0:	bfa4      	itt	ge
 8007ef2:	1c62      	addge	r2, r4, #1
 8007ef4:	701a      	strbge	r2, [r3, #0]
 8007ef6:	4a19      	ldr	r2, [pc, #100]	@ (8007f5c <GUI_DEVICE_Link+0x80>)
 8007ef8:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8007efc:	4615      	mov	r5, r2
 8007efe:	b91b      	cbnz	r3, 8007f08 <GUI_DEVICE_Link+0x2c>
 8007f00:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8007f04:	4618      	mov	r0, r3
 8007f06:	bd30      	pop	{r4, r5, pc}
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	b10a      	cbz	r2, 8007f10 <GUI_DEVICE_Link+0x34>
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	e7fb      	b.n	8007f08 <GUI_DEVICE_Link+0x2c>
 8007f10:	68c2      	ldr	r2, [r0, #12]
 8007f12:	6812      	ldr	r2, [r2, #0]
 8007f14:	68d9      	ldr	r1, [r3, #12]
 8007f16:	6809      	ldr	r1, [r1, #0]
 8007f18:	4291      	cmp	r1, r2
 8007f1a:	dd03      	ble.n	8007f24 <GUI_DEVICE_Link+0x48>
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1f8      	bne.n	8007f14 <GUI_DEVICE_Link+0x38>
 8007f22:	e7dd      	b.n	8007ee0 <GUI_DEVICE_Link+0x4>
 8007f24:	d109      	bne.n	8007f3a <GUI_DEVICE_Link+0x5e>
 8007f26:	8a81      	ldrh	r1, [r0, #20]
 8007f28:	2901      	cmp	r1, #1
 8007f2a:	d106      	bne.n	8007f3a <GUI_DEVICE_Link+0x5e>
 8007f2c:	6819      	ldr	r1, [r3, #0]
 8007f2e:	b121      	cbz	r1, 8007f3a <GUI_DEVICE_Link+0x5e>
 8007f30:	460b      	mov	r3, r1
 8007f32:	68c9      	ldr	r1, [r1, #12]
 8007f34:	6809      	ldr	r1, [r1, #0]
 8007f36:	428a      	cmp	r2, r1
 8007f38:	ddf8      	ble.n	8007f2c <GUI_DEVICE_Link+0x50>
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	b112      	cbz	r2, 8007f44 <GUI_DEVICE_Link+0x68>
 8007f3e:	6010      	str	r0, [r2, #0]
 8007f40:	6042      	str	r2, [r0, #4]
 8007f42:	e001      	b.n	8007f48 <GUI_DEVICE_Link+0x6c>
 8007f44:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8007f48:	6058      	str	r0, [r3, #4]
 8007f4a:	4298      	cmp	r0, r3
 8007f4c:	bf08      	it	eq
 8007f4e:	2300      	moveq	r3, #0
 8007f50:	6003      	str	r3, [r0, #0]
 8007f52:	2000      	movs	r0, #0
 8007f54:	bd30      	pop	{r4, r5, pc}
 8007f56:	bf00      	nop
 8007f58:	2000a396 	.word	0x2000a396
 8007f5c:	2000a3e4 	.word	0x2000a3e4

08007f60 <GUI_DEVICE_CreateAndLink>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	461d      	mov	r5, r3
 8007f64:	f7ff ff7c 	bl	8007e60 <GUI_DEVICE_Create>
 8007f68:	4604      	mov	r4, r0
 8007f6a:	b148      	cbz	r0, 8007f80 <GUI_DEVICE_CreateAndLink+0x20>
 8007f6c:	f7ff ffb6 	bl	8007edc <GUI_DEVICE_Link>
 8007f70:	68e3      	ldr	r3, [r4, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	b923      	cbnz	r3, 8007f80 <GUI_DEVICE_CreateAndLink+0x20>
 8007f76:	4b03      	ldr	r3, [pc, #12]	@ (8007f84 <GUI_DEVICE_CreateAndLink+0x24>)
 8007f78:	3516      	adds	r5, #22
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 8007f80:	4620      	mov	r0, r4
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	2000002c 	.word	0x2000002c

08007f88 <GUI_StoreKey>:
 8007f88:	4b02      	ldr	r3, [pc, #8]	@ (8007f94 <GUI_StoreKey+0xc>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	b902      	cbnz	r2, 8007f90 <GUI_StoreKey+0x8>
 8007f8e:	6018      	str	r0, [r3, #0]
 8007f90:	f000 b80c 	b.w	8007fac <GUI_SignalEvent>
 8007f94:	2000023c 	.word	0x2000023c

08007f98 <_GetCharCode>:
 8007f98:	7800      	ldrb	r0, [r0, #0]
 8007f9a:	4770      	bx	lr

08007f9c <_GetCharSize>:
 8007f9c:	2001      	movs	r0, #1
 8007f9e:	4770      	bx	lr

08007fa0 <_CalcSizeOfChar>:
 8007fa0:	2001      	movs	r0, #1
 8007fa2:	4770      	bx	lr

08007fa4 <_Encode>:
 8007fa4:	7001      	strb	r1, [r0, #0]
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	4770      	bx	lr
	...

08007fac <GUI_SignalEvent>:
 8007fac:	4b02      	ldr	r3, [pc, #8]	@ (8007fb8 <GUI_SignalEvent+0xc>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	b103      	cbz	r3, 8007fb4 <GUI_SignalEvent+0x8>
 8007fb2:	4718      	bx	r3
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	2000029c 	.word	0x2000029c

08007fbc <GUI__IntersectRect>:
 8007fbc:	f9b1 3000 	ldrsh.w	r3, [r1]
 8007fc0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	bfb8      	it	lt
 8007fc8:	8003      	strhlt	r3, [r0, #0]
 8007fca:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8007fce:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	bfb8      	it	lt
 8007fd6:	8043      	strhlt	r3, [r0, #2]
 8007fd8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8007fdc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	bfc8      	it	gt
 8007fe4:	8083      	strhgt	r3, [r0, #4]
 8007fe6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8007fea:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	bfc8      	it	gt
 8007ff2:	80c3      	strhgt	r3, [r0, #6]
 8007ff4:	4770      	bx	lr

08007ff6 <GUI__IntersectRects>:
 8007ff6:	b570      	push	{r4, r5, r6, lr}
 8007ff8:	f9b1 3000 	ldrsh.w	r3, [r1]
 8007ffc:	f9b2 5000 	ldrsh.w	r5, [r2]
 8008000:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8008004:	429d      	cmp	r5, r3
 8008006:	bfb8      	it	lt
 8008008:	461d      	movlt	r5, r3
 800800a:	4606      	mov	r6, r0
 800800c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8008010:	8005      	strh	r5, [r0, #0]
 8008012:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8008016:	4283      	cmp	r3, r0
 8008018:	bfb8      	it	lt
 800801a:	4603      	movlt	r3, r0
 800801c:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8008020:	8073      	strh	r3, [r6, #2]
 8008022:	4284      	cmp	r4, r0
 8008024:	bfa8      	it	ge
 8008026:	4604      	movge	r4, r0
 8008028:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 800802c:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8008030:	80b4      	strh	r4, [r6, #4]
 8008032:	4282      	cmp	r2, r0
 8008034:	bfa8      	it	ge
 8008036:	4602      	movge	r2, r0
 8008038:	42a5      	cmp	r5, r4
 800803a:	80f2      	strh	r2, [r6, #6]
 800803c:	dc04      	bgt.n	8008048 <GUI__IntersectRects+0x52>
 800803e:	4293      	cmp	r3, r2
 8008040:	bfcc      	ite	gt
 8008042:	2000      	movgt	r0, #0
 8008044:	2001      	movle	r0, #1
 8008046:	bd70      	pop	{r4, r5, r6, pc}
 8008048:	2000      	movs	r0, #0
 800804a:	bd70      	pop	{r4, r5, r6, pc}

0800804c <GUI__memset16>:
 800804c:	b570      	push	{r4, r5, r6, lr}
 800804e:	0784      	lsls	r4, r0, #30
 8008050:	bf42      	ittt	mi
 8008052:	f102 32ff 	addmi.w	r2, r2, #4294967295
 8008056:	8001      	strhmi	r1, [r0, #0]
 8008058:	3002      	addmi	r0, #2
 800805a:	0854      	lsrs	r4, r2, #1
 800805c:	d024      	beq.n	80080a8 <GUI__memset16+0x5c>
 800805e:	2c03      	cmp	r4, #3
 8008060:	4623      	mov	r3, r4
 8008062:	eb01 4501 	add.w	r5, r1, r1, lsl #16
 8008066:	d802      	bhi.n	800806e <GUI__memset16+0x22>
 8008068:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800806c:	e017      	b.n	800809e <GUI__memset16+0x52>
 800806e:	f100 0310 	add.w	r3, r0, #16
 8008072:	4626      	mov	r6, r4
 8008074:	3e04      	subs	r6, #4
 8008076:	2e03      	cmp	r6, #3
 8008078:	f843 5c10 	str.w	r5, [r3, #-16]
 800807c:	f843 5c0c 	str.w	r5, [r3, #-12]
 8008080:	f843 5c08 	str.w	r5, [r3, #-8]
 8008084:	f843 5c04 	str.w	r5, [r3, #-4]
 8008088:	f103 0310 	add.w	r3, r3, #16
 800808c:	dcf2      	bgt.n	8008074 <GUI__memset16+0x28>
 800808e:	3c04      	subs	r4, #4
 8008090:	08a3      	lsrs	r3, r4, #2
 8008092:	1c5e      	adds	r6, r3, #1
 8008094:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8008098:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 800809c:	e7e4      	b.n	8008068 <GUI__memset16+0x1c>
 800809e:	4298      	cmp	r0, r3
 80080a0:	d002      	beq.n	80080a8 <GUI__memset16+0x5c>
 80080a2:	f840 5b04 	str.w	r5, [r0], #4
 80080a6:	e7fa      	b.n	800809e <GUI__memset16+0x52>
 80080a8:	07d3      	lsls	r3, r2, #31
 80080aa:	bf48      	it	mi
 80080ac:	8001      	strhmi	r1, [r0, #0]
 80080ae:	bd70      	pop	{r4, r5, r6, pc}

080080b0 <GUI__Read16>:
 80080b0:	6803      	ldr	r3, [r0, #0]
 80080b2:	4602      	mov	r2, r0
 80080b4:	f833 0b02 	ldrh.w	r0, [r3], #2
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	4770      	bx	lr

080080bc <GUI__Read32>:
 80080bc:	6803      	ldr	r3, [r0, #0]
 80080be:	4602      	mov	r2, r0
 80080c0:	f853 0b04 	ldr.w	r0, [r3], #4
 80080c4:	6013      	str	r3, [r2, #0]
 80080c6:	4770      	bx	lr

080080c8 <_SetDrawMode>:
 80080c8:	b570      	push	{r4, r5, r6, lr}
 80080ca:	4b08      	ldr	r3, [pc, #32]	@ (80080ec <_SetDrawMode+0x24>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	7c1a      	ldrb	r2, [r3, #16]
 80080d0:	ea82 0100 	eor.w	r1, r2, r0
 80080d4:	0749      	lsls	r1, r1, #29
 80080d6:	d505      	bpl.n	80080e4 <_SetDrawMode+0x1c>
 80080d8:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80080da:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80080dc:	6825      	ldr	r5, [r4, #0]
 80080de:	680e      	ldr	r6, [r1, #0]
 80080e0:	6026      	str	r6, [r4, #0]
 80080e2:	600d      	str	r5, [r1, #0]
 80080e4:	7418      	strb	r0, [r3, #16]
 80080e6:	4610      	mov	r0, r2
 80080e8:	bd70      	pop	{r4, r5, r6, pc}
 80080ea:	bf00      	nop
 80080ec:	2000002c 	.word	0x2000002c

080080f0 <LCD_SetDrawMode>:
 80080f0:	4b01      	ldr	r3, [pc, #4]	@ (80080f8 <LCD_SetDrawMode+0x8>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	4718      	bx	r3
 80080f8:	20000038 	.word	0x20000038

080080fc <LCD_DrawPixel>:
 80080fc:	4b15      	ldr	r3, [pc, #84]	@ (8008154 <LCD_DrawPixel+0x58>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	460a      	mov	r2, r1
 8008102:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008106:	4291      	cmp	r1, r2
 8008108:	b430      	push	{r4, r5}
 800810a:	4604      	mov	r4, r0
 800810c:	dc20      	bgt.n	8008150 <LCD_DrawPixel+0x54>
 800810e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8008112:	428a      	cmp	r2, r1
 8008114:	dc1c      	bgt.n	8008150 <LCD_DrawPixel+0x54>
 8008116:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800811a:	4281      	cmp	r1, r0
 800811c:	dc18      	bgt.n	8008150 <LCD_DrawPixel+0x54>
 800811e:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8008122:	4288      	cmp	r0, r1
 8008124:	dc14      	bgt.n	8008150 <LCD_DrawPixel+0x54>
 8008126:	7c19      	ldrb	r1, [r3, #16]
 8008128:	7c58      	ldrb	r0, [r3, #17]
 800812a:	f011 0f01 	tst.w	r1, #1
 800812e:	490a      	ldr	r1, [pc, #40]	@ (8008158 <LCD_DrawPixel+0x5c>)
 8008130:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8008134:	d004      	beq.n	8008140 <LCD_DrawPixel+0x44>
 8008136:	68c3      	ldr	r3, [r0, #12]
 8008138:	4621      	mov	r1, r4
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	bc30      	pop	{r4, r5}
 800813e:	4718      	bx	r3
 8008140:	68c1      	ldr	r1, [r0, #12]
 8008142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008144:	698d      	ldr	r5, [r1, #24]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4621      	mov	r1, r4
 800814a:	46ac      	mov	ip, r5
 800814c:	bc30      	pop	{r4, r5}
 800814e:	4760      	bx	ip
 8008150:	bc30      	pop	{r4, r5}
 8008152:	4770      	bx	lr
 8008154:	2000002c 	.word	0x2000002c
 8008158:	2000a3e4 	.word	0x2000a3e4

0800815c <LCD_DrawHLine>:
 800815c:	4b11      	ldr	r3, [pc, #68]	@ (80081a4 <LCD_DrawHLine+0x48>)
 800815e:	b430      	push	{r4, r5}
 8008160:	681c      	ldr	r4, [r3, #0]
 8008162:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8008166:	428b      	cmp	r3, r1
 8008168:	460d      	mov	r5, r1
 800816a:	dc19      	bgt.n	80081a0 <LCD_DrawHLine+0x44>
 800816c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8008170:	4299      	cmp	r1, r3
 8008172:	dc15      	bgt.n	80081a0 <LCD_DrawHLine+0x44>
 8008174:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8008178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800817c:	4281      	cmp	r1, r0
 800817e:	bfb8      	it	lt
 8008180:	4601      	movlt	r1, r0
 8008182:	4293      	cmp	r3, r2
 8008184:	bfa8      	it	ge
 8008186:	4613      	movge	r3, r2
 8008188:	4299      	cmp	r1, r3
 800818a:	dc09      	bgt.n	80081a0 <LCD_DrawHLine+0x44>
 800818c:	7c60      	ldrb	r0, [r4, #17]
 800818e:	4a06      	ldr	r2, [pc, #24]	@ (80081a8 <LCD_DrawHLine+0x4c>)
 8008190:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8008194:	68c2      	ldr	r2, [r0, #12]
 8008196:	6894      	ldr	r4, [r2, #8]
 8008198:	462a      	mov	r2, r5
 800819a:	46a4      	mov	ip, r4
 800819c:	bc30      	pop	{r4, r5}
 800819e:	4760      	bx	ip
 80081a0:	bc30      	pop	{r4, r5}
 80081a2:	4770      	bx	lr
 80081a4:	2000002c 	.word	0x2000002c
 80081a8:	2000a3e4 	.word	0x2000a3e4

080081ac <LCD_FillRect>:
 80081ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081ae:	4c13      	ldr	r4, [pc, #76]	@ (80081fc <LCD_FillRect+0x50>)
 80081b0:	6824      	ldr	r4, [r4, #0]
 80081b2:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 80081b6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80081ba:	4285      	cmp	r5, r0
 80081bc:	bfb8      	it	lt
 80081be:	4605      	movlt	r5, r0
 80081c0:	4296      	cmp	r6, r2
 80081c2:	bfa8      	it	ge
 80081c4:	4616      	movge	r6, r2
 80081c6:	42ae      	cmp	r6, r5
 80081c8:	db15      	blt.n	80081f6 <LCD_FillRect+0x4a>
 80081ca:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80081ce:	428a      	cmp	r2, r1
 80081d0:	bfb8      	it	lt
 80081d2:	460a      	movlt	r2, r1
 80081d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081d8:	428b      	cmp	r3, r1
 80081da:	bfa8      	it	ge
 80081dc:	460b      	movge	r3, r1
 80081de:	429a      	cmp	r2, r3
 80081e0:	dc09      	bgt.n	80081f6 <LCD_FillRect+0x4a>
 80081e2:	7c60      	ldrb	r0, [r4, #17]
 80081e4:	4906      	ldr	r1, [pc, #24]	@ (8008200 <LCD_FillRect+0x54>)
 80081e6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80081ea:	68c1      	ldr	r1, [r0, #12]
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	690c      	ldr	r4, [r1, #16]
 80081f0:	4633      	mov	r3, r6
 80081f2:	4629      	mov	r1, r5
 80081f4:	47a0      	blx	r4
 80081f6:	b002      	add	sp, #8
 80081f8:	bd70      	pop	{r4, r5, r6, pc}
 80081fa:	bf00      	nop
 80081fc:	2000002c 	.word	0x2000002c
 8008200:	2000a3e4 	.word	0x2000a3e4

08008204 <LCD__DrawBitmap_1bpp>:
 8008204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008208:	b08f      	sub	sp, #60	@ 0x3c
 800820a:	f8df e1cc 	ldr.w	lr, [pc, #460]	@ 80083d8 <LCD__DrawBitmap_1bpp+0x1d4>
 800820e:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8008210:	9502      	str	r5, [sp, #8]
 8008212:	f8de e000 	ldr.w	lr, [lr]
 8008216:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008218:	9508      	str	r5, [sp, #32]
 800821a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800821c:	9503      	str	r5, [sp, #12]
 800821e:	9007      	str	r0, [sp, #28]
 8008220:	460c      	mov	r4, r1
 8008222:	4617      	mov	r7, r2
 8008224:	9301      	str	r3, [sp, #4]
 8008226:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 800822a:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800822c:	f8dd b074 	ldr.w	fp, [sp, #116]	@ 0x74
 8008230:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
 8008232:	f1be 0f00 	cmp.w	lr, #0
 8008236:	d002      	beq.n	800823e <LCD__DrawBitmap_1bpp+0x3a>
 8008238:	f8de 4000 	ldr.w	r4, [lr]
 800823c:	e054      	b.n	80082e8 <LCD__DrawBitmap_1bpp+0xe4>
 800823e:	9b02      	ldr	r3, [sp, #8]
 8008240:	9a08      	ldr	r2, [sp, #32]
 8008242:	4313      	orrs	r3, r2
 8008244:	2b01      	cmp	r3, #1
 8008246:	d154      	bne.n	80082f2 <LCD__DrawBitmap_1bpp+0xee>
 8008248:	4b61      	ldr	r3, [pc, #388]	@ (80083d0 <LCD__DrawBitmap_1bpp+0x1cc>)
 800824a:	6818      	ldr	r0, [r3, #0]
 800824c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8008250:	1a53      	subs	r3, r2, r1
 8008252:	2b00      	cmp	r3, #0
 8008254:	dd0a      	ble.n	800826c <LCD__DrawBitmap_1bpp+0x68>
 8008256:	9901      	ldr	r1, [sp, #4]
 8008258:	ebc3 0e01 	rsb	lr, r3, r1
 800825c:	f1be 0f00 	cmp.w	lr, #0
 8008260:	f340 80b2 	ble.w	80083c8 <LCD__DrawBitmap_1bpp+0x1c4>
 8008264:	9903      	ldr	r1, [sp, #12]
 8008266:	fb01 6603 	mla	r6, r1, r3, r6
 800826a:	e002      	b.n	8008272 <LCD__DrawBitmap_1bpp+0x6e>
 800826c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008270:	460a      	mov	r2, r1
 8008272:	9b01      	ldr	r3, [sp, #4]
 8008274:	441c      	add	r4, r3
 8008276:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800827a:	3c01      	subs	r4, #1
 800827c:	1ae4      	subs	r4, r4, r3
 800827e:	2c00      	cmp	r4, #0
 8008280:	dd05      	ble.n	800828e <LCD__DrawBitmap_1bpp+0x8a>
 8008282:	ebc4 0e0e 	rsb	lr, r4, lr
 8008286:	f1be 0f00 	cmp.w	lr, #0
 800828a:	f340 809d 	ble.w	80083c8 <LCD__DrawBitmap_1bpp+0x1c4>
 800828e:	9b07      	ldr	r3, [sp, #28]
 8008290:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8008294:	443b      	add	r3, r7
 8008296:	3b01      	subs	r3, #1
 8008298:	1a5b      	subs	r3, r3, r1
 800829a:	2b00      	cmp	r3, #0
 800829c:	bfc8      	it	gt
 800829e:	1aff      	subgt	r7, r7, r3
 80082a0:	9b07      	ldr	r3, [sp, #28]
 80082a2:	1b59      	subs	r1, r3, r5
 80082a4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80082a8:	4299      	cmp	r1, r3
 80082aa:	da09      	bge.n	80082c0 <LCD__DrawBitmap_1bpp+0xbc>
 80082ac:	1a5b      	subs	r3, r3, r1
 80082ae:	441d      	add	r5, r3
 80082b0:	1aff      	subs	r7, r7, r3
 80082b2:	f023 0307 	bic.w	r3, r3, #7
 80082b6:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 80082ba:	4419      	add	r1, r3
 80082bc:	f005 0507 	and.w	r5, r5, #7
 80082c0:	2f00      	cmp	r7, #0
 80082c2:	f340 8081 	ble.w	80083c8 <LCD__DrawBitmap_1bpp+0x1c4>
 80082c6:	7c40      	ldrb	r0, [r0, #17]
 80082c8:	4b42      	ldr	r3, [pc, #264]	@ (80083d4 <LCD__DrawBitmap_1bpp+0x1d0>)
 80082ca:	9c03      	ldr	r4, [sp, #12]
 80082cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80082d0:	68c3      	ldr	r3, [r0, #12]
 80082d2:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
 80082d6:	951c      	str	r5, [sp, #112]	@ 0x70
 80082d8:	961b      	str	r6, [sp, #108]	@ 0x6c
 80082da:	941a      	str	r4, [sp, #104]	@ 0x68
 80082dc:	f8cd a064 	str.w	sl, [sp, #100]	@ 0x64
 80082e0:	f8cd e060 	str.w	lr, [sp, #96]	@ 0x60
 80082e4:	685c      	ldr	r4, [r3, #4]
 80082e6:	463b      	mov	r3, r7
 80082e8:	46a4      	mov	ip, r4
 80082ea:	b00f      	add	sp, #60	@ 0x3c
 80082ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f0:	4760      	bx	ip
 80082f2:	f1ca 0308 	rsb	r3, sl, #8
 80082f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082f8:	9b02      	ldr	r3, [sp, #8]
 80082fa:	f8df 90d4 	ldr.w	r9, [pc, #212]	@ 80083d0 <LCD__DrawBitmap_1bpp+0x1cc>
 80082fe:	f8cd e014 	str.w	lr, [sp, #20]
 8008302:	3b01      	subs	r3, #1
 8008304:	4675      	mov	r5, lr
 8008306:	930d      	str	r3, [sp, #52]	@ 0x34
 8008308:	9b05      	ldr	r3, [sp, #20]
 800830a:	9a01      	ldr	r2, [sp, #4]
 800830c:	4293      	cmp	r3, r2
 800830e:	da5b      	bge.n	80083c8 <LCD__DrawBitmap_1bpp+0x1c4>
 8008310:	9b08      	ldr	r3, [sp, #32]
 8008312:	18e3      	adds	r3, r4, r3
 8008314:	9309      	str	r3, [sp, #36]	@ 0x24
 8008316:	3b01      	subs	r3, #1
 8008318:	930a      	str	r3, [sp, #40]	@ 0x28
 800831a:	f8d9 3000 	ldr.w	r3, [r9]
 800831e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008320:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8008324:	428a      	cmp	r2, r1
 8008326:	dc48      	bgt.n	80083ba <LCD__DrawBitmap_1bpp+0x1b6>
 8008328:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800832c:	429c      	cmp	r4, r3
 800832e:	dc44      	bgt.n	80083ba <LCD__DrawBitmap_1bpp+0x1b6>
 8008330:	9b07      	ldr	r3, [sp, #28]
 8008332:	9606      	str	r6, [sp, #24]
 8008334:	f04f 0800 	mov.w	r8, #0
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	f8cd 8010 	str.w	r8, [sp, #16]
 800833e:	9b04      	ldr	r3, [sp, #16]
 8008340:	42bb      	cmp	r3, r7
 8008342:	da3a      	bge.n	80083ba <LCD__DrawBitmap_1bpp+0x1b6>
 8008344:	f1b8 0f00 	cmp.w	r8, #0
 8008348:	d105      	bne.n	8008356 <LCD__DrawBitmap_1bpp+0x152>
 800834a:	9b06      	ldr	r3, [sp, #24]
 800834c:	781d      	ldrb	r5, [r3, #0]
 800834e:	3301      	adds	r3, #1
 8008350:	9306      	str	r3, [sp, #24]
 8008352:	f04f 0808 	mov.w	r8, #8
 8008356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008358:	fa45 f303 	asr.w	r3, r5, r3
 800835c:	f013 01ff 	ands.w	r1, r3, #255	@ 0xff
 8008360:	fa05 f50a 	lsl.w	r5, r5, sl
 8008364:	b2ed      	uxtb	r5, r5
 8008366:	ebca 0808 	rsb	r8, sl, r8
 800836a:	d104      	bne.n	8008376 <LCD__DrawBitmap_1bpp+0x172>
 800836c:	f8d9 2000 	ldr.w	r2, [r9]
 8008370:	7c12      	ldrb	r2, [r2, #16]
 8008372:	0792      	lsls	r2, r2, #30
 8008374:	d419      	bmi.n	80083aa <LCD__DrawBitmap_1bpp+0x1a6>
 8008376:	f8d9 2000 	ldr.w	r2, [r9]
 800837a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800837c:	6810      	ldr	r0, [r2, #0]
 800837e:	900c      	str	r0, [sp, #48]	@ 0x30
 8008380:	f1bb 0f00 	cmp.w	fp, #0
 8008384:	d002      	beq.n	800838c <LCD__DrawBitmap_1bpp+0x188>
 8008386:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 800838a:	e000      	b.n	800838e <LCD__DrawBitmap_1bpp+0x18a>
 800838c:	b2db      	uxtb	r3, r3
 800838e:	6013      	str	r3, [r2, #0]
 8008390:	9900      	ldr	r1, [sp, #0]
 8008392:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008396:	9800      	ldr	r0, [sp, #0]
 8008398:	440a      	add	r2, r1
 800839a:	4621      	mov	r1, r4
 800839c:	f7ff ff06 	bl	80081ac <LCD_FillRect>
 80083a0:	f8d9 3000 	ldr.w	r3, [r9]
 80083a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80083a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	9b04      	ldr	r3, [sp, #16]
 80083ac:	9a02      	ldr	r2, [sp, #8]
 80083ae:	3301      	adds	r3, #1
 80083b0:	9304      	str	r3, [sp, #16]
 80083b2:	9b00      	ldr	r3, [sp, #0]
 80083b4:	4413      	add	r3, r2
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	e7c1      	b.n	800833e <LCD__DrawBitmap_1bpp+0x13a>
 80083ba:	9b05      	ldr	r3, [sp, #20]
 80083bc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80083be:	3301      	adds	r3, #1
 80083c0:	9305      	str	r3, [sp, #20]
 80083c2:	9b03      	ldr	r3, [sp, #12]
 80083c4:	441e      	add	r6, r3
 80083c6:	e79f      	b.n	8008308 <LCD__DrawBitmap_1bpp+0x104>
 80083c8:	b00f      	add	sp, #60	@ 0x3c
 80083ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ce:	bf00      	nop
 80083d0:	2000002c 	.word	0x2000002c
 80083d4:	2000a3e4 	.word	0x2000a3e4
 80083d8:	2000a3a0 	.word	0x2000a3a0

080083dc <LCD_DrawBitmap>:
 80083dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e0:	b08f      	sub	sp, #60	@ 0x3c
 80083e2:	f8df e218 	ldr.w	lr, [pc, #536]	@ 80085fc <LCD_DrawBitmap+0x220>
 80083e6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80083e8:	9402      	str	r4, [sp, #8]
 80083ea:	f8de e000 	ldr.w	lr, [lr]
 80083ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80083f0:	9408      	str	r4, [sp, #32]
 80083f2:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 80083f4:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 80083f6:	9403      	str	r4, [sp, #12]
 80083f8:	4605      	mov	r5, r0
 80083fa:	9100      	str	r1, [sp, #0]
 80083fc:	4690      	mov	r8, r2
 80083fe:	9301      	str	r3, [sp, #4]
 8008400:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8008402:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8008404:	9604      	str	r6, [sp, #16]
 8008406:	f1be 0f00 	cmp.w	lr, #0
 800840a:	d002      	beq.n	8008412 <LCD_DrawBitmap+0x36>
 800840c:	f8de 4000 	ldr.w	r4, [lr]
 8008410:	e07a      	b.n	8008508 <LCD_DrawBitmap+0x12c>
 8008412:	9b02      	ldr	r3, [sp, #8]
 8008414:	9a08      	ldr	r2, [sp, #32]
 8008416:	4313      	orrs	r3, r2
 8008418:	2b01      	cmp	r3, #1
 800841a:	d17a      	bne.n	8008512 <LCD_DrawBitmap+0x136>
 800841c:	4b75      	ldr	r3, [pc, #468]	@ (80085f4 <LCD_DrawBitmap+0x218>)
 800841e:	9901      	ldr	r1, [sp, #4]
 8008420:	6818      	ldr	r0, [r3, #0]
 8008422:	9b00      	ldr	r3, [sp, #0]
 8008424:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	dd07      	ble.n	800843e <LCD_DrawBitmap+0x62>
 800842e:	1ac9      	subs	r1, r1, r3
 8008430:	2900      	cmp	r1, #0
 8008432:	f340 80db 	ble.w	80085ec <LCD_DrawBitmap+0x210>
 8008436:	9e03      	ldr	r6, [sp, #12]
 8008438:	fb06 4403 	mla	r4, r6, r3, r4
 800843c:	e000      	b.n	8008440 <LCD_DrawBitmap+0x64>
 800843e:	9a00      	ldr	r2, [sp, #0]
 8008440:	e89d 0048 	ldmia.w	sp, {r3, r6}
 8008444:	441e      	add	r6, r3
 8008446:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800844a:	3e01      	subs	r6, #1
 800844c:	1af6      	subs	r6, r6, r3
 800844e:	2e00      	cmp	r6, #0
 8008450:	dd03      	ble.n	800845a <LCD_DrawBitmap+0x7e>
 8008452:	1b89      	subs	r1, r1, r6
 8008454:	2900      	cmp	r1, #0
 8008456:	f340 80c9 	ble.w	80085ec <LCD_DrawBitmap+0x210>
 800845a:	eb05 0308 	add.w	r3, r5, r8
 800845e:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 8008462:	3b01      	subs	r3, #1
 8008464:	1b9b      	subs	r3, r3, r6
 8008466:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800846a:	2b00      	cmp	r3, #0
 800846c:	bfc8      	it	gt
 800846e:	ebc3 0808 	rsbgt	r8, r3, r8
 8008472:	42b5      	cmp	r5, r6
 8008474:	da31      	bge.n	80084da <LCD_DrawBitmap+0xfe>
 8008476:	1b73      	subs	r3, r6, r5
 8008478:	2f08      	cmp	r7, #8
 800847a:	ebc3 0808 	rsb	r8, r3, r8
 800847e:	d027      	beq.n	80084d0 <LCD_DrawBitmap+0xf4>
 8008480:	dc0d      	bgt.n	800849e <LCD_DrawBitmap+0xc2>
 8008482:	2f02      	cmp	r7, #2
 8008484:	d014      	beq.n	80084b0 <LCD_DrawBitmap+0xd4>
 8008486:	2f04      	cmp	r7, #4
 8008488:	d01a      	beq.n	80084c0 <LCD_DrawBitmap+0xe4>
 800848a:	2f01      	cmp	r7, #1
 800848c:	d126      	bne.n	80084dc <LCD_DrawBitmap+0x100>
 800848e:	f023 0607 	bic.w	r6, r3, #7
 8008492:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8008496:	4435      	add	r5, r6
 8008498:	f003 0307 	and.w	r3, r3, #7
 800849c:	e01e      	b.n	80084dc <LCD_DrawBitmap+0x100>
 800849e:	2f18      	cmp	r7, #24
 80084a0:	d018      	beq.n	80084d4 <LCD_DrawBitmap+0xf8>
 80084a2:	2f20      	cmp	r7, #32
 80084a4:	d016      	beq.n	80084d4 <LCD_DrawBitmap+0xf8>
 80084a6:	2f10      	cmp	r7, #16
 80084a8:	d118      	bne.n	80084dc <LCD_DrawBitmap+0x100>
 80084aa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80084ae:	e013      	b.n	80084d8 <LCD_DrawBitmap+0xfc>
 80084b0:	f023 0603 	bic.w	r6, r3, #3
 80084b4:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 80084b8:	4435      	add	r5, r6
 80084ba:	f003 0303 	and.w	r3, r3, #3
 80084be:	e00d      	b.n	80084dc <LCD_DrawBitmap+0x100>
 80084c0:	f023 0601 	bic.w	r6, r3, #1
 80084c4:	eb04 0463 	add.w	r4, r4, r3, asr #1
 80084c8:	4435      	add	r5, r6
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	e005      	b.n	80084dc <LCD_DrawBitmap+0x100>
 80084d0:	441c      	add	r4, r3
 80084d2:	e001      	b.n	80084d8 <LCD_DrawBitmap+0xfc>
 80084d4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80084d8:	4635      	mov	r5, r6
 80084da:	2300      	movs	r3, #0
 80084dc:	f1b8 0f00 	cmp.w	r8, #0
 80084e0:	f340 8084 	ble.w	80085ec <LCD_DrawBitmap+0x210>
 80084e4:	7c46      	ldrb	r6, [r0, #17]
 80084e6:	4844      	ldr	r0, [pc, #272]	@ (80085f8 <LCD_DrawBitmap+0x21c>)
 80084e8:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80084ec:	9e04      	ldr	r6, [sp, #16]
 80084ee:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80084f2:	931c      	str	r3, [sp, #112]	@ 0x70
 80084f4:	9b03      	ldr	r3, [sp, #12]
 80084f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80084f8:	9118      	str	r1, [sp, #96]	@ 0x60
 80084fa:	961d      	str	r6, [sp, #116]	@ 0x74
 80084fc:	941b      	str	r4, [sp, #108]	@ 0x6c
 80084fe:	9719      	str	r7, [sp, #100]	@ 0x64
 8008500:	f8de 4004 	ldr.w	r4, [lr, #4]
 8008504:	4643      	mov	r3, r8
 8008506:	4629      	mov	r1, r5
 8008508:	46a4      	mov	ip, r4
 800850a:	b00f      	add	sp, #60	@ 0x3c
 800850c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008510:	4760      	bx	ip
 8008512:	f1c7 0308 	rsb	r3, r7, #8
 8008516:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008518:	9b02      	ldr	r3, [sp, #8]
 800851a:	f8df a0d8 	ldr.w	sl, [pc, #216]	@ 80085f4 <LCD_DrawBitmap+0x218>
 800851e:	f8cd e018 	str.w	lr, [sp, #24]
 8008522:	3b01      	subs	r3, #1
 8008524:	46f3      	mov	fp, lr
 8008526:	930d      	str	r3, [sp, #52]	@ 0x34
 8008528:	9b06      	ldr	r3, [sp, #24]
 800852a:	9a01      	ldr	r2, [sp, #4]
 800852c:	4293      	cmp	r3, r2
 800852e:	da5d      	bge.n	80085ec <LCD_DrawBitmap+0x210>
 8008530:	9a00      	ldr	r2, [sp, #0]
 8008532:	9b08      	ldr	r3, [sp, #32]
 8008534:	4413      	add	r3, r2
 8008536:	9309      	str	r3, [sp, #36]	@ 0x24
 8008538:	3b01      	subs	r3, #1
 800853a:	930a      	str	r3, [sp, #40]	@ 0x28
 800853c:	f8da 3000 	ldr.w	r3, [sl]
 8008540:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008542:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8008546:	428a      	cmp	r2, r1
 8008548:	dc48      	bgt.n	80085dc <LCD_DrawBitmap+0x200>
 800854a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800854e:	9a00      	ldr	r2, [sp, #0]
 8008550:	429a      	cmp	r2, r3
 8008552:	dc43      	bgt.n	80085dc <LCD_DrawBitmap+0x200>
 8008554:	f04f 0900 	mov.w	r9, #0
 8008558:	9407      	str	r4, [sp, #28]
 800855a:	462e      	mov	r6, r5
 800855c:	f8cd 9014 	str.w	r9, [sp, #20]
 8008560:	9b05      	ldr	r3, [sp, #20]
 8008562:	4543      	cmp	r3, r8
 8008564:	da3a      	bge.n	80085dc <LCD_DrawBitmap+0x200>
 8008566:	f1b9 0f00 	cmp.w	r9, #0
 800856a:	d106      	bne.n	800857a <LCD_DrawBitmap+0x19e>
 800856c:	9b07      	ldr	r3, [sp, #28]
 800856e:	f893 b000 	ldrb.w	fp, [r3]
 8008572:	3301      	adds	r3, #1
 8008574:	9307      	str	r3, [sp, #28]
 8008576:	f04f 0908 	mov.w	r9, #8
 800857a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800857c:	fa4b f303 	asr.w	r3, fp, r3
 8008580:	fa0b f207 	lsl.w	r2, fp, r7
 8008584:	f013 01ff 	ands.w	r1, r3, #255	@ 0xff
 8008588:	fa5f fb82 	uxtb.w	fp, r2
 800858c:	ebc7 0909 	rsb	r9, r7, r9
 8008590:	d104      	bne.n	800859c <LCD_DrawBitmap+0x1c0>
 8008592:	f8da 2000 	ldr.w	r2, [sl]
 8008596:	7c12      	ldrb	r2, [r2, #16]
 8008598:	0792      	lsls	r2, r2, #30
 800859a:	d417      	bmi.n	80085cc <LCD_DrawBitmap+0x1f0>
 800859c:	f8da 2000 	ldr.w	r2, [sl]
 80085a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80085a2:	6810      	ldr	r0, [r2, #0]
 80085a4:	900c      	str	r0, [sp, #48]	@ 0x30
 80085a6:	9804      	ldr	r0, [sp, #16]
 80085a8:	b110      	cbz	r0, 80085b0 <LCD_DrawBitmap+0x1d4>
 80085aa:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80085ae:	e000      	b.n	80085b2 <LCD_DrawBitmap+0x1d6>
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	6013      	str	r3, [r2, #0]
 80085b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80085b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085b8:	9900      	ldr	r1, [sp, #0]
 80085ba:	4432      	add	r2, r6
 80085bc:	4630      	mov	r0, r6
 80085be:	f7ff fdf5 	bl	80081ac <LCD_FillRect>
 80085c2:	f8da 3000 	ldr.w	r3, [sl]
 80085c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80085c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	9b05      	ldr	r3, [sp, #20]
 80085ce:	9a02      	ldr	r2, [sp, #8]
 80085d0:	3301      	adds	r3, #1
 80085d2:	9305      	str	r3, [sp, #20]
 80085d4:	4633      	mov	r3, r6
 80085d6:	4413      	add	r3, r2
 80085d8:	461e      	mov	r6, r3
 80085da:	e7c1      	b.n	8008560 <LCD_DrawBitmap+0x184>
 80085dc:	9b06      	ldr	r3, [sp, #24]
 80085de:	3301      	adds	r3, #1
 80085e0:	9306      	str	r3, [sp, #24]
 80085e2:	9b03      	ldr	r3, [sp, #12]
 80085e4:	441c      	add	r4, r3
 80085e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	e79d      	b.n	8008528 <LCD_DrawBitmap+0x14c>
 80085ec:	b00f      	add	sp, #60	@ 0x3c
 80085ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f2:	bf00      	nop
 80085f4:	2000002c 	.word	0x2000002c
 80085f8:	2000a3e4 	.word	0x2000a3e4
 80085fc:	2000a3a0 	.word	0x2000a3a0

08008600 <LCD_SetClipRectMax>:
 8008600:	4b04      	ldr	r3, [pc, #16]	@ (8008614 <LCD_SetClipRectMax+0x14>)
 8008602:	6819      	ldr	r1, [r3, #0]
 8008604:	4b04      	ldr	r3, [pc, #16]	@ (8008618 <LCD_SetClipRectMax+0x18>)
 8008606:	7c4a      	ldrb	r2, [r1, #17]
 8008608:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800860c:	68c3      	ldr	r3, [r0, #12]
 800860e:	3108      	adds	r1, #8
 8008610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008612:	4718      	bx	r3
 8008614:	2000002c 	.word	0x2000002c
 8008618:	2000a3e4 	.word	0x2000a3e4

0800861c <emWin_LCD_Init>:
 800861c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800861e:	f7ff ffef 	bl	8008600 <LCD_SetClipRectMax>
 8008622:	f000 f8bb 	bl	800879c <LCD_InitColors>
 8008626:	4604      	mov	r4, r0
 8008628:	2800      	cmp	r0, #0
 800862a:	d144      	bne.n	80086b6 <emWin_LCD_Init+0x9a>
 800862c:	4605      	mov	r5, r0
 800862e:	4628      	mov	r0, r5
 8008630:	f7ff fc04 	bl	8007e3c <GUI_DEVICE__GetpDriver>
 8008634:	9001      	str	r0, [sp, #4]
 8008636:	b150      	cbz	r0, 800864e <emWin_LCD_Init+0x32>
 8008638:	68c3      	ldr	r3, [r0, #12]
 800863a:	210c      	movs	r1, #12
 800863c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800863e:	a801      	add	r0, sp, #4
 8008640:	4798      	blx	r3
 8008642:	4603      	mov	r3, r0
 8008644:	2800      	cmp	r0, #0
 8008646:	d034      	beq.n	80086b2 <emWin_LCD_Init+0x96>
 8008648:	9801      	ldr	r0, [sp, #4]
 800864a:	4798      	blx	r3
 800864c:	4304      	orrs	r4, r0
 800864e:	3501      	adds	r5, #1
 8008650:	2d02      	cmp	r5, #2
 8008652:	d1ec      	bne.n	800862e <emWin_LCD_Init+0x12>
 8008654:	bb7c      	cbnz	r4, 80086b6 <emWin_LCD_Init+0x9a>
 8008656:	f000 f8f7 	bl	8008848 <LCD_InitLUT>
 800865a:	4b18      	ldr	r3, [pc, #96]	@ (80086bc <emWin_LCD_Init+0xa0>)
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8008662:	429a      	cmp	r2, r3
 8008664:	d101      	bne.n	800866a <emWin_LCD_Init+0x4e>
 8008666:	2000      	movs	r0, #0
 8008668:	e026      	b.n	80086b8 <emWin_LCD_Init+0x9c>
 800866a:	2401      	movs	r4, #1
 800866c:	4620      	mov	r0, r4
 800866e:	f7ff fbe5 	bl	8007e3c <GUI_DEVICE__GetpDriver>
 8008672:	9001      	str	r0, [sp, #4]
 8008674:	b1c8      	cbz	r0, 80086aa <emWin_LCD_Init+0x8e>
 8008676:	4620      	mov	r0, r4
 8008678:	f003 fc54 	bl	800bf24 <GUI_SelectLayer>
 800867c:	2004      	movs	r0, #4
 800867e:	f7ff fd37 	bl	80080f0 <LCD_SetDrawMode>
 8008682:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8008686:	2100      	movs	r1, #0
 8008688:	461a      	mov	r2, r3
 800868a:	4608      	mov	r0, r1
 800868c:	f7ff fd8e 	bl	80081ac <LCD_FillRect>
 8008690:	2000      	movs	r0, #0
 8008692:	f7ff fd2d 	bl	80080f0 <LCD_SetDrawMode>
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	210e      	movs	r1, #14
 800869c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869e:	a801      	add	r0, sp, #4
 80086a0:	4798      	blx	r3
 80086a2:	4603      	mov	r3, r0
 80086a4:	b108      	cbz	r0, 80086aa <emWin_LCD_Init+0x8e>
 80086a6:	9801      	ldr	r0, [sp, #4]
 80086a8:	4798      	blx	r3
 80086aa:	f114 34ff 	adds.w	r4, r4, #4294967295
 80086ae:	d2dd      	bcs.n	800866c <emWin_LCD_Init+0x50>
 80086b0:	e7d9      	b.n	8008666 <emWin_LCD_Init+0x4a>
 80086b2:	2001      	movs	r0, #1
 80086b4:	e000      	b.n	80086b8 <emWin_LCD_Init+0x9c>
 80086b6:	4620      	mov	r0, r4
 80086b8:	b003      	add	sp, #12
 80086ba:	bd30      	pop	{r4, r5, pc}
 80086bc:	20000028 	.word	0x20000028

080086c0 <LCD_Color2Index>:
 80086c0:	4b04      	ldr	r3, [pc, #16]	@ (80086d4 <LCD_Color2Index+0x14>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	7c5a      	ldrb	r2, [r3, #17]
 80086c6:	4b04      	ldr	r3, [pc, #16]	@ (80086d8 <LCD_Color2Index+0x18>)
 80086c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4718      	bx	r3
 80086d2:	bf00      	nop
 80086d4:	2000002c 	.word	0x2000002c
 80086d8:	2000a3e4 	.word	0x2000a3e4

080086dc <LCD_Index2Color>:
 80086dc:	4b04      	ldr	r3, [pc, #16]	@ (80086f0 <LCD_Index2Color+0x14>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	7c5a      	ldrb	r2, [r3, #17]
 80086e2:	4b04      	ldr	r3, [pc, #16]	@ (80086f4 <LCD_Index2Color+0x18>)
 80086e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	4718      	bx	r3
 80086ee:	bf00      	nop
 80086f0:	2000002c 	.word	0x2000002c
 80086f4:	2000a3e4 	.word	0x2000a3e4

080086f8 <LCD_SetColorIndex>:
 80086f8:	4b04      	ldr	r3, [pc, #16]	@ (800870c <LCD_SetColorIndex+0x14>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	7c1a      	ldrb	r2, [r3, #16]
 80086fe:	0752      	lsls	r2, r2, #29
 8008700:	bf4c      	ite	mi
 8008702:	6b9b      	ldrmi	r3, [r3, #56]	@ 0x38
 8008704:	6bdb      	ldrpl	r3, [r3, #60]	@ 0x3c
 8008706:	6018      	str	r0, [r3, #0]
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	2000002c 	.word	0x2000002c

08008710 <_SetColor>:
 8008710:	b508      	push	{r3, lr}
 8008712:	4b06      	ldr	r3, [pc, #24]	@ (800872c <_SetColor+0x1c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008718:	4281      	cmp	r1, r0
 800871a:	d006      	beq.n	800872a <_SetColor+0x1a>
 800871c:	6318      	str	r0, [r3, #48]	@ 0x30
 800871e:	f7ff ffcf 	bl	80086c0 <LCD_Color2Index>
 8008722:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008726:	f7ff bfe7 	b.w	80086f8 <LCD_SetColorIndex>
 800872a:	bd08      	pop	{r3, pc}
 800872c:	2000002c 	.word	0x2000002c

08008730 <LCD_SetBkColorIndex>:
 8008730:	4b04      	ldr	r3, [pc, #16]	@ (8008744 <LCD_SetBkColorIndex+0x14>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	7c1a      	ldrb	r2, [r3, #16]
 8008736:	0752      	lsls	r2, r2, #29
 8008738:	bf4c      	ite	mi
 800873a:	6bdb      	ldrmi	r3, [r3, #60]	@ 0x3c
 800873c:	6b9b      	ldrpl	r3, [r3, #56]	@ 0x38
 800873e:	6018      	str	r0, [r3, #0]
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	2000002c 	.word	0x2000002c

08008748 <_SetBkColor>:
 8008748:	b508      	push	{r3, lr}
 800874a:	4b06      	ldr	r3, [pc, #24]	@ (8008764 <_SetBkColor+0x1c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008750:	4281      	cmp	r1, r0
 8008752:	d006      	beq.n	8008762 <_SetBkColor+0x1a>
 8008754:	6358      	str	r0, [r3, #52]	@ 0x34
 8008756:	f7ff ffb3 	bl	80086c0 <LCD_Color2Index>
 800875a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800875e:	f7ff bfe7 	b.w	8008730 <LCD_SetBkColorIndex>
 8008762:	bd08      	pop	{r3, pc}
 8008764:	2000002c 	.word	0x2000002c

08008768 <LCD_SetBkColor>:
 8008768:	4b01      	ldr	r3, [pc, #4]	@ (8008770 <LCD_SetBkColor+0x8>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	4718      	bx	r3
 8008770:	20000038 	.word	0x20000038

08008774 <LCD_SetColor>:
 8008774:	4b01      	ldr	r3, [pc, #4]	@ (800877c <LCD_SetColor+0x8>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4718      	bx	r3
 800877c:	20000038 	.word	0x20000038

08008780 <_OnExit>:
 8008780:	b510      	push	{r4, lr}
 8008782:	4c04      	ldr	r4, [pc, #16]	@ (8008794 <_OnExit+0x14>)
 8008784:	6820      	ldr	r0, [r4, #0]
 8008786:	f7fe f8d3 	bl	8006930 <GUI_ALLOC_FreeFixedBlock>
 800878a:	4a03      	ldr	r2, [pc, #12]	@ (8008798 <_OnExit+0x18>)
 800878c:	2300      	movs	r3, #0
 800878e:	6023      	str	r3, [r4, #0]
 8008790:	6013      	str	r3, [r2, #0]
 8008792:	bd10      	pop	{r4, pc}
 8008794:	2000a3f4 	.word	0x2000a3f4
 8008798:	200002a4 	.word	0x200002a4

0800879c <LCD_InitColors>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d0a      	ldr	r5, [pc, #40]	@ (80087c8 <LCD_InitColors+0x2c>)
 80087a0:	682c      	ldr	r4, [r5, #0]
 80087a2:	b964      	cbnz	r4, 80087be <LCD_InitColors+0x22>
 80087a4:	4b09      	ldr	r3, [pc, #36]	@ (80087cc <LCD_InitColors+0x30>)
 80087a6:	6818      	ldr	r0, [r3, #0]
 80087a8:	0080      	lsls	r0, r0, #2
 80087aa:	f7fe f999 	bl	8006ae0 <GUI_ALLOC_GetFixedBlock>
 80087ae:	6028      	str	r0, [r5, #0]
 80087b0:	b138      	cbz	r0, 80087c2 <LCD_InitColors+0x26>
 80087b2:	4807      	ldr	r0, [pc, #28]	@ (80087d0 <LCD_InitColors+0x34>)
 80087b4:	4b07      	ldr	r3, [pc, #28]	@ (80087d4 <LCD_InitColors+0x38>)
 80087b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80087ba:	f7ff fb2b 	bl	8007e14 <GUI__RegisterExit>
 80087be:	2000      	movs	r0, #0
 80087c0:	bd38      	pop	{r3, r4, r5, pc}
 80087c2:	2001      	movs	r0, #1
 80087c4:	bd38      	pop	{r3, r4, r5, pc}
 80087c6:	bf00      	nop
 80087c8:	2000a3f4 	.word	0x2000a3f4
 80087cc:	2000003c 	.word	0x2000003c
 80087d0:	200002a4 	.word	0x200002a4
 80087d4:	08008781 	.word	0x08008781

080087d8 <LCD_GetpPalConvTableUncached>:
 80087d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087dc:	4604      	mov	r4, r0
 80087de:	b318      	cbz	r0, 8008828 <LCD_GetpPalConvTableUncached+0x50>
 80087e0:	6887      	ldr	r7, [r0, #8]
 80087e2:	b31f      	cbz	r7, 800882c <LCD_GetpPalConvTableUncached+0x54>
 80087e4:	4d14      	ldr	r5, [pc, #80]	@ (8008838 <LCD_GetpPalConvTableUncached+0x60>)
 80087e6:	6828      	ldr	r0, [r5, #0]
 80087e8:	b320      	cbz	r0, 8008834 <LCD_GetpPalConvTableUncached+0x5c>
 80087ea:	6822      	ldr	r2, [r4, #0]
 80087ec:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80087f0:	dc1f      	bgt.n	8008832 <LCD_GetpPalConvTableUncached+0x5a>
 80087f2:	4b12      	ldr	r3, [pc, #72]	@ (800883c <LCD_GetpPalConvTableUncached+0x64>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	bfa8      	it	ge
 80087fa:	461a      	movge	r2, r3
 80087fc:	4690      	mov	r8, r2
 80087fe:	2600      	movs	r6, #0
 8008800:	4546      	cmp	r6, r8
 8008802:	da09      	bge.n	8008818 <LCD_GetpPalConvTableUncached+0x40>
 8008804:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 8008808:	f8d5 9000 	ldr.w	r9, [r5]
 800880c:	f7ff ff58 	bl	80086c0 <LCD_Color2Index>
 8008810:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
 8008814:	3601      	adds	r6, #1
 8008816:	e7f3      	b.n	8008800 <LCD_GetpPalConvTableUncached+0x28>
 8008818:	4b09      	ldr	r3, [pc, #36]	@ (8008840 <LCD_GetpPalConvTableUncached+0x68>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	b10b      	cbz	r3, 8008822 <LCD_GetpPalConvTableUncached+0x4a>
 800881e:	4620      	mov	r0, r4
 8008820:	4798      	blx	r3
 8008822:	6828      	ldr	r0, [r5, #0]
 8008824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800882c:	4638      	mov	r0, r7
 800882e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008832:	2000      	movs	r0, #0
 8008834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008838:	2000a3f4 	.word	0x2000a3f4
 800883c:	2000003c 	.word	0x2000003c
 8008840:	200002a4 	.word	0x200002a4

08008844 <LCD_GetpPalConvTableBM>:
 8008844:	f7ff bfc8 	b.w	80087d8 <LCD_GetpPalConvTableUncached>

08008848 <LCD_InitLUT>:
 8008848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884c:	f000 f911 	bl	8008a72 <LCD_GetNumLayers>
 8008850:	4e1c      	ldr	r6, [pc, #112]	@ (80088c4 <LCD_InitLUT+0x7c>)
 8008852:	f8df a078 	ldr.w	sl, [pc, #120]	@ 80088cc <LCD_InitLUT+0x84>
 8008856:	4680      	mov	r8, r0
 8008858:	2400      	movs	r4, #0
 800885a:	46b1      	mov	r9, r6
 800885c:	4544      	cmp	r4, r8
 800885e:	da2d      	bge.n	80088bc <LCD_InitLUT+0x74>
 8008860:	4620      	mov	r0, r4
 8008862:	f7ff faeb 	bl	8007e3c <GUI_DEVICE__GetpDriver>
 8008866:	b338      	cbz	r0, 80088b8 <LCD_InitLUT+0x70>
 8008868:	6833      	ldr	r3, [r6, #0]
 800886a:	4620      	mov	r0, r4
 800886c:	f893 b011 	ldrb.w	fp, [r3, #17]
 8008870:	745c      	strb	r4, [r3, #17]
 8008872:	f000 f84d 	bl	8008910 <LCD_GetBitsPerPixelEx>
 8008876:	2808      	cmp	r0, #8
 8008878:	dd04      	ble.n	8008884 <LCD_InitLUT+0x3c>
 800887a:	f8d9 3000 	ldr.w	r3, [r9]
 800887e:	f883 b011 	strb.w	fp, [r3, #17]
 8008882:	e019      	b.n	80088b8 <LCD_InitLUT+0x70>
 8008884:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8008888:	691a      	ldr	r2, [r3, #16]
 800888a:	4b0f      	ldr	r3, [pc, #60]	@ (80088c8 <LCD_InitLUT+0x80>)
 800888c:	429a      	cmp	r2, r3
 800888e:	d0f4      	beq.n	800887a <LCD_InitLUT+0x32>
 8008890:	4620      	mov	r0, r4
 8008892:	f000 f840 	bl	8008916 <LCD_GetNumColorsEx>
 8008896:	2500      	movs	r5, #0
 8008898:	4603      	mov	r3, r0
 800889a:	429d      	cmp	r5, r3
 800889c:	daed      	bge.n	800887a <LCD_InitLUT+0x32>
 800889e:	b2ef      	uxtb	r7, r5
 80088a0:	4638      	mov	r0, r7
 80088a2:	9301      	str	r3, [sp, #4]
 80088a4:	f7ff ff1a 	bl	80086dc <LCD_Index2Color>
 80088a8:	4639      	mov	r1, r7
 80088aa:	4602      	mov	r2, r0
 80088ac:	4620      	mov	r0, r4
 80088ae:	f000 f90f 	bl	8008ad0 <LCD_SetLUTEntryEx>
 80088b2:	3501      	adds	r5, #1
 80088b4:	9b01      	ldr	r3, [sp, #4]
 80088b6:	e7f0      	b.n	800889a <LCD_InitLUT+0x52>
 80088b8:	3401      	adds	r4, #1
 80088ba:	e7cf      	b.n	800885c <LCD_InitLUT+0x14>
 80088bc:	b003      	add	sp, #12
 80088be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c2:	bf00      	nop
 80088c4:	2000002c 	.word	0x2000002c
 80088c8:	0800d124 	.word	0x0800d124
 80088cc:	2000a3e4 	.word	0x2000a3e4

080088d0 <_GetDevProp>:
 80088d0:	2801      	cmp	r0, #1
 80088d2:	b510      	push	{r4, lr}
 80088d4:	460c      	mov	r4, r1
 80088d6:	dc08      	bgt.n	80088ea <_GetDevProp+0x1a>
 80088d8:	f7ff fab0 	bl	8007e3c <GUI_DEVICE__GetpDriver>
 80088dc:	b128      	cbz	r0, 80088ea <_GetDevProp+0x1a>
 80088de:	68c3      	ldr	r3, [r0, #12]
 80088e0:	4621      	mov	r1, r4
 80088e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088e8:	4718      	bx	r3
 80088ea:	2000      	movs	r0, #0
 80088ec:	bd10      	pop	{r4, pc}

080088ee <_GetMaxValue>:
 80088ee:	b538      	push	{r3, r4, r5, lr}
 80088f0:	4601      	mov	r1, r0
 80088f2:	4605      	mov	r5, r0
 80088f4:	2001      	movs	r0, #1
 80088f6:	f7ff ffeb 	bl	80088d0 <_GetDevProp>
 80088fa:	4629      	mov	r1, r5
 80088fc:	4604      	mov	r4, r0
 80088fe:	2000      	movs	r0, #0
 8008900:	f7ff ffe6 	bl	80088d0 <_GetDevProp>
 8008904:	42a0      	cmp	r0, r4
 8008906:	bfb8      	it	lt
 8008908:	4620      	movlt	r0, r4
 800890a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800890e:	bd38      	pop	{r3, r4, r5, pc}

08008910 <LCD_GetBitsPerPixelEx>:
 8008910:	2108      	movs	r1, #8
 8008912:	f7ff bfdd 	b.w	80088d0 <_GetDevProp>

08008916 <LCD_GetNumColorsEx>:
 8008916:	2109      	movs	r1, #9
 8008918:	f7ff bfda 	b.w	80088d0 <_GetDevProp>

0800891c <LCD_GetNumColors>:
 800891c:	4b02      	ldr	r3, [pc, #8]	@ (8008928 <LCD_GetNumColors+0xc>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	7c58      	ldrb	r0, [r3, #17]
 8008922:	f7ff bff8 	b.w	8008916 <LCD_GetNumColorsEx>
 8008926:	bf00      	nop
 8008928:	2000002c 	.word	0x2000002c

0800892c <GUI_GetBitsPerPixelEx>:
 800892c:	4b03      	ldr	r3, [pc, #12]	@ (800893c <GUI_GetBitsPerPixelEx+0x10>)
 800892e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008932:	68c3      	ldr	r3, [r0, #12]
 8008934:	2108      	movs	r1, #8
 8008936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008938:	4718      	bx	r3
 800893a:	bf00      	nop
 800893c:	2000a3e4 	.word	0x2000a3e4

08008940 <LCD_GetPaletteEx>:
 8008940:	b510      	push	{r4, lr}
 8008942:	f7ff fa7b 	bl	8007e3c <GUI_DEVICE__GetpDriver>
 8008946:	b128      	cbz	r0, 8008954 <LCD_GetPaletteEx+0x14>
 8008948:	68c3      	ldr	r3, [r0, #12]
 800894a:	2102      	movs	r1, #2
 800894c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800894e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008952:	4718      	bx	r3
 8008954:	bd10      	pop	{r4, pc}
	...

08008958 <LCD_GetPalette>:
 8008958:	4b02      	ldr	r3, [pc, #8]	@ (8008964 <LCD_GetPalette+0xc>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	7c58      	ldrb	r0, [r3, #17]
 800895e:	f7ff bfef 	b.w	8008940 <LCD_GetPaletteEx>
 8008962:	bf00      	nop
 8008964:	2000002c 	.word	0x2000002c

08008968 <GUI_GetpfIndex2ColorEx>:
 8008968:	4b02      	ldr	r3, [pc, #8]	@ (8008974 <GUI_GetpfIndex2ColorEx+0xc>)
 800896a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	6858      	ldr	r0, [r3, #4]
 8008972:	4770      	bx	lr
 8008974:	2000a3e4 	.word	0x2000a3e4

08008978 <LCD_GetpfColor2IndexEx>:
 8008978:	b508      	push	{r3, lr}
 800897a:	f7ff fa5f 	bl	8007e3c <GUI_DEVICE__GetpDriver>
 800897e:	b108      	cbz	r0, 8008984 <LCD_GetpfColor2IndexEx+0xc>
 8008980:	6903      	ldr	r3, [r0, #16]
 8008982:	6818      	ldr	r0, [r3, #0]
 8008984:	bd08      	pop	{r3, pc}
	...

08008988 <GUI_GetpfColor2IndexEx>:
 8008988:	4b02      	ldr	r3, [pc, #8]	@ (8008994 <GUI_GetpfColor2IndexEx+0xc>)
 800898a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	6818      	ldr	r0, [r3, #0]
 8008992:	4770      	bx	lr
 8008994:	2000a3e4 	.word	0x2000a3e4

08008998 <LCD_GetXSizeMax>:
 8008998:	2001      	movs	r0, #1
 800899a:	f7ff bfa8 	b.w	80088ee <_GetMaxValue>

0800899e <LCD_GetYSizeMax>:
 800899e:	2002      	movs	r0, #2
 80089a0:	f7ff bfa5 	b.w	80088ee <_GetMaxValue>

080089a4 <LCD_SetDisplaySize>:
 80089a4:	4b01      	ldr	r3, [pc, #4]	@ (80089ac <LCD_SetDisplaySize+0x8>)
 80089a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80089aa:	4770      	bx	lr
 80089ac:	200002b0 	.word	0x200002b0

080089b0 <LCD_GetXSizeDisplay>:
 80089b0:	4b01      	ldr	r3, [pc, #4]	@ (80089b8 <LCD_GetXSizeDisplay+0x8>)
 80089b2:	6818      	ldr	r0, [r3, #0]
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	200002b0 	.word	0x200002b0

080089bc <LCD_GetYSizeDisplay>:
 80089bc:	4b01      	ldr	r3, [pc, #4]	@ (80089c4 <LCD_GetYSizeDisplay+0x8>)
 80089be:	6858      	ldr	r0, [r3, #4]
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	200002b0 	.word	0x200002b0

080089c8 <LCD__GetBPP>:
 80089c8:	2800      	cmp	r0, #0
 80089ca:	d03b      	beq.n	8008a44 <LCD__GetBPP+0x7c>
 80089cc:	f030 0301 	bics.w	r3, r0, #1
 80089d0:	d029      	beq.n	8008a26 <LCD__GetBPP+0x5e>
 80089d2:	f030 0303 	bics.w	r3, r0, #3
 80089d6:	d028      	beq.n	8008a2a <LCD__GetBPP+0x62>
 80089d8:	f030 0307 	bics.w	r3, r0, #7
 80089dc:	d027      	beq.n	8008a2e <LCD__GetBPP+0x66>
 80089de:	f030 030f 	bics.w	r3, r0, #15
 80089e2:	d026      	beq.n	8008a32 <LCD__GetBPP+0x6a>
 80089e4:	f030 031f 	bics.w	r3, r0, #31
 80089e8:	d025      	beq.n	8008a36 <LCD__GetBPP+0x6e>
 80089ea:	f030 03ff 	bics.w	r3, r0, #255	@ 0xff
 80089ee:	d024      	beq.n	8008a3a <LCD__GetBPP+0x72>
 80089f0:	f420 73ff 	bic.w	r3, r0, #510	@ 0x1fe
 80089f4:	f023 0301 	bic.w	r3, r3, #1
 80089f8:	b30b      	cbz	r3, 8008a3e <LCD__GetBPP+0x76>
 80089fa:	f420 637f 	bic.w	r3, r0, #4080	@ 0xff0
 80089fe:	f023 030f 	bic.w	r3, r3, #15
 8008a02:	b1e3      	cbz	r3, 8008a3e <LCD__GetBPP+0x76>
 8008a04:	f420 43ff 	bic.w	r3, r0, #32640	@ 0x7f80
 8008a08:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008a0c:	b1bb      	cbz	r3, 8008a3e <LCD__GetBPP+0x76>
 8008a0e:	0c03      	lsrs	r3, r0, #16
 8008a10:	041b      	lsls	r3, r3, #16
 8008a12:	b1a3      	cbz	r3, 8008a3e <LCD__GetBPP+0x76>
 8008a14:	0c83      	lsrs	r3, r0, #18
 8008a16:	049b      	lsls	r3, r3, #18
 8008a18:	b19b      	cbz	r3, 8008a42 <LCD__GetBPP+0x7a>
 8008a1a:	f010 4f7f 	tst.w	r0, #4278190080	@ 0xff000000
 8008a1e:	bf0c      	ite	eq
 8008a20:	2018      	moveq	r0, #24
 8008a22:	2020      	movne	r0, #32
 8008a24:	4770      	bx	lr
 8008a26:	2001      	movs	r0, #1
 8008a28:	4770      	bx	lr
 8008a2a:	2002      	movs	r0, #2
 8008a2c:	4770      	bx	lr
 8008a2e:	2003      	movs	r0, #3
 8008a30:	4770      	bx	lr
 8008a32:	2004      	movs	r0, #4
 8008a34:	4770      	bx	lr
 8008a36:	2005      	movs	r0, #5
 8008a38:	4770      	bx	lr
 8008a3a:	2008      	movs	r0, #8
 8008a3c:	4770      	bx	lr
 8008a3e:	2010      	movs	r0, #16
 8008a40:	4770      	bx	lr
 8008a42:	2012      	movs	r0, #18
 8008a44:	4770      	bx	lr

08008a46 <LCD__GetBPPDevice>:
 8008a46:	b508      	push	{r3, lr}
 8008a48:	f7ff ffbe 	bl	80089c8 <LCD__GetBPP>
 8008a4c:	2801      	cmp	r0, #1
 8008a4e:	d00f      	beq.n	8008a70 <LCD__GetBPPDevice+0x2a>
 8008a50:	1e83      	subs	r3, r0, #2
 8008a52:	2b06      	cmp	r3, #6
 8008a54:	d909      	bls.n	8008a6a <LCD__GetBPPDevice+0x24>
 8008a56:	f1a0 0309 	sub.w	r3, r0, #9
 8008a5a:	2b07      	cmp	r3, #7
 8008a5c:	d907      	bls.n	8008a6e <LCD__GetBPPDevice+0x28>
 8008a5e:	3811      	subs	r0, #17
 8008a60:	280f      	cmp	r0, #15
 8008a62:	bf8c      	ite	hi
 8008a64:	2000      	movhi	r0, #0
 8008a66:	2020      	movls	r0, #32
 8008a68:	bd08      	pop	{r3, pc}
 8008a6a:	2008      	movs	r0, #8
 8008a6c:	bd08      	pop	{r3, pc}
 8008a6e:	2010      	movs	r0, #16
 8008a70:	bd08      	pop	{r3, pc}

08008a72 <LCD_GetNumLayers>:
 8008a72:	b510      	push	{r4, lr}
 8008a74:	2000      	movs	r0, #0
 8008a76:	f7ff f9e1 	bl	8007e3c <GUI_DEVICE__GetpDriver>
 8008a7a:	1c04      	adds	r4, r0, #0
 8008a7c:	f04f 0001 	mov.w	r0, #1
 8008a80:	bf18      	it	ne
 8008a82:	2401      	movne	r4, #1
 8008a84:	f7ff f9da 	bl	8007e3c <GUI_DEVICE__GetpDriver>
 8008a88:	b100      	cbz	r0, 8008a8c <LCD_GetNumLayers+0x1a>
 8008a8a:	3401      	adds	r4, #1
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	bd10      	pop	{r4, pc}

08008a90 <LCD_SelectLCD>:
 8008a90:	b510      	push	{r4, lr}
 8008a92:	4b0d      	ldr	r3, [pc, #52]	@ (8008ac8 <LCD_SelectLCD+0x38>)
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	7c51      	ldrb	r1, [r2, #17]
 8008a98:	4a0c      	ldr	r2, [pc, #48]	@ (8008acc <LCD_SelectLCD+0x3c>)
 8008a9a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8008a9e:	461c      	mov	r4, r3
 8008aa0:	b140      	cbz	r0, 8008ab4 <LCD_SelectLCD+0x24>
 8008aa2:	68c3      	ldr	r3, [r0, #12]
 8008aa4:	b113      	cbz	r3, 8008aac <LCD_SelectLCD+0x1c>
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d001      	beq.n	8008ab0 <LCD_SelectLCD+0x20>
 8008aac:	6800      	ldr	r0, [r0, #0]
 8008aae:	e7f7      	b.n	8008aa0 <LCD_SelectLCD+0x10>
 8008ab0:	f7ff f9fc 	bl	8007eac <GUI_DEVICE_Unlink>
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	661a      	str	r2, [r3, #96]	@ 0x60
 8008aba:	f103 0208 	add.w	r2, r3, #8
 8008abe:	615a      	str	r2, [r3, #20]
 8008ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ac4:	f7ff bd9c 	b.w	8008600 <LCD_SetClipRectMax>
 8008ac8:	2000002c 	.word	0x2000002c
 8008acc:	2000a3e4 	.word	0x2000a3e4

08008ad0 <LCD_SetLUTEntryEx>:
 8008ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	4615      	mov	r5, r2
 8008ad6:	f7ff f9b1 	bl	8007e3c <GUI_DEVICE__GetpDriver>
 8008ada:	9001      	str	r0, [sp, #4]
 8008adc:	b908      	cbnz	r0, 8008ae2 <LCD_SetLUTEntryEx+0x12>
 8008ade:	2001      	movs	r0, #1
 8008ae0:	e00c      	b.n	8008afc <LCD_SetLUTEntryEx+0x2c>
 8008ae2:	68c3      	ldr	r3, [r0, #12]
 8008ae4:	2110      	movs	r1, #16
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae8:	a801      	add	r0, sp, #4
 8008aea:	4798      	blx	r3
 8008aec:	4603      	mov	r3, r0
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d0f5      	beq.n	8008ade <LCD_SetLUTEntryEx+0xe>
 8008af2:	9801      	ldr	r0, [sp, #4]
 8008af4:	462a      	mov	r2, r5
 8008af6:	4621      	mov	r1, r4
 8008af8:	4798      	blx	r3
 8008afa:	2000      	movs	r0, #0
 8008afc:	b003      	add	sp, #12
 8008afe:	bd30      	pop	{r4, r5, pc}

08008b00 <LCD_SetSizeEx>:
 8008b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b02:	460c      	mov	r4, r1
 8008b04:	4615      	mov	r5, r2
 8008b06:	f7ff f999 	bl	8007e3c <GUI_DEVICE__GetpDriver>
 8008b0a:	9001      	str	r0, [sp, #4]
 8008b0c:	b908      	cbnz	r0, 8008b12 <LCD_SetSizeEx+0x12>
 8008b0e:	2001      	movs	r0, #1
 8008b10:	e00c      	b.n	8008b2c <LCD_SetSizeEx+0x2c>
 8008b12:	68c3      	ldr	r3, [r0, #12]
 8008b14:	210b      	movs	r1, #11
 8008b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b18:	a801      	add	r0, sp, #4
 8008b1a:	4798      	blx	r3
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d0f5      	beq.n	8008b0e <LCD_SetSizeEx+0xe>
 8008b22:	9801      	ldr	r0, [sp, #4]
 8008b24:	462a      	mov	r2, r5
 8008b26:	4621      	mov	r1, r4
 8008b28:	4798      	blx	r3
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	b003      	add	sp, #12
 8008b2e:	bd30      	pop	{r4, r5, pc}

08008b30 <LCD_SetVSizeEx>:
 8008b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b32:	460c      	mov	r4, r1
 8008b34:	4615      	mov	r5, r2
 8008b36:	f7ff f981 	bl	8007e3c <GUI_DEVICE__GetpDriver>
 8008b3a:	9001      	str	r0, [sp, #4]
 8008b3c:	b908      	cbnz	r0, 8008b42 <LCD_SetVSizeEx+0x12>
 8008b3e:	2001      	movs	r0, #1
 8008b40:	e00c      	b.n	8008b5c <LCD_SetVSizeEx+0x2c>
 8008b42:	68c3      	ldr	r3, [r0, #12]
 8008b44:	210a      	movs	r1, #10
 8008b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b48:	a801      	add	r0, sp, #4
 8008b4a:	4798      	blx	r3
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d0f5      	beq.n	8008b3e <LCD_SetVSizeEx+0xe>
 8008b52:	9801      	ldr	r0, [sp, #4]
 8008b54:	462a      	mov	r2, r5
 8008b56:	4621      	mov	r1, r4
 8008b58:	4798      	blx	r3
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	b003      	add	sp, #12
 8008b5e:	bd30      	pop	{r4, r5, pc}

08008b60 <LCD_UpdateColorIndices>:
 8008b60:	b510      	push	{r4, lr}
 8008b62:	4c07      	ldr	r4, [pc, #28]	@ (8008b80 <LCD_UpdateColorIndices+0x20>)
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008b68:	f7ff fdaa 	bl	80086c0 <LCD_Color2Index>
 8008b6c:	f7ff fdc4 	bl	80086f8 <LCD_SetColorIndex>
 8008b70:	6823      	ldr	r3, [r4, #0]
 8008b72:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8008b74:	f7ff fda4 	bl	80086c0 <LCD_Color2Index>
 8008b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b7c:	f7ff bdd8 	b.w	8008730 <LCD_SetBkColorIndex>
 8008b80:	2000002c 	.word	0x2000002c

08008b84 <_Log2PhysY_X1Y0S0>:
 8008b84:	4610      	mov	r0, r2
 8008b86:	4770      	bx	lr

08008b88 <_Log2PhysY_X1Y1S0>:
 8008b88:	6840      	ldr	r0, [r0, #4]
 8008b8a:	1a80      	subs	r0, r0, r2
 8008b8c:	3801      	subs	r0, #1
 8008b8e:	4770      	bx	lr

08008b90 <_Log2PhysY_X1Y0S1>:
 8008b90:	4608      	mov	r0, r1
 8008b92:	4770      	bx	lr

08008b94 <_Log2PhysY_X1Y1S1>:
 8008b94:	6800      	ldr	r0, [r0, #0]
 8008b96:	1a40      	subs	r0, r0, r1
 8008b98:	3801      	subs	r0, #1
 8008b9a:	4770      	bx	lr

08008b9c <_SetPixelIndex>:
 8008b9c:	b410      	push	{r4}
 8008b9e:	6884      	ldr	r4, [r0, #8]
 8008ba0:	f8d4 40f8 	ldr.w	r4, [r4, #248]	@ 0xf8
 8008ba4:	46a4      	mov	ip, r4
 8008ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008baa:	4760      	bx	ip

08008bac <_GetPixelIndex>:
 8008bac:	6883      	ldr	r3, [r0, #8]
 8008bae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008bb2:	4718      	bx	r3

08008bb4 <_XorPixel>:
 8008bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bb6:	4616      	mov	r6, r2
 8008bb8:	4604      	mov	r4, r0
 8008bba:	460d      	mov	r5, r1
 8008bbc:	6887      	ldr	r7, [r0, #8]
 8008bbe:	f7ff fff5 	bl	8008bac <_GetPixelIndex>
 8008bc2:	9001      	str	r0, [sp, #4]
 8008bc4:	9a01      	ldr	r2, [sp, #4]
 8008bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc8:	4629      	mov	r1, r5
 8008bca:	4053      	eors	r3, r2
 8008bcc:	4620      	mov	r0, r4
 8008bce:	4632      	mov	r2, r6
 8008bd0:	f7ff ffe4 	bl	8008b9c <_SetPixelIndex>
 8008bd4:	b003      	add	sp, #12
 8008bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008bd8 <_DrawHLine>:
 8008bd8:	b513      	push	{r0, r1, r4, lr}
 8008bda:	6884      	ldr	r4, [r0, #8]
 8008bdc:	9200      	str	r2, [sp, #0]
 8008bde:	f8d4 40f0 	ldr.w	r4, [r4, #240]	@ 0xf0
 8008be2:	47a0      	blx	r4
 8008be4:	b002      	add	sp, #8
 8008be6:	bd10      	pop	{r4, pc}

08008be8 <_DrawVLine>:
 8008be8:	b513      	push	{r0, r1, r4, lr}
 8008bea:	6884      	ldr	r4, [r0, #8]
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	f8d4 40f0 	ldr.w	r4, [r4, #240]	@ 0xf0
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	47a0      	blx	r4
 8008bf6:	b002      	add	sp, #8
 8008bf8:	bd10      	pop	{r4, pc}

08008bfa <_FillRect>:
 8008bfa:	b410      	push	{r4}
 8008bfc:	6884      	ldr	r4, [r0, #8]
 8008bfe:	f8d4 40f0 	ldr.w	r4, [r4, #240]	@ 0xf0
 8008c02:	46a4      	mov	ip, r4
 8008c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c08:	4760      	bx	ip

08008c0a <_DrawBitmap>:
 8008c0a:	b430      	push	{r4, r5}
 8008c0c:	6884      	ldr	r4, [r0, #8]
 8008c0e:	f8d4 40ec 	ldr.w	r4, [r4, #236]	@ 0xec
 8008c12:	46a4      	mov	ip, r4
 8008c14:	bc30      	pop	{r4, r5}
 8008c16:	4760      	bx	ip

08008c18 <_GetDevFunc_SetRect>:
 8008c18:	4770      	bx	lr
	...

08008c1c <_GetDevFunc_SetRectOutside>:
 8008c1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c1e:	9e07      	ldr	r6, [sp, #28]
 8008c20:	6884      	ldr	r4, [r0, #8]
 8008c22:	4d0c      	ldr	r5, [pc, #48]	@ (8008c54 <_GetDevFunc_SetRectOutside+0x38>)
 8008c24:	b176      	cbz	r6, 8008c44 <_GetDevFunc_SetRectOutside+0x28>
 8008c26:	6828      	ldr	r0, [r5, #0]
 8008c28:	b988      	cbnz	r0, 8008c4e <_GetDevFunc_SetRectOutside+0x32>
 8008c2a:	9806      	ldr	r0, [sp, #24]
 8008c2c:	9000      	str	r0, [sp, #0]
 8008c2e:	f8d4 60a8 	ldr.w	r6, [r4, #168]	@ 0xa8
 8008c32:	4620      	mov	r0, r4
 8008c34:	47b0      	blx	r6
 8008c36:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 8008c3a:	602b      	str	r3, [r5, #0]
 8008c3c:	4b06      	ldr	r3, [pc, #24]	@ (8008c58 <_GetDevFunc_SetRectOutside+0x3c>)
 8008c3e:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 8008c42:	e004      	b.n	8008c4e <_GetDevFunc_SetRectOutside+0x32>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	b113      	cbz	r3, 8008c4e <_GetDevFunc_SetRectOutside+0x32>
 8008c48:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 8008c4c:	602e      	str	r6, [r5, #0]
 8008c4e:	b002      	add	sp, #8
 8008c50:	bd70      	pop	{r4, r5, r6, pc}
 8008c52:	bf00      	nop
 8008c54:	200002b8 	.word	0x200002b8
 8008c58:	08008c19 	.word	0x08008c19

08008c5c <_ReadPixelCust_16bpp>:
 8008c5c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8008c5e:	f8d0 30dc 	ldr.w	r3, [r0, #220]	@ 0xdc
 8008c62:	6990      	ldr	r0, [r2, #24]
 8008c64:	4718      	bx	r3

08008c66 <_ReadPixelCust_18bpp>:
 8008c66:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8008c68:	f8d0 30e0 	ldr.w	r3, [r0, #224]	@ 0xe0
 8008c6c:	6990      	ldr	r0, [r2, #24]
 8008c6e:	4718      	bx	r3

08008c70 <_ReadRectCust_16bpp>:
 8008c70:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c76:	6885      	ldr	r5, [r0, #8]
 8008c78:	9400      	str	r4, [sp, #0]
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	f8d5 60a8 	ldr.w	r6, [r5, #168]	@ 0xa8
 8008c80:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008c82:	468a      	mov	sl, r1
 8008c84:	4691      	mov	r9, r2
 8008c86:	4698      	mov	r8, r3
 8008c88:	47b0      	blx	r6
 8008c8a:	6c28      	ldr	r0, [r5, #64]	@ 0x40
 8008c8c:	f8d5 30e4 	ldr.w	r3, [r5, #228]	@ 0xe4
 8008c90:	6980      	ldr	r0, [r0, #24]
 8008c92:	ebc9 0404 	rsb	r4, r9, r4
 8008c96:	ebca 0608 	rsb	r6, sl, r8
 8008c9a:	1c62      	adds	r2, r4, #1
 8008c9c:	fb06 2202 	mla	r2, r6, r2, r2
 8008ca0:	4639      	mov	r1, r7
 8008ca2:	b002      	add	sp, #8
 8008ca4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca8:	4718      	bx	r3

08008caa <_ReadRectCust_18bpp>:
 8008caa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008cb0:	6885      	ldr	r5, [r0, #8]
 8008cb2:	9400      	str	r4, [sp, #0]
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	f8d5 60a8 	ldr.w	r6, [r5, #168]	@ 0xa8
 8008cba:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008cbc:	468a      	mov	sl, r1
 8008cbe:	4691      	mov	r9, r2
 8008cc0:	4698      	mov	r8, r3
 8008cc2:	47b0      	blx	r6
 8008cc4:	6c28      	ldr	r0, [r5, #64]	@ 0x40
 8008cc6:	f8d5 30e8 	ldr.w	r3, [r5, #232]	@ 0xe8
 8008cca:	6980      	ldr	r0, [r0, #24]
 8008ccc:	ebc9 0404 	rsb	r4, r9, r4
 8008cd0:	ebca 0608 	rsb	r6, sl, r8
 8008cd4:	1c62      	adds	r2, r4, #1
 8008cd6:	fb06 2202 	mla	r2, r6, r2, r2
 8008cda:	4639      	mov	r1, r7
 8008cdc:	b002      	add	sp, #8
 8008cde:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce2:	4718      	bx	r3

08008ce4 <_GetDevFunc>:
 8008ce4:	3901      	subs	r1, #1
 8008ce6:	2917      	cmp	r1, #23
 8008ce8:	d828      	bhi.n	8008d3c <_GetDevFunc+0x58>
 8008cea:	e8df f001 	tbb	[pc, r1]
 8008cee:	2714      	.short	0x2714
 8008cf0:	27272727 	.word	0x27272727
 8008cf4:	0e272727 	.word	0x0e272727
 8008cf8:	29191210 	.word	0x29191210
 8008cfc:	2727270c 	.word	0x2727270c
 8008d00:	23272727 	.word	0x23272727
 8008d04:	251e      	.short	0x251e
 8008d06:	480f      	ldr	r0, [pc, #60]	@ (8008d44 <_GetDevFunc+0x60>)
 8008d08:	4770      	bx	lr
 8008d0a:	480f      	ldr	r0, [pc, #60]	@ (8008d48 <_GetDevFunc+0x64>)
 8008d0c:	4770      	bx	lr
 8008d0e:	480f      	ldr	r0, [pc, #60]	@ (8008d4c <_GetDevFunc+0x68>)
 8008d10:	4770      	bx	lr
 8008d12:	480f      	ldr	r0, [pc, #60]	@ (8008d50 <_GetDevFunc+0x6c>)
 8008d14:	4770      	bx	lr
 8008d16:	6803      	ldr	r3, [r0, #0]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
 8008d1e:	4770      	bx	lr
 8008d20:	6803      	ldr	r3, [r0, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
 8008d28:	4770      	bx	lr
 8008d2a:	6803      	ldr	r3, [r0, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f8d3 0100 	ldr.w	r0, [r3, #256]	@ 0x100
 8008d32:	4770      	bx	lr
 8008d34:	4807      	ldr	r0, [pc, #28]	@ (8008d54 <_GetDevFunc+0x70>)
 8008d36:	4770      	bx	lr
 8008d38:	4807      	ldr	r0, [pc, #28]	@ (8008d58 <_GetDevFunc+0x74>)
 8008d3a:	4770      	bx	lr
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	4770      	bx	lr
 8008d40:	4806      	ldr	r0, [pc, #24]	@ (8008d5c <_GetDevFunc+0x78>)
 8008d42:	4770      	bx	lr
 8008d44:	08009107 	.word	0x08009107
 8008d48:	080090f3 	.word	0x080090f3
 8008d4c:	080090df 	.word	0x080090df
 8008d50:	08009095 	.word	0x08009095
 8008d54:	08008ff9 	.word	0x08008ff9
 8008d58:	08008c1d 	.word	0x08008c1d
 8008d5c:	0800911d 	.word	0x0800911d

08008d60 <_GetDevProp>:
 8008d60:	3901      	subs	r1, #1
 8008d62:	6880      	ldr	r0, [r0, #8]
 8008d64:	290d      	cmp	r1, #13
 8008d66:	d823      	bhi.n	8008db0 <_GetDevProp+0x50>
 8008d68:	e8df f001 	tbb	[pc, r1]
 8008d6c:	0f0d0b09 	.word	0x0f0d0b09
 8008d70:	11222222 	.word	0x11222222
 8008d74:	13070725 	.word	0x13070725
 8008d78:	1d18      	.short	0x1d18
 8008d7a:	2001      	movs	r0, #1
 8008d7c:	4770      	bx	lr
 8008d7e:	6800      	ldr	r0, [r0, #0]
 8008d80:	4770      	bx	lr
 8008d82:	6840      	ldr	r0, [r0, #4]
 8008d84:	4770      	bx	lr
 8008d86:	6880      	ldr	r0, [r0, #8]
 8008d88:	4770      	bx	lr
 8008d8a:	68c0      	ldr	r0, [r0, #12]
 8008d8c:	4770      	bx	lr
 8008d8e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8008d90:	4770      	bx	lr
 8008d92:	b188      	cbz	r0, 8008db8 <_GetDevProp+0x58>
 8008d94:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8008d96:	f000 0001 	and.w	r0, r0, #1
 8008d9a:	4770      	bx	lr
 8008d9c:	b160      	cbz	r0, 8008db8 <_GetDevProp+0x58>
 8008d9e:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8008da0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8008da4:	4770      	bx	lr
 8008da6:	b138      	cbz	r0, 8008db8 <_GetDevProp+0x58>
 8008da8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8008daa:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8008dae:	4770      	bx	lr
 8008db0:	f04f 30ff 	mov.w	r0, #4294967295
 8008db4:	4770      	bx	lr
 8008db6:	2000      	movs	r0, #0
 8008db8:	4770      	bx	lr

08008dba <_GetDevData>:
 8008dba:	6883      	ldr	r3, [r0, #8]
 8008dbc:	2901      	cmp	r1, #1
 8008dbe:	bf0c      	ite	eq
 8008dc0:	6c58      	ldreq	r0, [r3, #68]	@ 0x44
 8008dc2:	2000      	movne	r0, #0
 8008dc4:	4770      	bx	lr

08008dc6 <_GetRect>:
 8008dc6:	6882      	ldr	r2, [r0, #8]
 8008dc8:	2300      	movs	r3, #0
 8008dca:	800b      	strh	r3, [r1, #0]
 8008dcc:	804b      	strh	r3, [r1, #2]
 8008dce:	6813      	ldr	r3, [r2, #0]
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	808b      	strh	r3, [r1, #4]
 8008dd4:	6853      	ldr	r3, [r2, #4]
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	80cb      	strh	r3, [r1, #6]
 8008dda:	4770      	bx	lr

08008ddc <GUIDRV_FlexColor__SetLog2Phys>:
 8008ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dde:	4c10      	ldr	r4, [pc, #64]	@ (8008e20 <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 8008de0:	4626      	mov	r6, r4
 8008de2:	4607      	mov	r7, r0
 8008de4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008de6:	b091      	sub	sp, #68	@ 0x44
 8008de8:	466d      	mov	r5, sp
 8008dea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008dec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8008df0:	3420      	adds	r4, #32
 8008df2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8008df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008df8:	ad08      	add	r5, sp, #32
 8008dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008dfc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008e00:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8008e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e06:	aa10      	add	r2, sp, #64	@ 0x40
 8008e08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e0c:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8008e10:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008e14:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 8008e18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008e1c:	b011      	add	sp, #68	@ 0x44
 8008e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e20:	0800c8f8 	.word	0x0800c8f8

08008e24 <_SetOrg>:
 8008e24:	b507      	push	{r0, r1, r2, lr}
 8008e26:	6980      	ldr	r0, [r0, #24]
 8008e28:	e88d 0006 	stmia.w	sp, {r1, r2}
 8008e2c:	466a      	mov	r2, sp
 8008e2e:	2103      	movs	r1, #3
 8008e30:	f7f8 fa56 	bl	80012e0 <LCD_X_DisplayDriver>
 8008e34:	b003      	add	sp, #12
 8008e36:	f85d fb04 	ldr.w	pc, [sp], #4

08008e3a <_Log2PhysY_X0Y0S1>:
 8008e3a:	4608      	mov	r0, r1
 8008e3c:	4770      	bx	lr

08008e3e <_Log2PhysX_X0Y0S0>:
 8008e3e:	4608      	mov	r0, r1
 8008e40:	4770      	bx	lr

08008e42 <_Log2PhysX_X0Y1S0>:
 8008e42:	4608      	mov	r0, r1
 8008e44:	4770      	bx	lr

08008e46 <_Log2PhysX_X0Y0S1>:
 8008e46:	4610      	mov	r0, r2
 8008e48:	4770      	bx	lr

08008e4a <_Log2PhysX_X0Y1S1>:
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	4770      	bx	lr

08008e4e <_Log2PhysY_X0Y0S0>:
 8008e4e:	4610      	mov	r0, r2
 8008e50:	4770      	bx	lr

08008e52 <_Log2PhysY_X0Y1S0>:
 8008e52:	6840      	ldr	r0, [r0, #4]
 8008e54:	1a80      	subs	r0, r0, r2
 8008e56:	3801      	subs	r0, #1
 8008e58:	4770      	bx	lr

08008e5a <_Log2PhysX_X1Y0S0>:
 8008e5a:	6800      	ldr	r0, [r0, #0]
 8008e5c:	1a40      	subs	r0, r0, r1
 8008e5e:	3801      	subs	r0, #1
 8008e60:	4770      	bx	lr

08008e62 <_Log2PhysX_X1Y1S0>:
 8008e62:	6800      	ldr	r0, [r0, #0]
 8008e64:	1a40      	subs	r0, r0, r1
 8008e66:	3801      	subs	r0, #1
 8008e68:	4770      	bx	lr

08008e6a <_Log2PhysX_X1Y0S1>:
 8008e6a:	6840      	ldr	r0, [r0, #4]
 8008e6c:	1a80      	subs	r0, r0, r2
 8008e6e:	3801      	subs	r0, #1
 8008e70:	4770      	bx	lr

08008e72 <_Log2PhysX_X1Y1S1>:
 8008e72:	6840      	ldr	r0, [r0, #4]
 8008e74:	1a80      	subs	r0, r0, r2
 8008e76:	3801      	subs	r0, #1
 8008e78:	4770      	bx	lr

08008e7a <_Log2PhysY_X0Y1S1>:
 8008e7a:	6800      	ldr	r0, [r0, #0]
 8008e7c:	1a40      	subs	r0, r0, r1
 8008e7e:	3801      	subs	r0, #1
 8008e80:	4770      	bx	lr

08008e82 <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 8008e82:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008e86:	6884      	ldr	r4, [r0, #8]
 8008e88:	4698      	mov	r8, r3
 8008e8a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8008e8c:	079b      	lsls	r3, r3, #30
 8008e8e:	460e      	mov	r6, r1
 8008e90:	4617      	mov	r7, r2
 8008e92:	d52e      	bpl.n	8008ef2 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x70>
 8008e94:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8008e98:	4620      	mov	r0, r4
 8008e9a:	4798      	blx	r3
 8008e9c:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	463a      	mov	r2, r7
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	4798      	blx	r3
 8008eaa:	69a3      	ldr	r3, [r4, #24]
 8008eac:	6922      	ldr	r2, [r4, #16]
 8008eae:	429d      	cmp	r5, r3
 8008eb0:	bfd4      	ite	le
 8008eb2:	2300      	movle	r3, #0
 8008eb4:	2301      	movgt	r3, #1
 8008eb6:	4295      	cmp	r5, r2
 8008eb8:	bfb8      	it	lt
 8008eba:	f043 0301 	orrlt.w	r3, r3, #1
 8008ebe:	6962      	ldr	r2, [r4, #20]
 8008ec0:	4290      	cmp	r0, r2
 8008ec2:	bfb8      	it	lt
 8008ec4:	f043 0301 	orrlt.w	r3, r3, #1
 8008ec8:	4606      	mov	r6, r0
 8008eca:	b913      	cbnz	r3, 8008ed2 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x50>
 8008ecc:	69e3      	ldr	r3, [r4, #28]
 8008ece:	4298      	cmp	r0, r3
 8008ed0:	dd0a      	ble.n	8008ee8 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x66>
 8008ed2:	6862      	ldr	r2, [r4, #4]
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	3a01      	subs	r2, #1
 8008ed8:	9200      	str	r2, [sp, #0]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8d4 70a8 	ldr.w	r7, [r4, #168]	@ 0xa8
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	47b8      	blx	r7
 8008ee8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8008eec:	4632      	mov	r2, r6
 8008eee:	4629      	mov	r1, r5
 8008ef0:	e001      	b.n	8008ef6 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x74>
 8008ef2:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	4798      	blx	r3
 8008efa:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8008efe:	4641      	mov	r1, r8
 8008f00:	4620      	mov	r0, r4
 8008f02:	b002      	add	sp, #8
 8008f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f08:	4718      	bx	r3

08008f0a <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 8008f0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f0c:	6884      	ldr	r4, [r0, #8]
 8008f0e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8008f10:	079b      	lsls	r3, r3, #30
 8008f12:	460e      	mov	r6, r1
 8008f14:	4617      	mov	r7, r2
 8008f16:	d543      	bpl.n	8008fa0 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x96>
 8008f18:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	4798      	blx	r3
 8008f20:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
 8008f24:	4631      	mov	r1, r6
 8008f26:	4605      	mov	r5, r0
 8008f28:	463a      	mov	r2, r7
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	4798      	blx	r3
 8008f2e:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8008f32:	4606      	mov	r6, r0
 8008f34:	b11b      	cbz	r3, 8008f3e <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 8008f36:	2200      	movs	r2, #0
 8008f38:	2101      	movs	r1, #1
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	4798      	blx	r3
 8008f3e:	69a3      	ldr	r3, [r4, #24]
 8008f40:	6922      	ldr	r2, [r4, #16]
 8008f42:	429d      	cmp	r5, r3
 8008f44:	bfd4      	ite	le
 8008f46:	2300      	movle	r3, #0
 8008f48:	2301      	movgt	r3, #1
 8008f4a:	4295      	cmp	r5, r2
 8008f4c:	bfb8      	it	lt
 8008f4e:	f043 0301 	orrlt.w	r3, r3, #1
 8008f52:	6962      	ldr	r2, [r4, #20]
 8008f54:	4296      	cmp	r6, r2
 8008f56:	bfb8      	it	lt
 8008f58:	f043 0301 	orrlt.w	r3, r3, #1
 8008f5c:	b913      	cbnz	r3, 8008f64 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5a>
 8008f5e:	69e3      	ldr	r3, [r4, #28]
 8008f60:	429e      	cmp	r6, r3
 8008f62:	dd0a      	ble.n	8008f7a <GUIDRV_FlexColor__GetPixelIndexNoCache+0x70>
 8008f64:	6862      	ldr	r2, [r4, #4]
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	3a01      	subs	r2, #1
 8008f6a:	9200      	str	r2, [sp, #0]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f8d4 70a8 	ldr.w	r7, [r4, #168]	@ 0xa8
 8008f72:	3b01      	subs	r3, #1
 8008f74:	4611      	mov	r1, r2
 8008f76:	4620      	mov	r0, r4
 8008f78:	47b8      	blx	r7
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8008f80:	4632      	mov	r2, r6
 8008f82:	4620      	mov	r0, r4
 8008f84:	4798      	blx	r3
 8008f86:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	4798      	blx	r3
 8008f8e:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8008f92:	4605      	mov	r5, r0
 8008f94:	b17b      	cbz	r3, 8008fb6 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 8008f96:	2201      	movs	r2, #1
 8008f98:	2100      	movs	r1, #0
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	4798      	blx	r3
 8008f9e:	e00a      	b.n	8008fb6 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 8008fa0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	4798      	blx	r3
 8008fa8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8008fac:	4620      	mov	r0, r4
 8008fae:	b003      	add	sp, #12
 8008fb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008fb4:	4718      	bx	r3
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	b003      	add	sp, #12
 8008fba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fbc <GUIDRV_FlexColor__InitOnce>:
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	6885      	ldr	r5, [r0, #8]
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	b99d      	cbnz	r5, 8008fec <GUIDRV_FlexColor__InitOnce+0x30>
 8008fc4:	f44f 70be 	mov.w	r0, #380	@ 0x17c
 8008fc8:	f7fd fd8a 	bl	8006ae0 <GUI_ALLOC_GetFixedBlock>
 8008fcc:	4b08      	ldr	r3, [pc, #32]	@ (8008ff0 <GUIDRV_FlexColor__InitOnce+0x34>)
 8008fce:	60a0      	str	r0, [r4, #8]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	4798      	blx	r3
 8008fda:	68a3      	ldr	r3, [r4, #8]
 8008fdc:	2202      	movs	r2, #2
 8008fde:	84da      	strh	r2, [r3, #38]	@ 0x26
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	621a      	str	r2, [r3, #32]
 8008fe4:	4a03      	ldr	r2, [pc, #12]	@ (8008ff4 <GUIDRV_FlexColor__InitOnce+0x38>)
 8008fe6:	641c      	str	r4, [r3, #64]	@ 0x40
 8008fe8:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 8008fec:	bd38      	pop	{r3, r4, r5, pc}
 8008fee:	bf00      	nop
 8008ff0:	20000034 	.word	0x20000034
 8008ff4:	08008ddd 	.word	0x08008ddd

08008ff8 <_SetDevFunc>:
 8008ff8:	b570      	push	{r4, r5, r6, lr}
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	460d      	mov	r5, r1
 8008ffe:	4614      	mov	r4, r2
 8009000:	f7ff ffdc 	bl	8008fbc <GUIDRV_FlexColor__InitOnce>
 8009004:	68b3      	ldr	r3, [r6, #8]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d03b      	beq.n	8009082 <_SetDevFunc+0x8a>
 800900a:	2d26      	cmp	r5, #38	@ 0x26
 800900c:	d002      	beq.n	8009014 <_SetDevFunc+0x1c>
 800900e:	2d27      	cmp	r5, #39	@ 0x27
 8009010:	d016      	beq.n	8009040 <_SetDevFunc+0x48>
 8009012:	bd70      	pop	{r4, r5, r6, pc}
 8009014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009016:	2a10      	cmp	r2, #16
 8009018:	d002      	beq.n	8009020 <_SetDevFunc+0x28>
 800901a:	2a12      	cmp	r2, #18
 800901c:	d008      	beq.n	8009030 <_SetDevFunc+0x38>
 800901e:	bd70      	pop	{r4, r5, r6, pc}
 8009020:	4a18      	ldr	r2, [pc, #96]	@ (8009084 <_SetDevFunc+0x8c>)
 8009022:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
 8009026:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800902a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 800902e:	bd70      	pop	{r4, r5, r6, pc}
 8009030:	4a15      	ldr	r2, [pc, #84]	@ (8009088 <_SetDevFunc+0x90>)
 8009032:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
 8009036:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 800903a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800903e:	bd70      	pop	{r4, r5, r6, pc}
 8009040:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009042:	2a10      	cmp	r2, #16
 8009044:	d002      	beq.n	800904c <_SetDevFunc+0x54>
 8009046:	2a12      	cmp	r2, #18
 8009048:	d00e      	beq.n	8009068 <_SetDevFunc+0x70>
 800904a:	bd70      	pop	{r4, r5, r6, pc}
 800904c:	b13c      	cbz	r4, 800905e <_SetDevFunc+0x66>
 800904e:	4a0f      	ldr	r2, [pc, #60]	@ (800908c <_SetDevFunc+0x94>)
 8009050:	f8c3 40e4 	str.w	r4, [r3, #228]	@ 0xe4
 8009054:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8009058:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 800905c:	bd70      	pop	{r4, r5, r6, pc}
 800905e:	f8c3 40cc 	str.w	r4, [r3, #204]	@ 0xcc
 8009062:	f8c3 40c8 	str.w	r4, [r3, #200]	@ 0xc8
 8009066:	bd70      	pop	{r4, r5, r6, pc}
 8009068:	b13c      	cbz	r4, 800907a <_SetDevFunc+0x82>
 800906a:	4a09      	ldr	r2, [pc, #36]	@ (8009090 <_SetDevFunc+0x98>)
 800906c:	f8c3 40e8 	str.w	r4, [r3, #232]	@ 0xe8
 8009070:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8009074:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8009078:	bd70      	pop	{r4, r5, r6, pc}
 800907a:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
 800907e:	f8c3 40d4 	str.w	r4, [r3, #212]	@ 0xd4
 8009082:	bd70      	pop	{r4, r5, r6, pc}
 8009084:	08008c5d 	.word	0x08008c5d
 8009088:	08008c67 	.word	0x08008c67
 800908c:	08008c71 	.word	0x08008c71
 8009090:	08008cab 	.word	0x08008cab

08009094 <_GetDevFunc_Init>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	4605      	mov	r5, r0
 8009098:	f7ff ff90 	bl	8008fbc <GUIDRV_FlexColor__InitOnce>
 800909c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80090a0:	68ac      	ldr	r4, [r5, #8]
 80090a2:	f7fd fd1d 	bl	8006ae0 <GUI_ALLOC_GetFixedBlock>
 80090a6:	66a0      	str	r0, [r4, #104]	@ 0x68
 80090a8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	3007      	adds	r0, #7
 80090ae:	10c0      	asrs	r0, r0, #3
 80090b0:	4358      	muls	r0, r3
 80090b2:	f7fd fd15 	bl	8006ae0 <GUI_ALLOC_GetFixedBlock>
 80090b6:	2200      	movs	r2, #0
 80090b8:	2101      	movs	r1, #1
 80090ba:	66e0      	str	r0, [r4, #108]	@ 0x6c
 80090bc:	69a8      	ldr	r0, [r5, #24]
 80090be:	f7f8 f90f 	bl	80012e0 <LCD_X_DisplayDriver>
 80090c2:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
 80090c6:	4605      	mov	r5, r0
 80090c8:	4620      	mov	r0, r4
 80090ca:	4798      	blx	r3
 80090cc:	4620      	mov	r0, r4
 80090ce:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 80090d2:	4798      	blx	r3
 80090d4:	2d00      	cmp	r5, #0
 80090d6:	bfd4      	ite	le
 80090d8:	2000      	movle	r0, #0
 80090da:	2001      	movgt	r0, #1
 80090dc:	bd38      	pop	{r3, r4, r5, pc}

080090de <_GetDevFunc_SetSize>:
 80090de:	b570      	push	{r4, r5, r6, lr}
 80090e0:	4606      	mov	r6, r0
 80090e2:	460d      	mov	r5, r1
 80090e4:	4614      	mov	r4, r2
 80090e6:	f7ff ff69 	bl	8008fbc <GUIDRV_FlexColor__InitOnce>
 80090ea:	68b3      	ldr	r3, [r6, #8]
 80090ec:	601d      	str	r5, [r3, #0]
 80090ee:	605c      	str	r4, [r3, #4]
 80090f0:	bd70      	pop	{r4, r5, r6, pc}

080090f2 <_GetDevFunc_SetVSize>:
 80090f2:	b570      	push	{r4, r5, r6, lr}
 80090f4:	4606      	mov	r6, r0
 80090f6:	460d      	mov	r5, r1
 80090f8:	4614      	mov	r4, r2
 80090fa:	f7ff ff5f 	bl	8008fbc <GUIDRV_FlexColor__InitOnce>
 80090fe:	68b3      	ldr	r3, [r6, #8]
 8009100:	609d      	str	r5, [r3, #8]
 8009102:	60dc      	str	r4, [r3, #12]
 8009104:	bd70      	pop	{r4, r5, r6, pc}

08009106 <_GetDevFunc_Off>:
 8009106:	b510      	push	{r4, lr}
 8009108:	4604      	mov	r4, r0
 800910a:	f7ff ff57 	bl	8008fbc <GUIDRV_FlexColor__InitOnce>
 800910e:	69a0      	ldr	r0, [r4, #24]
 8009110:	2200      	movs	r2, #0
 8009112:	2106      	movs	r1, #6
 8009114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009118:	f7f8 b8e2 	b.w	80012e0 <LCD_X_DisplayDriver>

0800911c <_GetDevFunc_On>:
 800911c:	b510      	push	{r4, lr}
 800911e:	4604      	mov	r4, r0
 8009120:	f7ff ff4c 	bl	8008fbc <GUIDRV_FlexColor__InitOnce>
 8009124:	69a0      	ldr	r0, [r4, #24]
 8009126:	2200      	movs	r2, #0
 8009128:	2105      	movs	r1, #5
 800912a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800912e:	f7f8 b8d7 	b.w	80012e0 <LCD_X_DisplayDriver>

08009132 <GUIDRV_FlexColor_Config>:
 8009132:	b538      	push	{r3, r4, r5, lr}
 8009134:	4605      	mov	r5, r0
 8009136:	460c      	mov	r4, r1
 8009138:	f7ff ff40 	bl	8008fbc <GUIDRV_FlexColor__InitOnce>
 800913c:	68ab      	ldr	r3, [r5, #8]
 800913e:	6822      	ldr	r2, [r4, #0]
 8009140:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009142:	6862      	ldr	r2, [r4, #4]
 8009144:	631a      	str	r2, [r3, #48]	@ 0x30
 8009146:	68a2      	ldr	r2, [r4, #8]
 8009148:	635a      	str	r2, [r3, #52]	@ 0x34
 800914a:	0752      	lsls	r2, r2, #29
 800914c:	d507      	bpl.n	800915e <GUIDRV_FlexColor_Config+0x2c>
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	6859      	ldr	r1, [r3, #4]
 8009152:	e883 0006 	stmia.w	r3, {r1, r2}
 8009156:	689a      	ldr	r2, [r3, #8]
 8009158:	68d9      	ldr	r1, [r3, #12]
 800915a:	6099      	str	r1, [r3, #8]
 800915c:	60da      	str	r2, [r3, #12]
 800915e:	89a2      	ldrh	r2, [r4, #12]
 8009160:	849a      	strh	r2, [r3, #36]	@ 0x24
 8009162:	6922      	ldr	r2, [r4, #16]
 8009164:	b112      	cbz	r2, 800916c <GUIDRV_FlexColor_Config+0x3a>
 8009166:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800916a:	621a      	str	r2, [r3, #32]
 800916c:	bd38      	pop	{r3, r4, r5, pc}

0800916e <GUIDRV_FlexColor_SetFunc>:
 800916e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009172:	4604      	mov	r4, r0
 8009174:	461e      	mov	r6, r3
 8009176:	4617      	mov	r7, r2
 8009178:	4688      	mov	r8, r1
 800917a:	f7ff ff1f 	bl	8008fbc <GUIDRV_FlexColor__InitOnce>
 800917e:	68a5      	ldr	r5, [r4, #8]
 8009180:	2268      	movs	r2, #104	@ 0x68
 8009182:	4641      	mov	r1, r8
 8009184:	f505 708a 	add.w	r0, r5, #276	@ 0x114
 8009188:	f003 f838 	bl	800c1fc <memcpy>
 800918c:	4620      	mov	r0, r4
 800918e:	47b8      	blx	r7
 8009190:	4620      	mov	r0, r4
 8009192:	47b0      	blx	r6
 8009194:	6923      	ldr	r3, [r4, #16]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	4798      	blx	r3
 800919a:	62a8      	str	r0, [r5, #40]	@ 0x28
 800919c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080091a0 <_WriteU16_A1>:
 80091a0:	0a0b      	lsrs	r3, r1, #8
 80091a2:	f880 3071 	strb.w	r3, [r0, #113]	@ 0x71
 80091a6:	f880 1072 	strb.w	r1, [r0, #114]	@ 0x72
 80091aa:	f8d0 3120 	ldr.w	r3, [r0, #288]	@ 0x120
 80091ae:	2102      	movs	r1, #2
 80091b0:	3071      	adds	r0, #113	@ 0x71
 80091b2:	4718      	bx	r3

080091b4 <_WriteDataMP>:
 80091b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b8:	4604      	mov	r4, r0
 80091ba:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80091bc:	460e      	mov	r6, r1
 80091be:	4615      	mov	r5, r2
 80091c0:	2100      	movs	r1, #0
 80091c2:	b1a5      	cbz	r5, 80091ee <_WriteDataMP+0x3a>
 80091c4:	f836 2b02 	ldrh.w	r2, [r6], #2
 80091c8:	4603      	mov	r3, r0
 80091ca:	3101      	adds	r1, #1
 80091cc:	0a17      	lsrs	r7, r2, #8
 80091ce:	29fa      	cmp	r1, #250	@ 0xfa
 80091d0:	f803 7b02 	strb.w	r7, [r3], #2
 80091d4:	7042      	strb	r2, [r0, #1]
 80091d6:	d107      	bne.n	80091e8 <_WriteDataMP+0x34>
 80091d8:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 80091dc:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80091de:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80091e2:	4798      	blx	r3
 80091e4:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80091e6:	2100      	movs	r1, #0
 80091e8:	3d01      	subs	r5, #1
 80091ea:	4618      	mov	r0, r3
 80091ec:	e7e9      	b.n	80091c2 <_WriteDataMP+0xe>
 80091ee:	b131      	cbz	r1, 80091fe <_WriteDataMP+0x4a>
 80091f0:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 80091f4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80091f6:	0049      	lsls	r1, r1, #1
 80091f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091fc:	4718      	bx	r3
 80091fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009202 <_ReadData>:
 8009202:	b508      	push	{r3, lr}
 8009204:	f8d0 30b8 	ldr.w	r3, [r0, #184]	@ 0xb8
 8009208:	4798      	blx	r3
 800920a:	bd08      	pop	{r3, pc}

0800920c <_WriteData>:
 800920c:	b289      	uxth	r1, r1
 800920e:	f7ff bfc7 	b.w	80091a0 <_WriteU16_A1>
	...

08009214 <_FillRect>:
 8009214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009218:	4e3e      	ldr	r6, [pc, #248]	@ (8009314 <_FillRect+0x100>)
 800921a:	6885      	ldr	r5, [r0, #8]
 800921c:	4682      	mov	sl, r0
 800921e:	6830      	ldr	r0, [r6, #0]
 8009220:	7c00      	ldrb	r0, [r0, #16]
 8009222:	f010 0f01 	tst.w	r0, #1
 8009226:	b085      	sub	sp, #20
 8009228:	4688      	mov	r8, r1
 800922a:	4614      	mov	r4, r2
 800922c:	4699      	mov	r9, r3
 800922e:	eba3 0001 	sub.w	r0, r3, r1
 8009232:	d03d      	beq.n	80092b0 <_FillRect+0x9c>
 8009234:	0043      	lsls	r3, r0, #1
 8009236:	9303      	str	r3, [sp, #12]
 8009238:	1c47      	adds	r7, r0, #1
 800923a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800923c:	429c      	cmp	r4, r3
 800923e:	dc66      	bgt.n	800930e <_FillRect+0xfa>
 8009240:	f8d5 b0cc 	ldr.w	fp, [r5, #204]	@ 0xcc
 8009244:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
 8009246:	f1bb 0f00 	cmp.w	fp, #0
 800924a:	d101      	bne.n	8009250 <_FillRect+0x3c>
 800924c:	46c3      	mov	fp, r8
 800924e:	e007      	b.n	8009260 <_FillRect+0x4c>
 8009250:	e88d 0050 	stmia.w	sp, {r4, r6}
 8009254:	464b      	mov	r3, r9
 8009256:	4622      	mov	r2, r4
 8009258:	4641      	mov	r1, r8
 800925a:	4650      	mov	r0, sl
 800925c:	47d8      	blx	fp
 800925e:	e00d      	b.n	800927c <_FillRect+0x68>
 8009260:	45cb      	cmp	fp, r9
 8009262:	dc0a      	bgt.n	800927a <_FillRect+0x66>
 8009264:	4659      	mov	r1, fp
 8009266:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800926a:	4622      	mov	r2, r4
 800926c:	4650      	mov	r0, sl
 800926e:	4798      	blx	r3
 8009270:	f10b 0b01 	add.w	fp, fp, #1
 8009274:	f826 0b02 	strh.w	r0, [r6], #2
 8009278:	e7f2      	b.n	8009260 <_FillRect+0x4c>
 800927a:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
 800927c:	9a03      	ldr	r2, [sp, #12]
 800927e:	1eb3      	subs	r3, r6, #2
 8009280:	4416      	add	r6, r2
 8009282:	42b3      	cmp	r3, r6
 8009284:	d005      	beq.n	8009292 <_FillRect+0x7e>
 8009286:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8009288:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800928c:	404a      	eors	r2, r1
 800928e:	801a      	strh	r2, [r3, #0]
 8009290:	e7f7      	b.n	8009282 <_FillRect+0x6e>
 8009292:	9400      	str	r4, [sp, #0]
 8009294:	4622      	mov	r2, r4
 8009296:	464b      	mov	r3, r9
 8009298:	4641      	mov	r1, r8
 800929a:	4628      	mov	r0, r5
 800929c:	f8d5 60a8 	ldr.w	r6, [r5, #168]	@ 0xa8
 80092a0:	47b0      	blx	r6
 80092a2:	463a      	mov	r2, r7
 80092a4:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 80092a6:	4628      	mov	r0, r5
 80092a8:	f7ff ff84 	bl	80091b4 <_WriteDataMP>
 80092ac:	3401      	adds	r4, #1
 80092ae:	e7c4      	b.n	800923a <_FillRect+0x26>
 80092b0:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80092b2:	1abc      	subs	r4, r7, r2
 80092b4:	1c67      	adds	r7, r4, #1
 80092b6:	fb00 7707 	mla	r7, r0, r7, r7
 80092ba:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80092bc:	9000      	str	r0, [sp, #0]
 80092be:	f8d5 40a8 	ldr.w	r4, [r5, #168]	@ 0xa8
 80092c2:	4628      	mov	r0, r5
 80092c4:	47a0      	blx	r4
 80092c6:	6833      	ldr	r3, [r6, #0]
 80092c8:	6eae      	ldr	r6, [r5, #104]	@ 0x68
 80092ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092cc:	681c      	ldr	r4, [r3, #0]
 80092ce:	2301      	movs	r3, #1
 80092d0:	f3c4 2907 	ubfx	r9, r4, #8, #8
 80092d4:	eb06 0a03 	add.w	sl, r6, r3
 80092d8:	b2e4      	uxtb	r4, r4
 80092da:	b1c7      	cbz	r7, 800930e <_FillRect+0xfa>
 80092dc:	2ff9      	cmp	r7, #249	@ 0xf9
 80092de:	46b8      	mov	r8, r7
 80092e0:	bf28      	it	cs
 80092e2:	f04f 08f9 	movcs.w	r8, #249	@ 0xf9
 80092e6:	ea4f 0148 	mov.w	r1, r8, lsl #1
 80092ea:	b93b      	cbnz	r3, 80092fc <_FillRect+0xe8>
 80092ec:	f8d5 3120 	ldr.w	r3, [r5, #288]	@ 0x120
 80092f0:	4650      	mov	r0, sl
 80092f2:	4798      	blx	r3
 80092f4:	ebc8 0707 	rsb	r7, r8, r7
 80092f8:	2300      	movs	r3, #0
 80092fa:	e7ee      	b.n	80092da <_FillRect+0xc6>
 80092fc:	4633      	mov	r3, r6
 80092fe:	1872      	adds	r2, r6, r1
 8009300:	4293      	cmp	r3, r2
 8009302:	d0f3      	beq.n	80092ec <_FillRect+0xd8>
 8009304:	f883 9001 	strb.w	r9, [r3, #1]
 8009308:	f803 4f02 	strb.w	r4, [r3, #2]!
 800930c:	e7f8      	b.n	8009300 <_FillRect+0xec>
 800930e:	b005      	add	sp, #20
 8009310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009314:	2000002c 	.word	0x2000002c

08009318 <_DrawBitmap>:
 8009318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931c:	b08f      	sub	sp, #60	@ 0x3c
 800931e:	9303      	str	r3, [sp, #12]
 8009320:	6883      	ldr	r3, [r0, #8]
 8009322:	9309      	str	r3, [sp, #36]	@ 0x24
 8009324:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009326:	9005      	str	r0, [sp, #20]
 8009328:	2b08      	cmp	r3, #8
 800932a:	9106      	str	r1, [sp, #24]
 800932c:	9208      	str	r2, [sp, #32]
 800932e:	d80c      	bhi.n	800934a <_DrawBitmap+0x32>
 8009330:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009332:	f44f 738b 	mov.w	r3, #278	@ 0x116
 8009336:	40d3      	lsrs	r3, r2
 8009338:	07db      	lsls	r3, r3, #31
 800933a:	d506      	bpl.n	800934a <_DrawBitmap+0x32>
 800933c:	4b98      	ldr	r3, [pc, #608]	@ (80095a0 <_DrawBitmap+0x288>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	7c1b      	ldrb	r3, [r3, #16]
 8009342:	f003 0303 	and.w	r3, r3, #3
 8009346:	2b02      	cmp	r3, #2
 8009348:	d010      	beq.n	800936c <_DrawBitmap+0x54>
 800934a:	9b06      	ldr	r3, [sp, #24]
 800934c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800934e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8009350:	1899      	adds	r1, r3, r2
 8009352:	9a08      	ldr	r2, [sp, #32]
 8009354:	9b03      	ldr	r3, [sp, #12]
 8009356:	4402      	add	r2, r0
 8009358:	3a01      	subs	r2, #1
 800935a:	9200      	str	r2, [sp, #0]
 800935c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800935e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009360:	f8d2 40a8 	ldr.w	r4, [r2, #168]	@ 0xa8
 8009364:	9a08      	ldr	r2, [sp, #32]
 8009366:	18cb      	adds	r3, r1, r3
 8009368:	3b01      	subs	r3, #1
 800936a:	47a0      	blx	r4
 800936c:	9b03      	ldr	r3, [sp, #12]
 800936e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009370:	9f08      	ldr	r7, [sp, #32]
 8009372:	3b01      	subs	r3, #1
 8009374:	930d      	str	r3, [sp, #52]	@ 0x34
 8009376:	9b06      	ldr	r3, [sp, #24]
 8009378:	4413      	add	r3, r2
 800937a:	9304      	str	r3, [sp, #16]
 800937c:	9a04      	ldr	r2, [sp, #16]
 800937e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009380:	4413      	add	r3, r2
 8009382:	930c      	str	r3, [sp, #48]	@ 0x30
 8009384:	9b08      	ldr	r3, [sp, #32]
 8009386:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009388:	1afb      	subs	r3, r7, r3
 800938a:	429a      	cmp	r2, r3
 800938c:	f340 8253 	ble.w	8009836 <_DrawBitmap+0x51e>
 8009390:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009392:	3b01      	subs	r3, #1
 8009394:	2b0f      	cmp	r3, #15
 8009396:	f200 8248 	bhi.w	800982a <_DrawBitmap+0x512>
 800939a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800939e:	0010      	.short	0x0010
 80093a0:	024600c0 	.word	0x024600c0
 80093a4:	02460148 	.word	0x02460148
 80093a8:	02460246 	.word	0x02460246
 80093ac:	024601d8 	.word	0x024601d8
 80093b0:	02460246 	.word	0x02460246
 80093b4:	02460246 	.word	0x02460246
 80093b8:	02460246 	.word	0x02460246
 80093bc:	0241      	.short	0x0241
 80093be:	9b05      	ldr	r3, [sp, #20]
 80093c0:	689c      	ldr	r4, [r3, #8]
 80093c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093c8:	4b75      	ldr	r3, [pc, #468]	@ (80095a0 <_DrawBitmap+0x288>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	7c1b      	ldrb	r3, [r3, #16]
 80093ce:	f003 0303 	and.w	r3, r3, #3
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	d022      	beq.n	800941c <_DrawBitmap+0x104>
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	d075      	beq.n	80094c6 <_DrawBitmap+0x1ae>
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d073      	beq.n	80094c6 <_DrawBitmap+0x1ae>
 80093de:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80093e0:	9e03      	ldr	r6, [sp, #12]
 80093e2:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 80093e4:	f8dd b06c 	ldr.w	fp, [sp, #108]	@ 0x6c
 80093e8:	f8b3 9000 	ldrh.w	r9, [r3]
 80093ec:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 80093f0:	f04f 0880 	mov.w	r8, #128	@ 0x80
 80093f4:	f89b 2000 	ldrb.w	r2, [fp]
 80093f8:	fa48 f305 	asr.w	r3, r8, r5
 80093fc:	421a      	tst	r2, r3
 80093fe:	bf14      	ite	ne
 8009400:	4651      	movne	r1, sl
 8009402:	4649      	moveq	r1, r9
 8009404:	3501      	adds	r5, #1
 8009406:	4620      	mov	r0, r4
 8009408:	f7ff feca 	bl	80091a0 <_WriteU16_A1>
 800940c:	2d08      	cmp	r5, #8
 800940e:	bf04      	itt	eq
 8009410:	f10b 0b01 	addeq.w	fp, fp, #1
 8009414:	2500      	moveq	r5, #0
 8009416:	3e01      	subs	r6, #1
 8009418:	d1ec      	bne.n	80093f4 <_DrawBitmap+0xdc>
 800941a:	e206      	b.n	800982a <_DrawBitmap+0x512>
 800941c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800941e:	f8dd b010 	ldr.w	fp, [sp, #16]
 8009422:	f8d4 a06c 	ldr.w	sl, [r4, #108]	@ 0x6c
 8009426:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 800942a:	930a      	str	r3, [sp, #40]	@ 0x28
 800942c:	2500      	movs	r5, #0
 800942e:	f8cd b01c 	str.w	fp, [sp, #28]
 8009432:	462b      	mov	r3, r5
 8009434:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009436:	f892 9000 	ldrb.w	r9, [r2]
 800943a:	2280      	movs	r2, #128	@ 0x80
 800943c:	fa42 f208 	asr.w	r2, r2, r8
 8009440:	ea19 0902 	ands.w	r9, r9, r2
 8009444:	d00d      	beq.n	8009462 <_DrawBitmap+0x14a>
 8009446:	b91b      	cbnz	r3, 8009450 <_DrawBitmap+0x138>
 8009448:	f8d4 a06c 	ldr.w	sl, [r4, #108]	@ 0x6c
 800944c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8009450:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8009454:	f8aa 3000 	strh.w	r3, [sl]
 8009458:	3501      	adds	r5, #1
 800945a:	f10a 0a02 	add.w	sl, sl, #2
 800945e:	2301      	movs	r3, #1
 8009460:	e013      	b.n	800948a <_DrawBitmap+0x172>
 8009462:	2b01      	cmp	r3, #1
 8009464:	d110      	bne.n	8009488 <_DrawBitmap+0x170>
 8009466:	9b07      	ldr	r3, [sp, #28]
 8009468:	9700      	str	r7, [sp, #0]
 800946a:	3b01      	subs	r3, #1
 800946c:	463a      	mov	r2, r7
 800946e:	4659      	mov	r1, fp
 8009470:	4620      	mov	r0, r4
 8009472:	f8d4 60a8 	ldr.w	r6, [r4, #168]	@ 0xa8
 8009476:	47b0      	blx	r6
 8009478:	462a      	mov	r2, r5
 800947a:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800947c:	4620      	mov	r0, r4
 800947e:	f7ff fe99 	bl	80091b4 <_WriteDataMP>
 8009482:	464d      	mov	r5, r9
 8009484:	464b      	mov	r3, r9
 8009486:	e000      	b.n	800948a <_DrawBitmap+0x172>
 8009488:	464b      	mov	r3, r9
 800948a:	9a07      	ldr	r2, [sp, #28]
 800948c:	9903      	ldr	r1, [sp, #12]
 800948e:	f108 0801 	add.w	r8, r8, #1
 8009492:	3201      	adds	r2, #1
 8009494:	f1b8 0f08 	cmp.w	r8, #8
 8009498:	9207      	str	r2, [sp, #28]
 800949a:	bf02      	ittt	eq
 800949c:	9a0a      	ldreq	r2, [sp, #40]	@ 0x28
 800949e:	3201      	addeq	r2, #1
 80094a0:	920a      	streq	r2, [sp, #40]	@ 0x28
 80094a2:	9a04      	ldr	r2, [sp, #16]
 80094a4:	440a      	add	r2, r1
 80094a6:	9907      	ldr	r1, [sp, #28]
 80094a8:	bf08      	it	eq
 80094aa:	f04f 0800 	moveq.w	r8, #0
 80094ae:	4291      	cmp	r1, r2
 80094b0:	d1c0      	bne.n	8009434 <_DrawBitmap+0x11c>
 80094b2:	2d00      	cmp	r5, #0
 80094b4:	f000 81b9 	beq.w	800982a <_DrawBitmap+0x512>
 80094b8:	9700      	str	r7, [sp, #0]
 80094ba:	f8d4 60a8 	ldr.w	r6, [r4, #168]	@ 0xa8
 80094be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094c0:	463a      	mov	r2, r7
 80094c2:	4659      	mov	r1, fp
 80094c4:	e1a6      	b.n	8009814 <_DrawBitmap+0x4fc>
 80094c6:	9b03      	ldr	r3, [sp, #12]
 80094c8:	9a04      	ldr	r2, [sp, #16]
 80094ca:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 80094cc:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 80094d0:	9307      	str	r3, [sp, #28]
 80094d2:	eb03 0a02 	add.w	sl, r3, r2
 80094d6:	f04f 0b80 	mov.w	fp, #128	@ 0x80
 80094da:	9b07      	ldr	r3, [sp, #28]
 80094dc:	f898 2000 	ldrb.w	r2, [r8]
 80094e0:	ebc3 090a 	rsb	r9, r3, sl
 80094e4:	fa4b f305 	asr.w	r3, fp, r5
 80094e8:	421a      	tst	r2, r3
 80094ea:	d00d      	beq.n	8009508 <_DrawBitmap+0x1f0>
 80094ec:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 80094f0:	9805      	ldr	r0, [sp, #20]
 80094f2:	463a      	mov	r2, r7
 80094f4:	4649      	mov	r1, r9
 80094f6:	4798      	blx	r3
 80094f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80094fa:	f8d4 60f8 	ldr.w	r6, [r4, #248]	@ 0xf8
 80094fe:	4043      	eors	r3, r0
 8009500:	463a      	mov	r2, r7
 8009502:	4649      	mov	r1, r9
 8009504:	9805      	ldr	r0, [sp, #20]
 8009506:	47b0      	blx	r6
 8009508:	3501      	adds	r5, #1
 800950a:	9b07      	ldr	r3, [sp, #28]
 800950c:	2d08      	cmp	r5, #8
 800950e:	bf04      	itt	eq
 8009510:	f108 0801 	addeq.w	r8, r8, #1
 8009514:	2500      	moveq	r5, #0
 8009516:	3b01      	subs	r3, #1
 8009518:	9307      	str	r3, [sp, #28]
 800951a:	d1de      	bne.n	80094da <_DrawBitmap+0x1c2>
 800951c:	e185      	b.n	800982a <_DrawBitmap+0x512>
 800951e:	9b05      	ldr	r3, [sp, #20]
 8009520:	689c      	ldr	r4, [r3, #8]
 8009522:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 8180 	beq.w	800982a <_DrawBitmap+0x512>
 800952a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800952c:	f893 b000 	ldrb.w	fp, [r3]
 8009530:	4b1b      	ldr	r3, [pc, #108]	@ (80095a0 <_DrawBitmap+0x288>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	7c1b      	ldrb	r3, [r3, #16]
 8009536:	f013 0303 	ands.w	r3, r3, #3
 800953a:	d00f      	beq.n	800955c <_DrawBitmap+0x244>
 800953c:	2b02      	cmp	r3, #2
 800953e:	f040 8174 	bne.w	800982a <_DrawBitmap+0x512>
 8009542:	9b04      	ldr	r3, [sp, #16]
 8009544:	930a      	str	r3, [sp, #40]	@ 0x28
 8009546:	2600      	movs	r6, #0
 8009548:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800954a:	f8d4 a06c 	ldr.w	sl, [r4, #108]	@ 0x6c
 800954e:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 8009552:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009554:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009558:	4632      	mov	r2, r6
 800955a:	e046      	b.n	80095ea <_DrawBitmap+0x2d2>
 800955c:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 800955e:	9e03      	ldr	r6, [sp, #12]
 8009560:	f8dd 906c 	ldr.w	r9, [sp, #108]	@ 0x6c
 8009564:	f04f 08c0 	mov.w	r8, #192	@ 0xc0
 8009568:	f1c5 0303 	rsb	r3, r5, #3
 800956c:	005a      	lsls	r2, r3, #1
 800956e:	f1c2 0306 	rsb	r3, r2, #6
 8009572:	fa48 f303 	asr.w	r3, r8, r3
 8009576:	ea03 030b 	and.w	r3, r3, fp
 800957a:	40d3      	lsrs	r3, r2
 800957c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800957e:	3501      	adds	r5, #1
 8009580:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009584:	4620      	mov	r0, r4
 8009586:	f7ff fe0b 	bl	80091a0 <_WriteU16_A1>
 800958a:	2d04      	cmp	r5, #4
 800958c:	bf02      	ittt	eq
 800958e:	f899 b001 	ldrbeq.w	fp, [r9, #1]
 8009592:	2500      	moveq	r5, #0
 8009594:	f109 0901 	addeq.w	r9, r9, #1
 8009598:	3e01      	subs	r6, #1
 800959a:	d1e5      	bne.n	8009568 <_DrawBitmap+0x250>
 800959c:	e145      	b.n	800982a <_DrawBitmap+0x512>
 800959e:	bf00      	nop
 80095a0:	2000002c 	.word	0x2000002c
 80095a4:	b91a      	cbnz	r2, 80095ae <_DrawBitmap+0x296>
 80095a6:	f8d4 a06c 	ldr.w	sl, [r4, #108]	@ 0x6c
 80095aa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80095ae:	9a07      	ldr	r2, [sp, #28]
 80095b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80095b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b6:	f8aa 3000 	strh.w	r3, [sl]
 80095ba:	3601      	adds	r6, #1
 80095bc:	f10a 0a02 	add.w	sl, sl, #2
 80095c0:	2201      	movs	r2, #1
 80095c2:	f109 0901 	add.w	r9, r9, #1
 80095c6:	f1b9 0f04 	cmp.w	r9, #4
 80095ca:	f108 0801 	add.w	r8, r8, #1
 80095ce:	d106      	bne.n	80095de <_DrawBitmap+0x2c6>
 80095d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095d2:	f893 b001 	ldrb.w	fp, [r3, #1]
 80095d6:	3301      	adds	r3, #1
 80095d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095da:	f04f 0900 	mov.w	r9, #0
 80095de:	9b04      	ldr	r3, [sp, #16]
 80095e0:	9903      	ldr	r1, [sp, #12]
 80095e2:	440b      	add	r3, r1
 80095e4:	4598      	cmp	r8, r3
 80095e6:	f000 80a6 	beq.w	8009736 <_DrawBitmap+0x41e>
 80095ea:	f1c9 0503 	rsb	r5, r9, #3
 80095ee:	006d      	lsls	r5, r5, #1
 80095f0:	f1c5 0306 	rsb	r3, r5, #6
 80095f4:	21c0      	movs	r1, #192	@ 0xc0
 80095f6:	fa41 f303 	asr.w	r3, r1, r3
 80095fa:	ea03 030b 	and.w	r3, r3, fp
 80095fe:	40eb      	lsrs	r3, r5
 8009600:	9307      	str	r3, [sp, #28]
 8009602:	d1cf      	bne.n	80095a4 <_DrawBitmap+0x28c>
 8009604:	2a01      	cmp	r2, #1
 8009606:	d110      	bne.n	800962a <_DrawBitmap+0x312>
 8009608:	9700      	str	r7, [sp, #0]
 800960a:	f108 33ff 	add.w	r3, r8, #4294967295
 800960e:	463a      	mov	r2, r7
 8009610:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009612:	f8d4 50a8 	ldr.w	r5, [r4, #168]	@ 0xa8
 8009616:	4620      	mov	r0, r4
 8009618:	47a8      	blx	r5
 800961a:	4632      	mov	r2, r6
 800961c:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800961e:	4620      	mov	r0, r4
 8009620:	f7ff fdc8 	bl	80091b4 <_WriteDataMP>
 8009624:	9e07      	ldr	r6, [sp, #28]
 8009626:	4632      	mov	r2, r6
 8009628:	e7cb      	b.n	80095c2 <_DrawBitmap+0x2aa>
 800962a:	9a07      	ldr	r2, [sp, #28]
 800962c:	e7c9      	b.n	80095c2 <_DrawBitmap+0x2aa>
 800962e:	9b05      	ldr	r3, [sp, #20]
 8009630:	689c      	ldr	r4, [r3, #8]
 8009632:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009634:	2b00      	cmp	r3, #0
 8009636:	f000 80f8 	beq.w	800982a <_DrawBitmap+0x512>
 800963a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800963c:	f893 b000 	ldrb.w	fp, [r3]
 8009640:	4b7e      	ldr	r3, [pc, #504]	@ (800983c <_DrawBitmap+0x524>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	7c1b      	ldrb	r3, [r3, #16]
 8009646:	f013 0303 	ands.w	r3, r3, #3
 800964a:	d00f      	beq.n	800966c <_DrawBitmap+0x354>
 800964c:	2b02      	cmp	r3, #2
 800964e:	f040 80ec 	bne.w	800982a <_DrawBitmap+0x512>
 8009652:	9b04      	ldr	r3, [sp, #16]
 8009654:	930a      	str	r3, [sp, #40]	@ 0x28
 8009656:	2600      	movs	r6, #0
 8009658:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800965a:	f8d4 a06c 	ldr.w	sl, [r4, #108]	@ 0x6c
 800965e:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 8009662:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009664:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009668:	4632      	mov	r2, r6
 800966a:	e042      	b.n	80096f2 <_DrawBitmap+0x3da>
 800966c:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 800966e:	9e03      	ldr	r6, [sp, #12]
 8009670:	f8dd 906c 	ldr.w	r9, [sp, #108]	@ 0x6c
 8009674:	f04f 08f0 	mov.w	r8, #240	@ 0xf0
 8009678:	f1c5 0301 	rsb	r3, r5, #1
 800967c:	009a      	lsls	r2, r3, #2
 800967e:	f1c2 0304 	rsb	r3, r2, #4
 8009682:	fa48 f303 	asr.w	r3, r8, r3
 8009686:	ea03 030b 	and.w	r3, r3, fp
 800968a:	40d3      	lsrs	r3, r2
 800968c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800968e:	3501      	adds	r5, #1
 8009690:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009694:	4620      	mov	r0, r4
 8009696:	f7ff fd83 	bl	80091a0 <_WriteU16_A1>
 800969a:	2d02      	cmp	r5, #2
 800969c:	bf02      	ittt	eq
 800969e:	f899 b001 	ldrbeq.w	fp, [r9, #1]
 80096a2:	2500      	moveq	r5, #0
 80096a4:	f109 0901 	addeq.w	r9, r9, #1
 80096a8:	3e01      	subs	r6, #1
 80096aa:	d1e5      	bne.n	8009678 <_DrawBitmap+0x360>
 80096ac:	e0bd      	b.n	800982a <_DrawBitmap+0x512>
 80096ae:	b91a      	cbnz	r2, 80096b8 <_DrawBitmap+0x3a0>
 80096b0:	f8d4 a06c 	ldr.w	sl, [r4, #108]	@ 0x6c
 80096b4:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80096b8:	9a07      	ldr	r2, [sp, #28]
 80096ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80096bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c0:	f8aa 3000 	strh.w	r3, [sl]
 80096c4:	3601      	adds	r6, #1
 80096c6:	f10a 0a02 	add.w	sl, sl, #2
 80096ca:	2201      	movs	r2, #1
 80096cc:	f109 0901 	add.w	r9, r9, #1
 80096d0:	f1b9 0f02 	cmp.w	r9, #2
 80096d4:	f108 0801 	add.w	r8, r8, #1
 80096d8:	d106      	bne.n	80096e8 <_DrawBitmap+0x3d0>
 80096da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096dc:	f893 b001 	ldrb.w	fp, [r3, #1]
 80096e0:	3301      	adds	r3, #1
 80096e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096e4:	f04f 0900 	mov.w	r9, #0
 80096e8:	9b03      	ldr	r3, [sp, #12]
 80096ea:	9904      	ldr	r1, [sp, #16]
 80096ec:	440b      	add	r3, r1
 80096ee:	4598      	cmp	r8, r3
 80096f0:	d021      	beq.n	8009736 <_DrawBitmap+0x41e>
 80096f2:	f1c9 0501 	rsb	r5, r9, #1
 80096f6:	00ad      	lsls	r5, r5, #2
 80096f8:	f1c5 0304 	rsb	r3, r5, #4
 80096fc:	21f0      	movs	r1, #240	@ 0xf0
 80096fe:	fa41 f303 	asr.w	r3, r1, r3
 8009702:	ea03 030b 	and.w	r3, r3, fp
 8009706:	40eb      	lsrs	r3, r5
 8009708:	9307      	str	r3, [sp, #28]
 800970a:	d1d0      	bne.n	80096ae <_DrawBitmap+0x396>
 800970c:	2a01      	cmp	r2, #1
 800970e:	d110      	bne.n	8009732 <_DrawBitmap+0x41a>
 8009710:	9700      	str	r7, [sp, #0]
 8009712:	f108 33ff 	add.w	r3, r8, #4294967295
 8009716:	463a      	mov	r2, r7
 8009718:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800971a:	f8d4 50a8 	ldr.w	r5, [r4, #168]	@ 0xa8
 800971e:	4620      	mov	r0, r4
 8009720:	47a8      	blx	r5
 8009722:	4632      	mov	r2, r6
 8009724:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8009726:	4620      	mov	r0, r4
 8009728:	f7ff fd44 	bl	80091b4 <_WriteDataMP>
 800972c:	9e07      	ldr	r6, [sp, #28]
 800972e:	4632      	mov	r2, r6
 8009730:	e7cc      	b.n	80096cc <_DrawBitmap+0x3b4>
 8009732:	9a07      	ldr	r2, [sp, #28]
 8009734:	e7ca      	b.n	80096cc <_DrawBitmap+0x3b4>
 8009736:	2e00      	cmp	r6, #0
 8009738:	d077      	beq.n	800982a <_DrawBitmap+0x512>
 800973a:	9700      	str	r7, [sp, #0]
 800973c:	463a      	mov	r2, r7
 800973e:	f8d4 50a8 	ldr.w	r5, [r4, #168]	@ 0xa8
 8009742:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009744:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009746:	4620      	mov	r0, r4
 8009748:	47a8      	blx	r5
 800974a:	4632      	mov	r2, r6
 800974c:	e065      	b.n	800981a <_DrawBitmap+0x502>
 800974e:	9b05      	ldr	r3, [sp, #20]
 8009750:	689c      	ldr	r4, [r3, #8]
 8009752:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009754:	2b00      	cmp	r3, #0
 8009756:	d068      	beq.n	800982a <_DrawBitmap+0x512>
 8009758:	4b38      	ldr	r3, [pc, #224]	@ (800983c <_DrawBitmap+0x524>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	7c1b      	ldrb	r3, [r3, #16]
 800975e:	f013 0303 	ands.w	r3, r3, #3
 8009762:	d00f      	beq.n	8009784 <_DrawBitmap+0x46c>
 8009764:	2b02      	cmp	r3, #2
 8009766:	d160      	bne.n	800982a <_DrawBitmap+0x512>
 8009768:	f8dd a018 	ldr.w	sl, [sp, #24]
 800976c:	9a03      	ldr	r2, [sp, #12]
 800976e:	f8d4 806c 	ldr.w	r8, [r4, #108]	@ 0x6c
 8009772:	f8dd b06c 	ldr.w	fp, [sp, #108]	@ 0x6c
 8009776:	f8cd a01c 	str.w	sl, [sp, #28]
 800977a:	2500      	movs	r5, #0
 800977c:	4452      	add	r2, sl
 800977e:	462b      	mov	r3, r5
 8009780:	920a      	str	r2, [sp, #40]	@ 0x28
 8009782:	e024      	b.n	80097ce <_DrawBitmap+0x4b6>
 8009784:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009786:	9b03      	ldr	r3, [sp, #12]
 8009788:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800978a:	1b5b      	subs	r3, r3, r5
 800978c:	4413      	add	r3, r2
 800978e:	2b00      	cmp	r3, #0
 8009790:	dd4b      	ble.n	800982a <_DrawBitmap+0x512>
 8009792:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009796:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009798:	4620      	mov	r0, r4
 800979a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800979e:	f7ff fcff 	bl	80091a0 <_WriteU16_A1>
 80097a2:	e7f0      	b.n	8009786 <_DrawBitmap+0x46e>
 80097a4:	b91b      	cbnz	r3, 80097ae <_DrawBitmap+0x496>
 80097a6:	f8d4 806c 	ldr.w	r8, [r4, #108]	@ 0x6c
 80097aa:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80097ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80097b0:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 80097b4:	f8a8 3000 	strh.w	r3, [r8]
 80097b8:	3501      	adds	r5, #1
 80097ba:	f108 0802 	add.w	r8, r8, #2
 80097be:	2301      	movs	r3, #1
 80097c0:	9a07      	ldr	r2, [sp, #28]
 80097c2:	3201      	adds	r2, #1
 80097c4:	9207      	str	r2, [sp, #28]
 80097c6:	9907      	ldr	r1, [sp, #28]
 80097c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097ca:	4291      	cmp	r1, r2
 80097cc:	d019      	beq.n	8009802 <_DrawBitmap+0x4ea>
 80097ce:	f81b 9b01 	ldrb.w	r9, [fp], #1
 80097d2:	f1b9 0f00 	cmp.w	r9, #0
 80097d6:	d1e5      	bne.n	80097a4 <_DrawBitmap+0x48c>
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d110      	bne.n	80097fe <_DrawBitmap+0x4e6>
 80097dc:	9b07      	ldr	r3, [sp, #28]
 80097de:	9700      	str	r7, [sp, #0]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	463a      	mov	r2, r7
 80097e4:	4651      	mov	r1, sl
 80097e6:	4620      	mov	r0, r4
 80097e8:	f8d4 60a8 	ldr.w	r6, [r4, #168]	@ 0xa8
 80097ec:	47b0      	blx	r6
 80097ee:	462a      	mov	r2, r5
 80097f0:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80097f2:	4620      	mov	r0, r4
 80097f4:	f7ff fcde 	bl	80091b4 <_WriteDataMP>
 80097f8:	464d      	mov	r5, r9
 80097fa:	464b      	mov	r3, r9
 80097fc:	e7e0      	b.n	80097c0 <_DrawBitmap+0x4a8>
 80097fe:	464b      	mov	r3, r9
 8009800:	e7de      	b.n	80097c0 <_DrawBitmap+0x4a8>
 8009802:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009804:	9a06      	ldr	r2, [sp, #24]
 8009806:	4413      	add	r3, r2
 8009808:	b17d      	cbz	r5, 800982a <_DrawBitmap+0x512>
 800980a:	9700      	str	r7, [sp, #0]
 800980c:	f8d4 60a8 	ldr.w	r6, [r4, #168]	@ 0xa8
 8009810:	463a      	mov	r2, r7
 8009812:	4651      	mov	r1, sl
 8009814:	4620      	mov	r0, r4
 8009816:	47b0      	blx	r6
 8009818:	462a      	mov	r2, r5
 800981a:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800981c:	4620      	mov	r0, r4
 800981e:	e002      	b.n	8009826 <_DrawBitmap+0x50e>
 8009820:	9a03      	ldr	r2, [sp, #12]
 8009822:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8009824:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009826:	f7ff fcc5 	bl	80091b4 <_WriteDataMP>
 800982a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800982c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800982e:	4413      	add	r3, r2
 8009830:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009832:	3701      	adds	r7, #1
 8009834:	e5a6      	b.n	8009384 <_DrawBitmap+0x6c>
 8009836:	b00f      	add	sp, #60	@ 0x3c
 8009838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800983c:	2000002c 	.word	0x2000002c

08009840 <GUIDRV_FlexColor_SetMode16bppC0B8>:
 8009840:	b510      	push	{r4, lr}
 8009842:	4604      	mov	r4, r0
 8009844:	f7ff fbba 	bl	8008fbc <GUIDRV_FlexColor__InitOnce>
 8009848:	68a4      	ldr	r4, [r4, #8]
 800984a:	4b10      	ldr	r3, [pc, #64]	@ (800988c <GUIDRV_FlexColor_SetMode16bppC0B8+0x4c>)
 800984c:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
 8009850:	4b0f      	ldr	r3, [pc, #60]	@ (8009890 <GUIDRV_FlexColor_SetMode16bppC0B8+0x50>)
 8009852:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 8009856:	4b0f      	ldr	r3, [pc, #60]	@ (8009894 <GUIDRV_FlexColor_SetMode16bppC0B8+0x54>)
 8009858:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
 800985c:	4b0e      	ldr	r3, [pc, #56]	@ (8009898 <GUIDRV_FlexColor_SetMode16bppC0B8+0x58>)
 800985e:	f8c4 30f8 	str.w	r3, [r4, #248]	@ 0xf8
 8009862:	4b0e      	ldr	r3, [pc, #56]	@ (800989c <GUIDRV_FlexColor_SetMode16bppC0B8+0x5c>)
 8009864:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
 8009868:	4b0d      	ldr	r3, [pc, #52]	@ (80098a0 <GUIDRV_FlexColor_SetMode16bppC0B8+0x60>)
 800986a:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
 800986e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 8009872:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
 8009876:	2108      	movs	r1, #8
 8009878:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 800987c:	4620      	mov	r0, r4
 800987e:	4798      	blx	r3
 8009880:	2310      	movs	r3, #16
 8009882:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009884:	4b07      	ldr	r3, [pc, #28]	@ (80098a4 <GUIDRV_FlexColor_SetMode16bppC0B8+0x64>)
 8009886:	6463      	str	r3, [r4, #68]	@ 0x44
 8009888:	bd10      	pop	{r4, pc}
 800988a:	bf00      	nop
 800988c:	08009319 	.word	0x08009319
 8009890:	08009215 	.word	0x08009215
 8009894:	08008f0b 	.word	0x08008f0b
 8009898:	08008e83 	.word	0x08008e83
 800989c:	08009203 	.word	0x08009203
 80098a0:	0800920d 	.word	0x0800920d
 80098a4:	0800d0b0 	.word	0x0800d0b0

080098a8 <_SetPhysRAMAddr>:
 80098a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ac:	4604      	mov	r4, r0
 80098ae:	460e      	mov	r6, r1
 80098b0:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 80098b4:	212a      	movs	r1, #42	@ 0x2a
 80098b6:	4615      	mov	r5, r2
 80098b8:	4798      	blx	r3
 80098ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80098bc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80098c0:	4431      	add	r1, r6
 80098c2:	4620      	mov	r0, r4
 80098c4:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80098c8:	4798      	blx	r3
 80098ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80098cc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80098d0:	b2b7      	uxth	r7, r6
 80098d2:	4439      	add	r1, r7
 80098d4:	4620      	mov	r0, r4
 80098d6:	b2c9      	uxtb	r1, r1
 80098d8:	4798      	blx	r3
 80098da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80098dc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80098e0:	4431      	add	r1, r6
 80098e2:	4620      	mov	r0, r4
 80098e4:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80098e8:	4798      	blx	r3
 80098ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80098ec:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80098f0:	4439      	add	r1, r7
 80098f2:	4620      	mov	r0, r4
 80098f4:	b2c9      	uxtb	r1, r1
 80098f6:	4798      	blx	r3
 80098f8:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 80098fc:	4620      	mov	r0, r4
 80098fe:	212b      	movs	r1, #43	@ 0x2b
 8009900:	4798      	blx	r3
 8009902:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009904:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009908:	4429      	add	r1, r5
 800990a:	4620      	mov	r0, r4
 800990c:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8009910:	4798      	blx	r3
 8009912:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009914:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009918:	b2ae      	uxth	r6, r5
 800991a:	4431      	add	r1, r6
 800991c:	4620      	mov	r0, r4
 800991e:	b2c9      	uxtb	r1, r1
 8009920:	4798      	blx	r3
 8009922:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009924:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009928:	4429      	add	r1, r5
 800992a:	4620      	mov	r0, r4
 800992c:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8009930:	4798      	blx	r3
 8009932:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009934:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009938:	4431      	add	r1, r6
 800993a:	4620      	mov	r0, r4
 800993c:	b2c9      	uxtb	r1, r1
 800993e:	4798      	blx	r3
 8009940:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8009944:	4620      	mov	r0, r4
 8009946:	212c      	movs	r1, #44	@ 0x2c
 8009948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800994c:	4718      	bx	r3

0800994e <_SetRect>:
 800994e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009952:	4604      	mov	r4, r0
 8009954:	4688      	mov	r8, r1
 8009956:	461f      	mov	r7, r3
 8009958:	212a      	movs	r1, #42	@ 0x2a
 800995a:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800995e:	9d06      	ldr	r5, [sp, #24]
 8009960:	4616      	mov	r6, r2
 8009962:	4798      	blx	r3
 8009964:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009966:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800996a:	4441      	add	r1, r8
 800996c:	4620      	mov	r0, r4
 800996e:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8009972:	4798      	blx	r3
 8009974:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009976:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800997a:	4441      	add	r1, r8
 800997c:	4620      	mov	r0, r4
 800997e:	b2c9      	uxtb	r1, r1
 8009980:	4798      	blx	r3
 8009982:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009984:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009988:	4439      	add	r1, r7
 800998a:	4620      	mov	r0, r4
 800998c:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8009990:	4798      	blx	r3
 8009992:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009994:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009998:	4439      	add	r1, r7
 800999a:	4620      	mov	r0, r4
 800999c:	b2c9      	uxtb	r1, r1
 800999e:	4798      	blx	r3
 80099a0:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 80099a4:	4620      	mov	r0, r4
 80099a6:	212b      	movs	r1, #43	@ 0x2b
 80099a8:	4798      	blx	r3
 80099aa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80099ac:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80099b0:	4431      	add	r1, r6
 80099b2:	4620      	mov	r0, r4
 80099b4:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80099b8:	4798      	blx	r3
 80099ba:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80099bc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80099c0:	4431      	add	r1, r6
 80099c2:	4620      	mov	r0, r4
 80099c4:	b2c9      	uxtb	r1, r1
 80099c6:	4798      	blx	r3
 80099c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80099ca:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80099ce:	4429      	add	r1, r5
 80099d0:	4620      	mov	r0, r4
 80099d2:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80099d6:	4798      	blx	r3
 80099d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80099da:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80099de:	4429      	add	r1, r5
 80099e0:	4620      	mov	r0, r4
 80099e2:	b2c9      	uxtb	r1, r1
 80099e4:	4798      	blx	r3
 80099e6:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 80099ea:	4620      	mov	r0, r4
 80099ec:	212c      	movs	r1, #44	@ 0x2c
 80099ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099f2:	4718      	bx	r3

080099f4 <_SetOrientation>:
 80099f4:	b513      	push	{r0, r1, r4, lr}
 80099f6:	4a0e      	ldr	r2, [pc, #56]	@ (8009a30 <_SetOrientation+0x3c>)
 80099f8:	4604      	mov	r4, r0
 80099fa:	6851      	ldr	r1, [r2, #4]
 80099fc:	6810      	ldr	r0, [r2, #0]
 80099fe:	466b      	mov	r3, sp
 8009a00:	c303      	stmia	r3!, {r0, r1}
 8009a02:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8009a06:	4620      	mov	r0, r4
 8009a08:	2136      	movs	r1, #54	@ 0x36
 8009a0a:	4798      	blx	r3
 8009a0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a0e:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
 8009a10:	aa02      	add	r2, sp, #8
 8009a12:	4413      	add	r3, r2
 8009a14:	f021 01e0 	bic.w	r1, r1, #224	@ 0xe0
 8009a18:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8009a1c:	4319      	orrs	r1, r3
 8009a1e:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009a22:	b289      	uxth	r1, r1
 8009a24:	4620      	mov	r0, r4
 8009a26:	b002      	add	sp, #8
 8009a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a2c:	4718      	bx	r3
 8009a2e:	bf00      	nop
 8009a30:	0800c96c 	.word	0x0800c96c

08009a34 <_ReadPixel_16bpp_B8>:
 8009a34:	b513      	push	{r0, r1, r4, lr}
 8009a36:	4604      	mov	r4, r0
 8009a38:	f8d0 3114 	ldr.w	r3, [r0, #276]	@ 0x114
 8009a3c:	202e      	movs	r0, #46	@ 0x2e
 8009a3e:	4798      	blx	r3
 8009a40:	6a21      	ldr	r1, [r4, #32]
 8009a42:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 8009a46:	4668      	mov	r0, sp
 8009a48:	3103      	adds	r1, #3
 8009a4a:	4798      	blx	r3
 8009a4c:	6a23      	ldr	r3, [r4, #32]
 8009a4e:	eb0d 0203 	add.w	r2, sp, r3
 8009a52:	f81d 3003 	ldrb.w	r3, [sp, r3]
 8009a56:	7850      	ldrb	r0, [r2, #1]
 8009a58:	08db      	lsrs	r3, r3, #3
 8009a5a:	0880      	lsrs	r0, r0, #2
 8009a5c:	02db      	lsls	r3, r3, #11
 8009a5e:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
 8009a62:	7890      	ldrb	r0, [r2, #2]
 8009a64:	ea43 00d0 	orr.w	r0, r3, r0, lsr #3
 8009a68:	b002      	add	sp, #8
 8009a6a:	bd10      	pop	{r4, pc}

08009a6c <_ReadPixel_16bpp_B16_I>:
 8009a6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a6e:	4604      	mov	r4, r0
 8009a70:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
 8009a74:	202e      	movs	r0, #46	@ 0x2e
 8009a76:	4798      	blx	r3
 8009a78:	6a21      	ldr	r1, [r4, #32]
 8009a7a:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 8009a7e:	4668      	mov	r0, sp
 8009a80:	3102      	adds	r1, #2
 8009a82:	4798      	blx	r3
 8009a84:	6a22      	ldr	r2, [r4, #32]
 8009a86:	eb0d 0342 	add.w	r3, sp, r2, lsl #1
 8009a8a:	885b      	ldrh	r3, [r3, #2]
 8009a8c:	f3c3 00c4 	ubfx	r0, r3, #3, #5
 8009a90:	115b      	asrs	r3, r3, #5
 8009a92:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8009a96:	4303      	orrs	r3, r0
 8009a98:	f83d 0012 	ldrh.w	r0, [sp, r2, lsl #1]
 8009a9c:	0200      	lsls	r0, r0, #8
 8009a9e:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8009aa2:	4318      	orrs	r0, r3
 8009aa4:	b004      	add	sp, #16
 8009aa6:	bd10      	pop	{r4, pc}

08009aa8 <_SetReg_B8>:
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	4605      	mov	r5, r0
 8009aac:	460c      	mov	r4, r1
 8009aae:	f8d0 3114 	ldr.w	r3, [r0, #276]	@ 0x114
 8009ab2:	0a08      	lsrs	r0, r1, #8
 8009ab4:	4798      	blx	r3
 8009ab6:	f8d5 3114 	ldr.w	r3, [r5, #276]	@ 0x114
 8009aba:	b2e0      	uxtb	r0, r4
 8009abc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ac0:	4718      	bx	r3

08009ac2 <_SetReg_B16>:
 8009ac2:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
 8009ac6:	4608      	mov	r0, r1
 8009ac8:	4718      	bx	r3

08009aca <_WritePara_B8>:
 8009aca:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
 8009ace:	b2c8      	uxtb	r0, r1
 8009ad0:	4718      	bx	r3

08009ad2 <_WritePara_B16>:
 8009ad2:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
 8009ad6:	4608      	mov	r0, r1
 8009ad8:	4718      	bx	r3
	...

08009adc <_SetInterface>:
 8009adc:	2908      	cmp	r1, #8
 8009ade:	d002      	beq.n	8009ae6 <_SetInterface+0xa>
 8009ae0:	2910      	cmp	r1, #16
 8009ae2:	d005      	beq.n	8009af0 <_SetInterface+0x14>
 8009ae4:	4770      	bx	lr
 8009ae6:	4b06      	ldr	r3, [pc, #24]	@ (8009b00 <_SetInterface+0x24>)
 8009ae8:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
 8009aec:	4b05      	ldr	r3, [pc, #20]	@ (8009b04 <_SetInterface+0x28>)
 8009aee:	e003      	b.n	8009af8 <_SetInterface+0x1c>
 8009af0:	4b05      	ldr	r3, [pc, #20]	@ (8009b08 <_SetInterface+0x2c>)
 8009af2:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
 8009af6:	4b05      	ldr	r3, [pc, #20]	@ (8009b0c <_SetInterface+0x30>)
 8009af8:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	08009aa9 	.word	0x08009aa9
 8009b04:	08009acb 	.word	0x08009acb
 8009b08:	08009ac3 	.word	0x08009ac3
 8009b0c:	08009ad3 	.word	0x08009ad3

08009b10 <_ReadRect_16bpp_B8>:
 8009b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b12:	b085      	sub	sp, #20
 8009b14:	6885      	ldr	r5, [r0, #8]
 8009b16:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8009b18:	9700      	str	r7, [sp, #0]
 8009b1a:	1abc      	subs	r4, r7, r2
 8009b1c:	1a58      	subs	r0, r3, r1
 8009b1e:	3401      	adds	r4, #1
 8009b20:	fb00 4404 	mla	r4, r0, r4, r4
 8009b24:	f8d5 70a8 	ldr.w	r7, [r5, #168]	@ 0xa8
 8009b28:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	47b8      	blx	r7
 8009b2e:	f8d5 3114 	ldr.w	r3, [r5, #276]	@ 0x114
 8009b32:	202e      	movs	r0, #46	@ 0x2e
 8009b34:	4798      	blx	r3
 8009b36:	f8d5 3130 	ldr.w	r3, [r5, #304]	@ 0x130
 8009b3a:	6a29      	ldr	r1, [r5, #32]
 8009b3c:	a802      	add	r0, sp, #8
 8009b3e:	4798      	blx	r3
 8009b40:	f8d5 3130 	ldr.w	r3, [r5, #304]	@ 0x130
 8009b44:	2103      	movs	r1, #3
 8009b46:	a802      	add	r0, sp, #8
 8009b48:	4798      	blx	r3
 8009b4a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8009b4e:	089a      	lsrs	r2, r3, #2
 8009b50:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009b54:	08db      	lsrs	r3, r3, #3
 8009b56:	02db      	lsls	r3, r3, #11
 8009b58:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8009b5c:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8009b60:	3c01      	subs	r4, #1
 8009b62:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8009b66:	f826 3b02 	strh.w	r3, [r6], #2
 8009b6a:	d1e9      	bne.n	8009b40 <_ReadRect_16bpp_B8+0x30>
 8009b6c:	b005      	add	sp, #20
 8009b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b70 <_ReadRect_16bpp_B16_I>:
 8009b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b72:	b087      	sub	sp, #28
 8009b74:	6885      	ldr	r5, [r0, #8]
 8009b76:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8009b78:	9700      	str	r7, [sp, #0]
 8009b7a:	1abc      	subs	r4, r7, r2
 8009b7c:	1a58      	subs	r0, r3, r1
 8009b7e:	3401      	adds	r4, #1
 8009b80:	fb00 4404 	mla	r4, r0, r4, r4
 8009b84:	f8d5 70a8 	ldr.w	r7, [r5, #168]	@ 0xa8
 8009b88:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	47b8      	blx	r7
 8009b8e:	f8d5 3134 	ldr.w	r3, [r5, #308]	@ 0x134
 8009b92:	202e      	movs	r0, #46	@ 0x2e
 8009b94:	4798      	blx	r3
 8009b96:	f8d5 3150 	ldr.w	r3, [r5, #336]	@ 0x150
 8009b9a:	6a29      	ldr	r1, [r5, #32]
 8009b9c:	a802      	add	r0, sp, #8
 8009b9e:	4798      	blx	r3
 8009ba0:	f8d5 3150 	ldr.w	r3, [r5, #336]	@ 0x150
 8009ba4:	2102      	movs	r1, #2
 8009ba6:	a802      	add	r0, sp, #8
 8009ba8:	4798      	blx	r3
 8009baa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8009bae:	f3c3 02c4 	ubfx	r2, r3, #3, #5
 8009bb2:	115b      	asrs	r3, r3, #5
 8009bb4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8009bbe:	0212      	lsls	r2, r2, #8
 8009bc0:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	3c01      	subs	r4, #1
 8009bc8:	f826 3b02 	strh.w	r3, [r6], #2
 8009bcc:	d1e8      	bne.n	8009ba0 <_ReadRect_16bpp_B16_I+0x30>
 8009bce:	b007      	add	sp, #28
 8009bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009bd4 <GUIDRV_FlexColor_SetFunc66709>:
 8009bd4:	b510      	push	{r4, lr}
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	f7ff f9f0 	bl	8008fbc <GUIDRV_FlexColor__InitOnce>
 8009bdc:	68a3      	ldr	r3, [r4, #8]
 8009bde:	4a11      	ldr	r2, [pc, #68]	@ (8009c24 <GUIDRV_FlexColor_SetFunc66709+0x50>)
 8009be0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8009be4:	4a10      	ldr	r2, [pc, #64]	@ (8009c28 <GUIDRV_FlexColor_SetFunc66709+0x54>)
 8009be6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8009bea:	4a10      	ldr	r2, [pc, #64]	@ (8009c2c <GUIDRV_FlexColor_SetFunc66709+0x58>)
 8009bec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8009bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8009c30 <GUIDRV_FlexColor_SetFunc66709+0x5c>)
 8009bf2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8009bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8009c34 <GUIDRV_FlexColor_SetFunc66709+0x60>)
 8009bf8:	6810      	ldr	r0, [r2, #0]
 8009bfa:	6852      	ldr	r2, [r2, #4]
 8009bfc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8009c00:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8009c02:	f8c3 00b4 	str.w	r0, [r3, #180]	@ 0xb4
 8009c06:	f022 0203 	bic.w	r2, r2, #3
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	480a      	ldr	r0, [pc, #40]	@ (8009c38 <GUIDRV_FlexColor_SetFunc66709+0x64>)
 8009c0e:	84da      	strh	r2, [r3, #38]	@ 0x26
 8009c10:	4a0a      	ldr	r2, [pc, #40]	@ (8009c3c <GUIDRV_FlexColor_SetFunc66709+0x68>)
 8009c12:	f8c3 10bc 	str.w	r1, [r3, #188]	@ 0xbc
 8009c16:	f8c3 00cc 	str.w	r0, [r3, #204]	@ 0xcc
 8009c1a:	f8c3 10d0 	str.w	r1, [r3, #208]	@ 0xd0
 8009c1e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8009c22:	bd10      	pop	{r4, pc}
 8009c24:	080098a9 	.word	0x080098a9
 8009c28:	0800994f 	.word	0x0800994f
 8009c2c:	080099f5 	.word	0x080099f5
 8009c30:	08009a35 	.word	0x08009a35
 8009c34:	20000040 	.word	0x20000040
 8009c38:	08009b11 	.word	0x08009b11
 8009c3c:	08009add 	.word	0x08009add

08009c40 <_GetDevData>:
 8009c40:	2901      	cmp	r1, #1
 8009c42:	4802      	ldr	r0, [pc, #8]	@ (8009c4c <_GetDevData+0xc>)
 8009c44:	bf18      	it	ne
 8009c46:	2000      	movne	r0, #0
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	0800d0b0 	.word	0x0800d0b0

08009c50 <_GetDevFunc>:
 8009c50:	2916      	cmp	r1, #22
 8009c52:	4802      	ldr	r0, [pc, #8]	@ (8009c5c <_GetDevFunc+0xc>)
 8009c54:	bf18      	it	ne
 8009c56:	2000      	movne	r0, #0
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	0800a741 	.word	0x0800a741

08009c60 <_SetOrg>:
 8009c60:	6800      	ldr	r0, [r0, #0]
 8009c62:	b110      	cbz	r0, 8009c6a <_SetOrg+0xa>
 8009c64:	68c3      	ldr	r3, [r0, #12]
 8009c66:	6a1b      	ldr	r3, [r3, #32]
 8009c68:	4718      	bx	r3
 8009c6a:	4770      	bx	lr

08009c6c <_GetRect>:
 8009c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c6e:	6880      	ldr	r0, [r0, #8]
 8009c70:	460d      	mov	r5, r1
 8009c72:	f7fc fe71 	bl	8006958 <GUI_ALLOC_LockH>
 8009c76:	4602      	mov	r2, r0
 8009c78:	a802      	add	r0, sp, #8
 8009c7a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8009c7e:	8914      	ldrh	r4, [r2, #8]
 8009c80:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8009c84:	802b      	strh	r3, [r5, #0]
 8009c86:	441c      	add	r4, r3
 8009c88:	8953      	ldrh	r3, [r2, #10]
 8009c8a:	f840 2d04 	str.w	r2, [r0, #-4]!
 8009c8e:	440b      	add	r3, r1
 8009c90:	3b01      	subs	r3, #1
 8009c92:	3c01      	subs	r4, #1
 8009c94:	8069      	strh	r1, [r5, #2]
 8009c96:	80ac      	strh	r4, [r5, #4]
 8009c98:	80eb      	strh	r3, [r5, #6]
 8009c9a:	f7fc fe6b 	bl	8006974 <GUI_ALLOC_UnlockH>
 8009c9e:	b003      	add	sp, #12
 8009ca0:	bd30      	pop	{r4, r5, pc}
	...

08009ca4 <_XY2PTR>:
 8009ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8009ce0 <_XY2PTR+0x3c>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009caa:	4606      	mov	r6, r0
 8009cac:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8009cae:	460d      	mov	r5, r1
 8009cb0:	f7fc fe52 	bl	8006958 <GUI_ALLOC_LockH>
 8009cb4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8009cb8:	68c4      	ldr	r4, [r0, #12]
 8009cba:	1a69      	subs	r1, r5, r1
 8009cbc:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8009cc0:	ab02      	add	r3, sp, #8
 8009cc2:	1b76      	subs	r6, r6, r5
 8009cc4:	0076      	lsls	r6, r6, #1
 8009cc6:	f843 0d04 	str.w	r0, [r3, #-4]!
 8009cca:	3618      	adds	r6, #24
 8009ccc:	fb04 6501 	mla	r5, r4, r1, r6
 8009cd0:	1944      	adds	r4, r0, r5
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7fc fe4e 	bl	8006974 <GUI_ALLOC_UnlockH>
 8009cd8:	4620      	mov	r0, r4
 8009cda:	b002      	add	sp, #8
 8009cdc:	bd70      	pop	{r4, r5, r6, pc}
 8009cde:	bf00      	nop
 8009ce0:	2000002c 	.word	0x2000002c

08009ce4 <_GetPixelIndex>:
 8009ce4:	b508      	push	{r3, lr}
 8009ce6:	4608      	mov	r0, r1
 8009ce8:	4611      	mov	r1, r2
 8009cea:	f7ff ffdb 	bl	8009ca4 <_XY2PTR>
 8009cee:	8800      	ldrh	r0, [r0, #0]
 8009cf0:	bd08      	pop	{r3, pc}
	...

08009cf4 <_XorPixel>:
 8009cf4:	4b14      	ldr	r3, [pc, #80]	@ (8009d48 <_XorPixel+0x54>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cfa:	4607      	mov	r7, r0
 8009cfc:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8009cfe:	4616      	mov	r6, r2
 8009d00:	460d      	mov	r5, r1
 8009d02:	f7fc fe29 	bl	8006958 <GUI_ALLOC_LockH>
 8009d06:	4631      	mov	r1, r6
 8009d08:	9000      	str	r0, [sp, #0]
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	f7ff ffca 	bl	8009ca4 <_XY2PTR>
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	4604      	mov	r4, r0
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	4798      	blx	r3
 8009d18:	8823      	ldrh	r3, [r4, #0]
 8009d1a:	4058      	eors	r0, r3
 8009d1c:	9b00      	ldr	r3, [sp, #0]
 8009d1e:	8020      	strh	r0, [r4, #0]
 8009d20:	6958      	ldr	r0, [r3, #20]
 8009d22:	b160      	cbz	r0, 8009d3e <_XorPixel+0x4a>
 8009d24:	f7fc fe18 	bl	8006958 <GUI_ALLOC_LockH>
 8009d28:	ac02      	add	r4, sp, #8
 8009d2a:	6883      	ldr	r3, [r0, #8]
 8009d2c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4632      	mov	r2, r6
 8009d34:	4629      	mov	r1, r5
 8009d36:	4798      	blx	r3
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f7fc fe1b 	bl	8006974 <GUI_ALLOC_UnlockH>
 8009d3e:	4668      	mov	r0, sp
 8009d40:	f7fc fe18 	bl	8006974 <GUI_ALLOC_UnlockH>
 8009d44:	b003      	add	sp, #12
 8009d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d48:	2000002c 	.word	0x2000002c

08009d4c <_SetPixelIndex>:
 8009d4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d4e:	461c      	mov	r4, r3
 8009d50:	4b10      	ldr	r3, [pc, #64]	@ (8009d94 <_SetPixelIndex+0x48>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8009d56:	460d      	mov	r5, r1
 8009d58:	4616      	mov	r6, r2
 8009d5a:	f7fc fdfd 	bl	8006958 <GUI_ALLOC_LockH>
 8009d5e:	4631      	mov	r1, r6
 8009d60:	9000      	str	r0, [sp, #0]
 8009d62:	4628      	mov	r0, r5
 8009d64:	f7ff ff9e 	bl	8009ca4 <_XY2PTR>
 8009d68:	9b00      	ldr	r3, [sp, #0]
 8009d6a:	8004      	strh	r4, [r0, #0]
 8009d6c:	6958      	ldr	r0, [r3, #20]
 8009d6e:	b160      	cbz	r0, 8009d8a <_SetPixelIndex+0x3e>
 8009d70:	f7fc fdf2 	bl	8006958 <GUI_ALLOC_LockH>
 8009d74:	ac02      	add	r4, sp, #8
 8009d76:	6883      	ldr	r3, [r0, #8]
 8009d78:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4632      	mov	r2, r6
 8009d80:	4629      	mov	r1, r5
 8009d82:	4798      	blx	r3
 8009d84:	4620      	mov	r0, r4
 8009d86:	f7fc fdf5 	bl	8006974 <GUI_ALLOC_UnlockH>
 8009d8a:	4668      	mov	r0, sp
 8009d8c:	f7fc fdf2 	bl	8006974 <GUI_ALLOC_UnlockH>
 8009d90:	b002      	add	sp, #8
 8009d92:	bd70      	pop	{r4, r5, r6, pc}
 8009d94:	2000002c 	.word	0x2000002c

08009d98 <_DrawVLine>:
 8009d98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d9c:	4c2c      	ldr	r4, [pc, #176]	@ (8009e50 <_DrawVLine+0xb8>)
 8009d9e:	461e      	mov	r6, r3
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	4680      	mov	r8, r0
 8009da4:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8009da6:	460f      	mov	r7, r1
 8009da8:	4615      	mov	r5, r2
 8009daa:	f7fc fdd5 	bl	8006958 <GUI_ALLOC_LockH>
 8009dae:	9000      	str	r0, [sp, #0]
 8009db0:	6940      	ldr	r0, [r0, #20]
 8009db2:	46a1      	mov	r9, r4
 8009db4:	b108      	cbz	r0, 8009dba <_DrawVLine+0x22>
 8009db6:	f7fc fdcf 	bl	8006958 <GUI_ALLOC_LockH>
 8009dba:	9001      	str	r0, [sp, #4]
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	4638      	mov	r0, r7
 8009dc0:	f7ff ff70 	bl	8009ca4 <_XY2PTR>
 8009dc4:	f8d9 3000 	ldr.w	r3, [r9]
 8009dc8:	7c1a      	ldrb	r2, [r3, #16]
 8009dca:	07d2      	lsls	r2, r2, #31
 8009dcc:	4604      	mov	r4, r0
 8009dce:	d51f      	bpl.n	8009e10 <_DrawVLine+0x78>
 8009dd0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	4798      	blx	r3
 8009dd8:	fa1f f880 	uxth.w	r8, r0
 8009ddc:	9801      	ldr	r0, [sp, #4]
 8009dde:	b120      	cbz	r0, 8009dea <_DrawVLine+0x52>
 8009de0:	6883      	ldr	r3, [r0, #8]
 8009de2:	462a      	mov	r2, r5
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4639      	mov	r1, r7
 8009de8:	4798      	blx	r3
 8009dea:	8823      	ldrh	r3, [r4, #0]
 8009dec:	ea88 0303 	eor.w	r3, r8, r3
 8009df0:	8023      	strh	r3, [r4, #0]
 8009df2:	9b00      	ldr	r3, [sp, #0]
 8009df4:	3501      	adds	r5, #1
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	42b5      	cmp	r5, r6
 8009dfa:	441c      	add	r4, r3
 8009dfc:	ddee      	ble.n	8009ddc <_DrawVLine+0x44>
 8009dfe:	4668      	mov	r0, sp
 8009e00:	f7fc fdb8 	bl	8006974 <GUI_ALLOC_UnlockH>
 8009e04:	9b01      	ldr	r3, [sp, #4]
 8009e06:	b303      	cbz	r3, 8009e4a <_DrawVLine+0xb2>
 8009e08:	a801      	add	r0, sp, #4
 8009e0a:	f7fc fdb3 	bl	8006974 <GUI_ALLOC_UnlockH>
 8009e0e:	e01c      	b.n	8009e4a <_DrawVLine+0xb2>
 8009e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e12:	9a00      	ldr	r2, [sp, #0]
 8009e14:	f8d3 9000 	ldr.w	r9, [r3]
 8009e18:	9b01      	ldr	r3, [sp, #4]
 8009e1a:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8009e1e:	b163      	cbz	r3, 8009e3a <_DrawVLine+0xa2>
 8009e20:	9801      	ldr	r0, [sp, #4]
 8009e22:	6883      	ldr	r3, [r0, #8]
 8009e24:	462a      	mov	r2, r5
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4639      	mov	r1, r7
 8009e2a:	3501      	adds	r5, #1
 8009e2c:	4798      	blx	r3
 8009e2e:	42ae      	cmp	r6, r5
 8009e30:	f8a4 9000 	strh.w	r9, [r4]
 8009e34:	4444      	add	r4, r8
 8009e36:	daf3      	bge.n	8009e20 <_DrawVLine+0x88>
 8009e38:	e7e1      	b.n	8009dfe <_DrawVLine+0x66>
 8009e3a:	1b75      	subs	r5, r6, r5
 8009e3c:	3501      	adds	r5, #1
 8009e3e:	3d01      	subs	r5, #1
 8009e40:	f8a4 9000 	strh.w	r9, [r4]
 8009e44:	4444      	add	r4, r8
 8009e46:	d1fa      	bne.n	8009e3e <_DrawVLine+0xa6>
 8009e48:	e7d9      	b.n	8009dfe <_DrawVLine+0x66>
 8009e4a:	b003      	add	sp, #12
 8009e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e50:	2000002c 	.word	0x2000002c

08009e54 <_FillRect>:
 8009e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e58:	4f2a      	ldr	r7, [pc, #168]	@ (8009f04 <_FillRect+0xb0>)
 8009e5a:	461d      	mov	r5, r3
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	4614      	mov	r4, r2
 8009e60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e62:	b087      	sub	sp, #28
 8009e64:	6812      	ldr	r2, [r2, #0]
 8009e66:	9202      	str	r2, [sp, #8]
 8009e68:	4683      	mov	fp, r0
 8009e6a:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8009e6c:	4689      	mov	r9, r1
 8009e6e:	f7fc fd73 	bl	8006958 <GUI_ALLOC_LockH>
 8009e72:	4621      	mov	r1, r4
 8009e74:	9004      	str	r0, [sp, #16]
 8009e76:	4648      	mov	r0, r9
 8009e78:	f7ff ff14 	bl	8009ca4 <_XY2PTR>
 8009e7c:	9a04      	ldr	r2, [sp, #16]
 8009e7e:	4606      	mov	r6, r0
 8009e80:	6950      	ldr	r0, [r2, #20]
 8009e82:	68d3      	ldr	r3, [r2, #12]
 8009e84:	9303      	str	r3, [sp, #12]
 8009e86:	ebc9 0505 	rsb	r5, r9, r5
 8009e8a:	f105 0a01 	add.w	sl, r5, #1
 8009e8e:	b188      	cbz	r0, 8009eb4 <_FillRect+0x60>
 8009e90:	f7fc fd62 	bl	8006958 <GUI_ALLOC_LockH>
 8009e94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e96:	f10d 0818 	add.w	r8, sp, #24
 8009e9a:	1b1b      	subs	r3, r3, r4
 8009e9c:	f848 0d04 	str.w	r0, [r8, #-4]!
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	4622      	mov	r2, r4
 8009ea6:	4653      	mov	r3, sl
 8009ea8:	4649      	mov	r1, r9
 8009eaa:	f000 fbf5 	bl	800a698 <GUI_USAGE_AddRect>
 8009eae:	4640      	mov	r0, r8
 8009eb0:	f7fc fd60 	bl	8006974 <GUI_ALLOC_UnlockH>
 8009eb4:	f8bd 8008 	ldrh.w	r8, [sp, #8]
 8009eb8:	006d      	lsls	r5, r5, #1
 8009eba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ebc:	429c      	cmp	r4, r3
 8009ebe:	dc1a      	bgt.n	8009ef6 <_FillRect+0xa2>
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	7c1b      	ldrb	r3, [r3, #16]
 8009ec4:	07db      	lsls	r3, r3, #31
 8009ec6:	d50d      	bpl.n	8009ee4 <_FillRect+0x90>
 8009ec8:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	4798      	blx	r3
 8009ed0:	1eb3      	subs	r3, r6, #2
 8009ed2:	b280      	uxth	r0, r0
 8009ed4:	1971      	adds	r1, r6, r5
 8009ed6:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8009eda:	4042      	eors	r2, r0
 8009edc:	428b      	cmp	r3, r1
 8009ede:	801a      	strh	r2, [r3, #0]
 8009ee0:	d1f9      	bne.n	8009ed6 <_FillRect+0x82>
 8009ee2:	e004      	b.n	8009eee <_FillRect+0x9a>
 8009ee4:	4652      	mov	r2, sl
 8009ee6:	4641      	mov	r1, r8
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f7fe f8af 	bl	800804c <GUI__memset16>
 8009eee:	9b03      	ldr	r3, [sp, #12]
 8009ef0:	3401      	adds	r4, #1
 8009ef2:	441e      	add	r6, r3
 8009ef4:	e7e1      	b.n	8009eba <_FillRect+0x66>
 8009ef6:	a804      	add	r0, sp, #16
 8009ef8:	f7fc fd3c 	bl	8006974 <GUI_ALLOC_UnlockH>
 8009efc:	b007      	add	sp, #28
 8009efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f02:	bf00      	nop
 8009f04:	2000002c 	.word	0x2000002c

08009f08 <_DrawHLine>:
 8009f08:	b507      	push	{r0, r1, r2, lr}
 8009f0a:	9200      	str	r2, [sp, #0]
 8009f0c:	f7ff ffa2 	bl	8009e54 <_FillRect>
 8009f10:	b003      	add	sp, #12
 8009f12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009f18 <_DrawBitmap>:
 8009f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1c:	4d99      	ldr	r5, [pc, #612]	@ (800a184 <_DrawBitmap+0x26c>)
 8009f1e:	b091      	sub	sp, #68	@ 0x44
 8009f20:	460e      	mov	r6, r1
 8009f22:	9302      	str	r3, [sp, #8]
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	900a      	str	r0, [sp, #40]	@ 0x28
 8009f28:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8009f2a:	9205      	str	r2, [sp, #20]
 8009f2c:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 8009f2e:	f7fc fd13 	bl	8006958 <GUI_ALLOC_LockH>
 8009f32:	900e      	str	r0, [sp, #56]	@ 0x38
 8009f34:	6940      	ldr	r0, [r0, #20]
 8009f36:	b108      	cbz	r0, 8009f3c <_DrawBitmap+0x24>
 8009f38:	f7fc fd0e 	bl	8006958 <GUI_ALLOC_LockH>
 8009f3c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009f3e:	a810      	add	r0, sp, #64	@ 0x40
 8009f40:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	9306      	str	r3, [sp, #24]
 8009f48:	f7fc fd14 	bl	8006974 <GUI_ALLOC_UnlockH>
 8009f4c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009f4e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8009f50:	eb06 0b03 	add.w	fp, r6, r3
 8009f54:	b150      	cbz	r0, 8009f6c <_DrawBitmap+0x54>
 8009f56:	682b      	ldr	r3, [r5, #0]
 8009f58:	7c1b      	ldrb	r3, [r3, #16]
 8009f5a:	0799      	lsls	r1, r3, #30
 8009f5c:	d106      	bne.n	8009f6c <_DrawBitmap+0x54>
 8009f5e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	9a05      	ldr	r2, [sp, #20]
 8009f64:	9b02      	ldr	r3, [sp, #8]
 8009f66:	4659      	mov	r1, fp
 8009f68:	f000 fb96 	bl	800a698 <GUI_USAGE_AddRect>
 8009f6c:	9905      	ldr	r1, [sp, #20]
 8009f6e:	4658      	mov	r0, fp
 8009f70:	f7ff fe98 	bl	8009ca4 <_XY2PTR>
 8009f74:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009f76:	2b10      	cmp	r3, #16
 8009f78:	4605      	mov	r5, r0
 8009f7a:	d134      	bne.n	8009fe6 <_DrawBitmap+0xce>
 8009f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f7e:	b133      	cbz	r3, 8009f8e <_DrawBitmap+0x76>
 8009f80:	9b02      	ldr	r3, [sp, #8]
 8009f82:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 800a18c <_DrawBitmap+0x274>
 8009f86:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8009f8a:	2600      	movs	r6, #0
 8009f8c:	e012      	b.n	8009fb4 <_DrawBitmap+0x9c>
 8009f8e:	4b7e      	ldr	r3, [pc, #504]	@ (800a188 <_DrawBitmap+0x270>)
 8009f90:	681e      	ldr	r6, [r3, #0]
 8009f92:	2e00      	cmp	r6, #0
 8009f94:	d0f4      	beq.n	8009f80 <_DrawBitmap+0x68>
 8009f96:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8009f98:	9301      	str	r3, [sp, #4]
 8009f9a:	9b06      	ldr	r3, [sp, #24]
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	9a02      	ldr	r2, [sp, #8]
 8009fa0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009fa2:	4621      	mov	r1, r4
 8009fa4:	47b0      	blx	r6
 8009fa6:	e352      	b.n	800a64e <_DrawBitmap+0x736>
 8009fa8:	b944      	cbnz	r4, 8009fbc <_DrawBitmap+0xa4>
 8009faa:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8009fac:	441c      	add	r4, r3
 8009fae:	9b06      	ldr	r3, [sp, #24]
 8009fb0:	3601      	adds	r6, #1
 8009fb2:	441d      	add	r5, r3
 8009fb4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009fb6:	429e      	cmp	r6, r3
 8009fb8:	dbf6      	blt.n	8009fa8 <_DrawBitmap+0x90>
 8009fba:	e343      	b.n	800a644 <_DrawBitmap+0x72c>
 8009fbc:	2d00      	cmp	r5, #0
 8009fbe:	d0f4      	beq.n	8009faa <_DrawBitmap+0x92>
 8009fc0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8009fc2:	f8d9 3000 	ldr.w	r3, [r9]
 8009fc6:	4642      	mov	r2, r8
 8009fc8:	4621      	mov	r1, r4
 8009fca:	4628      	mov	r0, r5
 8009fcc:	4798      	blx	r3
 8009fce:	2f00      	cmp	r7, #0
 8009fd0:	d0eb      	beq.n	8009faa <_DrawBitmap+0x92>
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	9a05      	ldr	r2, [sp, #20]
 8009fd6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8009fda:	9b02      	ldr	r3, [sp, #8]
 8009fdc:	4432      	add	r2, r6
 8009fde:	4659      	mov	r1, fp
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	47d0      	blx	sl
 8009fe4:	e7e1      	b.n	8009faa <_DrawBitmap+0x92>
 8009fe6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009fe8:	2b17      	cmp	r3, #23
 8009fea:	dd44      	ble.n	800a076 <_DrawBitmap+0x15e>
 8009fec:	f06f 0303 	mvn.w	r3, #3
 8009ff0:	fb03 f30b 	mul.w	r3, r3, fp
 8009ff4:	9307      	str	r3, [sp, #28]
 8009ff6:	f06f 0301 	mvn.w	r3, #1
 8009ffa:	fb03 f30b 	mul.w	r3, r3, fp
 8009ffe:	9304      	str	r3, [sp, #16]
 800a000:	9b02      	ldr	r3, [sp, #8]
 800a002:	445b      	add	r3, fp
 800a004:	f04f 0800 	mov.w	r8, #0
 800a008:	9308      	str	r3, [sp, #32]
 800a00a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a00c:	4598      	cmp	r8, r3
 800a00e:	f280 8319 	bge.w	800a644 <_DrawBitmap+0x72c>
 800a012:	9b05      	ldr	r3, [sp, #20]
 800a014:	eb03 0908 	add.w	r9, r3, r8
 800a018:	b934      	cbnz	r4, 800a028 <_DrawBitmap+0x110>
 800a01a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800a01c:	441c      	add	r4, r3
 800a01e:	9b06      	ldr	r3, [sp, #24]
 800a020:	f108 0801 	add.w	r8, r8, #1
 800a024:	441d      	add	r5, r3
 800a026:	e7f0      	b.n	800a00a <_DrawBitmap+0xf2>
 800a028:	2d00      	cmp	r5, #0
 800a02a:	d0f6      	beq.n	800a01a <_DrawBitmap+0x102>
 800a02c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 800a02e:	b137      	cbz	r7, 800a03e <_DrawBitmap+0x126>
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	464a      	mov	r2, r9
 800a034:	685e      	ldr	r6, [r3, #4]
 800a036:	9b02      	ldr	r3, [sp, #8]
 800a038:	4659      	mov	r1, fp
 800a03a:	4638      	mov	r0, r7
 800a03c:	47b0      	blx	r6
 800a03e:	9b07      	ldr	r3, [sp, #28]
 800a040:	eb04 0a03 	add.w	sl, r4, r3
 800a044:	9b04      	ldr	r3, [sp, #16]
 800a046:	18eb      	adds	r3, r5, r3
 800a048:	9303      	str	r3, [sp, #12]
 800a04a:	465e      	mov	r6, fp
 800a04c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a04e:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4798      	blx	r3
 800a058:	9b03      	ldr	r3, [sp, #12]
 800a05a:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
 800a05e:	b12f      	cbz	r7, 800a06c <_DrawBitmap+0x154>
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	464a      	mov	r2, r9
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4631      	mov	r1, r6
 800a068:	4638      	mov	r0, r7
 800a06a:	4798      	blx	r3
 800a06c:	9b08      	ldr	r3, [sp, #32]
 800a06e:	3601      	adds	r6, #1
 800a070:	429e      	cmp	r6, r3
 800a072:	d1eb      	bne.n	800a04c <_DrawBitmap+0x134>
 800a074:	e7d1      	b.n	800a01a <_DrawBitmap+0x102>
 800a076:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a078:	2b08      	cmp	r3, #8
 800a07a:	f040 8089 	bne.w	800a190 <_DrawBitmap+0x278>
 800a07e:	9b02      	ldr	r3, [sp, #8]
 800a080:	9e05      	ldr	r6, [sp, #20]
 800a082:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 800a184 <_DrawBitmap+0x26c>
 800a086:	005b      	lsls	r3, r3, #1
 800a088:	9307      	str	r3, [sp, #28]
 800a08a:	f06f 0301 	mvn.w	r3, #1
 800a08e:	fb03 f30b 	mul.w	r3, r3, fp
 800a092:	9303      	str	r3, [sp, #12]
 800a094:	9b02      	ldr	r3, [sp, #8]
 800a096:	445b      	add	r3, fp
 800a098:	3c01      	subs	r4, #1
 800a09a:	9304      	str	r3, [sp, #16]
 800a09c:	9b05      	ldr	r3, [sp, #20]
 800a09e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a0a0:	1af3      	subs	r3, r6, r3
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	f104 0101 	add.w	r1, r4, #1
 800a0a8:	f340 82cc 	ble.w	800a644 <_DrawBitmap+0x72c>
 800a0ac:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d036      	beq.n	800a120 <_DrawBitmap+0x208>
 800a0b2:	f8d9 3000 	ldr.w	r3, [r9]
 800a0b6:	7c1b      	ldrb	r3, [r3, #16]
 800a0b8:	f013 0303 	ands.w	r3, r3, #3
 800a0bc:	d009      	beq.n	800a0d2 <_DrawBitmap+0x1ba>
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	d15a      	bne.n	800a178 <_DrawBitmap+0x260>
 800a0c2:	9b03      	ldr	r3, [sp, #12]
 800a0c4:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
 800a0c8:	18eb      	adds	r3, r5, r3
 800a0ca:	9308      	str	r3, [sp, #32]
 800a0cc:	46a2      	mov	sl, r4
 800a0ce:	465f      	mov	r7, fp
 800a0d0:	e021      	b.n	800a116 <_DrawBitmap+0x1fe>
 800a0d2:	9b07      	ldr	r3, [sp, #28]
 800a0d4:	4622      	mov	r2, r4
 800a0d6:	18e9      	adds	r1, r5, r3
 800a0d8:	462b      	mov	r3, r5
 800a0da:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800a0de:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 800a0e0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800a0e4:	f823 0b02 	strh.w	r0, [r3], #2
 800a0e8:	428b      	cmp	r3, r1
 800a0ea:	d1f6      	bne.n	800a0da <_DrawBitmap+0x1c2>
 800a0ec:	e044      	b.n	800a178 <_DrawBitmap+0x260>
 800a0ee:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800a0f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0f4:	9a08      	ldr	r2, [sp, #32]
 800a0f6:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 800a0fa:	f1b8 0f00 	cmp.w	r8, #0
 800a0fe:	d006      	beq.n	800a10e <_DrawBitmap+0x1f6>
 800a100:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a104:	4632      	mov	r2, r6
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4639      	mov	r1, r7
 800a10a:	4640      	mov	r0, r8
 800a10c:	4798      	blx	r3
 800a10e:	9b04      	ldr	r3, [sp, #16]
 800a110:	3701      	adds	r7, #1
 800a112:	42bb      	cmp	r3, r7
 800a114:	d030      	beq.n	800a178 <_DrawBitmap+0x260>
 800a116:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0f7      	beq.n	800a10e <_DrawBitmap+0x1f6>
 800a11e:	e7e6      	b.n	800a0ee <_DrawBitmap+0x1d6>
 800a120:	f8d9 3000 	ldr.w	r3, [r9]
 800a124:	7c1b      	ldrb	r3, [r3, #16]
 800a126:	f013 0303 	ands.w	r3, r3, #3
 800a12a:	d009      	beq.n	800a140 <_DrawBitmap+0x228>
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d123      	bne.n	800a178 <_DrawBitmap+0x260>
 800a130:	9b03      	ldr	r3, [sp, #12]
 800a132:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
 800a136:	18eb      	adds	r3, r5, r3
 800a138:	9308      	str	r3, [sp, #32]
 800a13a:	46a2      	mov	sl, r4
 800a13c:	465f      	mov	r7, fp
 800a13e:	e016      	b.n	800a16e <_DrawBitmap+0x256>
 800a140:	4b12      	ldr	r3, [pc, #72]	@ (800a18c <_DrawBitmap+0x274>)
 800a142:	9a02      	ldr	r2, [sp, #8]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4628      	mov	r0, r5
 800a148:	4798      	blx	r3
 800a14a:	e015      	b.n	800a178 <_DrawBitmap+0x260>
 800a14c:	9a08      	ldr	r2, [sp, #32]
 800a14e:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 800a152:	f1b8 0f00 	cmp.w	r8, #0
 800a156:	d006      	beq.n	800a166 <_DrawBitmap+0x24e>
 800a158:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a15c:	4632      	mov	r2, r6
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4639      	mov	r1, r7
 800a162:	4640      	mov	r0, r8
 800a164:	4798      	blx	r3
 800a166:	9b04      	ldr	r3, [sp, #16]
 800a168:	3701      	adds	r7, #1
 800a16a:	429f      	cmp	r7, r3
 800a16c:	d004      	beq.n	800a178 <_DrawBitmap+0x260>
 800a16e:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800a172:	2b00      	cmp	r3, #0
 800a174:	d0f7      	beq.n	800a166 <_DrawBitmap+0x24e>
 800a176:	e7e9      	b.n	800a14c <_DrawBitmap+0x234>
 800a178:	9b06      	ldr	r3, [sp, #24]
 800a17a:	441d      	add	r5, r3
 800a17c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800a17e:	3601      	adds	r6, #1
 800a180:	441c      	add	r4, r3
 800a182:	e78b      	b.n	800a09c <_DrawBitmap+0x184>
 800a184:	2000002c 	.word	0x2000002c
 800a188:	200002d4 	.word	0x200002d4
 800a18c:	20000030 	.word	0x20000030
 800a190:	4bad      	ldr	r3, [pc, #692]	@ (800a448 <_DrawBitmap+0x530>)
 800a192:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800a194:	2a00      	cmp	r2, #0
 800a196:	bf08      	it	eq
 800a198:	461a      	moveq	r2, r3
 800a19a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a19c:	921f      	str	r2, [sp, #124]	@ 0x7c
 800a19e:	005b      	lsls	r3, r3, #1
 800a1a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1a2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800a1a8:	1c63      	adds	r3, r4, #1
 800a1aa:	9303      	str	r3, [sp, #12]
 800a1ac:	1c83      	adds	r3, r0, #2
 800a1ae:	9307      	str	r3, [sp, #28]
 800a1b0:	9b05      	ldr	r3, [sp, #20]
 800a1b2:	9304      	str	r3, [sp, #16]
 800a1b4:	9b07      	ldr	r3, [sp, #28]
 800a1b6:	9a05      	ldr	r2, [sp, #20]
 800a1b8:	1e9c      	subs	r4, r3, #2
 800a1ba:	9b03      	ldr	r3, [sp, #12]
 800a1bc:	f103 3aff 	add.w	sl, r3, #4294967295
 800a1c0:	9b04      	ldr	r3, [sp, #16]
 800a1c2:	1a9b      	subs	r3, r3, r2
 800a1c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	f340 823c 	ble.w	800a644 <_DrawBitmap+0x72c>
 800a1cc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	f000 80c5 	beq.w	800a35e <_DrawBitmap+0x446>
 800a1d4:	2b04      	cmp	r3, #4
 800a1d6:	f000 8160 	beq.w	800a49a <_DrawBitmap+0x582>
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	f040 8226 	bne.w	800a62c <_DrawBitmap+0x714>
 800a1e0:	4b9a      	ldr	r3, [pc, #616]	@ (800a44c <_DrawBitmap+0x534>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 800a1e6:	f7fc fbb7 	bl	8006958 <GUI_ALLOC_LockH>
 800a1ea:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a1ec:	4a98      	ldr	r2, [pc, #608]	@ (800a450 <_DrawBitmap+0x538>)
 800a1ee:	900e      	str	r0, [sp, #56]	@ 0x38
 800a1f0:	f1c3 0508 	rsb	r5, r3, #8
 800a1f4:	9b03      	ldr	r3, [sp, #12]
 800a1f6:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 800a1fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a1fe:	9f02      	ldr	r7, [sp, #8]
 800a200:	5cd6      	ldrb	r6, [r2, r3]
 800a202:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a204:	411e      	asrs	r6, r3
 800a206:	4b91      	ldr	r3, [pc, #580]	@ (800a44c <_DrawBitmap+0x534>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	7c1b      	ldrb	r3, [r3, #16]
 800a20c:	f003 0303 	and.w	r3, r3, #3
 800a210:	2b02      	cmp	r3, #2
 800a212:	d01f      	beq.n	800a254 <_DrawBitmap+0x33c>
 800a214:	2b03      	cmp	r3, #3
 800a216:	d057      	beq.n	800a2c8 <_DrawBitmap+0x3b0>
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d055      	beq.n	800a2c8 <_DrawBitmap+0x3b0>
 800a21c:	42bd      	cmp	r5, r7
 800a21e:	bf28      	it	cs
 800a220:	463d      	movcs	r5, r7
 800a222:	1b7f      	subs	r7, r7, r5
 800a224:	462b      	mov	r3, r5
 800a226:	4622      	mov	r2, r4
 800a228:	f006 0101 	and.w	r1, r6, #1
 800a22c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800a22e:	3b01      	subs	r3, #1
 800a230:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800a234:	f822 1b02 	strh.w	r1, [r2], #2
 800a238:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a23c:	d1f4      	bne.n	800a228 <_DrawBitmap+0x310>
 800a23e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800a242:	2f00      	cmp	r7, #0
 800a244:	f000 8087 	beq.w	800a356 <_DrawBitmap+0x43e>
 800a248:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800a24c:	4a80      	ldr	r2, [pc, #512]	@ (800a450 <_DrawBitmap+0x538>)
 800a24e:	2508      	movs	r5, #8
 800a250:	5cd6      	ldrb	r6, [r2, r3]
 800a252:	e7e3      	b.n	800a21c <_DrawBitmap+0x304>
 800a254:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a256:	889b      	ldrh	r3, [r3, #4]
 800a258:	9308      	str	r3, [sp, #32]
 800a25a:	46d8      	mov	r8, fp
 800a25c:	42bd      	cmp	r5, r7
 800a25e:	bf28      	it	cs
 800a260:	463d      	movcs	r5, r7
 800a262:	1b7f      	subs	r7, r7, r5
 800a264:	f1b9 0f00 	cmp.w	r9, #0
 800a268:	d022      	beq.n	800a2b0 <_DrawBitmap+0x398>
 800a26a:	b91e      	cbnz	r6, 800a274 <_DrawBitmap+0x35c>
 800a26c:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800a270:	44a8      	add	r8, r5
 800a272:	e021      	b.n	800a2b8 <_DrawBitmap+0x3a0>
 800a274:	07f2      	lsls	r2, r6, #31
 800a276:	d509      	bpl.n	800a28c <_DrawBitmap+0x374>
 800a278:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a27c:	9a04      	ldr	r2, [sp, #16]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4641      	mov	r1, r8
 800a282:	4648      	mov	r0, r9
 800a284:	4798      	blx	r3
 800a286:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a28a:	8023      	strh	r3, [r4, #0]
 800a28c:	3d01      	subs	r5, #1
 800a28e:	f108 0801 	add.w	r8, r8, #1
 800a292:	f104 0402 	add.w	r4, r4, #2
 800a296:	d00f      	beq.n	800a2b8 <_DrawBitmap+0x3a0>
 800a298:	0876      	lsrs	r6, r6, #1
 800a29a:	e7e6      	b.n	800a26a <_DrawBitmap+0x352>
 800a29c:	07f3      	lsls	r3, r6, #31
 800a29e:	bf44      	itt	mi
 800a2a0:	f8bd 3020 	ldrhmi.w	r3, [sp, #32]
 800a2a4:	8023      	strhmi	r3, [r4, #0]
 800a2a6:	3d01      	subs	r5, #1
 800a2a8:	f104 0402 	add.w	r4, r4, #2
 800a2ac:	d004      	beq.n	800a2b8 <_DrawBitmap+0x3a0>
 800a2ae:	0876      	lsrs	r6, r6, #1
 800a2b0:	2e00      	cmp	r6, #0
 800a2b2:	d1f3      	bne.n	800a29c <_DrawBitmap+0x384>
 800a2b4:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800a2b8:	2f00      	cmp	r7, #0
 800a2ba:	d04c      	beq.n	800a356 <_DrawBitmap+0x43e>
 800a2bc:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800a2c0:	4a63      	ldr	r2, [pc, #396]	@ (800a450 <_DrawBitmap+0x538>)
 800a2c2:	2508      	movs	r5, #8
 800a2c4:	5cd6      	ldrb	r6, [r2, r3]
 800a2c6:	e7c9      	b.n	800a25c <_DrawBitmap+0x344>
 800a2c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	4798      	blx	r3
 800a2d0:	b283      	uxth	r3, r0
 800a2d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2d4:	9b03      	ldr	r3, [sp, #12]
 800a2d6:	9308      	str	r3, [sp, #32]
 800a2d8:	46d8      	mov	r8, fp
 800a2da:	42bd      	cmp	r5, r7
 800a2dc:	bf28      	it	cs
 800a2de:	463d      	movcs	r5, r7
 800a2e0:	1b7f      	subs	r7, r7, r5
 800a2e2:	f1b9 0f00 	cmp.w	r9, #0
 800a2e6:	d01c      	beq.n	800a322 <_DrawBitmap+0x40a>
 800a2e8:	eb08 0305 	add.w	r3, r8, r5
 800a2ec:	46a2      	mov	sl, r4
 800a2ee:	930d      	str	r3, [sp, #52]	@ 0x34
 800a2f0:	07f0      	lsls	r0, r6, #31
 800a2f2:	d50c      	bpl.n	800a30e <_DrawBitmap+0x3f6>
 800a2f4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a2f8:	9a04      	ldr	r2, [sp, #16]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4641      	mov	r1, r8
 800a2fe:	4648      	mov	r0, r9
 800a300:	4798      	blx	r3
 800a302:	f8ba 3000 	ldrh.w	r3, [sl]
 800a306:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a308:	4053      	eors	r3, r2
 800a30a:	f8aa 3000 	strh.w	r3, [sl]
 800a30e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a310:	f108 0801 	add.w	r8, r8, #1
 800a314:	4598      	cmp	r8, r3
 800a316:	f10a 0a02 	add.w	sl, sl, #2
 800a31a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a31e:	d1e7      	bne.n	800a2f0 <_DrawBitmap+0x3d8>
 800a320:	e00d      	b.n	800a33e <_DrawBitmap+0x426>
 800a322:	462a      	mov	r2, r5
 800a324:	4623      	mov	r3, r4
 800a326:	07f1      	lsls	r1, r6, #31
 800a328:	bf41      	itttt	mi
 800a32a:	8819      	ldrhmi	r1, [r3, #0]
 800a32c:	9809      	ldrmi	r0, [sp, #36]	@ 0x24
 800a32e:	4041      	eormi	r1, r0
 800a330:	8019      	strhmi	r1, [r3, #0]
 800a332:	3a01      	subs	r2, #1
 800a334:	f103 0302 	add.w	r3, r3, #2
 800a338:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a33c:	d1f3      	bne.n	800a326 <_DrawBitmap+0x40e>
 800a33e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800a342:	b147      	cbz	r7, 800a356 <_DrawBitmap+0x43e>
 800a344:	9b08      	ldr	r3, [sp, #32]
 800a346:	4a42      	ldr	r2, [pc, #264]	@ (800a450 <_DrawBitmap+0x538>)
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	5cd6      	ldrb	r6, [r2, r3]
 800a34c:	9b08      	ldr	r3, [sp, #32]
 800a34e:	3301      	adds	r3, #1
 800a350:	9308      	str	r3, [sp, #32]
 800a352:	2508      	movs	r5, #8
 800a354:	e7c1      	b.n	800a2da <_DrawBitmap+0x3c2>
 800a356:	a80e      	add	r0, sp, #56	@ 0x38
 800a358:	f7fc fb0c 	bl	8006974 <GUI_ALLOC_UnlockH>
 800a35c:	e166      	b.n	800a62c <_DrawBitmap+0x714>
 800a35e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a360:	f1c3 0504 	rsb	r5, r3, #4
 800a364:	9b03      	ldr	r3, [sp, #12]
 800a366:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 800a36a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a36c:	409e      	lsls	r6, r3
 800a36e:	4b37      	ldr	r3, [pc, #220]	@ (800a44c <_DrawBitmap+0x534>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	7c1b      	ldrb	r3, [r3, #16]
 800a374:	f003 0303 	and.w	r3, r3, #3
 800a378:	2b01      	cmp	r3, #1
 800a37a:	b2ed      	uxtb	r5, r5
 800a37c:	b2f6      	uxtb	r6, r6
 800a37e:	d009      	beq.n	800a394 <_DrawBitmap+0x47c>
 800a380:	d30a      	bcc.n	800a398 <_DrawBitmap+0x480>
 800a382:	2b02      	cmp	r3, #2
 800a384:	f040 8152 	bne.w	800a62c <_DrawBitmap+0x714>
 800a388:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a38a:	9308      	str	r3, [sp, #32]
 800a38c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a390:	465f      	mov	r7, fp
 800a392:	e036      	b.n	800a402 <_DrawBitmap+0x4ea>
 800a394:	9b02      	ldr	r3, [sp, #8]
 800a396:	e079      	b.n	800a48c <_DrawBitmap+0x574>
 800a398:	9b02      	ldr	r3, [sp, #8]
 800a39a:	429d      	cmp	r5, r3
 800a39c:	bfc8      	it	gt
 800a39e:	b2dd      	uxtbgt	r5, r3
 800a3a0:	1b5b      	subs	r3, r3, r5
 800a3a2:	462a      	mov	r2, r5
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	09b0      	lsrs	r0, r6, #6
 800a3a8:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 800a3aa:	3a01      	subs	r2, #1
 800a3ac:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800a3b0:	f821 0b02 	strh.w	r0, [r1], #2
 800a3b4:	00b6      	lsls	r6, r6, #2
 800a3b6:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 800a3ba:	b2f6      	uxtb	r6, r6
 800a3bc:	d1f3      	bne.n	800a3a6 <_DrawBitmap+0x48e>
 800a3be:	3d01      	subs	r5, #1
 800a3c0:	b2ed      	uxtb	r5, r5
 800a3c2:	3501      	adds	r5, #1
 800a3c4:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f000 812f 	beq.w	800a62c <_DrawBitmap+0x714>
 800a3ce:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800a3d2:	2504      	movs	r5, #4
 800a3d4:	e7e1      	b.n	800a39a <_DrawBitmap+0x482>
 800a3d6:	f016 0fc0 	tst.w	r6, #192	@ 0xc0
 800a3da:	d124      	bne.n	800a426 <_DrawBitmap+0x50e>
 800a3dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3de:	f109 0901 	add.w	r9, r9, #1
 800a3e2:	00b6      	lsls	r6, r6, #2
 800a3e4:	4599      	cmp	r9, r3
 800a3e6:	b2f6      	uxtb	r6, r6
 800a3e8:	d1f5      	bne.n	800a3d6 <_DrawBitmap+0x4be>
 800a3ea:	1c6b      	adds	r3, r5, #1
 800a3ec:	3701      	adds	r7, #1
 800a3ee:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800a3f2:	442f      	add	r7, r5
 800a3f4:	f1b8 0f00 	cmp.w	r8, #0
 800a3f8:	f000 8118 	beq.w	800a62c <_DrawBitmap+0x714>
 800a3fc:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800a400:	2504      	movs	r5, #4
 800a402:	4545      	cmp	r5, r8
 800a404:	bfc8      	it	gt
 800a406:	fa5f f588 	uxtbgt.w	r5, r8
 800a40a:	ebc5 0808 	rsb	r8, r5, r8
 800a40e:	3d01      	subs	r5, #1
 800a410:	b2ed      	uxtb	r5, r5
 800a412:	1c7b      	adds	r3, r7, #1
 800a414:	442b      	add	r3, r5
 800a416:	930d      	str	r3, [sp, #52]	@ 0x34
 800a418:	f06f 0301 	mvn.w	r3, #1
 800a41c:	fb03 4307 	mla	r3, r3, r7, r4
 800a420:	9309      	str	r3, [sp, #36]	@ 0x24
 800a422:	46b9      	mov	r9, r7
 800a424:	e7d7      	b.n	800a3d6 <_DrawBitmap+0x4be>
 800a426:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800a428:	09b3      	lsrs	r3, r6, #6
 800a42a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a42e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a430:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
 800a434:	9b08      	ldr	r3, [sp, #32]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d0d0      	beq.n	800a3dc <_DrawBitmap+0x4c4>
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	9a04      	ldr	r2, [sp, #16]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	9808      	ldr	r0, [sp, #32]
 800a442:	4649      	mov	r1, r9
 800a444:	4798      	blx	r3
 800a446:	e7c9      	b.n	800a3dc <_DrawBitmap+0x4c4>
 800a448:	0800d0e4 	.word	0x0800d0e4
 800a44c:	2000002c 	.word	0x2000002c
 800a450:	0800d13c 	.word	0x0800d13c
 800a454:	f016 0fc0 	tst.w	r6, #192	@ 0xc0
 800a458:	bf18      	it	ne
 800a45a:	8808      	ldrhne	r0, [r1, #0]
 800a45c:	f102 32ff 	add.w	r2, r2, #4294967295
 800a460:	bf1c      	itt	ne
 800a462:	f080 00ff 	eorne.w	r0, r0, #255	@ 0xff
 800a466:	8008      	strhne	r0, [r1, #0]
 800a468:	00b6      	lsls	r6, r6, #2
 800a46a:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 800a46e:	f101 0102 	add.w	r1, r1, #2
 800a472:	b2f6      	uxtb	r6, r6
 800a474:	d1ee      	bne.n	800a454 <_DrawBitmap+0x53c>
 800a476:	3d01      	subs	r5, #1
 800a478:	b2ed      	uxtb	r5, r5
 800a47a:	3501      	adds	r5, #1
 800a47c:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800a480:	2b00      	cmp	r3, #0
 800a482:	f000 80d3 	beq.w	800a62c <_DrawBitmap+0x714>
 800a486:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800a48a:	2504      	movs	r5, #4
 800a48c:	429d      	cmp	r5, r3
 800a48e:	bfc8      	it	gt
 800a490:	b2dd      	uxtbgt	r5, r3
 800a492:	1b5b      	subs	r3, r3, r5
 800a494:	462a      	mov	r2, r5
 800a496:	4621      	mov	r1, r4
 800a498:	e7dc      	b.n	800a454 <_DrawBitmap+0x53c>
 800a49a:	9b03      	ldr	r3, [sp, #12]
 800a49c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a49e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a4a2:	4093      	lsls	r3, r2
 800a4a4:	4a6b      	ldr	r2, [pc, #428]	@ (800a654 <_DrawBitmap+0x73c>)
 800a4a6:	6812      	ldr	r2, [r2, #0]
 800a4a8:	7c12      	ldrb	r2, [r2, #16]
 800a4aa:	f002 0203 	and.w	r2, r2, #3
 800a4ae:	2a01      	cmp	r2, #1
 800a4b0:	b2dd      	uxtb	r5, r3
 800a4b2:	d003      	beq.n	800a4bc <_DrawBitmap+0x5a4>
 800a4b4:	d308      	bcc.n	800a4c8 <_DrawBitmap+0x5b0>
 800a4b6:	2a02      	cmp	r2, #2
 800a4b8:	d03b      	beq.n	800a532 <_DrawBitmap+0x61a>
 800a4ba:	e0b7      	b.n	800a62c <_DrawBitmap+0x714>
 800a4bc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a4be:	9a02      	ldr	r2, [sp, #8]
 800a4c0:	f1c3 0302 	rsb	r3, r3, #2
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	e0aa      	b.n	800a61e <_DrawBitmap+0x706>
 800a4c8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a4ca:	b15b      	cbz	r3, 800a4e4 <_DrawBitmap+0x5cc>
 800a4cc:	092d      	lsrs	r5, r5, #4
 800a4ce:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a4d0:	9a03      	ldr	r2, [sp, #12]
 800a4d2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a4d6:	8023      	strh	r3, [r4, #0]
 800a4d8:	9b02      	ldr	r3, [sp, #8]
 800a4da:	9c07      	ldr	r4, [sp, #28]
 800a4dc:	7815      	ldrb	r5, [r2, #0]
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	4692      	mov	sl, r2
 800a4e2:	e000      	b.n	800a4e6 <_DrawBitmap+0x5ce>
 800a4e4:	9b02      	ldr	r3, [sp, #8]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	dd1a      	ble.n	800a520 <_DrawBitmap+0x608>
 800a4ea:	1059      	asrs	r1, r3, #1
 800a4ec:	1d22      	adds	r2, r4, #4
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	eb0a 0001 	add.w	r0, sl, r1
 800a4f6:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 800a4f8:	092e      	lsrs	r6, r5, #4
 800a4fa:	f005 050f 	and.w	r5, r5, #15
 800a4fe:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 800a502:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800a506:	f822 6c04 	strh.w	r6, [r2, #-4]
 800a50a:	f822 5c02 	strh.w	r5, [r2, #-2]
 800a50e:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800a512:	4582      	cmp	sl, r0
 800a514:	463e      	mov	r6, r7
 800a516:	f102 0204 	add.w	r2, r2, #4
 800a51a:	d1ec      	bne.n	800a4f6 <_DrawBitmap+0x5de>
 800a51c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800a520:	2b00      	cmp	r3, #0
 800a522:	f000 8083 	beq.w	800a62c <_DrawBitmap+0x714>
 800a526:	092d      	lsrs	r5, r5, #4
 800a528:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a52a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a52e:	8023      	strh	r3, [r4, #0]
 800a530:	e07c      	b.n	800a62c <_DrawBitmap+0x714>
 800a532:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800a534:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800a536:	b1c2      	cbz	r2, 800a56a <_DrawBitmap+0x652>
 800a538:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 800a53c:	d00b      	beq.n	800a556 <_DrawBitmap+0x63e>
 800a53e:	092d      	lsrs	r5, r5, #4
 800a540:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a542:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a546:	8023      	strh	r3, [r4, #0]
 800a548:	b12e      	cbz	r6, 800a556 <_DrawBitmap+0x63e>
 800a54a:	68b3      	ldr	r3, [r6, #8]
 800a54c:	9a04      	ldr	r2, [sp, #16]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4659      	mov	r1, fp
 800a552:	4630      	mov	r0, r6
 800a554:	4798      	blx	r3
 800a556:	9b02      	ldr	r3, [sp, #8]
 800a558:	9c07      	ldr	r4, [sp, #28]
 800a55a:	f103 38ff 	add.w	r8, r3, #4294967295
 800a55e:	9b03      	ldr	r3, [sp, #12]
 800a560:	f10b 0701 	add.w	r7, fp, #1
 800a564:	781d      	ldrb	r5, [r3, #0]
 800a566:	469a      	mov	sl, r3
 800a568:	e00f      	b.n	800a58a <_DrawBitmap+0x672>
 800a56a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a56e:	465f      	mov	r7, fp
 800a570:	e00b      	b.n	800a58a <_DrawBitmap+0x672>
 800a572:	f015 0ff0 	tst.w	r5, #240	@ 0xf0
 800a576:	d10c      	bne.n	800a592 <_DrawBitmap+0x67a>
 800a578:	f015 050f 	ands.w	r5, r5, #15
 800a57c:	d117      	bne.n	800a5ae <_DrawBitmap+0x696>
 800a57e:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800a582:	3404      	adds	r4, #4
 800a584:	3702      	adds	r7, #2
 800a586:	f1a8 0802 	sub.w	r8, r8, #2
 800a58a:	f1b8 0f01 	cmp.w	r8, #1
 800a58e:	dcf0      	bgt.n	800a572 <_DrawBitmap+0x65a>
 800a590:	e01a      	b.n	800a5c8 <_DrawBitmap+0x6b0>
 800a592:	092b      	lsrs	r3, r5, #4
 800a594:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800a596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a59a:	8023      	strh	r3, [r4, #0]
 800a59c:	2e00      	cmp	r6, #0
 800a59e:	d0eb      	beq.n	800a578 <_DrawBitmap+0x660>
 800a5a0:	68b3      	ldr	r3, [r6, #8]
 800a5a2:	9a04      	ldr	r2, [sp, #16]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4639      	mov	r1, r7
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	4798      	blx	r3
 800a5ac:	e7e4      	b.n	800a578 <_DrawBitmap+0x660>
 800a5ae:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a5b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a5b4:	8063      	strh	r3, [r4, #2]
 800a5b6:	2e00      	cmp	r6, #0
 800a5b8:	d0e1      	beq.n	800a57e <_DrawBitmap+0x666>
 800a5ba:	68b3      	ldr	r3, [r6, #8]
 800a5bc:	9a04      	ldr	r2, [sp, #16]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	1c79      	adds	r1, r7, #1
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	4798      	blx	r3
 800a5c6:	e7da      	b.n	800a57e <_DrawBitmap+0x666>
 800a5c8:	f1b8 0f00 	cmp.w	r8, #0
 800a5cc:	d02e      	beq.n	800a62c <_DrawBitmap+0x714>
 800a5ce:	092d      	lsrs	r5, r5, #4
 800a5d0:	d02c      	beq.n	800a62c <_DrawBitmap+0x714>
 800a5d2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a5d4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a5d8:	8023      	strh	r3, [r4, #0]
 800a5da:	b33e      	cbz	r6, 800a62c <_DrawBitmap+0x714>
 800a5dc:	68b3      	ldr	r3, [r6, #8]
 800a5de:	9a04      	ldr	r2, [sp, #16]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4639      	mov	r1, r7
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	4798      	blx	r3
 800a5e8:	e020      	b.n	800a62c <_DrawBitmap+0x714>
 800a5ea:	f015 0fc0 	tst.w	r5, #192	@ 0xc0
 800a5ee:	bf18      	it	ne
 800a5f0:	8806      	ldrhne	r6, [r0, #0]
 800a5f2:	f101 31ff 	add.w	r1, r1, #4294967295
 800a5f6:	bf1c      	itt	ne
 800a5f8:	f086 06ff 	eorne.w	r6, r6, #255	@ 0xff
 800a5fc:	8006      	strhne	r6, [r0, #0]
 800a5fe:	012d      	lsls	r5, r5, #4
 800a600:	f011 01ff 	ands.w	r1, r1, #255	@ 0xff
 800a604:	f100 0002 	add.w	r0, r0, #2
 800a608:	b2ed      	uxtb	r5, r5
 800a60a:	d1ee      	bne.n	800a5ea <_DrawBitmap+0x6d2>
 800a60c:	3b01      	subs	r3, #1
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	3301      	adds	r3, #1
 800a612:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800a616:	b14a      	cbz	r2, 800a62c <_DrawBitmap+0x714>
 800a618:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800a61c:	2302      	movs	r3, #2
 800a61e:	4293      	cmp	r3, r2
 800a620:	bfc8      	it	gt
 800a622:	b2d3      	uxtbgt	r3, r2
 800a624:	1ad2      	subs	r2, r2, r3
 800a626:	4619      	mov	r1, r3
 800a628:	4620      	mov	r0, r4
 800a62a:	e7de      	b.n	800a5ea <_DrawBitmap+0x6d2>
 800a62c:	9b04      	ldr	r3, [sp, #16]
 800a62e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a630:	3301      	adds	r3, #1
 800a632:	9304      	str	r3, [sp, #16]
 800a634:	9b03      	ldr	r3, [sp, #12]
 800a636:	4413      	add	r3, r2
 800a638:	9303      	str	r3, [sp, #12]
 800a63a:	9a06      	ldr	r2, [sp, #24]
 800a63c:	9b07      	ldr	r3, [sp, #28]
 800a63e:	4413      	add	r3, r2
 800a640:	9307      	str	r3, [sp, #28]
 800a642:	e5b7      	b.n	800a1b4 <_DrawBitmap+0x29c>
 800a644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a646:	b113      	cbz	r3, 800a64e <_DrawBitmap+0x736>
 800a648:	a80f      	add	r0, sp, #60	@ 0x3c
 800a64a:	f7fc f993 	bl	8006974 <GUI_ALLOC_UnlockH>
 800a64e:	b011      	add	sp, #68	@ 0x44
 800a650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a654:	2000002c 	.word	0x2000002c

0800a658 <_GetDevProp>:
 800a658:	2908      	cmp	r1, #8
 800a65a:	d004      	beq.n	800a666 <_GetDevProp+0xe>
 800a65c:	6800      	ldr	r0, [r0, #0]
 800a65e:	b120      	cbz	r0, 800a66a <_GetDevProp+0x12>
 800a660:	68c3      	ldr	r3, [r0, #12]
 800a662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a664:	4718      	bx	r3
 800a666:	2010      	movs	r0, #16
 800a668:	4770      	bx	lr
 800a66a:	f04f 30ff 	mov.w	r0, #4294967295
 800a66e:	4770      	bx	lr

0800a670 <GUI_USAGE_DecUseCnt>:
 800a670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a672:	4605      	mov	r5, r0
 800a674:	f7fc f970 	bl	8006958 <GUI_ALLOC_LockH>
 800a678:	ab02      	add	r3, sp, #8
 800a67a:	8984      	ldrh	r4, [r0, #12]
 800a67c:	f843 0d04 	str.w	r0, [r3, #-4]!
 800a680:	3c01      	subs	r4, #1
 800a682:	b224      	sxth	r4, r4
 800a684:	8184      	strh	r4, [r0, #12]
 800a686:	4618      	mov	r0, r3
 800a688:	f7fc f974 	bl	8006974 <GUI_ALLOC_UnlockH>
 800a68c:	b914      	cbnz	r4, 800a694 <GUI_USAGE_DecUseCnt+0x24>
 800a68e:	4628      	mov	r0, r5
 800a690:	f7fc f990 	bl	80069b4 <GUI_ALLOC_Free>
 800a694:	b003      	add	sp, #12
 800a696:	bd30      	pop	{r4, r5, pc}

0800a698 <GUI_USAGE_AddRect>:
 800a698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a69c:	9c08      	ldr	r4, [sp, #32]
 800a69e:	4605      	mov	r5, r0
 800a6a0:	4688      	mov	r8, r1
 800a6a2:	4699      	mov	r9, r3
 800a6a4:	4414      	add	r4, r2
 800a6a6:	68ab      	ldr	r3, [r5, #8]
 800a6a8:	1c56      	adds	r6, r2, #1
 800a6aa:	685f      	ldr	r7, [r3, #4]
 800a6ac:	4641      	mov	r1, r8
 800a6ae:	464b      	mov	r3, r9
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	47b8      	blx	r7
 800a6b4:	42b4      	cmp	r4, r6
 800a6b6:	4632      	mov	r2, r6
 800a6b8:	d1f5      	bne.n	800a6a6 <GUI_USAGE_AddRect+0xe>
 800a6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a6be <_Convert16>:
 800a6be:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c2:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 800a6c6:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800a6ca:	4681      	mov	r9, r0
 800a6cc:	460d      	mov	r5, r1
 800a6ce:	4616      	mov	r6, r2
 800a6d0:	461f      	mov	r7, r3
 800a6d2:	4614      	mov	r4, r2
 800a6d4:	4688      	mov	r8, r1
 800a6d6:	f839 0b02 	ldrh.w	r0, [r9], #2
 800a6da:	47d8      	blx	fp
 800a6dc:	47d0      	blx	sl
 800a6de:	3c01      	subs	r4, #1
 800a6e0:	f848 0b04 	str.w	r0, [r8], #4
 800a6e4:	d1f7      	bne.n	800a6d6 <_Convert16+0x18>
 800a6e6:	2f1f      	cmp	r7, #31
 800a6e8:	d806      	bhi.n	800a6f8 <_Convert16+0x3a>
 800a6ea:	463a      	mov	r2, r7
 800a6ec:	4631      	mov	r1, r6
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f4:	f001 bc2c 	b.w	800bf50 <GUI__CompactPixelIndices>
 800a6f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6fc <_Convert8>:
 800a6fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a700:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 800a704:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800a708:	4680      	mov	r8, r0
 800a70a:	460d      	mov	r5, r1
 800a70c:	4616      	mov	r6, r2
 800a70e:	461f      	mov	r7, r3
 800a710:	4689      	mov	r9, r1
 800a712:	4604      	mov	r4, r0
 800a714:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a718:	47d8      	blx	fp
 800a71a:	47d0      	blx	sl
 800a71c:	1b33      	subs	r3, r6, r4
 800a71e:	eb18 0f03 	cmn.w	r8, r3
 800a722:	f849 0b04 	str.w	r0, [r9], #4
 800a726:	d1f5      	bne.n	800a714 <_Convert8+0x18>
 800a728:	2f1f      	cmp	r7, #31
 800a72a:	d806      	bhi.n	800a73a <_Convert8+0x3e>
 800a72c:	463a      	mov	r2, r7
 800a72e:	4631      	mov	r1, r6
 800a730:	4628      	mov	r0, r5
 800a732:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a736:	f001 bc0b 	b.w	800bf50 <GUI__CompactPixelIndices>
 800a73a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a740 <GUI_MEMDEV__WriteToActiveOpaque>:
 800a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a744:	b09b      	sub	sp, #108	@ 0x6c
 800a746:	4605      	mov	r5, r0
 800a748:	9108      	str	r1, [sp, #32]
 800a74a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a74c:	2800      	cmp	r0, #0
 800a74e:	f000 8399 	beq.w	800ae84 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800a752:	f7fc f901 	bl	8006958 <GUI_ALLOC_LockH>
 800a756:	ab1a      	add	r3, sp, #104	@ 0x68
 800a758:	6944      	ldr	r4, [r0, #20]
 800a75a:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fc f908 	bl	8006974 <GUI_ALLOC_UnlockH>
 800a764:	4628      	mov	r0, r5
 800a766:	f001 fcbb 	bl	800c0e0 <GUI_MEMDEV_GetBitsPerPixel>
 800a76a:	2808      	cmp	r0, #8
 800a76c:	4607      	mov	r7, r0
 800a76e:	4ea5      	ldr	r6, [pc, #660]	@ (800aa04 <GUI_MEMDEV__WriteToActiveOpaque+0x2c4>)
 800a770:	dd02      	ble.n	800a778 <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 800a772:	2c00      	cmp	r4, #0
 800a774:	f000 81c9 	beq.w	800ab0a <GUI_MEMDEV__WriteToActiveOpaque+0x3ca>
 800a778:	2301      	movs	r3, #1
 800a77a:	2700      	movs	r7, #0
 800a77c:	4628      	mov	r0, r5
 800a77e:	9319      	str	r3, [sp, #100]	@ 0x64
 800a780:	930d      	str	r3, [sp, #52]	@ 0x34
 800a782:	9718      	str	r7, [sp, #96]	@ 0x60
 800a784:	f7fc f8e8 	bl	8006958 <GUI_ALLOC_LockH>
 800a788:	6802      	ldr	r2, [r0, #0]
 800a78a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800a78e:	6912      	ldr	r2, [r2, #16]
 800a790:	930e      	str	r3, [sp, #56]	@ 0x38
 800a792:	f10d 0968 	add.w	r9, sp, #104	@ 0x68
 800a796:	6853      	ldr	r3, [r2, #4]
 800a798:	6832      	ldr	r2, [r6, #0]
 800a79a:	f849 0d14 	str.w	r0, [r9, #-20]!
 800a79e:	6904      	ldr	r4, [r0, #16]
 800a7a0:	f8d0 8014 	ldr.w	r8, [r0, #20]
 800a7a4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800a7a8:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 800a7ac:	7c50      	ldrb	r0, [r2, #17]
 800a7ae:	930c      	str	r3, [sp, #48]	@ 0x30
 800a7b0:	f7fe f8bc 	bl	800892c <GUI_GetBitsPerPixelEx>
 800a7b4:	6832      	ldr	r2, [r6, #0]
 800a7b6:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a7b8:	7c50      	ldrb	r0, [r2, #17]
 800a7ba:	f7fe f8d5 	bl	8008968 <GUI_GetpfIndex2ColorEx>
 800a7be:	900a      	str	r0, [sp, #40]	@ 0x28
 800a7c0:	4648      	mov	r0, r9
 800a7c2:	f7fc f8d7 	bl	8006974 <GUI_ALLOC_UnlockH>
 800a7c6:	2c08      	cmp	r4, #8
 800a7c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7cc:	d904      	bls.n	800a7d8 <GUI_MEMDEV__WriteToActiveOpaque+0x98>
 800a7ce:	2c10      	cmp	r4, #16
 800a7d0:	bf8c      	ite	hi
 800a7d2:	2304      	movhi	r3, #4
 800a7d4:	2302      	movls	r3, #2
 800a7d6:	e005      	b.n	800a7e4 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 800a7d8:	2c01      	cmp	r4, #1
 800a7da:	d103      	bne.n	800a7e4 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 800a7dc:	ab18      	add	r3, sp, #96	@ 0x60
 800a7de:	940d      	str	r4, [sp, #52]	@ 0x34
 800a7e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7e2:	e001      	b.n	800a7e8 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 800a7e4:	930d      	str	r3, [sp, #52]	@ 0x34
 800a7e6:	970a      	str	r7, [sp, #40]	@ 0x28
 800a7e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	f000 80df 	beq.w	800a9ae <GUI_MEMDEV__WriteToActiveOpaque+0x26e>
 800a7f0:	6833      	ldr	r3, [r6, #0]
 800a7f2:	7c58      	ldrb	r0, [r3, #17]
 800a7f4:	f7fe f8c8 	bl	8008988 <GUI_GetpfColor2IndexEx>
 800a7f8:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a7fa:	ea4f 008b 	mov.w	r0, fp, lsl #2
 800a7fe:	f7fc fa57 	bl	8006cb0 <GUI_ALLOC_AllocNoInit>
 800a802:	9010      	str	r0, [sp, #64]	@ 0x40
 800a804:	2800      	cmp	r0, #0
 800a806:	f000 833d 	beq.w	800ae84 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800a80a:	4628      	mov	r0, r5
 800a80c:	f001 fca0 	bl	800c150 <GUI_MEMDEV_GetDataPtr>
 800a810:	4605      	mov	r5, r0
 800a812:	f1b8 0f00 	cmp.w	r8, #0
 800a816:	f000 80b9 	beq.w	800a98c <GUI_MEMDEV__WriteToActiveOpaque+0x24c>
 800a81a:	4640      	mov	r0, r8
 800a81c:	f7fc f89c 	bl	8006958 <GUI_ALLOC_LockH>
 800a820:	eb05 030a 	add.w	r3, r5, sl
 800a824:	9311      	str	r3, [sp, #68]	@ 0x44
 800a826:	2300      	movs	r3, #0
 800a828:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 800a82c:	9016      	str	r0, [sp, #88]	@ 0x58
 800a82e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a830:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a832:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a834:	ebca 0703 	rsb	r7, sl, r3
 800a838:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a83a:	4293      	cmp	r3, r2
 800a83c:	f340 80a2 	ble.w	800a984 <GUI_MEMDEV__WriteToActiveOpaque+0x244>
 800a840:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800a842:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a844:	2300      	movs	r3, #0
 800a846:	9317      	str	r3, [sp, #92]	@ 0x5c
 800a848:	6883      	ldr	r3, [r0, #8]
 800a84a:	f10d 085c 	add.w	r8, sp, #92	@ 0x5c
 800a84e:	695b      	ldr	r3, [r3, #20]
 800a850:	4641      	mov	r1, r8
 800a852:	4798      	blx	r3
 800a854:	4583      	cmp	fp, r0
 800a856:	4605      	mov	r5, r0
 800a858:	d128      	bne.n	800a8ac <GUI_MEMDEV__WriteToActiveOpaque+0x16c>
 800a85a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a85c:	f7fc f87c 	bl	8006958 <GUI_ALLOC_LockH>
 800a860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a862:	9301      	str	r3, [sp, #4]
 800a864:	2c08      	cmp	r4, #8
 800a866:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a868:	9014      	str	r0, [sp, #80]	@ 0x50
 800a86a:	4601      	mov	r1, r0
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	465a      	mov	r2, fp
 800a870:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a872:	4638      	mov	r0, r7
 800a874:	d902      	bls.n	800a87c <GUI_MEMDEV__WriteToActiveOpaque+0x13c>
 800a876:	f7ff ff22 	bl	800a6be <_Convert16>
 800a87a:	e001      	b.n	800a880 <GUI_MEMDEV__WriteToActiveOpaque+0x140>
 800a87c:	f7ff ff3e 	bl	800a6fc <_Convert8>
 800a880:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a882:	9305      	str	r3, [sp, #20]
 800a884:	ad1a      	add	r5, sp, #104	@ 0x68
 800a886:	9808      	ldr	r0, [sp, #32]
 800a888:	f855 3d18 	ldr.w	r3, [r5, #-24]!
 800a88c:	9304      	str	r3, [sp, #16]
 800a88e:	2300      	movs	r3, #0
 800a890:	9303      	str	r3, [sp, #12]
 800a892:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a894:	9302      	str	r3, [sp, #8]
 800a896:	2301      	movs	r3, #1
 800a898:	9301      	str	r3, [sp, #4]
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	465a      	mov	r2, fp
 800a89e:	4649      	mov	r1, r9
 800a8a0:	f7fd fd9c 	bl	80083dc <LCD_DrawBitmap>
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	f7fc f865 	bl	8006974 <GUI_ALLOC_UnlockH>
 800a8aa:	e062      	b.n	800a972 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 800a8ac:	2c01      	cmp	r4, #1
 800a8ae:	d002      	beq.n	800a8b6 <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 800a8b0:	f04f 0801 	mov.w	r8, #1
 800a8b4:	e057      	b.n	800a966 <GUI_MEMDEV__WriteToActiveOpaque+0x226>
 800a8b6:	2d00      	cmp	r5, #0
 800a8b8:	d05b      	beq.n	800a972 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 800a8ba:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800a8bc:	9e08      	ldr	r6, [sp, #32]
 800a8be:	f8cd a00c 	str.w	sl, [sp, #12]
 800a8c2:	f000 0307 	and.w	r3, r0, #7
 800a8c6:	9306      	str	r3, [sp, #24]
 800a8c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8ca:	9305      	str	r3, [sp, #20]
 800a8cc:	2308      	movs	r3, #8
 800a8ce:	fb90 f3f3 	sdiv	r3, r0, r3
 800a8d2:	443b      	add	r3, r7
 800a8d4:	9304      	str	r3, [sp, #16]
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	462a      	mov	r2, r5
 800a8da:	9302      	str	r3, [sp, #8]
 800a8dc:	9301      	str	r3, [sp, #4]
 800a8de:	9300      	str	r3, [sp, #0]
 800a8e0:	4649      	mov	r1, r9
 800a8e2:	4430      	add	r0, r6
 800a8e4:	f7fd fc8e 	bl	8008204 <LCD__DrawBitmap_1bpp>
 800a8e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a8ea:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800a8ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8ee:	441d      	add	r5, r3
 800a8f0:	6883      	ldr	r3, [r0, #8]
 800a8f2:	9517      	str	r5, [sp, #92]	@ 0x5c
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	4641      	mov	r1, r8
 800a8f8:	4798      	blx	r3
 800a8fa:	4605      	mov	r5, r0
 800a8fc:	e7db      	b.n	800a8b6 <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 800a8fe:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a900:	f7fc f82a 	bl	8006958 <GUI_ALLOC_LockH>
 800a904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a906:	9014      	str	r0, [sp, #80]	@ 0x50
 800a908:	4601      	mov	r1, r0
 800a90a:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800a90c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	2c08      	cmp	r4, #8
 800a912:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	462a      	mov	r2, r5
 800a918:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a91a:	fb00 7006 	mla	r0, r0, r6, r7
 800a91e:	d925      	bls.n	800a96c <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 800a920:	f7ff fecd 	bl	800a6be <_Convert16>
 800a924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a926:	9305      	str	r3, [sp, #20]
 800a928:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a92a:	9304      	str	r3, [sp, #16]
 800a92c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800a92e:	9e08      	ldr	r6, [sp, #32]
 800a930:	f8cd 8004 	str.w	r8, [sp, #4]
 800a934:	2300      	movs	r3, #0
 800a936:	9303      	str	r3, [sp, #12]
 800a938:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a93a:	9302      	str	r3, [sp, #8]
 800a93c:	462a      	mov	r2, r5
 800a93e:	2301      	movs	r3, #1
 800a940:	4649      	mov	r1, r9
 800a942:	4430      	add	r0, r6
 800a944:	f8cd 8000 	str.w	r8, [sp]
 800a948:	f7fd fd48 	bl	80083dc <LCD_DrawBitmap>
 800a94c:	a814      	add	r0, sp, #80	@ 0x50
 800a94e:	f7fc f811 	bl	8006974 <GUI_ALLOC_UnlockH>
 800a952:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a954:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800a956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a958:	441d      	add	r5, r3
 800a95a:	6883      	ldr	r3, [r0, #8]
 800a95c:	9517      	str	r5, [sp, #92]	@ 0x5c
 800a95e:	695b      	ldr	r3, [r3, #20]
 800a960:	a917      	add	r1, sp, #92	@ 0x5c
 800a962:	4798      	blx	r3
 800a964:	4605      	mov	r5, r0
 800a966:	2d00      	cmp	r5, #0
 800a968:	d1c9      	bne.n	800a8fe <GUI_MEMDEV__WriteToActiveOpaque+0x1be>
 800a96a:	e002      	b.n	800a972 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 800a96c:	f7ff fec6 	bl	800a6fc <_Convert8>
 800a970:	e7d8      	b.n	800a924 <GUI_MEMDEV__WriteToActiveOpaque+0x1e4>
 800a972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a974:	3301      	adds	r3, #1
 800a976:	9309      	str	r3, [sp, #36]	@ 0x24
 800a978:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a97a:	4453      	add	r3, sl
 800a97c:	9311      	str	r3, [sp, #68]	@ 0x44
 800a97e:	f109 0901 	add.w	r9, r9, #1
 800a982:	e755      	b.n	800a830 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 800a984:	a816      	add	r0, sp, #88	@ 0x58
 800a986:	f7fb fff5 	bl	8006974 <GUI_ALLOC_UnlockH>
 800a98a:	e00e      	b.n	800a9aa <GUI_MEMDEV__WriteToActiveOpaque+0x26a>
 800a98c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a98e:	9305      	str	r3, [sp, #20]
 800a990:	2301      	movs	r3, #1
 800a992:	9004      	str	r0, [sp, #16]
 800a994:	9301      	str	r3, [sp, #4]
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	f8cd a00c 	str.w	sl, [sp, #12]
 800a99c:	9402      	str	r4, [sp, #8]
 800a99e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9a0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a9a2:	9808      	ldr	r0, [sp, #32]
 800a9a4:	465a      	mov	r2, fp
 800a9a6:	f7fd fd19 	bl	80083dc <LCD_DrawBitmap>
 800a9aa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a9ac:	e268      	b.n	800ae80 <GUI_MEMDEV__WriteToActiveOpaque+0x740>
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	f001 fbce 	bl	800c150 <GUI_MEMDEV_GetDataPtr>
 800a9b4:	4607      	mov	r7, r0
 800a9b6:	f1b8 0f00 	cmp.w	r8, #0
 800a9ba:	f000 809a 	beq.w	800aaf2 <GUI_MEMDEV__WriteToActiveOpaque+0x3b2>
 800a9be:	4640      	mov	r0, r8
 800a9c0:	f7fb ffca 	bl	8006958 <GUI_ALLOC_LockH>
 800a9c4:	2500      	movs	r5, #0
 800a9c6:	9016      	str	r0, [sp, #88]	@ 0x58
 800a9c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9ca:	42ab      	cmp	r3, r5
 800a9cc:	f340 808d 	ble.w	800aaea <GUI_MEMDEV__WriteToActiveOpaque+0x3aa>
 800a9d0:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	9317      	str	r3, [sp, #92]	@ 0x5c
 800a9d6:	6883      	ldr	r3, [r0, #8]
 800a9d8:	f10d 085c 	add.w	r8, sp, #92	@ 0x5c
 800a9dc:	695b      	ldr	r3, [r3, #20]
 800a9de:	462a      	mov	r2, r5
 800a9e0:	4641      	mov	r1, r8
 800a9e2:	4798      	blx	r3
 800a9e4:	4583      	cmp	fp, r0
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	d126      	bne.n	800aa38 <GUI_MEMDEV__WriteToActiveOpaque+0x2f8>
 800a9ea:	462e      	mov	r6, r5
 800a9ec:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800a9ee:	6883      	ldr	r3, [r0, #8]
 800a9f0:	f106 0901 	add.w	r9, r6, #1
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	464a      	mov	r2, r9
 800a9f8:	4641      	mov	r1, r8
 800a9fa:	4798      	blx	r3
 800a9fc:	4583      	cmp	fp, r0
 800a9fe:	d103      	bne.n	800aa08 <GUI_MEMDEV__WriteToActiveOpaque+0x2c8>
 800aa00:	464e      	mov	r6, r9
 800aa02:	e7f3      	b.n	800a9ec <GUI_MEMDEV__WriteToActiveOpaque+0x2ac>
 800aa04:	2000002c 	.word	0x2000002c
 800aa08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa0c:	9305      	str	r3, [sp, #20]
 800aa0e:	ebc5 0806 	rsb	r8, r5, r6
 800aa12:	2301      	movs	r3, #1
 800aa14:	f108 0801 	add.w	r8, r8, #1
 800aa18:	9704      	str	r7, [sp, #16]
 800aa1a:	9301      	str	r3, [sp, #4]
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	4429      	add	r1, r5
 800aa20:	f8cd a00c 	str.w	sl, [sp, #12]
 800aa24:	9402      	str	r4, [sp, #8]
 800aa26:	4643      	mov	r3, r8
 800aa28:	465a      	mov	r2, fp
 800aa2a:	9808      	ldr	r0, [sp, #32]
 800aa2c:	f7fd fcd6 	bl	80083dc <LCD_DrawBitmap>
 800aa30:	fb0a 7708 	mla	r7, sl, r8, r7
 800aa34:	4635      	mov	r5, r6
 800aa36:	e056      	b.n	800aae6 <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 800aa38:	2c01      	cmp	r4, #1
 800aa3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa3c:	d004      	beq.n	800aa48 <GUI_MEMDEV__WriteToActiveOpaque+0x308>
 800aa3e:	442b      	add	r3, r5
 800aa40:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa42:	f04f 0901 	mov.w	r9, #1
 800aa46:	e02b      	b.n	800aaa0 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 800aa48:	eb03 0905 	add.w	r9, r3, r5
 800aa4c:	46a0      	mov	r8, r4
 800aa4e:	b32e      	cbz	r6, 800aa9c <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 800aa50:	f8dd e05c 	ldr.w	lr, [sp, #92]	@ 0x5c
 800aa54:	9808      	ldr	r0, [sp, #32]
 800aa56:	f8cd a00c 	str.w	sl, [sp, #12]
 800aa5a:	f00e 0307 	and.w	r3, lr, #7
 800aa5e:	9306      	str	r3, [sp, #24]
 800aa60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa62:	9305      	str	r3, [sp, #20]
 800aa64:	2308      	movs	r3, #8
 800aa66:	fb9e f3f3 	sdiv	r3, lr, r3
 800aa6a:	443b      	add	r3, r7
 800aa6c:	4632      	mov	r2, r6
 800aa6e:	4470      	add	r0, lr
 800aa70:	9304      	str	r3, [sp, #16]
 800aa72:	4649      	mov	r1, r9
 800aa74:	2301      	movs	r3, #1
 800aa76:	f8cd 8008 	str.w	r8, [sp, #8]
 800aa7a:	f8cd 8004 	str.w	r8, [sp, #4]
 800aa7e:	f8cd 8000 	str.w	r8, [sp]
 800aa82:	f7fd fbbf 	bl	8008204 <LCD__DrawBitmap_1bpp>
 800aa86:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa88:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800aa8a:	441e      	add	r6, r3
 800aa8c:	6883      	ldr	r3, [r0, #8]
 800aa8e:	9617      	str	r6, [sp, #92]	@ 0x5c
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	462a      	mov	r2, r5
 800aa94:	a917      	add	r1, sp, #92	@ 0x5c
 800aa96:	4798      	blx	r3
 800aa98:	4606      	mov	r6, r0
 800aa9a:	e7d8      	b.n	800aa4e <GUI_MEMDEV__WriteToActiveOpaque+0x30e>
 800aa9c:	4457      	add	r7, sl
 800aa9e:	e022      	b.n	800aae6 <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 800aaa0:	2e00      	cmp	r6, #0
 800aaa2:	d0fb      	beq.n	800aa9c <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 800aaa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaa6:	f8dd e05c 	ldr.w	lr, [sp, #92]	@ 0x5c
 800aaaa:	9305      	str	r3, [sp, #20]
 800aaac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aaae:	9808      	ldr	r0, [sp, #32]
 800aab0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aab2:	f8cd a00c 	str.w	sl, [sp, #12]
 800aab6:	fb03 730e 	mla	r3, r3, lr, r7
 800aaba:	4632      	mov	r2, r6
 800aabc:	4470      	add	r0, lr
 800aabe:	9304      	str	r3, [sp, #16]
 800aac0:	9402      	str	r4, [sp, #8]
 800aac2:	2301      	movs	r3, #1
 800aac4:	f8cd 9004 	str.w	r9, [sp, #4]
 800aac8:	f8cd 9000 	str.w	r9, [sp]
 800aacc:	f7fd fc86 	bl	80083dc <LCD_DrawBitmap>
 800aad0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aad2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800aad4:	441e      	add	r6, r3
 800aad6:	6883      	ldr	r3, [r0, #8]
 800aad8:	9617      	str	r6, [sp, #92]	@ 0x5c
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	462a      	mov	r2, r5
 800aade:	4641      	mov	r1, r8
 800aae0:	4798      	blx	r3
 800aae2:	4606      	mov	r6, r0
 800aae4:	e7dc      	b.n	800aaa0 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 800aae6:	3501      	adds	r5, #1
 800aae8:	e76e      	b.n	800a9c8 <GUI_MEMDEV__WriteToActiveOpaque+0x288>
 800aaea:	a816      	add	r0, sp, #88	@ 0x58
 800aaec:	f7fb ff42 	bl	8006974 <GUI_ALLOC_UnlockH>
 800aaf0:	e1c8      	b.n	800ae84 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800aaf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaf4:	9305      	str	r3, [sp, #20]
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	9301      	str	r3, [sp, #4]
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	9004      	str	r0, [sp, #16]
 800aafe:	f8cd a00c 	str.w	sl, [sp, #12]
 800ab02:	9402      	str	r4, [sp, #8]
 800ab04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab06:	465a      	mov	r2, fp
 800ab08:	e03a      	b.n	800ab80 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	f7fb ff24 	bl	8006958 <GUI_ALLOC_LockH>
 800ab10:	4683      	mov	fp, r0
 800ab12:	a81a      	add	r0, sp, #104	@ 0x68
 800ab14:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 800ab18:	f840 bd10 	str.w	fp, [r0, #-16]!
 800ab1c:	f8db 2000 	ldr.w	r2, [fp]
 800ab20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab22:	f8db 300c 	ldr.w	r3, [fp, #12]
 800ab26:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800ab2a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab2c:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 800ab30:	f7fb ff20 	bl	8006974 <GUI_ALLOC_UnlockH>
 800ab34:	6832      	ldr	r2, [r6, #0]
 800ab36:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800ab3a:	7c50      	ldrb	r0, [r2, #17]
 800ab3c:	4aa1      	ldr	r2, [pc, #644]	@ (800adc4 <GUI_MEMDEV__WriteToActiveOpaque+0x684>)
 800ab3e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800ab42:	6916      	ldr	r6, [r2, #16]
 800ab44:	6833      	ldr	r3, [r6, #0]
 800ab46:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab48:	f7fd fef0 	bl	800892c <GUI_GetBitsPerPixelEx>
 800ab4c:	2808      	cmp	r0, #8
 800ab4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab50:	d906      	bls.n	800ab60 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 800ab52:	2810      	cmp	r0, #16
 800ab54:	bf8c      	ite	hi
 800ab56:	f04f 0a04 	movhi.w	sl, #4
 800ab5a:	f04f 0a02 	movls.w	sl, #2
 800ab5e:	e001      	b.n	800ab64 <GUI_MEMDEV__WriteToActiveOpaque+0x424>
 800ab60:	f04f 0a01 	mov.w	sl, #1
 800ab64:	45b0      	cmp	r8, r6
 800ab66:	d110      	bne.n	800ab8a <GUI_MEMDEV__WriteToActiveOpaque+0x44a>
 800ab68:	9303      	str	r3, [sp, #12]
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f10b 0018 	add.w	r0, fp, #24
 800ab72:	9301      	str	r3, [sp, #4]
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab78:	9205      	str	r2, [sp, #20]
 800ab7a:	9004      	str	r0, [sp, #16]
 800ab7c:	9702      	str	r7, [sp, #8]
 800ab7e:	4622      	mov	r2, r4
 800ab80:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab82:	9808      	ldr	r0, [sp, #32]
 800ab84:	f7fd fc2a 	bl	80083dc <LCD_DrawBitmap>
 800ab88:	e17c      	b.n	800ae84 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800ab8a:	2f20      	cmp	r7, #32
 800ab8c:	f040 80a2 	bne.w	800acd4 <GUI_MEMDEV__WriteToActiveOpaque+0x594>
 800ab90:	fb0a f004 	mul.w	r0, sl, r4
 800ab94:	f7fc f88c 	bl	8006cb0 <GUI_ALLOC_AllocNoInit>
 800ab98:	900d      	str	r0, [sp, #52]	@ 0x34
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	f000 8172 	beq.w	800ae84 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800aba0:	f7fb feda 	bl	8006958 <GUI_ALLOC_LockH>
 800aba4:	9018      	str	r0, [sp, #96]	@ 0x60
 800aba6:	4628      	mov	r0, r5
 800aba8:	f7fb fed6 	bl	8006958 <GUI_ALLOC_LockH>
 800abac:	9016      	str	r0, [sp, #88]	@ 0x58
 800abae:	6933      	ldr	r3, [r6, #16]
 800abb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800abb4:	f100 0518 	add.w	r5, r0, #24
 800abb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800abbc:	920c      	str	r2, [sp, #48]	@ 0x30
 800abbe:	b373      	cbz	r3, 800ac1e <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 800abc0:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 800abc4:	f04f 0901 	mov.w	r9, #1
 800abc8:	f1ba 0f02 	cmp.w	sl, #2
 800abcc:	d005      	beq.n	800abda <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800abce:	f1ba 0f04 	cmp.w	sl, #4
 800abd2:	d002      	beq.n	800abda <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800abd4:	f1ba 0f01 	cmp.w	sl, #1
 800abd8:	d106      	bne.n	800abe8 <GUI_MEMDEV__WriteToActiveOpaque+0x4a8>
 800abda:	4628      	mov	r0, r5
 800abdc:	6937      	ldr	r7, [r6, #16]
 800abde:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800abe0:	4653      	mov	r3, sl
 800abe2:	4622      	mov	r2, r4
 800abe4:	47b8      	blx	r7
 800abe6:	445d      	add	r5, fp
 800abe8:	2300      	movs	r3, #0
 800abea:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800abec:	9305      	str	r3, [sp, #20]
 800abee:	9303      	str	r3, [sp, #12]
 800abf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800abf2:	9204      	str	r2, [sp, #16]
 800abf4:	9302      	str	r3, [sp, #8]
 800abf6:	4622      	mov	r2, r4
 800abf8:	2301      	movs	r3, #1
 800abfa:	f8cd 9004 	str.w	r9, [sp, #4]
 800abfe:	f8cd 9000 	str.w	r9, [sp]
 800ac02:	4641      	mov	r1, r8
 800ac04:	9808      	ldr	r0, [sp, #32]
 800ac06:	f7fd fbe9 	bl	80083dc <LCD_DrawBitmap>
 800ac0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac0e:	f108 0701 	add.w	r7, r8, #1
 800ac12:	4413      	add	r3, r2
 800ac14:	429f      	cmp	r7, r3
 800ac16:	f000 812c 	beq.w	800ae72 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 800ac1a:	46b8      	mov	r8, r7
 800ac1c:	e7d4      	b.n	800abc8 <GUI_MEMDEV__WriteToActiveOpaque+0x488>
 800ac1e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800ac20:	461e      	mov	r6, r3
 800ac22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac24:	443b      	add	r3, r7
 800ac26:	f04f 0901 	mov.w	r9, #1
 800ac2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac2c:	f1ba 0f02 	cmp.w	sl, #2
 800ac30:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 800ac34:	d016      	beq.n	800ac64 <GUI_MEMDEV__WriteToActiveOpaque+0x524>
 800ac36:	f1ba 0f04 	cmp.w	sl, #4
 800ac3a:	d024      	beq.n	800ac86 <GUI_MEMDEV__WriteToActiveOpaque+0x546>
 800ac3c:	f1ba 0f01 	cmp.w	sl, #1
 800ac40:	d130      	bne.n	800aca4 <GUI_MEMDEV__WriteToActiveOpaque+0x564>
 800ac42:	4643      	mov	r3, r8
 800ac44:	462a      	mov	r2, r5
 800ac46:	f852 0b04 	ldr.w	r0, [r2], #4
 800ac4a:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac4e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ac50:	4798      	blx	r3
 800ac52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac54:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ac56:	f803 0b01 	strb.w	r0, [r3], #1
 800ac5a:	1ae1      	subs	r1, r4, r3
 800ac5c:	eb18 0f01 	cmn.w	r8, r1
 800ac60:	d1f1      	bne.n	800ac46 <GUI_MEMDEV__WriteToActiveOpaque+0x506>
 800ac62:	e01e      	b.n	800aca2 <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 800ac64:	4643      	mov	r3, r8
 800ac66:	462a      	mov	r2, r5
 800ac68:	46a0      	mov	r8, r4
 800ac6a:	f852 0b04 	ldr.w	r0, [r2], #4
 800ac6e:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac72:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ac74:	4798      	blx	r3
 800ac76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac78:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ac7a:	f823 0b02 	strh.w	r0, [r3], #2
 800ac7e:	f1b8 0801 	subs.w	r8, r8, #1
 800ac82:	d1f2      	bne.n	800ac6a <GUI_MEMDEV__WriteToActiveOpaque+0x52a>
 800ac84:	e00d      	b.n	800aca2 <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 800ac86:	462a      	mov	r2, r5
 800ac88:	4623      	mov	r3, r4
 800ac8a:	f852 0b04 	ldr.w	r0, [r2], #4
 800ac8e:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac92:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ac94:	4798      	blx	r3
 800ac96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac98:	f848 0b04 	str.w	r0, [r8], #4
 800ac9c:	3b01      	subs	r3, #1
 800ac9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aca0:	d1f3      	bne.n	800ac8a <GUI_MEMDEV__WriteToActiveOpaque+0x54a>
 800aca2:	445d      	add	r5, fp
 800aca4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800aca6:	9304      	str	r3, [sp, #16]
 800aca8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acaa:	9302      	str	r3, [sp, #8]
 800acac:	9605      	str	r6, [sp, #20]
 800acae:	2301      	movs	r3, #1
 800acb0:	9603      	str	r6, [sp, #12]
 800acb2:	f8cd 9004 	str.w	r9, [sp, #4]
 800acb6:	f8cd 9000 	str.w	r9, [sp]
 800acba:	4622      	mov	r2, r4
 800acbc:	4639      	mov	r1, r7
 800acbe:	9808      	ldr	r0, [sp, #32]
 800acc0:	f7fd fb8c 	bl	80083dc <LCD_DrawBitmap>
 800acc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acc6:	f107 0801 	add.w	r8, r7, #1
 800acca:	4543      	cmp	r3, r8
 800accc:	f000 80d1 	beq.w	800ae72 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 800acd0:	4647      	mov	r7, r8
 800acd2:	e7ab      	b.n	800ac2c <GUI_MEMDEV__WriteToActiveOpaque+0x4ec>
 800acd4:	2f10      	cmp	r7, #16
 800acd6:	f040 80d5 	bne.w	800ae84 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800acda:	fb04 f00a 	mul.w	r0, r4, sl
 800acde:	f7fb ffe7 	bl	8006cb0 <GUI_ALLOC_AllocNoInit>
 800ace2:	900d      	str	r0, [sp, #52]	@ 0x34
 800ace4:	2800      	cmp	r0, #0
 800ace6:	f000 80cd 	beq.w	800ae84 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800acea:	f7fb fe35 	bl	8006958 <GUI_ALLOC_LockH>
 800acee:	9018      	str	r0, [sp, #96]	@ 0x60
 800acf0:	4628      	mov	r0, r5
 800acf2:	f7fb fe31 	bl	8006958 <GUI_ALLOC_LockH>
 800acf6:	9016      	str	r0, [sp, #88]	@ 0x58
 800acf8:	6933      	ldr	r3, [r6, #16]
 800acfa:	f100 0718 	add.w	r7, r0, #24
 800acfe:	b113      	cbz	r3, 800ad06 <GUI_MEMDEV__WriteToActiveOpaque+0x5c6>
 800ad00:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ad04:	b953      	cbnz	r3, 800ad1c <GUI_MEMDEV__WriteToActiveOpaque+0x5dc>
 800ad06:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ad0a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ad0c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad10:	442b      	add	r3, r5
 800ad12:	0066      	lsls	r6, r4, #1
 800ad14:	f04f 0b00 	mov.w	fp, #0
 800ad18:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad1a:	e083      	b.n	800ae24 <GUI_MEMDEV__WriteToActiveOpaque+0x6e4>
 800ad1c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800ad20:	0080      	lsls	r0, r0, #2
 800ad22:	f7fb ffc5 	bl	8006cb0 <GUI_ALLOC_AllocNoInit>
 800ad26:	900c      	str	r0, [sp, #48]	@ 0x30
 800ad28:	b118      	cbz	r0, 800ad32 <GUI_MEMDEV__WriteToActiveOpaque+0x5f2>
 800ad2a:	f7fb fe15 	bl	8006958 <GUI_ALLOC_LockH>
 800ad2e:	9017      	str	r0, [sp, #92]	@ 0x5c
 800ad30:	e001      	b.n	800ad36 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800ad32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad34:	9317      	str	r3, [sp, #92]	@ 0x5c
 800ad36:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f000 809a 	beq.w	800ae72 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 800ad3e:	0063      	lsls	r3, r4, #1
 800ad40:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad42:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800ad46:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ad4a:	930e      	str	r3, [sp, #56]	@ 0x38
 800ad4c:	f1ba 0f02 	cmp.w	sl, #2
 800ad50:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 800ad54:	d006      	beq.n	800ad64 <GUI_MEMDEV__WriteToActiveOpaque+0x624>
 800ad56:	f1ba 0f04 	cmp.w	sl, #4
 800ad5a:	d005      	beq.n	800ad68 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 800ad5c:	f1ba 0f01 	cmp.w	sl, #1
 800ad60:	d111      	bne.n	800ad86 <GUI_MEMDEV__WriteToActiveOpaque+0x646>
 800ad62:	e001      	b.n	800ad68 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 800ad64:	4653      	mov	r3, sl
 800ad66:	e000      	b.n	800ad6a <GUI_MEMDEV__WriteToActiveOpaque+0x62a>
 800ad68:	2302      	movs	r3, #2
 800ad6a:	4638      	mov	r0, r7
 800ad6c:	4622      	mov	r2, r4
 800ad6e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800ad70:	f8d8 5014 	ldr.w	r5, [r8, #20]
 800ad74:	47a8      	blx	r5
 800ad76:	4653      	mov	r3, sl
 800ad78:	4622      	mov	r2, r4
 800ad7a:	4649      	mov	r1, r9
 800ad7c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800ad7e:	6935      	ldr	r5, [r6, #16]
 800ad80:	47a8      	blx	r5
 800ad82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad84:	441f      	add	r7, r3
 800ad86:	2300      	movs	r3, #0
 800ad88:	9305      	str	r3, [sp, #20]
 800ad8a:	9303      	str	r3, [sp, #12]
 800ad8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad8e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800ad90:	9302      	str	r3, [sp, #8]
 800ad92:	2301      	movs	r3, #1
 800ad94:	9204      	str	r2, [sp, #16]
 800ad96:	9301      	str	r3, [sp, #4]
 800ad98:	9300      	str	r3, [sp, #0]
 800ad9a:	4622      	mov	r2, r4
 800ad9c:	4659      	mov	r1, fp
 800ad9e:	9808      	ldr	r0, [sp, #32]
 800ada0:	f7fd fb1c 	bl	80083dc <LCD_DrawBitmap>
 800ada4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ada6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ada8:	f10b 0901 	add.w	r9, fp, #1
 800adac:	4413      	add	r3, r2
 800adae:	4599      	cmp	r9, r3
 800adb0:	d001      	beq.n	800adb6 <GUI_MEMDEV__WriteToActiveOpaque+0x676>
 800adb2:	46cb      	mov	fp, r9
 800adb4:	e7ca      	b.n	800ad4c <GUI_MEMDEV__WriteToActiveOpaque+0x60c>
 800adb6:	a817      	add	r0, sp, #92	@ 0x5c
 800adb8:	f7fb fddc 	bl	8006974 <GUI_ALLOC_UnlockH>
 800adbc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800adbe:	f7fb fdf9 	bl	80069b4 <GUI_ALLOC_Free>
 800adc2:	e056      	b.n	800ae72 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 800adc4:	2000a3e4 	.word	0x2000a3e4
 800adc8:	f1ba 0f04 	cmp.w	sl, #4
 800adcc:	d041      	beq.n	800ae52 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 800adce:	f1ba 0f01 	cmp.w	sl, #1
 800add2:	d111      	bne.n	800adf8 <GUI_MEMDEV__WriteToActiveOpaque+0x6b8>
 800add4:	4643      	mov	r3, r8
 800add6:	463a      	mov	r2, r7
 800add8:	f832 0b02 	ldrh.w	r0, [r2], #2
 800addc:	920b      	str	r2, [sp, #44]	@ 0x2c
 800adde:	930e      	str	r3, [sp, #56]	@ 0x38
 800ade0:	47c8      	blx	r9
 800ade2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ade4:	4798      	blx	r3
 800ade6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ade8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800adea:	f803 0b01 	strb.w	r0, [r3], #1
 800adee:	1ae1      	subs	r1, r4, r3
 800adf0:	eb18 0f01 	cmn.w	r8, r1
 800adf4:	d1f0      	bne.n	800add8 <GUI_MEMDEV__WriteToActiveOpaque+0x698>
 800adf6:	4437      	add	r7, r6
 800adf8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800adfa:	9304      	str	r3, [sp, #16]
 800adfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800adfe:	9302      	str	r3, [sp, #8]
 800ae00:	2301      	movs	r3, #1
 800ae02:	9301      	str	r3, [sp, #4]
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	f8cd b014 	str.w	fp, [sp, #20]
 800ae0a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ae0e:	4622      	mov	r2, r4
 800ae10:	4629      	mov	r1, r5
 800ae12:	9808      	ldr	r0, [sp, #32]
 800ae14:	f7fd fae2 	bl	80083dc <LCD_DrawBitmap>
 800ae18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae1a:	f105 0801 	add.w	r8, r5, #1
 800ae1e:	4543      	cmp	r3, r8
 800ae20:	d027      	beq.n	800ae72 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 800ae22:	4645      	mov	r5, r8
 800ae24:	f1ba 0f02 	cmp.w	sl, #2
 800ae28:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 800ae2c:	d1cc      	bne.n	800adc8 <GUI_MEMDEV__WriteToActiveOpaque+0x688>
 800ae2e:	4643      	mov	r3, r8
 800ae30:	463a      	mov	r2, r7
 800ae32:	46a0      	mov	r8, r4
 800ae34:	f832 0b02 	ldrh.w	r0, [r2], #2
 800ae38:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ae3a:	930e      	str	r3, [sp, #56]	@ 0x38
 800ae3c:	47c8      	blx	r9
 800ae3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae40:	4798      	blx	r3
 800ae42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae44:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ae46:	f823 0b02 	strh.w	r0, [r3], #2
 800ae4a:	f1b8 0801 	subs.w	r8, r8, #1
 800ae4e:	d1f1      	bne.n	800ae34 <GUI_MEMDEV__WriteToActiveOpaque+0x6f4>
 800ae50:	e7d1      	b.n	800adf6 <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 800ae52:	463a      	mov	r2, r7
 800ae54:	4623      	mov	r3, r4
 800ae56:	f832 0b02 	ldrh.w	r0, [r2], #2
 800ae5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ae5c:	930e      	str	r3, [sp, #56]	@ 0x38
 800ae5e:	47c8      	blx	r9
 800ae60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae62:	4798      	blx	r3
 800ae64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae66:	f848 0b04 	str.w	r0, [r8], #4
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ae6e:	d1f2      	bne.n	800ae56 <GUI_MEMDEV__WriteToActiveOpaque+0x716>
 800ae70:	e7c1      	b.n	800adf6 <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 800ae72:	a816      	add	r0, sp, #88	@ 0x58
 800ae74:	f7fb fd7e 	bl	8006974 <GUI_ALLOC_UnlockH>
 800ae78:	a818      	add	r0, sp, #96	@ 0x60
 800ae7a:	f7fb fd7b 	bl	8006974 <GUI_ALLOC_UnlockH>
 800ae7e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ae80:	f7fb fd98 	bl	80069b4 <GUI_ALLOC_Free>
 800ae84:	b01b      	add	sp, #108	@ 0x6c
 800ae86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8a:	bf00      	nop

0800ae8c <_OnExit>:
 800ae8c:	4b18      	ldr	r3, [pc, #96]	@ (800aef0 <_OnExit+0x64>)
 800ae8e:	4819      	ldr	r0, [pc, #100]	@ (800aef4 <_OnExit+0x68>)
 800ae90:	4a19      	ldr	r2, [pc, #100]	@ (800aef8 <_OnExit+0x6c>)
 800ae92:	b570      	push	{r4, r5, r6, lr}
 800ae94:	2400      	movs	r4, #0
 800ae96:	601c      	str	r4, [r3, #0]
 800ae98:	4b18      	ldr	r3, [pc, #96]	@ (800aefc <_OnExit+0x70>)
 800ae9a:	4d19      	ldr	r5, [pc, #100]	@ (800af00 <_OnExit+0x74>)
 800ae9c:	601c      	str	r4, [r3, #0]
 800ae9e:	605c      	str	r4, [r3, #4]
 800aea0:	4b18      	ldr	r3, [pc, #96]	@ (800af04 <_OnExit+0x78>)
 800aea2:	7004      	strb	r4, [r0, #0]
 800aea4:	601c      	str	r4, [r3, #0]
 800aea6:	4b18      	ldr	r3, [pc, #96]	@ (800af08 <_OnExit+0x7c>)
 800aea8:	6044      	str	r4, [r0, #4]
 800aeaa:	601c      	str	r4, [r3, #0]
 800aeac:	4b17      	ldr	r3, [pc, #92]	@ (800af0c <_OnExit+0x80>)
 800aeae:	6014      	str	r4, [r2, #0]
 800aeb0:	601c      	str	r4, [r3, #0]
 800aeb2:	4b17      	ldr	r3, [pc, #92]	@ (800af10 <_OnExit+0x84>)
 800aeb4:	6054      	str	r4, [r2, #4]
 800aeb6:	601c      	str	r4, [r3, #0]
 800aeb8:	6084      	str	r4, [r0, #8]
 800aeba:	682b      	ldr	r3, [r5, #0]
 800aebc:	4621      	mov	r1, r4
 800aebe:	2218      	movs	r2, #24
 800aec0:	300c      	adds	r0, #12
 800aec2:	4798      	blx	r3
 800aec4:	4b13      	ldr	r3, [pc, #76]	@ (800af14 <_OnExit+0x88>)
 800aec6:	4814      	ldr	r0, [pc, #80]	@ (800af18 <_OnExit+0x8c>)
 800aec8:	601c      	str	r4, [r3, #0]
 800aeca:	4b14      	ldr	r3, [pc, #80]	@ (800af1c <_OnExit+0x90>)
 800aecc:	4621      	mov	r1, r4
 800aece:	601c      	str	r4, [r3, #0]
 800aed0:	605c      	str	r4, [r3, #4]
 800aed2:	2210      	movs	r2, #16
 800aed4:	682b      	ldr	r3, [r5, #0]
 800aed6:	4798      	blx	r3
 800aed8:	682b      	ldr	r3, [r5, #0]
 800aeda:	4811      	ldr	r0, [pc, #68]	@ (800af20 <_OnExit+0x94>)
 800aedc:	4621      	mov	r1, r4
 800aede:	2210      	movs	r2, #16
 800aee0:	4798      	blx	r3
 800aee2:	682b      	ldr	r3, [r5, #0]
 800aee4:	480f      	ldr	r0, [pc, #60]	@ (800af24 <_OnExit+0x98>)
 800aee6:	4621      	mov	r1, r4
 800aee8:	2210      	movs	r2, #16
 800aeea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aeee:	4718      	bx	r3
 800aef0:	2000a43c 	.word	0x2000a43c
 800aef4:	200002d8 	.word	0x200002d8
 800aef8:	2000a410 	.word	0x2000a410
 800aefc:	2000a444 	.word	0x2000a444
 800af00:	20000034 	.word	0x20000034
 800af04:	2000a450 	.word	0x2000a450
 800af08:	2000a3fc 	.word	0x2000a3fc
 800af0c:	2000a430 	.word	0x2000a430
 800af10:	2000a440 	.word	0x2000a440
 800af14:	2000a40c 	.word	0x2000a40c
 800af18:	2000a474 	.word	0x2000a474
 800af1c:	2000a400 	.word	0x2000a400
 800af20:	2000a464 	.word	0x2000a464
 800af24:	2000a454 	.word	0x2000a454

0800af28 <_Findy1>:
 800af28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af2a:	b085      	sub	sp, #20
 800af2c:	4607      	mov	r7, r0
 800af2e:	460c      	mov	r4, r1
 800af30:	4616      	mov	r6, r2
 800af32:	ad02      	add	r5, sp, #8
 800af34:	2f00      	cmp	r7, #0
 800af36:	d048      	beq.n	800afca <_Findy1+0xa2>
 800af38:	4638      	mov	r0, r7
 800af3a:	f7fb fd0d 	bl	8006958 <GUI_ALLOC_LockH>
 800af3e:	6a87      	ldr	r7, [r0, #40]	@ 0x28
 800af40:	9001      	str	r0, [sp, #4]
 800af42:	07bb      	lsls	r3, r7, #30
 800af44:	4601      	mov	r1, r0
 800af46:	d53a      	bpl.n	800afbe <_Findy1+0x96>
 800af48:	b126      	cbz	r6, 800af54 <_Findy1+0x2c>
 800af4a:	4632      	mov	r2, r6
 800af4c:	4628      	mov	r0, r5
 800af4e:	f7fd f852 	bl	8007ff6 <GUI__IntersectRects>
 800af52:	e002      	b.n	800af5a <_Findy1+0x32>
 800af54:	c803      	ldmia	r0, {r0, r1}
 800af56:	e885 0003 	stmia.w	r5, {r0, r1}
 800af5a:	4629      	mov	r1, r5
 800af5c:	4620      	mov	r0, r4
 800af5e:	f7fc fda7 	bl	8007ab0 <GUI_RectsIntersect>
 800af62:	b360      	cbz	r0, 800afbe <_Findy1+0x96>
 800af64:	f017 0f01 	tst.w	r7, #1
 800af68:	9b01      	ldr	r3, [sp, #4]
 800af6a:	d11c      	bne.n	800afa6 <_Findy1+0x7e>
 800af6c:	b13e      	cbz	r6, 800af7e <_Findy1+0x56>
 800af6e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800af72:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800af76:	4293      	cmp	r3, r2
 800af78:	bfb8      	it	lt
 800af7a:	4613      	movlt	r3, r2
 800af7c:	e001      	b.n	800af82 <_Findy1+0x5a>
 800af7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800af82:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800af86:	4293      	cmp	r3, r2
 800af88:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800af8c:	dd05      	ble.n	800af9a <_Findy1+0x72>
 800af8e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800af92:	429a      	cmp	r2, r3
 800af94:	db13      	blt.n	800afbe <_Findy1+0x96>
 800af96:	3b01      	subs	r3, #1
 800af98:	e003      	b.n	800afa2 <_Findy1+0x7a>
 800af9a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	dd0d      	ble.n	800afbe <_Findy1+0x96>
 800afa2:	80e3      	strh	r3, [r4, #6]
 800afa4:	e00b      	b.n	800afbe <_Findy1+0x96>
 800afa6:	69df      	ldr	r7, [r3, #28]
 800afa8:	b14f      	cbz	r7, 800afbe <_Findy1+0x96>
 800afaa:	4638      	mov	r0, r7
 800afac:	462a      	mov	r2, r5
 800afae:	4621      	mov	r1, r4
 800afb0:	f7ff ffba 	bl	800af28 <_Findy1>
 800afb4:	4638      	mov	r0, r7
 800afb6:	f7fb fcc5 	bl	8006944 <GUI_ALLOC_h2p>
 800afba:	6a07      	ldr	r7, [r0, #32]
 800afbc:	e7f4      	b.n	800afa8 <_Findy1+0x80>
 800afbe:	9b01      	ldr	r3, [sp, #4]
 800afc0:	a801      	add	r0, sp, #4
 800afc2:	6a1f      	ldr	r7, [r3, #32]
 800afc4:	f7fb fcd6 	bl	8006974 <GUI_ALLOC_UnlockH>
 800afc8:	e7b4      	b.n	800af34 <_Findy1+0xc>
 800afca:	b005      	add	sp, #20
 800afcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800afce <_Findx0>:
 800afce:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800afd2:	4606      	mov	r6, r0
 800afd4:	460f      	mov	r7, r1
 800afd6:	4690      	mov	r8, r2
 800afd8:	2500      	movs	r5, #0
 800afda:	ac02      	add	r4, sp, #8
 800afdc:	2e00      	cmp	r6, #0
 800afde:	d035      	beq.n	800b04c <_Findx0+0x7e>
 800afe0:	4630      	mov	r0, r6
 800afe2:	f7fb fcb9 	bl	8006958 <GUI_ALLOC_LockH>
 800afe6:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 800afe8:	9001      	str	r0, [sp, #4]
 800afea:	07b2      	lsls	r2, r6, #30
 800afec:	4601      	mov	r1, r0
 800afee:	d527      	bpl.n	800b040 <_Findx0+0x72>
 800aff0:	f1b8 0f00 	cmp.w	r8, #0
 800aff4:	d004      	beq.n	800b000 <_Findx0+0x32>
 800aff6:	4642      	mov	r2, r8
 800aff8:	4620      	mov	r0, r4
 800affa:	f7fc fffc 	bl	8007ff6 <GUI__IntersectRects>
 800affe:	e002      	b.n	800b006 <_Findx0+0x38>
 800b000:	c803      	ldmia	r0, {r0, r1}
 800b002:	e884 0003 	stmia.w	r4, {r0, r1}
 800b006:	4621      	mov	r1, r4
 800b008:	4638      	mov	r0, r7
 800b00a:	f7fc fd51 	bl	8007ab0 <GUI_RectsIntersect>
 800b00e:	b1b8      	cbz	r0, 800b040 <_Findx0+0x72>
 800b010:	07f3      	lsls	r3, r6, #31
 800b012:	d405      	bmi.n	800b020 <_Findx0+0x52>
 800b014:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b018:	3301      	adds	r3, #1
 800b01a:	803b      	strh	r3, [r7, #0]
 800b01c:	2501      	movs	r5, #1
 800b01e:	e00f      	b.n	800b040 <_Findx0+0x72>
 800b020:	9b01      	ldr	r3, [sp, #4]
 800b022:	69de      	ldr	r6, [r3, #28]
 800b024:	b166      	cbz	r6, 800b040 <_Findx0+0x72>
 800b026:	4622      	mov	r2, r4
 800b028:	4639      	mov	r1, r7
 800b02a:	4630      	mov	r0, r6
 800b02c:	f7ff ffcf 	bl	800afce <_Findx0>
 800b030:	2800      	cmp	r0, #0
 800b032:	4630      	mov	r0, r6
 800b034:	bf18      	it	ne
 800b036:	2501      	movne	r5, #1
 800b038:	f7fb fc84 	bl	8006944 <GUI_ALLOC_h2p>
 800b03c:	6a06      	ldr	r6, [r0, #32]
 800b03e:	e7f1      	b.n	800b024 <_Findx0+0x56>
 800b040:	9b01      	ldr	r3, [sp, #4]
 800b042:	a801      	add	r0, sp, #4
 800b044:	6a1e      	ldr	r6, [r3, #32]
 800b046:	f7fb fc95 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b04a:	e7c7      	b.n	800afdc <_Findx0+0xe>
 800b04c:	4628      	mov	r0, r5
 800b04e:	b004      	add	sp, #16
 800b050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b054 <_Findx1>:
 800b054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b056:	b085      	sub	sp, #20
 800b058:	4605      	mov	r5, r0
 800b05a:	460e      	mov	r6, r1
 800b05c:	4617      	mov	r7, r2
 800b05e:	ac02      	add	r4, sp, #8
 800b060:	b37d      	cbz	r5, 800b0c2 <_Findx1+0x6e>
 800b062:	4628      	mov	r0, r5
 800b064:	f7fb fc78 	bl	8006958 <GUI_ALLOC_LockH>
 800b068:	6a85      	ldr	r5, [r0, #40]	@ 0x28
 800b06a:	9001      	str	r0, [sp, #4]
 800b06c:	07aa      	lsls	r2, r5, #30
 800b06e:	4601      	mov	r1, r0
 800b070:	d521      	bpl.n	800b0b6 <_Findx1+0x62>
 800b072:	b127      	cbz	r7, 800b07e <_Findx1+0x2a>
 800b074:	463a      	mov	r2, r7
 800b076:	4620      	mov	r0, r4
 800b078:	f7fc ffbd 	bl	8007ff6 <GUI__IntersectRects>
 800b07c:	e002      	b.n	800b084 <_Findx1+0x30>
 800b07e:	c803      	ldmia	r0, {r0, r1}
 800b080:	e884 0003 	stmia.w	r4, {r0, r1}
 800b084:	4621      	mov	r1, r4
 800b086:	4630      	mov	r0, r6
 800b088:	f7fc fd12 	bl	8007ab0 <GUI_RectsIntersect>
 800b08c:	b198      	cbz	r0, 800b0b6 <_Findx1+0x62>
 800b08e:	07eb      	lsls	r3, r5, #31
 800b090:	d404      	bmi.n	800b09c <_Findx1+0x48>
 800b092:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800b096:	3b01      	subs	r3, #1
 800b098:	80b3      	strh	r3, [r6, #4]
 800b09a:	e00c      	b.n	800b0b6 <_Findx1+0x62>
 800b09c:	9b01      	ldr	r3, [sp, #4]
 800b09e:	69dd      	ldr	r5, [r3, #28]
 800b0a0:	b14d      	cbz	r5, 800b0b6 <_Findx1+0x62>
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	4631      	mov	r1, r6
 800b0a8:	f7ff ffd4 	bl	800b054 <_Findx1>
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	f7fb fc49 	bl	8006944 <GUI_ALLOC_h2p>
 800b0b2:	6a05      	ldr	r5, [r0, #32]
 800b0b4:	e7f4      	b.n	800b0a0 <_Findx1+0x4c>
 800b0b6:	9b01      	ldr	r3, [sp, #4]
 800b0b8:	a801      	add	r0, sp, #4
 800b0ba:	6a1d      	ldr	r5, [r3, #32]
 800b0bc:	f7fb fc5a 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b0c0:	e7ce      	b.n	800b060 <_Findx1+0xc>
 800b0c2:	b005      	add	sp, #20
 800b0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b0c8 <WM__ClipAtParentBorders>:
 800b0c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0ca:	4606      	mov	r6, r0
 800b0cc:	460d      	mov	r5, r1
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	f7fb fc42 	bl	8006958 <GUI_ALLOC_LockH>
 800b0d4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b0d6:	9001      	str	r0, [sp, #4]
 800b0d8:	f013 0402 	ands.w	r4, r3, #2
 800b0dc:	4601      	mov	r1, r0
 800b0de:	d104      	bne.n	800b0ea <WM__ClipAtParentBorders+0x22>
 800b0e0:	a801      	add	r0, sp, #4
 800b0e2:	f7fb fc47 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	e016      	b.n	800b118 <WM__ClipAtParentBorders+0x50>
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	f7fc ff66 	bl	8007fbc <GUI__IntersectRect>
 800b0f0:	9b01      	ldr	r3, [sp, #4]
 800b0f2:	699c      	ldr	r4, [r3, #24]
 800b0f4:	a801      	add	r0, sp, #4
 800b0f6:	b954      	cbnz	r4, 800b10e <WM__ClipAtParentBorders+0x46>
 800b0f8:	f7fb fc3c 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b0fc:	4b07      	ldr	r3, [pc, #28]	@ (800b11c <WM__ClipAtParentBorders+0x54>)
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	4295      	cmp	r5, r2
 800b102:	d008      	beq.n	800b116 <WM__ClipAtParentBorders+0x4e>
 800b104:	6858      	ldr	r0, [r3, #4]
 800b106:	1b43      	subs	r3, r0, r5
 800b108:	4258      	negs	r0, r3
 800b10a:	4158      	adcs	r0, r3
 800b10c:	e004      	b.n	800b118 <WM__ClipAtParentBorders+0x50>
 800b10e:	f7fb fc31 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b112:	4625      	mov	r5, r4
 800b114:	e7db      	b.n	800b0ce <WM__ClipAtParentBorders+0x6>
 800b116:	2001      	movs	r0, #1
 800b118:	b002      	add	sp, #8
 800b11a:	bd70      	pop	{r4, r5, r6, pc}
 800b11c:	2000a400 	.word	0x2000a400

0800b120 <WM__InsertWindowIntoList>:
 800b120:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b124:	4606      	mov	r6, r0
 800b126:	460c      	mov	r4, r1
 800b128:	2900      	cmp	r1, #0
 800b12a:	d04c      	beq.n	800b1c6 <WM__InsertWindowIntoList+0xa6>
 800b12c:	f7fb fc14 	bl	8006958 <GUI_ALLOC_LockH>
 800b130:	2300      	movs	r3, #0
 800b132:	6184      	str	r4, [r0, #24]
 800b134:	9001      	str	r0, [sp, #4]
 800b136:	6203      	str	r3, [r0, #32]
 800b138:	4620      	mov	r0, r4
 800b13a:	f7fb fc0d 	bl	8006958 <GUI_ALLOC_LockH>
 800b13e:	ac04      	add	r4, sp, #16
 800b140:	69c7      	ldr	r7, [r0, #28]
 800b142:	f844 0d08 	str.w	r0, [r4, #-8]!
 800b146:	b92f      	cbnz	r7, 800b154 <WM__InsertWindowIntoList+0x34>
 800b148:	61c6      	str	r6, [r0, #28]
 800b14a:	a801      	add	r0, sp, #4
 800b14c:	f7fb fc12 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b150:	4620      	mov	r0, r4
 800b152:	e036      	b.n	800b1c2 <WM__InsertWindowIntoList+0xa2>
 800b154:	9b01      	ldr	r3, [sp, #4]
 800b156:	4638      	mov	r0, r7
 800b158:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 800b15a:	f7fb fbfd 	bl	8006958 <GUI_ALLOC_LockH>
 800b15e:	f10d 0810 	add.w	r8, sp, #16
 800b162:	f005 0508 	and.w	r5, r5, #8
 800b166:	f848 0d04 	str.w	r0, [r8, #-4]!
 800b16a:	b975      	cbnz	r5, 800b18a <WM__InsertWindowIntoList+0x6a>
 800b16c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b16e:	071a      	lsls	r2, r3, #28
 800b170:	d50b      	bpl.n	800b18a <WM__InsertWindowIntoList+0x6a>
 800b172:	9b01      	ldr	r3, [sp, #4]
 800b174:	621f      	str	r7, [r3, #32]
 800b176:	9b02      	ldr	r3, [sp, #8]
 800b178:	a801      	add	r0, sp, #4
 800b17a:	61de      	str	r6, [r3, #28]
 800b17c:	f7fb fbfa 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b180:	4620      	mov	r0, r4
 800b182:	f7fb fbf7 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b186:	4640      	mov	r0, r8
 800b188:	e01b      	b.n	800b1c2 <WM__InsertWindowIntoList+0xa2>
 800b18a:	4620      	mov	r0, r4
 800b18c:	f7fb fbf2 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b190:	4640      	mov	r0, r8
 800b192:	f7fb fbef 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b196:	4638      	mov	r0, r7
 800b198:	f7fb fbd4 	bl	8006944 <GUI_ALLOC_h2p>
 800b19c:	9003      	str	r0, [sp, #12]
 800b19e:	9b03      	ldr	r3, [sp, #12]
 800b1a0:	6a1c      	ldr	r4, [r3, #32]
 800b1a2:	b90c      	cbnz	r4, 800b1a8 <WM__InsertWindowIntoList+0x88>
 800b1a4:	621e      	str	r6, [r3, #32]
 800b1a6:	e00b      	b.n	800b1c0 <WM__InsertWindowIntoList+0xa0>
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f7fb fbcb 	bl	8006944 <GUI_ALLOC_h2p>
 800b1ae:	2d00      	cmp	r5, #0
 800b1b0:	d1f4      	bne.n	800b19c <WM__InsertWindowIntoList+0x7c>
 800b1b2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b1b4:	071b      	lsls	r3, r3, #28
 800b1b6:	d5f1      	bpl.n	800b19c <WM__InsertWindowIntoList+0x7c>
 800b1b8:	9b03      	ldr	r3, [sp, #12]
 800b1ba:	621e      	str	r6, [r3, #32]
 800b1bc:	9b01      	ldr	r3, [sp, #4]
 800b1be:	621c      	str	r4, [r3, #32]
 800b1c0:	a801      	add	r0, sp, #4
 800b1c2:	f7fb fbd7 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b1c6:	b004      	add	sp, #16
 800b1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b1cc <WM__Client2Screen>:
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	4608      	mov	r0, r1
 800b1d0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b1d4:	f9b3 1000 	ldrsh.w	r1, [r3]
 800b1d8:	f7fc bc51 	b.w	8007a7e <GUI_MoveRect>

0800b1dc <_SetClipRectUserIntersect>:
 800b1dc:	4b11      	ldr	r3, [pc, #68]	@ (800b224 <_SetClipRectUserIntersect+0x48>)
 800b1de:	b530      	push	{r4, r5, lr}
 800b1e0:	681c      	ldr	r4, [r3, #0]
 800b1e2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800b1e4:	b085      	sub	sp, #20
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	b1ba      	cbz	r2, 800b21a <_SetClipRectUserIntersect+0x3e>
 800b1ea:	6810      	ldr	r0, [r2, #0]
 800b1ec:	6851      	ldr	r1, [r2, #4]
 800b1ee:	ab02      	add	r3, sp, #8
 800b1f0:	c303      	stmia	r3!, {r0, r1}
 800b1f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b228 <_SetClipRectUserIntersect+0x4c>)
 800b1f4:	6818      	ldr	r0, [r3, #0]
 800b1f6:	b900      	cbnz	r0, 800b1fa <_SetClipRectUserIntersect+0x1e>
 800b1f8:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800b1fa:	f7fb fbad 	bl	8006958 <GUI_ALLOC_LockH>
 800b1fe:	ac04      	add	r4, sp, #16
 800b200:	a902      	add	r1, sp, #8
 800b202:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800b206:	f7ff ffe1 	bl	800b1cc <WM__Client2Screen>
 800b20a:	4620      	mov	r0, r4
 800b20c:	f7fb fbb2 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b210:	a802      	add	r0, sp, #8
 800b212:	4629      	mov	r1, r5
 800b214:	f7fc fed2 	bl	8007fbc <GUI__IntersectRect>
 800b218:	a802      	add	r0, sp, #8
 800b21a:	f000 ff49 	bl	800c0b0 <LCD_SetClipRectEx>
 800b21e:	b005      	add	sp, #20
 800b220:	bd30      	pop	{r4, r5, pc}
 800b222:	bf00      	nop
 800b224:	2000002c 	.word	0x2000002c
 800b228:	2000a3fc 	.word	0x2000a3fc

0800b22c <WM__ActivateClipRect>:
 800b22c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b22e:	4b0e      	ldr	r3, [pc, #56]	@ (800b268 <WM__ActivateClipRect+0x3c>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800b236:	b10a      	cbz	r2, 800b23c <WM__ActivateClipRect+0x10>
 800b238:	480c      	ldr	r0, [pc, #48]	@ (800b26c <WM__ActivateClipRect+0x40>)
 800b23a:	e011      	b.n	800b260 <WM__ActivateClipRect+0x34>
 800b23c:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800b23e:	f7fb fb8b 	bl	8006958 <GUI_ALLOC_LockH>
 800b242:	9001      	str	r0, [sp, #4]
 800b244:	c803      	ldmia	r0, {r0, r1}
 800b246:	ac02      	add	r4, sp, #8
 800b248:	e884 0003 	stmia.w	r4, {r0, r1}
 800b24c:	a801      	add	r0, sp, #4
 800b24e:	f7fb fb91 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b252:	4b07      	ldr	r3, [pc, #28]	@ (800b270 <WM__ActivateClipRect+0x44>)
 800b254:	6819      	ldr	r1, [r3, #0]
 800b256:	b111      	cbz	r1, 800b25e <WM__ActivateClipRect+0x32>
 800b258:	4620      	mov	r0, r4
 800b25a:	f7ff ff35 	bl	800b0c8 <WM__ClipAtParentBorders>
 800b25e:	4620      	mov	r0, r4
 800b260:	f7ff ffbc 	bl	800b1dc <_SetClipRectUserIntersect>
 800b264:	b004      	add	sp, #16
 800b266:	bd10      	pop	{r4, pc}
 800b268:	2000002c 	.word	0x2000002c
 800b26c:	200002ec 	.word	0x200002ec
 800b270:	2000a3fc 	.word	0x2000a3fc

0800b274 <WM__InvalidateDrawAndDescs>:
 800b274:	b513      	push	{r0, r1, r4, lr}
 800b276:	4604      	mov	r4, r0
 800b278:	b300      	cbz	r0, 800b2bc <WM__InvalidateDrawAndDescs+0x48>
 800b27a:	f7fb fb6d 	bl	8006958 <GUI_ALLOC_LockH>
 800b27e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b280:	9001      	str	r0, [sp, #4]
 800b282:	079b      	lsls	r3, r3, #30
 800b284:	d517      	bpl.n	800b2b6 <WM__InvalidateDrawAndDescs+0x42>
 800b286:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800b288:	b140      	cbz	r0, 800b29c <WM__InvalidateDrawAndDescs+0x28>
 800b28a:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c0 <WM__InvalidateDrawAndDescs+0x4c>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	429c      	cmp	r4, r3
 800b290:	d004      	beq.n	800b29c <WM__InvalidateDrawAndDescs+0x28>
 800b292:	f000 ff3b 	bl	800c10c <GUI_MEMDEV_Delete>
 800b296:	9b01      	ldr	r3, [sp, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	625a      	str	r2, [r3, #36]	@ 0x24
 800b29c:	4620      	mov	r0, r4
 800b29e:	f000 fc4f 	bl	800bb40 <WM_GetFirstChild>
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	b13c      	cbz	r4, 800b2b6 <WM__InvalidateDrawAndDescs+0x42>
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f7ff ffe4 	bl	800b274 <WM__InvalidateDrawAndDescs>
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f7fb fb49 	bl	8006944 <GUI_ALLOC_h2p>
 800b2b2:	6a04      	ldr	r4, [r0, #32]
 800b2b4:	e7f6      	b.n	800b2a4 <WM__InvalidateDrawAndDescs+0x30>
 800b2b6:	a801      	add	r0, sp, #4
 800b2b8:	f7fb fb5c 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b2bc:	b002      	add	sp, #8
 800b2be:	bd10      	pop	{r4, pc}
 800b2c0:	2000a44c 	.word	0x2000a44c

0800b2c4 <WM__RectIsNZ>:
 800b2c4:	f9b0 2000 	ldrsh.w	r2, [r0]
 800b2c8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	dc08      	bgt.n	800b2e2 <WM__RectIsNZ+0x1e>
 800b2d0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800b2d4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800b2d8:	4283      	cmp	r3, r0
 800b2da:	bfcc      	ite	gt
 800b2dc:	2000      	movgt	r0, #0
 800b2de:	2001      	movle	r0, #1
 800b2e0:	4770      	bx	lr
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	4770      	bx	lr

0800b2e6 <WM__SendMsgNoData>:
 800b2e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2e8:	ab04      	add	r3, sp, #16
 800b2ea:	9001      	str	r0, [sp, #4]
 800b2ec:	f843 1d10 	str.w	r1, [r3, #-16]!
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	f000 fca3 	bl	800bc3c <WM__SendMessage>
 800b2f6:	b005      	add	sp, #20
 800b2f8:	f85d fb04 	ldr.w	pc, [sp], #4

0800b2fc <WM__GetClientRectWin>:
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	800b      	strh	r3, [r1, #0]
 800b300:	8802      	ldrh	r2, [r0, #0]
 800b302:	804b      	strh	r3, [r1, #2]
 800b304:	8883      	ldrh	r3, [r0, #4]
 800b306:	1a9b      	subs	r3, r3, r2
 800b308:	808b      	strh	r3, [r1, #4]
 800b30a:	8842      	ldrh	r2, [r0, #2]
 800b30c:	88c3      	ldrh	r3, [r0, #6]
 800b30e:	1a9b      	subs	r3, r3, r2
 800b310:	80cb      	strh	r3, [r1, #6]
 800b312:	4770      	bx	lr

0800b314 <WM__GetTopLevelLayer>:
 800b314:	b510      	push	{r4, lr}
 800b316:	4604      	mov	r4, r0
 800b318:	f7fb fb14 	bl	8006944 <GUI_ALLOC_h2p>
 800b31c:	6980      	ldr	r0, [r0, #24]
 800b31e:	2800      	cmp	r0, #0
 800b320:	d1f9      	bne.n	800b316 <WM__GetTopLevelLayer+0x2>
 800b322:	4b05      	ldr	r3, [pc, #20]	@ (800b338 <WM__GetTopLevelLayer+0x24>)
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	4294      	cmp	r4, r2
 800b328:	d005      	beq.n	800b336 <WM__GetTopLevelLayer+0x22>
 800b32a:	6858      	ldr	r0, [r3, #4]
 800b32c:	4284      	cmp	r4, r0
 800b32e:	bf0c      	ite	eq
 800b330:	2001      	moveq	r0, #1
 800b332:	f04f 30ff 	movne.w	r0, #4294967295
 800b336:	bd10      	pop	{r4, pc}
 800b338:	2000a400 	.word	0x2000a400

0800b33c <_Invalidate1Abs>:
 800b33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b33e:	b085      	sub	sp, #20
 800b340:	460d      	mov	r5, r1
 800b342:	4606      	mov	r6, r0
 800b344:	4617      	mov	r7, r2
 800b346:	f7fb fafd 	bl	8006944 <GUI_ALLOC_h2p>
 800b34a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b34c:	9001      	str	r0, [sp, #4]
 800b34e:	078b      	lsls	r3, r1, #30
 800b350:	d53e      	bpl.n	800b3d0 <_Invalidate1Abs+0x94>
 800b352:	4628      	mov	r0, r5
 800b354:	f7ff ffb6 	bl	800b2c4 <WM__RectIsNZ>
 800b358:	2800      	cmp	r0, #0
 800b35a:	d039      	beq.n	800b3d0 <_Invalidate1Abs+0x94>
 800b35c:	f640 0301 	movw	r3, #2049	@ 0x801
 800b360:	400b      	ands	r3, r1
 800b362:	2b01      	cmp	r3, #1
 800b364:	d034      	beq.n	800b3d0 <_Invalidate1Abs+0x94>
 800b366:	4630      	mov	r0, r6
 800b368:	f7fb faf6 	bl	8006958 <GUI_ALLOC_LockH>
 800b36c:	ac02      	add	r4, sp, #8
 800b36e:	4602      	mov	r2, r0
 800b370:	9001      	str	r0, [sp, #4]
 800b372:	4629      	mov	r1, r5
 800b374:	4620      	mov	r0, r4
 800b376:	f7fc fe3e 	bl	8007ff6 <GUI__IntersectRects>
 800b37a:	4620      	mov	r0, r4
 800b37c:	f7ff ffa2 	bl	800b2c4 <WM__RectIsNZ>
 800b380:	b318      	cbz	r0, 800b3ca <_Invalidate1Abs+0x8e>
 800b382:	9b01      	ldr	r3, [sp, #4]
 800b384:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b386:	f244 0120 	movw	r1, #16416	@ 0x4020
 800b38a:	4011      	ands	r1, r2
 800b38c:	f103 0508 	add.w	r5, r3, #8
 800b390:	b129      	cbz	r1, 800b39e <_Invalidate1Abs+0x62>
 800b392:	4622      	mov	r2, r4
 800b394:	4629      	mov	r1, r5
 800b396:	4628      	mov	r0, r5
 800b398:	f7fc fb46 	bl	8007a28 <GUI_MergeRect>
 800b39c:	e015      	b.n	800b3ca <_Invalidate1Abs+0x8e>
 800b39e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b3a2:	433a      	orrs	r2, r7
 800b3a4:	e885 0003 	stmia.w	r5, {r0, r1}
 800b3a8:	629a      	str	r2, [r3, #40]	@ 0x28
 800b3aa:	4a0a      	ldr	r2, [pc, #40]	@ (800b3d4 <_Invalidate1Abs+0x98>)
 800b3ac:	8813      	ldrh	r3, [r2, #0]
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	8013      	strh	r3, [r2, #0]
 800b3b4:	f7ff ffae 	bl	800b314 <WM__GetTopLevelLayer>
 800b3b8:	4a07      	ldr	r2, [pc, #28]	@ (800b3d8 <_Invalidate1Abs+0x9c>)
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	fa03 f000 	lsl.w	r0, r3, r0
 800b3c0:	6813      	ldr	r3, [r2, #0]
 800b3c2:	4303      	orrs	r3, r0
 800b3c4:	6013      	str	r3, [r2, #0]
 800b3c6:	f7fc fdf1 	bl	8007fac <GUI_SignalEvent>
 800b3ca:	a801      	add	r0, sp, #4
 800b3cc:	f7fb fad2 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b3d0:	b005      	add	sp, #20
 800b3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3d4:	2000a418 	.word	0x2000a418
 800b3d8:	2000a428 	.word	0x2000a428

0800b3dc <WM__Invalidate1Abs>:
 800b3dc:	2220      	movs	r2, #32
 800b3de:	f7ff bfad 	b.w	800b33c <_Invalidate1Abs>

0800b3e2 <WM_InvalidateWindowAndDescsEx>:
 800b3e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3e4:	460f      	mov	r7, r1
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	4615      	mov	r5, r2
 800b3ea:	4606      	mov	r6, r0
 800b3ec:	b348      	cbz	r0, 800b442 <WM_InvalidateWindowAndDescsEx+0x60>
 800b3ee:	f7fb fab3 	bl	8006958 <GUI_ALLOC_LockH>
 800b3f2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b3f4:	ac04      	add	r4, sp, #16
 800b3f6:	079b      	lsls	r3, r3, #30
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800b3fe:	d403      	bmi.n	800b408 <WM_InvalidateWindowAndDescsEx+0x26>
 800b400:	4620      	mov	r0, r4
 800b402:	f7fb fab7 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b406:	e01c      	b.n	800b442 <WM_InvalidateWindowAndDescsEx+0x60>
 800b408:	4639      	mov	r1, r7
 800b40a:	a802      	add	r0, sp, #8
 800b40c:	f7fc fdf3 	bl	8007ff6 <GUI__IntersectRects>
 800b410:	2800      	cmp	r0, #0
 800b412:	d0f5      	beq.n	800b400 <WM_InvalidateWindowAndDescsEx+0x1e>
 800b414:	4620      	mov	r0, r4
 800b416:	f7fb faad 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b41a:	462a      	mov	r2, r5
 800b41c:	a902      	add	r1, sp, #8
 800b41e:	4630      	mov	r0, r6
 800b420:	f7ff ff8c 	bl	800b33c <_Invalidate1Abs>
 800b424:	4630      	mov	r0, r6
 800b426:	f000 fb8b 	bl	800bb40 <WM_GetFirstChild>
 800b42a:	4604      	mov	r4, r0
 800b42c:	b14c      	cbz	r4, 800b442 <WM_InvalidateWindowAndDescsEx+0x60>
 800b42e:	4620      	mov	r0, r4
 800b430:	462a      	mov	r2, r5
 800b432:	a902      	add	r1, sp, #8
 800b434:	f7ff ffd5 	bl	800b3e2 <WM_InvalidateWindowAndDescsEx>
 800b438:	4620      	mov	r0, r4
 800b43a:	f7fb fa83 	bl	8006944 <GUI_ALLOC_h2p>
 800b43e:	6a04      	ldr	r4, [r0, #32]
 800b440:	e7f4      	b.n	800b42c <WM_InvalidateWindowAndDescsEx+0x4a>
 800b442:	b005      	add	sp, #20
 800b444:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b446 <WM__InvalidateRect>:
 800b446:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b44a:	4680      	mov	r8, r0
 800b44c:	4617      	mov	r7, r2
 800b44e:	461d      	mov	r5, r3
 800b450:	460c      	mov	r4, r1
 800b452:	b381      	cbz	r1, 800b4b6 <WM__InvalidateRect+0x70>
 800b454:	4608      	mov	r0, r1
 800b456:	f7fb fa7f 	bl	8006958 <GUI_ALLOC_LockH>
 800b45a:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 800b45c:	9001      	str	r0, [sp, #4]
 800b45e:	07b3      	lsls	r3, r6, #30
 800b460:	4602      	mov	r2, r0
 800b462:	d525      	bpl.n	800b4b0 <WM__InvalidateRect+0x6a>
 800b464:	4641      	mov	r1, r8
 800b466:	a802      	add	r0, sp, #8
 800b468:	f7fc fdc5 	bl	8007ff6 <GUI__IntersectRects>
 800b46c:	b300      	cbz	r0, 800b4b0 <WM__InvalidateRect+0x6a>
 800b46e:	f640 0301 	movw	r3, #2049	@ 0x801
 800b472:	4033      	ands	r3, r6
 800b474:	2b01      	cmp	r3, #1
 800b476:	d107      	bne.n	800b488 <WM__InvalidateRect+0x42>
 800b478:	9901      	ldr	r1, [sp, #4]
 800b47a:	462b      	mov	r3, r5
 800b47c:	6a0a      	ldr	r2, [r1, #32]
 800b47e:	6989      	ldr	r1, [r1, #24]
 800b480:	a802      	add	r0, sp, #8
 800b482:	f7ff ffe0 	bl	800b446 <WM__InvalidateRect>
 800b486:	e004      	b.n	800b492 <WM__InvalidateRect+0x4c>
 800b488:	462a      	mov	r2, r5
 800b48a:	a902      	add	r1, sp, #8
 800b48c:	4620      	mov	r0, r4
 800b48e:	f7ff ff55 	bl	800b33c <_Invalidate1Abs>
 800b492:	9b01      	ldr	r3, [sp, #4]
 800b494:	69dc      	ldr	r4, [r3, #28]
 800b496:	b15c      	cbz	r4, 800b4b0 <WM__InvalidateRect+0x6a>
 800b498:	42bc      	cmp	r4, r7
 800b49a:	d009      	beq.n	800b4b0 <WM__InvalidateRect+0x6a>
 800b49c:	4620      	mov	r0, r4
 800b49e:	462a      	mov	r2, r5
 800b4a0:	a902      	add	r1, sp, #8
 800b4a2:	f7ff ff9e 	bl	800b3e2 <WM_InvalidateWindowAndDescsEx>
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f7fb fa4c 	bl	8006944 <GUI_ALLOC_h2p>
 800b4ac:	6a04      	ldr	r4, [r0, #32]
 800b4ae:	e7f2      	b.n	800b496 <WM__InvalidateRect+0x50>
 800b4b0:	a801      	add	r0, sp, #4
 800b4b2:	f7fb fa5f 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b4b6:	b004      	add	sp, #16
 800b4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b4bc <WM__InvalidateRectEx>:
 800b4bc:	2320      	movs	r3, #32
 800b4be:	f7ff bfc2 	b.w	800b446 <WM__InvalidateRect>

0800b4c2 <WM_InvalidateRect>:
 800b4c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4c4:	460f      	mov	r7, r1
 800b4c6:	b087      	sub	sp, #28
 800b4c8:	4605      	mov	r5, r0
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d033      	beq.n	800b536 <WM_InvalidateRect+0x74>
 800b4ce:	f7fb fa43 	bl	8006958 <GUI_ALLOC_LockH>
 800b4d2:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 800b4d4:	9001      	str	r0, [sp, #4]
 800b4d6:	07b2      	lsls	r2, r6, #30
 800b4d8:	d52a      	bpl.n	800b530 <WM_InvalidateRect+0x6e>
 800b4da:	c803      	ldmia	r0, {r0, r1}
 800b4dc:	ac04      	add	r4, sp, #16
 800b4de:	03f3      	lsls	r3, r6, #15
 800b4e0:	e884 0003 	stmia.w	r4, {r0, r1}
 800b4e4:	d502      	bpl.n	800b4ec <WM_InvalidateRect+0x2a>
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	f7ff fec4 	bl	800b274 <WM__InvalidateDrawAndDescs>
 800b4ec:	b15f      	cbz	r7, 800b506 <WM_InvalidateRect+0x44>
 800b4ee:	6838      	ldr	r0, [r7, #0]
 800b4f0:	6879      	ldr	r1, [r7, #4]
 800b4f2:	ab02      	add	r3, sp, #8
 800b4f4:	c303      	stmia	r3!, {r0, r1}
 800b4f6:	a902      	add	r1, sp, #8
 800b4f8:	9801      	ldr	r0, [sp, #4]
 800b4fa:	f7ff fe67 	bl	800b1cc <WM__Client2Screen>
 800b4fe:	a902      	add	r1, sp, #8
 800b500:	4620      	mov	r0, r4
 800b502:	f7fc fd5b 	bl	8007fbc <GUI__IntersectRect>
 800b506:	4629      	mov	r1, r5
 800b508:	4620      	mov	r0, r4
 800b50a:	f7ff fddd 	bl	800b0c8 <WM__ClipAtParentBorders>
 800b50e:	b178      	cbz	r0, 800b530 <WM_InvalidateRect+0x6e>
 800b510:	f640 0301 	movw	r3, #2049	@ 0x801
 800b514:	4033      	ands	r3, r6
 800b516:	2b01      	cmp	r3, #1
 800b518:	d106      	bne.n	800b528 <WM_InvalidateRect+0x66>
 800b51a:	9b01      	ldr	r3, [sp, #4]
 800b51c:	4620      	mov	r0, r4
 800b51e:	6a1a      	ldr	r2, [r3, #32]
 800b520:	6999      	ldr	r1, [r3, #24]
 800b522:	f7ff ffcb 	bl	800b4bc <WM__InvalidateRectEx>
 800b526:	e003      	b.n	800b530 <WM_InvalidateRect+0x6e>
 800b528:	4621      	mov	r1, r4
 800b52a:	4628      	mov	r0, r5
 800b52c:	f7ff ff56 	bl	800b3dc <WM__Invalidate1Abs>
 800b530:	a801      	add	r0, sp, #4
 800b532:	f7fb fa1f 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b536:	b007      	add	sp, #28
 800b538:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b53a <WM_InvalidateWindow>:
 800b53a:	2100      	movs	r1, #0
 800b53c:	f7ff bfc1 	b.w	800b4c2 <WM_InvalidateRect>

0800b540 <WM__SelectTopLevelLayer>:
 800b540:	b508      	push	{r3, lr}
 800b542:	f7ff fee7 	bl	800b314 <WM__GetTopLevelLayer>
 800b546:	2800      	cmp	r0, #0
 800b548:	db03      	blt.n	800b552 <WM__SelectTopLevelLayer+0x12>
 800b54a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b54e:	f000 bce9 	b.w	800bf24 <GUI_SelectLayer>
 800b552:	bd08      	pop	{r3, pc}

0800b554 <WM_SelectWindow>:
 800b554:	4b0d      	ldr	r3, [pc, #52]	@ (800b58c <WM_SelectWindow+0x38>)
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	b570      	push	{r4, r5, r6, lr}
 800b55a:	6c96      	ldr	r6, [r2, #72]	@ 0x48
 800b55c:	4604      	mov	r4, r0
 800b55e:	461d      	mov	r5, r3
 800b560:	b908      	cbnz	r0, 800b566 <WM_SelectWindow+0x12>
 800b562:	4b0b      	ldr	r3, [pc, #44]	@ (800b590 <WM_SelectWindow+0x3c>)
 800b564:	681c      	ldr	r4, [r3, #0]
 800b566:	6494      	str	r4, [r2, #72]	@ 0x48
 800b568:	4620      	mov	r0, r4
 800b56a:	f7ff ffe9 	bl	800b540 <WM__SelectTopLevelLayer>
 800b56e:	f7fd f847 	bl	8008600 <LCD_SetClipRectMax>
 800b572:	4620      	mov	r0, r4
 800b574:	f7fb f9e6 	bl	8006944 <GUI_ALLOC_h2p>
 800b578:	682b      	ldr	r3, [r5, #0]
 800b57a:	f9b0 2000 	ldrsh.w	r2, [r0]
 800b57e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b580:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800b584:	651a      	str	r2, [r3, #80]	@ 0x50
 800b586:	4630      	mov	r0, r6
 800b588:	bd70      	pop	{r4, r5, r6, pc}
 800b58a:	bf00      	nop
 800b58c:	2000002c 	.word	0x2000002c
 800b590:	2000a41c 	.word	0x2000a41c

0800b594 <WM_CreateWindowAsChild>:
 800b594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b598:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b59c:	4698      	mov	r8, r3
 800b59e:	4b4e      	ldr	r3, [pc, #312]	@ (800b6d8 <WM_CreateWindowAsChild+0x144>)
 800b5a0:	4605      	mov	r5, r0
 800b5a2:	460e      	mov	r6, r1
 800b5a4:	4617      	mov	r7, r2
 800b5a6:	f8d3 9000 	ldr.w	r9, [r3]
 800b5aa:	f1ba 0f00 	cmp.w	sl, #0
 800b5ae:	d128      	bne.n	800b602 <WM_CreateWindowAsChild+0x6e>
 800b5b0:	4b4a      	ldr	r3, [pc, #296]	@ (800b6dc <WM_CreateWindowAsChild+0x148>)
 800b5b2:	881b      	ldrh	r3, [r3, #0]
 800b5b4:	b353      	cbz	r3, 800b60c <WM_CreateWindowAsChild+0x78>
 800b5b6:	4b4a      	ldr	r3, [pc, #296]	@ (800b6e0 <WM_CreateWindowAsChild+0x14c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	7c5a      	ldrb	r2, [r3, #17]
 800b5bc:	4b49      	ldr	r3, [pc, #292]	@ (800b6e4 <WM_CreateWindowAsChild+0x150>)
 800b5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5c2:	1c5a      	adds	r2, r3, #1
 800b5c4:	2a01      	cmp	r2, #1
 800b5c6:	d921      	bls.n	800b60c <WM_CreateWindowAsChild+0x78>
 800b5c8:	469a      	mov	sl, r3
 800b5ca:	4650      	mov	r0, sl
 800b5cc:	f7fb f9c4 	bl	8006958 <GUI_ALLOC_LockH>
 800b5d0:	f9b0 1000 	ldrsh.w	r1, [r0]
 800b5d4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800b5d8:	9001      	str	r0, [sp, #4]
 800b5da:	440d      	add	r5, r1
 800b5dc:	4416      	add	r6, r2
 800b5de:	b91f      	cbnz	r7, 800b5e8 <WM_CreateWindowAsChild+0x54>
 800b5e0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b5e4:	1a5f      	subs	r7, r3, r1
 800b5e6:	3701      	adds	r7, #1
 800b5e8:	f1b8 0f00 	cmp.w	r8, #0
 800b5ec:	d105      	bne.n	800b5fa <WM_CreateWindowAsChild+0x66>
 800b5ee:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800b5f2:	ebc2 0803 	rsb	r8, r2, r3
 800b5f6:	f108 0801 	add.w	r8, r8, #1
 800b5fa:	a801      	add	r0, sp, #4
 800b5fc:	f7fb f9ba 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b600:	e004      	b.n	800b60c <WM_CreateWindowAsChild+0x78>
 800b602:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b606:	d1e0      	bne.n	800b5ca <WM_CreateWindowAsChild+0x36>
 800b608:	f04f 0a00 	mov.w	sl, #0
 800b60c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800b60e:	302c      	adds	r0, #44	@ 0x2c
 800b610:	f7fb fb52 	bl	8006cb8 <GUI_ALLOC_AllocZero>
 800b614:	4604      	mov	r4, r0
 800b616:	2800      	cmp	r0, #0
 800b618:	d059      	beq.n	800b6ce <WM_CreateWindowAsChild+0x13a>
 800b61a:	4a30      	ldr	r2, [pc, #192]	@ (800b6dc <WM_CreateWindowAsChild+0x148>)
 800b61c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b61e:	ea49 0903 	orr.w	r9, r9, r3
 800b622:	8813      	ldrh	r3, [r2, #0]
 800b624:	3301      	adds	r3, #1
 800b626:	8013      	strh	r3, [r2, #0]
 800b628:	f7fb f996 	bl	8006958 <GUI_ALLOC_LockH>
 800b62c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b62e:	6103      	str	r3, [r0, #16]
 800b630:	f10d 0b08 	add.w	fp, sp, #8
 800b634:	4b2c      	ldr	r3, [pc, #176]	@ (800b6e8 <WM_CreateWindowAsChild+0x154>)
 800b636:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800b638:	f84b 0d08 	str.w	r0, [fp, #-8]!
 800b63c:	ea09 0303 	and.w	r3, r9, r3
 800b640:	8005      	strh	r5, [r0, #0]
 800b642:	8046      	strh	r6, [r0, #2]
 800b644:	443d      	add	r5, r7
 800b646:	4446      	add	r6, r8
 800b648:	4313      	orrs	r3, r2
 800b64a:	3d01      	subs	r5, #1
 800b64c:	3e01      	subs	r6, #1
 800b64e:	6283      	str	r3, [r0, #40]	@ 0x28
 800b650:	8085      	strh	r5, [r0, #4]
 800b652:	80c6      	strh	r6, [r0, #6]
 800b654:	4658      	mov	r0, fp
 800b656:	f7fb f98d 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b65a:	4b24      	ldr	r3, [pc, #144]	@ (800b6ec <WM_CreateWindowAsChild+0x158>)
 800b65c:	6818      	ldr	r0, [r3, #0]
 800b65e:	b148      	cbz	r0, 800b674 <WM_CreateWindowAsChild+0xe0>
 800b660:	f7fb f970 	bl	8006944 <GUI_ALLOC_h2p>
 800b664:	4605      	mov	r5, r0
 800b666:	4620      	mov	r0, r4
 800b668:	f7fb f96c 	bl	8006944 <GUI_ALLOC_h2p>
 800b66c:	696b      	ldr	r3, [r5, #20]
 800b66e:	6143      	str	r3, [r0, #20]
 800b670:	616c      	str	r4, [r5, #20]
 800b672:	e000      	b.n	800b676 <WM_CreateWindowAsChild+0xe2>
 800b674:	601c      	str	r4, [r3, #0]
 800b676:	4651      	mov	r1, sl
 800b678:	4620      	mov	r0, r4
 800b67a:	f7ff fd51 	bl	800b120 <WM__InsertWindowIntoList>
 800b67e:	f019 0f20 	tst.w	r9, #32
 800b682:	d002      	beq.n	800b68a <WM_CreateWindowAsChild+0xf6>
 800b684:	4620      	mov	r0, r4
 800b686:	f7ff ff65 	bl	800b554 <WM_SelectWindow>
 800b68a:	f019 0f01 	tst.w	r9, #1
 800b68e:	bf1f      	itttt	ne
 800b690:	4a17      	ldrne	r2, [pc, #92]	@ (800b6f0 <WM_CreateWindowAsChild+0x15c>)
 800b692:	6813      	ldrne	r3, [r2, #0]
 800b694:	3301      	addne	r3, #1
 800b696:	6013      	strne	r3, [r2, #0]
 800b698:	f019 0f40 	tst.w	r9, #64	@ 0x40
 800b69c:	d002      	beq.n	800b6a4 <WM_CreateWindowAsChild+0x110>
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f000 fa5e 	bl	800bb60 <WM_BringToBottom>
 800b6a4:	f019 0f02 	tst.w	r9, #2
 800b6a8:	d00d      	beq.n	800b6c6 <WM_CreateWindowAsChild+0x132>
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f7fb f954 	bl	8006958 <GUI_ALLOC_LockH>
 800b6b0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b6b2:	9000      	str	r0, [sp, #0]
 800b6b4:	f043 0302 	orr.w	r3, r3, #2
 800b6b8:	6283      	str	r3, [r0, #40]	@ 0x28
 800b6ba:	4658      	mov	r0, fp
 800b6bc:	f7fb f95a 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	f7ff ff3a 	bl	800b53a <WM_InvalidateWindow>
 800b6c6:	2101      	movs	r1, #1
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f7ff fe0c 	bl	800b2e6 <WM__SendMsgNoData>
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	b003      	add	sp, #12
 800b6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d6:	bf00      	nop
 800b6d8:	2000a430 	.word	0x2000a430
 800b6dc:	2000a3f8 	.word	0x2000a3f8
 800b6e0:	2000002c 	.word	0x2000002c
 800b6e4:	2000a400 	.word	0x2000a400
 800b6e8:	003f3f9f 	.word	0x003f3f9f
 800b6ec:	2000a41c 	.word	0x2000a41c
 800b6f0:	2000a450 	.word	0x2000a450

0800b6f4 <WM__GetNextIVR>:
 800b6f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b6f8:	4f5d      	ldr	r7, [pc, #372]	@ (800b870 <WM__GetNextIVR+0x17c>)
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	f893 0054 	ldrb.w	r0, [r3, #84]	@ 0x54
 800b700:	2800      	cmp	r0, #0
 800b702:	f000 80b1 	beq.w	800b868 <WM__GetNextIVR+0x174>
 800b706:	4a5b      	ldr	r2, [pc, #364]	@ (800b874 <WM__GetNextIVR+0x180>)
 800b708:	6a13      	ldr	r3, [r2, #32]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	4614      	mov	r4, r2
 800b70e:	dd03      	ble.n	800b718 <WM__GetNextIVR+0x24>
 800b710:	3b01      	subs	r3, #1
 800b712:	6213      	str	r3, [r2, #32]
 800b714:	2000      	movs	r0, #0
 800b716:	e0a7      	b.n	800b868 <WM__GetNextIVR+0x174>
 800b718:	f102 0614 	add.w	r6, r2, #20
 800b71c:	69d3      	ldr	r3, [r2, #28]
 800b71e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b722:	3301      	adds	r3, #1
 800b724:	ad02      	add	r5, sp, #8
 800b726:	61d3      	str	r3, [r2, #28]
 800b728:	e885 0003 	stmia.w	r5, {r0, r1}
 800b72c:	b923      	cbnz	r3, 800b738 <WM__GetNextIVR+0x44>
 800b72e:	8993      	ldrh	r3, [r2, #12]
 800b730:	f8ad 3008 	strh.w	r3, [sp, #8]
 800b734:	89d3      	ldrh	r3, [r2, #14]
 800b736:	e010      	b.n	800b75a <WM__GetNextIVR+0x66>
 800b738:	8b13      	ldrh	r3, [r2, #24]
 800b73a:	8ad2      	ldrh	r2, [r2, #22]
 800b73c:	f8ad 200a 	strh.w	r2, [sp, #10]
 800b740:	3301      	adds	r3, #1
 800b742:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 800b746:	b21b      	sxth	r3, r3
 800b748:	429a      	cmp	r2, r3
 800b74a:	f8ad 3008 	strh.w	r3, [sp, #8]
 800b74e:	da06      	bge.n	800b75e <WM__GetNextIVR+0x6a>
 800b750:	89a3      	ldrh	r3, [r4, #12]
 800b752:	f8ad 3008 	strh.w	r3, [sp, #8]
 800b756:	8b63      	ldrh	r3, [r4, #26]
 800b758:	3301      	adds	r3, #1
 800b75a:	f8ad 300a 	strh.w	r3, [sp, #10]
 800b75e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800b762:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 800b766:	f8df 810c 	ldr.w	r8, [pc, #268]	@ 800b874 <WM__GetNextIVR+0x180>
 800b76a:	429a      	cmp	r2, r3
 800b76c:	dd04      	ble.n	800b778 <WM__GetNextIVR+0x84>
 800b76e:	6a23      	ldr	r3, [r4, #32]
 800b770:	3b01      	subs	r3, #1
 800b772:	2000      	movs	r0, #0
 800b774:	6223      	str	r3, [r4, #32]
 800b776:	e077      	b.n	800b868 <WM__GetNextIVR+0x174>
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800b77c:	f7fb f8ec 	bl	8006958 <GUI_ALLOC_LockH>
 800b780:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800b784:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 800b788:	9001      	str	r0, [sp, #4]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d11c      	bne.n	800b7c8 <WM__GetNextIVR+0xd4>
 800b78e:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 800b792:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b796:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 800b79a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b79e:	4b34      	ldr	r3, [pc, #208]	@ (800b870 <WM__GetNextIVR+0x17c>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b7a4:	b15a      	cbz	r2, 800b7be <WM__GetNextIVR+0xca>
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	f7fb f8cc 	bl	8006944 <GUI_ALLOC_h2p>
 800b7ac:	4680      	mov	r8, r0
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	6a00      	ldr	r0, [r0, #32]
 800b7b4:	f7ff fbb8 	bl	800af28 <_Findy1>
 800b7b8:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800b7bc:	e7f2      	b.n	800b7a4 <WM__GetNextIVR+0xb0>
 800b7be:	9b01      	ldr	r3, [sp, #4]
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	69d8      	ldr	r0, [r3, #28]
 800b7c4:	f7ff fbb0 	bl	800af28 <_Findy1>
 800b7c8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800b7cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b7d4:	b16a      	cbz	r2, 800b7f2 <WM__GetNextIVR+0xfe>
 800b7d6:	4610      	mov	r0, r2
 800b7d8:	f7fb f8b4 	bl	8006944 <GUI_ALLOC_h2p>
 800b7dc:	2200      	movs	r2, #0
 800b7de:	4680      	mov	r8, r0
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	6a00      	ldr	r0, [r0, #32]
 800b7e4:	f7ff fbf3 	bl	800afce <_Findx0>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d1ed      	bne.n	800b7c8 <WM__GetNextIVR+0xd4>
 800b7ec:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800b7f0:	e7f0      	b.n	800b7d4 <WM__GetNextIVR+0xe0>
 800b7f2:	9b01      	ldr	r3, [sp, #4]
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	69d8      	ldr	r0, [r3, #28]
 800b7f8:	f7ff fbe9 	bl	800afce <_Findx0>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	d1e3      	bne.n	800b7c8 <WM__GetNextIVR+0xd4>
 800b800:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 800b804:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800b808:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	dd07      	ble.n	800b820 <WM__GetNextIVR+0x12c>
 800b810:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b814:	e886 0003 	stmia.w	r6, {r0, r1}
 800b818:	a801      	add	r0, sp, #4
 800b81a:	f7fb f8ab 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b81e:	e797      	b.n	800b750 <WM__GetNextIVR+0x5c>
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b824:	b152      	cbz	r2, 800b83c <WM__GetNextIVR+0x148>
 800b826:	4610      	mov	r0, r2
 800b828:	f7fb f88c 	bl	8006944 <GUI_ALLOC_h2p>
 800b82c:	4607      	mov	r7, r0
 800b82e:	2200      	movs	r2, #0
 800b830:	4629      	mov	r1, r5
 800b832:	6a00      	ldr	r0, [r0, #32]
 800b834:	f7ff fc0e 	bl	800b054 <_Findx1>
 800b838:	69ba      	ldr	r2, [r7, #24]
 800b83a:	e7f3      	b.n	800b824 <WM__GetNextIVR+0x130>
 800b83c:	af04      	add	r7, sp, #16
 800b83e:	4629      	mov	r1, r5
 800b840:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 800b844:	69d8      	ldr	r0, [r3, #28]
 800b846:	f7ff fc05 	bl	800b054 <_Findx1>
 800b84a:	4638      	mov	r0, r7
 800b84c:	f7fb f892 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b850:	69e2      	ldr	r2, [r4, #28]
 800b852:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800b856:	429a      	cmp	r2, r3
 800b858:	dc89      	bgt.n	800b76e <WM__GetNextIVR+0x7a>
 800b85a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b85e:	e886 0003 	stmia.w	r6, {r0, r1}
 800b862:	f7ff fce3 	bl	800b22c <WM__ActivateClipRect>
 800b866:	2001      	movs	r0, #1
 800b868:	b004      	add	sp, #16
 800b86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b86e:	bf00      	nop
 800b870:	2000002c 	.word	0x2000002c
 800b874:	200002d8 	.word	0x200002d8

0800b878 <WM__InitIVRSearch>:
 800b878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b87c:	4e39      	ldr	r6, [pc, #228]	@ (800b964 <WM__InitIVRSearch+0xec>)
 800b87e:	6832      	ldr	r2, [r6, #0]
 800b880:	f892 3054 	ldrb.w	r3, [r2, #84]	@ 0x54
 800b884:	b086      	sub	sp, #24
 800b886:	4680      	mov	r8, r0
 800b888:	b913      	cbnz	r3, 800b890 <WM__InitIVRSearch+0x18>
 800b88a:	f7ff fccf 	bl	800b22c <WM__ActivateClipRect>
 800b88e:	e064      	b.n	800b95a <WM__InitIVRSearch+0xe2>
 800b890:	4f35      	ldr	r7, [pc, #212]	@ (800b968 <WM__InitIVRSearch+0xf0>)
 800b892:	6a3b      	ldr	r3, [r7, #32]
 800b894:	3301      	adds	r3, #1
 800b896:	2b01      	cmp	r3, #1
 800b898:	623b      	str	r3, [r7, #32]
 800b89a:	463d      	mov	r5, r7
 800b89c:	dc5d      	bgt.n	800b95a <WM__InitIVRSearch+0xe2>
 800b89e:	6c90      	ldr	r0, [r2, #72]	@ 0x48
 800b8a0:	f7fb f85a 	bl	8006958 <GUI_ALLOC_LockH>
 800b8a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b8a8:	61fb      	str	r3, [r7, #28]
 800b8aa:	4b30      	ldr	r3, [pc, #192]	@ (800b96c <WM__InitIVRSearch+0xf4>)
 800b8ac:	9000      	str	r0, [sp, #0]
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	b113      	cbz	r3, 800b8b8 <WM__InitIVRSearch+0x40>
 800b8b2:	ab02      	add	r3, sp, #8
 800b8b4:	3008      	adds	r0, #8
 800b8b6:	e004      	b.n	800b8c2 <WM__InitIVRSearch+0x4a>
 800b8b8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b8ba:	f013 0402 	ands.w	r4, r3, #2
 800b8be:	d00c      	beq.n	800b8da <WM__InitIVRSearch+0x62>
 800b8c0:	ab02      	add	r3, sp, #8
 800b8c2:	c803      	ldmia	r0, {r0, r1}
 800b8c4:	ac02      	add	r4, sp, #8
 800b8c6:	e883 0003 	stmia.w	r3, {r0, r1}
 800b8ca:	f1b8 0f00 	cmp.w	r8, #0
 800b8ce:	d00c      	beq.n	800b8ea <WM__InitIVRSearch+0x72>
 800b8d0:	4641      	mov	r1, r8
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f7fc fb72 	bl	8007fbc <GUI__IntersectRect>
 800b8d8:	e007      	b.n	800b8ea <WM__InitIVRSearch+0x72>
 800b8da:	6a3b      	ldr	r3, [r7, #32]
 800b8dc:	4668      	mov	r0, sp
 800b8de:	3b01      	subs	r3, #1
 800b8e0:	623b      	str	r3, [r7, #32]
 800b8e2:	f7fb f847 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	e038      	b.n	800b95c <WM__InitIVRSearch+0xe4>
 800b8ea:	6833      	ldr	r3, [r6, #0]
 800b8ec:	4f20      	ldr	r7, [pc, #128]	@ (800b970 <WM__InitIVRSearch+0xf8>)
 800b8ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b8f0:	b1c2      	cbz	r2, 800b924 <WM__InitIVRSearch+0xac>
 800b8f2:	9b00      	ldr	r3, [sp, #0]
 800b8f4:	6810      	ldr	r0, [r2, #0]
 800b8f6:	6851      	ldr	r1, [r2, #4]
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	ab04      	add	r3, sp, #16
 800b8fc:	c303      	stmia	r3!, {r0, r1}
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	b133      	cbz	r3, 800b910 <WM__InitIVRSearch+0x98>
 800b902:	a801      	add	r0, sp, #4
 800b904:	f7fb f836 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b908:	6838      	ldr	r0, [r7, #0]
 800b90a:	f7fb f825 	bl	8006958 <GUI_ALLOC_LockH>
 800b90e:	9001      	str	r0, [sp, #4]
 800b910:	a904      	add	r1, sp, #16
 800b912:	9801      	ldr	r0, [sp, #4]
 800b914:	f7ff fc5a 	bl	800b1cc <WM__Client2Screen>
 800b918:	4620      	mov	r0, r4
 800b91a:	a904      	add	r1, sp, #16
 800b91c:	f7fc fb4e 	bl	8007fbc <GUI__IntersectRect>
 800b920:	a801      	add	r0, sp, #4
 800b922:	e000      	b.n	800b926 <WM__InitIVRSearch+0xae>
 800b924:	4668      	mov	r0, sp
 800b926:	f7fb f825 	bl	8006974 <GUI_ALLOC_UnlockH>
 800b92a:	6839      	ldr	r1, [r7, #0]
 800b92c:	b119      	cbz	r1, 800b936 <WM__InitIVRSearch+0xbe>
 800b92e:	4620      	mov	r0, r4
 800b930:	f7ff fbca 	bl	800b0c8 <WM__ClipAtParentBorders>
 800b934:	b128      	cbz	r0, 800b942 <WM__InitIVRSearch+0xca>
 800b936:	6833      	ldr	r3, [r6, #0]
 800b938:	4620      	mov	r0, r4
 800b93a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800b93c:	f7ff fbc4 	bl	800b0c8 <WM__ClipAtParentBorders>
 800b940:	b918      	cbnz	r0, 800b94a <WM__InitIVRSearch+0xd2>
 800b942:	6a2b      	ldr	r3, [r5, #32]
 800b944:	3b01      	subs	r3, #1
 800b946:	622b      	str	r3, [r5, #32]
 800b948:	e008      	b.n	800b95c <WM__InitIVRSearch+0xe4>
 800b94a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b94e:	4b09      	ldr	r3, [pc, #36]	@ (800b974 <WM__InitIVRSearch+0xfc>)
 800b950:	e883 0003 	stmia.w	r3, {r0, r1}
 800b954:	f7ff fece 	bl	800b6f4 <WM__GetNextIVR>
 800b958:	e000      	b.n	800b95c <WM__InitIVRSearch+0xe4>
 800b95a:	2001      	movs	r0, #1
 800b95c:	b006      	add	sp, #24
 800b95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b962:	bf00      	nop
 800b964:	2000002c 	.word	0x2000002c
 800b968:	200002d8 	.word	0x200002d8
 800b96c:	2000a42c 	.word	0x2000a42c
 800b970:	2000a3fc 	.word	0x2000a3fc
 800b974:	200002e4 	.word	0x200002e4

0800b978 <WM_Activate>:
 800b978:	4b02      	ldr	r3, [pc, #8]	@ (800b984 <WM_Activate+0xc>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2201      	movs	r2, #1
 800b97e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800b982:	4770      	bx	lr
 800b984:	2000002c 	.word	0x2000002c

0800b988 <WM_DefaultProc>:
 800b988:	b510      	push	{r4, lr}
 800b98a:	4604      	mov	r4, r0
 800b98c:	6840      	ldr	r0, [r0, #4]
 800b98e:	6823      	ldr	r3, [r4, #0]
 800b990:	2b17      	cmp	r3, #23
 800b992:	d010      	beq.n	800b9b6 <WM_DefaultProc+0x2e>
 800b994:	dc07      	bgt.n	800b9a6 <WM_DefaultProc+0x1e>
 800b996:	2b0e      	cmp	r3, #14
 800b998:	d00f      	beq.n	800b9ba <WM_DefaultProc+0x32>
 800b99a:	2b14      	cmp	r3, #20
 800b99c:	d115      	bne.n	800b9ca <WM_DefaultProc+0x42>
 800b99e:	68e1      	ldr	r1, [r4, #12]
 800b9a0:	f000 f972 	bl	800bc88 <WM__GetClientRectEx>
 800b9a4:	e011      	b.n	800b9ca <WM_DefaultProc+0x42>
 800b9a6:	2b22      	cmp	r3, #34	@ 0x22
 800b9a8:	d00c      	beq.n	800b9c4 <WM_DefaultProc+0x3c>
 800b9aa:	2b28      	cmp	r3, #40	@ 0x28
 800b9ac:	d10d      	bne.n	800b9ca <WM_DefaultProc+0x42>
 800b9ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9b2:	f7ff bdc2 	b.w	800b53a <WM_InvalidateWindow>
 800b9b6:	60e0      	str	r0, [r4, #12]
 800b9b8:	bd10      	pop	{r4, pc}
 800b9ba:	4621      	mov	r1, r4
 800b9bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9c0:	f000 b911 	b.w	800bbe6 <WM_SendToParent>
 800b9c4:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 800b9c8:	e000      	b.n	800b9cc <WM_DefaultProc+0x44>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	60e3      	str	r3, [r4, #12]
 800b9ce:	bd10      	pop	{r4, pc}

0800b9d0 <_cbBackWin>:
 800b9d0:	6803      	ldr	r3, [r0, #0]
 800b9d2:	2b0e      	cmp	r3, #14
 800b9d4:	b510      	push	{r4, lr}
 800b9d6:	4604      	mov	r4, r0
 800b9d8:	d002      	beq.n	800b9e0 <_cbBackWin+0x10>
 800b9da:	2b0f      	cmp	r3, #15
 800b9dc:	d009      	beq.n	800b9f2 <_cbBackWin+0x22>
 800b9de:	e020      	b.n	800ba22 <_cbBackWin+0x52>
 800b9e0:	68c3      	ldr	r3, [r0, #12]
 800b9e2:	685a      	ldr	r2, [r3, #4]
 800b9e4:	2a01      	cmp	r2, #1
 800b9e6:	d121      	bne.n	800ba2c <_cbBackWin+0x5c>
 800b9e8:	6818      	ldr	r0, [r3, #0]
 800b9ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9ee:	f7fc bacb 	b.w	8007f88 <GUI_StoreKey>
 800b9f2:	4a0f      	ldr	r2, [pc, #60]	@ (800ba30 <_cbBackWin+0x60>)
 800b9f4:	6843      	ldr	r3, [r0, #4]
 800b9f6:	6811      	ldr	r1, [r2, #0]
 800b9f8:	428b      	cmp	r3, r1
 800b9fa:	d006      	beq.n	800ba0a <_cbBackWin+0x3a>
 800b9fc:	6852      	ldr	r2, [r2, #4]
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	bf0c      	ite	eq
 800ba02:	2301      	moveq	r3, #1
 800ba04:	f04f 33ff 	movne.w	r3, #4294967295
 800ba08:	e000      	b.n	800ba0c <_cbBackWin+0x3c>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	4a09      	ldr	r2, [pc, #36]	@ (800ba34 <_cbBackWin+0x64>)
 800ba0e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ba12:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 800ba16:	4298      	cmp	r0, r3
 800ba18:	d003      	beq.n	800ba22 <_cbBackWin+0x52>
 800ba1a:	f7fc f86f 	bl	8007afc <GUI_SetBkColor>
 800ba1e:	f7fc f925 	bl	8007c6c <GUI_Clear>
 800ba22:	4620      	mov	r0, r4
 800ba24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba28:	f7ff bfae 	b.w	800b988 <WM_DefaultProc>
 800ba2c:	bd10      	pop	{r4, pc}
 800ba2e:	bf00      	nop
 800ba30:	2000a400 	.word	0x2000a400
 800ba34:	2000a434 	.word	0x2000a434

0800ba38 <WM_Init>:
 800ba38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ba3c:	4d2a      	ldr	r5, [pc, #168]	@ (800bae8 <WM_Init+0xb0>)
 800ba3e:	7828      	ldrb	r0, [r5, #0]
 800ba40:	2800      	cmp	r0, #0
 800ba42:	d14d      	bne.n	800bae0 <WM_Init+0xa8>
 800ba44:	4b29      	ldr	r3, [pc, #164]	@ (800baec <WM_Init+0xb4>)
 800ba46:	4e2a      	ldr	r6, [pc, #168]	@ (800baf0 <WM_Init+0xb8>)
 800ba48:	6018      	str	r0, [r3, #0]
 800ba4a:	4b2a      	ldr	r3, [pc, #168]	@ (800baf4 <WM_Init+0xbc>)
 800ba4c:	4f2a      	ldr	r7, [pc, #168]	@ (800baf8 <WM_Init+0xc0>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 800bb24 <WM_Init+0xec>
 800ba54:	6458      	str	r0, [r3, #68]	@ 0x44
 800ba56:	4b29      	ldr	r3, [pc, #164]	@ (800bafc <WM_Init+0xc4>)
 800ba58:	60a8      	str	r0, [r5, #8]
 800ba5a:	8018      	strh	r0, [r3, #0]
 800ba5c:	4b28      	ldr	r3, [pc, #160]	@ (800bb00 <WM_Init+0xc8>)
 800ba5e:	4604      	mov	r4, r0
 800ba60:	8018      	strh	r0, [r3, #0]
 800ba62:	4620      	mov	r0, r4
 800ba64:	f7fc f9ea 	bl	8007e3c <GUI_DEVICE__GetpDriver>
 800ba68:	b1a8      	cbz	r0, 800ba96 <WM_Init+0x5e>
 800ba6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba6e:	2302      	movs	r3, #2
 800ba70:	2100      	movs	r1, #0
 800ba72:	e88d 000c 	stmia.w	sp, {r2, r3}
 800ba76:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	9103      	str	r1, [sp, #12]
 800ba7e:	9602      	str	r6, [sp, #8]
 800ba80:	4608      	mov	r0, r1
 800ba82:	f7ff fd87 	bl	800b594 <WM_CreateWindowAsChild>
 800ba86:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 800ba8a:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 800ba8e:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 800ba92:	f7ff fd52 	bl	800b53a <WM_InvalidateWindow>
 800ba96:	3401      	adds	r4, #1
 800ba98:	2c02      	cmp	r4, #2
 800ba9a:	d1e2      	bne.n	800ba62 <WM_Init+0x2a>
 800ba9c:	4819      	ldr	r0, [pc, #100]	@ (800bb04 <WM_Init+0xcc>)
 800ba9e:	f000 f8eb 	bl	800bc78 <WM__AddCriticalHandle>
 800baa2:	4819      	ldr	r0, [pc, #100]	@ (800bb08 <WM_Init+0xd0>)
 800baa4:	f000 f8e8 	bl	800bc78 <WM__AddCriticalHandle>
 800baa8:	4818      	ldr	r0, [pc, #96]	@ (800bb0c <WM_Init+0xd4>)
 800baaa:	f000 f8e5 	bl	800bc78 <WM__AddCriticalHandle>
 800baae:	4818      	ldr	r0, [pc, #96]	@ (800bb10 <WM_Init+0xd8>)
 800bab0:	f000 f8e2 	bl	800bc78 <WM__AddCriticalHandle>
 800bab4:	4817      	ldr	r0, [pc, #92]	@ (800bb14 <WM_Init+0xdc>)
 800bab6:	f000 f8df 	bl	800bc78 <WM__AddCriticalHandle>
 800baba:	4817      	ldr	r0, [pc, #92]	@ (800bb18 <WM_Init+0xe0>)
 800babc:	f000 f8dc 	bl	800bc78 <WM__AddCriticalHandle>
 800bac0:	4b0d      	ldr	r3, [pc, #52]	@ (800baf8 <WM_Init+0xc0>)
 800bac2:	6818      	ldr	r0, [r3, #0]
 800bac4:	f7ff fd46 	bl	800b554 <WM_SelectWindow>
 800bac8:	f7ff ff56 	bl	800b978 <WM_Activate>
 800bacc:	2301      	movs	r3, #1
 800bace:	702b      	strb	r3, [r5, #0]
 800bad0:	4812      	ldr	r0, [pc, #72]	@ (800bb1c <WM_Init+0xe4>)
 800bad2:	4b13      	ldr	r3, [pc, #76]	@ (800bb20 <WM_Init+0xe8>)
 800bad4:	626b      	str	r3, [r5, #36]	@ 0x24
 800bad6:	b004      	add	sp, #16
 800bad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800badc:	f7fc b99a 	b.w	8007e14 <GUI__RegisterExit>
 800bae0:	b004      	add	sp, #16
 800bae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bae6:	bf00      	nop
 800bae8:	200002d8 	.word	0x200002d8
 800baec:	2000a41c 	.word	0x2000a41c
 800baf0:	0800b9d1 	.word	0x0800b9d1
 800baf4:	2000002c 	.word	0x2000002c
 800baf8:	2000a400 	.word	0x2000a400
 800bafc:	2000a418 	.word	0x2000a418
 800bb00:	2000a3f8 	.word	0x2000a3f8
 800bb04:	2000a474 	.word	0x2000a474
 800bb08:	2000a464 	.word	0x2000a464
 800bb0c:	2000a454 	.word	0x2000a454
 800bb10:	2000a47c 	.word	0x2000a47c
 800bb14:	2000a46c 	.word	0x2000a46c
 800bb18:	2000a45c 	.word	0x2000a45c
 800bb1c:	200002fc 	.word	0x200002fc
 800bb20:	0800ae8d 	.word	0x0800ae8d
 800bb24:	2000a434 	.word	0x2000a434

0800bb28 <WM_GetDesktopWindow>:
 800bb28:	4b03      	ldr	r3, [pc, #12]	@ (800bb38 <WM_GetDesktopWindow+0x10>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	7c5a      	ldrb	r2, [r3, #17]
 800bb2e:	4b03      	ldr	r3, [pc, #12]	@ (800bb3c <WM_GetDesktopWindow+0x14>)
 800bb30:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	2000002c 	.word	0x2000002c
 800bb3c:	2000a400 	.word	0x2000a400

0800bb40 <WM_GetFirstChild>:
 800bb40:	b508      	push	{r3, lr}
 800bb42:	4603      	mov	r3, r0
 800bb44:	b110      	cbz	r0, 800bb4c <WM_GetFirstChild+0xc>
 800bb46:	f7fa fefd 	bl	8006944 <GUI_ALLOC_h2p>
 800bb4a:	69c3      	ldr	r3, [r0, #28]
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	bd08      	pop	{r3, pc}

0800bb50 <WM_GetParent>:
 800bb50:	b508      	push	{r3, lr}
 800bb52:	4603      	mov	r3, r0
 800bb54:	b110      	cbz	r0, 800bb5c <WM_GetParent+0xc>
 800bb56:	f7fa fef5 	bl	8006944 <GUI_ALLOC_h2p>
 800bb5a:	6983      	ldr	r3, [r0, #24]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	bd08      	pop	{r3, pc}

0800bb60 <WM_BringToBottom>:
 800bb60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb64:	4604      	mov	r4, r0
 800bb66:	b087      	sub	sp, #28
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	d039      	beq.n	800bbe0 <WM_BringToBottom+0x80>
 800bb6c:	f7fa fef4 	bl	8006958 <GUI_ALLOC_LockH>
 800bb70:	4603      	mov	r3, r0
 800bb72:	9001      	str	r0, [sp, #4]
 800bb74:	c803      	ldmia	r0, {r0, r1}
 800bb76:	ad04      	add	r5, sp, #16
 800bb78:	e885 0003 	stmia.w	r5, {r0, r1}
 800bb7c:	a801      	add	r0, sp, #4
 800bb7e:	6a1e      	ldr	r6, [r3, #32]
 800bb80:	f8d3 9028 	ldr.w	r9, [r3, #40]	@ 0x28
 800bb84:	f7fa fef6 	bl	8006974 <GUI_ALLOC_UnlockH>
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f000 f843 	bl	800bc14 <WM__GetPrevSibling>
 800bb8e:	4607      	mov	r7, r0
 800bb90:	b330      	cbz	r0, 800bbe0 <WM_BringToBottom+0x80>
 800bb92:	4620      	mov	r0, r4
 800bb94:	f7ff ffdc 	bl	800bb50 <WM_GetParent>
 800bb98:	f019 0f02 	tst.w	r9, #2
 800bb9c:	4680      	mov	r8, r0
 800bb9e:	d004      	beq.n	800bbaa <WM_BringToBottom+0x4a>
 800bba0:	4601      	mov	r1, r0
 800bba2:	4632      	mov	r2, r6
 800bba4:	4628      	mov	r0, r5
 800bba6:	f7ff fc89 	bl	800b4bc <WM__InvalidateRectEx>
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f7fa fed4 	bl	8006958 <GUI_ALLOC_LockH>
 800bbb0:	9001      	str	r0, [sp, #4]
 800bbb2:	4640      	mov	r0, r8
 800bbb4:	f7fa fed0 	bl	8006958 <GUI_ALLOC_LockH>
 800bbb8:	9003      	str	r0, [sp, #12]
 800bbba:	4638      	mov	r0, r7
 800bbbc:	f7fa fecc 	bl	8006958 <GUI_ALLOC_LockH>
 800bbc0:	9b03      	ldr	r3, [sp, #12]
 800bbc2:	9a01      	ldr	r2, [sp, #4]
 800bbc4:	69d9      	ldr	r1, [r3, #28]
 800bbc6:	6206      	str	r6, [r0, #32]
 800bbc8:	9002      	str	r0, [sp, #8]
 800bbca:	6211      	str	r1, [r2, #32]
 800bbcc:	a801      	add	r0, sp, #4
 800bbce:	61dc      	str	r4, [r3, #28]
 800bbd0:	f7fa fed0 	bl	8006974 <GUI_ALLOC_UnlockH>
 800bbd4:	a803      	add	r0, sp, #12
 800bbd6:	f7fa fecd 	bl	8006974 <GUI_ALLOC_UnlockH>
 800bbda:	a802      	add	r0, sp, #8
 800bbdc:	f7fa feca 	bl	8006974 <GUI_ALLOC_UnlockH>
 800bbe0:	b007      	add	sp, #28
 800bbe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bbe6 <WM_SendToParent>:
 800bbe6:	b538      	push	{r3, r4, r5, lr}
 800bbe8:	4605      	mov	r5, r0
 800bbea:	460c      	mov	r4, r1
 800bbec:	b141      	cbz	r1, 800bc00 <WM_SendToParent+0x1a>
 800bbee:	f7ff ffaf 	bl	800bb50 <WM_GetParent>
 800bbf2:	b128      	cbz	r0, 800bc00 <WM_SendToParent+0x1a>
 800bbf4:	60a5      	str	r5, [r4, #8]
 800bbf6:	4621      	mov	r1, r4
 800bbf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbfc:	f000 b81e 	b.w	800bc3c <WM__SendMessage>
 800bc00:	bd38      	pop	{r3, r4, r5, pc}

0800bc02 <WM__GetFirstSibling>:
 800bc02:	b508      	push	{r3, lr}
 800bc04:	f7ff ffa4 	bl	800bb50 <WM_GetParent>
 800bc08:	b118      	cbz	r0, 800bc12 <WM__GetFirstSibling+0x10>
 800bc0a:	f7fa fe9b 	bl	8006944 <GUI_ALLOC_h2p>
 800bc0e:	69c0      	ldr	r0, [r0, #28]
 800bc10:	bd08      	pop	{r3, pc}
 800bc12:	bd08      	pop	{r3, pc}

0800bc14 <WM__GetPrevSibling>:
 800bc14:	b538      	push	{r3, r4, r5, lr}
 800bc16:	4605      	mov	r5, r0
 800bc18:	f7ff fff3 	bl	800bc02 <WM__GetFirstSibling>
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	b154      	cbz	r4, 800bc36 <WM__GetPrevSibling+0x22>
 800bc20:	42ac      	cmp	r4, r5
 800bc22:	d007      	beq.n	800bc34 <WM__GetPrevSibling+0x20>
 800bc24:	4620      	mov	r0, r4
 800bc26:	f7fa fe8d 	bl	8006944 <GUI_ALLOC_h2p>
 800bc2a:	6a03      	ldr	r3, [r0, #32]
 800bc2c:	429d      	cmp	r5, r3
 800bc2e:	d002      	beq.n	800bc36 <WM__GetPrevSibling+0x22>
 800bc30:	461c      	mov	r4, r3
 800bc32:	e7f4      	b.n	800bc1e <WM__GetPrevSibling+0xa>
 800bc34:	2400      	movs	r4, #0
 800bc36:	4620      	mov	r0, r4
 800bc38:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bc3c <WM__SendMessage>:
 800bc3c:	b570      	push	{r4, r5, r6, lr}
 800bc3e:	4c0d      	ldr	r4, [pc, #52]	@ (800bc74 <WM__SendMessage+0x38>)
 800bc40:	6823      	ldr	r3, [r4, #0]
 800bc42:	2b13      	cmp	r3, #19
 800bc44:	4606      	mov	r6, r0
 800bc46:	460d      	mov	r5, r1
 800bc48:	dc12      	bgt.n	800bc70 <WM__SendMessage+0x34>
 800bc4a:	f7fa fe7b 	bl	8006944 <GUI_ALLOC_h2p>
 800bc4e:	6902      	ldr	r2, [r0, #16]
 800bc50:	606e      	str	r6, [r5, #4]
 800bc52:	b142      	cbz	r2, 800bc66 <WM__SendMessage+0x2a>
 800bc54:	6823      	ldr	r3, [r4, #0]
 800bc56:	4628      	mov	r0, r5
 800bc58:	3301      	adds	r3, #1
 800bc5a:	6023      	str	r3, [r4, #0]
 800bc5c:	4790      	blx	r2
 800bc5e:	6823      	ldr	r3, [r4, #0]
 800bc60:	3b01      	subs	r3, #1
 800bc62:	6023      	str	r3, [r4, #0]
 800bc64:	bd70      	pop	{r4, r5, r6, pc}
 800bc66:	4628      	mov	r0, r5
 800bc68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc6c:	f7ff be8c 	b.w	800b988 <WM_DefaultProc>
 800bc70:	bd70      	pop	{r4, r5, r6, pc}
 800bc72:	bf00      	nop
 800bc74:	20000308 	.word	0x20000308

0800bc78 <WM__AddCriticalHandle>:
 800bc78:	4b02      	ldr	r3, [pc, #8]	@ (800bc84 <WM__AddCriticalHandle+0xc>)
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	6002      	str	r2, [r0, #0]
 800bc7e:	6018      	str	r0, [r3, #0]
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	2000a43c 	.word	0x2000a43c

0800bc88 <WM__GetClientRectEx>:
 800bc88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc8a:	460d      	mov	r5, r1
 800bc8c:	b158      	cbz	r0, 800bca6 <WM__GetClientRectEx+0x1e>
 800bc8e:	b151      	cbz	r1, 800bca6 <WM__GetClientRectEx+0x1e>
 800bc90:	f7fa fe62 	bl	8006958 <GUI_ALLOC_LockH>
 800bc94:	ac02      	add	r4, sp, #8
 800bc96:	4629      	mov	r1, r5
 800bc98:	f844 0d04 	str.w	r0, [r4, #-4]!
 800bc9c:	f7ff fb2e 	bl	800b2fc <WM__GetClientRectWin>
 800bca0:	4620      	mov	r0, r4
 800bca2:	f7fa fe67 	bl	8006974 <GUI_ALLOC_UnlockH>
 800bca6:	b003      	add	sp, #12
 800bca8:	bd30      	pop	{r4, r5, pc}

0800bcaa <_GetIndexMask_0>:
 800bcaa:	b508      	push	{r3, lr}
 800bcac:	f7fc fe36 	bl	800891c <LCD_GetNumColors>
 800bcb0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800bcb4:	d010      	beq.n	800bcd8 <_GetIndexMask_0+0x2e>
 800bcb6:	287f      	cmp	r0, #127	@ 0x7f
 800bcb8:	d810      	bhi.n	800bcdc <_GetIndexMask_0+0x32>
 800bcba:	283f      	cmp	r0, #63	@ 0x3f
 800bcbc:	d810      	bhi.n	800bce0 <_GetIndexMask_0+0x36>
 800bcbe:	281f      	cmp	r0, #31
 800bcc0:	d810      	bhi.n	800bce4 <_GetIndexMask_0+0x3a>
 800bcc2:	280f      	cmp	r0, #15
 800bcc4:	d810      	bhi.n	800bce8 <_GetIndexMask_0+0x3e>
 800bcc6:	2807      	cmp	r0, #7
 800bcc8:	d810      	bhi.n	800bcec <_GetIndexMask_0+0x42>
 800bcca:	2803      	cmp	r0, #3
 800bccc:	d810      	bhi.n	800bcf0 <_GetIndexMask_0+0x46>
 800bcce:	2801      	cmp	r0, #1
 800bcd0:	bf94      	ite	ls
 800bcd2:	2000      	movls	r0, #0
 800bcd4:	2001      	movhi	r0, #1
 800bcd6:	e00c      	b.n	800bcf2 <_GetIndexMask_0+0x48>
 800bcd8:	2008      	movs	r0, #8
 800bcda:	e00a      	b.n	800bcf2 <_GetIndexMask_0+0x48>
 800bcdc:	2007      	movs	r0, #7
 800bcde:	e008      	b.n	800bcf2 <_GetIndexMask_0+0x48>
 800bce0:	2006      	movs	r0, #6
 800bce2:	e006      	b.n	800bcf2 <_GetIndexMask_0+0x48>
 800bce4:	2005      	movs	r0, #5
 800bce6:	e004      	b.n	800bcf2 <_GetIndexMask_0+0x48>
 800bce8:	2004      	movs	r0, #4
 800bcea:	e002      	b.n	800bcf2 <_GetIndexMask_0+0x48>
 800bcec:	2003      	movs	r0, #3
 800bcee:	e000      	b.n	800bcf2 <_GetIndexMask_0+0x48>
 800bcf0:	2002      	movs	r0, #2
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	fa03 f000 	lsl.w	r0, r3, r0
 800bcf8:	3801      	subs	r0, #1
 800bcfa:	bd08      	pop	{r3, pc}

0800bcfc <_Index2Color_0>:
 800bcfc:	b538      	push	{r3, r4, r5, lr}
 800bcfe:	4604      	mov	r4, r0
 800bd00:	f7fc fe0c 	bl	800891c <LCD_GetNumColors>
 800bd04:	4605      	mov	r5, r0
 800bd06:	f7fc fe27 	bl	8008958 <LCD_GetPalette>
 800bd0a:	42a5      	cmp	r5, r4
 800bd0c:	d903      	bls.n	800bd16 <_Index2Color_0+0x1a>
 800bd0e:	b118      	cbz	r0, 800bd18 <_Index2Color_0+0x1c>
 800bd10:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800bd14:	bd38      	pop	{r3, r4, r5, pc}
 800bd16:	2000      	movs	r0, #0
 800bd18:	bd38      	pop	{r3, r4, r5, pc}

0800bd1a <_Color2Index_0>:
 800bd1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd1e:	4681      	mov	r9, r0
 800bd20:	f7fc fdfc 	bl	800891c <LCD_GetNumColors>
 800bd24:	4607      	mov	r7, r0
 800bd26:	f7fc fe17 	bl	8008958 <LCD_GetPalette>
 800bd2a:	4606      	mov	r6, r0
 800bd2c:	b1e0      	cbz	r0, 800bd68 <_Color2Index_0+0x4e>
 800bd2e:	2000      	movs	r0, #0
 800bd30:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 800bd34:	454b      	cmp	r3, r9
 800bd36:	d017      	beq.n	800bd68 <_Color2Index_0+0x4e>
 800bd38:	3001      	adds	r0, #1
 800bd3a:	4287      	cmp	r7, r0
 800bd3c:	dcf8      	bgt.n	800bd30 <_Color2Index_0+0x16>
 800bd3e:	2400      	movs	r4, #0
 800bd40:	f06f 487f 	mvn.w	r8, #4278190080	@ 0xff000000
 800bd44:	4625      	mov	r5, r4
 800bd46:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 800bd4a:	4648      	mov	r0, r9
 800bd4c:	f7fb fe3a 	bl	80079c4 <GUI_CalcColorDist>
 800bd50:	4580      	cmp	r8, r0
 800bd52:	bf88      	it	hi
 800bd54:	462c      	movhi	r4, r5
 800bd56:	f105 0501 	add.w	r5, r5, #1
 800bd5a:	bf88      	it	hi
 800bd5c:	4680      	movhi	r8, r0
 800bd5e:	42af      	cmp	r7, r5
 800bd60:	dcf1      	bgt.n	800bd46 <_Color2Index_0+0x2c>
 800bd62:	4620      	mov	r0, r4
 800bd64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800bd6c <LCD_Index2Color_M555>:
 800bd6c:	4a08      	ldr	r2, [pc, #32]	@ (800bd90 <LCD_Index2Color_M555+0x24>)
 800bd6e:	f3c0 1344 	ubfx	r3, r0, #5, #5
 800bd72:	5cd1      	ldrb	r1, [r2, r3]
 800bd74:	f3c0 2384 	ubfx	r3, r0, #10, #5
 800bd78:	f000 001f 	and.w	r0, r0, #31
 800bd7c:	5cd3      	ldrb	r3, [r2, r3]
 800bd7e:	5c10      	ldrb	r0, [r2, r0]
 800bd80:	041b      	lsls	r3, r3, #16
 800bd82:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800bd86:	4418      	add	r0, r3
 800bd88:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	0800c8bc 	.word	0x0800c8bc

0800bd94 <GUIMONO_DispChar>:
 800bd94:	4b4d      	ldr	r3, [pc, #308]	@ (800becc <GUIMONO_DispChar+0x138>)
 800bd96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	69d1      	ldr	r1, [r2, #28]
 800bd9e:	69cc      	ldr	r4, [r1, #28]
 800bda0:	89a3      	ldrh	r3, [r4, #12]
 800bda2:	4283      	cmp	r3, r0
 800bda4:	b08b      	sub	sp, #44	@ 0x2c
 800bda6:	d808      	bhi.n	800bdba <GUIMONO_DispChar+0x26>
 800bda8:	89e5      	ldrh	r5, [r4, #14]
 800bdaa:	4285      	cmp	r5, r0
 800bdac:	d305      	bcc.n	800bdba <GUIMONO_DispChar+0x26>
 800bdae:	6825      	ldr	r5, [r4, #0]
 800bdb0:	9506      	str	r5, [sp, #24]
 800bdb2:	1ac3      	subs	r3, r0, r3
 800bdb4:	f04f 36ff 	mov.w	r6, #4294967295
 800bdb8:	e013      	b.n	800bde2 <GUIMONO_DispChar+0x4e>
 800bdba:	68a3      	ldr	r3, [r4, #8]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d07c      	beq.n	800beba <GUIMONO_DispChar+0x126>
 800bdc0:	881d      	ldrh	r5, [r3, #0]
 800bdc2:	42a8      	cmp	r0, r5
 800bdc4:	d379      	bcc.n	800beba <GUIMONO_DispChar+0x126>
 800bdc6:	885e      	ldrh	r6, [r3, #2]
 800bdc8:	4286      	cmp	r6, r0
 800bdca:	d376      	bcc.n	800beba <GUIMONO_DispChar+0x126>
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	6866      	ldr	r6, [r4, #4]
 800bdd0:	9606      	str	r6, [sp, #24]
 800bdd2:	1b40      	subs	r0, r0, r5
 800bdd4:	b280      	uxth	r0, r0
 800bdd6:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 800bdda:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
 800bdde:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 800bde2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bde4:	1c58      	adds	r0, r3, #1
 800bde6:	d068      	beq.n	800beba <GUIMONO_DispChar+0x126>
 800bde8:	f891 b018 	ldrb.w	fp, [r1, #24]
 800bdec:	f9b2 902a 	ldrsh.w	r9, [r2, #42]	@ 0x2a
 800bdf0:	7ca1      	ldrb	r1, [r4, #18]
 800bdf2:	4d36      	ldr	r5, [pc, #216]	@ (800becc <GUIMONO_DispChar+0x138>)
 800bdf4:	f9b2 7022 	ldrsh.w	r7, [r2, #34]	@ 0x22
 800bdf8:	f9b2 8024 	ldrsh.w	r8, [r2, #36]	@ 0x24
 800bdfc:	f894 a010 	ldrb.w	sl, [r4, #16]
 800be00:	fb1b f301 	smulbb	r3, fp, r1
 800be04:	4648      	mov	r0, r9
 800be06:	9307      	str	r3, [sp, #28]
 800be08:	f7fc f972 	bl	80080f0 <LCD_SetDrawMode>
 800be0c:	6829      	ldr	r1, [r5, #0]
 800be0e:	9b07      	ldr	r3, [sp, #28]
 800be10:	69ca      	ldr	r2, [r1, #28]
 800be12:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 800be14:	9105      	str	r1, [sp, #20]
 800be16:	9008      	str	r0, [sp, #32]
 800be18:	9906      	ldr	r1, [sp, #24]
 800be1a:	4618      	mov	r0, r3
 800be1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be1e:	fb00 1003 	mla	r0, r0, r3, r1
 800be22:	9004      	str	r0, [sp, #16]
 800be24:	7ca3      	ldrb	r3, [r4, #18]
 800be26:	9303      	str	r3, [sp, #12]
 800be28:	2301      	movs	r3, #1
 800be2a:	9302      	str	r3, [sp, #8]
 800be2c:	7ed3      	ldrb	r3, [r2, #27]
 800be2e:	9301      	str	r3, [sp, #4]
 800be30:	7e93      	ldrb	r3, [r2, #26]
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	4652      	mov	r2, sl
 800be36:	465b      	mov	r3, fp
 800be38:	4641      	mov	r1, r8
 800be3a:	4638      	mov	r0, r7
 800be3c:	f7fc face 	bl	80083dc <LCD_DrawBitmap>
 800be40:	1c73      	adds	r3, r6, #1
 800be42:	d01a      	beq.n	800be7a <GUIMONO_DispChar+0xe6>
 800be44:	f049 0002 	orr.w	r0, r9, #2
 800be48:	f7fc f952 	bl	80080f0 <LCD_SetDrawMode>
 800be4c:	682a      	ldr	r2, [r5, #0]
 800be4e:	9906      	ldr	r1, [sp, #24]
 800be50:	69d3      	ldr	r3, [r2, #28]
 800be52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800be54:	9205      	str	r2, [sp, #20]
 800be56:	9a07      	ldr	r2, [sp, #28]
 800be58:	fb02 1606 	mla	r6, r2, r6, r1
 800be5c:	9604      	str	r6, [sp, #16]
 800be5e:	7ca2      	ldrb	r2, [r4, #18]
 800be60:	9203      	str	r2, [sp, #12]
 800be62:	2201      	movs	r2, #1
 800be64:	9202      	str	r2, [sp, #8]
 800be66:	7eda      	ldrb	r2, [r3, #27]
 800be68:	9201      	str	r2, [sp, #4]
 800be6a:	7e9b      	ldrb	r3, [r3, #26]
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	4652      	mov	r2, sl
 800be70:	465b      	mov	r3, fp
 800be72:	4641      	mov	r1, r8
 800be74:	4638      	mov	r0, r7
 800be76:	f7fc fab1 	bl	80083dc <LCD_DrawBitmap>
 800be7a:	682b      	ldr	r3, [r5, #0]
 800be7c:	69db      	ldr	r3, [r3, #28]
 800be7e:	7e5a      	ldrb	r2, [r3, #25]
 800be80:	7e1b      	ldrb	r3, [r3, #24]
 800be82:	429a      	cmp	r2, r3
 800be84:	d915      	bls.n	800beb2 <GUIMONO_DispChar+0x11e>
 800be86:	f1b9 0f02 	cmp.w	r9, #2
 800be8a:	d012      	beq.n	800beb2 <GUIMONO_DispChar+0x11e>
 800be8c:	f089 0004 	eor.w	r0, r9, #4
 800be90:	f7fc f92e 	bl	80080f0 <LCD_SetDrawMode>
 800be94:	4b0d      	ldr	r3, [pc, #52]	@ (800becc <GUIMONO_DispChar+0x138>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	69db      	ldr	r3, [r3, #28]
 800be9a:	7e18      	ldrb	r0, [r3, #24]
 800be9c:	7ed9      	ldrb	r1, [r3, #27]
 800be9e:	7e9a      	ldrb	r2, [r3, #26]
 800bea0:	7e5b      	ldrb	r3, [r3, #25]
 800bea2:	fb00 8101 	mla	r1, r0, r1, r8
 800bea6:	4443      	add	r3, r8
 800bea8:	fb0a 7202 	mla	r2, sl, r2, r7
 800beac:	4638      	mov	r0, r7
 800beae:	f7fc f97d 	bl	80081ac <LCD_FillRect>
 800beb2:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800beb6:	f7fc f91b 	bl	80080f0 <LCD_SetDrawMode>
 800beba:	4b04      	ldr	r3, [pc, #16]	@ (800becc <GUIMONO_DispChar+0x138>)
 800bebc:	7c61      	ldrb	r1, [r4, #17]
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	8c53      	ldrh	r3, [r2, #34]	@ 0x22
 800bec2:	440b      	add	r3, r1
 800bec4:	8453      	strh	r3, [r2, #34]	@ 0x22
 800bec6:	b00b      	add	sp, #44	@ 0x2c
 800bec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800becc:	2000002c 	.word	0x2000002c

0800bed0 <GUIMONO_GetCharDistX>:
 800bed0:	4b04      	ldr	r3, [pc, #16]	@ (800bee4 <GUIMONO_GetCharDistX+0x14>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	69db      	ldr	r3, [r3, #28]
 800bed6:	69db      	ldr	r3, [r3, #28]
 800bed8:	b109      	cbz	r1, 800bede <GUIMONO_GetCharDistX+0xe>
 800beda:	7c1a      	ldrb	r2, [r3, #16]
 800bedc:	600a      	str	r2, [r1, #0]
 800bede:	7c58      	ldrb	r0, [r3, #17]
 800bee0:	4770      	bx	lr
 800bee2:	bf00      	nop
 800bee4:	2000002c 	.word	0x2000002c

0800bee8 <GUIMONO_GetFontInfo>:
 800bee8:	2302      	movs	r3, #2
 800beea:	800b      	strh	r3, [r1, #0]
 800beec:	4770      	bx	lr

0800beee <GUIMONO_IsInFont>:
 800beee:	69c3      	ldr	r3, [r0, #28]
 800bef0:	899a      	ldrh	r2, [r3, #12]
 800bef2:	428a      	cmp	r2, r1
 800bef4:	d802      	bhi.n	800befc <GUIMONO_IsInFont+0xe>
 800bef6:	89da      	ldrh	r2, [r3, #14]
 800bef8:	428a      	cmp	r2, r1
 800befa:	d20f      	bcs.n	800bf1c <GUIMONO_IsInFont+0x2e>
 800befc:	6898      	ldr	r0, [r3, #8]
 800befe:	b180      	cbz	r0, 800bf22 <GUIMONO_IsInFont+0x34>
 800bf00:	8803      	ldrh	r3, [r0, #0]
 800bf02:	4299      	cmp	r1, r3
 800bf04:	d30c      	bcc.n	800bf20 <GUIMONO_IsInFont+0x32>
 800bf06:	8842      	ldrh	r2, [r0, #2]
 800bf08:	428a      	cmp	r2, r1
 800bf0a:	d309      	bcc.n	800bf20 <GUIMONO_IsInFont+0x32>
 800bf0c:	1ac9      	subs	r1, r1, r3
 800bf0e:	6843      	ldr	r3, [r0, #4]
 800bf10:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 800bf14:	43c0      	mvns	r0, r0
 800bf16:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800bf1a:	4770      	bx	lr
 800bf1c:	2001      	movs	r0, #1
 800bf1e:	4770      	bx	lr
 800bf20:	2000      	movs	r0, #0
 800bf22:	4770      	bx	lr

0800bf24 <GUI_SelectLayer>:
 800bf24:	b570      	push	{r4, r5, r6, lr}
 800bf26:	4d08      	ldr	r5, [pc, #32]	@ (800bf48 <GUI_SelectLayer+0x24>)
 800bf28:	682b      	ldr	r3, [r5, #0]
 800bf2a:	2801      	cmp	r0, #1
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	7c5e      	ldrb	r6, [r3, #17]
 800bf30:	d808      	bhi.n	800bf44 <GUI_SelectLayer+0x20>
 800bf32:	f7fb ff83 	bl	8007e3c <GUI_DEVICE__GetpDriver>
 800bf36:	b128      	cbz	r0, 800bf44 <GUI_SelectLayer+0x20>
 800bf38:	682b      	ldr	r3, [r5, #0]
 800bf3a:	745c      	strb	r4, [r3, #17]
 800bf3c:	f7fb fdd5 	bl	8007aea <GUI_SelectLCD>
 800bf40:	4b02      	ldr	r3, [pc, #8]	@ (800bf4c <GUI_SelectLayer+0x28>)
 800bf42:	601c      	str	r4, [r3, #0]
 800bf44:	4630      	mov	r0, r6
 800bf46:	bd70      	pop	{r4, r5, r6, pc}
 800bf48:	2000002c 	.word	0x2000002c
 800bf4c:	2000a420 	.word	0x2000a420

0800bf50 <GUI__CompactPixelIndices>:
 800bf50:	2a08      	cmp	r2, #8
 800bf52:	b510      	push	{r4, lr}
 800bf54:	dd0e      	ble.n	800bf74 <GUI__CompactPixelIndices+0x24>
 800bf56:	2a10      	cmp	r2, #16
 800bf58:	dc0a      	bgt.n	800bf70 <GUI__CompactPixelIndices+0x20>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800bf60:	f850 2b04 	ldr.w	r2, [r0], #4
 800bf64:	f823 2b02 	strh.w	r2, [r3], #2
 800bf68:	428b      	cmp	r3, r1
 800bf6a:	d1f9      	bne.n	800bf60 <GUI__CompactPixelIndices+0x10>
 800bf6c:	2001      	movs	r0, #1
 800bf6e:	bd10      	pop	{r4, pc}
 800bf70:	2000      	movs	r0, #0
 800bf72:	bd10      	pop	{r4, pc}
 800bf74:	2a02      	cmp	r2, #2
 800bf76:	d128      	bne.n	800bfca <GUI__CompactPixelIndices+0x7a>
 800bf78:	4604      	mov	r4, r0
 800bf7a:	6803      	ldr	r3, [r0, #0]
 800bf7c:	2901      	cmp	r1, #1
 800bf7e:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	d01e      	beq.n	800bfc4 <GUI__CompactPixelIndices+0x74>
 800bf86:	6842      	ldr	r2, [r0, #4]
 800bf88:	0112      	lsls	r2, r2, #4
 800bf8a:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 800bf8e:	2902      	cmp	r1, #2
 800bf90:	ea43 0302 	orr.w	r3, r3, r2
 800bf94:	d101      	bne.n	800bf9a <GUI__CompactPixelIndices+0x4a>
 800bf96:	3008      	adds	r0, #8
 800bf98:	e015      	b.n	800bfc6 <GUI__CompactPixelIndices+0x76>
 800bf9a:	6882      	ldr	r2, [r0, #8]
 800bf9c:	0092      	lsls	r2, r2, #2
 800bf9e:	f002 020c 	and.w	r2, r2, #12
 800bfa2:	2903      	cmp	r1, #3
 800bfa4:	ea43 0302 	orr.w	r3, r3, r2
 800bfa8:	d101      	bne.n	800bfae <GUI__CompactPixelIndices+0x5e>
 800bfaa:	300c      	adds	r0, #12
 800bfac:	e00b      	b.n	800bfc6 <GUI__CompactPixelIndices+0x76>
 800bfae:	68c2      	ldr	r2, [r0, #12]
 800bfb0:	f002 0203 	and.w	r2, r2, #3
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	3904      	subs	r1, #4
 800bfb8:	3010      	adds	r0, #16
 800bfba:	f804 3b01 	strb.w	r3, [r4], #1
 800bfbe:	2900      	cmp	r1, #0
 800bfc0:	d1db      	bne.n	800bf7a <GUI__CompactPixelIndices+0x2a>
 800bfc2:	e7d3      	b.n	800bf6c <GUI__CompactPixelIndices+0x1c>
 800bfc4:	3004      	adds	r0, #4
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	e7f7      	b.n	800bfba <GUI__CompactPixelIndices+0x6a>
 800bfca:	2a04      	cmp	r2, #4
 800bfcc:	d115      	bne.n	800bffa <GUI__CompactPixelIndices+0xaa>
 800bfce:	4604      	mov	r4, r0
 800bfd0:	2901      	cmp	r1, #1
 800bfd2:	6803      	ldr	r3, [r0, #0]
 800bfd4:	bf18      	it	ne
 800bfd6:	6842      	ldrne	r2, [r0, #4]
 800bfd8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	bf1b      	ittet	ne
 800bfe0:	f002 020f 	andne.w	r2, r2, #15
 800bfe4:	4313      	orrne	r3, r2
 800bfe6:	2100      	moveq	r1, #0
 800bfe8:	3902      	subne	r1, #2
 800bfea:	bf0c      	ite	eq
 800bfec:	3004      	addeq	r0, #4
 800bfee:	3008      	addne	r0, #8
 800bff0:	f804 3b01 	strb.w	r3, [r4], #1
 800bff4:	2900      	cmp	r1, #0
 800bff6:	d1eb      	bne.n	800bfd0 <GUI__CompactPixelIndices+0x80>
 800bff8:	e7b8      	b.n	800bf6c <GUI__CompactPixelIndices+0x1c>
 800bffa:	2a01      	cmp	r2, #1
 800bffc:	4603      	mov	r3, r0
 800bffe:	d14e      	bne.n	800c09e <GUI__CompactPixelIndices+0x14e>
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	2901      	cmp	r1, #1
 800c004:	ea4f 12c2 	mov.w	r2, r2, lsl #7
 800c008:	b2d2      	uxtb	r2, r2
 800c00a:	d045      	beq.n	800c098 <GUI__CompactPixelIndices+0x148>
 800c00c:	685c      	ldr	r4, [r3, #4]
 800c00e:	01a4      	lsls	r4, r4, #6
 800c010:	f004 0440 	and.w	r4, r4, #64	@ 0x40
 800c014:	2902      	cmp	r1, #2
 800c016:	ea42 0204 	orr.w	r2, r2, r4
 800c01a:	d101      	bne.n	800c020 <GUI__CompactPixelIndices+0xd0>
 800c01c:	3308      	adds	r3, #8
 800c01e:	e03c      	b.n	800c09a <GUI__CompactPixelIndices+0x14a>
 800c020:	689c      	ldr	r4, [r3, #8]
 800c022:	0164      	lsls	r4, r4, #5
 800c024:	f004 0420 	and.w	r4, r4, #32
 800c028:	2903      	cmp	r1, #3
 800c02a:	ea42 0204 	orr.w	r2, r2, r4
 800c02e:	d101      	bne.n	800c034 <GUI__CompactPixelIndices+0xe4>
 800c030:	330c      	adds	r3, #12
 800c032:	e032      	b.n	800c09a <GUI__CompactPixelIndices+0x14a>
 800c034:	68dc      	ldr	r4, [r3, #12]
 800c036:	0124      	lsls	r4, r4, #4
 800c038:	f004 0410 	and.w	r4, r4, #16
 800c03c:	2904      	cmp	r1, #4
 800c03e:	ea42 0204 	orr.w	r2, r2, r4
 800c042:	d101      	bne.n	800c048 <GUI__CompactPixelIndices+0xf8>
 800c044:	3310      	adds	r3, #16
 800c046:	e028      	b.n	800c09a <GUI__CompactPixelIndices+0x14a>
 800c048:	691c      	ldr	r4, [r3, #16]
 800c04a:	00e4      	lsls	r4, r4, #3
 800c04c:	f004 0408 	and.w	r4, r4, #8
 800c050:	2905      	cmp	r1, #5
 800c052:	ea42 0204 	orr.w	r2, r2, r4
 800c056:	d101      	bne.n	800c05c <GUI__CompactPixelIndices+0x10c>
 800c058:	3314      	adds	r3, #20
 800c05a:	e01e      	b.n	800c09a <GUI__CompactPixelIndices+0x14a>
 800c05c:	695c      	ldr	r4, [r3, #20]
 800c05e:	00a4      	lsls	r4, r4, #2
 800c060:	f004 0404 	and.w	r4, r4, #4
 800c064:	2906      	cmp	r1, #6
 800c066:	ea42 0204 	orr.w	r2, r2, r4
 800c06a:	d101      	bne.n	800c070 <GUI__CompactPixelIndices+0x120>
 800c06c:	3318      	adds	r3, #24
 800c06e:	e014      	b.n	800c09a <GUI__CompactPixelIndices+0x14a>
 800c070:	699c      	ldr	r4, [r3, #24]
 800c072:	0064      	lsls	r4, r4, #1
 800c074:	3907      	subs	r1, #7
 800c076:	f004 0402 	and.w	r4, r4, #2
 800c07a:	ea42 0204 	orr.w	r2, r2, r4
 800c07e:	bf1b      	ittet	ne
 800c080:	69dc      	ldrne	r4, [r3, #28]
 800c082:	f004 0401 	andne.w	r4, r4, #1
 800c086:	331c      	addeq	r3, #28
 800c088:	4322      	orrne	r2, r4
 800c08a:	bf18      	it	ne
 800c08c:	3320      	addne	r3, #32
 800c08e:	f800 2b01 	strb.w	r2, [r0], #1
 800c092:	2900      	cmp	r1, #0
 800c094:	d1b4      	bne.n	800c000 <GUI__CompactPixelIndices+0xb0>
 800c096:	e769      	b.n	800bf6c <GUI__CompactPixelIndices+0x1c>
 800c098:	3304      	adds	r3, #4
 800c09a:	2100      	movs	r1, #0
 800c09c:	e7f7      	b.n	800c08e <GUI__CompactPixelIndices+0x13e>
 800c09e:	4401      	add	r1, r0
 800c0a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c0a4:	f803 2b01 	strb.w	r2, [r3], #1
 800c0a8:	4299      	cmp	r1, r3
 800c0aa:	d1f9      	bne.n	800c0a0 <GUI__CompactPixelIndices+0x150>
 800c0ac:	e75e      	b.n	800bf6c <GUI__CompactPixelIndices+0x1c>
	...

0800c0b0 <LCD_SetClipRectEx>:
 800c0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0b2:	4c09      	ldr	r4, [pc, #36]	@ (800c0d8 <LCD_SetClipRectEx+0x28>)
 800c0b4:	6823      	ldr	r3, [r4, #0]
 800c0b6:	7c5a      	ldrb	r2, [r3, #17]
 800c0b8:	4b08      	ldr	r3, [pc, #32]	@ (800c0dc <LCD_SetClipRectEx+0x2c>)
 800c0ba:	4605      	mov	r5, r0
 800c0bc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c0c0:	68c3      	ldr	r3, [r0, #12]
 800c0c2:	4669      	mov	r1, sp
 800c0c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0c6:	4798      	blx	r3
 800c0c8:	6820      	ldr	r0, [r4, #0]
 800c0ca:	466a      	mov	r2, sp
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	3008      	adds	r0, #8
 800c0d0:	f7fb ff91 	bl	8007ff6 <GUI__IntersectRects>
 800c0d4:	b003      	add	sp, #12
 800c0d6:	bd30      	pop	{r4, r5, pc}
 800c0d8:	2000002c 	.word	0x2000002c
 800c0dc:	2000a3e4 	.word	0x2000a3e4

0800c0e0 <GUI_MEMDEV_GetBitsPerPixel>:
 800c0e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	b170      	cbz	r0, 800c104 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800c0e6:	f7fa fc37 	bl	8006958 <GUI_ALLOC_LockH>
 800c0ea:	6803      	ldr	r3, [r0, #0]
 800c0ec:	ad02      	add	r5, sp, #8
 800c0ee:	691b      	ldr	r3, [r3, #16]
 800c0f0:	f845 0d04 	str.w	r0, [r5, #-4]!
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	4798      	blx	r3
 800c0f8:	f7fc fca5 	bl	8008a46 <LCD__GetBPPDevice>
 800c0fc:	4604      	mov	r4, r0
 800c0fe:	4628      	mov	r0, r5
 800c100:	f7fa fc38 	bl	8006974 <GUI_ALLOC_UnlockH>
 800c104:	4620      	mov	r0, r4
 800c106:	b003      	add	sp, #12
 800c108:	bd30      	pop	{r4, r5, pc}
	...

0800c10c <GUI_MEMDEV_Delete>:
 800c10c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c10e:	4604      	mov	r4, r0
 800c110:	b1d0      	cbz	r0, 800c148 <GUI_MEMDEV_Delete+0x3c>
 800c112:	4b0e      	ldr	r3, [pc, #56]	@ (800c14c <GUI_MEMDEV_Delete+0x40>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c118:	4298      	cmp	r0, r3
 800c11a:	d101      	bne.n	800c120 <GUI_MEMDEV_Delete+0x14>
 800c11c:	f7fb fce5 	bl	8007aea <GUI_SelectLCD>
 800c120:	4620      	mov	r0, r4
 800c122:	f7fa fc19 	bl	8006958 <GUI_ALLOC_LockH>
 800c126:	9001      	str	r0, [sp, #4]
 800c128:	6940      	ldr	r0, [r0, #20]
 800c12a:	b108      	cbz	r0, 800c130 <GUI_MEMDEV_Delete+0x24>
 800c12c:	f7fe faa0 	bl	800a670 <GUI_USAGE_DecUseCnt>
 800c130:	ad02      	add	r5, sp, #8
 800c132:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c136:	6818      	ldr	r0, [r3, #0]
 800c138:	f7fb fe90 	bl	8007e5c <GUI_DEVICE_Delete>
 800c13c:	4628      	mov	r0, r5
 800c13e:	f7fa fc19 	bl	8006974 <GUI_ALLOC_UnlockH>
 800c142:	4620      	mov	r0, r4
 800c144:	f7fa fc36 	bl	80069b4 <GUI_ALLOC_Free>
 800c148:	b003      	add	sp, #12
 800c14a:	bd30      	pop	{r4, r5, pc}
 800c14c:	2000002c 	.word	0x2000002c

0800c150 <GUI_MEMDEV_GetDataPtr>:
 800c150:	b513      	push	{r0, r1, r4, lr}
 800c152:	b158      	cbz	r0, 800c16c <GUI_MEMDEV_GetDataPtr+0x1c>
 800c154:	f7fa fc00 	bl	8006958 <GUI_ALLOC_LockH>
 800c158:	ab02      	add	r3, sp, #8
 800c15a:	f100 0418 	add.w	r4, r0, #24
 800c15e:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c162:	4618      	mov	r0, r3
 800c164:	f7fa fc06 	bl	8006974 <GUI_ALLOC_UnlockH>
 800c168:	4620      	mov	r0, r4
 800c16a:	e7ff      	b.n	800c16c <GUI_MEMDEV_GetDataPtr+0x1c>
 800c16c:	b002      	add	sp, #8
 800c16e:	bd10      	pop	{r4, pc}

0800c170 <memmove>:
 800c170:	4288      	cmp	r0, r1
 800c172:	b510      	push	{r4, lr}
 800c174:	eb01 0402 	add.w	r4, r1, r2
 800c178:	d902      	bls.n	800c180 <memmove+0x10>
 800c17a:	4284      	cmp	r4, r0
 800c17c:	4623      	mov	r3, r4
 800c17e:	d807      	bhi.n	800c190 <memmove+0x20>
 800c180:	1e43      	subs	r3, r0, #1
 800c182:	42a1      	cmp	r1, r4
 800c184:	d008      	beq.n	800c198 <memmove+0x28>
 800c186:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c18a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c18e:	e7f8      	b.n	800c182 <memmove+0x12>
 800c190:	4402      	add	r2, r0
 800c192:	4601      	mov	r1, r0
 800c194:	428a      	cmp	r2, r1
 800c196:	d100      	bne.n	800c19a <memmove+0x2a>
 800c198:	bd10      	pop	{r4, pc}
 800c19a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c19e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1a2:	e7f7      	b.n	800c194 <memmove+0x24>

0800c1a4 <memset>:
 800c1a4:	4402      	add	r2, r0
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d100      	bne.n	800c1ae <memset+0xa>
 800c1ac:	4770      	bx	lr
 800c1ae:	f803 1b01 	strb.w	r1, [r3], #1
 800c1b2:	e7f9      	b.n	800c1a8 <memset+0x4>

0800c1b4 <__libc_init_array>:
 800c1b4:	b570      	push	{r4, r5, r6, lr}
 800c1b6:	4d0d      	ldr	r5, [pc, #52]	@ (800c1ec <__libc_init_array+0x38>)
 800c1b8:	4c0d      	ldr	r4, [pc, #52]	@ (800c1f0 <__libc_init_array+0x3c>)
 800c1ba:	1b64      	subs	r4, r4, r5
 800c1bc:	10a4      	asrs	r4, r4, #2
 800c1be:	2600      	movs	r6, #0
 800c1c0:	42a6      	cmp	r6, r4
 800c1c2:	d109      	bne.n	800c1d8 <__libc_init_array+0x24>
 800c1c4:	4d0b      	ldr	r5, [pc, #44]	@ (800c1f4 <__libc_init_array+0x40>)
 800c1c6:	4c0c      	ldr	r4, [pc, #48]	@ (800c1f8 <__libc_init_array+0x44>)
 800c1c8:	f000 f826 	bl	800c218 <_init>
 800c1cc:	1b64      	subs	r4, r4, r5
 800c1ce:	10a4      	asrs	r4, r4, #2
 800c1d0:	2600      	movs	r6, #0
 800c1d2:	42a6      	cmp	r6, r4
 800c1d4:	d105      	bne.n	800c1e2 <__libc_init_array+0x2e>
 800c1d6:	bd70      	pop	{r4, r5, r6, pc}
 800c1d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1dc:	4798      	blx	r3
 800c1de:	3601      	adds	r6, #1
 800c1e0:	e7ee      	b.n	800c1c0 <__libc_init_array+0xc>
 800c1e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1e6:	4798      	blx	r3
 800c1e8:	3601      	adds	r6, #1
 800c1ea:	e7f2      	b.n	800c1d2 <__libc_init_array+0x1e>
 800c1ec:	0800d694 	.word	0x0800d694
 800c1f0:	0800d694 	.word	0x0800d694
 800c1f4:	0800d694 	.word	0x0800d694
 800c1f8:	0800d698 	.word	0x0800d698

0800c1fc <memcpy>:
 800c1fc:	440a      	add	r2, r1
 800c1fe:	4291      	cmp	r1, r2
 800c200:	f100 33ff 	add.w	r3, r0, #4294967295
 800c204:	d100      	bne.n	800c208 <memcpy+0xc>
 800c206:	4770      	bx	lr
 800c208:	b510      	push	{r4, lr}
 800c20a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c20e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c212:	4291      	cmp	r1, r2
 800c214:	d1f9      	bne.n	800c20a <memcpy+0xe>
 800c216:	bd10      	pop	{r4, pc}

0800c218 <_init>:
 800c218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21a:	bf00      	nop
 800c21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c21e:	bc08      	pop	{r3}
 800c220:	469e      	mov	lr, r3
 800c222:	4770      	bx	lr

0800c224 <_fini>:
 800c224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c226:	bf00      	nop
 800c228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c22a:	bc08      	pop	{r3}
 800c22c:	469e      	mov	lr, r3
 800c22e:	4770      	bx	lr
