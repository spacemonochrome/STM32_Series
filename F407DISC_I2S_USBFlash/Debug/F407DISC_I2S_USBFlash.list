
F407DISC_I2S_USBFlash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015a28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  08015bb8  08015bb8  00016bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016464  08016464  00018230  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016464  08016464  00017464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801646c  0801646c  00018230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801646c  0801646c  0001746c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016470  08016470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000230  20000000  08016474  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00018230  2**0
                  CONTENTS
 10 .bss          000044c4  20000230  20000230  00018230  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200046f4  200046f4  00018230  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00018230  2**0
                  CONTENTS, READONLY
 13 .debug_info   000227af  00000000  00000000  00018260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ade  00000000  00000000  0003aa0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001908  00000000  00000000  000404f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000133e  00000000  00000000  00041df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028463  00000000  00000000  00043136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028bef  00000000  00000000  0006b599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1263  00000000  00000000  00094188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001653eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007694  00000000  00000000  00165430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0016cac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015ba0 	.word	0x08015ba0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	08015ba0 	.word	0x08015ba0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	603a      	str	r2, [r7, #0]
 8000ede:	80fb      	strh	r3, [r7, #6]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6839      	ldr	r1, [r7, #0]
 8000eec:	481c      	ldr	r0, [pc, #112]	@ (8000f60 <AUDIO_OUT_Init+0x8c>)
 8000eee:	f000 f8f9 	bl	80010e4 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <AUDIO_OUT_Init+0x8c>)
 8000ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f64 <AUDIO_OUT_Init+0x90>)
 8000ef6:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 8000ef8:	4819      	ldr	r0, [pc, #100]	@ (8000f60 <AUDIO_OUT_Init+0x8c>)
 8000efa:	f006 fd03 	bl	8007904 <HAL_I2S_GetState>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d103      	bne.n	8000f0c <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8000f04:	2100      	movs	r1, #0
 8000f06:	4816      	ldr	r0, [pc, #88]	@ (8000f60 <AUDIO_OUT_Init+0x8c>)
 8000f08:	f000 f946 	bl	8001198 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 8000f0c:	6838      	ldr	r0, [r7, #0]
 8000f0e:	f000 fa0b 	bl	8001328 <I2S3_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10e      	bne.n	8000f40 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <AUDIO_OUT_Init+0x94>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2094      	movs	r0, #148	@ 0x94
 8000f28:	4798      	blx	r3
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8000f30:	2be0      	cmp	r3, #224	@ 0xe0
 8000f32:	d103      	bne.n	8000f3c <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8000f34:	4b0d      	ldr	r3, [pc, #52]	@ (8000f6c <AUDIO_OUT_Init+0x98>)
 8000f36:	4a0c      	ldr	r2, [pc, #48]	@ (8000f68 <AUDIO_OUT_Init+0x94>)
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	e001      	b.n	8000f40 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d107      	bne.n	8000f56 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8000f46:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <AUDIO_OUT_Init+0x98>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681c      	ldr	r4, [r3, #0]
 8000f4c:	797a      	ldrb	r2, [r7, #5]
 8000f4e:	88f9      	ldrh	r1, [r7, #6]
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	2094      	movs	r0, #148	@ 0x94
 8000f54:	47a0      	blx	r4
  }
  
  return ret;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd90      	pop	{r4, r7, pc}
 8000f60:	20000250 	.word	0x20000250
 8000f64:	40003c00 	.word	0x40003c00
 8000f68:	20000004 	.word	0x20000004
 8000f6c:	2000024c 	.word	0x2000024c

08000f70 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <AUDIO_OUT_Play+0x4c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	b292      	uxth	r2, r2
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	2094      	movs	r0, #148	@ 0x94
 8000f88:	4798      	blx	r3
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e00f      	b.n	8000fb4 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000f9a:	d203      	bcs.n	8000fa4 <AUDIO_OUT_Play+0x34>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	085b      	lsrs	r3, r3, #1
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	e001      	b.n	8000fa8 <AUDIO_OUT_Play+0x38>
 8000fa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fa8:	461a      	mov	r2, r3
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	4804      	ldr	r0, [pc, #16]	@ (8000fc0 <AUDIO_OUT_Play+0x50>)
 8000fae:	f006 f92b 	bl	8007208 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000fb2:	2300      	movs	r3, #0
  }
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2000024c 	.word	0x2000024c
 8000fc0:	20000250 	.word	0x20000250

08000fc4 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8000fc8:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <AUDIO_OUT_Pause+0x24>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	2094      	movs	r0, #148	@ 0x94
 8000fd0:	4798      	blx	r3
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e003      	b.n	8000fe4 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 8000fdc:	4803      	ldr	r0, [pc, #12]	@ (8000fec <AUDIO_OUT_Pause+0x28>)
 8000fde:	f006 f9b7 	bl	8007350 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000fe2:	2300      	movs	r3, #0
  }
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	2000024c 	.word	0x2000024c
 8000fec:	20000250 	.word	0x20000250

08000ff0 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <AUDIO_OUT_Resume+0x24>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	2094      	movs	r0, #148	@ 0x94
 8000ffc:	4798      	blx	r3
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e003      	b.n	8001010 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8001008:	4803      	ldr	r0, [pc, #12]	@ (8001018 <AUDIO_OUT_Resume+0x28>)
 800100a:	f006 fa03 	bl	8007414 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800100e:	2300      	movs	r3, #0
  }
}
 8001010:	4618      	mov	r0, r3
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000024c 	.word	0x2000024c
 8001018:	20000250 	.word	0x20000250

0800101c <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8001024:	480e      	ldr	r0, [pc, #56]	@ (8001060 <AUDIO_OUT_Stop+0x44>)
 8001026:	f006 fa89 	bl	800753c <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <AUDIO_OUT_Stop+0x48>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	2094      	movs	r0, #148	@ 0x94
 8001034:	4798      	blx	r3
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e00b      	b.n	8001058 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d107      	bne.n	8001056 <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f001 fdec 	bl	8002c24 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2110      	movs	r1, #16
 8001050:	4805      	ldr	r0, [pc, #20]	@ (8001068 <AUDIO_OUT_Stop+0x4c>)
 8001052:	f002 fdf3 	bl	8003c3c <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8001056:	2300      	movs	r3, #0
  }
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000250 	.word	0x20000250
 8001064:	2000024c 	.word	0x2000024c
 8001068:	40020c00 	.word	0x40020c00

0800106c <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8001076:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <AUDIO_OUT_SetVolume+0x2c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	79fa      	ldrb	r2, [r7, #7]
 800107e:	4611      	mov	r1, r2
 8001080:	2094      	movs	r0, #148	@ 0x94
 8001082:	4798      	blx	r3
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800108e:	2300      	movs	r3, #0
  }
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2000024c 	.word	0x2000024c

0800109c <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <HAL_I2S_TxCpltCallback+0x20>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d101      	bne.n	80010b2 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 80010ae:	f001 fcf5 	bl	8002a9c <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40003c00 	.word	0x40003c00

080010c0 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 80010d2:	f001 fcf7 	bl	8002ac4 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40003c00 	.word	0x40003c00

080010e4 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	@ 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80010f6:	23ff      	movs	r3, #255	@ 0xff
 80010f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  
  for(index = 0; index < 8; index++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001102:	e010      	b.n	8001126 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 8001104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001108:	4a20      	ldr	r2, [pc, #128]	@ (800118c <AUDIO_OUT_ClockConfig+0xa8>)
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	429a      	cmp	r2, r3
 8001112:	d103      	bne.n	800111c <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8001114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001118:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  for(index = 0; index < 8; index++)
 800111c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001120:	3301      	adds	r3, #1
 8001122:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001126:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800112a:	2b07      	cmp	r3, #7
 800112c:	d9ea      	bls.n	8001104 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4618      	mov	r0, r3
 8001134:	f007 fd3e 	bl	8008bb4 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8001138:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	2b00      	cmp	r3, #0
 8001142:	d113      	bne.n	800116c <AUDIO_OUT_ClockConfig+0x88>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001144:	2301      	movs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
    //rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8001148:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800114c:	4a10      	ldr	r2, [pc, #64]	@ (8001190 <AUDIO_OUT_ClockConfig+0xac>)
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8001154:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001158:	4a0e      	ldr	r2, [pc, #56]	@ (8001194 <AUDIO_OUT_ClockConfig+0xb0>)
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4618      	mov	r0, r3
 8001166:	f007 fc43 	bl	80089f0 <HAL_RCCEx_PeriphCLKConfig>
    //rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800116a:	e00b      	b.n	8001184 <AUDIO_OUT_ClockConfig+0xa0>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800116c:	2301      	movs	r3, #1
 800116e:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8001170:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001174:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8001176:	2303      	movs	r3, #3
 8001178:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4618      	mov	r0, r3
 8001180:	f007 fc36 	bl	80089f0 <HAL_RCCEx_PeriphCLKConfig>
}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	@ 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	08015c18 	.word	0x08015c18
 8001190:	08015c38 	.word	0x08015c38
 8001194:	08015c58 	.word	0x08015c58

08001198 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	@ 0x30
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	4b56      	ldr	r3, [pc, #344]	@ (8001300 <AUDIO_OUT_MspInit+0x168>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	4a55      	ldr	r2, [pc, #340]	@ (8001300 <AUDIO_OUT_MspInit+0x168>)
 80011ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b2:	4b53      	ldr	r3, [pc, #332]	@ (8001300 <AUDIO_OUT_MspInit+0x168>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001300 <AUDIO_OUT_MspInit+0x168>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a4e      	ldr	r2, [pc, #312]	@ (8001300 <AUDIO_OUT_MspInit+0x168>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001300 <AUDIO_OUT_MspInit+0x168>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	4b48      	ldr	r3, [pc, #288]	@ (8001300 <AUDIO_OUT_MspInit+0x168>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a47      	ldr	r2, [pc, #284]	@ (8001300 <AUDIO_OUT_MspInit+0x168>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b45      	ldr	r3, [pc, #276]	@ (8001300 <AUDIO_OUT_MspInit+0x168>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80011f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8001204:	2302      	movs	r3, #2
 8001206:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8001208:	2306      	movs	r3, #6
 800120a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	483c      	ldr	r0, [pc, #240]	@ (8001304 <AUDIO_OUT_MspInit+0x16c>)
 8001214:	f002 fa7a 	bl	800370c <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8001218:	2310      	movs	r3, #16
 800121a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	4839      	ldr	r0, [pc, #228]	@ (8001308 <AUDIO_OUT_MspInit+0x170>)
 8001224:	f002 fa72 	bl	800370c <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	4b34      	ldr	r3, [pc, #208]	@ (8001300 <AUDIO_OUT_MspInit+0x168>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001230:	4a33      	ldr	r2, [pc, #204]	@ (8001300 <AUDIO_OUT_MspInit+0x168>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	6313      	str	r3, [r2, #48]	@ 0x30
 8001238:	4b31      	ldr	r3, [pc, #196]	@ (8001300 <AUDIO_OUT_MspInit+0x168>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	482d      	ldr	r0, [pc, #180]	@ (8001304 <AUDIO_OUT_MspInit+0x16c>)
 8001250:	f002 fa5c 	bl	800370c <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	4b29      	ldr	r3, [pc, #164]	@ (8001300 <AUDIO_OUT_MspInit+0x168>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125c:	4a28      	ldr	r2, [pc, #160]	@ (8001300 <AUDIO_OUT_MspInit+0x168>)
 800125e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001262:	6313      	str	r3, [r2, #48]	@ 0x30
 8001264:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <AUDIO_OUT_MspInit+0x168>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a25      	ldr	r2, [pc, #148]	@ (800130c <AUDIO_OUT_MspInit+0x174>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d136      	bne.n	80012e8 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 800127a:	4b25      	ldr	r3, [pc, #148]	@ (8001310 <AUDIO_OUT_MspInit+0x178>)
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001280:	4b23      	ldr	r3, [pc, #140]	@ (8001310 <AUDIO_OUT_MspInit+0x178>)
 8001282:	2240      	movs	r2, #64	@ 0x40
 8001284:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001286:	4b22      	ldr	r3, [pc, #136]	@ (8001310 <AUDIO_OUT_MspInit+0x178>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 800128c:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <AUDIO_OUT_MspInit+0x178>)
 800128e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001292:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8001294:	4b1e      	ldr	r3, [pc, #120]	@ (8001310 <AUDIO_OUT_MspInit+0x178>)
 8001296:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800129a:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 800129c:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <AUDIO_OUT_MspInit+0x178>)
 800129e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012a2:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <AUDIO_OUT_MspInit+0x178>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80012aa:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <AUDIO_OUT_MspInit+0x178>)
 80012ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012b0:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80012b2:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <AUDIO_OUT_MspInit+0x178>)
 80012b4:	2204      	movs	r2, #4
 80012b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80012b8:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <AUDIO_OUT_MspInit+0x178>)
 80012ba:	2203      	movs	r2, #3
 80012bc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80012be:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <AUDIO_OUT_MspInit+0x178>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <AUDIO_OUT_MspInit+0x178>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <AUDIO_OUT_MspInit+0x178>)
 80012cc:	4a11      	ldr	r2, [pc, #68]	@ (8001314 <AUDIO_OUT_MspInit+0x17c>)
 80012ce:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001310 <AUDIO_OUT_MspInit+0x178>)
 80012d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80012d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001310 <AUDIO_OUT_MspInit+0x178>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80012dc:	480c      	ldr	r0, [pc, #48]	@ (8001310 <AUDIO_OUT_MspInit+0x178>)
 80012de:	f001 fe85 	bl	8002fec <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80012e2:	480b      	ldr	r0, [pc, #44]	@ (8001310 <AUDIO_OUT_MspInit+0x178>)
 80012e4:	f001 fdd4 	bl	8002e90 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	210e      	movs	r1, #14
 80012ec:	202f      	movs	r0, #47	@ 0x2f
 80012ee:	f001 fd98 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80012f2:	202f      	movs	r0, #47	@ 0x2f
 80012f4:	f001 fdb1 	bl	8002e5a <HAL_NVIC_EnableIRQ>
}
 80012f8:	bf00      	nop
 80012fa:	3730      	adds	r7, #48	@ 0x30
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40020800 	.word	0x40020800
 8001308:	40020000 	.word	0x40020000
 800130c:	40003c00 	.word	0x40003c00
 8001310:	20000298 	.word	0x20000298
 8001314:	400260b8 	.word	0x400260b8

08001318 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8001330:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <I2S3_Init+0x68>)
 8001332:	4a18      	ldr	r2, [pc, #96]	@ (8001394 <I2S3_Init+0x6c>)
 8001334:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8001336:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <I2S3_Init+0x68>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	69da      	ldr	r2, [r3, #28]
 800133c:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <I2S3_Init+0x68>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001344:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8001346:	4a12      	ldr	r2, [pc, #72]	@ (8001390 <I2S3_Init+0x68>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 800134c:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <I2S3_Init+0x68>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8001352:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <I2S3_Init+0x68>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8001358:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <I2S3_Init+0x68>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 800135e:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <I2S3_Init+0x68>)
 8001360:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001364:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8001366:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <I2S3_Init+0x68>)
 8001368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800136c:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 800136e:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <I2S3_Init+0x68>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8001374:	4806      	ldr	r0, [pc, #24]	@ (8001390 <I2S3_Init+0x68>)
 8001376:	f005 fe07 	bl	8006f88 <HAL_I2S_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e000      	b.n	8001386 <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8001384:	2300      	movs	r3, #0
  }
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000250 	.word	0x20000250
 8001394:	40003c00 	.word	0x40003c00

08001398 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <HAL_I2S_ErrorCallback+0x20>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 80013aa:	f7ff ffb5 	bl	8001318 <AUDIO_OUT_Error_CallBack>
  }
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40003c00 	.word	0x40003c00

080013bc <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80013c0:	4814      	ldr	r0, [pc, #80]	@ (8001414 <I2Cx_Init+0x58>)
 80013c2:	f005 fa1f 	bl	8006804 <HAL_I2C_GetState>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d121      	bne.n	8001410 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <I2Cx_Init+0x58>)
 80013ce:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <I2Cx_Init+0x5c>)
 80013d0:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <I2Cx_Init+0x58>)
 80013d4:	2243      	movs	r2, #67	@ 0x43
 80013d6:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80013d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <I2Cx_Init+0x58>)
 80013da:	4a10      	ldr	r2, [pc, #64]	@ (800141c <I2Cx_Init+0x60>)
 80013dc:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013de:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <I2Cx_Init+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <I2Cx_Init+0x58>)
 80013e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013ea:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80013ec:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <I2Cx_Init+0x58>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80013f2:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <I2Cx_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80013f8:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <I2Cx_Init+0x58>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80013fe:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <I2Cx_Init+0x58>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001404:	4803      	ldr	r0, [pc, #12]	@ (8001414 <I2Cx_Init+0x58>)
 8001406:	f000 f86b 	bl	80014e0 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800140a:	4802      	ldr	r0, [pc, #8]	@ (8001414 <I2Cx_Init+0x58>)
 800140c:	f004 fd5a 	bl	8005ec4 <HAL_I2C_Init>
  }
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200002f8 	.word	0x200002f8
 8001418:	40005400 	.word	0x40005400
 800141c:	000186a0 	.word	0x000186a0

08001420 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af04      	add	r7, sp, #16
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
 800142a:	460b      	mov	r3, r1
 800142c:	717b      	strb	r3, [r7, #5]
 800142e:	4613      	mov	r3, r2
 8001430:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001436:	797b      	ldrb	r3, [r7, #5]
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <I2Cx_WriteData+0x48>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	88f9      	ldrh	r1, [r7, #6]
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	2301      	movs	r3, #1
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	4807      	ldr	r0, [pc, #28]	@ (800146c <I2Cx_WriteData+0x4c>)
 800144e:	f004 fead 	bl	80061ac <HAL_I2C_Mem_Write>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 800145c:	f000 f834 	bl	80014c8 <I2Cx_Error>
  }
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000000 	.word	0x20000000
 800146c:	200002f8 	.word	0x200002f8

08001470 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af04      	add	r7, sp, #16
 8001476:	4603      	mov	r3, r0
 8001478:	460a      	mov	r2, r1
 800147a:	80fb      	strh	r3, [r7, #6]
 800147c:	4613      	mov	r3, r2
 800147e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001488:	797b      	ldrb	r3, [r7, #5]
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <I2Cx_ReadData+0x50>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	88f9      	ldrh	r1, [r7, #6]
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2301      	movs	r3, #1
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	f107 030e 	add.w	r3, r7, #14
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2301      	movs	r3, #1
 80014a0:	4808      	ldr	r0, [pc, #32]	@ (80014c4 <I2Cx_ReadData+0x54>)
 80014a2:	f004 ff7d 	bl	80063a0 <HAL_I2C_Mem_Read>
 80014a6:	4603      	mov	r3, r0
 80014a8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80014b0:	f000 f80a 	bl	80014c8 <I2Cx_Error>
  }
  return value;
 80014b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000000 	.word	0x20000000
 80014c4:	200002f8 	.word	0x200002f8

080014c8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80014cc:	4803      	ldr	r0, [pc, #12]	@ (80014dc <I2Cx_Error+0x14>)
 80014ce:	f004 fe3d 	bl	800614c <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 80014d2:	f7ff ff73 	bl	80013bc <I2Cx_Init>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200002f8 	.word	0x200002f8

080014e0 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	@ 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	4b25      	ldr	r3, [pc, #148]	@ (8001584 <I2Cx_MspInit+0xa4>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	4a24      	ldr	r2, [pc, #144]	@ (8001584 <I2Cx_MspInit+0xa4>)
 80014f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f8:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <I2Cx_MspInit+0xa4>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <I2Cx_MspInit+0xa4>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150c:	4a1d      	ldr	r2, [pc, #116]	@ (8001584 <I2Cx_MspInit+0xa4>)
 800150e:	f043 0302 	orr.w	r3, r3, #2
 8001512:	6313      	str	r3, [r2, #48]	@ 0x30
 8001514:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <I2Cx_MspInit+0xa4>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8001520:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001526:	2312      	movs	r3, #18
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800152e:	2302      	movs	r3, #2
 8001530:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8001532:	2304      	movs	r3, #4
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4812      	ldr	r0, [pc, #72]	@ (8001588 <I2Cx_MspInit+0xa8>)
 800153e:	f002 f8e5 	bl	800370c <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8001542:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <I2Cx_MspInit+0xa4>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a0f      	ldr	r2, [pc, #60]	@ (8001584 <I2Cx_MspInit+0xa4>)
 8001548:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800154c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 800154e:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <I2Cx_MspInit+0xa4>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4a0c      	ldr	r2, [pc, #48]	@ (8001584 <I2Cx_MspInit+0xa4>)
 8001554:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001558:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	210f      	movs	r1, #15
 800155e:	201f      	movs	r0, #31
 8001560:	f001 fc5f 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8001564:	201f      	movs	r0, #31
 8001566:	f001 fc78 	bl	8002e5a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	210f      	movs	r1, #15
 800156e:	2020      	movs	r0, #32
 8001570:	f001 fc57 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8001574:	2020      	movs	r0, #32
 8001576:	f001 fc70 	bl	8002e5a <HAL_NVIC_EnableIRQ>
}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	@ 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800
 8001588:	40020400 	.word	0x40020400

0800158c <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <AUDIO_IO_Init+0x68>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	4a16      	ldr	r2, [pc, #88]	@ (80015f4 <AUDIO_IO_Init+0x68>)
 800159c:	f043 0308 	orr.w	r3, r3, #8
 80015a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a2:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <AUDIO_IO_Init+0x68>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 80015ae:	2310      	movs	r3, #16
 80015b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80015b6:	2302      	movs	r3, #2
 80015b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <AUDIO_IO_Init+0x6c>)
 80015c4:	f002 f8a2 	bl	800370c <HAL_GPIO_Init>
  
  I2Cx_Init();
 80015c8:	f7ff fef8 	bl	80013bc <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 80015cc:	2200      	movs	r2, #0
 80015ce:	2110      	movs	r1, #16
 80015d0:	4809      	ldr	r0, [pc, #36]	@ (80015f8 <AUDIO_IO_Init+0x6c>)
 80015d2:	f002 fb33 	bl	8003c3c <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 80015d6:	2005      	movs	r0, #5
 80015d8:	f001 fb24 	bl	8002c24 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 80015dc:	2201      	movs	r2, #1
 80015de:	2110      	movs	r1, #16
 80015e0:	4805      	ldr	r0, [pc, #20]	@ (80015f8 <AUDIO_IO_Init+0x6c>)
 80015e2:	f002 fb2b 	bl	8003c3c <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 80015e6:	2005      	movs	r0, #5
 80015e8:	f001 fb1c 	bl	8002c24 <HAL_Delay>
}
 80015ec:	bf00      	nop
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020c00 	.word	0x40020c00

080015fc <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
 8001614:	460b      	mov	r3, r1
 8001616:	71bb      	strb	r3, [r7, #6]
 8001618:	4613      	mov	r3, r2
 800161a:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	b29b      	uxth	r3, r3
 8001620:	797a      	ldrb	r2, [r7, #5]
 8001622:	79b9      	ldrb	r1, [r7, #6]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fefb 	bl	8001420 <I2Cx_WriteData>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	460a      	mov	r2, r1
 800163c:	71fb      	strb	r3, [r7, #7]
 800163e:	4613      	mov	r3, r2
 8001640:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	b29b      	uxth	r3, r3
 8001646:	79ba      	ldrb	r2, [r7, #6]
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff10 	bl	8001470 <I2Cx_ReadData>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b0de      	sub	sp, #376	@ 0x178
 8001660:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8001668:	463b      	mov	r3, r7
 800166a:	4946      	ldr	r1, [pc, #280]	@ (8001784 <AUDIO_StorageParse+0x128>)
 800166c:	4618      	mov	r0, r3
 800166e:	f011 f88b 	bl	8012788 <f_opendir>
 8001672:	4603      	mov	r3, r0
 8001674:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177
  FileList.ptr = 0;
 8001678:	4b43      	ldr	r3, [pc, #268]	@ (8001788 <AUDIO_StorageParse+0x12c>)
 800167a:	2200      	movs	r2, #0
 800167c:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8

  if(res == FR_OK)
 8001680:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 8001684:	2b00      	cmp	r3, #0
 8001686:	d16c      	bne.n	8001762 <AUDIO_StorageParse+0x106>
  {
    while(Appli_state == APPLICATION_READY)
 8001688:	e067      	b.n	800175a <AUDIO_StorageParse+0xfe>
    {
      res = f_readdir(&dir, &fno);
 800168a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800168e:	463b      	mov	r3, r7
 8001690:	4611      	mov	r1, r2
 8001692:	4618      	mov	r0, r3
 8001694:	f011 f947 	bl	8012926 <f_readdir>
 8001698:	4603      	mov	r3, r0
 800169a:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177
      if(res != FR_OK || fno.fname[0] == 0)
 800169e:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d15d      	bne.n	8001762 <AUDIO_StorageParse+0x106>
 80016a6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80016aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016ae:	7e9b      	ldrb	r3, [r3, #26]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d056      	beq.n	8001762 <AUDIO_StorageParse+0x106>
      {
        break;
      }
      if(fno.fname[0] == '.')
 80016b4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80016b8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016bc:	7e9b      	ldrb	r3, [r3, #26]
 80016be:	2b2e      	cmp	r3, #46	@ 0x2e
 80016c0:	d04a      	beq.n	8001758 <AUDIO_StorageParse+0xfc>
      {
        continue;
      }

      fn = fno.fname;
 80016c2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80016c6:	331a      	adds	r3, #26
 80016c8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 80016cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001788 <AUDIO_StorageParse+0x12c>)
 80016ce:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 80016d2:	2b17      	cmp	r3, #23
 80016d4:	d841      	bhi.n	800175a <AUDIO_StorageParse+0xfe>
      {
        if((fno.fattrib & AM_DIR) == 0)
 80016d6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80016da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016de:	7b1b      	ldrb	r3, [r3, #12]
 80016e0:	f003 0310 	and.w	r3, r3, #16
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d138      	bne.n	800175a <AUDIO_StorageParse+0xfe>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 80016e8:	4928      	ldr	r1, [pc, #160]	@ (800178c <AUDIO_StorageParse+0x130>)
 80016ea:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 80016ee:	f012 fbd9 	bl	8013ea4 <strstr>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d107      	bne.n	8001708 <AUDIO_StorageParse+0xac>
 80016f8:	4925      	ldr	r1, [pc, #148]	@ (8001790 <AUDIO_StorageParse+0x134>)
 80016fa:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 80016fe:	f012 fbd1 	bl	8013ea4 <strstr>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d028      	beq.n	800175a <AUDIO_StorageParse+0xfe>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8001708:	4b1f      	ldr	r3, [pc, #124]	@ (8001788 <AUDIO_StorageParse+0x12c>)
 800170a:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 800170e:	461a      	mov	r2, r3
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4413      	add	r3, r2
 800171a:	4a1b      	ldr	r2, [pc, #108]	@ (8001788 <AUDIO_StorageParse+0x12c>)
 800171c:	4413      	add	r3, r2
 800171e:	3301      	adds	r3, #1
 8001720:	2228      	movs	r2, #40	@ 0x28
 8001722:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001726:	4618      	mov	r0, r3
 8001728:	f012 fba9 	bl	8013e7e <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 800172c:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <AUDIO_StorageParse+0x12c>)
 800172e:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8001732:	461a      	mov	r2, r3
 8001734:	4914      	ldr	r1, [pc, #80]	@ (8001788 <AUDIO_StorageParse+0x12c>)
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4413      	add	r3, r2
 8001740:	440b      	add	r3, r1
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <AUDIO_StorageParse+0x12c>)
 8001748:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 800174c:	3301      	adds	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <AUDIO_StorageParse+0x12c>)
 8001752:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8
 8001756:	e000      	b.n	800175a <AUDIO_StorageParse+0xfe>
        continue;
 8001758:	bf00      	nop
    while(Appli_state == APPLICATION_READY)
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <AUDIO_StorageParse+0x138>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d093      	beq.n	800168a <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <AUDIO_StorageParse+0x12c>)
 8001764:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	@ 0x3d8
 8001768:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <AUDIO_StorageParse+0x13c>)
 800176a:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 800176c:	463b      	mov	r3, r7
 800176e:	4618      	mov	r0, r3
 8001770:	f011 f8b3 	bl	80128da <f_closedir>
  return res;
 8001774:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
}
 8001778:	4618      	mov	r0, r3
 800177a:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20002918 	.word	0x20002918
 8001788:	200014ac 	.word	0x200014ac
 800178c:	08015bb8 	.word	0x08015bb8
 8001790:	08015bbc 	.word	0x08015bbc
 8001794:	200041c4 	.word	0x200041c4
 8001798:	2000034e 	.word	0x2000034e

0800179c <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 80017a0:	f7ff ff5c 	bl	800165c <AUDIO_StorageParse>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <AUDIO_GetWavObjectNumber+0x14>
 80017aa:	4b02      	ldr	r3, [pc, #8]	@ (80017b4 <AUDIO_GetWavObjectNumber+0x18>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	e7ff      	b.n	80017b0 <AUDIO_GetWavObjectNumber+0x14>
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000034e 	.word	0x2000034e

080017b8 <Mount_USB>:

void Mount_USB (void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 80017bc:	2201      	movs	r2, #1
 80017be:	4905      	ldr	r1, [pc, #20]	@ (80017d4 <Mount_USB+0x1c>)
 80017c0:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <Mount_USB+0x20>)
 80017c2:	f00f fe01 	bl	80113c8 <f_mount>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b04      	ldr	r3, [pc, #16]	@ (80017dc <Mount_USB+0x24>)
 80017cc:	701a      	strb	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20002918 	.word	0x20002918
 80017d8:	2000291c 	.word	0x2000291c
 80017dc:	2000034c 	.word	0x2000034c

080017e0 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	4603      	mov	r3, r0
 80017ea:	81fb      	strh	r3, [r7, #14]
 80017ec:	460b      	mov	r3, r1
 80017ee:	81bb      	strh	r3, [r7, #12]
 80017f0:	4613      	mov	r3, r2
 80017f2:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 80017f8:	f7ff fec8 	bl	800158c <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 80017fc:	89fb      	ldrh	r3, [r7, #14]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2201      	movs	r2, #1
 8001802:	2102      	movs	r1, #2
 8001804:	4618      	mov	r0, r3
 8001806:	f000 fb01 	bl	8001e0c <CODEC_IO_Write>
 800180a:	4603      	mov	r3, r0
 800180c:	461a      	mov	r2, r3
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	4413      	add	r3, r2
 8001812:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8001814:	89bb      	ldrh	r3, [r7, #12]
 8001816:	3b01      	subs	r3, #1
 8001818:	2b03      	cmp	r3, #3
 800181a:	d81b      	bhi.n	8001854 <cs43l22_Init+0x74>
 800181c:	a201      	add	r2, pc, #4	@ (adr r2, 8001824 <cs43l22_Init+0x44>)
 800181e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001822:	bf00      	nop
 8001824:	08001835 	.word	0x08001835
 8001828:	0800183d 	.word	0x0800183d
 800182c:	08001845 	.word	0x08001845
 8001830:	0800184d 	.word	0x0800184d
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8001834:	4b5b      	ldr	r3, [pc, #364]	@ (80019a4 <cs43l22_Init+0x1c4>)
 8001836:	22fa      	movs	r2, #250	@ 0xfa
 8001838:	701a      	strb	r2, [r3, #0]
    break;
 800183a:	e00f      	b.n	800185c <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 800183c:	4b59      	ldr	r3, [pc, #356]	@ (80019a4 <cs43l22_Init+0x1c4>)
 800183e:	22af      	movs	r2, #175	@ 0xaf
 8001840:	701a      	strb	r2, [r3, #0]
    break;
 8001842:	e00b      	b.n	800185c <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8001844:	4b57      	ldr	r3, [pc, #348]	@ (80019a4 <cs43l22_Init+0x1c4>)
 8001846:	22aa      	movs	r2, #170	@ 0xaa
 8001848:	701a      	strb	r2, [r3, #0]
    break;
 800184a:	e007      	b.n	800185c <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 800184c:	4b55      	ldr	r3, [pc, #340]	@ (80019a4 <cs43l22_Init+0x1c4>)
 800184e:	2205      	movs	r2, #5
 8001850:	701a      	strb	r2, [r3, #0]
    break;    
 8001852:	e003      	b.n	800185c <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8001854:	4b53      	ldr	r3, [pc, #332]	@ (80019a4 <cs43l22_Init+0x1c4>)
 8001856:	2205      	movs	r2, #5
 8001858:	701a      	strb	r2, [r3, #0]
    break;    
 800185a:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800185c:	89fb      	ldrh	r3, [r7, #14]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	4a50      	ldr	r2, [pc, #320]	@ (80019a4 <cs43l22_Init+0x1c4>)
 8001862:	7812      	ldrb	r2, [r2, #0]
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	2104      	movs	r1, #4
 8001868:	4618      	mov	r0, r3
 800186a:	f000 facf 	bl	8001e0c <CODEC_IO_Write>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	4413      	add	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8001878:	89fb      	ldrh	r3, [r7, #14]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2281      	movs	r2, #129	@ 0x81
 800187e:	2105      	movs	r1, #5
 8001880:	4618      	mov	r0, r3
 8001882:	f000 fac3 	bl	8001e0c <CODEC_IO_Write>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	4413      	add	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8001890:	89fb      	ldrh	r3, [r7, #14]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2204      	movs	r2, #4
 8001896:	2106      	movs	r1, #6
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fab7 	bl	8001e0c <CODEC_IO_Write>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	4413      	add	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 80018a8:	7afa      	ldrb	r2, [r7, #11]
 80018aa:	89fb      	ldrh	r3, [r7, #14]
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f964 	bl	8001b7c <cs43l22_SetVolume>
 80018b4:	4602      	mov	r2, r0
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	4413      	add	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 80018bc:	89bb      	ldrh	r3, [r7, #12]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d023      	beq.n	800190a <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 80018c2:	89fb      	ldrh	r3, [r7, #14]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2206      	movs	r2, #6
 80018c8:	210f      	movs	r1, #15
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fa9e 	bl	8001e0c <CODEC_IO_Write>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	4413      	add	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 80018da:	89fb      	ldrh	r3, [r7, #14]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2200      	movs	r2, #0
 80018e0:	2124      	movs	r1, #36	@ 0x24
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fa92 	bl	8001e0c <CODEC_IO_Write>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	4413      	add	r3, r2
 80018f0:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 80018f2:	89fb      	ldrh	r3, [r7, #14]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2200      	movs	r2, #0
 80018f8:	2125      	movs	r1, #37	@ 0x25
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 fa86 	bl	8001e0c <CODEC_IO_Write>
 8001900:	4603      	mov	r3, r0
 8001902:	461a      	mov	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	4413      	add	r3, r2
 8001908:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 800190a:	89fb      	ldrh	r3, [r7, #14]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2200      	movs	r2, #0
 8001910:	210a      	movs	r1, #10
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fa7a 	bl	8001e0c <CODEC_IO_Write>
 8001918:	4603      	mov	r3, r0
 800191a:	461a      	mov	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	4413      	add	r3, r2
 8001920:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001922:	89fb      	ldrh	r3, [r7, #14]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2204      	movs	r2, #4
 8001928:	210e      	movs	r1, #14
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fa6e 	bl	8001e0c <CODEC_IO_Write>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	4413      	add	r3, r2
 8001938:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 800193a:	89fb      	ldrh	r3, [r7, #14]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2200      	movs	r2, #0
 8001940:	2127      	movs	r1, #39	@ 0x27
 8001942:	4618      	mov	r0, r3
 8001944:	f000 fa62 	bl	8001e0c <CODEC_IO_Write>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	4413      	add	r3, r2
 8001950:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8001952:	89fb      	ldrh	r3, [r7, #14]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	220f      	movs	r2, #15
 8001958:	211f      	movs	r1, #31
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fa56 	bl	8001e0c <CODEC_IO_Write>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	4413      	add	r3, r2
 8001968:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 800196a:	89fb      	ldrh	r3, [r7, #14]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	220a      	movs	r2, #10
 8001970:	211a      	movs	r1, #26
 8001972:	4618      	mov	r0, r3
 8001974:	f000 fa4a 	bl	8001e0c <CODEC_IO_Write>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	4413      	add	r3, r2
 8001980:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8001982:	89fb      	ldrh	r3, [r7, #14]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	220a      	movs	r2, #10
 8001988:	211b      	movs	r1, #27
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fa3e 	bl	8001e0c <CODEC_IO_Write>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	4413      	add	r3, r2
 8001998:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 800199a:	697b      	ldr	r3, [r7, #20]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000350 	.word	0x20000350

080019a8 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80019ac:	f7ff fe26 	bl	80015fc <AUDIO_IO_DeInit>
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 80019be:	f7ff fde5 	bl	800158c <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2101      	movs	r1, #1
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fe32 	bl	8001632 <AUDIO_IO_Read>
 80019ce:	4603      	mov	r3, r0
 80019d0:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	f023 0307 	bic.w	r3, r3, #7
 80019d8:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 80019da:	7bfb      	ldrb	r3, [r7, #15]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	80fb      	strh	r3, [r7, #6]
 80019f0:	4613      	mov	r3, r2
 80019f2:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 80019f8:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <cs43l22_Play+0x70>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d123      	bne.n	8001a48 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2206      	movs	r2, #6
 8001a06:	210e      	movs	r1, #14
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f9ff 	bl	8001e0c <CODEC_IO_Write>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	461a      	mov	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4413      	add	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 f919 	bl	8001c54 <cs43l22_SetMute>
 8001a22:	4602      	mov	r2, r0
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	229e      	movs	r2, #158	@ 0x9e
 8001a30:	2102      	movs	r1, #2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f9ea 	bl	8001e0c <CODEC_IO_Write>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8001a42:	4b04      	ldr	r3, [pc, #16]	@ (8001a54 <cs43l22_Play+0x70>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001a48:	68fb      	ldr	r3, [r7, #12]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000034 	.word	0x20000034

08001a58 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f8f2 	bl	8001c54 <cs43l22_SetMute>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4413      	add	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2102      	movs	r1, #2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 f9c3 	bl	8001e0c <CODEC_IO_Write>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001a90:	68fb      	ldr	r3, [r7, #12]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f8ce 	bl	8001c54 <cs43l22_SetMute>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4413      	add	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	e002      	b.n	8001acc <cs43l22_Resume+0x30>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2bfe      	cmp	r3, #254	@ 0xfe
 8001ad0:	d9f9      	bls.n	8001ac6 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b10 <cs43l22_Resume+0x74>)
 8001ad8:	7812      	ldrb	r2, [r2, #0]
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	2104      	movs	r1, #4
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f994 	bl	8001e0c <CODEC_IO_Write>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	229e      	movs	r2, #158	@ 0x9e
 8001af4:	2102      	movs	r1, #2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f988 	bl	8001e0c <CODEC_IO_Write>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000350 	.word	0x20000350

08001b14 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	2101      	movs	r1, #1
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 f893 	bl	8001c54 <cs43l22_SetMute>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	210e      	movs	r1, #14
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f964 	bl	8001e0c <CODEC_IO_Write>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	229f      	movs	r2, #159	@ 0x9f
 8001b54:	2102      	movs	r1, #2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f958 	bl	8001e0c <CODEC_IO_Write>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8001b66:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <cs43l22_Stop+0x64>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001b6c:	68fb      	ldr	r3, [r7, #12]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000034 	.word	0x20000034

08001b7c <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	460a      	mov	r2, r1
 8001b86:	80fb      	strh	r3, [r7, #6]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001b90:	797b      	ldrb	r3, [r7, #5]
 8001b92:	2b64      	cmp	r3, #100	@ 0x64
 8001b94:	d80b      	bhi.n	8001bae <cs43l22_SetVolume+0x32>
 8001b96:	797a      	ldrb	r2, [r7, #5]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	1a9b      	subs	r3, r3, r2
 8001b9e:	4a25      	ldr	r2, [pc, #148]	@ (8001c34 <cs43l22_SetVolume+0xb8>)
 8001ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ba4:	1152      	asrs	r2, r2, #5
 8001ba6:	17db      	asrs	r3, r3, #31
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	e000      	b.n	8001bb0 <cs43l22_SetVolume+0x34>
 8001bae:	23ff      	movs	r3, #255	@ 0xff
 8001bb0:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 8001bb2:	7afb      	ldrb	r3, [r7, #11]
 8001bb4:	2be6      	cmp	r3, #230	@ 0xe6
 8001bb6:	d91c      	bls.n	8001bf2 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	b2d8      	uxtb	r0, r3
 8001bbc:	7afb      	ldrb	r3, [r7, #11]
 8001bbe:	3319      	adds	r3, #25
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	2120      	movs	r1, #32
 8001bc6:	f000 f921 	bl	8001e0c <CODEC_IO_Write>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	b2d8      	uxtb	r0, r3
 8001bd8:	7afb      	ldrb	r3, [r7, #11]
 8001bda:	3319      	adds	r3, #25
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	461a      	mov	r2, r3
 8001be0:	2121      	movs	r1, #33	@ 0x21
 8001be2:	f000 f913 	bl	8001e0c <CODEC_IO_Write>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4413      	add	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	e01b      	b.n	8001c2a <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	b2d8      	uxtb	r0, r3
 8001bf6:	7afb      	ldrb	r3, [r7, #11]
 8001bf8:	3319      	adds	r3, #25
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	2120      	movs	r1, #32
 8001c00:	f000 f904 	bl	8001e0c <CODEC_IO_Write>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	b2d8      	uxtb	r0, r3
 8001c12:	7afb      	ldrb	r3, [r7, #11]
 8001c14:	3319      	adds	r3, #25
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2121      	movs	r1, #33	@ 0x21
 8001c1c:	f000 f8f6 	bl	8001e0c <CODEC_IO_Write>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	51eb851f 	.word	0x51eb851f

08001c38 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d124      	bne.n	8001cb4 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	22ff      	movs	r2, #255	@ 0xff
 8001c70:	2104      	movs	r1, #4
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f8ca 	bl	8001e0c <CODEC_IO_Write>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2201      	movs	r2, #1
 8001c88:	2122      	movs	r1, #34	@ 0x22
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 f8be 	bl	8001e0c <CODEC_IO_Write>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2123      	movs	r1, #35	@ 0x23
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f8b2 	bl	8001e0c <CODEC_IO_Write>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	e025      	b.n	8001d00 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2122      	movs	r1, #34	@ 0x22
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 f8a5 	bl	8001e0c <CODEC_IO_Write>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4413      	add	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2123      	movs	r1, #35	@ 0x23
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 f899 	bl	8001e0c <CODEC_IO_Write>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	4a08      	ldr	r2, [pc, #32]	@ (8001d0c <cs43l22_SetMute+0xb8>)
 8001cea:	7812      	ldrb	r2, [r2, #0]
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	2104      	movs	r1, #4
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 f88b 	bl	8001e0c <CODEC_IO_Write>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001d00:	68fb      	ldr	r3, [r7, #12]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000350 	.word	0x20000350

08001d10 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	460a      	mov	r2, r1
 8001d1a:	80fb      	strh	r3, [r7, #6]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001d24:	797b      	ldrb	r3, [r7, #5]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d84b      	bhi.n	8001dc4 <cs43l22_SetOutputMode+0xb4>
 8001d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8001d34 <cs43l22_SetOutputMode+0x24>)
 8001d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d32:	bf00      	nop
 8001d34:	08001d45 	.word	0x08001d45
 8001d38:	08001d65 	.word	0x08001d65
 8001d3c:	08001d85 	.word	0x08001d85
 8001d40:	08001da5 	.word	0x08001da5
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	22fa      	movs	r2, #250	@ 0xfa
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 f85d 	bl	8001e0c <CODEC_IO_Write>
 8001d52:	4603      	mov	r3, r0
 8001d54:	461a      	mov	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4413      	add	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001d5c:	4b24      	ldr	r3, [pc, #144]	@ (8001df0 <cs43l22_SetOutputMode+0xe0>)
 8001d5e:	22fa      	movs	r2, #250	@ 0xfa
 8001d60:	701a      	strb	r2, [r3, #0]
      break;
 8001d62:	e03f      	b.n	8001de4 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	22af      	movs	r2, #175	@ 0xaf
 8001d6a:	2104      	movs	r1, #4
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 f84d 	bl	8001e0c <CODEC_IO_Write>
 8001d72:	4603      	mov	r3, r0
 8001d74:	461a      	mov	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4413      	add	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001df0 <cs43l22_SetOutputMode+0xe0>)
 8001d7e:	22af      	movs	r2, #175	@ 0xaf
 8001d80:	701a      	strb	r2, [r3, #0]
      break;
 8001d82:	e02f      	b.n	8001de4 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	22aa      	movs	r2, #170	@ 0xaa
 8001d8a:	2104      	movs	r1, #4
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 f83d 	bl	8001e0c <CODEC_IO_Write>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4413      	add	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001d9c:	4b14      	ldr	r3, [pc, #80]	@ (8001df0 <cs43l22_SetOutputMode+0xe0>)
 8001d9e:	22aa      	movs	r2, #170	@ 0xaa
 8001da0:	701a      	strb	r2, [r3, #0]
      break;
 8001da2:	e01f      	b.n	8001de4 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2205      	movs	r2, #5
 8001daa:	2104      	movs	r1, #4
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 f82d 	bl	8001e0c <CODEC_IO_Write>
 8001db2:	4603      	mov	r3, r0
 8001db4:	461a      	mov	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4413      	add	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <cs43l22_SetOutputMode+0xe0>)
 8001dbe:	2205      	movs	r2, #5
 8001dc0:	701a      	strb	r2, [r3, #0]
      break;    
 8001dc2:	e00f      	b.n	8001de4 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2205      	movs	r2, #5
 8001dca:	2104      	movs	r1, #4
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 f81d 	bl	8001e0c <CODEC_IO_Write>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4413      	add	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001ddc:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <cs43l22_SetOutputMode+0xe0>)
 8001dde:	2205      	movs	r2, #5
 8001de0:	701a      	strb	r2, [r3, #0]
      break;
 8001de2:	bf00      	nop
  }  
  return counter;
 8001de4:	68fb      	ldr	r3, [r7, #12]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000350 	.word	0x20000350

08001df4 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
 8001e16:	460b      	mov	r3, r1
 8001e18:	71bb      	strb	r3, [r7, #6]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001e22:	797a      	ldrb	r2, [r7, #5]
 8001e24:	79b9      	ldrb	r1, [r7, #6]
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fbee 	bl	800160a <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	b2db      	uxtb	r3, r3
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_GPIO_EXTI_Callback>:
extern AUDIO_PLAYBACK_StateTypeDef AudioState;

int IsFinished = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d10d      	bne.n	8001e68 <HAL_GPIO_EXTI_Callback+0x2c>
	{
//		AudioState = AUDIO_STATE_NEXT;
		if (AudioState == AUDIO_STATE_PLAY)
 8001e4c:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <HAL_GPIO_EXTI_Callback+0x38>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d102      	bne.n	8001e5a <HAL_GPIO_EXTI_Callback+0x1e>
		{
			AudioState = AUDIO_STATE_PAUSE;
 8001e54:	4b07      	ldr	r3, [pc, #28]	@ (8001e74 <HAL_GPIO_EXTI_Callback+0x38>)
 8001e56:	220a      	movs	r2, #10
 8001e58:	701a      	strb	r2, [r3, #0]
		}

		if (AudioState == AUDIO_STATE_WAIT)
 8001e5a:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_GPIO_EXTI_Callback+0x38>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d102      	bne.n	8001e68 <HAL_GPIO_EXTI_Callback+0x2c>
		{
			AudioState = AUDIO_STATE_RESUME;
 8001e62:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <HAL_GPIO_EXTI_Callback+0x38>)
 8001e64:	220b      	movs	r2, #11
 8001e66:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	200014a8 	.word	0x200014a8

08001e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e7c:	f000 fe60 	bl	8002b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e80:	f000 f830 	bl	8001ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e84:	f000 f940 	bl	8002108 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e88:	f000 f91e 	bl	80020c8 <MX_DMA_Init>
  MX_I2C1_Init();
 8001e8c:	f000 f894 	bl	8001fb8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001e90:	f000 f8c0 	bl	8002014 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 8001e94:	f010 fea6 	bl	8012be4 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8001e98:	f008 fb50 	bl	800a53c <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8001e9c:	f000 f8ea 	bl	8002074 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001ea0:	f010 fec6 	bl	8012c30 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (Appli_state == APPLICATION_READY)
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <main+0x60>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d1f9      	bne.n	8001ea0 <main+0x28>
        {
        	Mount_USB();
 8001eac:	f7ff fc84 	bl	80017b8 <Mount_USB>
        	AUDIO_PLAYER_Start(0);
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f000 fc77 	bl	80027a4 <AUDIO_PLAYER_Start>

        	while (!IsFinished)
 8001eb6:	e009      	b.n	8001ecc <main+0x54>
        	{
        		AUDIO_PLAYER_Process(TRUE);
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f000 fcd5 	bl	8002868 <AUDIO_PLAYER_Process>

        		if (AudioState == AUDIO_STATE_STOP)
 8001ebe:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <main+0x64>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b09      	cmp	r3, #9
 8001ec4:	d102      	bne.n	8001ecc <main+0x54>
        		{
        			IsFinished = 1;
 8001ec6:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <main+0x68>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
        	while (!IsFinished)
 8001ecc:	4b04      	ldr	r3, [pc, #16]	@ (8001ee0 <main+0x68>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f1      	beq.n	8001eb8 <main+0x40>
    MX_USB_HOST_Process();
 8001ed4:	e7e4      	b.n	8001ea0 <main+0x28>
 8001ed6:	bf00      	nop
 8001ed8:	200041c4 	.word	0x200041c4
 8001edc:	200014a8 	.word	0x200014a8
 8001ee0:	20000498 	.word	0x20000498

08001ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b094      	sub	sp, #80	@ 0x50
 8001ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eea:	f107 0320 	add.w	r3, r7, #32
 8001eee:	2230      	movs	r2, #48	@ 0x30
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f011 ffbb 	bl	8013e6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	4b28      	ldr	r3, [pc, #160]	@ (8001fb0 <SystemClock_Config+0xcc>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	4a27      	ldr	r2, [pc, #156]	@ (8001fb0 <SystemClock_Config+0xcc>)
 8001f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f18:	4b25      	ldr	r3, [pc, #148]	@ (8001fb0 <SystemClock_Config+0xcc>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f24:	2300      	movs	r3, #0
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	4b22      	ldr	r3, [pc, #136]	@ (8001fb4 <SystemClock_Config+0xd0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a21      	ldr	r2, [pc, #132]	@ (8001fb4 <SystemClock_Config+0xd0>)
 8001f2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb4 <SystemClock_Config+0xd0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f40:	2301      	movs	r3, #1
 8001f42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f4e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f54:	2304      	movs	r3, #4
 8001f56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f58:	23a8      	movs	r3, #168	@ 0xa8
 8001f5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f60:	2307      	movs	r3, #7
 8001f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f64:	f107 0320 	add.w	r3, r7, #32
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f006 f8a9 	bl	80080c0 <HAL_RCC_OscConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f74:	f000 f93e 	bl	80021f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f78:	230f      	movs	r3, #15
 8001f7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f84:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	2105      	movs	r1, #5
 8001f96:	4618      	mov	r0, r3
 8001f98:	f006 fb0a 	bl	80085b0 <HAL_RCC_ClockConfig>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001fa2:	f000 f927 	bl	80021f4 <Error_Handler>
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	3750      	adds	r7, #80	@ 0x50
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40007000 	.word	0x40007000

08001fb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fbc:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001fbe:	4a13      	ldr	r2, [pc, #76]	@ (800200c <MX_I2C1_Init+0x54>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001fc4:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <MX_I2C1_Init+0x58>)
 8001fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001fd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fe8:	4b07      	ldr	r3, [pc, #28]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff4:	4804      	ldr	r0, [pc, #16]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001ff6:	f003 ff65 	bl	8005ec4 <HAL_I2C_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002000:	f000 f8f8 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000354 	.word	0x20000354
 800200c:	40005400 	.word	0x40005400
 8002010:	000186a0 	.word	0x000186a0

08002014 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002018:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <MX_I2S3_Init+0x54>)
 800201a:	4a14      	ldr	r2, [pc, #80]	@ (800206c <MX_I2S3_Init+0x58>)
 800201c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800201e:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <MX_I2S3_Init+0x54>)
 8002020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002024:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <MX_I2S3_Init+0x54>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800202c:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <MX_I2S3_Init+0x54>)
 800202e:	2200      	movs	r2, #0
 8002030:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <MX_I2S3_Init+0x54>)
 8002034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002038:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_192K;
 800203a:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <MX_I2S3_Init+0x54>)
 800203c:	4a0c      	ldr	r2, [pc, #48]	@ (8002070 <MX_I2S3_Init+0x5c>)
 800203e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002040:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <MX_I2S3_Init+0x54>)
 8002042:	2200      	movs	r2, #0
 8002044:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002046:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <MX_I2S3_Init+0x54>)
 8002048:	2200      	movs	r2, #0
 800204a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <MX_I2S3_Init+0x54>)
 800204e:	2200      	movs	r2, #0
 8002050:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002052:	4805      	ldr	r0, [pc, #20]	@ (8002068 <MX_I2S3_Init+0x54>)
 8002054:	f004 ff98 	bl	8006f88 <HAL_I2S_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800205e:	f000 f8c9 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200003a8 	.word	0x200003a8
 800206c:	40003c00 	.word	0x40003c00
 8002070:	0002ee00 	.word	0x0002ee00

08002074 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002078:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <MX_USART2_UART_Init+0x4c>)
 800207a:	4a12      	ldr	r2, [pc, #72]	@ (80020c4 <MX_USART2_UART_Init+0x50>)
 800207c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800207e:	4b10      	ldr	r3, [pc, #64]	@ (80020c0 <MX_USART2_UART_Init+0x4c>)
 8002080:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002084:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002086:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <MX_USART2_UART_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800208c:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <MX_USART2_UART_Init+0x4c>)
 800208e:	2200      	movs	r2, #0
 8002090:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002092:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <MX_USART2_UART_Init+0x4c>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002098:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <MX_USART2_UART_Init+0x4c>)
 800209a:	220c      	movs	r2, #12
 800209c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209e:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <MX_USART2_UART_Init+0x4c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <MX_USART2_UART_Init+0x4c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020aa:	4805      	ldr	r0, [pc, #20]	@ (80020c0 <MX_USART2_UART_Init+0x4c>)
 80020ac:	f006 fe0e 	bl	8008ccc <HAL_UART_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020b6:	f000 f89d 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000450 	.word	0x20000450
 80020c4:	40004400 	.word	0x40004400

080020c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <MX_DMA_Init+0x3c>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002104 <MX_DMA_Init+0x3c>)
 80020d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020de:	4b09      	ldr	r3, [pc, #36]	@ (8002104 <MX_DMA_Init+0x3c>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2010      	movs	r0, #16
 80020f0:	f000 fe97 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80020f4:	2010      	movs	r0, #16
 80020f6:	f000 feb0 	bl	8002e5a <HAL_NVIC_EnableIRQ>

}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800

08002108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	@ 0x28
 800210c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	4b31      	ldr	r3, [pc, #196]	@ (80021e8 <MX_GPIO_Init+0xe0>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	4a30      	ldr	r2, [pc, #192]	@ (80021e8 <MX_GPIO_Init+0xe0>)
 8002128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800212c:	6313      	str	r3, [r2, #48]	@ 0x30
 800212e:	4b2e      	ldr	r3, [pc, #184]	@ (80021e8 <MX_GPIO_Init+0xe0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b2a      	ldr	r3, [pc, #168]	@ (80021e8 <MX_GPIO_Init+0xe0>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	4a29      	ldr	r2, [pc, #164]	@ (80021e8 <MX_GPIO_Init+0xe0>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	6313      	str	r3, [r2, #48]	@ 0x30
 800214a:	4b27      	ldr	r3, [pc, #156]	@ (80021e8 <MX_GPIO_Init+0xe0>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	4b23      	ldr	r3, [pc, #140]	@ (80021e8 <MX_GPIO_Init+0xe0>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	4a22      	ldr	r2, [pc, #136]	@ (80021e8 <MX_GPIO_Init+0xe0>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6313      	str	r3, [r2, #48]	@ 0x30
 8002166:	4b20      	ldr	r3, [pc, #128]	@ (80021e8 <MX_GPIO_Init+0xe0>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	4b1c      	ldr	r3, [pc, #112]	@ (80021e8 <MX_GPIO_Init+0xe0>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	4a1b      	ldr	r2, [pc, #108]	@ (80021e8 <MX_GPIO_Init+0xe0>)
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	6313      	str	r3, [r2, #48]	@ 0x30
 8002182:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <MX_GPIO_Init+0xe0>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800218e:	2200      	movs	r2, #0
 8002190:	2101      	movs	r1, #1
 8002192:	4816      	ldr	r0, [pc, #88]	@ (80021ec <MX_GPIO_Init+0xe4>)
 8002194:	f001 fd52 	bl	8003c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002198:	2301      	movs	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	2301      	movs	r3, #1
 800219e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	480f      	ldr	r0, [pc, #60]	@ (80021ec <MX_GPIO_Init+0xe4>)
 80021b0:	f001 faac 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021b4:	2301      	movs	r3, #1
 80021b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021b8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4619      	mov	r1, r3
 80021c8:	4809      	ldr	r0, [pc, #36]	@ (80021f0 <MX_GPIO_Init+0xe8>)
 80021ca:	f001 fa9f 	bl	800370c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2006      	movs	r0, #6
 80021d4:	f000 fe25 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80021d8:	2006      	movs	r0, #6
 80021da:	f000 fe3e 	bl	8002e5a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80021de:	bf00      	nop
 80021e0:	3728      	adds	r7, #40	@ 0x28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40020800 	.word	0x40020800
 80021f0:	40020000 	.word	0x40020000

080021f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f8:	b672      	cpsid	i
}
 80021fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <Error_Handler+0x8>

08002200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	4b10      	ldr	r3, [pc, #64]	@ (800224c <HAL_MspInit+0x4c>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	4a0f      	ldr	r2, [pc, #60]	@ (800224c <HAL_MspInit+0x4c>)
 8002210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002214:	6453      	str	r3, [r2, #68]	@ 0x44
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <HAL_MspInit+0x4c>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	4b09      	ldr	r3, [pc, #36]	@ (800224c <HAL_MspInit+0x4c>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	4a08      	ldr	r2, [pc, #32]	@ (800224c <HAL_MspInit+0x4c>)
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002230:	6413      	str	r3, [r2, #64]	@ 0x40
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_MspInit+0x4c>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800

08002250 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	@ 0x28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a19      	ldr	r2, [pc, #100]	@ (80022d4 <HAL_I2C_MspInit+0x84>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d12c      	bne.n	80022cc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	4b18      	ldr	r3, [pc, #96]	@ (80022d8 <HAL_I2C_MspInit+0x88>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	4a17      	ldr	r2, [pc, #92]	@ (80022d8 <HAL_I2C_MspInit+0x88>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	6313      	str	r3, [r2, #48]	@ 0x30
 8002282:	4b15      	ldr	r3, [pc, #84]	@ (80022d8 <HAL_I2C_MspInit+0x88>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800228e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002294:	2312      	movs	r3, #18
 8002296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229c:	2303      	movs	r3, #3
 800229e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022a0:	2304      	movs	r3, #4
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4619      	mov	r1, r3
 80022aa:	480c      	ldr	r0, [pc, #48]	@ (80022dc <HAL_I2C_MspInit+0x8c>)
 80022ac:	f001 fa2e 	bl	800370c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	4b08      	ldr	r3, [pc, #32]	@ (80022d8 <HAL_I2C_MspInit+0x88>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b8:	4a07      	ldr	r2, [pc, #28]	@ (80022d8 <HAL_I2C_MspInit+0x88>)
 80022ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022be:	6413      	str	r3, [r2, #64]	@ 0x40
 80022c0:	4b05      	ldr	r3, [pc, #20]	@ (80022d8 <HAL_I2C_MspInit+0x88>)
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80022cc:	bf00      	nop
 80022ce:	3728      	adds	r7, #40	@ 0x28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40005400 	.word	0x40005400
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020400 	.word	0x40020400

080022e0 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <HAL_I2C_MspDeInit+0x38>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d10e      	bne.n	8002310 <HAL_I2C_MspDeInit+0x30>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80022f2:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <HAL_I2C_MspDeInit+0x3c>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	4a09      	ldr	r2, [pc, #36]	@ (800231c <HAL_I2C_MspDeInit+0x3c>)
 80022f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80022fc:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80022fe:	2140      	movs	r1, #64	@ 0x40
 8002300:	4807      	ldr	r0, [pc, #28]	@ (8002320 <HAL_I2C_MspDeInit+0x40>)
 8002302:	f001 fb9f 	bl	8003a44 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002306:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800230a:	4805      	ldr	r0, [pc, #20]	@ (8002320 <HAL_I2C_MspDeInit+0x40>)
 800230c:	f001 fb9a 	bl	8003a44 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40005400 	.word	0x40005400
 800231c:	40023800 	.word	0x40023800
 8002320:	40020400 	.word	0x40020400

08002324 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08e      	sub	sp, #56	@ 0x38
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a4e      	ldr	r2, [pc, #312]	@ (8002488 <HAL_I2S_MspInit+0x164>)
 8002350:	4293      	cmp	r3, r2
 8002352:	f040 8094 	bne.w	800247e <HAL_I2S_MspInit+0x15a>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002356:	2301      	movs	r3, #1
 8002358:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800235a:	23c0      	movs	r3, #192	@ 0xc0
 800235c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800235e:	2302      	movs	r3, #2
 8002360:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4618      	mov	r0, r3
 8002368:	f006 fb42 	bl	80089f0 <HAL_RCCEx_PeriphCLKConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8002372:	f7ff ff3f 	bl	80021f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	4b44      	ldr	r3, [pc, #272]	@ (800248c <HAL_I2S_MspInit+0x168>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	4a43      	ldr	r2, [pc, #268]	@ (800248c <HAL_I2S_MspInit+0x168>)
 8002380:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002384:	6413      	str	r3, [r2, #64]	@ 0x40
 8002386:	4b41      	ldr	r3, [pc, #260]	@ (800248c <HAL_I2S_MspInit+0x168>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b3d      	ldr	r3, [pc, #244]	@ (800248c <HAL_I2S_MspInit+0x168>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	4a3c      	ldr	r2, [pc, #240]	@ (800248c <HAL_I2S_MspInit+0x168>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a2:	4b3a      	ldr	r3, [pc, #232]	@ (800248c <HAL_I2S_MspInit+0x168>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	4b36      	ldr	r3, [pc, #216]	@ (800248c <HAL_I2S_MspInit+0x168>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	4a35      	ldr	r2, [pc, #212]	@ (800248c <HAL_I2S_MspInit+0x168>)
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023be:	4b33      	ldr	r3, [pc, #204]	@ (800248c <HAL_I2S_MspInit+0x168>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023ca:	2310      	movs	r3, #16
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023da:	2306      	movs	r3, #6
 80023dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023e2:	4619      	mov	r1, r3
 80023e4:	482a      	ldr	r0, [pc, #168]	@ (8002490 <HAL_I2S_MspInit+0x16c>)
 80023e6:	f001 f991 	bl	800370c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80023ea:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023fc:	2306      	movs	r3, #6
 80023fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002400:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002404:	4619      	mov	r1, r3
 8002406:	4823      	ldr	r0, [pc, #140]	@ (8002494 <HAL_I2S_MspInit+0x170>)
 8002408:	f001 f980 	bl	800370c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800240c:	4b22      	ldr	r3, [pc, #136]	@ (8002498 <HAL_I2S_MspInit+0x174>)
 800240e:	4a23      	ldr	r2, [pc, #140]	@ (800249c <HAL_I2S_MspInit+0x178>)
 8002410:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002412:	4b21      	ldr	r3, [pc, #132]	@ (8002498 <HAL_I2S_MspInit+0x174>)
 8002414:	2200      	movs	r2, #0
 8002416:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002418:	4b1f      	ldr	r3, [pc, #124]	@ (8002498 <HAL_I2S_MspInit+0x174>)
 800241a:	2240      	movs	r2, #64	@ 0x40
 800241c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800241e:	4b1e      	ldr	r3, [pc, #120]	@ (8002498 <HAL_I2S_MspInit+0x174>)
 8002420:	2200      	movs	r2, #0
 8002422:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002424:	4b1c      	ldr	r3, [pc, #112]	@ (8002498 <HAL_I2S_MspInit+0x174>)
 8002426:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800242a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800242c:	4b1a      	ldr	r3, [pc, #104]	@ (8002498 <HAL_I2S_MspInit+0x174>)
 800242e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002432:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002434:	4b18      	ldr	r3, [pc, #96]	@ (8002498 <HAL_I2S_MspInit+0x174>)
 8002436:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800243a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800243c:	4b16      	ldr	r3, [pc, #88]	@ (8002498 <HAL_I2S_MspInit+0x174>)
 800243e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002442:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002444:	4b14      	ldr	r3, [pc, #80]	@ (8002498 <HAL_I2S_MspInit+0x174>)
 8002446:	2200      	movs	r2, #0
 8002448:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800244a:	4b13      	ldr	r3, [pc, #76]	@ (8002498 <HAL_I2S_MspInit+0x174>)
 800244c:	2204      	movs	r2, #4
 800244e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002450:	4b11      	ldr	r3, [pc, #68]	@ (8002498 <HAL_I2S_MspInit+0x174>)
 8002452:	2203      	movs	r2, #3
 8002454:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002456:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <HAL_I2S_MspInit+0x174>)
 8002458:	2200      	movs	r2, #0
 800245a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800245c:	4b0e      	ldr	r3, [pc, #56]	@ (8002498 <HAL_I2S_MspInit+0x174>)
 800245e:	2200      	movs	r2, #0
 8002460:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002462:	480d      	ldr	r0, [pc, #52]	@ (8002498 <HAL_I2S_MspInit+0x174>)
 8002464:	f000 fd14 	bl	8002e90 <HAL_DMA_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 800246e:	f7ff fec1 	bl	80021f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a08      	ldr	r2, [pc, #32]	@ (8002498 <HAL_I2S_MspInit+0x174>)
 8002476:	639a      	str	r2, [r3, #56]	@ 0x38
 8002478:	4a07      	ldr	r2, [pc, #28]	@ (8002498 <HAL_I2S_MspInit+0x174>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800247e:	bf00      	nop
 8002480:	3738      	adds	r7, #56	@ 0x38
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40003c00 	.word	0x40003c00
 800248c:	40023800 	.word	0x40023800
 8002490:	40020000 	.word	0x40020000
 8002494:	40020800 	.word	0x40020800
 8002498:	200003f0 	.word	0x200003f0
 800249c:	40026088 	.word	0x40026088

080024a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	@ 0x28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a19      	ldr	r2, [pc, #100]	@ (8002524 <HAL_UART_MspInit+0x84>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d12b      	bne.n	800251a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <HAL_UART_MspInit+0x88>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	4a17      	ldr	r2, [pc, #92]	@ (8002528 <HAL_UART_MspInit+0x88>)
 80024cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024d2:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <HAL_UART_MspInit+0x88>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <HAL_UART_MspInit+0x88>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	4a10      	ldr	r2, [pc, #64]	@ (8002528 <HAL_UART_MspInit+0x88>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <HAL_UART_MspInit+0x88>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024fa:	230c      	movs	r3, #12
 80024fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002506:	2303      	movs	r3, #3
 8002508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800250a:	2307      	movs	r3, #7
 800250c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250e:	f107 0314 	add.w	r3, r7, #20
 8002512:	4619      	mov	r1, r3
 8002514:	4805      	ldr	r0, [pc, #20]	@ (800252c <HAL_UART_MspInit+0x8c>)
 8002516:	f001 f8f9 	bl	800370c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800251a:	bf00      	nop
 800251c:	3728      	adds	r7, #40	@ 0x28
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40004400 	.word	0x40004400
 8002528:	40023800 	.word	0x40023800
 800252c:	40020000 	.word	0x40020000

08002530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <NMI_Handler+0x4>

08002538 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <HardFault_Handler+0x4>

08002540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <MemManage_Handler+0x4>

08002548 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <BusFault_Handler+0x4>

08002550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002554:	bf00      	nop
 8002556:	e7fd      	b.n	8002554 <UsageFault_Handler+0x4>

08002558 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002586:	f000 fb2d 	bl	8002be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}

0800258e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002592:	2001      	movs	r0, #1
 8002594:	f001 fb6c 	bl	8003c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}

0800259c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80025a0:	4802      	ldr	r0, [pc, #8]	@ (80025ac <DMA1_Stream5_IRQHandler+0x10>)
 80025a2:	f000 fe49 	bl	8003238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200003f0 	.word	0x200003f0

080025b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80025b4:	4802      	ldr	r0, [pc, #8]	@ (80025c0 <OTG_FS_IRQHandler+0x10>)
 80025b6:	f001 fe31 	bl	800421c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200041c8 	.word	0x200041c8

080025c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return 1;
 80025c8:	2301      	movs	r3, #1
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <_kill>:

int _kill(int pid, int sig)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025de:	f011 fcd1 	bl	8013f84 <__errno>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2216      	movs	r2, #22
 80025e6:	601a      	str	r2, [r3, #0]
  return -1;
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <_exit>:

void _exit (int status)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ffe7 	bl	80025d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002606:	bf00      	nop
 8002608:	e7fd      	b.n	8002606 <_exit+0x12>

0800260a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e00a      	b.n	8002632 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800261c:	f3af 8000 	nop.w
 8002620:	4601      	mov	r1, r0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	60ba      	str	r2, [r7, #8]
 8002628:	b2ca      	uxtb	r2, r1
 800262a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3301      	adds	r3, #1
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	dbf0      	blt.n	800261c <_read+0x12>
  }

  return len;
 800263a:	687b      	ldr	r3, [r7, #4]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	e009      	b.n	800266a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	60ba      	str	r2, [r7, #8]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	3301      	adds	r3, #1
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	429a      	cmp	r2, r3
 8002670:	dbf1      	blt.n	8002656 <_write+0x12>
  }
  return len;
 8002672:	687b      	ldr	r3, [r7, #4]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <_close>:

int _close(int file)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026a4:	605a      	str	r2, [r3, #4]
  return 0;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <_isatty>:

int _isatty(int file)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026bc:	2301      	movs	r3, #1
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b085      	sub	sp, #20
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ec:	4a14      	ldr	r2, [pc, #80]	@ (8002740 <_sbrk+0x5c>)
 80026ee:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <_sbrk+0x60>)
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026f8:	4b13      	ldr	r3, [pc, #76]	@ (8002748 <_sbrk+0x64>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002700:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <_sbrk+0x64>)
 8002702:	4a12      	ldr	r2, [pc, #72]	@ (800274c <_sbrk+0x68>)
 8002704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002706:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <_sbrk+0x64>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	429a      	cmp	r2, r3
 8002712:	d207      	bcs.n	8002724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002714:	f011 fc36 	bl	8013f84 <__errno>
 8002718:	4603      	mov	r3, r0
 800271a:	220c      	movs	r2, #12
 800271c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800271e:	f04f 33ff 	mov.w	r3, #4294967295
 8002722:	e009      	b.n	8002738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002724:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <_sbrk+0x64>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800272a:	4b07      	ldr	r3, [pc, #28]	@ (8002748 <_sbrk+0x64>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	4a05      	ldr	r2, [pc, #20]	@ (8002748 <_sbrk+0x64>)
 8002734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20020000 	.word	0x20020000
 8002744:	00000400 	.word	0x00000400
 8002748:	2000049c 	.word	0x2000049c
 800274c:	200046f8 	.word	0x200046f8

08002750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002754:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <SystemInit+0x20>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275a:	4a05      	ldr	r2, [pc, #20]	@ (8002770 <SystemInit+0x20>)
 800275c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 800277c:	4b08      	ldr	r3, [pc, #32]	@ (80027a0 <PlayerInit+0x2c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	4619      	mov	r1, r3
 8002786:	2003      	movs	r0, #3
 8002788:	f7fe fba4 	bl	8000ed4 <AUDIO_OUT_Init>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <PlayerInit+0x22>
	{
		return 1;
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8002796:	2300      	movs	r3, #0
	}
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	2000003c 	.word	0x2000003c

080027a4 <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
  UINT bytesread;

  f_close(&WavFile);
 80027ae:	4829      	ldr	r0, [pc, #164]	@ (8002854 <AUDIO_PLAYER_Start+0xb0>)
 80027b0:	f00f fbd5 	bl	8011f5e <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 80027b4:	f7fe fff2 	bl	800179c <AUDIO_GetWavObjectNumber>
 80027b8:	4603      	mov	r3, r0
 80027ba:	461a      	mov	r2, r3
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d942      	bls.n	800284a <AUDIO_PLAYER_Start+0xa6>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 80027c4:	79fa      	ldrb	r2, [r7, #7]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	4a21      	ldr	r2, [pc, #132]	@ (8002858 <AUDIO_PLAYER_Start+0xb4>)
 80027d2:	4413      	add	r3, r2
 80027d4:	3301      	adds	r3, #1
 80027d6:	2201      	movs	r2, #1
 80027d8:	4619      	mov	r1, r3
 80027da:	481e      	ldr	r0, [pc, #120]	@ (8002854 <AUDIO_PLAYER_Start+0xb0>)
 80027dc:	f00e fe3a 	bl	8011454 <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 80027e0:	f107 030c 	add.w	r3, r7, #12
 80027e4:	222c      	movs	r2, #44	@ 0x2c
 80027e6:	491d      	ldr	r1, [pc, #116]	@ (800285c <AUDIO_PLAYER_Start+0xb8>)
 80027e8:	481a      	ldr	r0, [pc, #104]	@ (8002854 <AUDIO_PLAYER_Start+0xb0>)
 80027ea:	f00f f902 	bl	80119f2 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 80027ee:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <AUDIO_PLAYER_Start+0xb8>)
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff ffbe 	bl	8002774 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 80027f8:	4b19      	ldr	r3, [pc, #100]	@ (8002860 <AUDIO_PLAYER_Start+0xbc>)
 80027fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	4812      	ldr	r0, [pc, #72]	@ (8002854 <AUDIO_PLAYER_Start+0xb0>)
 800280c:	f00f fbd1 	bl	8011fb2 <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8002810:	f107 030c 	add.w	r3, r7, #12
 8002814:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002818:	4911      	ldr	r1, [pc, #68]	@ (8002860 <AUDIO_PLAYER_Start+0xbc>)
 800281a:	480e      	ldr	r0, [pc, #56]	@ (8002854 <AUDIO_PLAYER_Start+0xb0>)
 800281c:	f00f f8e9 	bl	80119f2 <f_read>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d111      	bne.n	800284a <AUDIO_PLAYER_Start+0xa6>
    {
      AudioState = AUDIO_STATE_PLAY;
 8002826:	4b0f      	ldr	r3, [pc, #60]	@ (8002864 <AUDIO_PLAYER_Start+0xc0>)
 8002828:	2203      	movs	r2, #3
 800282a:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00b      	beq.n	800284a <AUDIO_PLAYER_Start+0xa6>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8002832:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002836:	480a      	ldr	r0, [pc, #40]	@ (8002860 <AUDIO_PLAYER_Start+0xbc>)
 8002838:	f7fe fb9a 	bl	8000f70 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4a08      	ldr	r2, [pc, #32]	@ (8002860 <AUDIO_PLAYER_Start+0xbc>)
 8002840:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002844:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 8002846:	2300      	movs	r3, #0
 8002848:	e000      	b.n	800284c <AUDIO_PLAYER_Start+0xa8>
        }
      }
  }
  return AUDIO_ERROR_IO;
 800284a:	2301      	movs	r3, #1
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	200018b8 	.word	0x200018b8
 8002858:	200014ac 	.word	0x200014ac
 800285c:	20001888 	.word	0x20001888
 8002860:	200004a0 	.word	0x200004a0
 8002864:	200014a8 	.word	0x200014a8

08002868 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 8002868:	b590      	push	{r4, r7, lr}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8002872:	2300      	movs	r3, #0
 8002874:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 8002876:	4b82      	ldr	r3, [pc, #520]	@ (8002a80 <AUDIO_PLAYER_Process+0x218>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	3b03      	subs	r3, #3
 800287c:	2b0a      	cmp	r3, #10
 800287e:	f200 80f6 	bhi.w	8002a6e <AUDIO_PLAYER_Process+0x206>
 8002882:	a201      	add	r2, pc, #4	@ (adr r2, 8002888 <AUDIO_PLAYER_Process+0x20>)
 8002884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002888:	080028b5 	.word	0x080028b5
 800288c:	08002a6f 	.word	0x08002a6f
 8002890:	0800297b 	.word	0x0800297b
 8002894:	080029c9 	.word	0x080029c9
 8002898:	08002a6f 	.word	0x08002a6f
 800289c:	08002a6f 	.word	0x08002a6f
 80028a0:	08002969 	.word	0x08002969
 80028a4:	08002a0b 	.word	0x08002a0b
 80028a8:	08002a17 	.word	0x08002a17
 80028ac:	08002a23 	.word	0x08002a23
 80028b0:	08002a49 	.word	0x08002a49
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 80028b4:	4b73      	ldr	r3, [pc, #460]	@ (8002a84 <AUDIO_PLAYER_Process+0x21c>)
 80028b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	4b72      	ldr	r3, [pc, #456]	@ (8002a88 <AUDIO_PLAYER_Process+0x220>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d305      	bcc.n	80028d0 <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80028c4:	2002      	movs	r0, #2
 80028c6:	f7fe fba9 	bl	800101c <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 80028ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002a80 <AUDIO_PLAYER_Process+0x218>)
 80028cc:	2205      	movs	r2, #5
 80028ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 80028d0:	4b6c      	ldr	r3, [pc, #432]	@ (8002a84 <AUDIO_PLAYER_Process+0x21c>)
 80028d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d11e      	bne.n	800291a <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 80028dc:	f107 0308 	add.w	r3, r7, #8
 80028e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028e4:	4967      	ldr	r1, [pc, #412]	@ (8002a84 <AUDIO_PLAYER_Process+0x21c>)
 80028e6:	4869      	ldr	r0, [pc, #420]	@ (8002a8c <AUDIO_PLAYER_Process+0x224>)
 80028e8:	f00f f883 	bl	80119f2 <f_read>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d004      	beq.n	80028fc <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80028f2:	2002      	movs	r0, #2
 80028f4:	f7fe fb92 	bl	800101c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0bc      	b.n	8002a76 <AUDIO_PLAYER_Process+0x20e>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 80028fc:	4b61      	ldr	r3, [pc, #388]	@ (8002a84 <AUDIO_PLAYER_Process+0x21c>)
 80028fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8002906:	4b5f      	ldr	r3, [pc, #380]	@ (8002a84 <AUDIO_PLAYER_Process+0x21c>)
 8002908:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	4413      	add	r3, r2
 8002912:	4a5c      	ldr	r2, [pc, #368]	@ (8002a84 <AUDIO_PLAYER_Process+0x21c>)
 8002914:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002918:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 800291a:	4b5a      	ldr	r3, [pc, #360]	@ (8002a84 <AUDIO_PLAYER_Process+0x21c>)
 800291c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b02      	cmp	r3, #2
 8002924:	f040 80a5 	bne.w	8002a72 <AUDIO_PLAYER_Process+0x20a>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8002928:	f107 0308 	add.w	r3, r7, #8
 800292c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002930:	4957      	ldr	r1, [pc, #348]	@ (8002a90 <AUDIO_PLAYER_Process+0x228>)
 8002932:	4856      	ldr	r0, [pc, #344]	@ (8002a8c <AUDIO_PLAYER_Process+0x224>)
 8002934:	f00f f85d 	bl	80119f2 <f_read>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d004      	beq.n	8002948 <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800293e:	2002      	movs	r0, #2
 8002940:	f7fe fb6c 	bl	800101c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8002944:	2301      	movs	r3, #1
 8002946:	e096      	b.n	8002a76 <AUDIO_PLAYER_Process+0x20e>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8002948:	4b4e      	ldr	r3, [pc, #312]	@ (8002a84 <AUDIO_PLAYER_Process+0x21c>)
 800294a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8002952:	4b4c      	ldr	r3, [pc, #304]	@ (8002a84 <AUDIO_PLAYER_Process+0x21c>)
 8002954:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	4413      	add	r3, r2
 800295e:	4a49      	ldr	r2, [pc, #292]	@ (8002a84 <AUDIO_PLAYER_Process+0x21c>)
 8002960:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002964:	6053      	str	r3, [r2, #4]
    }
    break;
 8002966:	e084      	b.n	8002a72 <AUDIO_PLAYER_Process+0x20a>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002968:	2002      	movs	r0, #2
 800296a:	f7fe fb57 	bl	800101c <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 800296e:	4b44      	ldr	r3, [pc, #272]	@ (8002a80 <AUDIO_PLAYER_Process+0x218>)
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
    break;
 8002978:	e07c      	b.n	8002a74 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 800297a:	4b46      	ldr	r3, [pc, #280]	@ (8002a94 <AUDIO_PLAYER_Process+0x22c>)
 800297c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002980:	b29b      	uxth	r3, r3
 8002982:	3301      	adds	r3, #1
 8002984:	b29b      	uxth	r3, r3
 8002986:	b21a      	sxth	r2, r3
 8002988:	4b42      	ldr	r3, [pc, #264]	@ (8002a94 <AUDIO_PLAYER_Process+0x22c>)
 800298a:	801a      	strh	r2, [r3, #0]
 800298c:	4b41      	ldr	r3, [pc, #260]	@ (8002a94 <AUDIO_PLAYER_Process+0x22c>)
 800298e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002992:	461c      	mov	r4, r3
 8002994:	f7fe ff02 	bl	800179c <AUDIO_GetWavObjectNumber>
 8002998:	4603      	mov	r3, r0
 800299a:	429c      	cmp	r4, r3
 800299c:	db09      	blt.n	80029b2 <AUDIO_PLAYER_Process+0x14a>
    {
    	if (isLoop)
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <AUDIO_PLAYER_Process+0x144>
    	{
    		FilePos = 0;
 80029a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002a94 <AUDIO_PLAYER_Process+0x22c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	801a      	strh	r2, [r3, #0]
 80029aa:	e002      	b.n	80029b2 <AUDIO_PLAYER_Process+0x14a>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 80029ac:	4b34      	ldr	r3, [pc, #208]	@ (8002a80 <AUDIO_PLAYER_Process+0x218>)
 80029ae:	2209      	movs	r2, #9
 80029b0:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80029b2:	2002      	movs	r0, #2
 80029b4:	f7fe fb32 	bl	800101c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 80029b8:	4b36      	ldr	r3, [pc, #216]	@ (8002a94 <AUDIO_PLAYER_Process+0x22c>)
 80029ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff feef 	bl	80027a4 <AUDIO_PLAYER_Start>
    break;    
 80029c6:	e055      	b.n	8002a74 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 80029c8:	4b32      	ldr	r3, [pc, #200]	@ (8002a94 <AUDIO_PLAYER_Process+0x22c>)
 80029ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	b21a      	sxth	r2, r3
 80029d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002a94 <AUDIO_PLAYER_Process+0x22c>)
 80029d8:	801a      	strh	r2, [r3, #0]
 80029da:	4b2e      	ldr	r3, [pc, #184]	@ (8002a94 <AUDIO_PLAYER_Process+0x22c>)
 80029dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	da07      	bge.n	80029f4 <AUDIO_PLAYER_Process+0x18c>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 80029e4:	f7fe feda 	bl	800179c <AUDIO_GetWavObjectNumber>
 80029e8:	4603      	mov	r3, r0
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	b21a      	sxth	r2, r3
 80029f0:	4b28      	ldr	r3, [pc, #160]	@ (8002a94 <AUDIO_PLAYER_Process+0x22c>)
 80029f2:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80029f4:	2002      	movs	r0, #2
 80029f6:	f7fe fb11 	bl	800101c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 80029fa:	4b26      	ldr	r3, [pc, #152]	@ (8002a94 <AUDIO_PLAYER_Process+0x22c>)
 80029fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fece 	bl	80027a4 <AUDIO_PLAYER_Start>
    break;   
 8002a08:	e034      	b.n	8002a74 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8002a0a:	f7fe fadb 	bl	8000fc4 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8002a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002a80 <AUDIO_PLAYER_Process+0x218>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
    break;
 8002a14:	e02e      	b.n	8002a74 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 8002a16:	f7fe faeb 	bl	8000ff0 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 8002a1a:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <AUDIO_PLAYER_Process+0x218>)
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	701a      	strb	r2, [r3, #0]
    break;
 8002a20:	e028      	b.n	8002a74 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 8002a22:	4b1d      	ldr	r3, [pc, #116]	@ (8002a98 <AUDIO_PLAYER_Process+0x230>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b5a      	cmp	r3, #90	@ 0x5a
 8002a28:	d804      	bhi.n	8002a34 <AUDIO_PLAYER_Process+0x1cc>
    {
      uwVolume += 10;
 8002a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a98 <AUDIO_PLAYER_Process+0x230>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	330a      	adds	r3, #10
 8002a30:	4a19      	ldr	r2, [pc, #100]	@ (8002a98 <AUDIO_PLAYER_Process+0x230>)
 8002a32:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8002a34:	4b18      	ldr	r3, [pc, #96]	@ (8002a98 <AUDIO_PLAYER_Process+0x230>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe fb16 	bl	800106c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002a40:	4b0f      	ldr	r3, [pc, #60]	@ (8002a80 <AUDIO_PLAYER_Process+0x218>)
 8002a42:	2203      	movs	r2, #3
 8002a44:	701a      	strb	r2, [r3, #0]
    break;
 8002a46:	e015      	b.n	8002a74 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 8002a48:	4b13      	ldr	r3, [pc, #76]	@ (8002a98 <AUDIO_PLAYER_Process+0x230>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b09      	cmp	r3, #9
 8002a4e:	d904      	bls.n	8002a5a <AUDIO_PLAYER_Process+0x1f2>
    {
      uwVolume -= 10;
 8002a50:	4b11      	ldr	r3, [pc, #68]	@ (8002a98 <AUDIO_PLAYER_Process+0x230>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3b0a      	subs	r3, #10
 8002a56:	4a10      	ldr	r2, [pc, #64]	@ (8002a98 <AUDIO_PLAYER_Process+0x230>)
 8002a58:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a98 <AUDIO_PLAYER_Process+0x230>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe fb03 	bl	800106c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002a66:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <AUDIO_PLAYER_Process+0x218>)
 8002a68:	2203      	movs	r2, #3
 8002a6a:	701a      	strb	r2, [r3, #0]
    break;
 8002a6c:	e002      	b.n	8002a74 <AUDIO_PLAYER_Process+0x20c>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 8002a6e:	bf00      	nop
 8002a70:	e000      	b.n	8002a74 <AUDIO_PLAYER_Process+0x20c>
    break;
 8002a72:	bf00      	nop
  }
  return audio_error;
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd90      	pop	{r4, r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	200014a8 	.word	0x200014a8
 8002a84:	200004a0 	.word	0x200004a0
 8002a88:	20001888 	.word	0x20001888
 8002a8c:	200018b8 	.word	0x200018b8
 8002a90:	20000ca0 	.word	0x20000ca0
 8002a94:	200014aa 	.word	0x200014aa
 8002a98:	2000003c 	.word	0x2000003c

08002a9c <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002aa0:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d104      	bne.n	8002ab2 <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8002aa8:	4b05      	ldr	r3, [pc, #20]	@ (8002ac0 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8002aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aae:	2202      	movs	r2, #2
 8002ab0:	701a      	strb	r2, [r3, #0]
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	200014a8 	.word	0x200014a8
 8002ac0:	200004a0 	.word	0x200004a0

08002ac4 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002ac8:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d104      	bne.n	8002ada <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8002ad0:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8002ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
  }
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	200014a8 	.word	0x200014a8
 8002ae8:	200004a0 	.word	0x200004a0

08002aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002aec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b24 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002af0:	f7ff fe2e 	bl	8002750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002af4:	480c      	ldr	r0, [pc, #48]	@ (8002b28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002af6:	490d      	ldr	r1, [pc, #52]	@ (8002b2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002af8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002afc:	e002      	b.n	8002b04 <LoopCopyDataInit>

08002afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b02:	3304      	adds	r3, #4

08002b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b08:	d3f9      	bcc.n	8002afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b0c:	4c0a      	ldr	r4, [pc, #40]	@ (8002b38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b10:	e001      	b.n	8002b16 <LoopFillZerobss>

08002b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b14:	3204      	adds	r2, #4

08002b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b18:	d3fb      	bcc.n	8002b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b1a:	f011 fa39 	bl	8013f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b1e:	f7ff f9ab 	bl	8001e78 <main>
  bx  lr    
 8002b22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b2c:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8002b30:	08016474 	.word	0x08016474
  ldr r2, =_sbss
 8002b34:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8002b38:	200046f4 	.word	0x200046f4

08002b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b3c:	e7fe      	b.n	8002b3c <ADC_IRQHandler>
	...

08002b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b44:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <HAL_Init+0x40>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0d      	ldr	r2, [pc, #52]	@ (8002b80 <HAL_Init+0x40>)
 8002b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b50:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <HAL_Init+0x40>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a0a      	ldr	r2, [pc, #40]	@ (8002b80 <HAL_Init+0x40>)
 8002b56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b5c:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <HAL_Init+0x40>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a07      	ldr	r2, [pc, #28]	@ (8002b80 <HAL_Init+0x40>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b68:	2003      	movs	r0, #3
 8002b6a:	f000 f94f 	bl	8002e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b6e:	200f      	movs	r0, #15
 8002b70:	f000 f808 	bl	8002b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b74:	f7ff fb44 	bl	8002200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40023c00 	.word	0x40023c00

08002b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b8c:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <HAL_InitTick+0x54>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <HAL_InitTick+0x58>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	4619      	mov	r1, r3
 8002b96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f967 	bl	8002e76 <HAL_SYSTICK_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00e      	b.n	8002bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b0f      	cmp	r3, #15
 8002bb6:	d80a      	bhi.n	8002bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	f000 f92f 	bl	8002e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc4:	4a06      	ldr	r2, [pc, #24]	@ (8002be0 <HAL_InitTick+0x5c>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e000      	b.n	8002bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000038 	.word	0x20000038
 8002bdc:	20000044 	.word	0x20000044
 8002be0:	20000040 	.word	0x20000040

08002be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002be8:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <HAL_IncTick+0x20>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <HAL_IncTick+0x24>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	4a04      	ldr	r2, [pc, #16]	@ (8002c08 <HAL_IncTick+0x24>)
 8002bf6:	6013      	str	r3, [r2, #0]
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000044 	.word	0x20000044
 8002c08:	20002910 	.word	0x20002910

08002c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c10:	4b03      	ldr	r3, [pc, #12]	@ (8002c20 <HAL_GetTick+0x14>)
 8002c12:	681b      	ldr	r3, [r3, #0]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20002910 	.word	0x20002910

08002c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c2c:	f7ff ffee 	bl	8002c0c <HAL_GetTick>
 8002c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d005      	beq.n	8002c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <HAL_Delay+0x44>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4413      	add	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c4a:	bf00      	nop
 8002c4c:	f7ff ffde 	bl	8002c0c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d8f7      	bhi.n	8002c4c <HAL_Delay+0x28>
  {
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000044 	.word	0x20000044

08002c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c9e:	4a04      	ldr	r2, [pc, #16]	@ (8002cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	60d3      	str	r3, [r2, #12]
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb8:	4b04      	ldr	r3, [pc, #16]	@ (8002ccc <__NVIC_GetPriorityGrouping+0x18>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f003 0307 	and.w	r3, r3, #7
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	db0b      	blt.n	8002cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	f003 021f 	and.w	r2, r3, #31
 8002ce8:	4907      	ldr	r1, [pc, #28]	@ (8002d08 <__NVIC_EnableIRQ+0x38>)
 8002cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	e000e100 	.word	0xe000e100

08002d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	6039      	str	r1, [r7, #0]
 8002d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	db0a      	blt.n	8002d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	490c      	ldr	r1, [pc, #48]	@ (8002d58 <__NVIC_SetPriority+0x4c>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	0112      	lsls	r2, r2, #4
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d34:	e00a      	b.n	8002d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4908      	ldr	r1, [pc, #32]	@ (8002d5c <__NVIC_SetPriority+0x50>)
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	3b04      	subs	r3, #4
 8002d44:	0112      	lsls	r2, r2, #4
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	440b      	add	r3, r1
 8002d4a:	761a      	strb	r2, [r3, #24]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000e100 	.word	0xe000e100
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	@ 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f1c3 0307 	rsb	r3, r3, #7
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	bf28      	it	cs
 8002d7e:	2304      	movcs	r3, #4
 8002d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3304      	adds	r3, #4
 8002d86:	2b06      	cmp	r3, #6
 8002d88:	d902      	bls.n	8002d90 <NVIC_EncodePriority+0x30>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3b03      	subs	r3, #3
 8002d8e:	e000      	b.n	8002d92 <NVIC_EncodePriority+0x32>
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	401a      	ands	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	43d9      	mvns	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	4313      	orrs	r3, r2
         );
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3724      	adds	r7, #36	@ 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dd8:	d301      	bcc.n	8002dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e00f      	b.n	8002dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dde:	4a0a      	ldr	r2, [pc, #40]	@ (8002e08 <SysTick_Config+0x40>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de6:	210f      	movs	r1, #15
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dec:	f7ff ff8e 	bl	8002d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002df0:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <SysTick_Config+0x40>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df6:	4b04      	ldr	r3, [pc, #16]	@ (8002e08 <SysTick_Config+0x40>)
 8002df8:	2207      	movs	r2, #7
 8002dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	e000e010 	.word	0xe000e010

08002e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ff29 	bl	8002c6c <__NVIC_SetPriorityGrouping>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e34:	f7ff ff3e 	bl	8002cb4 <__NVIC_GetPriorityGrouping>
 8002e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	6978      	ldr	r0, [r7, #20]
 8002e40:	f7ff ff8e 	bl	8002d60 <NVIC_EncodePriority>
 8002e44:	4602      	mov	r2, r0
 8002e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff5d 	bl	8002d0c <__NVIC_SetPriority>
}
 8002e52:	bf00      	nop
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	4603      	mov	r3, r0
 8002e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff31 	bl	8002cd0 <__NVIC_EnableIRQ>
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff ffa2 	bl	8002dc8 <SysTick_Config>
 8002e84:	4603      	mov	r3, r0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e9c:	f7ff feb6 	bl	8002c0c <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e099      	b.n	8002fe0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ecc:	e00f      	b.n	8002eee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ece:	f7ff fe9d 	bl	8002c0c <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d908      	bls.n	8002eee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e078      	b.n	8002fe0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1e8      	bne.n	8002ece <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4b38      	ldr	r3, [pc, #224]	@ (8002fe8 <HAL_DMA_Init+0x158>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d107      	bne.n	8002f58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f50:	4313      	orrs	r3, r2
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f023 0307 	bic.w	r3, r3, #7
 8002f6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d117      	bne.n	8002fb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00e      	beq.n	8002fb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fb3d 	bl	8003614 <DMA_CheckFifoParam>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2240      	movs	r2, #64	@ 0x40
 8002fa4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e016      	b.n	8002fe0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 faf4 	bl	80035a8 <DMA_CalcBaseAndBitshift>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc8:	223f      	movs	r2, #63	@ 0x3f
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	f010803f 	.word	0xf010803f

08002fec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e050      	b.n	80030a0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d101      	bne.n	800300e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800300a:	2302      	movs	r3, #2
 800300c:	e048      	b.n	80030a0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0201 	bic.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2200      	movs	r2, #0
 800302c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2200      	movs	r2, #0
 800303c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2221      	movs	r2, #33	@ 0x21
 800304c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 faaa 	bl	80035a8 <DMA_CalcBaseAndBitshift>
 8003054:	4603      	mov	r3, r0
 8003056:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003080:	223f      	movs	r2, #63	@ 0x3f
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_DMA_Start_IT+0x26>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e040      	b.n	8003150 <HAL_DMA_Start_IT+0xa8>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d12f      	bne.n	8003142 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2202      	movs	r2, #2
 80030e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fa28 	bl	800354c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003100:	223f      	movs	r2, #63	@ 0x3f
 8003102:	409a      	lsls	r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0216 	orr.w	r2, r2, #22
 8003116:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0208 	orr.w	r2, r2, #8
 800312e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	e005      	b.n	800314e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800314a:	2302      	movs	r3, #2
 800314c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800314e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003164:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003166:	f7ff fd51 	bl	8002c0c <HAL_GetTick>
 800316a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d008      	beq.n	800318a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2280      	movs	r2, #128	@ 0x80
 800317c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e052      	b.n	8003230 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0216 	bic.w	r2, r2, #22
 8003198:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <HAL_DMA_Abort+0x62>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0208 	bic.w	r2, r2, #8
 80031c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0201 	bic.w	r2, r2, #1
 80031d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031da:	e013      	b.n	8003204 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031dc:	f7ff fd16 	bl	8002c0c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b05      	cmp	r3, #5
 80031e8:	d90c      	bls.n	8003204 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2203      	movs	r2, #3
 80031f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e015      	b.n	8003230 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e4      	bne.n	80031dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003216:	223f      	movs	r2, #63	@ 0x3f
 8003218:	409a      	lsls	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003244:	4b8e      	ldr	r3, [pc, #568]	@ (8003480 <HAL_DMA_IRQHandler+0x248>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a8e      	ldr	r2, [pc, #568]	@ (8003484 <HAL_DMA_IRQHandler+0x24c>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	0a9b      	lsrs	r3, r3, #10
 8003250:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003256:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003262:	2208      	movs	r2, #8
 8003264:	409a      	lsls	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01a      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d013      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0204 	bic.w	r2, r2, #4
 800328a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003290:	2208      	movs	r2, #8
 8003292:	409a      	lsls	r2, r3
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329c:	f043 0201 	orr.w	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a8:	2201      	movs	r2, #1
 80032aa:	409a      	lsls	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d012      	beq.n	80032da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	2201      	movs	r2, #1
 80032c8:	409a      	lsls	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d2:	f043 0202 	orr.w	r2, r3, #2
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032de:	2204      	movs	r2, #4
 80032e0:	409a      	lsls	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d012      	beq.n	8003310 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00b      	beq.n	8003310 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fc:	2204      	movs	r2, #4
 80032fe:	409a      	lsls	r2, r3
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003308:	f043 0204 	orr.w	r2, r3, #4
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003314:	2210      	movs	r2, #16
 8003316:	409a      	lsls	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d043      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d03c      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003332:	2210      	movs	r2, #16
 8003334:	409a      	lsls	r2, r3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d018      	beq.n	800337a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d108      	bne.n	8003368 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d024      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
 8003366:	e01f      	b.n	80033a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01b      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
 8003378:	e016      	b.n	80033a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d107      	bne.n	8003398 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0208 	bic.w	r2, r2, #8
 8003396:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ac:	2220      	movs	r2, #32
 80033ae:	409a      	lsls	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 808f 	beq.w	80034d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8087 	beq.w	80034d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ce:	2220      	movs	r2, #32
 80033d0:	409a      	lsls	r2, r3
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d136      	bne.n	8003450 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0216 	bic.w	r2, r2, #22
 80033f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003400:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d103      	bne.n	8003412 <HAL_DMA_IRQHandler+0x1da>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0208 	bic.w	r2, r2, #8
 8003420:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003426:	223f      	movs	r2, #63	@ 0x3f
 8003428:	409a      	lsls	r2, r3
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003442:	2b00      	cmp	r3, #0
 8003444:	d07e      	beq.n	8003544 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4798      	blx	r3
        }
        return;
 800344e:	e079      	b.n	8003544 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01d      	beq.n	800349a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10d      	bne.n	8003488 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003470:	2b00      	cmp	r3, #0
 8003472:	d031      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
 800347c:	e02c      	b.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
 800347e:	bf00      	nop
 8003480:	20000038 	.word	0x20000038
 8003484:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348c:	2b00      	cmp	r3, #0
 800348e:	d023      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
 8003498:	e01e      	b.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10f      	bne.n	80034c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0210 	bic.w	r2, r2, #16
 80034b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d032      	beq.n	8003546 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d022      	beq.n	8003532 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2205      	movs	r2, #5
 80034f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	3301      	adds	r3, #1
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	429a      	cmp	r2, r3
 800350e:	d307      	bcc.n	8003520 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f2      	bne.n	8003504 <HAL_DMA_IRQHandler+0x2cc>
 800351e:	e000      	b.n	8003522 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003520:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
 8003542:	e000      	b.n	8003546 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003544:	bf00      	nop
    }
  }
}
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003568:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b40      	cmp	r3, #64	@ 0x40
 8003578:	d108      	bne.n	800358c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800358a:	e007      	b.n	800359c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	60da      	str	r2, [r3, #12]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	3b10      	subs	r3, #16
 80035b8:	4a14      	ldr	r2, [pc, #80]	@ (800360c <DMA_CalcBaseAndBitshift+0x64>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035c2:	4a13      	ldr	r2, [pc, #76]	@ (8003610 <DMA_CalcBaseAndBitshift+0x68>)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d909      	bls.n	80035ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035de:	f023 0303 	bic.w	r3, r3, #3
 80035e2:	1d1a      	adds	r2, r3, #4
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80035e8:	e007      	b.n	80035fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035f2:	f023 0303 	bic.w	r3, r3, #3
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	aaaaaaab 	.word	0xaaaaaaab
 8003610:	08015c90 	.word	0x08015c90

08003614 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003624:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d11f      	bne.n	800366e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d856      	bhi.n	80036e2 <DMA_CheckFifoParam+0xce>
 8003634:	a201      	add	r2, pc, #4	@ (adr r2, 800363c <DMA_CheckFifoParam+0x28>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	0800364d 	.word	0x0800364d
 8003640:	0800365f 	.word	0x0800365f
 8003644:	0800364d 	.word	0x0800364d
 8003648:	080036e3 	.word	0x080036e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003650:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d046      	beq.n	80036e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800365c:	e043      	b.n	80036e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003662:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003666:	d140      	bne.n	80036ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366c:	e03d      	b.n	80036ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003676:	d121      	bne.n	80036bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b03      	cmp	r3, #3
 800367c:	d837      	bhi.n	80036ee <DMA_CheckFifoParam+0xda>
 800367e:	a201      	add	r2, pc, #4	@ (adr r2, 8003684 <DMA_CheckFifoParam+0x70>)
 8003680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003684:	08003695 	.word	0x08003695
 8003688:	0800369b 	.word	0x0800369b
 800368c:	08003695 	.word	0x08003695
 8003690:	080036ad 	.word	0x080036ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
      break;
 8003698:	e030      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d025      	beq.n	80036f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036aa:	e022      	b.n	80036f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036b4:	d11f      	bne.n	80036f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036ba:	e01c      	b.n	80036f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d903      	bls.n	80036ca <DMA_CheckFifoParam+0xb6>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d003      	beq.n	80036d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036c8:	e018      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
      break;
 80036ce:	e015      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00e      	beq.n	80036fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
      break;
 80036e0:	e00b      	b.n	80036fa <DMA_CheckFifoParam+0xe6>
      break;
 80036e2:	bf00      	nop
 80036e4:	e00a      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;
 80036e6:	bf00      	nop
 80036e8:	e008      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;
 80036ea:	bf00      	nop
 80036ec:	e006      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;
 80036ee:	bf00      	nop
 80036f0:	e004      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;
 80036f2:	bf00      	nop
 80036f4:	e002      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;   
 80036f6:	bf00      	nop
 80036f8:	e000      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;
 80036fa:	bf00      	nop
    }
  } 
  
  return status; 
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop

0800370c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	@ 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	e16b      	b.n	8003a00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003728:	2201      	movs	r2, #1
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4013      	ands	r3, r2
 800373a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	429a      	cmp	r2, r3
 8003742:	f040 815a 	bne.w	80039fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b01      	cmp	r3, #1
 8003750:	d005      	beq.n	800375e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800375a:	2b02      	cmp	r3, #2
 800375c:	d130      	bne.n	80037c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	2203      	movs	r2, #3
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4313      	orrs	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003794:	2201      	movs	r2, #1
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 0201 	and.w	r2, r3, #1
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d017      	beq.n	80037fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	2203      	movs	r2, #3
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d123      	bne.n	8003850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	08da      	lsrs	r2, r3, #3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3208      	adds	r2, #8
 8003810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	220f      	movs	r2, #15
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	08da      	lsrs	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3208      	adds	r2, #8
 800384a:	69b9      	ldr	r1, [r7, #24]
 800384c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	2203      	movs	r2, #3
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0203 	and.w	r2, r3, #3
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80b4 	beq.w	80039fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	4b60      	ldr	r3, [pc, #384]	@ (8003a18 <HAL_GPIO_Init+0x30c>)
 8003898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389a:	4a5f      	ldr	r2, [pc, #380]	@ (8003a18 <HAL_GPIO_Init+0x30c>)
 800389c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80038a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003a18 <HAL_GPIO_Init+0x30c>)
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038ae:	4a5b      	ldr	r2, [pc, #364]	@ (8003a1c <HAL_GPIO_Init+0x310>)
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	3302      	adds	r3, #2
 80038b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	220f      	movs	r2, #15
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a52      	ldr	r2, [pc, #328]	@ (8003a20 <HAL_GPIO_Init+0x314>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d02b      	beq.n	8003932 <HAL_GPIO_Init+0x226>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a51      	ldr	r2, [pc, #324]	@ (8003a24 <HAL_GPIO_Init+0x318>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d025      	beq.n	800392e <HAL_GPIO_Init+0x222>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a50      	ldr	r2, [pc, #320]	@ (8003a28 <HAL_GPIO_Init+0x31c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01f      	beq.n	800392a <HAL_GPIO_Init+0x21e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a4f      	ldr	r2, [pc, #316]	@ (8003a2c <HAL_GPIO_Init+0x320>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d019      	beq.n	8003926 <HAL_GPIO_Init+0x21a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a4e      	ldr	r2, [pc, #312]	@ (8003a30 <HAL_GPIO_Init+0x324>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <HAL_GPIO_Init+0x216>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a4d      	ldr	r2, [pc, #308]	@ (8003a34 <HAL_GPIO_Init+0x328>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00d      	beq.n	800391e <HAL_GPIO_Init+0x212>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a4c      	ldr	r2, [pc, #304]	@ (8003a38 <HAL_GPIO_Init+0x32c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d007      	beq.n	800391a <HAL_GPIO_Init+0x20e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a4b      	ldr	r2, [pc, #300]	@ (8003a3c <HAL_GPIO_Init+0x330>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d101      	bne.n	8003916 <HAL_GPIO_Init+0x20a>
 8003912:	2307      	movs	r3, #7
 8003914:	e00e      	b.n	8003934 <HAL_GPIO_Init+0x228>
 8003916:	2308      	movs	r3, #8
 8003918:	e00c      	b.n	8003934 <HAL_GPIO_Init+0x228>
 800391a:	2306      	movs	r3, #6
 800391c:	e00a      	b.n	8003934 <HAL_GPIO_Init+0x228>
 800391e:	2305      	movs	r3, #5
 8003920:	e008      	b.n	8003934 <HAL_GPIO_Init+0x228>
 8003922:	2304      	movs	r3, #4
 8003924:	e006      	b.n	8003934 <HAL_GPIO_Init+0x228>
 8003926:	2303      	movs	r3, #3
 8003928:	e004      	b.n	8003934 <HAL_GPIO_Init+0x228>
 800392a:	2302      	movs	r3, #2
 800392c:	e002      	b.n	8003934 <HAL_GPIO_Init+0x228>
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <HAL_GPIO_Init+0x228>
 8003932:	2300      	movs	r3, #0
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	f002 0203 	and.w	r2, r2, #3
 800393a:	0092      	lsls	r2, r2, #2
 800393c:	4093      	lsls	r3, r2
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003944:	4935      	ldr	r1, [pc, #212]	@ (8003a1c <HAL_GPIO_Init+0x310>)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	089b      	lsrs	r3, r3, #2
 800394a:	3302      	adds	r3, #2
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003952:	4b3b      	ldr	r3, [pc, #236]	@ (8003a40 <HAL_GPIO_Init+0x334>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	43db      	mvns	r3, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4013      	ands	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003976:	4a32      	ldr	r2, [pc, #200]	@ (8003a40 <HAL_GPIO_Init+0x334>)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800397c:	4b30      	ldr	r3, [pc, #192]	@ (8003a40 <HAL_GPIO_Init+0x334>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039a0:	4a27      	ldr	r2, [pc, #156]	@ (8003a40 <HAL_GPIO_Init+0x334>)
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039a6:	4b26      	ldr	r3, [pc, #152]	@ (8003a40 <HAL_GPIO_Init+0x334>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	43db      	mvns	r3, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4013      	ands	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003a40 <HAL_GPIO_Init+0x334>)
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a40 <HAL_GPIO_Init+0x334>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039f4:	4a12      	ldr	r2, [pc, #72]	@ (8003a40 <HAL_GPIO_Init+0x334>)
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3301      	adds	r3, #1
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	2b0f      	cmp	r3, #15
 8003a04:	f67f ae90 	bls.w	8003728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	3724      	adds	r7, #36	@ 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40013800 	.word	0x40013800
 8003a20:	40020000 	.word	0x40020000
 8003a24:	40020400 	.word	0x40020400
 8003a28:	40020800 	.word	0x40020800
 8003a2c:	40020c00 	.word	0x40020c00
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40021400 	.word	0x40021400
 8003a38:	40021800 	.word	0x40021800
 8003a3c:	40021c00 	.word	0x40021c00
 8003a40:	40013c00 	.word	0x40013c00

08003a44 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	e0cd      	b.n	8003bfc <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a60:	2201      	movs	r2, #1
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	f040 80bd 	bne.w	8003bf6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003a7c:	4a65      	ldr	r2, [pc, #404]	@ (8003c14 <HAL_GPIO_DeInit+0x1d0>)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	089b      	lsrs	r3, r3, #2
 8003a82:	3302      	adds	r3, #2
 8003a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a88:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	220f      	movs	r2, #15
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a5d      	ldr	r2, [pc, #372]	@ (8003c18 <HAL_GPIO_DeInit+0x1d4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d02b      	beq.n	8003afe <HAL_GPIO_DeInit+0xba>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a5c      	ldr	r2, [pc, #368]	@ (8003c1c <HAL_GPIO_DeInit+0x1d8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d025      	beq.n	8003afa <HAL_GPIO_DeInit+0xb6>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a5b      	ldr	r2, [pc, #364]	@ (8003c20 <HAL_GPIO_DeInit+0x1dc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d01f      	beq.n	8003af6 <HAL_GPIO_DeInit+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a5a      	ldr	r2, [pc, #360]	@ (8003c24 <HAL_GPIO_DeInit+0x1e0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d019      	beq.n	8003af2 <HAL_GPIO_DeInit+0xae>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a59      	ldr	r2, [pc, #356]	@ (8003c28 <HAL_GPIO_DeInit+0x1e4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d013      	beq.n	8003aee <HAL_GPIO_DeInit+0xaa>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a58      	ldr	r2, [pc, #352]	@ (8003c2c <HAL_GPIO_DeInit+0x1e8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00d      	beq.n	8003aea <HAL_GPIO_DeInit+0xa6>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a57      	ldr	r2, [pc, #348]	@ (8003c30 <HAL_GPIO_DeInit+0x1ec>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d007      	beq.n	8003ae6 <HAL_GPIO_DeInit+0xa2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a56      	ldr	r2, [pc, #344]	@ (8003c34 <HAL_GPIO_DeInit+0x1f0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d101      	bne.n	8003ae2 <HAL_GPIO_DeInit+0x9e>
 8003ade:	2307      	movs	r3, #7
 8003ae0:	e00e      	b.n	8003b00 <HAL_GPIO_DeInit+0xbc>
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	e00c      	b.n	8003b00 <HAL_GPIO_DeInit+0xbc>
 8003ae6:	2306      	movs	r3, #6
 8003ae8:	e00a      	b.n	8003b00 <HAL_GPIO_DeInit+0xbc>
 8003aea:	2305      	movs	r3, #5
 8003aec:	e008      	b.n	8003b00 <HAL_GPIO_DeInit+0xbc>
 8003aee:	2304      	movs	r3, #4
 8003af0:	e006      	b.n	8003b00 <HAL_GPIO_DeInit+0xbc>
 8003af2:	2303      	movs	r3, #3
 8003af4:	e004      	b.n	8003b00 <HAL_GPIO_DeInit+0xbc>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e002      	b.n	8003b00 <HAL_GPIO_DeInit+0xbc>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <HAL_GPIO_DeInit+0xbc>
 8003afe:	2300      	movs	r3, #0
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	f002 0203 	and.w	r2, r2, #3
 8003b06:	0092      	lsls	r2, r2, #2
 8003b08:	4093      	lsls	r3, r2
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d132      	bne.n	8003b76 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003b10:	4b49      	ldr	r3, [pc, #292]	@ (8003c38 <HAL_GPIO_DeInit+0x1f4>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	43db      	mvns	r3, r3
 8003b18:	4947      	ldr	r1, [pc, #284]	@ (8003c38 <HAL_GPIO_DeInit+0x1f4>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003b1e:	4b46      	ldr	r3, [pc, #280]	@ (8003c38 <HAL_GPIO_DeInit+0x1f4>)
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	4944      	ldr	r1, [pc, #272]	@ (8003c38 <HAL_GPIO_DeInit+0x1f4>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003b2c:	4b42      	ldr	r3, [pc, #264]	@ (8003c38 <HAL_GPIO_DeInit+0x1f4>)
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	43db      	mvns	r3, r3
 8003b34:	4940      	ldr	r1, [pc, #256]	@ (8003c38 <HAL_GPIO_DeInit+0x1f4>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003b3a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c38 <HAL_GPIO_DeInit+0x1f4>)
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	493d      	ldr	r1, [pc, #244]	@ (8003c38 <HAL_GPIO_DeInit+0x1f4>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003b58:	4a2e      	ldr	r2, [pc, #184]	@ (8003c14 <HAL_GPIO_DeInit+0x1d0>)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	089b      	lsrs	r3, r3, #2
 8003b5e:	3302      	adds	r3, #2
 8003b60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	43da      	mvns	r2, r3
 8003b68:	482a      	ldr	r0, [pc, #168]	@ (8003c14 <HAL_GPIO_DeInit+0x1d0>)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	089b      	lsrs	r3, r3, #2
 8003b6e:	400a      	ands	r2, r1
 8003b70:	3302      	adds	r3, #2
 8003b72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	2103      	movs	r1, #3
 8003b80:	fa01 f303 	lsl.w	r3, r1, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	401a      	ands	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	08da      	lsrs	r2, r3, #3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3208      	adds	r2, #8
 8003b94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	220f      	movs	r2, #15
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	08d2      	lsrs	r2, r2, #3
 8003bac:	4019      	ands	r1, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3208      	adds	r2, #8
 8003bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	2103      	movs	r1, #3
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	401a      	ands	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	401a      	ands	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	2103      	movs	r1, #3
 8003bea:	fa01 f303 	lsl.w	r3, r1, r3
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	401a      	ands	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2b0f      	cmp	r3, #15
 8003c00:	f67f af2e 	bls.w	8003a60 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40013800 	.word	0x40013800
 8003c18:	40020000 	.word	0x40020000
 8003c1c:	40020400 	.word	0x40020400
 8003c20:	40020800 	.word	0x40020800
 8003c24:	40020c00 	.word	0x40020c00
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40021400 	.word	0x40021400
 8003c30:	40021800 	.word	0x40021800
 8003c34:	40021c00 	.word	0x40021c00
 8003c38:	40013c00 	.word	0x40013c00

08003c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	807b      	strh	r3, [r7, #2]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c4c:	787b      	ldrb	r3, [r7, #1]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c52:	887a      	ldrh	r2, [r7, #2]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c58:	e003      	b.n	8003c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c5a:	887b      	ldrh	r3, [r7, #2]
 8003c5c:	041a      	lsls	r2, r3, #16
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	619a      	str	r2, [r3, #24]
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c7a:	4b08      	ldr	r3, [pc, #32]	@ (8003c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	88fb      	ldrh	r3, [r7, #6]
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d006      	beq.n	8003c94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c86:	4a05      	ldr	r2, [pc, #20]	@ (8003c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c88:	88fb      	ldrh	r3, [r7, #6]
 8003c8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c8c:	88fb      	ldrh	r3, [r7, #6]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe f8d4 	bl	8001e3c <HAL_GPIO_EXTI_Callback>
  }
}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40013c00 	.word	0x40013c00

08003ca0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e059      	b.n	8003d66 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f00e ffe7 	bl	8012ca0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ce0:	d102      	bne.n	8003ce8 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f005 fb26 	bl	800933e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	7c1a      	ldrb	r2, [r3, #16]
 8003cfa:	f88d 2000 	strb.w	r2, [sp]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d02:	f005 faa7 	bl	8009254 <USB_CoreInit>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e026      	b.n	8003d66 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f005 fb1e 	bl	8009360 <USB_SetCurrentMode>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e017      	b.n	8003d66 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	7c1a      	ldrb	r2, [r3, #16]
 8003d3e:	f88d 2000 	strb.w	r2, [sp]
 8003d42:	3304      	adds	r3, #4
 8003d44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d46:	f005 fcc7 	bl	80096d8 <USB_HostInit>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e004      	b.n	8003d66 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003d6e:	b590      	push	{r4, r7, lr}
 8003d70:	b08b      	sub	sp, #44	@ 0x2c
 8003d72:	af04      	add	r7, sp, #16
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	4608      	mov	r0, r1
 8003d78:	4611      	mov	r1, r2
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	70fb      	strb	r3, [r7, #3]
 8003d80:	460b      	mov	r3, r1
 8003d82:	70bb      	strb	r3, [r7, #2]
 8003d84:	4613      	mov	r3, r2
 8003d86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003d88:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003d8a:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_HCD_HC_Init+0x2c>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e09d      	b.n	8003ed6 <HAL_HCD_HC_Init+0x168>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	3319      	adds	r3, #25
 8003db2:	2200      	movs	r2, #0
 8003db4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	787a      	ldrb	r2, [r7, #1]
 8003dc8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3315      	adds	r3, #21
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	3326      	adds	r3, #38	@ 0x26
 8003dee:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003df2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	78bb      	ldrb	r3, [r7, #2]
 8003df8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dfc:	b2d8      	uxtb	r0, r3
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	3316      	adds	r3, #22
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	4619      	mov	r1, r3
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fba5 	bl	8004564 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003e1a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	da0a      	bge.n	8003e38 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	3317      	adds	r3, #23
 8003e32:	2201      	movs	r2, #1
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	e009      	b.n	8003e4c <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	3317      	adds	r3, #23
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f005 fda5 	bl	80099a0 <USB_GetHostSpeed>
 8003e56:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003e58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d10b      	bne.n	8003e78 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003e60:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d107      	bne.n	8003e78 <HAL_HCD_HC_Init+0x10a>
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d104      	bne.n	8003e78 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2bbc      	cmp	r3, #188	@ 0xbc
 8003e72:	d901      	bls.n	8003e78 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003e74:	23bc      	movs	r3, #188	@ 0xbc
 8003e76:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003e78:	78fa      	ldrb	r2, [r7, #3]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	3318      	adds	r3, #24
 8003e88:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003e8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	b298      	uxth	r0, r3
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	3328      	adds	r3, #40	@ 0x28
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	787c      	ldrb	r4, [r7, #1]
 8003eb0:	78ba      	ldrb	r2, [r7, #2]
 8003eb2:	78f9      	ldrb	r1, [r7, #3]
 8003eb4:	9302      	str	r3, [sp, #8]
 8003eb6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003eba:	9301      	str	r3, [sp, #4]
 8003ebc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	f005 fd94 	bl	80099f0 <USB_HC_Init>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	371c      	adds	r7, #28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd90      	pop	{r4, r7, pc}
	...

08003ee0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	4608      	mov	r0, r1
 8003eea:	4611      	mov	r1, r2
 8003eec:	461a      	mov	r2, r3
 8003eee:	4603      	mov	r3, r0
 8003ef0:	70fb      	strb	r3, [r7, #3]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	70bb      	strb	r3, [r7, #2]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003efa:	78fa      	ldrb	r2, [r7, #3]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	3317      	adds	r3, #23
 8003f0a:	78ba      	ldrb	r2, [r7, #2]
 8003f0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3326      	adds	r3, #38	@ 0x26
 8003f1e:	787a      	ldrb	r2, [r7, #1]
 8003f20:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003f22:	7c3b      	ldrb	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d114      	bne.n	8003f52 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	332a      	adds	r3, #42	@ 0x2a
 8003f38:	2203      	movs	r2, #3
 8003f3a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	3319      	adds	r3, #25
 8003f4c:	7f3a      	ldrb	r2, [r7, #28]
 8003f4e:	701a      	strb	r2, [r3, #0]
 8003f50:	e009      	b.n	8003f66 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	332a      	adds	r3, #42	@ 0x2a
 8003f62:	2202      	movs	r2, #2
 8003f64:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003f66:	787b      	ldrb	r3, [r7, #1]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	f200 8102 	bhi.w	8004172 <HAL_HCD_HC_SubmitRequest+0x292>
 8003f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f74 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f74:	08003f85 	.word	0x08003f85
 8003f78:	0800415d 	.word	0x0800415d
 8003f7c:	08004049 	.word	0x08004049
 8003f80:	080040d3 	.word	0x080040d3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003f84:	7c3b      	ldrb	r3, [r7, #16]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	f040 80f5 	bne.w	8004176 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003f8c:	78bb      	ldrb	r3, [r7, #2]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d12d      	bne.n	8003fee <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003f92:	8b3b      	ldrh	r3, [r7, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d109      	bne.n	8003fac <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	333d      	adds	r3, #61	@ 0x3d
 8003fa8:	2201      	movs	r2, #1
 8003faa:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003fac:	78fa      	ldrb	r2, [r7, #3]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	333d      	adds	r3, #61	@ 0x3d
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	332a      	adds	r3, #42	@ 0x2a
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003fd6:	e0ce      	b.n	8004176 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fd8:	78fa      	ldrb	r2, [r7, #3]
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	332a      	adds	r3, #42	@ 0x2a
 8003fe8:	2202      	movs	r2, #2
 8003fea:	701a      	strb	r2, [r3, #0]
      break;
 8003fec:	e0c3      	b.n	8004176 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	331a      	adds	r3, #26
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	f040 80b8 	bne.w	8004176 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004006:	78fa      	ldrb	r2, [r7, #3]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	333c      	adds	r3, #60	@ 0x3c
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10a      	bne.n	8004032 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800401c:	78fa      	ldrb	r2, [r7, #3]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	332a      	adds	r3, #42	@ 0x2a
 800402c:	2200      	movs	r2, #0
 800402e:	701a      	strb	r2, [r3, #0]
      break;
 8004030:	e0a1      	b.n	8004176 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	332a      	adds	r3, #42	@ 0x2a
 8004042:	2202      	movs	r2, #2
 8004044:	701a      	strb	r2, [r3, #0]
      break;
 8004046:	e096      	b.n	8004176 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004048:	78bb      	ldrb	r3, [r7, #2]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d120      	bne.n	8004090 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	333d      	adds	r3, #61	@ 0x3d
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	332a      	adds	r3, #42	@ 0x2a
 8004074:	2200      	movs	r2, #0
 8004076:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004078:	e07e      	b.n	8004178 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	332a      	adds	r3, #42	@ 0x2a
 800408a:	2202      	movs	r2, #2
 800408c:	701a      	strb	r2, [r3, #0]
      break;
 800408e:	e073      	b.n	8004178 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004090:	78fa      	ldrb	r2, [r7, #3]
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	333c      	adds	r3, #60	@ 0x3c
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040a6:	78fa      	ldrb	r2, [r7, #3]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	332a      	adds	r3, #42	@ 0x2a
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]
      break;
 80040ba:	e05d      	b.n	8004178 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040bc:	78fa      	ldrb	r2, [r7, #3]
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	1a9b      	subs	r3, r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	332a      	adds	r3, #42	@ 0x2a
 80040cc:	2202      	movs	r2, #2
 80040ce:	701a      	strb	r2, [r3, #0]
      break;
 80040d0:	e052      	b.n	8004178 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80040d2:	78bb      	ldrb	r3, [r7, #2]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d120      	bne.n	800411a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80040d8:	78fa      	ldrb	r2, [r7, #3]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	333d      	adds	r3, #61	@ 0x3d
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	332a      	adds	r3, #42	@ 0x2a
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004102:	e039      	b.n	8004178 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004104:	78fa      	ldrb	r2, [r7, #3]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	332a      	adds	r3, #42	@ 0x2a
 8004114:	2202      	movs	r2, #2
 8004116:	701a      	strb	r2, [r3, #0]
      break;
 8004118:	e02e      	b.n	8004178 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	333c      	adds	r3, #60	@ 0x3c
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	332a      	adds	r3, #42	@ 0x2a
 8004140:	2200      	movs	r2, #0
 8004142:	701a      	strb	r2, [r3, #0]
      break;
 8004144:	e018      	b.n	8004178 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	332a      	adds	r3, #42	@ 0x2a
 8004156:	2202      	movs	r2, #2
 8004158:	701a      	strb	r2, [r3, #0]
      break;
 800415a:	e00d      	b.n	8004178 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	332a      	adds	r3, #42	@ 0x2a
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
      break;
 8004170:	e002      	b.n	8004178 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004172:	bf00      	nop
 8004174:	e000      	b.n	8004178 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004176:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004178:	78fa      	ldrb	r2, [r7, #3]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	332c      	adds	r3, #44	@ 0x2c
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800418c:	78fa      	ldrb	r2, [r7, #3]
 800418e:	8b39      	ldrh	r1, [r7, #24]
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4403      	add	r3, r0
 800419c:	3334      	adds	r3, #52	@ 0x34
 800419e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	4613      	mov	r3, r2
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	334c      	adds	r3, #76	@ 0x4c
 80041b0:	2200      	movs	r2, #0
 80041b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80041b4:	78fa      	ldrb	r2, [r7, #3]
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	4613      	mov	r3, r2
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	1a9b      	subs	r3, r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	3338      	adds	r3, #56	@ 0x38
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80041c8:	78fa      	ldrb	r2, [r7, #3]
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	4613      	mov	r3, r2
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	1a9b      	subs	r3, r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	3315      	adds	r3, #21
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80041dc:	78fa      	ldrb	r2, [r7, #3]
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	4613      	mov	r3, r2
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	1a9b      	subs	r3, r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	334d      	adds	r3, #77	@ 0x4d
 80041ec:	2200      	movs	r2, #0
 80041ee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	78fa      	ldrb	r2, [r7, #3]
 80041f6:	4613      	mov	r3, r2
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	3310      	adds	r3, #16
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	4413      	add	r3, r2
 8004204:	1d19      	adds	r1, r3, #4
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	799b      	ldrb	r3, [r3, #6]
 800420a:	461a      	mov	r2, r3
 800420c:	f005 fd1c 	bl	8009c48 <USB_HC_StartXfer>
 8004210:	4603      	mov	r3, r0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop

0800421c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f005 fa0a 	bl	800964c <USB_GetMode>
 8004238:	4603      	mov	r3, r0
 800423a:	2b01      	cmp	r3, #1
 800423c:	f040 80fb 	bne.w	8004436 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f005 f9cd 	bl	80095e4 <USB_ReadInterrupts>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80f1 	beq.w	8004434 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f005 f9c4 	bl	80095e4 <USB_ReadInterrupts>
 800425c:	4603      	mov	r3, r0
 800425e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004262:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004266:	d104      	bne.n	8004272 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004270:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f005 f9b4 	bl	80095e4 <USB_ReadInterrupts>
 800427c:	4603      	mov	r3, r0
 800427e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004286:	d104      	bne.n	8004292 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004290:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f005 f9a4 	bl	80095e4 <USB_ReadInterrupts>
 800429c:	4603      	mov	r3, r0
 800429e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042a6:	d104      	bne.n	80042b2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80042b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f005 f994 	bl	80095e4 <USB_ReadInterrupts>
 80042bc:	4603      	mov	r3, r0
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d103      	bne.n	80042ce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2202      	movs	r2, #2
 80042cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f005 f986 	bl	80095e4 <USB_ReadInterrupts>
 80042d8:	4603      	mov	r3, r0
 80042da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042e2:	d120      	bne.n	8004326 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80042ec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d113      	bne.n	8004326 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80042fe:	2110      	movs	r1, #16
 8004300:	6938      	ldr	r0, [r7, #16]
 8004302:	f005 f879 	bl	80093f8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004306:	6938      	ldr	r0, [r7, #16]
 8004308:	f005 f8a8 	bl	800945c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	7a5b      	ldrb	r3, [r3, #9]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d105      	bne.n	8004320 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2101      	movs	r1, #1
 800431a:	4618      	mov	r0, r3
 800431c:	f005 faa0 	bl	8009860 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f00e fd3b 	bl	8012d9c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f005 f95a 	bl	80095e4 <USB_ReadInterrupts>
 8004330:	4603      	mov	r3, r0
 8004332:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004336:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800433a:	d102      	bne.n	8004342 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f001 fd4d 	bl	8005ddc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f005 f94c 	bl	80095e4 <USB_ReadInterrupts>
 800434c:	4603      	mov	r3, r0
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b08      	cmp	r3, #8
 8004354:	d106      	bne.n	8004364 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f00e fd04 	bl	8012d64 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2208      	movs	r2, #8
 8004362:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f005 f93b 	bl	80095e4 <USB_ReadInterrupts>
 800436e:	4603      	mov	r3, r0
 8004370:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004374:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004378:	d139      	bne.n	80043ee <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f005 fedc 	bl	800a13c <USB_HC_ReadInterrupt>
 8004384:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	e025      	b.n	80043d8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d018      	beq.n	80043d2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043b6:	d106      	bne.n	80043c6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	4619      	mov	r1, r3
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f905 	bl	80045ce <HCD_HC_IN_IRQHandler>
 80043c4:	e005      	b.n	80043d2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	4619      	mov	r1, r3
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 ff67 	bl	80052a0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	3301      	adds	r3, #1
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	795b      	ldrb	r3, [r3, #5]
 80043dc:	461a      	mov	r2, r3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d3d3      	bcc.n	800438c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f005 f8f6 	bl	80095e4 <USB_ReadInterrupts>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f003 0310 	and.w	r3, r3, #16
 80043fe:	2b10      	cmp	r3, #16
 8004400:	d101      	bne.n	8004406 <HAL_HCD_IRQHandler+0x1ea>
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <HAL_HCD_IRQHandler+0x1ec>
 8004406:	2300      	movs	r3, #0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d014      	beq.n	8004436 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0210 	bic.w	r2, r2, #16
 800441a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f001 fbfe 	bl	8005c1e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699a      	ldr	r2, [r3, #24]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0210 	orr.w	r2, r2, #16
 8004430:	619a      	str	r2, [r3, #24]
 8004432:	e000      	b.n	8004436 <HAL_HCD_IRQHandler+0x21a>
      return;
 8004434:	bf00      	nop
    }
  }
}
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_HCD_Start+0x16>
 800444e:	2302      	movs	r3, #2
 8004450:	e013      	b.n	800447a <HAL_HCD_Start+0x3e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2101      	movs	r1, #1
 8004460:	4618      	mov	r0, r3
 8004462:	f005 fa64 	bl	800992e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f004 ff56 	bl	800931c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_HCD_Stop+0x16>
 8004494:	2302      	movs	r3, #2
 8004496:	e00d      	b.n	80044b4 <HAL_HCD_Stop+0x32>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f005 ffb7 	bl	800a418 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f005 fa06 	bl	80098da <USB_ResetPort>
 80044ce:	4603      	mov	r3, r0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	460b      	mov	r3, r1
 80044e2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	334c      	adds	r3, #76	@ 0x4c
 80044f4:	781b      	ldrb	r3, [r3, #0]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	460b      	mov	r3, r1
 800450c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800450e:	78fa      	ldrb	r2, [r7, #3]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	1a9b      	subs	r3, r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	3338      	adds	r3, #56	@ 0x38
 800451e:	681b      	ldr	r3, [r3, #0]
}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f005 fa48 	bl	80099ce <USB_GetCurrentFrame>
 800453e:	4603      	mov	r3, r0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f005 fa23 	bl	80099a0 <USB_GetHostSpeed>
 800455a:	4603      	mov	r3, r0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	331a      	adds	r3, #26
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004584:	78fa      	ldrb	r2, [r7, #3]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	331b      	adds	r3, #27
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	3325      	adds	r3, #37	@ 0x25
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	3324      	adds	r3, #36	@ 0x24
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b086      	sub	sp, #24
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	460b      	mov	r3, r1
 80045d8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	4611      	mov	r1, r2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f005 f80c 	bl	800960a <USB_ReadChInterrupts>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d11a      	bne.n	8004632 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4413      	add	r3, r2
 8004604:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004608:	461a      	mov	r2, r3
 800460a:	2304      	movs	r3, #4
 800460c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	334d      	adds	r3, #77	@ 0x4d
 800461e:	2207      	movs	r2, #7
 8004620:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	78fa      	ldrb	r2, [r7, #3]
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f005 fd97 	bl	800a15e <USB_HC_Halt>
 8004630:	e09e      	b.n	8004770 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	4611      	mov	r1, r2
 800463a:	4618      	mov	r0, r3
 800463c:	f004 ffe5 	bl	800960a <USB_ReadChInterrupts>
 8004640:	4603      	mov	r3, r0
 8004642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800464a:	d11b      	bne.n	8004684 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	4413      	add	r3, r2
 8004654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004658:	461a      	mov	r2, r3
 800465a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800465e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	334d      	adds	r3, #77	@ 0x4d
 8004670:	2208      	movs	r2, #8
 8004672:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	4611      	mov	r1, r2
 800467c:	4618      	mov	r0, r3
 800467e:	f005 fd6e 	bl	800a15e <USB_HC_Halt>
 8004682:	e075      	b.n	8004770 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	4611      	mov	r1, r2
 800468c:	4618      	mov	r0, r3
 800468e:	f004 ffbc 	bl	800960a <USB_ReadChInterrupts>
 8004692:	4603      	mov	r3, r0
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b08      	cmp	r3, #8
 800469a:	d11a      	bne.n	80046d2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046a8:	461a      	mov	r2, r3
 80046aa:	2308      	movs	r3, #8
 80046ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80046ae:	78fa      	ldrb	r2, [r7, #3]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	334d      	adds	r3, #77	@ 0x4d
 80046be:	2206      	movs	r2, #6
 80046c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	4611      	mov	r1, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f005 fd47 	bl	800a15e <USB_HC_Halt>
 80046d0:	e04e      	b.n	8004770 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	4611      	mov	r1, r2
 80046da:	4618      	mov	r0, r3
 80046dc:	f004 ff95 	bl	800960a <USB_ReadChInterrupts>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ea:	d11b      	bne.n	8004724 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046f8:	461a      	mov	r2, r3
 80046fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	334d      	adds	r3, #77	@ 0x4d
 8004710:	2209      	movs	r2, #9
 8004712:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	78fa      	ldrb	r2, [r7, #3]
 800471a:	4611      	mov	r1, r2
 800471c:	4618      	mov	r0, r3
 800471e:	f005 fd1e 	bl	800a15e <USB_HC_Halt>
 8004722:	e025      	b.n	8004770 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	4611      	mov	r1, r2
 800472c:	4618      	mov	r0, r3
 800472e:	f004 ff6c 	bl	800960a <USB_ReadChInterrupts>
 8004732:	4603      	mov	r3, r0
 8004734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004738:	2b80      	cmp	r3, #128	@ 0x80
 800473a:	d119      	bne.n	8004770 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800473c:	78fb      	ldrb	r3, [r7, #3]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4413      	add	r3, r2
 8004744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004748:	461a      	mov	r2, r3
 800474a:	2380      	movs	r3, #128	@ 0x80
 800474c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	334d      	adds	r3, #77	@ 0x4d
 800475e:	2207      	movs	r2, #7
 8004760:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	78fa      	ldrb	r2, [r7, #3]
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f005 fcf7 	bl	800a15e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	78fa      	ldrb	r2, [r7, #3]
 8004776:	4611      	mov	r1, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f004 ff46 	bl	800960a <USB_ReadChInterrupts>
 800477e:	4603      	mov	r3, r0
 8004780:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004788:	d112      	bne.n	80047b0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	4611      	mov	r1, r2
 8004792:	4618      	mov	r0, r3
 8004794:	f005 fce3 	bl	800a15e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004798:	78fb      	ldrb	r3, [r7, #3]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047a4:	461a      	mov	r2, r3
 80047a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047aa:	6093      	str	r3, [r2, #8]
 80047ac:	f000 bd75 	b.w	800529a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	78fa      	ldrb	r2, [r7, #3]
 80047b6:	4611      	mov	r1, r2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f004 ff26 	bl	800960a <USB_ReadChInterrupts>
 80047be:	4603      	mov	r3, r0
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	f040 8128 	bne.w	8004a1a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047d6:	461a      	mov	r2, r3
 80047d8:	2320      	movs	r3, #32
 80047da:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	331b      	adds	r3, #27
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d119      	bne.n	8004826 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	331b      	adds	r3, #27
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004806:	78fb      	ldrb	r3, [r7, #3]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4413      	add	r3, r2
 800480e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	78fa      	ldrb	r2, [r7, #3]
 8004816:	0151      	lsls	r1, r2, #5
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	440a      	add	r2, r1
 800481c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004820:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004824:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	799b      	ldrb	r3, [r3, #6]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d01b      	beq.n	8004866 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800482e:	78fa      	ldrb	r2, [r7, #3]
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	440b      	add	r3, r1
 800483c:	3330      	adds	r3, #48	@ 0x30
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4413      	add	r3, r2
 8004848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004852:	78fa      	ldrb	r2, [r7, #3]
 8004854:	1ac9      	subs	r1, r1, r3
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	4613      	mov	r3, r2
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	1a9b      	subs	r3, r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4403      	add	r3, r0
 8004862:	3338      	adds	r3, #56	@ 0x38
 8004864:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004866:	78fa      	ldrb	r2, [r7, #3]
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	334d      	adds	r3, #77	@ 0x4d
 8004876:	2201      	movs	r2, #1
 8004878:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800487a:	78fa      	ldrb	r2, [r7, #3]
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	4613      	mov	r3, r2
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	1a9b      	subs	r3, r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	440b      	add	r3, r1
 8004888:	3344      	adds	r3, #68	@ 0x44
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4413      	add	r3, r2
 8004896:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800489a:	461a      	mov	r2, r3
 800489c:	2301      	movs	r3, #1
 800489e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	3326      	adds	r3, #38	@ 0x26
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80048b6:	78fa      	ldrb	r2, [r7, #3]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	1a9b      	subs	r3, r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	3326      	adds	r3, #38	@ 0x26
 80048c6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d110      	bne.n	80048ee <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	4611      	mov	r1, r2
 80048d4:	4618      	mov	r0, r3
 80048d6:	f005 fc42 	bl	800a15e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048e6:	461a      	mov	r2, r3
 80048e8:	2310      	movs	r3, #16
 80048ea:	6093      	str	r3, [r2, #8]
 80048ec:	e03d      	b.n	800496a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80048ee:	78fa      	ldrb	r2, [r7, #3]
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	4613      	mov	r3, r2
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	440b      	add	r3, r1
 80048fc:	3326      	adds	r3, #38	@ 0x26
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b03      	cmp	r3, #3
 8004902:	d00a      	beq.n	800491a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004904:	78fa      	ldrb	r2, [r7, #3]
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	4613      	mov	r3, r2
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	3326      	adds	r3, #38	@ 0x26
 8004914:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004916:	2b01      	cmp	r3, #1
 8004918:	d127      	bne.n	800496a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4413      	add	r3, r2
 8004922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	78fa      	ldrb	r2, [r7, #3]
 800492a:	0151      	lsls	r1, r2, #5
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	440a      	add	r2, r1
 8004930:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004934:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004938:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800493a:	78fa      	ldrb	r2, [r7, #3]
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	334c      	adds	r3, #76	@ 0x4c
 800494a:	2201      	movs	r2, #1
 800494c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	334c      	adds	r3, #76	@ 0x4c
 800495e:	781a      	ldrb	r2, [r3, #0]
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f00e fa27 	bl	8012db8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	799b      	ldrb	r3, [r3, #6]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d13b      	bne.n	80049ea <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004972:	78fa      	ldrb	r2, [r7, #3]
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	1a9b      	subs	r3, r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	3338      	adds	r3, #56	@ 0x38
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4403      	add	r3, r0
 8004992:	3328      	adds	r3, #40	@ 0x28
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	440b      	add	r3, r1
 8004998:	1e59      	subs	r1, r3, #1
 800499a:	78fa      	ldrb	r2, [r7, #3]
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	4613      	mov	r3, r2
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4403      	add	r3, r0
 80049a8:	3328      	adds	r3, #40	@ 0x28
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 8470 	beq.w	800529a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	333c      	adds	r3, #60	@ 0x3c
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	78fa      	ldrb	r2, [r7, #3]
 80049ce:	f083 0301 	eor.w	r3, r3, #1
 80049d2:	b2d8      	uxtb	r0, r3
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	440b      	add	r3, r1
 80049e0:	333c      	adds	r3, #60	@ 0x3c
 80049e2:	4602      	mov	r2, r0
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	f000 bc58 	b.w	800529a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	333c      	adds	r3, #60	@ 0x3c
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	78fa      	ldrb	r2, [r7, #3]
 80049fe:	f083 0301 	eor.w	r3, r3, #1
 8004a02:	b2d8      	uxtb	r0, r3
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	333c      	adds	r3, #60	@ 0x3c
 8004a12:	4602      	mov	r2, r0
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	f000 bc40 	b.w	800529a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	78fa      	ldrb	r2, [r7, #3]
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f004 fdf1 	bl	800960a <USB_ReadChInterrupts>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d131      	bne.n	8004a96 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004a32:	78fb      	ldrb	r3, [r7, #3]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a3e:	461a      	mov	r2, r3
 8004a40:	2320      	movs	r3, #32
 8004a42:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004a44:	78fa      	ldrb	r2, [r7, #3]
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	331a      	adds	r3, #26
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	f040 841f 	bne.w	800529a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004a5c:	78fa      	ldrb	r2, [r7, #3]
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	331b      	adds	r3, #27
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004a70:	78fa      	ldrb	r2, [r7, #3]
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	1a9b      	subs	r3, r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	334d      	adds	r3, #77	@ 0x4d
 8004a80:	2203      	movs	r2, #3
 8004a82:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f005 fb66 	bl	800a15e <USB_HC_Halt>
 8004a92:	f000 bc02 	b.w	800529a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	78fa      	ldrb	r2, [r7, #3]
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f004 fdb3 	bl	800960a <USB_ReadChInterrupts>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	f040 8305 	bne.w	80050ba <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004abc:	461a      	mov	r2, r3
 8004abe:	2302      	movs	r3, #2
 8004ac0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004ac2:	78fa      	ldrb	r2, [r7, #3]
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	334d      	adds	r3, #77	@ 0x4d
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d114      	bne.n	8004b02 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ad8:	78fa      	ldrb	r2, [r7, #3]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	334d      	adds	r3, #77	@ 0x4d
 8004ae8:	2202      	movs	r2, #2
 8004aea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004aec:	78fa      	ldrb	r2, [r7, #3]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	1a9b      	subs	r3, r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	334c      	adds	r3, #76	@ 0x4c
 8004afc:	2201      	movs	r2, #1
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	e2cc      	b.n	800509c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	1a9b      	subs	r3, r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	440b      	add	r3, r1
 8004b10:	334d      	adds	r3, #77	@ 0x4d
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b06      	cmp	r3, #6
 8004b16:	d114      	bne.n	8004b42 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	334d      	adds	r3, #77	@ 0x4d
 8004b28:	2202      	movs	r2, #2
 8004b2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	334c      	adds	r3, #76	@ 0x4c
 8004b3c:	2205      	movs	r2, #5
 8004b3e:	701a      	strb	r2, [r3, #0]
 8004b40:	e2ac      	b.n	800509c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004b42:	78fa      	ldrb	r2, [r7, #3]
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	4613      	mov	r3, r2
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	334d      	adds	r3, #77	@ 0x4d
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2b07      	cmp	r3, #7
 8004b56:	d00b      	beq.n	8004b70 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004b58:	78fa      	ldrb	r2, [r7, #3]
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	1a9b      	subs	r3, r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	334d      	adds	r3, #77	@ 0x4d
 8004b68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004b6a:	2b09      	cmp	r3, #9
 8004b6c:	f040 80a6 	bne.w	8004cbc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b70:	78fa      	ldrb	r2, [r7, #3]
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	1a9b      	subs	r3, r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	334d      	adds	r3, #77	@ 0x4d
 8004b80:	2202      	movs	r2, #2
 8004b82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004b84:	78fa      	ldrb	r2, [r7, #3]
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	3344      	adds	r3, #68	@ 0x44
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	1c59      	adds	r1, r3, #1
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4403      	add	r3, r0
 8004ba4:	3344      	adds	r3, #68	@ 0x44
 8004ba6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ba8:	78fa      	ldrb	r2, [r7, #3]
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	1a9b      	subs	r3, r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	3344      	adds	r3, #68	@ 0x44
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d943      	bls.n	8004c46 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004bbe:	78fa      	ldrb	r2, [r7, #3]
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	3344      	adds	r3, #68	@ 0x44
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004bd2:	78fa      	ldrb	r2, [r7, #3]
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	011b      	lsls	r3, r3, #4
 8004bda:	1a9b      	subs	r3, r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	440b      	add	r3, r1
 8004be0:	331a      	adds	r3, #26
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d123      	bne.n	8004c30 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004be8:	78fa      	ldrb	r2, [r7, #3]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	331b      	adds	r3, #27
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004bfc:	78fa      	ldrb	r2, [r7, #3]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	331c      	adds	r3, #28
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	78fa      	ldrb	r2, [r7, #3]
 8004c20:	0151      	lsls	r1, r2, #5
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	440a      	add	r2, r1
 8004c26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c2e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c30:	78fa      	ldrb	r2, [r7, #3]
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	1a9b      	subs	r3, r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	334c      	adds	r3, #76	@ 0x4c
 8004c40:	2204      	movs	r2, #4
 8004c42:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c44:	e229      	b.n	800509a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c46:	78fa      	ldrb	r2, [r7, #3]
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	1a9b      	subs	r3, r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	334c      	adds	r3, #76	@ 0x4c
 8004c56:	2202      	movs	r2, #2
 8004c58:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	3326      	adds	r3, #38	@ 0x26
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00b      	beq.n	8004c88 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c70:	78fa      	ldrb	r2, [r7, #3]
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	4613      	mov	r3, r2
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	1a9b      	subs	r3, r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	3326      	adds	r3, #38	@ 0x26
 8004c80:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	f040 8209 	bne.w	800509a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c9e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ca6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004cba:	e1ee      	b.n	800509a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	334d      	adds	r3, #77	@ 0x4d
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b05      	cmp	r3, #5
 8004cd0:	f040 80c8 	bne.w	8004e64 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004cd4:	78fa      	ldrb	r2, [r7, #3]
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	334d      	adds	r3, #77	@ 0x4d
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	331b      	adds	r3, #27
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	f040 81ce 	bne.w	800509c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004d00:	78fa      	ldrb	r2, [r7, #3]
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	3326      	adds	r3, #38	@ 0x26
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d16b      	bne.n	8004dee <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	3348      	adds	r3, #72	@ 0x48
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	1c59      	adds	r1, r3, #1
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	1a9b      	subs	r3, r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4403      	add	r3, r0
 8004d36:	3348      	adds	r3, #72	@ 0x48
 8004d38:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	3348      	adds	r3, #72	@ 0x48
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d943      	bls.n	8004dd8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	4613      	mov	r3, r2
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	3348      	adds	r3, #72	@ 0x48
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004d64:	78fa      	ldrb	r2, [r7, #3]
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	331b      	adds	r3, #27
 8004d74:	2200      	movs	r2, #0
 8004d76:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	3344      	adds	r3, #68	@ 0x44
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d809      	bhi.n	8004da2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004d8e:	78fa      	ldrb	r2, [r7, #3]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	331c      	adds	r3, #28
 8004d9e:	2201      	movs	r2, #1
 8004da0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	78fa      	ldrb	r2, [r7, #3]
 8004db2:	0151      	lsls	r1, r2, #5
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	440a      	add	r2, r1
 8004db8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004dbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dc0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004dc2:	78fa      	ldrb	r2, [r7, #3]
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	1a9b      	subs	r3, r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	440b      	add	r3, r1
 8004dd0:	334c      	adds	r3, #76	@ 0x4c
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	e014      	b.n	8004e02 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004dd8:	78fa      	ldrb	r2, [r7, #3]
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	440b      	add	r3, r1
 8004de6:	334c      	adds	r3, #76	@ 0x4c
 8004de8:	2202      	movs	r2, #2
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	e009      	b.n	8004e02 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004dee:	78fa      	ldrb	r2, [r7, #3]
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	334c      	adds	r3, #76	@ 0x4c
 8004dfe:	2202      	movs	r2, #2
 8004e00:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e02:	78fa      	ldrb	r2, [r7, #3]
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	3326      	adds	r3, #38	@ 0x26
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00b      	beq.n	8004e30 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004e18:	78fa      	ldrb	r2, [r7, #3]
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	1a9b      	subs	r3, r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	3326      	adds	r3, #38	@ 0x26
 8004e28:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	f040 8136 	bne.w	800509c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e46:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e4e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	e11b      	b.n	800509c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004e64:	78fa      	ldrb	r2, [r7, #3]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	334d      	adds	r3, #77	@ 0x4d
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	f040 8081 	bne.w	8004f7e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e7c:	78fa      	ldrb	r2, [r7, #3]
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	4613      	mov	r3, r2
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	334d      	adds	r3, #77	@ 0x4d
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004e90:	78fa      	ldrb	r2, [r7, #3]
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	1a9b      	subs	r3, r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	331b      	adds	r3, #27
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	f040 80fa 	bne.w	800509c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	1a9b      	subs	r3, r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	334c      	adds	r3, #76	@ 0x4c
 8004eb8:	2202      	movs	r2, #2
 8004eba:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	0151      	lsls	r1, r2, #5
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	440a      	add	r2, r1
 8004ed2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ed6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eda:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	78fa      	ldrb	r2, [r7, #3]
 8004eec:	0151      	lsls	r1, r2, #5
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004efa:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	78fa      	ldrb	r2, [r7, #3]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f16:	f023 0320 	bic.w	r3, r3, #32
 8004f1a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f1c:	78fa      	ldrb	r2, [r7, #3]
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	4613      	mov	r3, r2
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	3326      	adds	r3, #38	@ 0x26
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00b      	beq.n	8004f4a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004f32:	78fa      	ldrb	r2, [r7, #3]
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	3326      	adds	r3, #38	@ 0x26
 8004f42:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	f040 80a9 	bne.w	800509c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f60:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f68:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f76:	461a      	mov	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	e08e      	b.n	800509c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	334d      	adds	r3, #77	@ 0x4d
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d143      	bne.n	800501c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f94:	78fa      	ldrb	r2, [r7, #3]
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	334d      	adds	r3, #77	@ 0x4d
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004fa8:	78fa      	ldrb	r2, [r7, #3]
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	1a9b      	subs	r3, r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	334c      	adds	r3, #76	@ 0x4c
 8004fb8:	2202      	movs	r2, #2
 8004fba:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004fbc:	78fa      	ldrb	r2, [r7, #3]
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	1a9b      	subs	r3, r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	3326      	adds	r3, #38	@ 0x26
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004fd2:	78fa      	ldrb	r2, [r7, #3]
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	1a9b      	subs	r3, r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	440b      	add	r3, r1
 8004fe0:	3326      	adds	r3, #38	@ 0x26
 8004fe2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d159      	bne.n	800509c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ffe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005006:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	4413      	add	r3, r2
 8005010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005014:	461a      	mov	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	e03f      	b.n	800509c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	1a9b      	subs	r3, r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	334d      	adds	r3, #77	@ 0x4d
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b08      	cmp	r3, #8
 8005030:	d126      	bne.n	8005080 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	334d      	adds	r3, #77	@ 0x4d
 8005042:	2202      	movs	r2, #2
 8005044:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005046:	78fa      	ldrb	r2, [r7, #3]
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	3344      	adds	r3, #68	@ 0x44
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	1c59      	adds	r1, r3, #1
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4403      	add	r3, r0
 8005066:	3344      	adds	r3, #68	@ 0x44
 8005068:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800506a:	78fa      	ldrb	r2, [r7, #3]
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	334c      	adds	r3, #76	@ 0x4c
 800507a:	2204      	movs	r2, #4
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	e00d      	b.n	800509c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005080:	78fa      	ldrb	r2, [r7, #3]
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	334d      	adds	r3, #77	@ 0x4d
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b02      	cmp	r3, #2
 8005094:	f000 8100 	beq.w	8005298 <HCD_HC_IN_IRQHandler+0xcca>
 8005098:	e000      	b.n	800509c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800509a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800509c:	78fa      	ldrb	r2, [r7, #3]
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	1a9b      	subs	r3, r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	334c      	adds	r3, #76	@ 0x4c
 80050ac:	781a      	ldrb	r2, [r3, #0]
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	4619      	mov	r1, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f00d fe80 	bl	8012db8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80050b8:	e0ef      	b.n	800529a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	78fa      	ldrb	r2, [r7, #3]
 80050c0:	4611      	mov	r1, r2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f004 faa1 	bl	800960a <USB_ReadChInterrupts>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ce:	2b40      	cmp	r3, #64	@ 0x40
 80050d0:	d12f      	bne.n	8005132 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050de:	461a      	mov	r2, r3
 80050e0:	2340      	movs	r3, #64	@ 0x40
 80050e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80050e4:	78fa      	ldrb	r2, [r7, #3]
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	334d      	adds	r3, #77	@ 0x4d
 80050f4:	2205      	movs	r2, #5
 80050f6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80050f8:	78fa      	ldrb	r2, [r7, #3]
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	4613      	mov	r3, r2
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	1a9b      	subs	r3, r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	331a      	adds	r3, #26
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d109      	bne.n	8005122 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800510e:	78fa      	ldrb	r2, [r7, #3]
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	1a9b      	subs	r3, r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	3344      	adds	r3, #68	@ 0x44
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	78fa      	ldrb	r2, [r7, #3]
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f005 f817 	bl	800a15e <USB_HC_Halt>
 8005130:	e0b3      	b.n	800529a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	78fa      	ldrb	r2, [r7, #3]
 8005138:	4611      	mov	r1, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f004 fa65 	bl	800960a <USB_ReadChInterrupts>
 8005140:	4603      	mov	r3, r0
 8005142:	f003 0310 	and.w	r3, r3, #16
 8005146:	2b10      	cmp	r3, #16
 8005148:	f040 80a7 	bne.w	800529a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800514c:	78fa      	ldrb	r2, [r7, #3]
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	1a9b      	subs	r3, r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	3326      	adds	r3, #38	@ 0x26
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b03      	cmp	r3, #3
 8005160:	d11b      	bne.n	800519a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005162:	78fa      	ldrb	r2, [r7, #3]
 8005164:	6879      	ldr	r1, [r7, #4]
 8005166:	4613      	mov	r3, r2
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	440b      	add	r3, r1
 8005170:	3344      	adds	r3, #68	@ 0x44
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005176:	78fa      	ldrb	r2, [r7, #3]
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	4613      	mov	r3, r2
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	440b      	add	r3, r1
 8005184:	334d      	adds	r3, #77	@ 0x4d
 8005186:	2204      	movs	r2, #4
 8005188:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	78fa      	ldrb	r2, [r7, #3]
 8005190:	4611      	mov	r1, r2
 8005192:	4618      	mov	r0, r3
 8005194:	f004 ffe3 	bl	800a15e <USB_HC_Halt>
 8005198:	e03f      	b.n	800521a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800519a:	78fa      	ldrb	r2, [r7, #3]
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	1a9b      	subs	r3, r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	3326      	adds	r3, #38	@ 0x26
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80051b0:	78fa      	ldrb	r2, [r7, #3]
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	4613      	mov	r3, r2
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	1a9b      	subs	r3, r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	3326      	adds	r3, #38	@ 0x26
 80051c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d129      	bne.n	800521a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80051c6:	78fa      	ldrb	r2, [r7, #3]
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	440b      	add	r3, r1
 80051d4:	3344      	adds	r3, #68	@ 0x44
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	799b      	ldrb	r3, [r3, #6]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HCD_HC_IN_IRQHandler+0xc2a>
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	331b      	adds	r3, #27
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d110      	bne.n	800521a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80051f8:	78fa      	ldrb	r2, [r7, #3]
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	1a9b      	subs	r3, r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	334d      	adds	r3, #77	@ 0x4d
 8005208:	2204      	movs	r2, #4
 800520a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	78fa      	ldrb	r2, [r7, #3]
 8005212:	4611      	mov	r1, r2
 8005214:	4618      	mov	r0, r3
 8005216:	f004 ffa2 	bl	800a15e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800521a:	78fa      	ldrb	r2, [r7, #3]
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	331b      	adds	r3, #27
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d129      	bne.n	8005284 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005230:	78fa      	ldrb	r2, [r7, #3]
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	1a9b      	subs	r3, r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	331b      	adds	r3, #27
 8005240:	2200      	movs	r2, #0
 8005242:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005244:	78fb      	ldrb	r3, [r7, #3]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4413      	add	r3, r2
 800524c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	78fa      	ldrb	r2, [r7, #3]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	440a      	add	r2, r1
 800525a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800525e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005262:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4413      	add	r3, r2
 800526c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	440a      	add	r2, r1
 800527a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800527e:	f043 0320 	orr.w	r3, r3, #32
 8005282:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005284:	78fb      	ldrb	r3, [r7, #3]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	4413      	add	r3, r2
 800528c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005290:	461a      	mov	r2, r3
 8005292:	2310      	movs	r3, #16
 8005294:	6093      	str	r3, [r2, #8]
 8005296:	e000      	b.n	800529a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005298:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	78fa      	ldrb	r2, [r7, #3]
 80052bc:	4611      	mov	r1, r2
 80052be:	4618      	mov	r0, r3
 80052c0:	f004 f9a3 	bl	800960a <USB_ReadChInterrupts>
 80052c4:	4603      	mov	r3, r0
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d11b      	bne.n	8005306 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80052ce:	78fb      	ldrb	r3, [r7, #3]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052da:	461a      	mov	r2, r3
 80052dc:	2304      	movs	r3, #4
 80052de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80052e0:	78fa      	ldrb	r2, [r7, #3]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	334d      	adds	r3, #77	@ 0x4d
 80052f0:	2207      	movs	r2, #7
 80052f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	78fa      	ldrb	r2, [r7, #3]
 80052fa:	4611      	mov	r1, r2
 80052fc:	4618      	mov	r0, r3
 80052fe:	f004 ff2e 	bl	800a15e <USB_HC_Halt>
 8005302:	f000 bc89 	b.w	8005c18 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	78fa      	ldrb	r2, [r7, #3]
 800530c:	4611      	mov	r1, r2
 800530e:	4618      	mov	r0, r3
 8005310:	f004 f97b 	bl	800960a <USB_ReadChInterrupts>
 8005314:	4603      	mov	r3, r0
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b20      	cmp	r3, #32
 800531c:	f040 8082 	bne.w	8005424 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	4413      	add	r3, r2
 8005328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800532c:	461a      	mov	r2, r3
 800532e:	2320      	movs	r3, #32
 8005330:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005332:	78fa      	ldrb	r2, [r7, #3]
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	3319      	adds	r3, #25
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d124      	bne.n	8005392 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	3319      	adds	r3, #25
 8005358:	2200      	movs	r2, #0
 800535a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	4613      	mov	r3, r2
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	1a9b      	subs	r3, r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	440b      	add	r3, r1
 800536a:	334c      	adds	r3, #76	@ 0x4c
 800536c:	2202      	movs	r2, #2
 800536e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005370:	78fa      	ldrb	r2, [r7, #3]
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	1a9b      	subs	r3, r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	334d      	adds	r3, #77	@ 0x4d
 8005380:	2203      	movs	r2, #3
 8005382:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	78fa      	ldrb	r2, [r7, #3]
 800538a:	4611      	mov	r1, r2
 800538c:	4618      	mov	r0, r3
 800538e:	f004 fee6 	bl	800a15e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005392:	78fa      	ldrb	r2, [r7, #3]
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	4613      	mov	r3, r2
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	1a9b      	subs	r3, r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	440b      	add	r3, r1
 80053a0:	331a      	adds	r3, #26
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	f040 8437 	bne.w	8005c18 <HCD_HC_OUT_IRQHandler+0x978>
 80053aa:	78fa      	ldrb	r2, [r7, #3]
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	1a9b      	subs	r3, r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	331b      	adds	r3, #27
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f040 842b 	bne.w	8005c18 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80053c2:	78fa      	ldrb	r2, [r7, #3]
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	4613      	mov	r3, r2
 80053c8:	011b      	lsls	r3, r3, #4
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	440b      	add	r3, r1
 80053d0:	3326      	adds	r3, #38	@ 0x26
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d009      	beq.n	80053ec <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80053d8:	78fa      	ldrb	r2, [r7, #3]
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	331b      	adds	r3, #27
 80053e8:	2201      	movs	r2, #1
 80053ea:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80053ec:	78fa      	ldrb	r2, [r7, #3]
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4613      	mov	r3, r2
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	334d      	adds	r3, #77	@ 0x4d
 80053fc:	2203      	movs	r2, #3
 80053fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	78fa      	ldrb	r2, [r7, #3]
 8005406:	4611      	mov	r1, r2
 8005408:	4618      	mov	r0, r3
 800540a:	f004 fea8 	bl	800a15e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800540e:	78fa      	ldrb	r2, [r7, #3]
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	1a9b      	subs	r3, r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	440b      	add	r3, r1
 800541c:	3344      	adds	r3, #68	@ 0x44
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	e3f9      	b.n	8005c18 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	78fa      	ldrb	r2, [r7, #3]
 800542a:	4611      	mov	r1, r2
 800542c:	4618      	mov	r0, r3
 800542e:	f004 f8ec 	bl	800960a <USB_ReadChInterrupts>
 8005432:	4603      	mov	r3, r0
 8005434:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800543c:	d111      	bne.n	8005462 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	4413      	add	r3, r2
 8005446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800544a:	461a      	mov	r2, r3
 800544c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005450:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	78fa      	ldrb	r2, [r7, #3]
 8005458:	4611      	mov	r1, r2
 800545a:	4618      	mov	r0, r3
 800545c:	f004 fe7f 	bl	800a15e <USB_HC_Halt>
 8005460:	e3da      	b.n	8005c18 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	78fa      	ldrb	r2, [r7, #3]
 8005468:	4611      	mov	r1, r2
 800546a:	4618      	mov	r0, r3
 800546c:	f004 f8cd 	bl	800960a <USB_ReadChInterrupts>
 8005470:	4603      	mov	r3, r0
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b01      	cmp	r3, #1
 8005478:	d168      	bne.n	800554c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800547a:	78fa      	ldrb	r2, [r7, #3]
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	4613      	mov	r3, r2
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	1a9b      	subs	r3, r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	440b      	add	r3, r1
 8005488:	3344      	adds	r3, #68	@ 0x44
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	78fa      	ldrb	r2, [r7, #3]
 8005494:	4611      	mov	r1, r2
 8005496:	4618      	mov	r0, r3
 8005498:	f004 f8b7 	bl	800960a <USB_ReadChInterrupts>
 800549c:	4603      	mov	r3, r0
 800549e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a2:	2b40      	cmp	r3, #64	@ 0x40
 80054a4:	d112      	bne.n	80054cc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80054a6:	78fa      	ldrb	r2, [r7, #3]
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	4613      	mov	r3, r2
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	1a9b      	subs	r3, r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	440b      	add	r3, r1
 80054b4:	3319      	adds	r3, #25
 80054b6:	2201      	movs	r2, #1
 80054b8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054c6:	461a      	mov	r2, r3
 80054c8:	2340      	movs	r3, #64	@ 0x40
 80054ca:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80054cc:	78fa      	ldrb	r2, [r7, #3]
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	4613      	mov	r3, r2
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	1a9b      	subs	r3, r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	331b      	adds	r3, #27
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d019      	beq.n	8005516 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80054e2:	78fa      	ldrb	r2, [r7, #3]
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	1a9b      	subs	r3, r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	440b      	add	r3, r1
 80054f0:	331b      	adds	r3, #27
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	78fa      	ldrb	r2, [r7, #3]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	440a      	add	r2, r1
 800550c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005510:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005514:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005516:	78fb      	ldrb	r3, [r7, #3]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	4413      	add	r3, r2
 800551e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005522:	461a      	mov	r2, r3
 8005524:	2301      	movs	r3, #1
 8005526:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005528:	78fa      	ldrb	r2, [r7, #3]
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	4613      	mov	r3, r2
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	334d      	adds	r3, #77	@ 0x4d
 8005538:	2201      	movs	r2, #1
 800553a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	78fa      	ldrb	r2, [r7, #3]
 8005542:	4611      	mov	r1, r2
 8005544:	4618      	mov	r0, r3
 8005546:	f004 fe0a 	bl	800a15e <USB_HC_Halt>
 800554a:	e365      	b.n	8005c18 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	78fa      	ldrb	r2, [r7, #3]
 8005552:	4611      	mov	r1, r2
 8005554:	4618      	mov	r0, r3
 8005556:	f004 f858 	bl	800960a <USB_ReadChInterrupts>
 800555a:	4603      	mov	r3, r0
 800555c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005560:	2b40      	cmp	r3, #64	@ 0x40
 8005562:	d139      	bne.n	80055d8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005564:	78fa      	ldrb	r2, [r7, #3]
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	4613      	mov	r3, r2
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	1a9b      	subs	r3, r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	334d      	adds	r3, #77	@ 0x4d
 8005574:	2205      	movs	r2, #5
 8005576:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005578:	78fa      	ldrb	r2, [r7, #3]
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	4613      	mov	r3, r2
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	1a9b      	subs	r3, r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	440b      	add	r3, r1
 8005586:	331a      	adds	r3, #26
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d109      	bne.n	80055a2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800558e:	78fa      	ldrb	r2, [r7, #3]
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	3319      	adds	r3, #25
 800559e:	2201      	movs	r2, #1
 80055a0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80055a2:	78fa      	ldrb	r2, [r7, #3]
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	3344      	adds	r3, #68	@ 0x44
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	78fa      	ldrb	r2, [r7, #3]
 80055bc:	4611      	mov	r1, r2
 80055be:	4618      	mov	r0, r3
 80055c0:	f004 fdcd 	bl	800a15e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055d0:	461a      	mov	r2, r3
 80055d2:	2340      	movs	r3, #64	@ 0x40
 80055d4:	6093      	str	r3, [r2, #8]
 80055d6:	e31f      	b.n	8005c18 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	78fa      	ldrb	r2, [r7, #3]
 80055de:	4611      	mov	r1, r2
 80055e0:	4618      	mov	r0, r3
 80055e2:	f004 f812 	bl	800960a <USB_ReadChInterrupts>
 80055e6:	4603      	mov	r3, r0
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d11a      	bne.n	8005626 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055fc:	461a      	mov	r2, r3
 80055fe:	2308      	movs	r3, #8
 8005600:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	334d      	adds	r3, #77	@ 0x4d
 8005612:	2206      	movs	r2, #6
 8005614:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	78fa      	ldrb	r2, [r7, #3]
 800561c:	4611      	mov	r1, r2
 800561e:	4618      	mov	r0, r3
 8005620:	f004 fd9d 	bl	800a15e <USB_HC_Halt>
 8005624:	e2f8      	b.n	8005c18 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	78fa      	ldrb	r2, [r7, #3]
 800562c:	4611      	mov	r1, r2
 800562e:	4618      	mov	r0, r3
 8005630:	f003 ffeb 	bl	800960a <USB_ReadChInterrupts>
 8005634:	4603      	mov	r3, r0
 8005636:	f003 0310 	and.w	r3, r3, #16
 800563a:	2b10      	cmp	r3, #16
 800563c:	d144      	bne.n	80056c8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800563e:	78fa      	ldrb	r2, [r7, #3]
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	4613      	mov	r3, r2
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	1a9b      	subs	r3, r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	3344      	adds	r3, #68	@ 0x44
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005652:	78fa      	ldrb	r2, [r7, #3]
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	4613      	mov	r3, r2
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	1a9b      	subs	r3, r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	440b      	add	r3, r1
 8005660:	334d      	adds	r3, #77	@ 0x4d
 8005662:	2204      	movs	r2, #4
 8005664:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005666:	78fa      	ldrb	r2, [r7, #3]
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	1a9b      	subs	r3, r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	3319      	adds	r3, #25
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d114      	bne.n	80056a6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800567c:	78fa      	ldrb	r2, [r7, #3]
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	3318      	adds	r3, #24
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d109      	bne.n	80056a6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005692:	78fa      	ldrb	r2, [r7, #3]
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	4613      	mov	r3, r2
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	1a9b      	subs	r3, r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	440b      	add	r3, r1
 80056a0:	3319      	adds	r3, #25
 80056a2:	2201      	movs	r2, #1
 80056a4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	78fa      	ldrb	r2, [r7, #3]
 80056ac:	4611      	mov	r1, r2
 80056ae:	4618      	mov	r0, r3
 80056b0:	f004 fd55 	bl	800a15e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80056b4:	78fb      	ldrb	r3, [r7, #3]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056c0:	461a      	mov	r2, r3
 80056c2:	2310      	movs	r3, #16
 80056c4:	6093      	str	r3, [r2, #8]
 80056c6:	e2a7      	b.n	8005c18 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	78fa      	ldrb	r2, [r7, #3]
 80056ce:	4611      	mov	r1, r2
 80056d0:	4618      	mov	r0, r3
 80056d2:	f003 ff9a 	bl	800960a <USB_ReadChInterrupts>
 80056d6:	4603      	mov	r3, r0
 80056d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056dc:	2b80      	cmp	r3, #128	@ 0x80
 80056de:	f040 8083 	bne.w	80057e8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	799b      	ldrb	r3, [r3, #6]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d111      	bne.n	800570e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80056ea:	78fa      	ldrb	r2, [r7, #3]
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	440b      	add	r3, r1
 80056f8:	334d      	adds	r3, #77	@ 0x4d
 80056fa:	2207      	movs	r2, #7
 80056fc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	78fa      	ldrb	r2, [r7, #3]
 8005704:	4611      	mov	r1, r2
 8005706:	4618      	mov	r0, r3
 8005708:	f004 fd29 	bl	800a15e <USB_HC_Halt>
 800570c:	e062      	b.n	80057d4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800570e:	78fa      	ldrb	r2, [r7, #3]
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	4613      	mov	r3, r2
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	1a9b      	subs	r3, r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	440b      	add	r3, r1
 800571c:	3344      	adds	r3, #68	@ 0x44
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	1c59      	adds	r1, r3, #1
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4403      	add	r3, r0
 800572e:	3344      	adds	r3, #68	@ 0x44
 8005730:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005732:	78fa      	ldrb	r2, [r7, #3]
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	440b      	add	r3, r1
 8005740:	3344      	adds	r3, #68	@ 0x44
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b02      	cmp	r3, #2
 8005746:	d922      	bls.n	800578e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005748:	78fa      	ldrb	r2, [r7, #3]
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	1a9b      	subs	r3, r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	3344      	adds	r3, #68	@ 0x44
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800575c:	78fa      	ldrb	r2, [r7, #3]
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	4613      	mov	r3, r2
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	1a9b      	subs	r3, r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	334c      	adds	r3, #76	@ 0x4c
 800576c:	2204      	movs	r2, #4
 800576e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005770:	78fa      	ldrb	r2, [r7, #3]
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	4613      	mov	r3, r2
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	1a9b      	subs	r3, r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	334c      	adds	r3, #76	@ 0x4c
 8005780:	781a      	ldrb	r2, [r3, #0]
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f00d fb16 	bl	8012db8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800578c:	e022      	b.n	80057d4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800578e:	78fa      	ldrb	r2, [r7, #3]
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	4613      	mov	r3, r2
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	440b      	add	r3, r1
 800579c:	334c      	adds	r3, #76	@ 0x4c
 800579e:	2202      	movs	r2, #2
 80057a0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80057a2:	78fb      	ldrb	r3, [r7, #3]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057b8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80057c0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ce:	461a      	mov	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057e0:	461a      	mov	r2, r3
 80057e2:	2380      	movs	r3, #128	@ 0x80
 80057e4:	6093      	str	r3, [r2, #8]
 80057e6:	e217      	b.n	8005c18 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	78fa      	ldrb	r2, [r7, #3]
 80057ee:	4611      	mov	r1, r2
 80057f0:	4618      	mov	r0, r3
 80057f2:	f003 ff0a 	bl	800960a <USB_ReadChInterrupts>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005800:	d11b      	bne.n	800583a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005802:	78fa      	ldrb	r2, [r7, #3]
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	1a9b      	subs	r3, r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	334d      	adds	r3, #77	@ 0x4d
 8005812:	2209      	movs	r2, #9
 8005814:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	78fa      	ldrb	r2, [r7, #3]
 800581c:	4611      	mov	r1, r2
 800581e:	4618      	mov	r0, r3
 8005820:	f004 fc9d 	bl	800a15e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4413      	add	r3, r2
 800582c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005830:	461a      	mov	r2, r3
 8005832:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005836:	6093      	str	r3, [r2, #8]
 8005838:	e1ee      	b.n	8005c18 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	78fa      	ldrb	r2, [r7, #3]
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f003 fee1 	bl	800960a <USB_ReadChInterrupts>
 8005848:	4603      	mov	r3, r0
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b02      	cmp	r3, #2
 8005850:	f040 81df 	bne.w	8005c12 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4413      	add	r3, r2
 800585c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005860:	461a      	mov	r2, r3
 8005862:	2302      	movs	r3, #2
 8005864:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005866:	78fa      	ldrb	r2, [r7, #3]
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	4613      	mov	r3, r2
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	1a9b      	subs	r3, r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	440b      	add	r3, r1
 8005874:	334d      	adds	r3, #77	@ 0x4d
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b01      	cmp	r3, #1
 800587a:	f040 8093 	bne.w	80059a4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800587e:	78fa      	ldrb	r2, [r7, #3]
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	4613      	mov	r3, r2
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	1a9b      	subs	r3, r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	440b      	add	r3, r1
 800588c:	334d      	adds	r3, #77	@ 0x4d
 800588e:	2202      	movs	r2, #2
 8005890:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005892:	78fa      	ldrb	r2, [r7, #3]
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	4613      	mov	r3, r2
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	1a9b      	subs	r3, r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	440b      	add	r3, r1
 80058a0:	334c      	adds	r3, #76	@ 0x4c
 80058a2:	2201      	movs	r2, #1
 80058a4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80058a6:	78fa      	ldrb	r2, [r7, #3]
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	4613      	mov	r3, r2
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	1a9b      	subs	r3, r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	440b      	add	r3, r1
 80058b4:	3326      	adds	r3, #38	@ 0x26
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d00b      	beq.n	80058d4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80058bc:	78fa      	ldrb	r2, [r7, #3]
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	4613      	mov	r3, r2
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	1a9b      	subs	r3, r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	3326      	adds	r3, #38	@ 0x26
 80058cc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	f040 8190 	bne.w	8005bf4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	799b      	ldrb	r3, [r3, #6]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d115      	bne.n	8005908 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80058dc:	78fa      	ldrb	r2, [r7, #3]
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	4613      	mov	r3, r2
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	1a9b      	subs	r3, r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	440b      	add	r3, r1
 80058ea:	333d      	adds	r3, #61	@ 0x3d
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	78fa      	ldrb	r2, [r7, #3]
 80058f0:	f083 0301 	eor.w	r3, r3, #1
 80058f4:	b2d8      	uxtb	r0, r3
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	4613      	mov	r3, r2
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	333d      	adds	r3, #61	@ 0x3d
 8005904:	4602      	mov	r2, r0
 8005906:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	799b      	ldrb	r3, [r3, #6]
 800590c:	2b01      	cmp	r3, #1
 800590e:	f040 8171 	bne.w	8005bf4 <HCD_HC_OUT_IRQHandler+0x954>
 8005912:	78fa      	ldrb	r2, [r7, #3]
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	4613      	mov	r3, r2
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	1a9b      	subs	r3, r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	440b      	add	r3, r1
 8005920:	3334      	adds	r3, #52	@ 0x34
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 8165 	beq.w	8005bf4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800592a:	78fa      	ldrb	r2, [r7, #3]
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	1a9b      	subs	r3, r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	3334      	adds	r3, #52	@ 0x34
 800593a:	6819      	ldr	r1, [r3, #0]
 800593c:	78fa      	ldrb	r2, [r7, #3]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	4613      	mov	r3, r2
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	1a9b      	subs	r3, r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4403      	add	r3, r0
 800594a:	3328      	adds	r3, #40	@ 0x28
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	440b      	add	r3, r1
 8005950:	1e59      	subs	r1, r3, #1
 8005952:	78fa      	ldrb	r2, [r7, #3]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	4613      	mov	r3, r2
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	1a9b      	subs	r3, r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4403      	add	r3, r0
 8005960:	3328      	adds	r3, #40	@ 0x28
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	fbb1 f3f3 	udiv	r3, r1, r3
 8005968:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 813f 	beq.w	8005bf4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005976:	78fa      	ldrb	r2, [r7, #3]
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	333d      	adds	r3, #61	@ 0x3d
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	78fa      	ldrb	r2, [r7, #3]
 800598a:	f083 0301 	eor.w	r3, r3, #1
 800598e:	b2d8      	uxtb	r0, r3
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	4613      	mov	r3, r2
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	1a9b      	subs	r3, r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	440b      	add	r3, r1
 800599c:	333d      	adds	r3, #61	@ 0x3d
 800599e:	4602      	mov	r2, r0
 80059a0:	701a      	strb	r2, [r3, #0]
 80059a2:	e127      	b.n	8005bf4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80059a4:	78fa      	ldrb	r2, [r7, #3]
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	4613      	mov	r3, r2
 80059aa:	011b      	lsls	r3, r3, #4
 80059ac:	1a9b      	subs	r3, r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	440b      	add	r3, r1
 80059b2:	334d      	adds	r3, #77	@ 0x4d
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d120      	bne.n	80059fc <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80059ba:	78fa      	ldrb	r2, [r7, #3]
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	4613      	mov	r3, r2
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	1a9b      	subs	r3, r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	440b      	add	r3, r1
 80059c8:	334d      	adds	r3, #77	@ 0x4d
 80059ca:	2202      	movs	r2, #2
 80059cc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80059ce:	78fa      	ldrb	r2, [r7, #3]
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	1a9b      	subs	r3, r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	440b      	add	r3, r1
 80059dc:	331b      	adds	r3, #27
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	f040 8107 	bne.w	8005bf4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80059e6:	78fa      	ldrb	r2, [r7, #3]
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	334c      	adds	r3, #76	@ 0x4c
 80059f6:	2202      	movs	r2, #2
 80059f8:	701a      	strb	r2, [r3, #0]
 80059fa:	e0fb      	b.n	8005bf4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80059fc:	78fa      	ldrb	r2, [r7, #3]
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	4613      	mov	r3, r2
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	1a9b      	subs	r3, r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	334d      	adds	r3, #77	@ 0x4d
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d13a      	bne.n	8005a88 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a12:	78fa      	ldrb	r2, [r7, #3]
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	334d      	adds	r3, #77	@ 0x4d
 8005a22:	2202      	movs	r2, #2
 8005a24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005a26:	78fa      	ldrb	r2, [r7, #3]
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	1a9b      	subs	r3, r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	334c      	adds	r3, #76	@ 0x4c
 8005a36:	2202      	movs	r2, #2
 8005a38:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005a3a:	78fa      	ldrb	r2, [r7, #3]
 8005a3c:	6879      	ldr	r1, [r7, #4]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	1a9b      	subs	r3, r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	440b      	add	r3, r1
 8005a48:	331b      	adds	r3, #27
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	f040 80d1 	bne.w	8005bf4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005a52:	78fa      	ldrb	r2, [r7, #3]
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	1a9b      	subs	r3, r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	331b      	adds	r3, #27
 8005a62:	2200      	movs	r2, #0
 8005a64:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005a66:	78fb      	ldrb	r3, [r7, #3]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	78fa      	ldrb	r2, [r7, #3]
 8005a76:	0151      	lsls	r1, r2, #5
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	440a      	add	r2, r1
 8005a7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a84:	6053      	str	r3, [r2, #4]
 8005a86:	e0b5      	b.n	8005bf4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005a88:	78fa      	ldrb	r2, [r7, #3]
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	1a9b      	subs	r3, r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	440b      	add	r3, r1
 8005a96:	334d      	adds	r3, #77	@ 0x4d
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b05      	cmp	r3, #5
 8005a9c:	d114      	bne.n	8005ac8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a9e:	78fa      	ldrb	r2, [r7, #3]
 8005aa0:	6879      	ldr	r1, [r7, #4]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	1a9b      	subs	r3, r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	440b      	add	r3, r1
 8005aac:	334d      	adds	r3, #77	@ 0x4d
 8005aae:	2202      	movs	r2, #2
 8005ab0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005ab2:	78fa      	ldrb	r2, [r7, #3]
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	1a9b      	subs	r3, r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	440b      	add	r3, r1
 8005ac0:	334c      	adds	r3, #76	@ 0x4c
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	701a      	strb	r2, [r3, #0]
 8005ac6:	e095      	b.n	8005bf4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005ac8:	78fa      	ldrb	r2, [r7, #3]
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	4613      	mov	r3, r2
 8005ace:	011b      	lsls	r3, r3, #4
 8005ad0:	1a9b      	subs	r3, r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	334d      	adds	r3, #77	@ 0x4d
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b06      	cmp	r3, #6
 8005adc:	d114      	bne.n	8005b08 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005ade:	78fa      	ldrb	r2, [r7, #3]
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	1a9b      	subs	r3, r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	334d      	adds	r3, #77	@ 0x4d
 8005aee:	2202      	movs	r2, #2
 8005af0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005af2:	78fa      	ldrb	r2, [r7, #3]
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	1a9b      	subs	r3, r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	334c      	adds	r3, #76	@ 0x4c
 8005b02:	2205      	movs	r2, #5
 8005b04:	701a      	strb	r2, [r3, #0]
 8005b06:	e075      	b.n	8005bf4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005b08:	78fa      	ldrb	r2, [r7, #3]
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	1a9b      	subs	r3, r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	440b      	add	r3, r1
 8005b16:	334d      	adds	r3, #77	@ 0x4d
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b07      	cmp	r3, #7
 8005b1c:	d00a      	beq.n	8005b34 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005b1e:	78fa      	ldrb	r2, [r7, #3]
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	4613      	mov	r3, r2
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	1a9b      	subs	r3, r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	440b      	add	r3, r1
 8005b2c:	334d      	adds	r3, #77	@ 0x4d
 8005b2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005b30:	2b09      	cmp	r3, #9
 8005b32:	d170      	bne.n	8005c16 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b34:	78fa      	ldrb	r2, [r7, #3]
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	1a9b      	subs	r3, r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	334d      	adds	r3, #77	@ 0x4d
 8005b44:	2202      	movs	r2, #2
 8005b46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005b48:	78fa      	ldrb	r2, [r7, #3]
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	440b      	add	r3, r1
 8005b56:	3344      	adds	r3, #68	@ 0x44
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	1c59      	adds	r1, r3, #1
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	1a9b      	subs	r3, r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4403      	add	r3, r0
 8005b68:	3344      	adds	r3, #68	@ 0x44
 8005b6a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005b6c:	78fa      	ldrb	r2, [r7, #3]
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	4613      	mov	r3, r2
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	1a9b      	subs	r3, r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	3344      	adds	r3, #68	@ 0x44
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d914      	bls.n	8005bac <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005b82:	78fa      	ldrb	r2, [r7, #3]
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	4613      	mov	r3, r2
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	1a9b      	subs	r3, r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	440b      	add	r3, r1
 8005b90:	3344      	adds	r3, #68	@ 0x44
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005b96:	78fa      	ldrb	r2, [r7, #3]
 8005b98:	6879      	ldr	r1, [r7, #4]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	1a9b      	subs	r3, r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	440b      	add	r3, r1
 8005ba4:	334c      	adds	r3, #76	@ 0x4c
 8005ba6:	2204      	movs	r2, #4
 8005ba8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005baa:	e022      	b.n	8005bf2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005bac:	78fa      	ldrb	r2, [r7, #3]
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	1a9b      	subs	r3, r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	440b      	add	r3, r1
 8005bba:	334c      	adds	r3, #76	@ 0x4c
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005bd6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005bde:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bec:	461a      	mov	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005bf2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005bf4:	78fa      	ldrb	r2, [r7, #3]
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	1a9b      	subs	r3, r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	334c      	adds	r3, #76	@ 0x4c
 8005c04:	781a      	ldrb	r2, [r3, #0]
 8005c06:	78fb      	ldrb	r3, [r7, #3]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f00d f8d4 	bl	8012db8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005c10:	e002      	b.n	8005c18 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005c12:	bf00      	nop
 8005c14:	e000      	b.n	8005c18 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005c16:	bf00      	nop
  }
}
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b08a      	sub	sp, #40	@ 0x28
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	f003 030f 	and.w	r3, r3, #15
 8005c3e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	0c5b      	lsrs	r3, r3, #17
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	091b      	lsrs	r3, r3, #4
 8005c4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c52:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d004      	beq.n	8005c64 <HCD_RXQLVL_IRQHandler+0x46>
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b05      	cmp	r3, #5
 8005c5e:	f000 80b6 	beq.w	8005dce <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005c62:	e0b7      	b.n	8005dd4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 80b3 	beq.w	8005dd2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	4613      	mov	r3, r2
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	440b      	add	r3, r1
 8005c7a:	332c      	adds	r3, #44	@ 0x2c
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 80a7 	beq.w	8005dd2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	1a9b      	subs	r3, r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	440b      	add	r3, r1
 8005c92:	3338      	adds	r3, #56	@ 0x38
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	18d1      	adds	r1, r2, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	1a9b      	subs	r3, r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4403      	add	r3, r0
 8005ca8:	3334      	adds	r3, #52	@ 0x34
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4299      	cmp	r1, r3
 8005cae:	f200 8083 	bhi.w	8005db8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	332c      	adds	r3, #44	@ 0x2c
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	b292      	uxth	r2, r2
 8005ccc:	4619      	mov	r1, r3
 8005cce:	f003 fc31 	bl	8009534 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	1a9b      	subs	r3, r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	440b      	add	r3, r1
 8005ce0:	332c      	adds	r3, #44	@ 0x2c
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	18d1      	adds	r1, r2, r3
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	4613      	mov	r3, r2
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	1a9b      	subs	r3, r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4403      	add	r3, r0
 8005cf6:	332c      	adds	r3, #44	@ 0x2c
 8005cf8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	3338      	adds	r3, #56	@ 0x38
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	18d1      	adds	r1, r2, r3
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	4613      	mov	r3, r2
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	1a9b      	subs	r3, r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4403      	add	r3, r0
 8005d1e:	3338      	adds	r3, #56	@ 0x38
 8005d20:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	0cdb      	lsrs	r3, r3, #19
 8005d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d36:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	1a9b      	subs	r3, r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	440b      	add	r3, r1
 8005d46:	3328      	adds	r3, #40	@ 0x28
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d13f      	bne.n	8005dd2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d03c      	beq.n	8005dd2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d6e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d76:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d84:	461a      	mov	r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	1a9b      	subs	r3, r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	440b      	add	r3, r1
 8005d98:	333c      	adds	r3, #60	@ 0x3c
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	f083 0301 	eor.w	r3, r3, #1
 8005da0:	b2d8      	uxtb	r0, r3
 8005da2:	6879      	ldr	r1, [r7, #4]
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	4613      	mov	r3, r2
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	1a9b      	subs	r3, r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	440b      	add	r3, r1
 8005db0:	333c      	adds	r3, #60	@ 0x3c
 8005db2:	4602      	mov	r2, r0
 8005db4:	701a      	strb	r2, [r3, #0]
      break;
 8005db6:	e00c      	b.n	8005dd2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	1a9b      	subs	r3, r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	334c      	adds	r3, #76	@ 0x4c
 8005dc8:	2204      	movs	r2, #4
 8005dca:	701a      	strb	r2, [r3, #0]
      break;
 8005dcc:	e001      	b.n	8005dd2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005dce:	bf00      	nop
 8005dd0:	e000      	b.n	8005dd4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005dd2:	bf00      	nop
  }
}
 8005dd4:	bf00      	nop
 8005dd6:	3728      	adds	r7, #40	@ 0x28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005e08:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d10b      	bne.n	8005e2c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d102      	bne.n	8005e24 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f00c ffae 	bl	8012d80 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f043 0302 	orr.w	r3, r3, #2
 8005e2a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b08      	cmp	r3, #8
 8005e34:	d132      	bne.n	8005e9c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f043 0308 	orr.w	r3, r3, #8
 8005e3c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d126      	bne.n	8005e96 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	7a5b      	ldrb	r3, [r3, #9]
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d113      	bne.n	8005e78 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005e56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e5a:	d106      	bne.n	8005e6a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2102      	movs	r1, #2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f003 fcfc 	bl	8009860 <USB_InitFSLSPClkSel>
 8005e68:	e011      	b.n	8005e8e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2101      	movs	r1, #1
 8005e70:	4618      	mov	r0, r3
 8005e72:	f003 fcf5 	bl	8009860 <USB_InitFSLSPClkSel>
 8005e76:	e00a      	b.n	8005e8e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	79db      	ldrb	r3, [r3, #7]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d106      	bne.n	8005e8e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e86:	461a      	mov	r2, r3
 8005e88:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005e8c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f00c ffa0 	bl	8012dd4 <HAL_HCD_PortEnabled_Callback>
 8005e94:	e002      	b.n	8005e9c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f00c ffaa 	bl	8012df0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d103      	bne.n	8005eae <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f043 0320 	orr.w	r3, r3, #32
 8005eac:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	6013      	str	r3, [r2, #0]
}
 8005eba:	bf00      	nop
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e12b      	b.n	800612e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d106      	bne.n	8005ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7fc f9b0 	bl	8002250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2224      	movs	r2, #36	@ 0x24
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0201 	bic.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f28:	f002 fd3a 	bl	80089a0 <HAL_RCC_GetPCLK1Freq>
 8005f2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	4a81      	ldr	r2, [pc, #516]	@ (8006138 <HAL_I2C_Init+0x274>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d807      	bhi.n	8005f48 <HAL_I2C_Init+0x84>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4a80      	ldr	r2, [pc, #512]	@ (800613c <HAL_I2C_Init+0x278>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	bf94      	ite	ls
 8005f40:	2301      	movls	r3, #1
 8005f42:	2300      	movhi	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	e006      	b.n	8005f56 <HAL_I2C_Init+0x92>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4a7d      	ldr	r2, [pc, #500]	@ (8006140 <HAL_I2C_Init+0x27c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	bf94      	ite	ls
 8005f50:	2301      	movls	r3, #1
 8005f52:	2300      	movhi	r3, #0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e0e7      	b.n	800612e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4a78      	ldr	r2, [pc, #480]	@ (8006144 <HAL_I2C_Init+0x280>)
 8005f62:	fba2 2303 	umull	r2, r3, r2, r3
 8005f66:	0c9b      	lsrs	r3, r3, #18
 8005f68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	4a6a      	ldr	r2, [pc, #424]	@ (8006138 <HAL_I2C_Init+0x274>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d802      	bhi.n	8005f98 <HAL_I2C_Init+0xd4>
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	3301      	adds	r3, #1
 8005f96:	e009      	b.n	8005fac <HAL_I2C_Init+0xe8>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005f9e:	fb02 f303 	mul.w	r3, r2, r3
 8005fa2:	4a69      	ldr	r2, [pc, #420]	@ (8006148 <HAL_I2C_Init+0x284>)
 8005fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa8:	099b      	lsrs	r3, r3, #6
 8005faa:	3301      	adds	r3, #1
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6812      	ldr	r2, [r2, #0]
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005fbe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	495c      	ldr	r1, [pc, #368]	@ (8006138 <HAL_I2C_Init+0x274>)
 8005fc8:	428b      	cmp	r3, r1
 8005fca:	d819      	bhi.n	8006000 <HAL_I2C_Init+0x13c>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	1e59      	subs	r1, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fda:	1c59      	adds	r1, r3, #1
 8005fdc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005fe0:	400b      	ands	r3, r1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <HAL_I2C_Init+0x138>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	1e59      	subs	r1, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ffa:	e051      	b.n	80060a0 <HAL_I2C_Init+0x1dc>
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	e04f      	b.n	80060a0 <HAL_I2C_Init+0x1dc>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d111      	bne.n	800602c <HAL_I2C_Init+0x168>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	1e58      	subs	r0, r3, #1
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6859      	ldr	r1, [r3, #4]
 8006010:	460b      	mov	r3, r1
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	440b      	add	r3, r1
 8006016:	fbb0 f3f3 	udiv	r3, r0, r3
 800601a:	3301      	adds	r3, #1
 800601c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006020:	2b00      	cmp	r3, #0
 8006022:	bf0c      	ite	eq
 8006024:	2301      	moveq	r3, #1
 8006026:	2300      	movne	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	e012      	b.n	8006052 <HAL_I2C_Init+0x18e>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	1e58      	subs	r0, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6859      	ldr	r1, [r3, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	0099      	lsls	r1, r3, #2
 800603c:	440b      	add	r3, r1
 800603e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006042:	3301      	adds	r3, #1
 8006044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006048:	2b00      	cmp	r3, #0
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <HAL_I2C_Init+0x196>
 8006056:	2301      	movs	r3, #1
 8006058:	e022      	b.n	80060a0 <HAL_I2C_Init+0x1dc>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10e      	bne.n	8006080 <HAL_I2C_Init+0x1bc>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	1e58      	subs	r0, r3, #1
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6859      	ldr	r1, [r3, #4]
 800606a:	460b      	mov	r3, r1
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	440b      	add	r3, r1
 8006070:	fbb0 f3f3 	udiv	r3, r0, r3
 8006074:	3301      	adds	r3, #1
 8006076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800607a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800607e:	e00f      	b.n	80060a0 <HAL_I2C_Init+0x1dc>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	1e58      	subs	r0, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6859      	ldr	r1, [r3, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	0099      	lsls	r1, r3, #2
 8006090:	440b      	add	r3, r1
 8006092:	fbb0 f3f3 	udiv	r3, r0, r3
 8006096:	3301      	adds	r3, #1
 8006098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800609c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	6809      	ldr	r1, [r1, #0]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69da      	ldr	r2, [r3, #28]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80060ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	6911      	ldr	r1, [r2, #16]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	68d2      	ldr	r2, [r2, #12]
 80060da:	4311      	orrs	r1, r2
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6812      	ldr	r2, [r2, #0]
 80060e0:	430b      	orrs	r3, r1
 80060e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695a      	ldr	r2, [r3, #20]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0201 	orr.w	r2, r2, #1
 800610e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	000186a0 	.word	0x000186a0
 800613c:	001e847f 	.word	0x001e847f
 8006140:	003d08ff 	.word	0x003d08ff
 8006144:	431bde83 	.word	0x431bde83
 8006148:	10624dd3 	.word	0x10624dd3

0800614c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e021      	b.n	80061a2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2224      	movs	r2, #36	@ 0x24
 8006162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0201 	bic.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fc f8b2 	bl	80022e0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	4608      	mov	r0, r1
 80061b6:	4611      	mov	r1, r2
 80061b8:	461a      	mov	r2, r3
 80061ba:	4603      	mov	r3, r0
 80061bc:	817b      	strh	r3, [r7, #10]
 80061be:	460b      	mov	r3, r1
 80061c0:	813b      	strh	r3, [r7, #8]
 80061c2:	4613      	mov	r3, r2
 80061c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061c6:	f7fc fd21 	bl	8002c0c <HAL_GetTick>
 80061ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b20      	cmp	r3, #32
 80061d6:	f040 80d9 	bne.w	800638c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	2319      	movs	r3, #25
 80061e0:	2201      	movs	r2, #1
 80061e2:	496d      	ldr	r1, [pc, #436]	@ (8006398 <HAL_I2C_Mem_Write+0x1ec>)
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fc99 	bl	8006b1c <I2C_WaitOnFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80061f0:	2302      	movs	r3, #2
 80061f2:	e0cc      	b.n	800638e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d101      	bne.n	8006202 <HAL_I2C_Mem_Write+0x56>
 80061fe:	2302      	movs	r3, #2
 8006200:	e0c5      	b.n	800638e <HAL_I2C_Mem_Write+0x1e2>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b01      	cmp	r3, #1
 8006216:	d007      	beq.n	8006228 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0201 	orr.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006236:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2221      	movs	r2, #33	@ 0x21
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2240      	movs	r2, #64	@ 0x40
 8006244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a3a      	ldr	r2, [r7, #32]
 8006252:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006258:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4a4d      	ldr	r2, [pc, #308]	@ (800639c <HAL_I2C_Mem_Write+0x1f0>)
 8006268:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800626a:	88f8      	ldrh	r0, [r7, #6]
 800626c:	893a      	ldrh	r2, [r7, #8]
 800626e:	8979      	ldrh	r1, [r7, #10]
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	9301      	str	r3, [sp, #4]
 8006274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	4603      	mov	r3, r0
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 fad0 	bl	8006820 <I2C_RequestMemoryWrite>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d052      	beq.n	800632c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e081      	b.n	800638e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 fd5e 	bl	8006d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00d      	beq.n	80062b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d107      	bne.n	80062b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e06b      	b.n	800638e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ba:	781a      	ldrb	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062d0:	3b01      	subs	r3, #1
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	3b01      	subs	r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d11b      	bne.n	800632c <HAL_I2C_Mem_Write+0x180>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d017      	beq.n	800632c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006300:	781a      	ldrb	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006322:	b29b      	uxth	r3, r3
 8006324:	3b01      	subs	r3, #1
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1aa      	bne.n	800628a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 fd51 	bl	8006de0 <I2C_WaitOnBTFFlagUntilTimeout>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00d      	beq.n	8006360 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006348:	2b04      	cmp	r3, #4
 800634a:	d107      	bne.n	800635c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800635a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e016      	b.n	800638e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800636e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	e000      	b.n	800638e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800638c:	2302      	movs	r3, #2
  }
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	00100002 	.word	0x00100002
 800639c:	ffff0000 	.word	0xffff0000

080063a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08c      	sub	sp, #48	@ 0x30
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	4608      	mov	r0, r1
 80063aa:	4611      	mov	r1, r2
 80063ac:	461a      	mov	r2, r3
 80063ae:	4603      	mov	r3, r0
 80063b0:	817b      	strh	r3, [r7, #10]
 80063b2:	460b      	mov	r3, r1
 80063b4:	813b      	strh	r3, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063ba:	f7fc fc27 	bl	8002c0c <HAL_GetTick>
 80063be:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	f040 8214 	bne.w	80067f6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	2319      	movs	r3, #25
 80063d4:	2201      	movs	r2, #1
 80063d6:	497b      	ldr	r1, [pc, #492]	@ (80065c4 <HAL_I2C_Mem_Read+0x224>)
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 fb9f 	bl	8006b1c <I2C_WaitOnFlagUntilTimeout>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80063e4:	2302      	movs	r3, #2
 80063e6:	e207      	b.n	80067f8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_I2C_Mem_Read+0x56>
 80063f2:	2302      	movs	r3, #2
 80063f4:	e200      	b.n	80067f8 <HAL_I2C_Mem_Read+0x458>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b01      	cmp	r3, #1
 800640a:	d007      	beq.n	800641c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0201 	orr.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800642a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2222      	movs	r2, #34	@ 0x22
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2240      	movs	r2, #64	@ 0x40
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006446:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800644c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006452:	b29a      	uxth	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4a5b      	ldr	r2, [pc, #364]	@ (80065c8 <HAL_I2C_Mem_Read+0x228>)
 800645c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800645e:	88f8      	ldrh	r0, [r7, #6]
 8006460:	893a      	ldrh	r2, [r7, #8]
 8006462:	8979      	ldrh	r1, [r7, #10]
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	4603      	mov	r3, r0
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 fa6c 	bl	800694c <I2C_RequestMemoryRead>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e1bc      	b.n	80067f8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006482:	2b00      	cmp	r3, #0
 8006484:	d113      	bne.n	80064ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006486:	2300      	movs	r3, #0
 8006488:	623b      	str	r3, [r7, #32]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	623b      	str	r3, [r7, #32]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	623b      	str	r3, [r7, #32]
 800649a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	e190      	b.n	80067d0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d11b      	bne.n	80064ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064c6:	2300      	movs	r3, #0
 80064c8:	61fb      	str	r3, [r7, #28]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	61fb      	str	r3, [r7, #28]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	61fb      	str	r3, [r7, #28]
 80064da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	e170      	b.n	80067d0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d11b      	bne.n	800652e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006504:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006516:	2300      	movs	r3, #0
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	e150      	b.n	80067d0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800652e:	2300      	movs	r3, #0
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006544:	e144      	b.n	80067d0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800654a:	2b03      	cmp	r3, #3
 800654c:	f200 80f1 	bhi.w	8006732 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006554:	2b01      	cmp	r3, #1
 8006556:	d123      	bne.n	80065a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800655a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 fc87 	bl	8006e70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e145      	b.n	80067f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691a      	ldr	r2, [r3, #16]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800659e:	e117      	b.n	80067d0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d14e      	bne.n	8006646 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ae:	2200      	movs	r2, #0
 80065b0:	4906      	ldr	r1, [pc, #24]	@ (80065cc <HAL_I2C_Mem_Read+0x22c>)
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 fab2 	bl	8006b1c <I2C_WaitOnFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d008      	beq.n	80065d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e11a      	b.n	80067f8 <HAL_I2C_Mem_Read+0x458>
 80065c2:	bf00      	nop
 80065c4:	00100002 	.word	0x00100002
 80065c8:	ffff0000 	.word	0xffff0000
 80065cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691a      	ldr	r2, [r3, #16]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006608:	b29b      	uxth	r3, r3
 800660a:	3b01      	subs	r3, #1
 800660c:	b29a      	uxth	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800662e:	3b01      	subs	r3, #1
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006644:	e0c4      	b.n	80067d0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664c:	2200      	movs	r2, #0
 800664e:	496c      	ldr	r1, [pc, #432]	@ (8006800 <HAL_I2C_Mem_Read+0x460>)
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 fa63 	bl	8006b1c <I2C_WaitOnFlagUntilTimeout>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e0cb      	b.n	80067f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800666e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691a      	ldr	r2, [r3, #16]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800668c:	3b01      	subs	r3, #1
 800668e:	b29a      	uxth	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006698:	b29b      	uxth	r3, r3
 800669a:	3b01      	subs	r3, #1
 800669c:	b29a      	uxth	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	2200      	movs	r2, #0
 80066aa:	4955      	ldr	r1, [pc, #340]	@ (8006800 <HAL_I2C_Mem_Read+0x460>)
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 fa35 	bl	8006b1c <I2C_WaitOnFlagUntilTimeout>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e09d      	b.n	80067f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691a      	ldr	r2, [r3, #16]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691a      	ldr	r2, [r3, #16]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006726:	b29b      	uxth	r3, r3
 8006728:	3b01      	subs	r3, #1
 800672a:	b29a      	uxth	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006730:	e04e      	b.n	80067d0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006734:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 fb9a 	bl	8006e70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e058      	b.n	80067f8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	691a      	ldr	r2, [r3, #16]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006762:	3b01      	subs	r3, #1
 8006764:	b29a      	uxth	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800676e:	b29b      	uxth	r3, r3
 8006770:	3b01      	subs	r3, #1
 8006772:	b29a      	uxth	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	f003 0304 	and.w	r3, r3, #4
 8006782:	2b04      	cmp	r3, #4
 8006784:	d124      	bne.n	80067d0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800678a:	2b03      	cmp	r3, #3
 800678c:	d107      	bne.n	800679e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800679c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f47f aeb6 	bne.w	8006546 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2220      	movs	r2, #32
 80067de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	e000      	b.n	80067f8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80067f6:	2302      	movs	r3, #2
  }
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3728      	adds	r7, #40	@ 0x28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	00010004 	.word	0x00010004

08006804 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006812:	b2db      	uxtb	r3, r3
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af02      	add	r7, sp, #8
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	4608      	mov	r0, r1
 800682a:	4611      	mov	r1, r2
 800682c:	461a      	mov	r2, r3
 800682e:	4603      	mov	r3, r0
 8006830:	817b      	strh	r3, [r7, #10]
 8006832:	460b      	mov	r3, r1
 8006834:	813b      	strh	r3, [r7, #8]
 8006836:	4613      	mov	r3, r2
 8006838:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006848:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800684a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	2200      	movs	r2, #0
 8006852:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 f960 	bl	8006b1c <I2C_WaitOnFlagUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00d      	beq.n	800687e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800686c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006870:	d103      	bne.n	800687a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006878:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e05f      	b.n	800693e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800687e:	897b      	ldrh	r3, [r7, #10]
 8006880:	b2db      	uxtb	r3, r3
 8006882:	461a      	mov	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800688c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	6a3a      	ldr	r2, [r7, #32]
 8006892:	492d      	ldr	r1, [pc, #180]	@ (8006948 <I2C_RequestMemoryWrite+0x128>)
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f9bb 	bl	8006c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e04c      	b.n	800693e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068a4:	2300      	movs	r3, #0
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068bc:	6a39      	ldr	r1, [r7, #32]
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 fa46 	bl	8006d50 <I2C_WaitOnTXEFlagUntilTimeout>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00d      	beq.n	80068e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d107      	bne.n	80068e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e02b      	b.n	800693e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068e6:	88fb      	ldrh	r3, [r7, #6]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d105      	bne.n	80068f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068ec:	893b      	ldrh	r3, [r7, #8]
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	611a      	str	r2, [r3, #16]
 80068f6:	e021      	b.n	800693c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80068f8:	893b      	ldrh	r3, [r7, #8]
 80068fa:	0a1b      	lsrs	r3, r3, #8
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006908:	6a39      	ldr	r1, [r7, #32]
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 fa20 	bl	8006d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00d      	beq.n	8006932 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691a:	2b04      	cmp	r3, #4
 800691c:	d107      	bne.n	800692e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800692c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e005      	b.n	800693e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006932:	893b      	ldrh	r3, [r7, #8]
 8006934:	b2da      	uxtb	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	00010002 	.word	0x00010002

0800694c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af02      	add	r7, sp, #8
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	4608      	mov	r0, r1
 8006956:	4611      	mov	r1, r2
 8006958:	461a      	mov	r2, r3
 800695a:	4603      	mov	r3, r0
 800695c:	817b      	strh	r3, [r7, #10]
 800695e:	460b      	mov	r3, r1
 8006960:	813b      	strh	r3, [r7, #8]
 8006962:	4613      	mov	r3, r2
 8006964:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006974:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006984:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	2200      	movs	r2, #0
 800698e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 f8c2 	bl	8006b1c <I2C_WaitOnFlagUntilTimeout>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00d      	beq.n	80069ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ac:	d103      	bne.n	80069b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e0aa      	b.n	8006b10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069ba:	897b      	ldrh	r3, [r7, #10]
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	461a      	mov	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80069c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069cc:	6a3a      	ldr	r2, [r7, #32]
 80069ce:	4952      	ldr	r1, [pc, #328]	@ (8006b18 <I2C_RequestMemoryRead+0x1cc>)
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 f91d 	bl	8006c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e097      	b.n	8006b10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069e0:	2300      	movs	r3, #0
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069f8:	6a39      	ldr	r1, [r7, #32]
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 f9a8 	bl	8006d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00d      	beq.n	8006a22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d107      	bne.n	8006a1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e076      	b.n	8006b10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a22:	88fb      	ldrh	r3, [r7, #6]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d105      	bne.n	8006a34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a28:	893b      	ldrh	r3, [r7, #8]
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	611a      	str	r2, [r3, #16]
 8006a32:	e021      	b.n	8006a78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a34:	893b      	ldrh	r3, [r7, #8]
 8006a36:	0a1b      	lsrs	r3, r3, #8
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a44:	6a39      	ldr	r1, [r7, #32]
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 f982 	bl	8006d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00d      	beq.n	8006a6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	d107      	bne.n	8006a6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e050      	b.n	8006b10 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a6e:	893b      	ldrh	r3, [r7, #8]
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a7a:	6a39      	ldr	r1, [r7, #32]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f967 	bl	8006d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00d      	beq.n	8006aa4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	d107      	bne.n	8006aa0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e035      	b.n	8006b10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ab2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 f82b 	bl	8006b1c <I2C_WaitOnFlagUntilTimeout>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00d      	beq.n	8006ae8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ada:	d103      	bne.n	8006ae4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ae2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e013      	b.n	8006b10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ae8:	897b      	ldrh	r3, [r7, #10]
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	f043 0301 	orr.w	r3, r3, #1
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afa:	6a3a      	ldr	r2, [r7, #32]
 8006afc:	4906      	ldr	r1, [pc, #24]	@ (8006b18 <I2C_RequestMemoryRead+0x1cc>)
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 f886 	bl	8006c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e000      	b.n	8006b10 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3718      	adds	r7, #24
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	00010002 	.word	0x00010002

08006b1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	603b      	str	r3, [r7, #0]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b2c:	e048      	b.n	8006bc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b34:	d044      	beq.n	8006bc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b36:	f7fc f869 	bl	8002c0c <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d302      	bcc.n	8006b4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d139      	bne.n	8006bc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	0c1b      	lsrs	r3, r3, #16
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d10d      	bne.n	8006b72 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	43da      	mvns	r2, r3
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	4013      	ands	r3, r2
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	bf0c      	ite	eq
 8006b68:	2301      	moveq	r3, #1
 8006b6a:	2300      	movne	r3, #0
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	461a      	mov	r2, r3
 8006b70:	e00c      	b.n	8006b8c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	43da      	mvns	r2, r3
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	bf0c      	ite	eq
 8006b84:	2301      	moveq	r3, #1
 8006b86:	2300      	movne	r3, #0
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d116      	bne.n	8006bc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bac:	f043 0220 	orr.w	r2, r3, #32
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e023      	b.n	8006c08 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	0c1b      	lsrs	r3, r3, #16
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d10d      	bne.n	8006be6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	43da      	mvns	r2, r3
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	bf0c      	ite	eq
 8006bdc:	2301      	moveq	r3, #1
 8006bde:	2300      	movne	r3, #0
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	461a      	mov	r2, r3
 8006be4:	e00c      	b.n	8006c00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	43da      	mvns	r2, r3
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	bf0c      	ite	eq
 8006bf8:	2301      	moveq	r3, #1
 8006bfa:	2300      	movne	r3, #0
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	461a      	mov	r2, r3
 8006c00:	79fb      	ldrb	r3, [r7, #7]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d093      	beq.n	8006b2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c1e:	e071      	b.n	8006d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c2e:	d123      	bne.n	8006c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c3e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c64:	f043 0204 	orr.w	r2, r3, #4
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e067      	b.n	8006d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7e:	d041      	beq.n	8006d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c80:	f7fb ffc4 	bl	8002c0c <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d302      	bcc.n	8006c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d136      	bne.n	8006d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	0c1b      	lsrs	r3, r3, #16
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d10c      	bne.n	8006cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	43da      	mvns	r2, r3
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	4013      	ands	r3, r2
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	bf14      	ite	ne
 8006cb2:	2301      	movne	r3, #1
 8006cb4:	2300      	moveq	r3, #0
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	e00b      	b.n	8006cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	43da      	mvns	r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	bf14      	ite	ne
 8006ccc:	2301      	movne	r3, #1
 8006cce:	2300      	moveq	r3, #0
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d016      	beq.n	8006d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf0:	f043 0220 	orr.w	r2, r3, #32
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e021      	b.n	8006d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	0c1b      	lsrs	r3, r3, #16
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d10c      	bne.n	8006d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	43da      	mvns	r2, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	4013      	ands	r3, r2
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	bf14      	ite	ne
 8006d20:	2301      	movne	r3, #1
 8006d22:	2300      	moveq	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	e00b      	b.n	8006d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	43da      	mvns	r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4013      	ands	r3, r2
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bf14      	ite	ne
 8006d3a:	2301      	movne	r3, #1
 8006d3c:	2300      	moveq	r3, #0
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f47f af6d 	bne.w	8006c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d5c:	e034      	b.n	8006dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 f8e3 	bl	8006f2a <I2C_IsAcknowledgeFailed>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e034      	b.n	8006dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d74:	d028      	beq.n	8006dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d76:	f7fb ff49 	bl	8002c0c <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d302      	bcc.n	8006d8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d11d      	bne.n	8006dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d96:	2b80      	cmp	r3, #128	@ 0x80
 8006d98:	d016      	beq.n	8006dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db4:	f043 0220 	orr.w	r2, r3, #32
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e007      	b.n	8006dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dd2:	2b80      	cmp	r3, #128	@ 0x80
 8006dd4:	d1c3      	bne.n	8006d5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006dec:	e034      	b.n	8006e58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 f89b 	bl	8006f2a <I2C_IsAcknowledgeFailed>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e034      	b.n	8006e68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e04:	d028      	beq.n	8006e58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e06:	f7fb ff01 	bl	8002c0c <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d302      	bcc.n	8006e1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d11d      	bne.n	8006e58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	f003 0304 	and.w	r3, r3, #4
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	d016      	beq.n	8006e58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e44:	f043 0220 	orr.w	r2, r3, #32
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e007      	b.n	8006e68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	f003 0304 	and.w	r3, r3, #4
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d1c3      	bne.n	8006dee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e7c:	e049      	b.n	8006f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	f003 0310 	and.w	r3, r3, #16
 8006e88:	2b10      	cmp	r3, #16
 8006e8a:	d119      	bne.n	8006ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f06f 0210 	mvn.w	r2, #16
 8006e94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e030      	b.n	8006f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec0:	f7fb fea4 	bl	8002c0c <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d302      	bcc.n	8006ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d11d      	bne.n	8006f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee0:	2b40      	cmp	r3, #64	@ 0x40
 8006ee2:	d016      	beq.n	8006f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2220      	movs	r2, #32
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efe:	f043 0220 	orr.w	r2, r3, #32
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e007      	b.n	8006f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f1c:	2b40      	cmp	r3, #64	@ 0x40
 8006f1e:	d1ae      	bne.n	8006e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f40:	d11b      	bne.n	8006f7a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f4a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2220      	movs	r2, #32
 8006f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f66:	f043 0204 	orr.w	r2, r3, #4
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e128      	b.n	80071ec <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d109      	bne.n	8006fba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a90      	ldr	r2, [pc, #576]	@ (80071f4 <HAL_I2S_Init+0x26c>)
 8006fb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7fb f9b5 	bl	8002324 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6812      	ldr	r2, [r2, #0]
 8006fcc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006fd0:	f023 030f 	bic.w	r3, r3, #15
 8006fd4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d060      	beq.n	80070a8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d102      	bne.n	8006ff4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006fee:	2310      	movs	r3, #16
 8006ff0:	617b      	str	r3, [r7, #20]
 8006ff2:	e001      	b.n	8006ff8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006ff4:	2320      	movs	r3, #32
 8006ff6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	2b20      	cmp	r3, #32
 8006ffe:	d802      	bhi.n	8007006 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8007006:	2001      	movs	r0, #1
 8007008:	f001 fe00 	bl	8008c0c <HAL_RCCEx_GetPeriphCLKFreq>
 800700c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007016:	d125      	bne.n	8007064 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d010      	beq.n	8007042 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	fbb2 f2f3 	udiv	r2, r2, r3
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	461a      	mov	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	fbb2 f3f3 	udiv	r3, r2, r3
 800703c:	3305      	adds	r3, #5
 800703e:	613b      	str	r3, [r7, #16]
 8007040:	e01f      	b.n	8007082 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	fbb2 f2f3 	udiv	r2, r2, r3
 800704c:	4613      	mov	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	461a      	mov	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	fbb2 f3f3 	udiv	r3, r2, r3
 800705e:	3305      	adds	r3, #5
 8007060:	613b      	str	r3, [r7, #16]
 8007062:	e00e      	b.n	8007082 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	fbb2 f2f3 	udiv	r2, r2, r3
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	461a      	mov	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	fbb2 f3f3 	udiv	r3, r2, r3
 800707e:	3305      	adds	r3, #5
 8007080:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	4a5c      	ldr	r2, [pc, #368]	@ (80071f8 <HAL_I2S_Init+0x270>)
 8007086:	fba2 2303 	umull	r2, r3, r2, r3
 800708a:	08db      	lsrs	r3, r3, #3
 800708c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	085b      	lsrs	r3, r3, #1
 800709e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	021b      	lsls	r3, r3, #8
 80070a4:	61bb      	str	r3, [r7, #24]
 80070a6:	e003      	b.n	80070b0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80070a8:	2302      	movs	r3, #2
 80070aa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d902      	bls.n	80070bc <HAL_I2S_Init+0x134>
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	2bff      	cmp	r3, #255	@ 0xff
 80070ba:	d907      	bls.n	80070cc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c0:	f043 0210 	orr.w	r2, r3, #16
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e08f      	b.n	80071ec <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691a      	ldr	r2, [r3, #16]
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	ea42 0103 	orr.w	r1, r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	69fa      	ldr	r2, [r7, #28]
 80070dc:	430a      	orrs	r2, r1
 80070de:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80070ea:	f023 030f 	bic.w	r3, r3, #15
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6851      	ldr	r1, [r2, #4]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6892      	ldr	r2, [r2, #8]
 80070f6:	4311      	orrs	r1, r2
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	68d2      	ldr	r2, [r2, #12]
 80070fc:	4311      	orrs	r1, r2
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	6992      	ldr	r2, [r2, #24]
 8007102:	430a      	orrs	r2, r1
 8007104:	431a      	orrs	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800710e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d161      	bne.n	80071dc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a38      	ldr	r2, [pc, #224]	@ (80071fc <HAL_I2S_Init+0x274>)
 800711c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a37      	ldr	r2, [pc, #220]	@ (8007200 <HAL_I2S_Init+0x278>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d101      	bne.n	800712c <HAL_I2S_Init+0x1a4>
 8007128:	4b36      	ldr	r3, [pc, #216]	@ (8007204 <HAL_I2S_Init+0x27c>)
 800712a:	e001      	b.n	8007130 <HAL_I2S_Init+0x1a8>
 800712c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	6812      	ldr	r2, [r2, #0]
 8007136:	4932      	ldr	r1, [pc, #200]	@ (8007200 <HAL_I2S_Init+0x278>)
 8007138:	428a      	cmp	r2, r1
 800713a:	d101      	bne.n	8007140 <HAL_I2S_Init+0x1b8>
 800713c:	4a31      	ldr	r2, [pc, #196]	@ (8007204 <HAL_I2S_Init+0x27c>)
 800713e:	e001      	b.n	8007144 <HAL_I2S_Init+0x1bc>
 8007140:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8007144:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8007148:	f023 030f 	bic.w	r3, r3, #15
 800714c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a2b      	ldr	r2, [pc, #172]	@ (8007200 <HAL_I2S_Init+0x278>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d101      	bne.n	800715c <HAL_I2S_Init+0x1d4>
 8007158:	4b2a      	ldr	r3, [pc, #168]	@ (8007204 <HAL_I2S_Init+0x27c>)
 800715a:	e001      	b.n	8007160 <HAL_I2S_Init+0x1d8>
 800715c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007160:	2202      	movs	r2, #2
 8007162:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a25      	ldr	r2, [pc, #148]	@ (8007200 <HAL_I2S_Init+0x278>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d101      	bne.n	8007172 <HAL_I2S_Init+0x1ea>
 800716e:	4b25      	ldr	r3, [pc, #148]	@ (8007204 <HAL_I2S_Init+0x27c>)
 8007170:	e001      	b.n	8007176 <HAL_I2S_Init+0x1ee>
 8007172:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007182:	d003      	beq.n	800718c <HAL_I2S_Init+0x204>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d103      	bne.n	8007194 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800718c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007190:	613b      	str	r3, [r7, #16]
 8007192:	e001      	b.n	8007198 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8007194:	2300      	movs	r3, #0
 8007196:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80071a2:	4313      	orrs	r3, r2
 80071a4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80071ac:	4313      	orrs	r3, r2
 80071ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80071b6:	4313      	orrs	r3, r2
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	897b      	ldrh	r3, [r7, #10]
 80071bc:	4313      	orrs	r3, r2
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80071c4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a0d      	ldr	r2, [pc, #52]	@ (8007200 <HAL_I2S_Init+0x278>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d101      	bne.n	80071d4 <HAL_I2S_Init+0x24c>
 80071d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007204 <HAL_I2S_Init+0x27c>)
 80071d2:	e001      	b.n	80071d8 <HAL_I2S_Init+0x250>
 80071d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80071d8:	897a      	ldrh	r2, [r7, #10]
 80071da:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3720      	adds	r7, #32
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	08007a85 	.word	0x08007a85
 80071f8:	cccccccd 	.word	0xcccccccd
 80071fc:	08007c0d 	.word	0x08007c0d
 8007200:	40003800 	.word	0x40003800
 8007204:	40003400 	.word	0x40003400

08007208 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	4613      	mov	r3, r2
 8007214:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <HAL_I2S_Transmit_DMA+0x1a>
 800721c:	88fb      	ldrh	r3, [r7, #6]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e08a      	b.n	800733c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b01      	cmp	r3, #1
 8007230:	d001      	beq.n	8007236 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8007232:	2302      	movs	r3, #2
 8007234:	e082      	b.n	800733c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b01      	cmp	r3, #1
 8007240:	d101      	bne.n	8007246 <HAL_I2S_Transmit_DMA+0x3e>
 8007242:	2302      	movs	r3, #2
 8007244:	e07a      	b.n	800733c <HAL_I2S_Transmit_DMA+0x134>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2203      	movs	r2, #3
 8007252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2b03      	cmp	r3, #3
 8007272:	d002      	beq.n	800727a <HAL_I2S_Transmit_DMA+0x72>
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	2b05      	cmp	r3, #5
 8007278:	d10a      	bne.n	8007290 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800727a:	88fb      	ldrh	r3, [r7, #6]
 800727c:	005b      	lsls	r3, r3, #1
 800727e:	b29a      	uxth	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8007284:	88fb      	ldrh	r3, [r7, #6]
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	b29a      	uxth	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800728e:	e005      	b.n	800729c <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	88fa      	ldrh	r2, [r7, #6]
 8007294:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	88fa      	ldrh	r2, [r7, #6]
 800729a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a0:	4a28      	ldr	r2, [pc, #160]	@ (8007344 <HAL_I2S_Transmit_DMA+0x13c>)
 80072a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a8:	4a27      	ldr	r2, [pc, #156]	@ (8007348 <HAL_I2S_Transmit_DMA+0x140>)
 80072aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b0:	4a26      	ldr	r2, [pc, #152]	@ (800734c <HAL_I2S_Transmit_DMA+0x144>)
 80072b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80072bc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80072c4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80072cc:	f7fb feec 	bl	80030a8 <HAL_DMA_Start_IT>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00f      	beq.n	80072f6 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072da:	f043 0208 	orr.w	r2, r3, #8
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e022      	b.n	800733c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d107      	bne.n	800731c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0202 	orr.w	r2, r2, #2
 800731a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007326:	2b00      	cmp	r3, #0
 8007328:	d107      	bne.n	800733a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69da      	ldr	r2, [r3, #28]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007338:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	08007963 	.word	0x08007963
 8007348:	08007921 	.word	0x08007921
 800734c:	0800797f 	.word	0x0800797f

08007350 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b01      	cmp	r3, #1
 8007362:	d101      	bne.n	8007368 <HAL_I2S_DMAPause+0x18>
 8007364:	2302      	movs	r3, #2
 8007366:	e04a      	b.n	80073fe <HAL_I2S_DMAPause+0xae>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b03      	cmp	r3, #3
 800737a:	d108      	bne.n	800738e <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 0202 	bic.w	r2, r2, #2
 800738a:	605a      	str	r2, [r3, #4]
 800738c:	e032      	b.n	80073f4 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b04      	cmp	r3, #4
 8007398:	d108      	bne.n	80073ac <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0201 	bic.w	r2, r2, #1
 80073a8:	605a      	str	r2, [r3, #4]
 80073aa:	e023      	b.n	80073f4 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b05      	cmp	r3, #5
 80073b6:	d11d      	bne.n	80073f4 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 0203 	bic.w	r2, r2, #3
 80073c6:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a0f      	ldr	r2, [pc, #60]	@ (800740c <HAL_I2S_DMAPause+0xbc>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d101      	bne.n	80073d6 <HAL_I2S_DMAPause+0x86>
 80073d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007410 <HAL_I2S_DMAPause+0xc0>)
 80073d4:	e001      	b.n	80073da <HAL_I2S_DMAPause+0x8a>
 80073d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	490a      	ldr	r1, [pc, #40]	@ (800740c <HAL_I2S_DMAPause+0xbc>)
 80073e2:	428b      	cmp	r3, r1
 80073e4:	d101      	bne.n	80073ea <HAL_I2S_DMAPause+0x9a>
 80073e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007410 <HAL_I2S_DMAPause+0xc0>)
 80073e8:	e001      	b.n	80073ee <HAL_I2S_DMAPause+0x9e>
 80073ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073ee:	f022 0203 	bic.w	r2, r2, #3
 80073f2:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	40003800 	.word	0x40003800
 8007410:	40003400 	.word	0x40003400

08007414 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b01      	cmp	r3, #1
 8007426:	d101      	bne.n	800742c <HAL_I2S_DMAResume+0x18>
 8007428:	2302      	movs	r3, #2
 800742a:	e07d      	b.n	8007528 <HAL_I2S_DMAResume+0x114>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b03      	cmp	r3, #3
 800743e:	d108      	bne.n	8007452 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f042 0202 	orr.w	r2, r2, #2
 800744e:	605a      	str	r2, [r3, #4]
 8007450:	e056      	b.n	8007500 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b04      	cmp	r3, #4
 800745c:	d108      	bne.n	8007470 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f042 0201 	orr.w	r2, r2, #1
 800746c:	605a      	str	r2, [r3, #4]
 800746e:	e047      	b.n	8007500 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b05      	cmp	r3, #5
 800747a:	d141      	bne.n	8007500 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f042 0203 	orr.w	r2, r2, #3
 800748a:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a28      	ldr	r2, [pc, #160]	@ (8007534 <HAL_I2S_DMAResume+0x120>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d101      	bne.n	800749a <HAL_I2S_DMAResume+0x86>
 8007496:	4b28      	ldr	r3, [pc, #160]	@ (8007538 <HAL_I2S_DMAResume+0x124>)
 8007498:	e001      	b.n	800749e <HAL_I2S_DMAResume+0x8a>
 800749a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4923      	ldr	r1, [pc, #140]	@ (8007534 <HAL_I2S_DMAResume+0x120>)
 80074a6:	428b      	cmp	r3, r1
 80074a8:	d101      	bne.n	80074ae <HAL_I2S_DMAResume+0x9a>
 80074aa:	4b23      	ldr	r3, [pc, #140]	@ (8007538 <HAL_I2S_DMAResume+0x124>)
 80074ac:	e001      	b.n	80074b2 <HAL_I2S_DMAResume+0x9e>
 80074ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074b2:	f042 0203 	orr.w	r2, r2, #3
 80074b6:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a1d      	ldr	r2, [pc, #116]	@ (8007534 <HAL_I2S_DMAResume+0x120>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d101      	bne.n	80074c6 <HAL_I2S_DMAResume+0xb2>
 80074c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007538 <HAL_I2S_DMAResume+0x124>)
 80074c4:	e001      	b.n	80074ca <HAL_I2S_DMAResume+0xb6>
 80074c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074ca:	69db      	ldr	r3, [r3, #28]
 80074cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d115      	bne.n	8007500 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a16      	ldr	r2, [pc, #88]	@ (8007534 <HAL_I2S_DMAResume+0x120>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d101      	bne.n	80074e2 <HAL_I2S_DMAResume+0xce>
 80074de:	4b16      	ldr	r3, [pc, #88]	@ (8007538 <HAL_I2S_DMAResume+0x124>)
 80074e0:	e001      	b.n	80074e6 <HAL_I2S_DMAResume+0xd2>
 80074e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074e6:	69da      	ldr	r2, [r3, #28]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4911      	ldr	r1, [pc, #68]	@ (8007534 <HAL_I2S_DMAResume+0x120>)
 80074ee:	428b      	cmp	r3, r1
 80074f0:	d101      	bne.n	80074f6 <HAL_I2S_DMAResume+0xe2>
 80074f2:	4b11      	ldr	r3, [pc, #68]	@ (8007538 <HAL_I2S_DMAResume+0x124>)
 80074f4:	e001      	b.n	80074fa <HAL_I2S_DMAResume+0xe6>
 80074f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80074fe:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800750a:	2b00      	cmp	r3, #0
 800750c:	d107      	bne.n	800751e <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69da      	ldr	r2, [r3, #28]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800751c:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	40003800 	.word	0x40003800
 8007538:	40003400 	.word	0x40003400

0800753c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b088      	sub	sp, #32
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007550:	d004      	beq.n	800755c <HAL_I2S_DMAStop+0x20>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f040 80d1 	bne.w	80076fe <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00f      	beq.n	8007584 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007568:	4618      	mov	r0, r3
 800756a:	f7fb fdf5 	bl	8003158 <HAL_DMA_Abort>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d007      	beq.n	8007584 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007578:	f043 0208 	orr.w	r2, r3, #8
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8007584:	2364      	movs	r3, #100	@ 0x64
 8007586:	2201      	movs	r2, #1
 8007588:	2102      	movs	r1, #2
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fb04 	bl	8007b98 <I2S_WaitFlagStateUntilTimeout>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00b      	beq.n	80075ae <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800759a:	f043 0201 	orr.w	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80075ae:	2364      	movs	r3, #100	@ 0x64
 80075b0:	2200      	movs	r2, #0
 80075b2:	2180      	movs	r1, #128	@ 0x80
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 faef 	bl	8007b98 <I2S_WaitFlagStateUntilTimeout>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00b      	beq.n	80075d8 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075c4:	f043 0201 	orr.w	r2, r3, #1
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	69da      	ldr	r2, [r3, #28]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075e6:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80075e8:	2300      	movs	r3, #0
 80075ea:	617b      	str	r3, [r7, #20]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0202 	bic.w	r2, r2, #2
 8007604:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b05      	cmp	r3, #5
 8007610:	f040 8165 	bne.w	80078de <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00f      	beq.n	800763c <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007620:	4618      	mov	r0, r3
 8007622:	f7fb fd99 	bl	8003158 <HAL_DMA_Abort>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d007      	beq.n	800763c <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007630:	f043 0208 	orr.w	r2, r3, #8
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a8a      	ldr	r2, [pc, #552]	@ (800786c <HAL_I2S_DMAStop+0x330>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d101      	bne.n	800764a <HAL_I2S_DMAStop+0x10e>
 8007646:	4b8a      	ldr	r3, [pc, #552]	@ (8007870 <HAL_I2S_DMAStop+0x334>)
 8007648:	e001      	b.n	800764e <HAL_I2S_DMAStop+0x112>
 800764a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800764e:	69da      	ldr	r2, [r3, #28]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4985      	ldr	r1, [pc, #532]	@ (800786c <HAL_I2S_DMAStop+0x330>)
 8007656:	428b      	cmp	r3, r1
 8007658:	d101      	bne.n	800765e <HAL_I2S_DMAStop+0x122>
 800765a:	4b85      	ldr	r3, [pc, #532]	@ (8007870 <HAL_I2S_DMAStop+0x334>)
 800765c:	e001      	b.n	8007662 <HAL_I2S_DMAStop+0x126>
 800765e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007662:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007666:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8007668:	2300      	movs	r3, #0
 800766a:	613b      	str	r3, [r7, #16]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a7e      	ldr	r2, [pc, #504]	@ (800786c <HAL_I2S_DMAStop+0x330>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d101      	bne.n	800767a <HAL_I2S_DMAStop+0x13e>
 8007676:	4b7e      	ldr	r3, [pc, #504]	@ (8007870 <HAL_I2S_DMAStop+0x334>)
 8007678:	e001      	b.n	800767e <HAL_I2S_DMAStop+0x142>
 800767a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	613b      	str	r3, [r7, #16]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a79      	ldr	r2, [pc, #484]	@ (800786c <HAL_I2S_DMAStop+0x330>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d101      	bne.n	8007690 <HAL_I2S_DMAStop+0x154>
 800768c:	4b78      	ldr	r3, [pc, #480]	@ (8007870 <HAL_I2S_DMAStop+0x334>)
 800768e:	e001      	b.n	8007694 <HAL_I2S_DMAStop+0x158>
 8007690:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	613b      	str	r3, [r7, #16]
 8007698:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a73      	ldr	r2, [pc, #460]	@ (800786c <HAL_I2S_DMAStop+0x330>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d101      	bne.n	80076a8 <HAL_I2S_DMAStop+0x16c>
 80076a4:	4b72      	ldr	r3, [pc, #456]	@ (8007870 <HAL_I2S_DMAStop+0x334>)
 80076a6:	e001      	b.n	80076ac <HAL_I2S_DMAStop+0x170>
 80076a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	496e      	ldr	r1, [pc, #440]	@ (800786c <HAL_I2S_DMAStop+0x330>)
 80076b4:	428b      	cmp	r3, r1
 80076b6:	d101      	bne.n	80076bc <HAL_I2S_DMAStop+0x180>
 80076b8:	4b6d      	ldr	r3, [pc, #436]	@ (8007870 <HAL_I2S_DMAStop+0x334>)
 80076ba:	e001      	b.n	80076c0 <HAL_I2S_DMAStop+0x184>
 80076bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076c0:	f022 0201 	bic.w	r2, r2, #1
 80076c4:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10c      	bne.n	80076e8 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80076e6:	e0fa      	b.n	80078de <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a5f      	ldr	r2, [pc, #380]	@ (800786c <HAL_I2S_DMAStop+0x330>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d101      	bne.n	80076f6 <HAL_I2S_DMAStop+0x1ba>
 80076f2:	4b5f      	ldr	r3, [pc, #380]	@ (8007870 <HAL_I2S_DMAStop+0x334>)
 80076f4:	e001      	b.n	80076fa <HAL_I2S_DMAStop+0x1be>
 80076f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076fa:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80076fc:	e0ef      	b.n	80078de <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007706:	d005      	beq.n	8007714 <HAL_I2S_DMAStop+0x1d8>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007710:	f040 80e5 	bne.w	80078de <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00f      	beq.n	800773c <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007720:	4618      	mov	r0, r3
 8007722:	f7fb fd19 	bl	8003158 <HAL_DMA_Abort>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d007      	beq.n	800773c <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007730:	f043 0208 	orr.w	r2, r3, #8
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b05      	cmp	r3, #5
 8007746:	f040 809a 	bne.w	800787e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00f      	beq.n	8007772 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007756:	4618      	mov	r0, r3
 8007758:	f7fb fcfe 	bl	8003158 <HAL_DMA_Abort>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d007      	beq.n	8007772 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007766:	f043 0208 	orr.w	r2, r3, #8
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8007772:	f7fb fa4b 	bl	8002c0c <HAL_GetTick>
 8007776:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007778:	e012      	b.n	80077a0 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800777a:	f7fb fa47 	bl	8002c0c <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b64      	cmp	r3, #100	@ 0x64
 8007786:	d90b      	bls.n	80077a0 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800778c:	f043 0201 	orr.w	r2, r3, #1
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a31      	ldr	r2, [pc, #196]	@ (800786c <HAL_I2S_DMAStop+0x330>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d101      	bne.n	80077ae <HAL_I2S_DMAStop+0x272>
 80077aa:	4b31      	ldr	r3, [pc, #196]	@ (8007870 <HAL_I2S_DMAStop+0x334>)
 80077ac:	e001      	b.n	80077b2 <HAL_I2S_DMAStop+0x276>
 80077ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d1de      	bne.n	800777a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80077bc:	e012      	b.n	80077e4 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80077be:	f7fb fa25 	bl	8002c0c <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	2b64      	cmp	r3, #100	@ 0x64
 80077ca:	d90b      	bls.n	80077e4 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077d0:	f043 0201 	orr.w	r2, r3, #1
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a20      	ldr	r2, [pc, #128]	@ (800786c <HAL_I2S_DMAStop+0x330>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d101      	bne.n	80077f2 <HAL_I2S_DMAStop+0x2b6>
 80077ee:	4b20      	ldr	r3, [pc, #128]	@ (8007870 <HAL_I2S_DMAStop+0x334>)
 80077f0:	e001      	b.n	80077f6 <HAL_I2S_DMAStop+0x2ba>
 80077f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077fc:	2b80      	cmp	r3, #128	@ 0x80
 80077fe:	d0de      	beq.n	80077be <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a19      	ldr	r2, [pc, #100]	@ (800786c <HAL_I2S_DMAStop+0x330>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d101      	bne.n	800780e <HAL_I2S_DMAStop+0x2d2>
 800780a:	4b19      	ldr	r3, [pc, #100]	@ (8007870 <HAL_I2S_DMAStop+0x334>)
 800780c:	e001      	b.n	8007812 <HAL_I2S_DMAStop+0x2d6>
 800780e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007812:	69da      	ldr	r2, [r3, #28]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4914      	ldr	r1, [pc, #80]	@ (800786c <HAL_I2S_DMAStop+0x330>)
 800781a:	428b      	cmp	r3, r1
 800781c:	d101      	bne.n	8007822 <HAL_I2S_DMAStop+0x2e6>
 800781e:	4b14      	ldr	r3, [pc, #80]	@ (8007870 <HAL_I2S_DMAStop+0x334>)
 8007820:	e001      	b.n	8007826 <HAL_I2S_DMAStop+0x2ea>
 8007822:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007826:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800782a:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a0d      	ldr	r2, [pc, #52]	@ (800786c <HAL_I2S_DMAStop+0x330>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d101      	bne.n	800783e <HAL_I2S_DMAStop+0x302>
 800783a:	4b0d      	ldr	r3, [pc, #52]	@ (8007870 <HAL_I2S_DMAStop+0x334>)
 800783c:	e001      	b.n	8007842 <HAL_I2S_DMAStop+0x306>
 800783e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	60fb      	str	r3, [r7, #12]
 8007846:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a07      	ldr	r2, [pc, #28]	@ (800786c <HAL_I2S_DMAStop+0x330>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d101      	bne.n	8007856 <HAL_I2S_DMAStop+0x31a>
 8007852:	4b07      	ldr	r3, [pc, #28]	@ (8007870 <HAL_I2S_DMAStop+0x334>)
 8007854:	e001      	b.n	800785a <HAL_I2S_DMAStop+0x31e>
 8007856:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4902      	ldr	r1, [pc, #8]	@ (800786c <HAL_I2S_DMAStop+0x330>)
 8007862:	428b      	cmp	r3, r1
 8007864:	d106      	bne.n	8007874 <HAL_I2S_DMAStop+0x338>
 8007866:	4b02      	ldr	r3, [pc, #8]	@ (8007870 <HAL_I2S_DMAStop+0x334>)
 8007868:	e006      	b.n	8007878 <HAL_I2S_DMAStop+0x33c>
 800786a:	bf00      	nop
 800786c:	40003800 	.word	0x40003800
 8007870:	40003400 	.word	0x40003400
 8007874:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007878:	f022 0202 	bic.w	r2, r2, #2
 800787c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	69da      	ldr	r2, [r3, #28]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800788c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800788e:	2300      	movs	r3, #0
 8007890:	60bb      	str	r3, [r7, #8]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	60bb      	str	r3, [r7, #8]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	60bb      	str	r3, [r7, #8]
 80078a2:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 0201 	bic.w	r2, r2, #1
 80078b2:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078bc:	d10c      	bne.n	80078d8 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	77fb      	strb	r3, [r7, #31]
 80078d6:	e002      	b.n	80078de <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 80078e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3720      	adds	r7, #32
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(const I2S_HandleTypeDef *hi2s)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007912:	b2db      	uxtb	r3, r3
}
 8007914:	4618      	mov	r0, r3
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10e      	bne.n	8007954 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 0202 	bic.w	r2, r2, #2
 8007944:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f7f9 fba1 	bl	800109c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800795a:	bf00      	nop
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f7f9 fba5 	bl	80010c0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007976:	bf00      	nop
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0203 	bic.w	r2, r2, #3
 800799a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079b4:	f043 0208 	orr.w	r2, r3, #8
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f7f9 fceb 	bl	8001398 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d6:	881a      	ldrh	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e2:	1c9a      	adds	r2, r3, #2
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	3b01      	subs	r3, #1
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10e      	bne.n	8007a1e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007a0e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7f9 fb3f 	bl	800109c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007a1e:	bf00      	nop
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b082      	sub	sp, #8
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a38:	b292      	uxth	r2, r2
 8007a3a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a40:	1c9a      	adds	r2, r3, #2
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10e      	bne.n	8007a7c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007a6c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7ff ff3a 	bl	80078f0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007a7c:	bf00      	nop
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	d13a      	bne.n	8007b16 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d109      	bne.n	8007abe <I2S_IRQHandler+0x3a>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ab4:	2b40      	cmp	r3, #64	@ 0x40
 8007ab6:	d102      	bne.n	8007abe <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7ff ffb4 	bl	8007a26 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac4:	2b40      	cmp	r3, #64	@ 0x40
 8007ac6:	d126      	bne.n	8007b16 <I2S_IRQHandler+0x92>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f003 0320 	and.w	r3, r3, #32
 8007ad2:	2b20      	cmp	r3, #32
 8007ad4:	d11f      	bne.n	8007b16 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007ae4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	613b      	str	r3, [r7, #16]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	613b      	str	r3, [r7, #16]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	613b      	str	r3, [r7, #16]
 8007afa:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b08:	f043 0202 	orr.w	r2, r3, #2
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7f9 fc41 	bl	8001398 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d136      	bne.n	8007b90 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f003 0302 	and.w	r3, r3, #2
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d109      	bne.n	8007b40 <I2S_IRQHandler+0xbc>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b36:	2b80      	cmp	r3, #128	@ 0x80
 8007b38:	d102      	bne.n	8007b40 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7ff ff45 	bl	80079ca <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f003 0308 	and.w	r3, r3, #8
 8007b46:	2b08      	cmp	r3, #8
 8007b48:	d122      	bne.n	8007b90 <I2S_IRQHandler+0x10c>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f003 0320 	and.w	r3, r3, #32
 8007b54:	2b20      	cmp	r3, #32
 8007b56:	d11b      	bne.n	8007b90 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007b66:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b82:	f043 0204 	orr.w	r2, r3, #4
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7f9 fc04 	bl	8001398 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007b90:	bf00      	nop
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ba8:	f7fb f830 	bl	8002c0c <HAL_GetTick>
 8007bac:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007bae:	e018      	b.n	8007be2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb6:	d014      	beq.n	8007be2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8007bb8:	f7fb f828 	bl	8002c0c <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d902      	bls.n	8007bce <I2S_WaitFlagStateUntilTimeout+0x36>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d109      	bne.n	8007be2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e00f      	b.n	8007c02 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	4013      	ands	r3, r2
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	bf0c      	ite	eq
 8007bf2:	2301      	moveq	r3, #1
 8007bf4:	2300      	movne	r3, #0
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d1d7      	bne.n	8007bb0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a92      	ldr	r2, [pc, #584]	@ (8007e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d101      	bne.n	8007c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007c26:	4b92      	ldr	r3, [pc, #584]	@ (8007e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007c28:	e001      	b.n	8007c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007c2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a8b      	ldr	r2, [pc, #556]	@ (8007e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d101      	bne.n	8007c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007c44:	4b8a      	ldr	r3, [pc, #552]	@ (8007e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007c46:	e001      	b.n	8007c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007c48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c58:	d004      	beq.n	8007c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f040 8099 	bne.w	8007d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d107      	bne.n	8007c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f925 	bl	8007ec8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d107      	bne.n	8007c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f9c8 	bl	8008028 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c9e:	2b40      	cmp	r3, #64	@ 0x40
 8007ca0:	d13a      	bne.n	8007d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	f003 0320 	and.w	r3, r3, #32
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d035      	beq.n	8007d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a6e      	ldr	r2, [pc, #440]	@ (8007e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d101      	bne.n	8007cba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007cb6:	4b6e      	ldr	r3, [pc, #440]	@ (8007e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007cb8:	e001      	b.n	8007cbe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007cba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007cbe:	685a      	ldr	r2, [r3, #4]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4969      	ldr	r1, [pc, #420]	@ (8007e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007cc6:	428b      	cmp	r3, r1
 8007cc8:	d101      	bne.n	8007cce <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007cca:	4b69      	ldr	r3, [pc, #420]	@ (8007e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007ccc:	e001      	b.n	8007cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007cce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007cd2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007cd6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007ce6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007ce8:	2300      	movs	r3, #0
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	60fb      	str	r3, [r7, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	60fb      	str	r3, [r7, #12]
 8007cfc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d0a:	f043 0202 	orr.w	r2, r3, #2
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7f9 fb40 	bl	8001398 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	f003 0308 	and.w	r3, r3, #8
 8007d1e:	2b08      	cmp	r3, #8
 8007d20:	f040 80c3 	bne.w	8007eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f003 0320 	and.w	r3, r3, #32
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 80bd 	beq.w	8007eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007d3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a49      	ldr	r2, [pc, #292]	@ (8007e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d101      	bne.n	8007d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007d4a:	4b49      	ldr	r3, [pc, #292]	@ (8007e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007d4c:	e001      	b.n	8007d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007d4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4944      	ldr	r1, [pc, #272]	@ (8007e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007d5a:	428b      	cmp	r3, r1
 8007d5c:	d101      	bne.n	8007d62 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007d5e:	4b44      	ldr	r3, [pc, #272]	@ (8007e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007d60:	e001      	b.n	8007d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007d62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007d66:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007d6a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	60bb      	str	r3, [r7, #8]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	60bb      	str	r3, [r7, #8]
 8007d78:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d86:	f043 0204 	orr.w	r2, r3, #4
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7f9 fb02 	bl	8001398 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007d94:	e089      	b.n	8007eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	f003 0302 	and.w	r3, r3, #2
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d107      	bne.n	8007db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f8be 	bl	8007f2c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d107      	bne.n	8007dca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f8fd 	bl	8007fc4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dd0:	2b40      	cmp	r3, #64	@ 0x40
 8007dd2:	d12f      	bne.n	8007e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	f003 0320 	and.w	r3, r3, #32
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d02a      	beq.n	8007e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007dec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a1e      	ldr	r2, [pc, #120]	@ (8007e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d101      	bne.n	8007dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007df8:	4b1d      	ldr	r3, [pc, #116]	@ (8007e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007dfa:	e001      	b.n	8007e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007dfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4919      	ldr	r1, [pc, #100]	@ (8007e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007e08:	428b      	cmp	r3, r1
 8007e0a:	d101      	bne.n	8007e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007e0c:	4b18      	ldr	r3, [pc, #96]	@ (8007e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007e0e:	e001      	b.n	8007e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007e10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007e14:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007e18:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e26:	f043 0202 	orr.w	r2, r3, #2
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7f9 fab2 	bl	8001398 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	f003 0308 	and.w	r3, r3, #8
 8007e3a:	2b08      	cmp	r3, #8
 8007e3c:	d136      	bne.n	8007eac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	f003 0320 	and.w	r3, r3, #32
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d031      	beq.n	8007eac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a07      	ldr	r2, [pc, #28]	@ (8007e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d101      	bne.n	8007e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007e52:	4b07      	ldr	r3, [pc, #28]	@ (8007e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007e54:	e001      	b.n	8007e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007e56:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4902      	ldr	r1, [pc, #8]	@ (8007e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007e62:	428b      	cmp	r3, r1
 8007e64:	d106      	bne.n	8007e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007e66:	4b02      	ldr	r3, [pc, #8]	@ (8007e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007e68:	e006      	b.n	8007e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007e6a:	bf00      	nop
 8007e6c:	40003800 	.word	0x40003800
 8007e70:	40003400 	.word	0x40003400
 8007e74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007e78:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007e7c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007e8c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e9a:	f043 0204 	orr.w	r2, r3, #4
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7f9 fa78 	bl	8001398 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007ea8:	e000      	b.n	8007eac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007eaa:	bf00      	nop
}
 8007eac:	bf00      	nop
 8007eae:	3720      	adds	r7, #32
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed4:	1c99      	adds	r1, r3, #2
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	6251      	str	r1, [r2, #36]	@ 0x24
 8007eda:	881a      	ldrh	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d113      	bne.n	8007f22 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007f08:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d106      	bne.n	8007f22 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff ffc9 	bl	8007eb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f38:	1c99      	adds	r1, r3, #2
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	6251      	str	r1, [r2, #36]	@ 0x24
 8007f3e:	8819      	ldrh	r1, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a1d      	ldr	r2, [pc, #116]	@ (8007fbc <I2SEx_TxISR_I2SExt+0x90>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d101      	bne.n	8007f4e <I2SEx_TxISR_I2SExt+0x22>
 8007f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8007fc0 <I2SEx_TxISR_I2SExt+0x94>)
 8007f4c:	e001      	b.n	8007f52 <I2SEx_TxISR_I2SExt+0x26>
 8007f4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007f52:	460a      	mov	r2, r1
 8007f54:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d121      	bne.n	8007fb2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a12      	ldr	r2, [pc, #72]	@ (8007fbc <I2SEx_TxISR_I2SExt+0x90>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d101      	bne.n	8007f7c <I2SEx_TxISR_I2SExt+0x50>
 8007f78:	4b11      	ldr	r3, [pc, #68]	@ (8007fc0 <I2SEx_TxISR_I2SExt+0x94>)
 8007f7a:	e001      	b.n	8007f80 <I2SEx_TxISR_I2SExt+0x54>
 8007f7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	490d      	ldr	r1, [pc, #52]	@ (8007fbc <I2SEx_TxISR_I2SExt+0x90>)
 8007f88:	428b      	cmp	r3, r1
 8007f8a:	d101      	bne.n	8007f90 <I2SEx_TxISR_I2SExt+0x64>
 8007f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc0 <I2SEx_TxISR_I2SExt+0x94>)
 8007f8e:	e001      	b.n	8007f94 <I2SEx_TxISR_I2SExt+0x68>
 8007f90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007f94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007f98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d106      	bne.n	8007fb2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff ff81 	bl	8007eb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007fb2:	bf00      	nop
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	40003800 	.word	0x40003800
 8007fc0:	40003400 	.word	0x40003400

08007fc4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68d8      	ldr	r0, [r3, #12]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd6:	1c99      	adds	r1, r3, #2
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007fdc:	b282      	uxth	r2, r0
 8007fde:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d113      	bne.n	8008020 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008006:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800800c:	b29b      	uxth	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d106      	bne.n	8008020 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7ff ff4a 	bl	8007eb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a20      	ldr	r2, [pc, #128]	@ (80080b8 <I2SEx_RxISR_I2SExt+0x90>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d101      	bne.n	800803e <I2SEx_RxISR_I2SExt+0x16>
 800803a:	4b20      	ldr	r3, [pc, #128]	@ (80080bc <I2SEx_RxISR_I2SExt+0x94>)
 800803c:	e001      	b.n	8008042 <I2SEx_RxISR_I2SExt+0x1a>
 800803e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008042:	68d8      	ldr	r0, [r3, #12]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008048:	1c99      	adds	r1, r3, #2
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800804e:	b282      	uxth	r2, r0
 8008050:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008056:	b29b      	uxth	r3, r3
 8008058:	3b01      	subs	r3, #1
 800805a:	b29a      	uxth	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008064:	b29b      	uxth	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d121      	bne.n	80080ae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a12      	ldr	r2, [pc, #72]	@ (80080b8 <I2SEx_RxISR_I2SExt+0x90>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d101      	bne.n	8008078 <I2SEx_RxISR_I2SExt+0x50>
 8008074:	4b11      	ldr	r3, [pc, #68]	@ (80080bc <I2SEx_RxISR_I2SExt+0x94>)
 8008076:	e001      	b.n	800807c <I2SEx_RxISR_I2SExt+0x54>
 8008078:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	490d      	ldr	r1, [pc, #52]	@ (80080b8 <I2SEx_RxISR_I2SExt+0x90>)
 8008084:	428b      	cmp	r3, r1
 8008086:	d101      	bne.n	800808c <I2SEx_RxISR_I2SExt+0x64>
 8008088:	4b0c      	ldr	r3, [pc, #48]	@ (80080bc <I2SEx_RxISR_I2SExt+0x94>)
 800808a:	e001      	b.n	8008090 <I2SEx_RxISR_I2SExt+0x68>
 800808c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008090:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008094:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800809a:	b29b      	uxth	r3, r3
 800809c:	2b00      	cmp	r3, #0
 800809e:	d106      	bne.n	80080ae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7ff ff03 	bl	8007eb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80080ae:	bf00      	nop
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	40003800 	.word	0x40003800
 80080bc:	40003400 	.word	0x40003400

080080c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e267      	b.n	80085a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d075      	beq.n	80081ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80080de:	4b88      	ldr	r3, [pc, #544]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f003 030c 	and.w	r3, r3, #12
 80080e6:	2b04      	cmp	r3, #4
 80080e8:	d00c      	beq.n	8008104 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080ea:	4b85      	ldr	r3, [pc, #532]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80080f2:	2b08      	cmp	r3, #8
 80080f4:	d112      	bne.n	800811c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080f6:	4b82      	ldr	r3, [pc, #520]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008102:	d10b      	bne.n	800811c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008104:	4b7e      	ldr	r3, [pc, #504]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d05b      	beq.n	80081c8 <HAL_RCC_OscConfig+0x108>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d157      	bne.n	80081c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e242      	b.n	80085a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008124:	d106      	bne.n	8008134 <HAL_RCC_OscConfig+0x74>
 8008126:	4b76      	ldr	r3, [pc, #472]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a75      	ldr	r2, [pc, #468]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 800812c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008130:	6013      	str	r3, [r2, #0]
 8008132:	e01d      	b.n	8008170 <HAL_RCC_OscConfig+0xb0>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800813c:	d10c      	bne.n	8008158 <HAL_RCC_OscConfig+0x98>
 800813e:	4b70      	ldr	r3, [pc, #448]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a6f      	ldr	r2, [pc, #444]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 8008144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	4b6d      	ldr	r3, [pc, #436]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a6c      	ldr	r2, [pc, #432]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 8008150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008154:	6013      	str	r3, [r2, #0]
 8008156:	e00b      	b.n	8008170 <HAL_RCC_OscConfig+0xb0>
 8008158:	4b69      	ldr	r3, [pc, #420]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a68      	ldr	r2, [pc, #416]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 800815e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008162:	6013      	str	r3, [r2, #0]
 8008164:	4b66      	ldr	r3, [pc, #408]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a65      	ldr	r2, [pc, #404]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 800816a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800816e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d013      	beq.n	80081a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008178:	f7fa fd48 	bl	8002c0c <HAL_GetTick>
 800817c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800817e:	e008      	b.n	8008192 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008180:	f7fa fd44 	bl	8002c0c <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	2b64      	cmp	r3, #100	@ 0x64
 800818c:	d901      	bls.n	8008192 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e207      	b.n	80085a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008192:	4b5b      	ldr	r3, [pc, #364]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0f0      	beq.n	8008180 <HAL_RCC_OscConfig+0xc0>
 800819e:	e014      	b.n	80081ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081a0:	f7fa fd34 	bl	8002c0c <HAL_GetTick>
 80081a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081a6:	e008      	b.n	80081ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081a8:	f7fa fd30 	bl	8002c0c <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b64      	cmp	r3, #100	@ 0x64
 80081b4:	d901      	bls.n	80081ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e1f3      	b.n	80085a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081ba:	4b51      	ldr	r3, [pc, #324]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1f0      	bne.n	80081a8 <HAL_RCC_OscConfig+0xe8>
 80081c6:	e000      	b.n	80081ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0302 	and.w	r3, r3, #2
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d063      	beq.n	800829e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80081d6:	4b4a      	ldr	r3, [pc, #296]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f003 030c 	and.w	r3, r3, #12
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00b      	beq.n	80081fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081e2:	4b47      	ldr	r3, [pc, #284]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80081ea:	2b08      	cmp	r3, #8
 80081ec:	d11c      	bne.n	8008228 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081ee:	4b44      	ldr	r3, [pc, #272]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d116      	bne.n	8008228 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081fa:	4b41      	ldr	r3, [pc, #260]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d005      	beq.n	8008212 <HAL_RCC_OscConfig+0x152>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d001      	beq.n	8008212 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e1c7      	b.n	80085a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008212:	4b3b      	ldr	r3, [pc, #236]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	00db      	lsls	r3, r3, #3
 8008220:	4937      	ldr	r1, [pc, #220]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 8008222:	4313      	orrs	r3, r2
 8008224:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008226:	e03a      	b.n	800829e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d020      	beq.n	8008272 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008230:	4b34      	ldr	r3, [pc, #208]	@ (8008304 <HAL_RCC_OscConfig+0x244>)
 8008232:	2201      	movs	r2, #1
 8008234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008236:	f7fa fce9 	bl	8002c0c <HAL_GetTick>
 800823a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800823c:	e008      	b.n	8008250 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800823e:	f7fa fce5 	bl	8002c0c <HAL_GetTick>
 8008242:	4602      	mov	r2, r0
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d901      	bls.n	8008250 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e1a8      	b.n	80085a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008250:	4b2b      	ldr	r3, [pc, #172]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0302 	and.w	r3, r3, #2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d0f0      	beq.n	800823e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800825c:	4b28      	ldr	r3, [pc, #160]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	4925      	ldr	r1, [pc, #148]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 800826c:	4313      	orrs	r3, r2
 800826e:	600b      	str	r3, [r1, #0]
 8008270:	e015      	b.n	800829e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008272:	4b24      	ldr	r3, [pc, #144]	@ (8008304 <HAL_RCC_OscConfig+0x244>)
 8008274:	2200      	movs	r2, #0
 8008276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008278:	f7fa fcc8 	bl	8002c0c <HAL_GetTick>
 800827c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800827e:	e008      	b.n	8008292 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008280:	f7fa fcc4 	bl	8002c0c <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d901      	bls.n	8008292 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e187      	b.n	80085a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008292:	4b1b      	ldr	r3, [pc, #108]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1f0      	bne.n	8008280 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0308 	and.w	r3, r3, #8
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d036      	beq.n	8008318 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d016      	beq.n	80082e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082b2:	4b15      	ldr	r3, [pc, #84]	@ (8008308 <HAL_RCC_OscConfig+0x248>)
 80082b4:	2201      	movs	r2, #1
 80082b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082b8:	f7fa fca8 	bl	8002c0c <HAL_GetTick>
 80082bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082be:	e008      	b.n	80082d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082c0:	f7fa fca4 	bl	8002c0c <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d901      	bls.n	80082d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e167      	b.n	80085a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008300 <HAL_RCC_OscConfig+0x240>)
 80082d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0f0      	beq.n	80082c0 <HAL_RCC_OscConfig+0x200>
 80082de:	e01b      	b.n	8008318 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082e0:	4b09      	ldr	r3, [pc, #36]	@ (8008308 <HAL_RCC_OscConfig+0x248>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082e6:	f7fa fc91 	bl	8002c0c <HAL_GetTick>
 80082ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082ec:	e00e      	b.n	800830c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082ee:	f7fa fc8d 	bl	8002c0c <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d907      	bls.n	800830c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e150      	b.n	80085a2 <HAL_RCC_OscConfig+0x4e2>
 8008300:	40023800 	.word	0x40023800
 8008304:	42470000 	.word	0x42470000
 8008308:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800830c:	4b88      	ldr	r3, [pc, #544]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 800830e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008310:	f003 0302 	and.w	r3, r3, #2
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1ea      	bne.n	80082ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 8097 	beq.w	8008454 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008326:	2300      	movs	r3, #0
 8008328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800832a:	4b81      	ldr	r3, [pc, #516]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 800832c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800832e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10f      	bne.n	8008356 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008336:	2300      	movs	r3, #0
 8008338:	60bb      	str	r3, [r7, #8]
 800833a:	4b7d      	ldr	r3, [pc, #500]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 800833c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833e:	4a7c      	ldr	r2, [pc, #496]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 8008340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008344:	6413      	str	r3, [r2, #64]	@ 0x40
 8008346:	4b7a      	ldr	r3, [pc, #488]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 8008348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800834a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800834e:	60bb      	str	r3, [r7, #8]
 8008350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008352:	2301      	movs	r3, #1
 8008354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008356:	4b77      	ldr	r3, [pc, #476]	@ (8008534 <HAL_RCC_OscConfig+0x474>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800835e:	2b00      	cmp	r3, #0
 8008360:	d118      	bne.n	8008394 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008362:	4b74      	ldr	r3, [pc, #464]	@ (8008534 <HAL_RCC_OscConfig+0x474>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a73      	ldr	r2, [pc, #460]	@ (8008534 <HAL_RCC_OscConfig+0x474>)
 8008368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800836c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800836e:	f7fa fc4d 	bl	8002c0c <HAL_GetTick>
 8008372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008374:	e008      	b.n	8008388 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008376:	f7fa fc49 	bl	8002c0c <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	2b02      	cmp	r3, #2
 8008382:	d901      	bls.n	8008388 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e10c      	b.n	80085a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008388:	4b6a      	ldr	r3, [pc, #424]	@ (8008534 <HAL_RCC_OscConfig+0x474>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008390:	2b00      	cmp	r3, #0
 8008392:	d0f0      	beq.n	8008376 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d106      	bne.n	80083aa <HAL_RCC_OscConfig+0x2ea>
 800839c:	4b64      	ldr	r3, [pc, #400]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 800839e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083a0:	4a63      	ldr	r2, [pc, #396]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 80083a2:	f043 0301 	orr.w	r3, r3, #1
 80083a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80083a8:	e01c      	b.n	80083e4 <HAL_RCC_OscConfig+0x324>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	2b05      	cmp	r3, #5
 80083b0:	d10c      	bne.n	80083cc <HAL_RCC_OscConfig+0x30c>
 80083b2:	4b5f      	ldr	r3, [pc, #380]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 80083b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083b6:	4a5e      	ldr	r2, [pc, #376]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 80083b8:	f043 0304 	orr.w	r3, r3, #4
 80083bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80083be:	4b5c      	ldr	r3, [pc, #368]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 80083c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083c2:	4a5b      	ldr	r2, [pc, #364]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 80083c4:	f043 0301 	orr.w	r3, r3, #1
 80083c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80083ca:	e00b      	b.n	80083e4 <HAL_RCC_OscConfig+0x324>
 80083cc:	4b58      	ldr	r3, [pc, #352]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 80083ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d0:	4a57      	ldr	r2, [pc, #348]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 80083d2:	f023 0301 	bic.w	r3, r3, #1
 80083d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80083d8:	4b55      	ldr	r3, [pc, #340]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 80083da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083dc:	4a54      	ldr	r2, [pc, #336]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 80083de:	f023 0304 	bic.w	r3, r3, #4
 80083e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d015      	beq.n	8008418 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083ec:	f7fa fc0e 	bl	8002c0c <HAL_GetTick>
 80083f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083f2:	e00a      	b.n	800840a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083f4:	f7fa fc0a 	bl	8002c0c <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008402:	4293      	cmp	r3, r2
 8008404:	d901      	bls.n	800840a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e0cb      	b.n	80085a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800840a:	4b49      	ldr	r3, [pc, #292]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 800840c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	2b00      	cmp	r3, #0
 8008414:	d0ee      	beq.n	80083f4 <HAL_RCC_OscConfig+0x334>
 8008416:	e014      	b.n	8008442 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008418:	f7fa fbf8 	bl	8002c0c <HAL_GetTick>
 800841c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800841e:	e00a      	b.n	8008436 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008420:	f7fa fbf4 	bl	8002c0c <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800842e:	4293      	cmp	r3, r2
 8008430:	d901      	bls.n	8008436 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e0b5      	b.n	80085a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008436:	4b3e      	ldr	r3, [pc, #248]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 8008438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1ee      	bne.n	8008420 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008442:	7dfb      	ldrb	r3, [r7, #23]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d105      	bne.n	8008454 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008448:	4b39      	ldr	r3, [pc, #228]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 800844a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800844c:	4a38      	ldr	r2, [pc, #224]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 800844e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008452:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 80a1 	beq.w	80085a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800845e:	4b34      	ldr	r3, [pc, #208]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f003 030c 	and.w	r3, r3, #12
 8008466:	2b08      	cmp	r3, #8
 8008468:	d05c      	beq.n	8008524 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	2b02      	cmp	r3, #2
 8008470:	d141      	bne.n	80084f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008472:	4b31      	ldr	r3, [pc, #196]	@ (8008538 <HAL_RCC_OscConfig+0x478>)
 8008474:	2200      	movs	r2, #0
 8008476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008478:	f7fa fbc8 	bl	8002c0c <HAL_GetTick>
 800847c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800847e:	e008      	b.n	8008492 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008480:	f7fa fbc4 	bl	8002c0c <HAL_GetTick>
 8008484:	4602      	mov	r2, r0
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	2b02      	cmp	r3, #2
 800848c:	d901      	bls.n	8008492 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e087      	b.n	80085a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008492:	4b27      	ldr	r3, [pc, #156]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1f0      	bne.n	8008480 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	69da      	ldr	r2, [r3, #28]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	431a      	orrs	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ac:	019b      	lsls	r3, r3, #6
 80084ae:	431a      	orrs	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b4:	085b      	lsrs	r3, r3, #1
 80084b6:	3b01      	subs	r3, #1
 80084b8:	041b      	lsls	r3, r3, #16
 80084ba:	431a      	orrs	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c0:	061b      	lsls	r3, r3, #24
 80084c2:	491b      	ldr	r1, [pc, #108]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008538 <HAL_RCC_OscConfig+0x478>)
 80084ca:	2201      	movs	r2, #1
 80084cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084ce:	f7fa fb9d 	bl	8002c0c <HAL_GetTick>
 80084d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084d4:	e008      	b.n	80084e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084d6:	f7fa fb99 	bl	8002c0c <HAL_GetTick>
 80084da:	4602      	mov	r2, r0
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d901      	bls.n	80084e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e05c      	b.n	80085a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084e8:	4b11      	ldr	r3, [pc, #68]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d0f0      	beq.n	80084d6 <HAL_RCC_OscConfig+0x416>
 80084f4:	e054      	b.n	80085a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084f6:	4b10      	ldr	r3, [pc, #64]	@ (8008538 <HAL_RCC_OscConfig+0x478>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084fc:	f7fa fb86 	bl	8002c0c <HAL_GetTick>
 8008500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008502:	e008      	b.n	8008516 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008504:	f7fa fb82 	bl	8002c0c <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	2b02      	cmp	r3, #2
 8008510:	d901      	bls.n	8008516 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e045      	b.n	80085a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008516:	4b06      	ldr	r3, [pc, #24]	@ (8008530 <HAL_RCC_OscConfig+0x470>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1f0      	bne.n	8008504 <HAL_RCC_OscConfig+0x444>
 8008522:	e03d      	b.n	80085a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d107      	bne.n	800853c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e038      	b.n	80085a2 <HAL_RCC_OscConfig+0x4e2>
 8008530:	40023800 	.word	0x40023800
 8008534:	40007000 	.word	0x40007000
 8008538:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800853c:	4b1b      	ldr	r3, [pc, #108]	@ (80085ac <HAL_RCC_OscConfig+0x4ec>)
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d028      	beq.n	800859c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008554:	429a      	cmp	r2, r3
 8008556:	d121      	bne.n	800859c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008562:	429a      	cmp	r2, r3
 8008564:	d11a      	bne.n	800859c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800856c:	4013      	ands	r3, r2
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008572:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008574:	4293      	cmp	r3, r2
 8008576:	d111      	bne.n	800859c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008582:	085b      	lsrs	r3, r3, #1
 8008584:	3b01      	subs	r3, #1
 8008586:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008588:	429a      	cmp	r2, r3
 800858a:	d107      	bne.n	800859c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008596:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008598:	429a      	cmp	r2, r3
 800859a:	d001      	beq.n	80085a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e000      	b.n	80085a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3718      	adds	r7, #24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	40023800 	.word	0x40023800

080085b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d101      	bne.n	80085c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e0cc      	b.n	800875e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80085c4:	4b68      	ldr	r3, [pc, #416]	@ (8008768 <HAL_RCC_ClockConfig+0x1b8>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0307 	and.w	r3, r3, #7
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d90c      	bls.n	80085ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085d2:	4b65      	ldr	r3, [pc, #404]	@ (8008768 <HAL_RCC_ClockConfig+0x1b8>)
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	b2d2      	uxtb	r2, r2
 80085d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085da:	4b63      	ldr	r3, [pc, #396]	@ (8008768 <HAL_RCC_ClockConfig+0x1b8>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0307 	and.w	r3, r3, #7
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d001      	beq.n	80085ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e0b8      	b.n	800875e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d020      	beq.n	800863a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0304 	and.w	r3, r3, #4
 8008600:	2b00      	cmp	r3, #0
 8008602:	d005      	beq.n	8008610 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008604:	4b59      	ldr	r3, [pc, #356]	@ (800876c <HAL_RCC_ClockConfig+0x1bc>)
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	4a58      	ldr	r2, [pc, #352]	@ (800876c <HAL_RCC_ClockConfig+0x1bc>)
 800860a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800860e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0308 	and.w	r3, r3, #8
 8008618:	2b00      	cmp	r3, #0
 800861a:	d005      	beq.n	8008628 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800861c:	4b53      	ldr	r3, [pc, #332]	@ (800876c <HAL_RCC_ClockConfig+0x1bc>)
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	4a52      	ldr	r2, [pc, #328]	@ (800876c <HAL_RCC_ClockConfig+0x1bc>)
 8008622:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008628:	4b50      	ldr	r3, [pc, #320]	@ (800876c <HAL_RCC_ClockConfig+0x1bc>)
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	494d      	ldr	r1, [pc, #308]	@ (800876c <HAL_RCC_ClockConfig+0x1bc>)
 8008636:	4313      	orrs	r3, r2
 8008638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	2b00      	cmp	r3, #0
 8008644:	d044      	beq.n	80086d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d107      	bne.n	800865e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800864e:	4b47      	ldr	r3, [pc, #284]	@ (800876c <HAL_RCC_ClockConfig+0x1bc>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d119      	bne.n	800868e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e07f      	b.n	800875e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	2b02      	cmp	r3, #2
 8008664:	d003      	beq.n	800866e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800866a:	2b03      	cmp	r3, #3
 800866c:	d107      	bne.n	800867e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800866e:	4b3f      	ldr	r3, [pc, #252]	@ (800876c <HAL_RCC_ClockConfig+0x1bc>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d109      	bne.n	800868e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e06f      	b.n	800875e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800867e:	4b3b      	ldr	r3, [pc, #236]	@ (800876c <HAL_RCC_ClockConfig+0x1bc>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0302 	and.w	r3, r3, #2
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e067      	b.n	800875e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800868e:	4b37      	ldr	r3, [pc, #220]	@ (800876c <HAL_RCC_ClockConfig+0x1bc>)
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f023 0203 	bic.w	r2, r3, #3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	4934      	ldr	r1, [pc, #208]	@ (800876c <HAL_RCC_ClockConfig+0x1bc>)
 800869c:	4313      	orrs	r3, r2
 800869e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80086a0:	f7fa fab4 	bl	8002c0c <HAL_GetTick>
 80086a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086a6:	e00a      	b.n	80086be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086a8:	f7fa fab0 	bl	8002c0c <HAL_GetTick>
 80086ac:	4602      	mov	r2, r0
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d901      	bls.n	80086be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80086ba:	2303      	movs	r3, #3
 80086bc:	e04f      	b.n	800875e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086be:	4b2b      	ldr	r3, [pc, #172]	@ (800876c <HAL_RCC_ClockConfig+0x1bc>)
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f003 020c 	and.w	r2, r3, #12
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d1eb      	bne.n	80086a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80086d0:	4b25      	ldr	r3, [pc, #148]	@ (8008768 <HAL_RCC_ClockConfig+0x1b8>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0307 	and.w	r3, r3, #7
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d20c      	bcs.n	80086f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086de:	4b22      	ldr	r3, [pc, #136]	@ (8008768 <HAL_RCC_ClockConfig+0x1b8>)
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	b2d2      	uxtb	r2, r2
 80086e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086e6:	4b20      	ldr	r3, [pc, #128]	@ (8008768 <HAL_RCC_ClockConfig+0x1b8>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0307 	and.w	r3, r3, #7
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d001      	beq.n	80086f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e032      	b.n	800875e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0304 	and.w	r3, r3, #4
 8008700:	2b00      	cmp	r3, #0
 8008702:	d008      	beq.n	8008716 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008704:	4b19      	ldr	r3, [pc, #100]	@ (800876c <HAL_RCC_ClockConfig+0x1bc>)
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	4916      	ldr	r1, [pc, #88]	@ (800876c <HAL_RCC_ClockConfig+0x1bc>)
 8008712:	4313      	orrs	r3, r2
 8008714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 0308 	and.w	r3, r3, #8
 800871e:	2b00      	cmp	r3, #0
 8008720:	d009      	beq.n	8008736 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008722:	4b12      	ldr	r3, [pc, #72]	@ (800876c <HAL_RCC_ClockConfig+0x1bc>)
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	00db      	lsls	r3, r3, #3
 8008730:	490e      	ldr	r1, [pc, #56]	@ (800876c <HAL_RCC_ClockConfig+0x1bc>)
 8008732:	4313      	orrs	r3, r2
 8008734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008736:	f000 f821 	bl	800877c <HAL_RCC_GetSysClockFreq>
 800873a:	4602      	mov	r2, r0
 800873c:	4b0b      	ldr	r3, [pc, #44]	@ (800876c <HAL_RCC_ClockConfig+0x1bc>)
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	091b      	lsrs	r3, r3, #4
 8008742:	f003 030f 	and.w	r3, r3, #15
 8008746:	490a      	ldr	r1, [pc, #40]	@ (8008770 <HAL_RCC_ClockConfig+0x1c0>)
 8008748:	5ccb      	ldrb	r3, [r1, r3]
 800874a:	fa22 f303 	lsr.w	r3, r2, r3
 800874e:	4a09      	ldr	r2, [pc, #36]	@ (8008774 <HAL_RCC_ClockConfig+0x1c4>)
 8008750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008752:	4b09      	ldr	r3, [pc, #36]	@ (8008778 <HAL_RCC_ClockConfig+0x1c8>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4618      	mov	r0, r3
 8008758:	f7fa fa14 	bl	8002b84 <HAL_InitTick>

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	40023c00 	.word	0x40023c00
 800876c:	40023800 	.word	0x40023800
 8008770:	08015c78 	.word	0x08015c78
 8008774:	20000038 	.word	0x20000038
 8008778:	20000040 	.word	0x20000040

0800877c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800877c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008780:	b094      	sub	sp, #80	@ 0x50
 8008782:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800878c:	2300      	movs	r3, #0
 800878e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008790:	2300      	movs	r3, #0
 8008792:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008794:	4b79      	ldr	r3, [pc, #484]	@ (800897c <HAL_RCC_GetSysClockFreq+0x200>)
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f003 030c 	and.w	r3, r3, #12
 800879c:	2b08      	cmp	r3, #8
 800879e:	d00d      	beq.n	80087bc <HAL_RCC_GetSysClockFreq+0x40>
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	f200 80e1 	bhi.w	8008968 <HAL_RCC_GetSysClockFreq+0x1ec>
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <HAL_RCC_GetSysClockFreq+0x34>
 80087aa:	2b04      	cmp	r3, #4
 80087ac:	d003      	beq.n	80087b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80087ae:	e0db      	b.n	8008968 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80087b0:	4b73      	ldr	r3, [pc, #460]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x204>)
 80087b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087b4:	e0db      	b.n	800896e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80087b6:	4b73      	ldr	r3, [pc, #460]	@ (8008984 <HAL_RCC_GetSysClockFreq+0x208>)
 80087b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087ba:	e0d8      	b.n	800896e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80087bc:	4b6f      	ldr	r3, [pc, #444]	@ (800897c <HAL_RCC_GetSysClockFreq+0x200>)
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80087c6:	4b6d      	ldr	r3, [pc, #436]	@ (800897c <HAL_RCC_GetSysClockFreq+0x200>)
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d063      	beq.n	800889a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087d2:	4b6a      	ldr	r3, [pc, #424]	@ (800897c <HAL_RCC_GetSysClockFreq+0x200>)
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	099b      	lsrs	r3, r3, #6
 80087d8:	2200      	movs	r2, #0
 80087da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80087de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80087e6:	2300      	movs	r3, #0
 80087e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80087ee:	4622      	mov	r2, r4
 80087f0:	462b      	mov	r3, r5
 80087f2:	f04f 0000 	mov.w	r0, #0
 80087f6:	f04f 0100 	mov.w	r1, #0
 80087fa:	0159      	lsls	r1, r3, #5
 80087fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008800:	0150      	lsls	r0, r2, #5
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	4621      	mov	r1, r4
 8008808:	1a51      	subs	r1, r2, r1
 800880a:	6139      	str	r1, [r7, #16]
 800880c:	4629      	mov	r1, r5
 800880e:	eb63 0301 	sbc.w	r3, r3, r1
 8008812:	617b      	str	r3, [r7, #20]
 8008814:	f04f 0200 	mov.w	r2, #0
 8008818:	f04f 0300 	mov.w	r3, #0
 800881c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008820:	4659      	mov	r1, fp
 8008822:	018b      	lsls	r3, r1, #6
 8008824:	4651      	mov	r1, sl
 8008826:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800882a:	4651      	mov	r1, sl
 800882c:	018a      	lsls	r2, r1, #6
 800882e:	4651      	mov	r1, sl
 8008830:	ebb2 0801 	subs.w	r8, r2, r1
 8008834:	4659      	mov	r1, fp
 8008836:	eb63 0901 	sbc.w	r9, r3, r1
 800883a:	f04f 0200 	mov.w	r2, #0
 800883e:	f04f 0300 	mov.w	r3, #0
 8008842:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008846:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800884a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800884e:	4690      	mov	r8, r2
 8008850:	4699      	mov	r9, r3
 8008852:	4623      	mov	r3, r4
 8008854:	eb18 0303 	adds.w	r3, r8, r3
 8008858:	60bb      	str	r3, [r7, #8]
 800885a:	462b      	mov	r3, r5
 800885c:	eb49 0303 	adc.w	r3, r9, r3
 8008860:	60fb      	str	r3, [r7, #12]
 8008862:	f04f 0200 	mov.w	r2, #0
 8008866:	f04f 0300 	mov.w	r3, #0
 800886a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800886e:	4629      	mov	r1, r5
 8008870:	024b      	lsls	r3, r1, #9
 8008872:	4621      	mov	r1, r4
 8008874:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008878:	4621      	mov	r1, r4
 800887a:	024a      	lsls	r2, r1, #9
 800887c:	4610      	mov	r0, r2
 800887e:	4619      	mov	r1, r3
 8008880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008882:	2200      	movs	r2, #0
 8008884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008886:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008888:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800888c:	f7f8 f98c 	bl	8000ba8 <__aeabi_uldivmod>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4613      	mov	r3, r2
 8008896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008898:	e058      	b.n	800894c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800889a:	4b38      	ldr	r3, [pc, #224]	@ (800897c <HAL_RCC_GetSysClockFreq+0x200>)
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	099b      	lsrs	r3, r3, #6
 80088a0:	2200      	movs	r2, #0
 80088a2:	4618      	mov	r0, r3
 80088a4:	4611      	mov	r1, r2
 80088a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80088aa:	623b      	str	r3, [r7, #32]
 80088ac:	2300      	movs	r3, #0
 80088ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80088b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80088b4:	4642      	mov	r2, r8
 80088b6:	464b      	mov	r3, r9
 80088b8:	f04f 0000 	mov.w	r0, #0
 80088bc:	f04f 0100 	mov.w	r1, #0
 80088c0:	0159      	lsls	r1, r3, #5
 80088c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80088c6:	0150      	lsls	r0, r2, #5
 80088c8:	4602      	mov	r2, r0
 80088ca:	460b      	mov	r3, r1
 80088cc:	4641      	mov	r1, r8
 80088ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80088d2:	4649      	mov	r1, r9
 80088d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80088d8:	f04f 0200 	mov.w	r2, #0
 80088dc:	f04f 0300 	mov.w	r3, #0
 80088e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80088e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80088e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80088ec:	ebb2 040a 	subs.w	r4, r2, sl
 80088f0:	eb63 050b 	sbc.w	r5, r3, fp
 80088f4:	f04f 0200 	mov.w	r2, #0
 80088f8:	f04f 0300 	mov.w	r3, #0
 80088fc:	00eb      	lsls	r3, r5, #3
 80088fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008902:	00e2      	lsls	r2, r4, #3
 8008904:	4614      	mov	r4, r2
 8008906:	461d      	mov	r5, r3
 8008908:	4643      	mov	r3, r8
 800890a:	18e3      	adds	r3, r4, r3
 800890c:	603b      	str	r3, [r7, #0]
 800890e:	464b      	mov	r3, r9
 8008910:	eb45 0303 	adc.w	r3, r5, r3
 8008914:	607b      	str	r3, [r7, #4]
 8008916:	f04f 0200 	mov.w	r2, #0
 800891a:	f04f 0300 	mov.w	r3, #0
 800891e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008922:	4629      	mov	r1, r5
 8008924:	028b      	lsls	r3, r1, #10
 8008926:	4621      	mov	r1, r4
 8008928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800892c:	4621      	mov	r1, r4
 800892e:	028a      	lsls	r2, r1, #10
 8008930:	4610      	mov	r0, r2
 8008932:	4619      	mov	r1, r3
 8008934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008936:	2200      	movs	r2, #0
 8008938:	61bb      	str	r3, [r7, #24]
 800893a:	61fa      	str	r2, [r7, #28]
 800893c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008940:	f7f8 f932 	bl	8000ba8 <__aeabi_uldivmod>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4613      	mov	r3, r2
 800894a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800894c:	4b0b      	ldr	r3, [pc, #44]	@ (800897c <HAL_RCC_GetSysClockFreq+0x200>)
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	0c1b      	lsrs	r3, r3, #16
 8008952:	f003 0303 	and.w	r3, r3, #3
 8008956:	3301      	adds	r3, #1
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800895c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800895e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008960:	fbb2 f3f3 	udiv	r3, r2, r3
 8008964:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008966:	e002      	b.n	800896e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008968:	4b05      	ldr	r3, [pc, #20]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x204>)
 800896a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800896c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800896e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008970:	4618      	mov	r0, r3
 8008972:	3750      	adds	r7, #80	@ 0x50
 8008974:	46bd      	mov	sp, r7
 8008976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800897a:	bf00      	nop
 800897c:	40023800 	.word	0x40023800
 8008980:	00f42400 	.word	0x00f42400
 8008984:	007a1200 	.word	0x007a1200

08008988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008988:	b480      	push	{r7}
 800898a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800898c:	4b03      	ldr	r3, [pc, #12]	@ (800899c <HAL_RCC_GetHCLKFreq+0x14>)
 800898e:	681b      	ldr	r3, [r3, #0]
}
 8008990:	4618      	mov	r0, r3
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	20000038 	.word	0x20000038

080089a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80089a4:	f7ff fff0 	bl	8008988 <HAL_RCC_GetHCLKFreq>
 80089a8:	4602      	mov	r2, r0
 80089aa:	4b05      	ldr	r3, [pc, #20]	@ (80089c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	0a9b      	lsrs	r3, r3, #10
 80089b0:	f003 0307 	and.w	r3, r3, #7
 80089b4:	4903      	ldr	r1, [pc, #12]	@ (80089c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089b6:	5ccb      	ldrb	r3, [r1, r3]
 80089b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089bc:	4618      	mov	r0, r3
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	40023800 	.word	0x40023800
 80089c4:	08015c88 	.word	0x08015c88

080089c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80089cc:	f7ff ffdc 	bl	8008988 <HAL_RCC_GetHCLKFreq>
 80089d0:	4602      	mov	r2, r0
 80089d2:	4b05      	ldr	r3, [pc, #20]	@ (80089e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	0b5b      	lsrs	r3, r3, #13
 80089d8:	f003 0307 	and.w	r3, r3, #7
 80089dc:	4903      	ldr	r1, [pc, #12]	@ (80089ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80089de:	5ccb      	ldrb	r3, [r1, r3]
 80089e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	40023800 	.word	0x40023800
 80089ec:	08015c88 	.word	0x08015c88

080089f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80089fc:	2300      	movs	r3, #0
 80089fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d105      	bne.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d035      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008a18:	4b62      	ldr	r3, [pc, #392]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008a1e:	f7fa f8f5 	bl	8002c0c <HAL_GetTick>
 8008a22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a24:	e008      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008a26:	f7fa f8f1 	bl	8002c0c <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d901      	bls.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e0b0      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a38:	4b5b      	ldr	r3, [pc, #364]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1f0      	bne.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	019a      	lsls	r2, r3, #6
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	071b      	lsls	r3, r3, #28
 8008a50:	4955      	ldr	r1, [pc, #340]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008a58:	4b52      	ldr	r3, [pc, #328]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008a5e:	f7fa f8d5 	bl	8002c0c <HAL_GetTick>
 8008a62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a64:	e008      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008a66:	f7fa f8d1 	bl	8002c0c <HAL_GetTick>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d901      	bls.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a74:	2303      	movs	r3, #3
 8008a76:	e090      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a78:	4b4b      	ldr	r3, [pc, #300]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d0f0      	beq.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 0302 	and.w	r3, r3, #2
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 8083 	beq.w	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008a92:	2300      	movs	r3, #0
 8008a94:	60fb      	str	r3, [r7, #12]
 8008a96:	4b44      	ldr	r3, [pc, #272]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a9a:	4a43      	ldr	r2, [pc, #268]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8008aa2:	4b41      	ldr	r3, [pc, #260]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008aaa:	60fb      	str	r3, [r7, #12]
 8008aac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008aae:	4b3f      	ldr	r3, [pc, #252]	@ (8008bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a3e      	ldr	r2, [pc, #248]	@ (8008bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ab8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008aba:	f7fa f8a7 	bl	8002c0c <HAL_GetTick>
 8008abe:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008ac0:	e008      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ac2:	f7fa f8a3 	bl	8002c0c <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d901      	bls.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e062      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008ad4:	4b35      	ldr	r3, [pc, #212]	@ (8008bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d0f0      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008ae0:	4b31      	ldr	r3, [pc, #196]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ae4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ae8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d02f      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d028      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008afe:	4b2a      	ldr	r3, [pc, #168]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b08:	4b29      	ldr	r3, [pc, #164]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b0e:	4b28      	ldr	r3, [pc, #160]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008b14:	4a24      	ldr	r2, [pc, #144]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008b1a:	4b23      	ldr	r3, [pc, #140]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d114      	bne.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008b26:	f7fa f871 	bl	8002c0c <HAL_GetTick>
 8008b2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b2c:	e00a      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b2e:	f7fa f86d 	bl	8002c0c <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d901      	bls.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e02a      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b44:	4b18      	ldr	r3, [pc, #96]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b48:	f003 0302 	and.w	r3, r3, #2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d0ee      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b5c:	d10d      	bne.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008b5e:	4b12      	ldr	r3, [pc, #72]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008b6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b72:	490d      	ldr	r1, [pc, #52]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b74:	4313      	orrs	r3, r2
 8008b76:	608b      	str	r3, [r1, #8]
 8008b78:	e005      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b80:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008b84:	6093      	str	r3, [r2, #8]
 8008b86:	4b08      	ldr	r3, [pc, #32]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b88:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b92:	4905      	ldr	r1, [pc, #20]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b94:	4313      	orrs	r3, r2
 8008b96:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	42470068 	.word	0x42470068
 8008ba8:	40023800 	.word	0x40023800
 8008bac:	40007000 	.word	0x40007000
 8008bb0:	42470e40 	.word	0x42470e40

08008bb4 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2203      	movs	r2, #3
 8008bc0:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8008bc2:	4b11      	ldr	r3, [pc, #68]	@ (8008c08 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8008bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bc8:	099b      	lsrs	r3, r3, #6
 8008bca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008c08 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8008bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bd8:	0f1b      	lsrs	r3, r3, #28
 8008bda:	f003 0207 	and.w	r2, r3, #7
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8008be2:	4b09      	ldr	r3, [pc, #36]	@ (8008c08 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008bea:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8008bec:	4b06      	ldr	r3, [pc, #24]	@ (8008c08 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8008bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bf0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	431a      	orrs	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8008bfc:	bf00      	nop
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	40023800 	.word	0x40023800

08008c0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b087      	sub	sp, #28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008c20:	2300      	movs	r3, #0
 8008c22:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d13f      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008c2a:	4b24      	ldr	r3, [pc, #144]	@ (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c32:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d006      	beq.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008c40:	d12f      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c42:	4b1f      	ldr	r3, [pc, #124]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008c44:	617b      	str	r3, [r7, #20]
          break;
 8008c46:	e02f      	b.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008c48:	4b1c      	ldr	r3, [pc, #112]	@ (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c54:	d108      	bne.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008c56:	4b19      	ldr	r3, [pc, #100]	@ (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c5e:	4a19      	ldr	r2, [pc, #100]	@ (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c64:	613b      	str	r3, [r7, #16]
 8008c66:	e007      	b.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008c68:	4b14      	ldr	r3, [pc, #80]	@ (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c70:	4a15      	ldr	r2, [pc, #84]	@ (8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8008c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c76:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008c78:	4b10      	ldr	r3, [pc, #64]	@ (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c7e:	099b      	lsrs	r3, r3, #6
 8008c80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	fb02 f303 	mul.w	r3, r2, r3
 8008c8a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c92:	0f1b      	lsrs	r3, r3, #28
 8008c94:	f003 0307 	and.w	r3, r3, #7
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c9e:	617b      	str	r3, [r7, #20]
          break;
 8008ca0:	e002      	b.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	617b      	str	r3, [r7, #20]
          break;
 8008ca6:	bf00      	nop
        }
      }
      break;
 8008ca8:	e000      	b.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8008caa:	bf00      	nop
    }
  }
  return frequency;
 8008cac:	697b      	ldr	r3, [r7, #20]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	371c      	adds	r7, #28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	40023800 	.word	0x40023800
 8008cc0:	00bb8000 	.word	0x00bb8000
 8008cc4:	007a1200 	.word	0x007a1200
 8008cc8:	00f42400 	.word	0x00f42400

08008ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e042      	b.n	8008d64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d106      	bne.n	8008cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7f9 fbd4 	bl	80024a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2224      	movs	r2, #36	@ 0x24
 8008cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68da      	ldr	r2, [r3, #12]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f82b 	bl	8008d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	691a      	ldr	r2, [r3, #16]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	695a      	ldr	r2, [r3, #20]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68da      	ldr	r2, [r3, #12]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2220      	movs	r2, #32
 8008d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2220      	movs	r2, #32
 8008d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d70:	b0c0      	sub	sp, #256	@ 0x100
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d88:	68d9      	ldr	r1, [r3, #12]
 8008d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	ea40 0301 	orr.w	r3, r0, r1
 8008d94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d9a:	689a      	ldr	r2, [r3, #8]
 8008d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	431a      	orrs	r2, r3
 8008da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	431a      	orrs	r2, r3
 8008dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008dc4:	f021 010c 	bic.w	r1, r1, #12
 8008dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008dd2:	430b      	orrs	r3, r1
 8008dd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008de6:	6999      	ldr	r1, [r3, #24]
 8008de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	ea40 0301 	orr.w	r3, r0, r1
 8008df2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	4b8f      	ldr	r3, [pc, #572]	@ (8009038 <UART_SetConfig+0x2cc>)
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d005      	beq.n	8008e0c <UART_SetConfig+0xa0>
 8008e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	4b8d      	ldr	r3, [pc, #564]	@ (800903c <UART_SetConfig+0x2d0>)
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d104      	bne.n	8008e16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e0c:	f7ff fddc 	bl	80089c8 <HAL_RCC_GetPCLK2Freq>
 8008e10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008e14:	e003      	b.n	8008e1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e16:	f7ff fdc3 	bl	80089a0 <HAL_RCC_GetPCLK1Freq>
 8008e1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e22:	69db      	ldr	r3, [r3, #28]
 8008e24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e28:	f040 810c 	bne.w	8009044 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e30:	2200      	movs	r2, #0
 8008e32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008e36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008e3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008e3e:	4622      	mov	r2, r4
 8008e40:	462b      	mov	r3, r5
 8008e42:	1891      	adds	r1, r2, r2
 8008e44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008e46:	415b      	adcs	r3, r3
 8008e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008e4e:	4621      	mov	r1, r4
 8008e50:	eb12 0801 	adds.w	r8, r2, r1
 8008e54:	4629      	mov	r1, r5
 8008e56:	eb43 0901 	adc.w	r9, r3, r1
 8008e5a:	f04f 0200 	mov.w	r2, #0
 8008e5e:	f04f 0300 	mov.w	r3, #0
 8008e62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e6e:	4690      	mov	r8, r2
 8008e70:	4699      	mov	r9, r3
 8008e72:	4623      	mov	r3, r4
 8008e74:	eb18 0303 	adds.w	r3, r8, r3
 8008e78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008e7c:	462b      	mov	r3, r5
 8008e7e:	eb49 0303 	adc.w	r3, r9, r3
 8008e82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008e96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	18db      	adds	r3, r3, r3
 8008e9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	eb42 0303 	adc.w	r3, r2, r3
 8008ea6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ea8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008eac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008eb0:	f7f7 fe7a 	bl	8000ba8 <__aeabi_uldivmod>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4b61      	ldr	r3, [pc, #388]	@ (8009040 <UART_SetConfig+0x2d4>)
 8008eba:	fba3 2302 	umull	r2, r3, r3, r2
 8008ebe:	095b      	lsrs	r3, r3, #5
 8008ec0:	011c      	lsls	r4, r3, #4
 8008ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ecc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008ed0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008ed4:	4642      	mov	r2, r8
 8008ed6:	464b      	mov	r3, r9
 8008ed8:	1891      	adds	r1, r2, r2
 8008eda:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008edc:	415b      	adcs	r3, r3
 8008ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ee0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008ee4:	4641      	mov	r1, r8
 8008ee6:	eb12 0a01 	adds.w	sl, r2, r1
 8008eea:	4649      	mov	r1, r9
 8008eec:	eb43 0b01 	adc.w	fp, r3, r1
 8008ef0:	f04f 0200 	mov.w	r2, #0
 8008ef4:	f04f 0300 	mov.w	r3, #0
 8008ef8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008efc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f04:	4692      	mov	sl, r2
 8008f06:	469b      	mov	fp, r3
 8008f08:	4643      	mov	r3, r8
 8008f0a:	eb1a 0303 	adds.w	r3, sl, r3
 8008f0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f12:	464b      	mov	r3, r9
 8008f14:	eb4b 0303 	adc.w	r3, fp, r3
 8008f18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008f2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008f30:	460b      	mov	r3, r1
 8008f32:	18db      	adds	r3, r3, r3
 8008f34:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f36:	4613      	mov	r3, r2
 8008f38:	eb42 0303 	adc.w	r3, r2, r3
 8008f3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008f42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008f46:	f7f7 fe2f 	bl	8000ba8 <__aeabi_uldivmod>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4611      	mov	r1, r2
 8008f50:	4b3b      	ldr	r3, [pc, #236]	@ (8009040 <UART_SetConfig+0x2d4>)
 8008f52:	fba3 2301 	umull	r2, r3, r3, r1
 8008f56:	095b      	lsrs	r3, r3, #5
 8008f58:	2264      	movs	r2, #100	@ 0x64
 8008f5a:	fb02 f303 	mul.w	r3, r2, r3
 8008f5e:	1acb      	subs	r3, r1, r3
 8008f60:	00db      	lsls	r3, r3, #3
 8008f62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008f66:	4b36      	ldr	r3, [pc, #216]	@ (8009040 <UART_SetConfig+0x2d4>)
 8008f68:	fba3 2302 	umull	r2, r3, r3, r2
 8008f6c:	095b      	lsrs	r3, r3, #5
 8008f6e:	005b      	lsls	r3, r3, #1
 8008f70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008f74:	441c      	add	r4, r3
 8008f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008f84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008f88:	4642      	mov	r2, r8
 8008f8a:	464b      	mov	r3, r9
 8008f8c:	1891      	adds	r1, r2, r2
 8008f8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008f90:	415b      	adcs	r3, r3
 8008f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008f98:	4641      	mov	r1, r8
 8008f9a:	1851      	adds	r1, r2, r1
 8008f9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	414b      	adcs	r3, r1
 8008fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fa4:	f04f 0200 	mov.w	r2, #0
 8008fa8:	f04f 0300 	mov.w	r3, #0
 8008fac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008fb0:	4659      	mov	r1, fp
 8008fb2:	00cb      	lsls	r3, r1, #3
 8008fb4:	4651      	mov	r1, sl
 8008fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fba:	4651      	mov	r1, sl
 8008fbc:	00ca      	lsls	r2, r1, #3
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	4642      	mov	r2, r8
 8008fc6:	189b      	adds	r3, r3, r2
 8008fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008fcc:	464b      	mov	r3, r9
 8008fce:	460a      	mov	r2, r1
 8008fd0:	eb42 0303 	adc.w	r3, r2, r3
 8008fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008fe4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008fe8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008fec:	460b      	mov	r3, r1
 8008fee:	18db      	adds	r3, r3, r3
 8008ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	eb42 0303 	adc.w	r3, r2, r3
 8008ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ffa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008ffe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009002:	f7f7 fdd1 	bl	8000ba8 <__aeabi_uldivmod>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	4b0d      	ldr	r3, [pc, #52]	@ (8009040 <UART_SetConfig+0x2d4>)
 800900c:	fba3 1302 	umull	r1, r3, r3, r2
 8009010:	095b      	lsrs	r3, r3, #5
 8009012:	2164      	movs	r1, #100	@ 0x64
 8009014:	fb01 f303 	mul.w	r3, r1, r3
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	00db      	lsls	r3, r3, #3
 800901c:	3332      	adds	r3, #50	@ 0x32
 800901e:	4a08      	ldr	r2, [pc, #32]	@ (8009040 <UART_SetConfig+0x2d4>)
 8009020:	fba2 2303 	umull	r2, r3, r2, r3
 8009024:	095b      	lsrs	r3, r3, #5
 8009026:	f003 0207 	and.w	r2, r3, #7
 800902a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4422      	add	r2, r4
 8009032:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009034:	e106      	b.n	8009244 <UART_SetConfig+0x4d8>
 8009036:	bf00      	nop
 8009038:	40011000 	.word	0x40011000
 800903c:	40011400 	.word	0x40011400
 8009040:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009048:	2200      	movs	r2, #0
 800904a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800904e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009052:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009056:	4642      	mov	r2, r8
 8009058:	464b      	mov	r3, r9
 800905a:	1891      	adds	r1, r2, r2
 800905c:	6239      	str	r1, [r7, #32]
 800905e:	415b      	adcs	r3, r3
 8009060:	627b      	str	r3, [r7, #36]	@ 0x24
 8009062:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009066:	4641      	mov	r1, r8
 8009068:	1854      	adds	r4, r2, r1
 800906a:	4649      	mov	r1, r9
 800906c:	eb43 0501 	adc.w	r5, r3, r1
 8009070:	f04f 0200 	mov.w	r2, #0
 8009074:	f04f 0300 	mov.w	r3, #0
 8009078:	00eb      	lsls	r3, r5, #3
 800907a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800907e:	00e2      	lsls	r2, r4, #3
 8009080:	4614      	mov	r4, r2
 8009082:	461d      	mov	r5, r3
 8009084:	4643      	mov	r3, r8
 8009086:	18e3      	adds	r3, r4, r3
 8009088:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800908c:	464b      	mov	r3, r9
 800908e:	eb45 0303 	adc.w	r3, r5, r3
 8009092:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80090a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	f04f 0300 	mov.w	r3, #0
 80090ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80090b2:	4629      	mov	r1, r5
 80090b4:	008b      	lsls	r3, r1, #2
 80090b6:	4621      	mov	r1, r4
 80090b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090bc:	4621      	mov	r1, r4
 80090be:	008a      	lsls	r2, r1, #2
 80090c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80090c4:	f7f7 fd70 	bl	8000ba8 <__aeabi_uldivmod>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	4b60      	ldr	r3, [pc, #384]	@ (8009250 <UART_SetConfig+0x4e4>)
 80090ce:	fba3 2302 	umull	r2, r3, r3, r2
 80090d2:	095b      	lsrs	r3, r3, #5
 80090d4:	011c      	lsls	r4, r3, #4
 80090d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090da:	2200      	movs	r2, #0
 80090dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80090e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80090e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80090e8:	4642      	mov	r2, r8
 80090ea:	464b      	mov	r3, r9
 80090ec:	1891      	adds	r1, r2, r2
 80090ee:	61b9      	str	r1, [r7, #24]
 80090f0:	415b      	adcs	r3, r3
 80090f2:	61fb      	str	r3, [r7, #28]
 80090f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090f8:	4641      	mov	r1, r8
 80090fa:	1851      	adds	r1, r2, r1
 80090fc:	6139      	str	r1, [r7, #16]
 80090fe:	4649      	mov	r1, r9
 8009100:	414b      	adcs	r3, r1
 8009102:	617b      	str	r3, [r7, #20]
 8009104:	f04f 0200 	mov.w	r2, #0
 8009108:	f04f 0300 	mov.w	r3, #0
 800910c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009110:	4659      	mov	r1, fp
 8009112:	00cb      	lsls	r3, r1, #3
 8009114:	4651      	mov	r1, sl
 8009116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800911a:	4651      	mov	r1, sl
 800911c:	00ca      	lsls	r2, r1, #3
 800911e:	4610      	mov	r0, r2
 8009120:	4619      	mov	r1, r3
 8009122:	4603      	mov	r3, r0
 8009124:	4642      	mov	r2, r8
 8009126:	189b      	adds	r3, r3, r2
 8009128:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800912c:	464b      	mov	r3, r9
 800912e:	460a      	mov	r2, r1
 8009130:	eb42 0303 	adc.w	r3, r2, r3
 8009134:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009142:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009144:	f04f 0200 	mov.w	r2, #0
 8009148:	f04f 0300 	mov.w	r3, #0
 800914c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009150:	4649      	mov	r1, r9
 8009152:	008b      	lsls	r3, r1, #2
 8009154:	4641      	mov	r1, r8
 8009156:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800915a:	4641      	mov	r1, r8
 800915c:	008a      	lsls	r2, r1, #2
 800915e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009162:	f7f7 fd21 	bl	8000ba8 <__aeabi_uldivmod>
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	4611      	mov	r1, r2
 800916c:	4b38      	ldr	r3, [pc, #224]	@ (8009250 <UART_SetConfig+0x4e4>)
 800916e:	fba3 2301 	umull	r2, r3, r3, r1
 8009172:	095b      	lsrs	r3, r3, #5
 8009174:	2264      	movs	r2, #100	@ 0x64
 8009176:	fb02 f303 	mul.w	r3, r2, r3
 800917a:	1acb      	subs	r3, r1, r3
 800917c:	011b      	lsls	r3, r3, #4
 800917e:	3332      	adds	r3, #50	@ 0x32
 8009180:	4a33      	ldr	r2, [pc, #204]	@ (8009250 <UART_SetConfig+0x4e4>)
 8009182:	fba2 2303 	umull	r2, r3, r2, r3
 8009186:	095b      	lsrs	r3, r3, #5
 8009188:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800918c:	441c      	add	r4, r3
 800918e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009192:	2200      	movs	r2, #0
 8009194:	673b      	str	r3, [r7, #112]	@ 0x70
 8009196:	677a      	str	r2, [r7, #116]	@ 0x74
 8009198:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800919c:	4642      	mov	r2, r8
 800919e:	464b      	mov	r3, r9
 80091a0:	1891      	adds	r1, r2, r2
 80091a2:	60b9      	str	r1, [r7, #8]
 80091a4:	415b      	adcs	r3, r3
 80091a6:	60fb      	str	r3, [r7, #12]
 80091a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091ac:	4641      	mov	r1, r8
 80091ae:	1851      	adds	r1, r2, r1
 80091b0:	6039      	str	r1, [r7, #0]
 80091b2:	4649      	mov	r1, r9
 80091b4:	414b      	adcs	r3, r1
 80091b6:	607b      	str	r3, [r7, #4]
 80091b8:	f04f 0200 	mov.w	r2, #0
 80091bc:	f04f 0300 	mov.w	r3, #0
 80091c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80091c4:	4659      	mov	r1, fp
 80091c6:	00cb      	lsls	r3, r1, #3
 80091c8:	4651      	mov	r1, sl
 80091ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091ce:	4651      	mov	r1, sl
 80091d0:	00ca      	lsls	r2, r1, #3
 80091d2:	4610      	mov	r0, r2
 80091d4:	4619      	mov	r1, r3
 80091d6:	4603      	mov	r3, r0
 80091d8:	4642      	mov	r2, r8
 80091da:	189b      	adds	r3, r3, r2
 80091dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091de:	464b      	mov	r3, r9
 80091e0:	460a      	mov	r2, r1
 80091e2:	eb42 0303 	adc.w	r3, r2, r3
 80091e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80091f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80091f4:	f04f 0200 	mov.w	r2, #0
 80091f8:	f04f 0300 	mov.w	r3, #0
 80091fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009200:	4649      	mov	r1, r9
 8009202:	008b      	lsls	r3, r1, #2
 8009204:	4641      	mov	r1, r8
 8009206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800920a:	4641      	mov	r1, r8
 800920c:	008a      	lsls	r2, r1, #2
 800920e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009212:	f7f7 fcc9 	bl	8000ba8 <__aeabi_uldivmod>
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	4b0d      	ldr	r3, [pc, #52]	@ (8009250 <UART_SetConfig+0x4e4>)
 800921c:	fba3 1302 	umull	r1, r3, r3, r2
 8009220:	095b      	lsrs	r3, r3, #5
 8009222:	2164      	movs	r1, #100	@ 0x64
 8009224:	fb01 f303 	mul.w	r3, r1, r3
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	011b      	lsls	r3, r3, #4
 800922c:	3332      	adds	r3, #50	@ 0x32
 800922e:	4a08      	ldr	r2, [pc, #32]	@ (8009250 <UART_SetConfig+0x4e4>)
 8009230:	fba2 2303 	umull	r2, r3, r2, r3
 8009234:	095b      	lsrs	r3, r3, #5
 8009236:	f003 020f 	and.w	r2, r3, #15
 800923a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4422      	add	r2, r4
 8009242:	609a      	str	r2, [r3, #8]
}
 8009244:	bf00      	nop
 8009246:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800924a:	46bd      	mov	sp, r7
 800924c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009250:	51eb851f 	.word	0x51eb851f

08009254 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009254:	b084      	sub	sp, #16
 8009256:	b580      	push	{r7, lr}
 8009258:	b084      	sub	sp, #16
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	f107 001c 	add.w	r0, r7, #28
 8009262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009266:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800926a:	2b01      	cmp	r3, #1
 800926c:	d123      	bne.n	80092b6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009272:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009282:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009296:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800929a:	2b01      	cmp	r3, #1
 800929c:	d105      	bne.n	80092aa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f9dc 	bl	8009668 <USB_CoreReset>
 80092b0:	4603      	mov	r3, r0
 80092b2:	73fb      	strb	r3, [r7, #15]
 80092b4:	e01b      	b.n	80092ee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f9d0 	bl	8009668 <USB_CoreReset>
 80092c8:	4603      	mov	r3, r0
 80092ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80092cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d106      	bne.n	80092e2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	639a      	str	r2, [r3, #56]	@ 0x38
 80092e0:	e005      	b.n	80092ee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80092ee:	7fbb      	ldrb	r3, [r7, #30]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d10b      	bne.n	800930c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f043 0206 	orr.w	r2, r3, #6
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f043 0220 	orr.w	r2, r3, #32
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800930c:	7bfb      	ldrb	r3, [r7, #15]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009318:	b004      	add	sp, #16
 800931a:	4770      	bx	lr

0800931c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	f043 0201 	orr.w	r2, r3, #1
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800933e:	b480      	push	{r7}
 8009340:	b083      	sub	sp, #12
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	f023 0201 	bic.w	r2, r3, #1
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800937c:	78fb      	ldrb	r3, [r7, #3]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d115      	bne.n	80093ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800938e:	200a      	movs	r0, #10
 8009390:	f7f9 fc48 	bl	8002c24 <HAL_Delay>
      ms += 10U;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	330a      	adds	r3, #10
 8009398:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f956 	bl	800964c <USB_GetMode>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d01e      	beq.n	80093e4 <USB_SetCurrentMode+0x84>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80093aa:	d9f0      	bls.n	800938e <USB_SetCurrentMode+0x2e>
 80093ac:	e01a      	b.n	80093e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80093ae:	78fb      	ldrb	r3, [r7, #3]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d115      	bne.n	80093e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093c0:	200a      	movs	r0, #10
 80093c2:	f7f9 fc2f 	bl	8002c24 <HAL_Delay>
      ms += 10U;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	330a      	adds	r3, #10
 80093ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f93d 	bl	800964c <USB_GetMode>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d005      	beq.n	80093e4 <USB_SetCurrentMode+0x84>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2bc7      	cmp	r3, #199	@ 0xc7
 80093dc:	d9f0      	bls.n	80093c0 <USB_SetCurrentMode+0x60>
 80093de:	e001      	b.n	80093e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e005      	b.n	80093f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2bc8      	cmp	r3, #200	@ 0xc8
 80093e8:	d101      	bne.n	80093ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e000      	b.n	80093f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009402:	2300      	movs	r3, #0
 8009404:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	3301      	adds	r3, #1
 800940a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009412:	d901      	bls.n	8009418 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	e01b      	b.n	8009450 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	2b00      	cmp	r3, #0
 800941e:	daf2      	bge.n	8009406 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009420:	2300      	movs	r3, #0
 8009422:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	019b      	lsls	r3, r3, #6
 8009428:	f043 0220 	orr.w	r2, r3, #32
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3301      	adds	r3, #1
 8009434:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800943c:	d901      	bls.n	8009442 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e006      	b.n	8009450 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f003 0320 	and.w	r3, r3, #32
 800944a:	2b20      	cmp	r3, #32
 800944c:	d0f0      	beq.n	8009430 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3714      	adds	r7, #20
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009464:	2300      	movs	r3, #0
 8009466:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	3301      	adds	r3, #1
 800946c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009474:	d901      	bls.n	800947a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009476:	2303      	movs	r3, #3
 8009478:	e018      	b.n	80094ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	2b00      	cmp	r3, #0
 8009480:	daf2      	bge.n	8009468 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009482:	2300      	movs	r3, #0
 8009484:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2210      	movs	r2, #16
 800948a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3301      	adds	r3, #1
 8009490:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009498:	d901      	bls.n	800949e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800949a:	2303      	movs	r3, #3
 800949c:	e006      	b.n	80094ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	f003 0310 	and.w	r3, r3, #16
 80094a6:	2b10      	cmp	r3, #16
 80094a8:	d0f0      	beq.n	800948c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b089      	sub	sp, #36	@ 0x24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	4611      	mov	r1, r2
 80094c4:	461a      	mov	r2, r3
 80094c6:	460b      	mov	r3, r1
 80094c8:	71fb      	strb	r3, [r7, #7]
 80094ca:	4613      	mov	r3, r2
 80094cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80094d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d123      	bne.n	8009526 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80094de:	88bb      	ldrh	r3, [r7, #4]
 80094e0:	3303      	adds	r3, #3
 80094e2:	089b      	lsrs	r3, r3, #2
 80094e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80094e6:	2300      	movs	r3, #0
 80094e8:	61bb      	str	r3, [r7, #24]
 80094ea:	e018      	b.n	800951e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80094ec:	79fb      	ldrb	r3, [r7, #7]
 80094ee:	031a      	lsls	r2, r3, #12
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	4413      	add	r3, r2
 80094f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094f8:	461a      	mov	r2, r3
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	3301      	adds	r3, #1
 8009504:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	3301      	adds	r3, #1
 800950a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	3301      	adds	r3, #1
 8009510:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	3301      	adds	r3, #1
 8009516:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	3301      	adds	r3, #1
 800951c:	61bb      	str	r3, [r7, #24]
 800951e:	69ba      	ldr	r2, [r7, #24]
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	429a      	cmp	r2, r3
 8009524:	d3e2      	bcc.n	80094ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3724      	adds	r7, #36	@ 0x24
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009534:	b480      	push	{r7}
 8009536:	b08b      	sub	sp, #44	@ 0x2c
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	4613      	mov	r3, r2
 8009540:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800954a:	88fb      	ldrh	r3, [r7, #6]
 800954c:	089b      	lsrs	r3, r3, #2
 800954e:	b29b      	uxth	r3, r3
 8009550:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009552:	88fb      	ldrh	r3, [r7, #6]
 8009554:	f003 0303 	and.w	r3, r3, #3
 8009558:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800955a:	2300      	movs	r3, #0
 800955c:	623b      	str	r3, [r7, #32]
 800955e:	e014      	b.n	800958a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956a:	601a      	str	r2, [r3, #0]
    pDest++;
 800956c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956e:	3301      	adds	r3, #1
 8009570:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009574:	3301      	adds	r3, #1
 8009576:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957a:	3301      	adds	r3, #1
 800957c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800957e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009580:	3301      	adds	r3, #1
 8009582:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	3301      	adds	r3, #1
 8009588:	623b      	str	r3, [r7, #32]
 800958a:	6a3a      	ldr	r2, [r7, #32]
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	429a      	cmp	r2, r3
 8009590:	d3e6      	bcc.n	8009560 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009592:	8bfb      	ldrh	r3, [r7, #30]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d01e      	beq.n	80095d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009598:	2300      	movs	r3, #0
 800959a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095a2:	461a      	mov	r2, r3
 80095a4:	f107 0310 	add.w	r3, r7, #16
 80095a8:	6812      	ldr	r2, [r2, #0]
 80095aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	00db      	lsls	r3, r3, #3
 80095b4:	fa22 f303 	lsr.w	r3, r2, r3
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095bc:	701a      	strb	r2, [r3, #0]
      i++;
 80095be:	6a3b      	ldr	r3, [r7, #32]
 80095c0:	3301      	adds	r3, #1
 80095c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80095c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c6:	3301      	adds	r3, #1
 80095c8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80095ca:	8bfb      	ldrh	r3, [r7, #30]
 80095cc:	3b01      	subs	r3, #1
 80095ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80095d0:	8bfb      	ldrh	r3, [r7, #30]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1ea      	bne.n	80095ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80095d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80095d8:	4618      	mov	r0, r3
 80095da:	372c      	adds	r7, #44	@ 0x2c
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	695b      	ldr	r3, [r3, #20]
 80095f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	4013      	ands	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80095fc:	68fb      	ldr	r3, [r7, #12]
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3714      	adds	r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800960a:	b480      	push	{r7}
 800960c:	b085      	sub	sp, #20
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	460b      	mov	r3, r1
 8009614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800961a:	78fb      	ldrb	r3, [r7, #3]
 800961c:	015a      	lsls	r2, r3, #5
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	4413      	add	r3, r2
 8009622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800962a:	78fb      	ldrb	r3, [r7, #3]
 800962c:	015a      	lsls	r2, r3, #5
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	4413      	add	r3, r2
 8009632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	4013      	ands	r3, r2
 800963c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800963e:	68bb      	ldr	r3, [r7, #8]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3714      	adds	r7, #20
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	f003 0301 	and.w	r3, r3, #1
}
 800965c:	4618      	mov	r0, r3
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009670:	2300      	movs	r3, #0
 8009672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	3301      	adds	r3, #1
 8009678:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009680:	d901      	bls.n	8009686 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e022      	b.n	80096cc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	daf2      	bge.n	8009674 <USB_CoreReset+0xc>

  count = 10U;
 800968e:	230a      	movs	r3, #10
 8009690:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8009692:	e002      	b.n	800969a <USB_CoreReset+0x32>
  {
    count--;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	3b01      	subs	r3, #1
 8009698:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1f9      	bne.n	8009694 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	f043 0201 	orr.w	r2, r3, #1
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	3301      	adds	r3, #1
 80096b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80096b8:	d901      	bls.n	80096be <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80096ba:	2303      	movs	r3, #3
 80096bc:	e006      	b.n	80096cc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	691b      	ldr	r3, [r3, #16]
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d0f0      	beq.n	80096ac <USB_CoreReset+0x44>

  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096d8:	b084      	sub	sp, #16
 80096da:	b580      	push	{r7, lr}
 80096dc:	b086      	sub	sp, #24
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
 80096e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80096e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80096f8:	461a      	mov	r2, r3
 80096fa:	2300      	movs	r3, #0
 80096fc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009702:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800970e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800972a:	2b00      	cmp	r3, #0
 800972c:	d119      	bne.n	8009762 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800972e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009732:	2b01      	cmp	r3, #1
 8009734:	d10a      	bne.n	800974c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009744:	f043 0304 	orr.w	r3, r3, #4
 8009748:	6013      	str	r3, [r2, #0]
 800974a:	e014      	b.n	8009776 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800975a:	f023 0304 	bic.w	r3, r3, #4
 800975e:	6013      	str	r3, [r2, #0]
 8009760:	e009      	b.n	8009776 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009770:	f023 0304 	bic.w	r3, r3, #4
 8009774:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009776:	2110      	movs	r1, #16
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7ff fe3d 	bl	80093f8 <USB_FlushTxFifo>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d001      	beq.n	8009788 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7ff fe67 	bl	800945c <USB_FlushRxFifo>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009798:	2300      	movs	r3, #0
 800979a:	613b      	str	r3, [r7, #16]
 800979c:	e015      	b.n	80097ca <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	015a      	lsls	r2, r3, #5
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	4413      	add	r3, r2
 80097a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097aa:	461a      	mov	r2, r3
 80097ac:	f04f 33ff 	mov.w	r3, #4294967295
 80097b0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097be:	461a      	mov	r2, r3
 80097c0:	2300      	movs	r3, #0
 80097c2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	3301      	adds	r3, #1
 80097c8:	613b      	str	r3, [r7, #16]
 80097ca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80097ce:	461a      	mov	r2, r3
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d3e3      	bcc.n	800979e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f04f 32ff 	mov.w	r2, #4294967295
 80097e2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a18      	ldr	r2, [pc, #96]	@ (8009848 <USB_HostInit+0x170>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d10b      	bne.n	8009804 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097f2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a15      	ldr	r2, [pc, #84]	@ (800984c <USB_HostInit+0x174>)
 80097f8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a14      	ldr	r2, [pc, #80]	@ (8009850 <USB_HostInit+0x178>)
 80097fe:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8009802:	e009      	b.n	8009818 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2280      	movs	r2, #128	@ 0x80
 8009808:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a11      	ldr	r2, [pc, #68]	@ (8009854 <USB_HostInit+0x17c>)
 800980e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a11      	ldr	r2, [pc, #68]	@ (8009858 <USB_HostInit+0x180>)
 8009814:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009818:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800981c:	2b00      	cmp	r3, #0
 800981e:	d105      	bne.n	800982c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	f043 0210 	orr.w	r2, r3, #16
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	699a      	ldr	r2, [r3, #24]
 8009830:	4b0a      	ldr	r3, [pc, #40]	@ (800985c <USB_HostInit+0x184>)
 8009832:	4313      	orrs	r3, r2
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009838:	7dfb      	ldrb	r3, [r7, #23]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3718      	adds	r7, #24
 800983e:	46bd      	mov	sp, r7
 8009840:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009844:	b004      	add	sp, #16
 8009846:	4770      	bx	lr
 8009848:	40040000 	.word	0x40040000
 800984c:	01000200 	.word	0x01000200
 8009850:	00e00300 	.word	0x00e00300
 8009854:	00600080 	.word	0x00600080
 8009858:	004000e0 	.word	0x004000e0
 800985c:	a3200008 	.word	0xa3200008

08009860 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800987e:	f023 0303 	bic.w	r3, r3, #3
 8009882:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	78fb      	ldrb	r3, [r7, #3]
 800988e:	f003 0303 	and.w	r3, r3, #3
 8009892:	68f9      	ldr	r1, [r7, #12]
 8009894:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009898:	4313      	orrs	r3, r2
 800989a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800989c:	78fb      	ldrb	r3, [r7, #3]
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d107      	bne.n	80098b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098a8:	461a      	mov	r2, r3
 80098aa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80098ae:	6053      	str	r3, [r2, #4]
 80098b0:	e00c      	b.n	80098cc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80098b2:	78fb      	ldrb	r3, [r7, #3]
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d107      	bne.n	80098c8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098be:	461a      	mov	r2, r3
 80098c0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80098c4:	6053      	str	r3, [r2, #4]
 80098c6:	e001      	b.n	80098cc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e000      	b.n	80098ce <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b084      	sub	sp, #16
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80098e6:	2300      	movs	r3, #0
 80098e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80098fa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009904:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009908:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800990a:	2064      	movs	r0, #100	@ 0x64
 800990c:	f7f9 f98a 	bl	8002c24 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009918:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800991c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800991e:	200a      	movs	r0, #10
 8009920:	f7f9 f980 	bl	8002c24 <HAL_Delay>

  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800992e:	b480      	push	{r7}
 8009930:	b085      	sub	sp, #20
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	460b      	mov	r3, r1
 8009938:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800993e:	2300      	movs	r3, #0
 8009940:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009952:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d109      	bne.n	8009972 <USB_DriveVbus+0x44>
 800995e:	78fb      	ldrb	r3, [r7, #3]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d106      	bne.n	8009972 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800996c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009970:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800997c:	d109      	bne.n	8009992 <USB_DriveVbus+0x64>
 800997e:	78fb      	ldrb	r3, [r7, #3]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d106      	bne.n	8009992 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800998c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009990:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80099ac:	2300      	movs	r3, #0
 80099ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	0c5b      	lsrs	r3, r3, #17
 80099be:	f003 0303 	and.w	r3, r3, #3
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b085      	sub	sp, #20
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	b29b      	uxth	r3, r3
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b088      	sub	sp, #32
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	4608      	mov	r0, r1
 80099fa:	4611      	mov	r1, r2
 80099fc:	461a      	mov	r2, r3
 80099fe:	4603      	mov	r3, r0
 8009a00:	70fb      	strb	r3, [r7, #3]
 8009a02:	460b      	mov	r3, r1
 8009a04:	70bb      	strb	r3, [r7, #2]
 8009a06:	4613      	mov	r3, r2
 8009a08:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8009a12:	78fb      	ldrb	r3, [r7, #3]
 8009a14:	015a      	lsls	r2, r3, #5
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	4413      	add	r3, r2
 8009a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a1e:	461a      	mov	r2, r3
 8009a20:	f04f 33ff 	mov.w	r3, #4294967295
 8009a24:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009a26:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a2a:	2b03      	cmp	r3, #3
 8009a2c:	d87c      	bhi.n	8009b28 <USB_HC_Init+0x138>
 8009a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a34 <USB_HC_Init+0x44>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009a45 	.word	0x08009a45
 8009a38:	08009aeb 	.word	0x08009aeb
 8009a3c:	08009a45 	.word	0x08009a45
 8009a40:	08009aad 	.word	0x08009aad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009a44:	78fb      	ldrb	r3, [r7, #3]
 8009a46:	015a      	lsls	r2, r3, #5
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a50:	461a      	mov	r2, r3
 8009a52:	f240 439d 	movw	r3, #1181	@ 0x49d
 8009a56:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009a58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	da10      	bge.n	8009a82 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	78fa      	ldrb	r2, [r7, #3]
 8009a70:	0151      	lsls	r1, r2, #5
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	440a      	add	r2, r1
 8009a76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009a7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a7e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009a80:	e055      	b.n	8009b2e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a6f      	ldr	r2, [pc, #444]	@ (8009c44 <USB_HC_Init+0x254>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d151      	bne.n	8009b2e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	015a      	lsls	r2, r3, #5
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	4413      	add	r3, r2
 8009a92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	78fa      	ldrb	r2, [r7, #3]
 8009a9a:	0151      	lsls	r1, r2, #5
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	440a      	add	r2, r1
 8009aa0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009aa4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009aa8:	60d3      	str	r3, [r2, #12]
      break;
 8009aaa:	e040      	b.n	8009b2e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009aac:	78fb      	ldrb	r3, [r7, #3]
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ab8:	461a      	mov	r2, r3
 8009aba:	f240 639d 	movw	r3, #1693	@ 0x69d
 8009abe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009ac0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	da34      	bge.n	8009b32 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009ac8:	78fb      	ldrb	r3, [r7, #3]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	78fa      	ldrb	r2, [r7, #3]
 8009ad8:	0151      	lsls	r1, r2, #5
 8009ada:	693a      	ldr	r2, [r7, #16]
 8009adc:	440a      	add	r2, r1
 8009ade:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ae6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009ae8:	e023      	b.n	8009b32 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009aea:	78fb      	ldrb	r3, [r7, #3]
 8009aec:	015a      	lsls	r2, r3, #5
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	4413      	add	r3, r2
 8009af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009af6:	461a      	mov	r2, r3
 8009af8:	f240 2325 	movw	r3, #549	@ 0x225
 8009afc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009afe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	da17      	bge.n	8009b36 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009b06:	78fb      	ldrb	r3, [r7, #3]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	78fa      	ldrb	r2, [r7, #3]
 8009b16:	0151      	lsls	r1, r2, #5
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	440a      	add	r2, r1
 8009b1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b20:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8009b24:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009b26:	e006      	b.n	8009b36 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	77fb      	strb	r3, [r7, #31]
      break;
 8009b2c:	e004      	b.n	8009b38 <USB_HC_Init+0x148>
      break;
 8009b2e:	bf00      	nop
 8009b30:	e002      	b.n	8009b38 <USB_HC_Init+0x148>
      break;
 8009b32:	bf00      	nop
 8009b34:	e000      	b.n	8009b38 <USB_HC_Init+0x148>
      break;
 8009b36:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009b38:	78fb      	ldrb	r3, [r7, #3]
 8009b3a:	015a      	lsls	r2, r3, #5
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	4413      	add	r3, r2
 8009b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b44:	461a      	mov	r2, r3
 8009b46:	2300      	movs	r3, #0
 8009b48:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009b4a:	78fb      	ldrb	r3, [r7, #3]
 8009b4c:	015a      	lsls	r2, r3, #5
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	78fa      	ldrb	r2, [r7, #3]
 8009b5a:	0151      	lsls	r1, r2, #5
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	440a      	add	r2, r1
 8009b60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b64:	f043 0302 	orr.w	r3, r3, #2
 8009b68:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009b70:	699a      	ldr	r2, [r3, #24]
 8009b72:	78fb      	ldrb	r3, [r7, #3]
 8009b74:	f003 030f 	and.w	r3, r3, #15
 8009b78:	2101      	movs	r1, #1
 8009b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b7e:	6939      	ldr	r1, [r7, #16]
 8009b80:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009b84:	4313      	orrs	r3, r2
 8009b86:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009b94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	da03      	bge.n	8009ba4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009b9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ba0:	61bb      	str	r3, [r7, #24]
 8009ba2:	e001      	b.n	8009ba8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7ff fef9 	bl	80099a0 <USB_GetHostSpeed>
 8009bae:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009bb0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d106      	bne.n	8009bc6 <USB_HC_Init+0x1d6>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d003      	beq.n	8009bc6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009bbe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009bc2:	617b      	str	r3, [r7, #20]
 8009bc4:	e001      	b.n	8009bca <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009bca:	787b      	ldrb	r3, [r7, #1]
 8009bcc:	059b      	lsls	r3, r3, #22
 8009bce:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009bd2:	78bb      	ldrb	r3, [r7, #2]
 8009bd4:	02db      	lsls	r3, r3, #11
 8009bd6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009bda:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009bdc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009be0:	049b      	lsls	r3, r3, #18
 8009be2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009be6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009be8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009bee:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	431a      	orrs	r2, r3
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009bf8:	78fa      	ldrb	r2, [r7, #3]
 8009bfa:	0151      	lsls	r1, r2, #5
 8009bfc:	693a      	ldr	r2, [r7, #16]
 8009bfe:	440a      	add	r2, r1
 8009c00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009c04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c08:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009c0a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d003      	beq.n	8009c1a <USB_HC_Init+0x22a>
 8009c12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d10f      	bne.n	8009c3a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009c1a:	78fb      	ldrb	r3, [r7, #3]
 8009c1c:	015a      	lsls	r2, r3, #5
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	4413      	add	r3, r2
 8009c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	78fa      	ldrb	r2, [r7, #3]
 8009c2a:	0151      	lsls	r1, r2, #5
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	440a      	add	r2, r1
 8009c30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009c34:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009c38:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009c3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3720      	adds	r7, #32
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	40040000 	.word	0x40040000

08009c48 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08c      	sub	sp, #48	@ 0x30
 8009c4c:	af02      	add	r7, sp, #8
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	4613      	mov	r3, r2
 8009c54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	785b      	ldrb	r3, [r3, #1]
 8009c5e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009c60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009c64:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	4a5d      	ldr	r2, [pc, #372]	@ (8009de0 <USB_HC_StartXfer+0x198>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d12f      	bne.n	8009cce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009c6e:	79fb      	ldrb	r3, [r7, #7]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d11c      	bne.n	8009cae <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	7c9b      	ldrb	r3, [r3, #18]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d003      	beq.n	8009c84 <USB_HC_StartXfer+0x3c>
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	7c9b      	ldrb	r3, [r3, #18]
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d124      	bne.n	8009cce <USB_HC_StartXfer+0x86>
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	799b      	ldrb	r3, [r3, #6]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d120      	bne.n	8009cce <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	69fa      	ldr	r2, [r7, #28]
 8009c9c:	0151      	lsls	r1, r2, #5
 8009c9e:	6a3a      	ldr	r2, [r7, #32]
 8009ca0:	440a      	add	r2, r1
 8009ca2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009caa:	60d3      	str	r3, [r2, #12]
 8009cac:	e00f      	b.n	8009cce <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	791b      	ldrb	r3, [r3, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10b      	bne.n	8009cce <USB_HC_StartXfer+0x86>
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	795b      	ldrb	r3, [r3, #5]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d107      	bne.n	8009cce <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	785b      	ldrb	r3, [r3, #1]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f000 fb6b 	bl	800a3a0 <USB_DoPing>
        return HAL_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	e232      	b.n	800a134 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	799b      	ldrb	r3, [r3, #6]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d158      	bne.n	8009d88 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	78db      	ldrb	r3, [r3, #3]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d007      	beq.n	8009cf2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009ce2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	8a92      	ldrh	r2, [r2, #20]
 8009ce8:	fb03 f202 	mul.w	r2, r3, r2
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	61da      	str	r2, [r3, #28]
 8009cf0:	e07c      	b.n	8009dec <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	7c9b      	ldrb	r3, [r3, #18]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d130      	bne.n	8009d5c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	2bbc      	cmp	r3, #188	@ 0xbc
 8009d00:	d918      	bls.n	8009d34 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	8a9b      	ldrh	r3, [r3, #20]
 8009d06:	461a      	mov	r2, r3
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	69da      	ldr	r2, [r3, #28]
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d003      	beq.n	8009d24 <USB_HC_StartXfer+0xdc>
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	2b02      	cmp	r3, #2
 8009d22:	d103      	bne.n	8009d2c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	2202      	movs	r2, #2
 8009d28:	60da      	str	r2, [r3, #12]
 8009d2a:	e05f      	b.n	8009dec <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	60da      	str	r2, [r3, #12]
 8009d32:	e05b      	b.n	8009dec <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	6a1a      	ldr	r2, [r3, #32]
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d007      	beq.n	8009d54 <USB_HC_StartXfer+0x10c>
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d003      	beq.n	8009d54 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2204      	movs	r2, #4
 8009d50:	60da      	str	r2, [r3, #12]
 8009d52:	e04b      	b.n	8009dec <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	2203      	movs	r2, #3
 8009d58:	60da      	str	r2, [r3, #12]
 8009d5a:	e047      	b.n	8009dec <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009d5c:	79fb      	ldrb	r3, [r7, #7]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d10d      	bne.n	8009d7e <USB_HC_StartXfer+0x136>
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	8a92      	ldrh	r2, [r2, #20]
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d907      	bls.n	8009d7e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009d6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	8a92      	ldrh	r2, [r2, #20]
 8009d74:	fb03 f202 	mul.w	r2, r3, r2
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	61da      	str	r2, [r3, #28]
 8009d7c:	e036      	b.n	8009dec <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	6a1a      	ldr	r2, [r3, #32]
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	61da      	str	r2, [r3, #28]
 8009d86:	e031      	b.n	8009dec <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	6a1b      	ldr	r3, [r3, #32]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d018      	beq.n	8009dc2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	6a1b      	ldr	r3, [r3, #32]
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	8a92      	ldrh	r2, [r2, #20]
 8009d98:	4413      	add	r3, r2
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	8a92      	ldrh	r2, [r2, #20]
 8009da0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009da4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8009da6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009da8:	8b7b      	ldrh	r3, [r7, #26]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d90b      	bls.n	8009dc6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009dae:	8b7b      	ldrh	r3, [r7, #26]
 8009db0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009db2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	8a92      	ldrh	r2, [r2, #20]
 8009db8:	fb03 f202 	mul.w	r2, r3, r2
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	61da      	str	r2, [r3, #28]
 8009dc0:	e001      	b.n	8009dc6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	78db      	ldrb	r3, [r3, #3]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00a      	beq.n	8009de4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009dce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009dd0:	68ba      	ldr	r2, [r7, #8]
 8009dd2:	8a92      	ldrh	r2, [r2, #20]
 8009dd4:	fb03 f202 	mul.w	r2, r3, r2
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	61da      	str	r2, [r3, #28]
 8009ddc:	e006      	b.n	8009dec <USB_HC_StartXfer+0x1a4>
 8009dde:	bf00      	nop
 8009de0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	6a1a      	ldr	r2, [r3, #32]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	69db      	ldr	r3, [r3, #28]
 8009df0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009df4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009df6:	04d9      	lsls	r1, r3, #19
 8009df8:	4ba3      	ldr	r3, [pc, #652]	@ (800a088 <USB_HC_StartXfer+0x440>)
 8009dfa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009dfc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	7d9b      	ldrb	r3, [r3, #22]
 8009e02:	075b      	lsls	r3, r3, #29
 8009e04:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009e08:	69f9      	ldr	r1, [r7, #28]
 8009e0a:	0148      	lsls	r0, r1, #5
 8009e0c:	6a39      	ldr	r1, [r7, #32]
 8009e0e:	4401      	add	r1, r0
 8009e10:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009e14:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009e16:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009e18:	79fb      	ldrb	r3, [r7, #7]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d009      	beq.n	8009e32 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	6999      	ldr	r1, [r3, #24]
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	015a      	lsls	r2, r3, #5
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	4413      	add	r3, r2
 8009e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e2e:	460a      	mov	r2, r1
 8009e30:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f003 0301 	and.w	r3, r3, #1
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	bf0c      	ite	eq
 8009e42:	2301      	moveq	r3, #1
 8009e44:	2300      	movne	r3, #0
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	015a      	lsls	r2, r3, #5
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	4413      	add	r3, r2
 8009e52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	69fa      	ldr	r2, [r7, #28]
 8009e5a:	0151      	lsls	r1, r2, #5
 8009e5c:	6a3a      	ldr	r2, [r7, #32]
 8009e5e:	440a      	add	r2, r1
 8009e60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e64:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009e68:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	015a      	lsls	r2, r3, #5
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	4413      	add	r3, r2
 8009e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	7e7b      	ldrb	r3, [r7, #25]
 8009e7a:	075b      	lsls	r3, r3, #29
 8009e7c:	69f9      	ldr	r1, [r7, #28]
 8009e7e:	0148      	lsls	r0, r1, #5
 8009e80:	6a39      	ldr	r1, [r7, #32]
 8009e82:	4401      	add	r1, r0
 8009e84:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	799b      	ldrb	r3, [r3, #6]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	f040 80c3 	bne.w	800a01c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	7c5b      	ldrb	r3, [r3, #17]
 8009e9a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	69fa      	ldr	r2, [r7, #28]
 8009ea4:	0151      	lsls	r1, r2, #5
 8009ea6:	6a3a      	ldr	r2, [r7, #32]
 8009ea8:	440a      	add	r2, r1
 8009eaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009eae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009eb2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	015a      	lsls	r2, r3, #5
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	69fa      	ldr	r2, [r7, #28]
 8009ec4:	0151      	lsls	r1, r2, #5
 8009ec6:	6a3a      	ldr	r2, [r7, #32]
 8009ec8:	440a      	add	r2, r1
 8009eca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ece:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009ed2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	79db      	ldrb	r3, [r3, #7]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d123      	bne.n	8009f24 <USB_HC_StartXfer+0x2dc>
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	78db      	ldrb	r3, [r3, #3]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d11f      	bne.n	8009f24 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	015a      	lsls	r2, r3, #5
 8009ee8:	6a3b      	ldr	r3, [r7, #32]
 8009eea:	4413      	add	r3, r2
 8009eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	69fa      	ldr	r2, [r7, #28]
 8009ef4:	0151      	lsls	r1, r2, #5
 8009ef6:	6a3a      	ldr	r2, [r7, #32]
 8009ef8:	440a      	add	r2, r1
 8009efa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f02:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	6a3b      	ldr	r3, [r7, #32]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	69fa      	ldr	r2, [r7, #28]
 8009f14:	0151      	lsls	r1, r2, #5
 8009f16:	6a3a      	ldr	r2, [r7, #32]
 8009f18:	440a      	add	r2, r1
 8009f1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009f1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f22:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	7c9b      	ldrb	r3, [r3, #18]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d003      	beq.n	8009f34 <USB_HC_StartXfer+0x2ec>
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	7c9b      	ldrb	r3, [r3, #18]
 8009f30:	2b03      	cmp	r3, #3
 8009f32:	d117      	bne.n	8009f64 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d113      	bne.n	8009f64 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	78db      	ldrb	r3, [r3, #3]
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d10f      	bne.n	8009f64 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	015a      	lsls	r2, r3, #5
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	69fa      	ldr	r2, [r7, #28]
 8009f54:	0151      	lsls	r1, r2, #5
 8009f56:	6a3a      	ldr	r2, [r7, #32]
 8009f58:	440a      	add	r2, r1
 8009f5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009f5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f62:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	7c9b      	ldrb	r3, [r3, #18]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d162      	bne.n	800a032 <USB_HC_StartXfer+0x3ea>
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	78db      	ldrb	r3, [r3, #3]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d15e      	bne.n	800a032 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	d858      	bhi.n	800a030 <USB_HC_StartXfer+0x3e8>
 8009f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f84 <USB_HC_StartXfer+0x33c>)
 8009f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f84:	08009f95 	.word	0x08009f95
 8009f88:	08009fb7 	.word	0x08009fb7
 8009f8c:	08009fd9 	.word	0x08009fd9
 8009f90:	08009ffb 	.word	0x08009ffb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	015a      	lsls	r2, r3, #5
 8009f98:	6a3b      	ldr	r3, [r7, #32]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	69fa      	ldr	r2, [r7, #28]
 8009fa4:	0151      	lsls	r1, r2, #5
 8009fa6:	6a3a      	ldr	r2, [r7, #32]
 8009fa8:	440a      	add	r2, r1
 8009faa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fb2:	6053      	str	r3, [r2, #4]
          break;
 8009fb4:	e03d      	b.n	800a032 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	015a      	lsls	r2, r3, #5
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	69fa      	ldr	r2, [r7, #28]
 8009fc6:	0151      	lsls	r1, r2, #5
 8009fc8:	6a3a      	ldr	r2, [r7, #32]
 8009fca:	440a      	add	r2, r1
 8009fcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009fd0:	f043 030e 	orr.w	r3, r3, #14
 8009fd4:	6053      	str	r3, [r2, #4]
          break;
 8009fd6:	e02c      	b.n	800a032 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	015a      	lsls	r2, r3, #5
 8009fdc:	6a3b      	ldr	r3, [r7, #32]
 8009fde:	4413      	add	r3, r2
 8009fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	69fa      	ldr	r2, [r7, #28]
 8009fe8:	0151      	lsls	r1, r2, #5
 8009fea:	6a3a      	ldr	r2, [r7, #32]
 8009fec:	440a      	add	r2, r1
 8009fee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ff2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009ff6:	6053      	str	r3, [r2, #4]
          break;
 8009ff8:	e01b      	b.n	800a032 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	4413      	add	r3, r2
 800a002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	69fa      	ldr	r2, [r7, #28]
 800a00a:	0151      	lsls	r1, r2, #5
 800a00c:	6a3a      	ldr	r2, [r7, #32]
 800a00e:	440a      	add	r2, r1
 800a010:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a014:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a018:	6053      	str	r3, [r2, #4]
          break;
 800a01a:	e00a      	b.n	800a032 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	015a      	lsls	r2, r3, #5
 800a020:	6a3b      	ldr	r3, [r7, #32]
 800a022:	4413      	add	r3, r2
 800a024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a028:	461a      	mov	r2, r3
 800a02a:	2300      	movs	r3, #0
 800a02c:	6053      	str	r3, [r2, #4]
 800a02e:	e000      	b.n	800a032 <USB_HC_StartXfer+0x3ea>
          break;
 800a030:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	015a      	lsls	r2, r3, #5
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	4413      	add	r3, r2
 800a03a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a048:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	78db      	ldrb	r3, [r3, #3]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d004      	beq.n	800a05c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a058:	613b      	str	r3, [r7, #16]
 800a05a:	e003      	b.n	800a064 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a062:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a06a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	015a      	lsls	r2, r3, #5
 800a070:	6a3b      	ldr	r3, [r7, #32]
 800a072:	4413      	add	r3, r2
 800a074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a078:	461a      	mov	r2, r3
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a07e:	79fb      	ldrb	r3, [r7, #7]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d003      	beq.n	800a08c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	e055      	b.n	800a134 <USB_HC_StartXfer+0x4ec>
 800a088:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	78db      	ldrb	r3, [r3, #3]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d14e      	bne.n	800a132 <USB_HC_StartXfer+0x4ea>
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	6a1b      	ldr	r3, [r3, #32]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d04a      	beq.n	800a132 <USB_HC_StartXfer+0x4ea>
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	79db      	ldrb	r3, [r3, #7]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d146      	bne.n	800a132 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	7c9b      	ldrb	r3, [r3, #18]
 800a0a8:	2b03      	cmp	r3, #3
 800a0aa:	d831      	bhi.n	800a110 <USB_HC_StartXfer+0x4c8>
 800a0ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a0b4 <USB_HC_StartXfer+0x46c>)
 800a0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b2:	bf00      	nop
 800a0b4:	0800a0c5 	.word	0x0800a0c5
 800a0b8:	0800a0e9 	.word	0x0800a0e9
 800a0bc:	0800a0c5 	.word	0x0800a0c5
 800a0c0:	0800a0e9 	.word	0x0800a0e9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	6a1b      	ldr	r3, [r3, #32]
 800a0c8:	3303      	adds	r3, #3
 800a0ca:	089b      	lsrs	r3, r3, #2
 800a0cc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a0ce:	8afa      	ldrh	r2, [r7, #22]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d91c      	bls.n	800a114 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	699b      	ldr	r3, [r3, #24]
 800a0de:	f043 0220 	orr.w	r2, r3, #32
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	619a      	str	r2, [r3, #24]
        }
        break;
 800a0e6:	e015      	b.n	800a114 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	6a1b      	ldr	r3, [r3, #32]
 800a0ec:	3303      	adds	r3, #3
 800a0ee:	089b      	lsrs	r3, r3, #2
 800a0f0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a0f2:	8afa      	ldrh	r2, [r7, #22]
 800a0f4:	6a3b      	ldr	r3, [r7, #32]
 800a0f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d90a      	bls.n	800a118 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	619a      	str	r2, [r3, #24]
        }
        break;
 800a10e:	e003      	b.n	800a118 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800a110:	bf00      	nop
 800a112:	e002      	b.n	800a11a <USB_HC_StartXfer+0x4d2>
        break;
 800a114:	bf00      	nop
 800a116:	e000      	b.n	800a11a <USB_HC_StartXfer+0x4d2>
        break;
 800a118:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	6999      	ldr	r1, [r3, #24]
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	785a      	ldrb	r2, [r3, #1]
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	b29b      	uxth	r3, r3
 800a128:	2000      	movs	r0, #0
 800a12a:	9000      	str	r0, [sp, #0]
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f7ff f9c3 	bl	80094b8 <USB_WritePacket>
  }

  return HAL_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3728      	adds	r7, #40	@ 0x28
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a14e:	695b      	ldr	r3, [r3, #20]
 800a150:	b29b      	uxth	r3, r3
}
 800a152:	4618      	mov	r0, r3
 800a154:	3714      	adds	r7, #20
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a15e:	b480      	push	{r7}
 800a160:	b089      	sub	sp, #36	@ 0x24
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	460b      	mov	r3, r1
 800a168:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a16e:	78fb      	ldrb	r3, [r7, #3]
 800a170:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a172:	2300      	movs	r3, #0
 800a174:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	015a      	lsls	r2, r3, #5
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	4413      	add	r3, r2
 800a17e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	0c9b      	lsrs	r3, r3, #18
 800a186:	f003 0303 	and.w	r3, r3, #3
 800a18a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	015a      	lsls	r2, r3, #5
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	4413      	add	r3, r2
 800a194:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	0fdb      	lsrs	r3, r3, #31
 800a19c:	f003 0301 	and.w	r3, r3, #1
 800a1a0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	015a      	lsls	r2, r3, #5
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	0fdb      	lsrs	r3, r3, #31
 800a1b2:	f003 0301 	and.w	r3, r3, #1
 800a1b6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	f003 0320 	and.w	r3, r3, #32
 800a1c0:	2b20      	cmp	r3, #32
 800a1c2:	d10d      	bne.n	800a1e0 <USB_HC_Halt+0x82>
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10a      	bne.n	800a1e0 <USB_HC_Halt+0x82>
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d005      	beq.n	800a1dc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d002      	beq.n	800a1dc <USB_HC_Halt+0x7e>
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2b03      	cmp	r3, #3
 800a1da:	d101      	bne.n	800a1e0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	e0d8      	b.n	800a392 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d002      	beq.n	800a1ec <USB_HC_Halt+0x8e>
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d173      	bne.n	800a2d4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	015a      	lsls	r2, r3, #5
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	69ba      	ldr	r2, [r7, #24]
 800a1fc:	0151      	lsls	r1, r2, #5
 800a1fe:	69fa      	ldr	r2, [r7, #28]
 800a200:	440a      	add	r2, r1
 800a202:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a206:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a20a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	f003 0320 	and.w	r3, r3, #32
 800a214:	2b00      	cmp	r3, #0
 800a216:	d14a      	bne.n	800a2ae <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a21c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a220:	2b00      	cmp	r3, #0
 800a222:	d133      	bne.n	800a28c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	015a      	lsls	r2, r3, #5
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	4413      	add	r3, r2
 800a22c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	69ba      	ldr	r2, [r7, #24]
 800a234:	0151      	lsls	r1, r2, #5
 800a236:	69fa      	ldr	r2, [r7, #28]
 800a238:	440a      	add	r2, r1
 800a23a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a23e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a242:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	015a      	lsls	r2, r3, #5
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	4413      	add	r3, r2
 800a24c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	69ba      	ldr	r2, [r7, #24]
 800a254:	0151      	lsls	r1, r2, #5
 800a256:	69fa      	ldr	r2, [r7, #28]
 800a258:	440a      	add	r2, r1
 800a25a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a25e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a262:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	3301      	adds	r3, #1
 800a268:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a270:	d82e      	bhi.n	800a2d0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	015a      	lsls	r2, r3, #5
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	4413      	add	r3, r2
 800a27a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a284:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a288:	d0ec      	beq.n	800a264 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a28a:	e081      	b.n	800a390 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	4413      	add	r3, r2
 800a294:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	69ba      	ldr	r2, [r7, #24]
 800a29c:	0151      	lsls	r1, r2, #5
 800a29e:	69fa      	ldr	r2, [r7, #28]
 800a2a0:	440a      	add	r2, r1
 800a2a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a2a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a2aa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a2ac:	e070      	b.n	800a390 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	015a      	lsls	r2, r3, #5
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	69ba      	ldr	r2, [r7, #24]
 800a2be:	0151      	lsls	r1, r2, #5
 800a2c0:	69fa      	ldr	r2, [r7, #28]
 800a2c2:	440a      	add	r2, r1
 800a2c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a2c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a2cc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a2ce:	e05f      	b.n	800a390 <USB_HC_Halt+0x232>
            break;
 800a2d0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a2d2:	e05d      	b.n	800a390 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	015a      	lsls	r2, r3, #5
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	4413      	add	r3, r2
 800a2dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	69ba      	ldr	r2, [r7, #24]
 800a2e4:	0151      	lsls	r1, r2, #5
 800a2e6:	69fa      	ldr	r2, [r7, #28]
 800a2e8:	440a      	add	r2, r1
 800a2ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a2ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a2f2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a300:	2b00      	cmp	r3, #0
 800a302:	d133      	bne.n	800a36c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	015a      	lsls	r2, r3, #5
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	4413      	add	r3, r2
 800a30c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	69ba      	ldr	r2, [r7, #24]
 800a314:	0151      	lsls	r1, r2, #5
 800a316:	69fa      	ldr	r2, [r7, #28]
 800a318:	440a      	add	r2, r1
 800a31a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a31e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a322:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	015a      	lsls	r2, r3, #5
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	4413      	add	r3, r2
 800a32c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	69ba      	ldr	r2, [r7, #24]
 800a334:	0151      	lsls	r1, r2, #5
 800a336:	69fa      	ldr	r2, [r7, #28]
 800a338:	440a      	add	r2, r1
 800a33a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a33e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a342:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	3301      	adds	r3, #1
 800a348:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a350:	d81d      	bhi.n	800a38e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	015a      	lsls	r2, r3, #5
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	4413      	add	r3, r2
 800a35a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a364:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a368:	d0ec      	beq.n	800a344 <USB_HC_Halt+0x1e6>
 800a36a:	e011      	b.n	800a390 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	015a      	lsls	r2, r3, #5
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	4413      	add	r3, r2
 800a374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	69ba      	ldr	r2, [r7, #24]
 800a37c:	0151      	lsls	r1, r2, #5
 800a37e:	69fa      	ldr	r2, [r7, #28]
 800a380:	440a      	add	r2, r1
 800a382:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a386:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a38a:	6013      	str	r3, [r2, #0]
 800a38c:	e000      	b.n	800a390 <USB_HC_Halt+0x232>
          break;
 800a38e:	bf00      	nop
    }
  }

  return HAL_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3724      	adds	r7, #36	@ 0x24
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
	...

0800a3a0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b087      	sub	sp, #28
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a3b0:	78fb      	ldrb	r3, [r7, #3]
 800a3b2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	04da      	lsls	r2, r3, #19
 800a3bc:	4b15      	ldr	r3, [pc, #84]	@ (800a414 <USB_DoPing+0x74>)
 800a3be:	4013      	ands	r3, r2
 800a3c0:	693a      	ldr	r2, [r7, #16]
 800a3c2:	0151      	lsls	r1, r2, #5
 800a3c4:	697a      	ldr	r2, [r7, #20]
 800a3c6:	440a      	add	r2, r1
 800a3c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a3cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a3d0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	015a      	lsls	r2, r3, #5
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	4413      	add	r3, r2
 800a3da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a3e8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a3f0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	015a      	lsls	r2, r3, #5
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3fe:	461a      	mov	r2, r3
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	371c      	adds	r7, #28
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	1ff80000 	.word	0x1ff80000

0800a418 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b088      	sub	sp, #32
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a420:	2300      	movs	r3, #0
 800a422:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a428:	2300      	movs	r3, #0
 800a42a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f7fe ff86 	bl	800933e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a432:	2110      	movs	r1, #16
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7fe ffdf 	bl	80093f8 <USB_FlushTxFifo>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d001      	beq.n	800a444 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7ff f809 	bl	800945c <USB_FlushRxFifo>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a454:	2300      	movs	r3, #0
 800a456:	61bb      	str	r3, [r7, #24]
 800a458:	e01f      	b.n	800a49a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	015a      	lsls	r2, r3, #5
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	4413      	add	r3, r2
 800a462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a470:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a478:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a480:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	015a      	lsls	r2, r3, #5
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	4413      	add	r3, r2
 800a48a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a48e:	461a      	mov	r2, r3
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	3301      	adds	r3, #1
 800a498:	61bb      	str	r3, [r7, #24]
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	2b0f      	cmp	r3, #15
 800a49e:	d9dc      	bls.n	800a45a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	61bb      	str	r3, [r7, #24]
 800a4a4:	e034      	b.n	800a510 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	015a      	lsls	r2, r3, #5
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a4c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a4cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	015a      	lsls	r2, r3, #5
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4da:	461a      	mov	r2, r3
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a4ec:	d80c      	bhi.n	800a508 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	015a      	lsls	r2, r3, #5
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a500:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a504:	d0ec      	beq.n	800a4e0 <USB_StopHost+0xc8>
 800a506:	e000      	b.n	800a50a <USB_StopHost+0xf2>
        break;
 800a508:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	3301      	adds	r3, #1
 800a50e:	61bb      	str	r3, [r7, #24]
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	2b0f      	cmp	r3, #15
 800a514:	d9c7      	bls.n	800a4a6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a51c:	461a      	mov	r2, r3
 800a51e:	f04f 33ff 	mov.w	r3, #4294967295
 800a522:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f04f 32ff 	mov.w	r2, #4294967295
 800a52a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f7fe fef5 	bl	800931c <USB_EnableGlobalInt>

  return ret;
 800a532:	7ffb      	ldrb	r3, [r7, #31]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3720      	adds	r7, #32
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a540:	4904      	ldr	r1, [pc, #16]	@ (800a554 <MX_FATFS_Init+0x18>)
 800a542:	4805      	ldr	r0, [pc, #20]	@ (800a558 <MX_FATFS_Init+0x1c>)
 800a544:	f008 fa78 	bl	8012a38 <FATFS_LinkDriver>
 800a548:	4603      	mov	r3, r0
 800a54a:	461a      	mov	r2, r3
 800a54c:	4b03      	ldr	r3, [pc, #12]	@ (800a55c <MX_FATFS_Init+0x20>)
 800a54e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a550:	bf00      	nop
 800a552:	bd80      	pop	{r7, pc}
 800a554:	20002918 	.word	0x20002918
 800a558:	08015c98 	.word	0x08015c98
 800a55c:	20002914 	.word	0x20002914

0800a560 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a560:	b480      	push	{r7}
 800a562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a564:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a566:	4618      	mov	r0, r3
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	4603      	mov	r3, r0
 800a578:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	4603      	mov	r3, r0
 800a590:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800a596:	79fb      	ldrb	r3, [r7, #7]
 800a598:	4619      	mov	r1, r3
 800a59a:	4808      	ldr	r0, [pc, #32]	@ (800a5bc <USBH_status+0x34>)
 800a59c:	f000 fe79 	bl	800b292 <USBH_MSC_UnitIsReady>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d002      	beq.n	800a5ac <USBH_status+0x24>
  {
    res = RES_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	73fb      	strb	r3, [r7, #15]
 800a5aa:	e001      	b.n	800a5b0 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	20003dec 	.word	0x20003dec

0800a5c0 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b094      	sub	sp, #80	@ 0x50
 800a5c4:	af02      	add	r7, sp, #8
 800a5c6:	60b9      	str	r1, [r7, #8]
 800a5c8:	607a      	str	r2, [r7, #4]
 800a5ca:	603b      	str	r3, [r7, #0]
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800a5d6:	7bf9      	ldrb	r1, [r7, #15]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	9300      	str	r3, [sp, #0]
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	4813      	ldr	r0, [pc, #76]	@ (800a630 <USBH_read+0x70>)
 800a5e2:	f000 feaa 	bl	800b33a <USBH_MSC_Read>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d103      	bne.n	800a5f4 <USBH_read+0x34>
  {
    res = RES_OK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a5f2:	e017      	b.n	800a624 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a5f4:	f107 0210 	add.w	r2, r7, #16
 800a5f8:	7bfb      	ldrb	r3, [r7, #15]
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	480c      	ldr	r0, [pc, #48]	@ (800a630 <USBH_read+0x70>)
 800a5fe:	f000 fe73 	bl	800b2e8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a602:	7f7b      	ldrb	r3, [r7, #29]
 800a604:	2b3a      	cmp	r3, #58	@ 0x3a
 800a606:	d005      	beq.n	800a614 <USBH_read+0x54>
 800a608:	2b3a      	cmp	r3, #58	@ 0x3a
 800a60a:	dc07      	bgt.n	800a61c <USBH_read+0x5c>
 800a60c:	2b04      	cmp	r3, #4
 800a60e:	d001      	beq.n	800a614 <USBH_read+0x54>
 800a610:	2b28      	cmp	r3, #40	@ 0x28
 800a612:	d103      	bne.n	800a61c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a614:	2303      	movs	r3, #3
 800a616:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800a61a:	e003      	b.n	800a624 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800a622:	bf00      	nop
    }
  }

  return res;
 800a624:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3748      	adds	r7, #72	@ 0x48
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	20003dec 	.word	0x20003dec

0800a634 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b094      	sub	sp, #80	@ 0x50
 800a638:	af02      	add	r7, sp, #8
 800a63a:	60b9      	str	r1, [r7, #8]
 800a63c:	607a      	str	r2, [r7, #4]
 800a63e:	603b      	str	r3, [r7, #0]
 800a640:	4603      	mov	r3, r0
 800a642:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800a64a:	7bf9      	ldrb	r1, [r7, #15]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	4817      	ldr	r0, [pc, #92]	@ (800a6b4 <USBH_write+0x80>)
 800a656:	f000 fed0 	bl	800b3fa <USBH_MSC_Write>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d103      	bne.n	800a668 <USBH_write+0x34>
  {
    res = RES_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a666:	e01f      	b.n	800a6a8 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a668:	f107 0210 	add.w	r2, r7, #16
 800a66c:	7bfb      	ldrb	r3, [r7, #15]
 800a66e:	4619      	mov	r1, r3
 800a670:	4810      	ldr	r0, [pc, #64]	@ (800a6b4 <USBH_write+0x80>)
 800a672:	f000 fe39 	bl	800b2e8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a676:	7f7b      	ldrb	r3, [r7, #29]
 800a678:	2b3a      	cmp	r3, #58	@ 0x3a
 800a67a:	d00d      	beq.n	800a698 <USBH_write+0x64>
 800a67c:	2b3a      	cmp	r3, #58	@ 0x3a
 800a67e:	dc0f      	bgt.n	800a6a0 <USBH_write+0x6c>
 800a680:	2b28      	cmp	r3, #40	@ 0x28
 800a682:	d009      	beq.n	800a698 <USBH_write+0x64>
 800a684:	2b28      	cmp	r3, #40	@ 0x28
 800a686:	dc0b      	bgt.n	800a6a0 <USBH_write+0x6c>
 800a688:	2b04      	cmp	r3, #4
 800a68a:	d005      	beq.n	800a698 <USBH_write+0x64>
 800a68c:	2b27      	cmp	r3, #39	@ 0x27
 800a68e:	d107      	bne.n	800a6a0 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800a690:	2302      	movs	r3, #2
 800a692:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800a696:	e007      	b.n	800a6a8 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a698:	2303      	movs	r3, #3
 800a69a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800a69e:	e003      	b.n	800a6a8 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800a6a6:	bf00      	nop
    }
  }

  return res;
 800a6a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3748      	adds	r7, #72	@ 0x48
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	20003dec 	.word	0x20003dec

0800a6b8 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b090      	sub	sp, #64	@ 0x40
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	4603      	mov	r3, r0
 800a6c0:	603a      	str	r2, [r7, #0]
 800a6c2:	71fb      	strb	r3, [r7, #7]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800a6ce:	79bb      	ldrb	r3, [r7, #6]
 800a6d0:	2b03      	cmp	r3, #3
 800a6d2:	d852      	bhi.n	800a77a <USBH_ioctl+0xc2>
 800a6d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a6dc <USBH_ioctl+0x24>)
 800a6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6da:	bf00      	nop
 800a6dc:	0800a6ed 	.word	0x0800a6ed
 800a6e0:	0800a6f5 	.word	0x0800a6f5
 800a6e4:	0800a71f 	.word	0x0800a71f
 800a6e8:	0800a74b 	.word	0x0800a74b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800a6f2:	e045      	b.n	800a780 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a6f4:	f107 0208 	add.w	r2, r7, #8
 800a6f8:	79fb      	ldrb	r3, [r7, #7]
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	4823      	ldr	r0, [pc, #140]	@ (800a78c <USBH_ioctl+0xd4>)
 800a6fe:	f000 fdf3 	bl	800b2e8 <USBH_MSC_GetLUNInfo>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d106      	bne.n	800a716 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a70e:	2300      	movs	r3, #0
 800a710:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a714:	e034      	b.n	800a780 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800a71c:	e030      	b.n	800a780 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a71e:	f107 0208 	add.w	r2, r7, #8
 800a722:	79fb      	ldrb	r3, [r7, #7]
 800a724:	4619      	mov	r1, r3
 800a726:	4819      	ldr	r0, [pc, #100]	@ (800a78c <USBH_ioctl+0xd4>)
 800a728:	f000 fdde 	bl	800b2e8 <USBH_MSC_GetLUNInfo>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d107      	bne.n	800a742 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800a732:	8a3b      	ldrh	r3, [r7, #16]
 800a734:	461a      	mov	r2, r3
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a73a:	2300      	movs	r3, #0
 800a73c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a740:	e01e      	b.n	800a780 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800a748:	e01a      	b.n	800a780 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a74a:	f107 0208 	add.w	r2, r7, #8
 800a74e:	79fb      	ldrb	r3, [r7, #7]
 800a750:	4619      	mov	r1, r3
 800a752:	480e      	ldr	r0, [pc, #56]	@ (800a78c <USBH_ioctl+0xd4>)
 800a754:	f000 fdc8 	bl	800b2e8 <USBH_MSC_GetLUNInfo>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d109      	bne.n	800a772 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800a75e:	8a3b      	ldrh	r3, [r7, #16]
 800a760:	0a5b      	lsrs	r3, r3, #9
 800a762:	b29b      	uxth	r3, r3
 800a764:	461a      	mov	r2, r3
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a76a:	2300      	movs	r3, #0
 800a76c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a770:	e006      	b.n	800a780 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800a778:	e002      	b.n	800a780 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800a77a:	2304      	movs	r3, #4
 800a77c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 800a780:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800a784:	4618      	mov	r0, r3
 800a786:	3740      	adds	r7, #64	@ 0x40
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	20003dec 	.word	0x20003dec

0800a790 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a790:	b590      	push	{r4, r7, lr}
 800a792:	b089      	sub	sp, #36	@ 0x24
 800a794:	af04      	add	r7, sp, #16
 800a796:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a79e:	7919      	ldrb	r1, [r3, #4]
 800a7a0:	2350      	movs	r3, #80	@ 0x50
 800a7a2:	2206      	movs	r2, #6
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f001 fcd5 	bl	800c154 <USBH_FindInterface>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800a7ae:	7bfb      	ldrb	r3, [r7, #15]
 800a7b0:	2bff      	cmp	r3, #255	@ 0xff
 800a7b2:	d002      	beq.n	800a7ba <USBH_MSC_InterfaceInit+0x2a>
 800a7b4:	7bfb      	ldrb	r3, [r7, #15]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d901      	bls.n	800a7be <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a7ba:	2302      	movs	r3, #2
 800a7bc:	e106      	b.n	800a9cc <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800a7be:	7bfb      	ldrb	r3, [r7, #15]
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f001 fcaa 	bl	800c11c <USBH_SelectInterface>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d001      	beq.n	800a7d6 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800a7d2:	2302      	movs	r3, #2
 800a7d4:	e0fa      	b.n	800a9cc <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800a7dc:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800a7e0:	f008 fd2c 	bl	801323c <malloc>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7ee:	69db      	ldr	r3, [r3, #28]
 800a7f0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d101      	bne.n	800a7fc <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	e0e7      	b.n	800a9cc <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800a7fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a800:	2100      	movs	r1, #0
 800a802:	68b8      	ldr	r0, [r7, #8]
 800a804:	f009 fb33 	bl	8013e6e <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a808:	7bfb      	ldrb	r3, [r7, #15]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	211a      	movs	r1, #26
 800a80e:	fb01 f303 	mul.w	r3, r1, r3
 800a812:	4413      	add	r3, r2
 800a814:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	b25b      	sxtb	r3, r3
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	da16      	bge.n	800a84e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a820:	7bfb      	ldrb	r3, [r7, #15]
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	211a      	movs	r1, #26
 800a826:	fb01 f303 	mul.w	r3, r1, r3
 800a82a:	4413      	add	r3, r2
 800a82c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a830:	781a      	ldrb	r2, [r3, #0]
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a836:	7bfb      	ldrb	r3, [r7, #15]
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	211a      	movs	r1, #26
 800a83c:	fb01 f303 	mul.w	r3, r1, r3
 800a840:	4413      	add	r3, r2
 800a842:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a846:	881a      	ldrh	r2, [r3, #0]
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	815a      	strh	r2, [r3, #10]
 800a84c:	e015      	b.n	800a87a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a84e:	7bfb      	ldrb	r3, [r7, #15]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	211a      	movs	r1, #26
 800a854:	fb01 f303 	mul.w	r3, r1, r3
 800a858:	4413      	add	r3, r2
 800a85a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a85e:	781a      	ldrb	r2, [r3, #0]
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a864:	7bfb      	ldrb	r3, [r7, #15]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	211a      	movs	r1, #26
 800a86a:	fb01 f303 	mul.w	r3, r1, r3
 800a86e:	4413      	add	r3, r2
 800a870:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a874:	881a      	ldrh	r2, [r3, #0]
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a87a:	7bfb      	ldrb	r3, [r7, #15]
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	211a      	movs	r1, #26
 800a880:	fb01 f303 	mul.w	r3, r1, r3
 800a884:	4413      	add	r3, r2
 800a886:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	b25b      	sxtb	r3, r3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	da16      	bge.n	800a8c0 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a892:	7bfb      	ldrb	r3, [r7, #15]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	211a      	movs	r1, #26
 800a898:	fb01 f303 	mul.w	r3, r1, r3
 800a89c:	4413      	add	r3, r2
 800a89e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a8a2:	781a      	ldrb	r2, [r3, #0]
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	211a      	movs	r1, #26
 800a8ae:	fb01 f303 	mul.w	r3, r1, r3
 800a8b2:	4413      	add	r3, r2
 800a8b4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a8b8:	881a      	ldrh	r2, [r3, #0]
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	815a      	strh	r2, [r3, #10]
 800a8be:	e015      	b.n	800a8ec <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a8c0:	7bfb      	ldrb	r3, [r7, #15]
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	211a      	movs	r1, #26
 800a8c6:	fb01 f303 	mul.w	r3, r1, r3
 800a8ca:	4413      	add	r3, r2
 800a8cc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a8d0:	781a      	ldrb	r2, [r3, #0]
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	211a      	movs	r1, #26
 800a8dc:	fb01 f303 	mul.w	r3, r1, r3
 800a8e0:	4413      	add	r3, r2
 800a8e2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a8e6:	881a      	ldrh	r2, [r3, #0]
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	799b      	ldrb	r3, [r3, #6]
 800a902:	4619      	mov	r1, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f002 ffba 	bl	800d87e <USBH_AllocPipe>
 800a90a:	4603      	mov	r3, r0
 800a90c:	461a      	mov	r2, r3
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	79db      	ldrb	r3, [r3, #7]
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f002 ffb0 	bl	800d87e <USBH_AllocPipe>
 800a91e:	4603      	mov	r3, r0
 800a920:	461a      	mov	r2, r3
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 fe02 	bl	800b530 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	799b      	ldrb	r3, [r3, #6]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d01e      	beq.n	800a972 <USBH_MSC_InterfaceInit+0x1e2>
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	891b      	ldrh	r3, [r3, #8]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d01a      	beq.n	800a972 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	7959      	ldrb	r1, [r3, #5]
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	7998      	ldrb	r0, [r3, #6]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	8912      	ldrh	r2, [r2, #8]
 800a954:	9202      	str	r2, [sp, #8]
 800a956:	2202      	movs	r2, #2
 800a958:	9201      	str	r2, [sp, #4]
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	4623      	mov	r3, r4
 800a95e:	4602      	mov	r2, r0
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f002 ff5d 	bl	800d820 <USBH_OpenPipe>
 800a966:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	79db      	ldrb	r3, [r3, #7]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d02c      	beq.n	800a9ca <USBH_MSC_InterfaceInit+0x23a>
 800a970:	e001      	b.n	800a976 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800a972:	2303      	movs	r3, #3
 800a974:	e02a      	b.n	800a9cc <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	895b      	ldrh	r3, [r3, #10]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d025      	beq.n	800a9ca <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	7919      	ldrb	r1, [r3, #4]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	79d8      	ldrb	r0, [r3, #7]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	8952      	ldrh	r2, [r2, #10]
 800a996:	9202      	str	r2, [sp, #8]
 800a998:	2202      	movs	r2, #2
 800a99a:	9201      	str	r2, [sp, #4]
 800a99c:	9300      	str	r3, [sp, #0]
 800a99e:	4623      	mov	r3, r4
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f002 ff3c 	bl	800d820 <USBH_OpenPipe>
 800a9a8:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	791b      	ldrb	r3, [r3, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f008 fb88 	bl	80130c8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	795b      	ldrb	r3, [r3, #5]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f008 fb81 	bl	80130c8 <USBH_LL_SetToggle>

  return USBH_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	e000      	b.n	800a9cc <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800a9ca:	2303      	movs	r3, #3
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3714      	adds	r7, #20
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd90      	pop	{r4, r7, pc}

0800a9d4 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a9e2:	69db      	ldr	r3, [r3, #28]
 800a9e4:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	795b      	ldrb	r3, [r3, #5]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00e      	beq.n	800aa0c <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	795b      	ldrb	r3, [r3, #5]
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f002 ff32 	bl	800d85e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	795b      	ldrb	r3, [r3, #5]
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f002 ff5d 	bl	800d8c0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	791b      	ldrb	r3, [r3, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00e      	beq.n	800aa32 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	791b      	ldrb	r3, [r3, #4]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f002 ff1f 	bl	800d85e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	791b      	ldrb	r3, [r3, #4]
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f002 ff4a 	bl	800d8c0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa38:	69db      	ldr	r3, [r3, #28]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00b      	beq.n	800aa56 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa44:	69db      	ldr	r3, [r3, #28]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f008 fc00 	bl	801324c <free>
    phost->pActiveClass->pData = 0U;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa52:	2200      	movs	r2, #0
 800aa54:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa6e:	69db      	ldr	r3, [r3, #28]
 800aa70:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800aa72:	2301      	movs	r3, #1
 800aa74:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	7b9b      	ldrb	r3, [r3, #14]
 800aa7a:	2b03      	cmp	r3, #3
 800aa7c:	d041      	beq.n	800ab02 <USBH_MSC_ClassRequest+0xa2>
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	dc4b      	bgt.n	800ab1a <USBH_MSC_ClassRequest+0xba>
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d001      	beq.n	800aa8a <USBH_MSC_ClassRequest+0x2a>
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d147      	bne.n	800ab1a <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fd30 	bl	800b4f4 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800aa94:	4603      	mov	r3, r0
 800aa96:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800aa98:	7bfb      	ldrb	r3, [r7, #15]
 800aa9a:	2b03      	cmp	r3, #3
 800aa9c:	d104      	bne.n	800aaa8 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d137      	bne.n	800ab1e <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d804      	bhi.n	800aac0 <USBH_MSC_ClassRequest+0x60>
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	3301      	adds	r3, #1
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	e000      	b.n	800aac2 <USBH_MSC_ClassRequest+0x62>
 800aac0:	2202      	movs	r2, #2
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 800aac6:	2300      	movs	r3, #0
 800aac8:	73bb      	strb	r3, [r7, #14]
 800aaca:	e014      	b.n	800aaf6 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 800aacc:	7bbb      	ldrb	r3, [r7, #14]
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	2134      	movs	r1, #52	@ 0x34
 800aad2:	fb01 f303 	mul.w	r3, r1, r3
 800aad6:	4413      	add	r3, r2
 800aad8:	3392      	adds	r3, #146	@ 0x92
 800aada:	2202      	movs	r2, #2
 800aadc:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 800aade:	7bbb      	ldrb	r3, [r7, #14]
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	2134      	movs	r1, #52	@ 0x34
 800aae4:	fb01 f303 	mul.w	r3, r1, r3
 800aae8:	4413      	add	r3, r2
 800aaea:	33c1      	adds	r3, #193	@ 0xc1
 800aaec:	2200      	movs	r2, #0
 800aaee:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 800aaf0:	7bbb      	ldrb	r3, [r7, #14]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	73bb      	strb	r3, [r7, #14]
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	7bba      	ldrb	r2, [r7, #14]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d3e5      	bcc.n	800aacc <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800ab00:	e00d      	b.n	800ab1e <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800ab02:	2100      	movs	r1, #0
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f002 f903 	bl	800cd10 <USBH_ClrFeature>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d108      	bne.n	800ab22 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	7bda      	ldrb	r2, [r3, #15]
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	739a      	strb	r2, [r3, #14]
      }
      break;
 800ab18:	e003      	b.n	800ab22 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800ab1a:	bf00      	nop
 800ab1c:	e002      	b.n	800ab24 <USBH_MSC_ClassRequest+0xc4>
      break;
 800ab1e:	bf00      	nop
 800ab20:	e000      	b.n	800ab24 <USBH_MSC_ClassRequest+0xc4>
      break;
 800ab22:	bf00      	nop
  }

  return status;
 800ab24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
	...

0800ab30 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b086      	sub	sp, #24
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab3e:	69db      	ldr	r3, [r3, #28]
 800ab40:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800ab42:	2301      	movs	r3, #1
 800ab44:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800ab46:	2301      	movs	r3, #1
 800ab48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	7b1b      	ldrb	r3, [r3, #12]
 800ab52:	2b0a      	cmp	r3, #10
 800ab54:	f000 8280 	beq.w	800b058 <USBH_MSC_Process+0x528>
 800ab58:	2b0a      	cmp	r3, #10
 800ab5a:	f300 82b8 	bgt.w	800b0ce <USBH_MSC_Process+0x59e>
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <USBH_MSC_Process+0x3a>
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	f000 82b0 	beq.w	800b0c8 <USBH_MSC_Process+0x598>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800ab68:	e2b1      	b.n	800b0ce <USBH_MSC_Process+0x59e>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ab70:	693a      	ldr	r2, [r7, #16]
 800ab72:	7812      	ldrb	r2, [r2, #0]
 800ab74:	4293      	cmp	r3, r2
 800ab76:	f080 825d 	bcs.w	800b034 <USBH_MSC_Process+0x504>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ab80:	4619      	mov	r1, r3
 800ab82:	693a      	ldr	r2, [r7, #16]
 800ab84:	2334      	movs	r3, #52	@ 0x34
 800ab86:	fb01 f303 	mul.w	r3, r1, r3
 800ab8a:	4413      	add	r3, r2
 800ab8c:	3391      	adds	r3, #145	@ 0x91
 800ab8e:	2201      	movs	r2, #1
 800ab90:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ab98:	4619      	mov	r1, r3
 800ab9a:	693a      	ldr	r2, [r7, #16]
 800ab9c:	2334      	movs	r3, #52	@ 0x34
 800ab9e:	fb01 f303 	mul.w	r3, r1, r3
 800aba2:	4413      	add	r3, r2
 800aba4:	3390      	adds	r3, #144	@ 0x90
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	2b08      	cmp	r3, #8
 800abaa:	f200 824b 	bhi.w	800b044 <USBH_MSC_Process+0x514>
 800abae:	a201      	add	r2, pc, #4	@ (adr r2, 800abb4 <USBH_MSC_Process+0x84>)
 800abb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb4:	0800abd9 	.word	0x0800abd9
 800abb8:	0800b045 	.word	0x0800b045
 800abbc:	0800aca3 	.word	0x0800aca3
 800abc0:	0800ae29 	.word	0x0800ae29
 800abc4:	0800abff 	.word	0x0800abff
 800abc8:	0800aef5 	.word	0x0800aef5
 800abcc:	0800b045 	.word	0x0800b045
 800abd0:	0800b045 	.word	0x0800b045
 800abd4:	0800b023 	.word	0x0800b023
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800abde:	4619      	mov	r1, r3
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	2334      	movs	r3, #52	@ 0x34
 800abe4:	fb01 f303 	mul.w	r3, r1, r3
 800abe8:	4413      	add	r3, r2
 800abea:	3390      	adds	r3, #144	@ 0x90
 800abec:	2204      	movs	r2, #4
 800abee:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            break;
 800abfc:	e22b      	b.n	800b056 <USBH_MSC_Process+0x526>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ac04:	b2d9      	uxtb	r1, r3
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	2334      	movs	r3, #52	@ 0x34
 800ac10:	fb02 f303 	mul.w	r3, r2, r3
 800ac14:	3398      	adds	r3, #152	@ 0x98
 800ac16:	693a      	ldr	r2, [r7, #16]
 800ac18:	4413      	add	r3, r2
 800ac1a:	3307      	adds	r3, #7
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 ffa3 	bl	800bb6a <USBH_MSC_SCSI_Inquiry>
 800ac24:	4603      	mov	r3, r0
 800ac26:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10c      	bne.n	800ac48 <USBH_MSC_Process+0x118>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ac34:	4619      	mov	r1, r3
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	2334      	movs	r3, #52	@ 0x34
 800ac3a:	fb01 f303 	mul.w	r3, r1, r3
 800ac3e:	4413      	add	r3, r2
 800ac40:	3390      	adds	r3, #144	@ 0x90
 800ac42:	2202      	movs	r2, #2
 800ac44:	701a      	strb	r2, [r3, #0]
            break;
 800ac46:	e1ff      	b.n	800b048 <USBH_MSC_Process+0x518>
            else if (scsi_status == USBH_FAIL)
 800ac48:	7bfb      	ldrb	r3, [r7, #15]
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d10c      	bne.n	800ac68 <USBH_MSC_Process+0x138>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ac54:	4619      	mov	r1, r3
 800ac56:	693a      	ldr	r2, [r7, #16]
 800ac58:	2334      	movs	r3, #52	@ 0x34
 800ac5a:	fb01 f303 	mul.w	r3, r1, r3
 800ac5e:	4413      	add	r3, r2
 800ac60:	3390      	adds	r3, #144	@ 0x90
 800ac62:	2205      	movs	r2, #5
 800ac64:	701a      	strb	r2, [r3, #0]
            break;
 800ac66:	e1ef      	b.n	800b048 <USBH_MSC_Process+0x518>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ac68:	7bfb      	ldrb	r3, [r7, #15]
 800ac6a:	2b04      	cmp	r3, #4
 800ac6c:	f040 81ec 	bne.w	800b048 <USBH_MSC_Process+0x518>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ac76:	4619      	mov	r1, r3
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	2334      	movs	r3, #52	@ 0x34
 800ac7c:	fb01 f303 	mul.w	r3, r1, r3
 800ac80:	4413      	add	r3, r2
 800ac82:	3390      	adds	r3, #144	@ 0x90
 800ac84:	2208      	movs	r2, #8
 800ac86:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ac8e:	4619      	mov	r1, r3
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	2334      	movs	r3, #52	@ 0x34
 800ac94:	fb01 f303 	mul.w	r3, r1, r3
 800ac98:	4413      	add	r3, r2
 800ac9a:	3391      	adds	r3, #145	@ 0x91
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	701a      	strb	r2, [r3, #0]
            break;
 800aca0:	e1d2      	b.n	800b048 <USBH_MSC_Process+0x518>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	4619      	mov	r1, r3
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fe9f 	bl	800b9f0 <USBH_MSC_SCSI_TestUnitReady>
 800acb2:	4603      	mov	r3, r0
 800acb4:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800acb6:	7bbb      	ldrb	r3, [r7, #14]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d14a      	bne.n	800ad52 <USBH_MSC_Process+0x222>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800acc2:	4619      	mov	r1, r3
 800acc4:	693a      	ldr	r2, [r7, #16]
 800acc6:	2334      	movs	r3, #52	@ 0x34
 800acc8:	fb01 f303 	mul.w	r3, r1, r3
 800accc:	4413      	add	r3, r2
 800acce:	3392      	adds	r3, #146	@ 0x92
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00c      	beq.n	800acf0 <USBH_MSC_Process+0x1c0>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800acdc:	4619      	mov	r1, r3
 800acde:	693a      	ldr	r2, [r7, #16]
 800ace0:	2334      	movs	r3, #52	@ 0x34
 800ace2:	fb01 f303 	mul.w	r3, r1, r3
 800ace6:	4413      	add	r3, r2
 800ace8:	33c1      	adds	r3, #193	@ 0xc1
 800acea:	2201      	movs	r2, #1
 800acec:	701a      	strb	r2, [r3, #0]
 800acee:	e00b      	b.n	800ad08 <USBH_MSC_Process+0x1d8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800acf6:	4619      	mov	r1, r3
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	2334      	movs	r3, #52	@ 0x34
 800acfc:	fb01 f303 	mul.w	r3, r1, r3
 800ad00:	4413      	add	r3, r2
 800ad02:	33c1      	adds	r3, #193	@ 0xc1
 800ad04:	2200      	movs	r2, #0
 800ad06:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ad0e:	4619      	mov	r1, r3
 800ad10:	693a      	ldr	r2, [r7, #16]
 800ad12:	2334      	movs	r3, #52	@ 0x34
 800ad14:	fb01 f303 	mul.w	r3, r1, r3
 800ad18:	4413      	add	r3, r2
 800ad1a:	3390      	adds	r3, #144	@ 0x90
 800ad1c:	2203      	movs	r2, #3
 800ad1e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ad26:	4619      	mov	r1, r3
 800ad28:	693a      	ldr	r2, [r7, #16]
 800ad2a:	2334      	movs	r3, #52	@ 0x34
 800ad2c:	fb01 f303 	mul.w	r3, r1, r3
 800ad30:	4413      	add	r3, r2
 800ad32:	3391      	adds	r3, #145	@ 0x91
 800ad34:	2200      	movs	r2, #0
 800ad36:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ad3e:	4619      	mov	r1, r3
 800ad40:	693a      	ldr	r2, [r7, #16]
 800ad42:	2334      	movs	r3, #52	@ 0x34
 800ad44:	fb01 f303 	mul.w	r3, r1, r3
 800ad48:	4413      	add	r3, r2
 800ad4a:	3392      	adds	r3, #146	@ 0x92
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	701a      	strb	r2, [r3, #0]
            break;
 800ad50:	e17c      	b.n	800b04c <USBH_MSC_Process+0x51c>
            else if (ready_status == USBH_FAIL)
 800ad52:	7bbb      	ldrb	r3, [r7, #14]
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	d14a      	bne.n	800adee <USBH_MSC_Process+0x2be>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ad5e:	4619      	mov	r1, r3
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	2334      	movs	r3, #52	@ 0x34
 800ad64:	fb01 f303 	mul.w	r3, r1, r3
 800ad68:	4413      	add	r3, r2
 800ad6a:	3392      	adds	r3, #146	@ 0x92
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d00c      	beq.n	800ad8c <USBH_MSC_Process+0x25c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ad78:	4619      	mov	r1, r3
 800ad7a:	693a      	ldr	r2, [r7, #16]
 800ad7c:	2334      	movs	r3, #52	@ 0x34
 800ad7e:	fb01 f303 	mul.w	r3, r1, r3
 800ad82:	4413      	add	r3, r2
 800ad84:	33c1      	adds	r3, #193	@ 0xc1
 800ad86:	2201      	movs	r2, #1
 800ad88:	701a      	strb	r2, [r3, #0]
 800ad8a:	e00b      	b.n	800ada4 <USBH_MSC_Process+0x274>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ad92:	4619      	mov	r1, r3
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	2334      	movs	r3, #52	@ 0x34
 800ad98:	fb01 f303 	mul.w	r3, r1, r3
 800ad9c:	4413      	add	r3, r2
 800ad9e:	33c1      	adds	r3, #193	@ 0xc1
 800ada0:	2200      	movs	r2, #0
 800ada2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800adaa:	4619      	mov	r1, r3
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	2334      	movs	r3, #52	@ 0x34
 800adb0:	fb01 f303 	mul.w	r3, r1, r3
 800adb4:	4413      	add	r3, r2
 800adb6:	3390      	adds	r3, #144	@ 0x90
 800adb8:	2205      	movs	r2, #5
 800adba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800adc2:	4619      	mov	r1, r3
 800adc4:	693a      	ldr	r2, [r7, #16]
 800adc6:	2334      	movs	r3, #52	@ 0x34
 800adc8:	fb01 f303 	mul.w	r3, r1, r3
 800adcc:	4413      	add	r3, r2
 800adce:	3391      	adds	r3, #145	@ 0x91
 800add0:	2201      	movs	r2, #1
 800add2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800adda:	4619      	mov	r1, r3
 800addc:	693a      	ldr	r2, [r7, #16]
 800adde:	2334      	movs	r3, #52	@ 0x34
 800ade0:	fb01 f303 	mul.w	r3, r1, r3
 800ade4:	4413      	add	r3, r2
 800ade6:	3392      	adds	r3, #146	@ 0x92
 800ade8:	2202      	movs	r2, #2
 800adea:	701a      	strb	r2, [r3, #0]
            break;
 800adec:	e12e      	b.n	800b04c <USBH_MSC_Process+0x51c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800adee:	7bbb      	ldrb	r3, [r7, #14]
 800adf0:	2b04      	cmp	r3, #4
 800adf2:	f040 812b 	bne.w	800b04c <USBH_MSC_Process+0x51c>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800adfc:	4619      	mov	r1, r3
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	2334      	movs	r3, #52	@ 0x34
 800ae02:	fb01 f303 	mul.w	r3, r1, r3
 800ae06:	4413      	add	r3, r2
 800ae08:	3390      	adds	r3, #144	@ 0x90
 800ae0a:	2208      	movs	r2, #8
 800ae0c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ae14:	4619      	mov	r1, r3
 800ae16:	693a      	ldr	r2, [r7, #16]
 800ae18:	2334      	movs	r3, #52	@ 0x34
 800ae1a:	fb01 f303 	mul.w	r3, r1, r3
 800ae1e:	4413      	add	r3, r2
 800ae20:	3391      	adds	r3, #145	@ 0x91
 800ae22:	2202      	movs	r2, #2
 800ae24:	701a      	strb	r2, [r3, #0]
            break;
 800ae26:	e111      	b.n	800b04c <USBH_MSC_Process+0x51c>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ae2e:	b2d9      	uxtb	r1, r3
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ae36:	461a      	mov	r2, r3
 800ae38:	2334      	movs	r3, #52	@ 0x34
 800ae3a:	fb02 f303 	mul.w	r3, r2, r3
 800ae3e:	3390      	adds	r3, #144	@ 0x90
 800ae40:	693a      	ldr	r2, [r7, #16]
 800ae42:	4413      	add	r3, r2
 800ae44:	3304      	adds	r3, #4
 800ae46:	461a      	mov	r2, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 fe14 	bl	800ba76 <USBH_MSC_SCSI_ReadCapacity>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d120      	bne.n	800ae9a <USBH_MSC_Process+0x36a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ae5e:	4619      	mov	r1, r3
 800ae60:	693a      	ldr	r2, [r7, #16]
 800ae62:	2334      	movs	r3, #52	@ 0x34
 800ae64:	fb01 f303 	mul.w	r3, r1, r3
 800ae68:	4413      	add	r3, r2
 800ae6a:	3390      	adds	r3, #144	@ 0x90
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ae76:	4619      	mov	r1, r3
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	2334      	movs	r3, #52	@ 0x34
 800ae7c:	fb01 f303 	mul.w	r3, r1, r3
 800ae80:	4413      	add	r3, r2
 800ae82:	3391      	adds	r3, #145	@ 0x91
 800ae84:	2200      	movs	r2, #0
 800ae86:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ae8e:	3301      	adds	r3, #1
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800ae98:	e0da      	b.n	800b050 <USBH_MSC_Process+0x520>
            else if (scsi_status == USBH_FAIL)
 800ae9a:	7bfb      	ldrb	r3, [r7, #15]
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d10c      	bne.n	800aeba <USBH_MSC_Process+0x38a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800aea6:	4619      	mov	r1, r3
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	2334      	movs	r3, #52	@ 0x34
 800aeac:	fb01 f303 	mul.w	r3, r1, r3
 800aeb0:	4413      	add	r3, r2
 800aeb2:	3390      	adds	r3, #144	@ 0x90
 800aeb4:	2205      	movs	r2, #5
 800aeb6:	701a      	strb	r2, [r3, #0]
            break;
 800aeb8:	e0ca      	b.n	800b050 <USBH_MSC_Process+0x520>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
 800aebc:	2b04      	cmp	r3, #4
 800aebe:	f040 80c7 	bne.w	800b050 <USBH_MSC_Process+0x520>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800aec8:	4619      	mov	r1, r3
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	2334      	movs	r3, #52	@ 0x34
 800aece:	fb01 f303 	mul.w	r3, r1, r3
 800aed2:	4413      	add	r3, r2
 800aed4:	3390      	adds	r3, #144	@ 0x90
 800aed6:	2208      	movs	r2, #8
 800aed8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800aee0:	4619      	mov	r1, r3
 800aee2:	693a      	ldr	r2, [r7, #16]
 800aee4:	2334      	movs	r3, #52	@ 0x34
 800aee6:	fb01 f303 	mul.w	r3, r1, r3
 800aeea:	4413      	add	r3, r2
 800aeec:	3391      	adds	r3, #145	@ 0x91
 800aeee:	2202      	movs	r2, #2
 800aef0:	701a      	strb	r2, [r3, #0]
            break;
 800aef2:	e0ad      	b.n	800b050 <USBH_MSC_Process+0x520>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800aefa:	b2d9      	uxtb	r1, r3
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800af02:	461a      	mov	r2, r3
 800af04:	2334      	movs	r3, #52	@ 0x34
 800af06:	fb02 f303 	mul.w	r3, r2, r3
 800af0a:	3398      	adds	r3, #152	@ 0x98
 800af0c:	693a      	ldr	r2, [r7, #16]
 800af0e:	4413      	add	r3, r2
 800af10:	3304      	adds	r3, #4
 800af12:	461a      	mov	r2, r3
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fecd 	bl	800bcb4 <USBH_MSC_SCSI_RequestSense>
 800af1a:	4603      	mov	r3, r0
 800af1c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800af1e:	7bfb      	ldrb	r3, [r7, #15]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d146      	bne.n	800afb2 <USBH_MSC_Process+0x482>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800af2a:	4619      	mov	r1, r3
 800af2c:	693a      	ldr	r2, [r7, #16]
 800af2e:	2334      	movs	r3, #52	@ 0x34
 800af30:	fb01 f303 	mul.w	r3, r1, r3
 800af34:	4413      	add	r3, r2
 800af36:	339c      	adds	r3, #156	@ 0x9c
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	2b06      	cmp	r3, #6
 800af3c:	d00c      	beq.n	800af58 <USBH_MSC_Process+0x428>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800af44:	4619      	mov	r1, r3
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	2334      	movs	r3, #52	@ 0x34
 800af4a:	fb01 f303 	mul.w	r3, r1, r3
 800af4e:	4413      	add	r3, r2
 800af50:	339c      	adds	r3, #156	@ 0x9c
 800af52:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800af54:	2b02      	cmp	r3, #2
 800af56:	d117      	bne.n	800af88 <USBH_MSC_Process+0x458>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	f242 720f 	movw	r2, #9999	@ 0x270f
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d80c      	bhi.n	800af88 <USBH_MSC_Process+0x458>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800af74:	4619      	mov	r1, r3
 800af76:	693a      	ldr	r2, [r7, #16]
 800af78:	2334      	movs	r3, #52	@ 0x34
 800af7a:	fb01 f303 	mul.w	r3, r1, r3
 800af7e:	4413      	add	r3, r2
 800af80:	3390      	adds	r3, #144	@ 0x90
 800af82:	2202      	movs	r2, #2
 800af84:	701a      	strb	r2, [r3, #0]
                  break;
 800af86:	e066      	b.n	800b056 <USBH_MSC_Process+0x526>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800af8e:	4619      	mov	r1, r3
 800af90:	693a      	ldr	r2, [r7, #16]
 800af92:	2334      	movs	r3, #52	@ 0x34
 800af94:	fb01 f303 	mul.w	r3, r1, r3
 800af98:	4413      	add	r3, r2
 800af9a:	3390      	adds	r3, #144	@ 0x90
 800af9c:	2201      	movs	r2, #1
 800af9e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800afa6:	3301      	adds	r3, #1
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800afb0:	e050      	b.n	800b054 <USBH_MSC_Process+0x524>
            else if (scsi_status == USBH_FAIL)
 800afb2:	7bfb      	ldrb	r3, [r7, #15]
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	d118      	bne.n	800afea <USBH_MSC_Process+0x4ba>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800afbe:	4619      	mov	r1, r3
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	2334      	movs	r3, #52	@ 0x34
 800afc4:	fb01 f303 	mul.w	r3, r1, r3
 800afc8:	4413      	add	r3, r2
 800afca:	3390      	adds	r3, #144	@ 0x90
 800afcc:	2208      	movs	r2, #8
 800afce:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800afd6:	4619      	mov	r1, r3
 800afd8:	693a      	ldr	r2, [r7, #16]
 800afda:	2334      	movs	r3, #52	@ 0x34
 800afdc:	fb01 f303 	mul.w	r3, r1, r3
 800afe0:	4413      	add	r3, r2
 800afe2:	3391      	adds	r3, #145	@ 0x91
 800afe4:	2202      	movs	r2, #2
 800afe6:	701a      	strb	r2, [r3, #0]
            break;
 800afe8:	e034      	b.n	800b054 <USBH_MSC_Process+0x524>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800afea:	7bfb      	ldrb	r3, [r7, #15]
 800afec:	2b04      	cmp	r3, #4
 800afee:	d131      	bne.n	800b054 <USBH_MSC_Process+0x524>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800aff6:	4619      	mov	r1, r3
 800aff8:	693a      	ldr	r2, [r7, #16]
 800affa:	2334      	movs	r3, #52	@ 0x34
 800affc:	fb01 f303 	mul.w	r3, r1, r3
 800b000:	4413      	add	r3, r2
 800b002:	3390      	adds	r3, #144	@ 0x90
 800b004:	2208      	movs	r2, #8
 800b006:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b00e:	4619      	mov	r1, r3
 800b010:	693a      	ldr	r2, [r7, #16]
 800b012:	2334      	movs	r3, #52	@ 0x34
 800b014:	fb01 f303 	mul.w	r3, r1, r3
 800b018:	4413      	add	r3, r2
 800b01a:	3391      	adds	r3, #145	@ 0x91
 800b01c:	2202      	movs	r2, #2
 800b01e:	701a      	strb	r2, [r3, #0]
            break;
 800b020:	e018      	b.n	800b054 <USBH_MSC_Process+0x524>
            MSC_Handle->current_lun++;
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b028:	3301      	adds	r3, #1
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800b032:	e010      	b.n	800b056 <USBH_MSC_Process+0x526>
        MSC_Handle->current_lun = 0U;
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	2200      	movs	r2, #0
 800b038:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	220a      	movs	r2, #10
 800b040:	731a      	strb	r2, [r3, #12]
      break;
 800b042:	e045      	b.n	800b0d0 <USBH_MSC_Process+0x5a0>
            break;
 800b044:	bf00      	nop
 800b046:	e043      	b.n	800b0d0 <USBH_MSC_Process+0x5a0>
            break;
 800b048:	bf00      	nop
 800b04a:	e041      	b.n	800b0d0 <USBH_MSC_Process+0x5a0>
            break;
 800b04c:	bf00      	nop
 800b04e:	e03f      	b.n	800b0d0 <USBH_MSC_Process+0x5a0>
            break;
 800b050:	bf00      	nop
 800b052:	e03d      	b.n	800b0d0 <USBH_MSC_Process+0x5a0>
            break;
 800b054:	bf00      	nop
      break;
 800b056:	e03b      	b.n	800b0d0 <USBH_MSC_Process+0x5a0>
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 800b05e:	693a      	ldr	r2, [r7, #16]
 800b060:	7812      	ldrb	r2, [r2, #0]
 800b062:	4293      	cmp	r3, r2
 800b064:	d228      	bcs.n	800b0b8 <USBH_MSC_Process+0x588>
        MSC_Handle->current_lun = MSC_Handle->lun;
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b078:	4619      	mov	r1, r3
 800b07a:	693a      	ldr	r2, [r7, #16]
 800b07c:	2334      	movs	r3, #52	@ 0x34
 800b07e:	fb01 f303 	mul.w	r3, r1, r3
 800b082:	4413      	add	r3, r2
 800b084:	3391      	adds	r3, #145	@ 0x91
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d106      	bne.n	800b09a <USBH_MSC_Process+0x56a>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b092:	2102      	movs	r1, #2
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	4798      	blx	r3
 800b098:	e005      	b.n	800b0a6 <USBH_MSC_Process+0x576>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b0a0:	2106      	movs	r1, #6
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	4798      	blx	r3
        MSC_Handle->lun++;
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
      break;
 800b0b6:	e00b      	b.n	800b0d0 <USBH_MSC_Process+0x5a0>
        MSC_Handle->lun = 0U;
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	731a      	strb	r2, [r3, #12]
      break;
 800b0c6:	e003      	b.n	800b0d0 <USBH_MSC_Process+0x5a0>
      error = USBH_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b0cc:	e000      	b.n	800b0d0 <USBH_MSC_Process+0x5a0>
      break;
 800b0ce:	bf00      	nop
  }
  return error;
 800b0d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3718      	adds	r7, #24
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop

0800b0dc <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b0e4:	2300      	movs	r3, #0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	370c      	adds	r7, #12
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr

0800b0f2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b088      	sub	sp, #32
 800b0f6:	af02      	add	r7, sp, #8
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b104:	69db      	ldr	r3, [r3, #28]
 800b106:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800b108:	2301      	movs	r3, #1
 800b10a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800b10c:	2301      	movs	r3, #1
 800b10e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b110:	78fb      	ldrb	r3, [r7, #3]
 800b112:	693a      	ldr	r2, [r7, #16]
 800b114:	2134      	movs	r1, #52	@ 0x34
 800b116:	fb01 f303 	mul.w	r3, r1, r3
 800b11a:	4413      	add	r3, r2
 800b11c:	3390      	adds	r3, #144	@ 0x90
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	2b07      	cmp	r3, #7
 800b122:	d03c      	beq.n	800b19e <USBH_MSC_RdWrProcess+0xac>
 800b124:	2b07      	cmp	r3, #7
 800b126:	f300 80a8 	bgt.w	800b27a <USBH_MSC_RdWrProcess+0x188>
 800b12a:	2b05      	cmp	r3, #5
 800b12c:	d06c      	beq.n	800b208 <USBH_MSC_RdWrProcess+0x116>
 800b12e:	2b06      	cmp	r3, #6
 800b130:	f040 80a3 	bne.w	800b27a <USBH_MSC_RdWrProcess+0x188>
  {
    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800b134:	78f9      	ldrb	r1, [r7, #3]
 800b136:	2300      	movs	r3, #0
 800b138:	9300      	str	r3, [sp, #0]
 800b13a:	2300      	movs	r3, #0
 800b13c:	2200      	movs	r2, #0
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 fea7 	bl	800be92 <USBH_MSC_SCSI_Read>
 800b144:	4603      	mov	r3, r0
 800b146:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b148:	7bfb      	ldrb	r3, [r7, #15]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10b      	bne.n	800b166 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b14e:	78fb      	ldrb	r3, [r7, #3]
 800b150:	693a      	ldr	r2, [r7, #16]
 800b152:	2134      	movs	r1, #52	@ 0x34
 800b154:	fb01 f303 	mul.w	r3, r1, r3
 800b158:	4413      	add	r3, r2
 800b15a:	3390      	adds	r3, #144	@ 0x90
 800b15c:	2201      	movs	r2, #1
 800b15e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b160:	2300      	movs	r3, #0
 800b162:	75fb      	strb	r3, [r7, #23]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b164:	e08b      	b.n	800b27e <USBH_MSC_RdWrProcess+0x18c>
      else if (scsi_status == USBH_FAIL)
 800b166:	7bfb      	ldrb	r3, [r7, #15]
 800b168:	2b02      	cmp	r3, #2
 800b16a:	d109      	bne.n	800b180 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b16c:	78fb      	ldrb	r3, [r7, #3]
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	2134      	movs	r1, #52	@ 0x34
 800b172:	fb01 f303 	mul.w	r3, r1, r3
 800b176:	4413      	add	r3, r2
 800b178:	3390      	adds	r3, #144	@ 0x90
 800b17a:	2205      	movs	r2, #5
 800b17c:	701a      	strb	r2, [r3, #0]
      break;
 800b17e:	e07e      	b.n	800b27e <USBH_MSC_RdWrProcess+0x18c>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b180:	7bfb      	ldrb	r3, [r7, #15]
 800b182:	2b04      	cmp	r3, #4
 800b184:	d17b      	bne.n	800b27e <USBH_MSC_RdWrProcess+0x18c>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b186:	78fb      	ldrb	r3, [r7, #3]
 800b188:	693a      	ldr	r2, [r7, #16]
 800b18a:	2134      	movs	r1, #52	@ 0x34
 800b18c:	fb01 f303 	mul.w	r3, r1, r3
 800b190:	4413      	add	r3, r2
 800b192:	3390      	adds	r3, #144	@ 0x90
 800b194:	2208      	movs	r2, #8
 800b196:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b198:	2302      	movs	r3, #2
 800b19a:	75fb      	strb	r3, [r7, #23]
      break;
 800b19c:	e06f      	b.n	800b27e <USBH_MSC_RdWrProcess+0x18c>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800b19e:	78f9      	ldrb	r1, [r7, #3]
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	9300      	str	r3, [sp, #0]
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 fe02 	bl	800bdb2 <USBH_MSC_SCSI_Write>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b1b2:	7bfb      	ldrb	r3, [r7, #15]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d10b      	bne.n	800b1d0 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b1b8:	78fb      	ldrb	r3, [r7, #3]
 800b1ba:	693a      	ldr	r2, [r7, #16]
 800b1bc:	2134      	movs	r1, #52	@ 0x34
 800b1be:	fb01 f303 	mul.w	r3, r1, r3
 800b1c2:	4413      	add	r3, r2
 800b1c4:	3390      	adds	r3, #144	@ 0x90
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	75fb      	strb	r3, [r7, #23]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b1ce:	e058      	b.n	800b282 <USBH_MSC_RdWrProcess+0x190>
      else if (scsi_status == USBH_FAIL)
 800b1d0:	7bfb      	ldrb	r3, [r7, #15]
 800b1d2:	2b02      	cmp	r3, #2
 800b1d4:	d109      	bne.n	800b1ea <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b1d6:	78fb      	ldrb	r3, [r7, #3]
 800b1d8:	693a      	ldr	r2, [r7, #16]
 800b1da:	2134      	movs	r1, #52	@ 0x34
 800b1dc:	fb01 f303 	mul.w	r3, r1, r3
 800b1e0:	4413      	add	r3, r2
 800b1e2:	3390      	adds	r3, #144	@ 0x90
 800b1e4:	2205      	movs	r2, #5
 800b1e6:	701a      	strb	r2, [r3, #0]
      break;
 800b1e8:	e04b      	b.n	800b282 <USBH_MSC_RdWrProcess+0x190>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b1ea:	7bfb      	ldrb	r3, [r7, #15]
 800b1ec:	2b04      	cmp	r3, #4
 800b1ee:	d148      	bne.n	800b282 <USBH_MSC_RdWrProcess+0x190>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b1f0:	78fb      	ldrb	r3, [r7, #3]
 800b1f2:	693a      	ldr	r2, [r7, #16]
 800b1f4:	2134      	movs	r1, #52	@ 0x34
 800b1f6:	fb01 f303 	mul.w	r3, r1, r3
 800b1fa:	4413      	add	r3, r2
 800b1fc:	3390      	adds	r3, #144	@ 0x90
 800b1fe:	2208      	movs	r2, #8
 800b200:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b202:	2302      	movs	r3, #2
 800b204:	75fb      	strb	r3, [r7, #23]
      break;
 800b206:	e03c      	b.n	800b282 <USBH_MSC_RdWrProcess+0x190>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800b208:	78fb      	ldrb	r3, [r7, #3]
 800b20a:	2234      	movs	r2, #52	@ 0x34
 800b20c:	fb02 f303 	mul.w	r3, r2, r3
 800b210:	3398      	adds	r3, #152	@ 0x98
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	4413      	add	r3, r2
 800b216:	1d1a      	adds	r2, r3, #4
 800b218:	78fb      	ldrb	r3, [r7, #3]
 800b21a:	4619      	mov	r1, r3
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 fd49 	bl	800bcb4 <USBH_MSC_SCSI_RequestSense>
 800b222:	4603      	mov	r3, r0
 800b224:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b226:	7bfb      	ldrb	r3, [r7, #15]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d114      	bne.n	800b256 <USBH_MSC_RdWrProcess+0x164>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b22c:	78fb      	ldrb	r3, [r7, #3]
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	2134      	movs	r1, #52	@ 0x34
 800b232:	fb01 f303 	mul.w	r3, r1, r3
 800b236:	4413      	add	r3, r2
 800b238:	3390      	adds	r3, #144	@ 0x90
 800b23a:	2201      	movs	r2, #1
 800b23c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800b23e:	78fb      	ldrb	r3, [r7, #3]
 800b240:	693a      	ldr	r2, [r7, #16]
 800b242:	2134      	movs	r1, #52	@ 0x34
 800b244:	fb01 f303 	mul.w	r3, r1, r3
 800b248:	4413      	add	r3, r2
 800b24a:	3391      	adds	r3, #145	@ 0x91
 800b24c:	2202      	movs	r2, #2
 800b24e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800b250:	2302      	movs	r3, #2
 800b252:	75fb      	strb	r3, [r7, #23]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b254:	e017      	b.n	800b286 <USBH_MSC_RdWrProcess+0x194>
      else if (scsi_status == USBH_FAIL)
 800b256:	7bfb      	ldrb	r3, [r7, #15]
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d014      	beq.n	800b286 <USBH_MSC_RdWrProcess+0x194>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
 800b25e:	2b04      	cmp	r3, #4
 800b260:	d111      	bne.n	800b286 <USBH_MSC_RdWrProcess+0x194>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b262:	78fb      	ldrb	r3, [r7, #3]
 800b264:	693a      	ldr	r2, [r7, #16]
 800b266:	2134      	movs	r1, #52	@ 0x34
 800b268:	fb01 f303 	mul.w	r3, r1, r3
 800b26c:	4413      	add	r3, r2
 800b26e:	3390      	adds	r3, #144	@ 0x90
 800b270:	2208      	movs	r2, #8
 800b272:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b274:	2302      	movs	r3, #2
 800b276:	75fb      	strb	r3, [r7, #23]
      break;
 800b278:	e005      	b.n	800b286 <USBH_MSC_RdWrProcess+0x194>

    default:
      break;
 800b27a:	bf00      	nop
 800b27c:	e004      	b.n	800b288 <USBH_MSC_RdWrProcess+0x196>
      break;
 800b27e:	bf00      	nop
 800b280:	e002      	b.n	800b288 <USBH_MSC_RdWrProcess+0x196>
      break;
 800b282:	bf00      	nop
 800b284:	e000      	b.n	800b288 <USBH_MSC_RdWrProcess+0x196>
      break;
 800b286:	bf00      	nop

  }
  return error;
 800b288:	7dfb      	ldrb	r3, [r7, #23]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3718      	adds	r7, #24
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b292:	b480      	push	{r7}
 800b294:	b085      	sub	sp, #20
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
 800b29a:	460b      	mov	r3, r1
 800b29c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b2a4:	69db      	ldr	r3, [r3, #28]
 800b2a6:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800b2a8:	78fb      	ldrb	r3, [r7, #3]
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	2b0b      	cmp	r3, #11
 800b2ba:	d10c      	bne.n	800b2d6 <USBH_MSC_UnitIsReady+0x44>
 800b2bc:	78fb      	ldrb	r3, [r7, #3]
 800b2be:	68ba      	ldr	r2, [r7, #8]
 800b2c0:	2134      	movs	r1, #52	@ 0x34
 800b2c2:	fb01 f303 	mul.w	r3, r1, r3
 800b2c6:	4413      	add	r3, r2
 800b2c8:	3391      	adds	r3, #145	@ 0x91
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d102      	bne.n	800b2d6 <USBH_MSC_UnitIsReady+0x44>
  {
    res = 1U;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	73fb      	strb	r3, [r7, #15]
 800b2d4:	e001      	b.n	800b2da <USBH_MSC_UnitIsReady+0x48>
  }
  else
  {
    res = 0U;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b086      	sub	sp, #24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	607a      	str	r2, [r7, #4]
 800b2f4:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b2fc:	69db      	ldr	r3, [r3, #28]
 800b2fe:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800b300:	7afb      	ldrb	r3, [r7, #11]
 800b302:	b29a      	uxth	r2, r3
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if (phost->gState == HOST_CLASS)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	2b0b      	cmp	r3, #11
 800b312:	d10d      	bne.n	800b330 <USBH_MSC_GetLUNInfo+0x48>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800b314:	7afb      	ldrb	r3, [r7, #11]
 800b316:	2234      	movs	r2, #52	@ 0x34
 800b318:	fb02 f303 	mul.w	r3, r2, r3
 800b31c:	3390      	adds	r3, #144	@ 0x90
 800b31e:	697a      	ldr	r2, [r7, #20]
 800b320:	4413      	add	r3, r2
 800b322:	2234      	movs	r2, #52	@ 0x34
 800b324:	4619      	mov	r1, r3
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f008 fe59 	bl	8013fde <memcpy>
    return USBH_OK;
 800b32c:	2300      	movs	r3, #0
 800b32e:	e000      	b.n	800b332 <USBH_MSC_GetLUNInfo+0x4a>
  }
  else
  {
    return USBH_FAIL;
 800b330:	2302      	movs	r3, #2
  }
}
 800b332:	4618      	mov	r0, r3
 800b334:	3718      	adds	r7, #24
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b088      	sub	sp, #32
 800b33e:	af02      	add	r7, sp, #8
 800b340:	60f8      	str	r0, [r7, #12]
 800b342:	607a      	str	r2, [r7, #4]
 800b344:	603b      	str	r3, [r7, #0]
 800b346:	460b      	mov	r3, r1
 800b348:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b350:	69db      	ldr	r3, [r3, #28]
 800b352:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800b354:	7afb      	ldrb	r3, [r7, #11]
 800b356:	b29a      	uxth	r2, r3
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.PortEnabled == 0U) ||
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800b364:	b2db      	uxtb	r3, r3
 800b366:	2b00      	cmp	r3, #0
 800b368:	d00e      	beq.n	800b388 <USBH_MSC_Read+0x4e>
      (phost->gState != HOST_CLASS) ||
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	b2db      	uxtb	r3, r3
  if ((phost->device.PortEnabled == 0U) ||
 800b370:	2b0b      	cmp	r3, #11
 800b372:	d109      	bne.n	800b388 <USBH_MSC_Read+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b374:	7afb      	ldrb	r3, [r7, #11]
 800b376:	697a      	ldr	r2, [r7, #20]
 800b378:	2134      	movs	r1, #52	@ 0x34
 800b37a:	fb01 f303 	mul.w	r3, r1, r3
 800b37e:	4413      	add	r3, r2
 800b380:	3390      	adds	r3, #144	@ 0x90
 800b382:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b384:	2b01      	cmp	r3, #1
 800b386:	d001      	beq.n	800b38c <USBH_MSC_Read+0x52>
  {
    return  USBH_FAIL;
 800b388:	2302      	movs	r3, #2
 800b38a:	e032      	b.n	800b3f2 <USBH_MSC_Read+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_READ;
 800b38c:	7afb      	ldrb	r3, [r7, #11]
 800b38e:	697a      	ldr	r2, [r7, #20]
 800b390:	2134      	movs	r1, #52	@ 0x34
 800b392:	fb01 f303 	mul.w	r3, r1, r3
 800b396:	4413      	add	r3, r2
 800b398:	3390      	adds	r3, #144	@ 0x90
 800b39a:	2206      	movs	r2, #6
 800b39c:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800b39e:	7af9      	ldrb	r1, [r7, #11]
 800b3a0:	6a3b      	ldr	r3, [r7, #32]
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f000 fd72 	bl	800be92 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b3b4:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b3b6:	e013      	b.n	800b3e0 <USBH_MSC_Read+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.PortEnabled == 0U))
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	1ad2      	subs	r2, r2, r3
 800b3c2:	6a3b      	ldr	r3, [r7, #32]
 800b3c4:	f242 7110 	movw	r1, #10000	@ 0x2710
 800b3c8:	fb01 f303 	mul.w	r3, r1, r3
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d805      	bhi.n	800b3dc <USBH_MSC_Read+0xa2>
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d101      	bne.n	800b3e0 <USBH_MSC_Read+0xa6>
    {
      return USBH_FAIL;
 800b3dc:	2302      	movs	r3, #2
 800b3de:	e008      	b.n	800b3f2 <USBH_MSC_Read+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b3e0:	7afb      	ldrb	r3, [r7, #11]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f7ff fe84 	bl	800b0f2 <USBH_MSC_RdWrProcess>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d0e3      	beq.n	800b3b8 <USBH_MSC_Read+0x7e>
    }
  }

  return USBH_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3718      	adds	r7, #24
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b088      	sub	sp, #32
 800b3fe:	af02      	add	r7, sp, #8
 800b400:	60f8      	str	r0, [r7, #12]
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	603b      	str	r3, [r7, #0]
 800b406:	460b      	mov	r3, r1
 800b408:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b410:	69db      	ldr	r3, [r3, #28]
 800b412:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800b414:	7afb      	ldrb	r3, [r7, #11]
 800b416:	b29a      	uxth	r2, r3
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.PortEnabled == 0U) ||
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00e      	beq.n	800b448 <USBH_MSC_Write+0x4e>
      (phost->gState != HOST_CLASS) ||
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	b2db      	uxtb	r3, r3
  if ((phost->device.PortEnabled == 0U) ||
 800b430:	2b0b      	cmp	r3, #11
 800b432:	d109      	bne.n	800b448 <USBH_MSC_Write+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b434:	7afb      	ldrb	r3, [r7, #11]
 800b436:	697a      	ldr	r2, [r7, #20]
 800b438:	2134      	movs	r1, #52	@ 0x34
 800b43a:	fb01 f303 	mul.w	r3, r1, r3
 800b43e:	4413      	add	r3, r2
 800b440:	3390      	adds	r3, #144	@ 0x90
 800b442:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b444:	2b01      	cmp	r3, #1
 800b446:	d001      	beq.n	800b44c <USBH_MSC_Write+0x52>
  {
    return  USBH_FAIL;
 800b448:	2302      	movs	r3, #2
 800b44a:	e032      	b.n	800b4b2 <USBH_MSC_Write+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_WRITE;
 800b44c:	7afb      	ldrb	r3, [r7, #11]
 800b44e:	697a      	ldr	r2, [r7, #20]
 800b450:	2134      	movs	r1, #52	@ 0x34
 800b452:	fb01 f303 	mul.w	r3, r1, r3
 800b456:	4413      	add	r3, r2
 800b458:	3390      	adds	r3, #144	@ 0x90
 800b45a:	2207      	movs	r2, #7
 800b45c:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800b45e:	7af9      	ldrb	r1, [r7, #11]
 800b460:	6a3b      	ldr	r3, [r7, #32]
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f000 fca2 	bl	800bdb2 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b474:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b476:	e013      	b.n	800b4a0 <USBH_MSC_Write+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.PortEnabled == 0U))
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	1ad2      	subs	r2, r2, r3
 800b482:	6a3b      	ldr	r3, [r7, #32]
 800b484:	f242 7110 	movw	r1, #10000	@ 0x2710
 800b488:	fb01 f303 	mul.w	r3, r1, r3
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d805      	bhi.n	800b49c <USBH_MSC_Write+0xa2>
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800b496:	b2db      	uxtb	r3, r3
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d101      	bne.n	800b4a0 <USBH_MSC_Write+0xa6>
    {
      return USBH_FAIL;
 800b49c:	2302      	movs	r3, #2
 800b49e:	e008      	b.n	800b4b2 <USBH_MSC_Write+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b4a0:	7afb      	ldrb	r3, [r7, #11]
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f7ff fe24 	bl	800b0f2 <USBH_MSC_RdWrProcess>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d0e3      	beq.n	800b478 <USBH_MSC_Write+0x7e>
    }
  }

  return USBH_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3718      	adds	r7, #24
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b082      	sub	sp, #8
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2221      	movs	r2, #33	@ 0x21
 800b4c6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	22ff      	movs	r2, #255	@ 0xff
 800b4cc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f001 ff47 	bl	800d378 <USBH_CtlReq>
 800b4ea:	4603      	mov	r3, r0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3708      	adds	r7, #8
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	22a1      	movs	r2, #161	@ 0xa1
 800b502:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	22fe      	movs	r2, #254	@ 0xfe
 800b508:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2201      	movs	r2, #1
 800b51a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800b51c:	2201      	movs	r2, #1
 800b51e:	6839      	ldr	r1, [r7, #0]
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f001 ff29 	bl	800d378 <USBH_CtlReq>
 800b526:	4603      	mov	r3, r0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3708      	adds	r7, #8
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800b530:	b480      	push	{r7}
 800b532:	b085      	sub	sp, #20
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b53e:	69db      	ldr	r3, [r3, #28]
 800b540:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	4a09      	ldr	r2, [pc, #36]	@ (800b56c <USBH_MSC_BOT_Init+0x3c>)
 800b546:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	4a09      	ldr	r2, [pc, #36]	@ (800b570 <USBH_MSC_BOT_Init+0x40>)
 800b54c:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2201      	movs	r2, #1
 800b552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3714      	adds	r7, #20
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr
 800b56c:	43425355 	.word	0x43425355
 800b570:	20304050 	.word	0x20304050

0800b574 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b088      	sub	sp, #32
 800b578:	af02      	add	r7, sp, #8
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	460b      	mov	r3, r1
 800b57e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b580:	2301      	movs	r3, #1
 800b582:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800b584:	2301      	movs	r3, #1
 800b586:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800b588:	2301      	movs	r3, #1
 800b58a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b58c:	2300      	movs	r3, #0
 800b58e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b596:	69db      	ldr	r3, [r3, #28]
 800b598:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800b59a:	2300      	movs	r3, #0
 800b59c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	2b0a      	cmp	r3, #10
 800b5a8:	f200 819e 	bhi.w	800b8e8 <USBH_MSC_BOT_Process+0x374>
 800b5ac:	a201      	add	r2, pc, #4	@ (adr r2, 800b5b4 <USBH_MSC_BOT_Process+0x40>)
 800b5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b2:	bf00      	nop
 800b5b4:	0800b5e1 	.word	0x0800b5e1
 800b5b8:	0800b609 	.word	0x0800b609
 800b5bc:	0800b673 	.word	0x0800b673
 800b5c0:	0800b691 	.word	0x0800b691
 800b5c4:	0800b715 	.word	0x0800b715
 800b5c8:	0800b737 	.word	0x0800b737
 800b5cc:	0800b7cf 	.word	0x0800b7cf
 800b5d0:	0800b7eb 	.word	0x0800b7eb
 800b5d4:	0800b83d 	.word	0x0800b83d
 800b5d8:	0800b86d 	.word	0x0800b86d
 800b5dc:	0800b8cf 	.word	0x0800b8cf
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	78fa      	ldrb	r2, [r7, #3]
 800b5e4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	2202      	movs	r2, #2
 800b5ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	795b      	ldrb	r3, [r3, #5]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	9200      	str	r2, [sp, #0]
 800b5fe:	221f      	movs	r2, #31
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f002 f8ca 	bl	800d79a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800b606:	e17e      	b.n	800b906 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	795b      	ldrb	r3, [r3, #5]
 800b60c:	4619      	mov	r1, r3
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f007 fd30 	bl	8013074 <USBH_LL_GetURBState>
 800b614:	4603      	mov	r3, r0
 800b616:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b618:	7d3b      	ldrb	r3, [r7, #20]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d118      	bne.n	800b650 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00f      	beq.n	800b646 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800b62c:	b25b      	sxtb	r3, r3
 800b62e:	2b00      	cmp	r3, #0
 800b630:	da04      	bge.n	800b63c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	2203      	movs	r2, #3
 800b636:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b63a:	e157      	b.n	800b8ec <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	2205      	movs	r2, #5
 800b640:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b644:	e152      	b.n	800b8ec <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	2207      	movs	r2, #7
 800b64a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b64e:	e14d      	b.n	800b8ec <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b650:	7d3b      	ldrb	r3, [r7, #20]
 800b652:	2b02      	cmp	r3, #2
 800b654:	d104      	bne.n	800b660 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	2201      	movs	r2, #1
 800b65a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b65e:	e145      	b.n	800b8ec <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800b660:	7d3b      	ldrb	r3, [r7, #20]
 800b662:	2b05      	cmp	r3, #5
 800b664:	f040 8142 	bne.w	800b8ec <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	220a      	movs	r2, #10
 800b66c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b670:	e13c      	b.n	800b8ec <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:

      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	895a      	ldrh	r2, [r3, #10]
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	791b      	ldrb	r3, [r3, #4]
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f002 f8af 	bl	800d7e4 <USBH_BulkReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	2204      	movs	r2, #4
 800b68a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 800b68e:	e13a      	b.n	800b906 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	791b      	ldrb	r3, [r3, #4]
 800b694:	4619      	mov	r1, r3
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f007 fcec 	bl	8013074 <USBH_LL_GetURBState>
 800b69c:	4603      	mov	r3, r0
 800b69e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b6a0:	7d3b      	ldrb	r3, [r7, #20]
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d12d      	bne.n	800b702 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6aa:	693a      	ldr	r2, [r7, #16]
 800b6ac:	8952      	ldrh	r2, [r2, #10]
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d910      	bls.n	800b6d4 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6b8:	693a      	ldr	r2, [r7, #16]
 800b6ba:	8952      	ldrh	r2, [r2, #10]
 800b6bc:	441a      	add	r2, r3
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6c8:	693a      	ldr	r2, [r7, #16]
 800b6ca:	8952      	ldrh	r2, [r2, #10]
 800b6cc:	1a9a      	subs	r2, r3, r2
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b6d2:	e002      	b.n	800b6da <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00a      	beq.n	800b6f8 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	895a      	ldrh	r2, [r3, #10]
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	791b      	ldrb	r3, [r3, #4]
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f002 f877 	bl	800d7e4 <USBH_BulkReceiveData>
#endif /* (USBH_USE_OS == 1U) */
      }
      else
      {
      }
      break;
 800b6f6:	e0fb      	b.n	800b8f0 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	2207      	movs	r2, #7
 800b6fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b700:	e0f6      	b.n	800b8f0 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800b702:	7d3b      	ldrb	r3, [r7, #20]
 800b704:	2b05      	cmp	r3, #5
 800b706:	f040 80f3 	bne.w	800b8f0 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	2209      	movs	r2, #9
 800b70e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b712:	e0ed      	b.n	800b8f0 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	891a      	ldrh	r2, [r3, #8]
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	795b      	ldrb	r3, [r3, #5]
 800b722:	2001      	movs	r0, #1
 800b724:	9000      	str	r0, [sp, #0]
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f002 f837 	bl	800d79a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	2206      	movs	r2, #6
 800b730:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b734:	e0e7      	b.n	800b906 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	795b      	ldrb	r3, [r3, #5]
 800b73a:	4619      	mov	r1, r3
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f007 fc99 	bl	8013074 <USBH_LL_GetURBState>
 800b742:	4603      	mov	r3, r0
 800b744:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b746:	7d3b      	ldrb	r3, [r7, #20]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d12f      	bne.n	800b7ac <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b750:	693a      	ldr	r2, [r7, #16]
 800b752:	8912      	ldrh	r2, [r2, #8]
 800b754:	4293      	cmp	r3, r2
 800b756:	d910      	bls.n	800b77a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b75e:	693a      	ldr	r2, [r7, #16]
 800b760:	8912      	ldrh	r2, [r2, #8]
 800b762:	441a      	add	r2, r3
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b76e:	693a      	ldr	r2, [r7, #16]
 800b770:	8912      	ldrh	r2, [r2, #8]
 800b772:	1a9a      	subs	r2, r3, r2
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b778:	e002      	b.n	800b780 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	2200      	movs	r2, #0
 800b77e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b784:	2b00      	cmp	r3, #0
 800b786:	d00c      	beq.n	800b7a2 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	891a      	ldrh	r2, [r3, #8]
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	795b      	ldrb	r3, [r3, #5]
 800b796:	2001      	movs	r0, #1
 800b798:	9000      	str	r0, [sp, #0]
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f001 fffd 	bl	800d79a <USBH_BulkSendData>
#endif /* (USBH_USE_OS == 1U) */
      }
      else
      {
      }
      break;
 800b7a0:	e0a8      	b.n	800b8f4 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	2207      	movs	r2, #7
 800b7a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b7aa:	e0a3      	b.n	800b8f4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b7ac:	7d3b      	ldrb	r3, [r7, #20]
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	d104      	bne.n	800b7bc <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	2205      	movs	r2, #5
 800b7b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b7ba:	e09b      	b.n	800b8f4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800b7bc:	7d3b      	ldrb	r3, [r7, #20]
 800b7be:	2b05      	cmp	r3, #5
 800b7c0:	f040 8098 	bne.w	800b8f4 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	220a      	movs	r2, #10
 800b7c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b7cc:	e092      	b.n	800b8f4 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	791b      	ldrb	r3, [r3, #4]
 800b7d8:	220d      	movs	r2, #13
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f002 f802 	bl	800d7e4 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	2208      	movs	r2, #8
 800b7e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */
      break;
 800b7e8:	e08d      	b.n	800b906 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	791b      	ldrb	r3, [r3, #4]
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f007 fc3f 	bl	8013074 <USBH_LL_GetURBState>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800b7fa:	7d3b      	ldrb	r3, [r7, #20]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d115      	bne.n	800b82c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f8a9 	bl	800b968 <USBH_MSC_DecodeCSW>
 800b816:	4603      	mov	r3, r0
 800b818:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800b81a:	7d7b      	ldrb	r3, [r7, #21]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d102      	bne.n	800b826 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800b820:	2300      	movs	r3, #0
 800b822:	75fb      	strb	r3, [r7, #23]
#endif /* (USBH_USE_OS == 1U) */
      }
      else
      {
      }
      break;
 800b824:	e068      	b.n	800b8f8 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800b826:	2302      	movs	r3, #2
 800b828:	75fb      	strb	r3, [r7, #23]
      break;
 800b82a:	e065      	b.n	800b8f8 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800b82c:	7d3b      	ldrb	r3, [r7, #20]
 800b82e:	2b05      	cmp	r3, #5
 800b830:	d162      	bne.n	800b8f8 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	2209      	movs	r2, #9
 800b836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b83a:	e05d      	b.n	800b8f8 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800b83c:	78fb      	ldrb	r3, [r7, #3]
 800b83e:	2200      	movs	r2, #0
 800b840:	4619      	mov	r1, r3
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 f864 	bl	800b910 <USBH_MSC_BOT_Abort>
 800b848:	4603      	mov	r3, r0
 800b84a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b84c:	7dbb      	ldrb	r3, [r7, #22]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d104      	bne.n	800b85c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	2207      	movs	r2, #7
 800b856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800b85a:	e04f      	b.n	800b8fc <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800b85c:	7dbb      	ldrb	r3, [r7, #22]
 800b85e:	2b04      	cmp	r3, #4
 800b860:	d14c      	bne.n	800b8fc <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	220b      	movs	r2, #11
 800b866:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b86a:	e047      	b.n	800b8fc <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800b86c:	78fb      	ldrb	r3, [r7, #3]
 800b86e:	2201      	movs	r2, #1
 800b870:	4619      	mov	r1, r3
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 f84c 	bl	800b910 <USBH_MSC_BOT_Abort>
 800b878:	4603      	mov	r3, r0
 800b87a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b87c:	7dbb      	ldrb	r3, [r7, #22]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d11d      	bne.n	800b8be <USBH_MSC_BOT_Process+0x34a>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	795b      	ldrb	r3, [r3, #5]
 800b886:	4619      	mov	r1, r3
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f007 fc50 	bl	801312e <USBH_LL_GetToggle>
 800b88e:	4603      	mov	r3, r0
 800b890:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	7959      	ldrb	r1, [r3, #5]
 800b896:	7bfb      	ldrb	r3, [r7, #15]
 800b898:	f1c3 0301 	rsb	r3, r3, #1
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	461a      	mov	r2, r3
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f007 fc11 	bl	80130c8 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	791b      	ldrb	r3, [r3, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f007 fc0a 	bl	80130c8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	2209      	movs	r2, #9
 800b8b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800b8bc:	e020      	b.n	800b900 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800b8be:	7dbb      	ldrb	r3, [r7, #22]
 800b8c0:	2b04      	cmp	r3, #4
 800b8c2:	d11d      	bne.n	800b900 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	220b      	movs	r2, #11
 800b8c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b8cc:	e018      	b.n	800b900 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7ff fdf3 	bl	800b4ba <USBH_MSC_BOT_REQ_Reset>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800b8d8:	7dfb      	ldrb	r3, [r7, #23]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d112      	bne.n	800b904 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 800b8e6:	e00d      	b.n	800b904 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800b8e8:	bf00      	nop
 800b8ea:	e00c      	b.n	800b906 <USBH_MSC_BOT_Process+0x392>
      break;
 800b8ec:	bf00      	nop
 800b8ee:	e00a      	b.n	800b906 <USBH_MSC_BOT_Process+0x392>
      break;
 800b8f0:	bf00      	nop
 800b8f2:	e008      	b.n	800b906 <USBH_MSC_BOT_Process+0x392>
      break;
 800b8f4:	bf00      	nop
 800b8f6:	e006      	b.n	800b906 <USBH_MSC_BOT_Process+0x392>
      break;
 800b8f8:	bf00      	nop
 800b8fa:	e004      	b.n	800b906 <USBH_MSC_BOT_Process+0x392>
      break;
 800b8fc:	bf00      	nop
 800b8fe:	e002      	b.n	800b906 <USBH_MSC_BOT_Process+0x392>
      break;
 800b900:	bf00      	nop
 800b902:	e000      	b.n	800b906 <USBH_MSC_BOT_Process+0x392>
      break;
 800b904:	bf00      	nop
  }
  return status;
 800b906:	7dfb      	ldrb	r3, [r7, #23]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3718      	adds	r7, #24
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	460b      	mov	r3, r1
 800b91a:	70fb      	strb	r3, [r7, #3]
 800b91c:	4613      	mov	r3, r2
 800b91e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800b920:	2302      	movs	r3, #2
 800b922:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b92a:	69db      	ldr	r3, [r3, #28]
 800b92c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800b92e:	78bb      	ldrb	r3, [r7, #2]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d002      	beq.n	800b93a <USBH_MSC_BOT_Abort+0x2a>
 800b934:	2b01      	cmp	r3, #1
 800b936:	d009      	beq.n	800b94c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800b938:	e011      	b.n	800b95e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	79db      	ldrb	r3, [r3, #7]
 800b93e:	4619      	mov	r1, r3
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f001 f9e5 	bl	800cd10 <USBH_ClrFeature>
 800b946:	4603      	mov	r3, r0
 800b948:	73fb      	strb	r3, [r7, #15]
      break;
 800b94a:	e008      	b.n	800b95e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	799b      	ldrb	r3, [r3, #6]
 800b950:	4619      	mov	r1, r3
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f001 f9dc 	bl	800cd10 <USBH_ClrFeature>
 800b958:	4603      	mov	r3, r0
 800b95a:	73fb      	strb	r3, [r7, #15]
      break;
 800b95c:	bf00      	nop
  }
  return status;
 800b95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b976:	69db      	ldr	r3, [r3, #28]
 800b978:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800b97a:	2301      	movs	r3, #1
 800b97c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	791b      	ldrb	r3, [r3, #4]
 800b982:	4619      	mov	r1, r3
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f007 faf5 	bl	8012f74 <USBH_LL_GetLastXferSize>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b0d      	cmp	r3, #13
 800b98e:	d002      	beq.n	800b996 <USBH_MSC_DecodeCSW+0x2e>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
 800b990:	2302      	movs	r3, #2
 800b992:	73fb      	strb	r3, [r7, #15]
 800b994:	e024      	b.n	800b9e0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b99a:	4a14      	ldr	r2, [pc, #80]	@ (800b9ec <USBH_MSC_DecodeCSW+0x84>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d11d      	bne.n	800b9dc <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d119      	bne.n	800b9e0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d102      	bne.n	800b9bc <USBH_MSC_DecodeCSW+0x54>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	73fb      	strb	r3, [r7, #15]
 800b9ba:	e011      	b.n	800b9e0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d102      	bne.n	800b9cc <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	73fb      	strb	r3, [r7, #15]
 800b9ca:	e009      	b.n	800b9e0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d104      	bne.n	800b9e0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800b9d6:	2302      	movs	r3, #2
 800b9d8:	73fb      	strb	r3, [r7, #15]
 800b9da:	e001      	b.n	800b9e0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800b9dc:	2302      	movs	r3, #2
 800b9de:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800b9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	53425355 	.word	0x53425355

0800b9f0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
 800b9fc:	2302      	movs	r3, #2
 800b9fe:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba06:	69db      	ldr	r3, [r3, #28]
 800ba08:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d002      	beq.n	800ba1a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	d021      	beq.n	800ba5c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ba18:	e028      	b.n	800ba6c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	220a      	movs	r2, #10
 800ba2c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	3363      	adds	r3, #99	@ 0x63
 800ba34:	2210      	movs	r2, #16
 800ba36:	2100      	movs	r1, #0
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f008 fa18 	bl	8013e6e <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	2202      	movs	r2, #2
 800ba52:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 800ba56:	2301      	movs	r3, #1
 800ba58:	73fb      	strb	r3, [r7, #15]
      break;
 800ba5a:	e007      	b.n	800ba6c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ba5c:	78fb      	ldrb	r3, [r7, #3]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f7ff fd87 	bl	800b574 <USBH_MSC_BOT_Process>
 800ba66:	4603      	mov	r3, r0
 800ba68:	73fb      	strb	r3, [r7, #15]
      break;
 800ba6a:	bf00      	nop
  }

  return error;
 800ba6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b086      	sub	sp, #24
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	60f8      	str	r0, [r7, #12]
 800ba7e:	460b      	mov	r3, r1
 800ba80:	607a      	str	r2, [r7, #4]
 800ba82:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
 800ba84:	2301      	movs	r3, #1
 800ba86:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba8e:	69db      	ldr	r3, [r3, #28]
 800ba90:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d002      	beq.n	800baa2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800ba9c:	2b02      	cmp	r3, #2
 800ba9e:	d027      	beq.n	800baf0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800baa0:	e05e      	b.n	800bb60 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	2208      	movs	r2, #8
 800baa6:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	2280      	movs	r2, #128	@ 0x80
 800baac:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	220a      	movs	r2, #10
 800bab4:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	3363      	adds	r3, #99	@ 0x63
 800babc:	2210      	movs	r2, #16
 800babe:	2100      	movs	r1, #0
 800bac0:	4618      	mov	r0, r3
 800bac2:	f008 f9d4 	bl	8013e6e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	2225      	movs	r2, #37	@ 0x25
 800baca:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	2201      	movs	r2, #1
 800bad2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	2202      	movs	r2, #2
 800bada:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	f103 0210 	add.w	r2, r3, #16
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800baea:	2301      	movs	r3, #1
 800baec:	75fb      	strb	r3, [r7, #23]
      break;
 800baee:	e037      	b.n	800bb60 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 800baf0:	7afb      	ldrb	r3, [r7, #11]
 800baf2:	4619      	mov	r1, r3
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f7ff fd3d 	bl	800b574 <USBH_MSC_BOT_Process>
 800bafa:	4603      	mov	r3, r0
 800bafc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bafe:	7dfb      	ldrb	r3, [r7, #23]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d12c      	bne.n	800bb5e <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb0a:	3303      	adds	r3, #3
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	461a      	mov	r2, r3
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb16:	3302      	adds	r3, #2
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	021b      	lsls	r3, r3, #8
 800bb1c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb24:	3301      	adds	r3, #1
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bb2a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	061b      	lsls	r3, r3, #24
 800bb36:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb42:	3307      	adds	r3, #7
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	461a      	mov	r2, r3
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb4e:	3306      	adds	r3, #6
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	021b      	lsls	r3, r3, #8
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	4313      	orrs	r3, r2
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	809a      	strh	r2, [r3, #4]
      break;
 800bb5e:	bf00      	nop
  }

  return error;
 800bb60:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3718      	adds	r7, #24
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b086      	sub	sp, #24
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	60f8      	str	r0, [r7, #12]
 800bb72:	460b      	mov	r3, r1
 800bb74:	607a      	str	r2, [r7, #4]
 800bb76:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800bb78:	2302      	movs	r3, #2
 800bb7a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bb82:	69db      	ldr	r3, [r3, #28]
 800bb84:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d002      	beq.n	800bb96 <USBH_MSC_SCSI_Inquiry+0x2c>
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	d03d      	beq.n	800bc10 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800bb94:	e089      	b.n	800bcaa <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	2224      	movs	r2, #36	@ 0x24
 800bb9a:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	2280      	movs	r2, #128	@ 0x80
 800bba0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	220a      	movs	r2, #10
 800bba8:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	3363      	adds	r3, #99	@ 0x63
 800bbb0:	220a      	movs	r2, #10
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f008 f95a 	bl	8013e6e <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	2212      	movs	r2, #18
 800bbbe:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 800bbc2:	7afb      	ldrb	r3, [r7, #11]
 800bbc4:	015b      	lsls	r3, r3, #5
 800bbc6:	b2da      	uxtb	r2, r3
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	2224      	movs	r2, #36	@ 0x24
 800bbe2:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	2202      	movs	r2, #2
 800bbfa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	f103 0210 	add.w	r2, r3, #16
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	75fb      	strb	r3, [r7, #23]
      break;
 800bc0e:	e04c      	b.n	800bcaa <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bc10:	7afb      	ldrb	r3, [r7, #11]
 800bc12:	4619      	mov	r1, r3
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f7ff fcad 	bl	800b574 <USBH_MSC_BOT_Process>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bc1e:	7dfb      	ldrb	r3, [r7, #23]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d141      	bne.n	800bca8 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800bc24:	2222      	movs	r2, #34	@ 0x22
 800bc26:	2100      	movs	r1, #0
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f008 f920 	bl	8013e6e <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	f003 031f 	and.w	r3, r3, #31
 800bc3a:	b2da      	uxtb	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	095b      	lsrs	r3, r3, #5
 800bc4a:	b2da      	uxtb	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc56:	3301      	adds	r3, #1
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	b25b      	sxtb	r3, r3
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	da03      	bge.n	800bc68 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2201      	movs	r2, #1
 800bc64:	709a      	strb	r2, [r3, #2]
 800bc66:	e002      	b.n	800bc6e <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	1cd8      	adds	r0, r3, #3
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc78:	3308      	adds	r3, #8
 800bc7a:	2208      	movs	r2, #8
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	f008 f9ae 	bl	8013fde <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f103 000c 	add.w	r0, r3, #12
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc8e:	3310      	adds	r3, #16
 800bc90:	2210      	movs	r2, #16
 800bc92:	4619      	mov	r1, r3
 800bc94:	f008 f9a3 	bl	8013fde <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	331d      	adds	r3, #29
 800bc9c:	693a      	ldr	r2, [r7, #16]
 800bc9e:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800bca2:	3220      	adds	r2, #32
 800bca4:	6812      	ldr	r2, [r2, #0]
 800bca6:	601a      	str	r2, [r3, #0]
      break;
 800bca8:	bf00      	nop
  }

  return error;
 800bcaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3718      	adds	r7, #24
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b086      	sub	sp, #24
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	607a      	str	r2, [r7, #4]
 800bcc0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bccc:	69db      	ldr	r3, [r3, #28]
 800bcce:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d002      	beq.n	800bce0 <USBH_MSC_SCSI_RequestSense+0x2c>
 800bcda:	2b02      	cmp	r3, #2
 800bcdc:	d03d      	beq.n	800bd5a <USBH_MSC_SCSI_RequestSense+0xa6>
        }
      }
      break;

    default:
      break;
 800bcde:	e063      	b.n	800bda8 <USBH_MSC_SCSI_RequestSense+0xf4>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	220e      	movs	r2, #14
 800bce4:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	2280      	movs	r2, #128	@ 0x80
 800bcea:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	220a      	movs	r2, #10
 800bcf2:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	3363      	adds	r3, #99	@ 0x63
 800bcfa:	2210      	movs	r2, #16
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f008 f8b5 	bl	8013e6e <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	2203      	movs	r2, #3
 800bd08:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 800bd0c:	7afb      	ldrb	r3, [r7, #11]
 800bd0e:	015b      	lsls	r3, r3, #5
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	220e      	movs	r2, #14
 800bd2c:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	2202      	movs	r2, #2
 800bd44:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	f103 0210 	add.w	r2, r3, #16
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800bd54:	2301      	movs	r3, #1
 800bd56:	75fb      	strb	r3, [r7, #23]
      break;
 800bd58:	e026      	b.n	800bda8 <USBH_MSC_SCSI_RequestSense+0xf4>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bd5a:	7afb      	ldrb	r3, [r7, #11]
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f7ff fc08 	bl	800b574 <USBH_MSC_BOT_Process>
 800bd64:	4603      	mov	r3, r0
 800bd66:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bd68:	7dfb      	ldrb	r3, [r7, #23]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d11b      	bne.n	800bda6 <USBH_MSC_SCSI_RequestSense+0xf2>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd74:	3302      	adds	r3, #2
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	f003 030f 	and.w	r3, r3, #15
 800bd7c:	b2da      	uxtb	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd88:	7b1a      	ldrb	r2, [r3, #12]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd94:	7b5a      	ldrb	r2, [r3, #13]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	785b      	ldrb	r3, [r3, #1]
 800bd9e:	2b3a      	cmp	r3, #58	@ 0x3a
 800bda0:	d101      	bne.n	800bda6 <USBH_MSC_SCSI_RequestSense+0xf2>
          error = USBH_UNRECOVERED_ERROR;
 800bda2:	2304      	movs	r3, #4
 800bda4:	75fb      	strb	r3, [r7, #23]
      break;
 800bda6:	bf00      	nop
  }

  return error;
 800bda8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3718      	adds	r7, #24
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b086      	sub	sp, #24
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	60f8      	str	r0, [r7, #12]
 800bdba:	607a      	str	r2, [r7, #4]
 800bdbc:	603b      	str	r3, [r7, #0]
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800bdc2:	2302      	movs	r3, #2
 800bdc4:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bdcc:	69db      	ldr	r3, [r3, #28]
 800bdce:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d002      	beq.n	800bde0 <USBH_MSC_SCSI_Write+0x2e>
 800bdda:	2b02      	cmp	r3, #2
 800bddc:	d04c      	beq.n	800be78 <USBH_MSC_SCSI_Write+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800bdde:	e053      	b.n	800be88 <USBH_MSC_SCSI_Write+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 800bde0:	7afb      	ldrb	r3, [r7, #11]
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	2134      	movs	r1, #52	@ 0x34
 800bde6:	fb01 f303 	mul.w	r3, r1, r3
 800bdea:	4413      	add	r3, r2
 800bdec:	3398      	adds	r3, #152	@ 0x98
 800bdee:	881b      	ldrh	r3, [r3, #0]
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	fb03 f202 	mul.w	r2, r3, r2
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	220a      	movs	r2, #10
 800be08:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	3363      	adds	r3, #99	@ 0x63
 800be10:	2210      	movs	r2, #16
 800be12:	2100      	movs	r1, #0
 800be14:	4618      	mov	r0, r3
 800be16:	f008 f82a 	bl	8013e6e <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_WRITE10;
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	222a      	movs	r2, #42	@ 0x2a
 800be1e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 800be22:	79fa      	ldrb	r2, [r7, #7]
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 800be2a:	79ba      	ldrb	r2, [r7, #6]
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 800be32:	797a      	ldrb	r2, [r7, #5]
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 800be3a:	1d3b      	adds	r3, r7, #4
 800be3c:	781a      	ldrb	r2, [r3, #0]
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 800be44:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 800be4e:	f107 0320 	add.w	r3, r7, #32
 800be52:	781a      	ldrb	r2, [r3, #0]
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	2201      	movs	r2, #1
 800be5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	2202      	movs	r2, #2
 800be66:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	683a      	ldr	r2, [r7, #0]
 800be6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800be72:	2301      	movs	r3, #1
 800be74:	75fb      	strb	r3, [r7, #23]
      break;
 800be76:	e007      	b.n	800be88 <USBH_MSC_SCSI_Write+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 800be78:	7afb      	ldrb	r3, [r7, #11]
 800be7a:	4619      	mov	r1, r3
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f7ff fb79 	bl	800b574 <USBH_MSC_BOT_Process>
 800be82:	4603      	mov	r3, r0
 800be84:	75fb      	strb	r3, [r7, #23]
      break;
 800be86:	bf00      	nop
  }

  return error;
 800be88:	7dfb      	ldrb	r3, [r7, #23]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3718      	adds	r7, #24
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800be92:	b580      	push	{r7, lr}
 800be94:	b086      	sub	sp, #24
 800be96:	af00      	add	r7, sp, #0
 800be98:	60f8      	str	r0, [r7, #12]
 800be9a:	607a      	str	r2, [r7, #4]
 800be9c:	603b      	str	r3, [r7, #0]
 800be9e:	460b      	mov	r3, r1
 800bea0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800bea2:	2302      	movs	r3, #2
 800bea4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800beac:	69db      	ldr	r3, [r3, #28]
 800beae:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d002      	beq.n	800bec0 <USBH_MSC_SCSI_Read+0x2e>
 800beba:	2b02      	cmp	r3, #2
 800bebc:	d04c      	beq.n	800bf58 <USBH_MSC_SCSI_Read+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800bebe:	e053      	b.n	800bf68 <USBH_MSC_SCSI_Read+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 800bec0:	7afb      	ldrb	r3, [r7, #11]
 800bec2:	693a      	ldr	r2, [r7, #16]
 800bec4:	2134      	movs	r1, #52	@ 0x34
 800bec6:	fb01 f303 	mul.w	r3, r1, r3
 800beca:	4413      	add	r3, r2
 800becc:	3398      	adds	r3, #152	@ 0x98
 800bece:	881b      	ldrh	r3, [r3, #0]
 800bed0:	461a      	mov	r2, r3
 800bed2:	6a3b      	ldr	r3, [r7, #32]
 800bed4:	fb03 f202 	mul.w	r2, r3, r2
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	2280      	movs	r2, #128	@ 0x80
 800bee0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	220a      	movs	r2, #10
 800bee8:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	3363      	adds	r3, #99	@ 0x63
 800bef0:	2210      	movs	r2, #16
 800bef2:	2100      	movs	r1, #0
 800bef4:	4618      	mov	r0, r3
 800bef6:	f007 ffba 	bl	8013e6e <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_READ10;
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	2228      	movs	r2, #40	@ 0x28
 800befe:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 800bf02:	79fa      	ldrb	r2, [r7, #7]
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 800bf0a:	79ba      	ldrb	r2, [r7, #6]
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 800bf12:	797a      	ldrb	r2, [r7, #5]
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 800bf1a:	1d3b      	adds	r3, r7, #4
 800bf1c:	781a      	ldrb	r2, [r3, #0]
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 800bf24:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 800bf2e:	f107 0320 	add.w	r3, r7, #32
 800bf32:	781a      	ldrb	r2, [r3, #0]
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	2202      	movs	r2, #2
 800bf46:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	683a      	ldr	r2, [r7, #0]
 800bf4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800bf52:	2301      	movs	r3, #1
 800bf54:	75fb      	strb	r3, [r7, #23]
      break;
 800bf56:	e007      	b.n	800bf68 <USBH_MSC_SCSI_Read+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bf58:	7afb      	ldrb	r3, [r7, #11]
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f7ff fb09 	bl	800b574 <USBH_MSC_BOT_Process>
 800bf62:	4603      	mov	r3, r0
 800bf64:	75fb      	strb	r3, [r7, #23]
      break;
 800bf66:	bf00      	nop
  }

  return error;
 800bf68:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3718      	adds	r7, #24
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b084      	sub	sp, #16
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	60f8      	str	r0, [r7, #12]
 800bf7a:	60b9      	str	r1, [r7, #8]
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d101      	bne.n	800bf8a <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bf86:	2302      	movs	r3, #2
 800bf88:	e029      	b.n	800bfde <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	79fa      	ldrb	r2, [r7, #7]
 800bf8e:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2200      	movs	r2, #0
 800bf96:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f000 f81f 	bl	800bfe6 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d003      	beq.n	800bfd6 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f006 ff18 	bl	8012e0c <USBH_LL_Init>

  return USBH_OK;
 800bfdc:	2300      	movs	r3, #0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3710      	adds	r7, #16
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b084      	sub	sp, #16
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bfee:	2300      	movs	r3, #0
 800bff0:	60fb      	str	r3, [r7, #12]
 800bff2:	e009      	b.n	800c008 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	33e0      	adds	r3, #224	@ 0xe0
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	4413      	add	r3, r2
 800bffe:	2200      	movs	r2, #0
 800c000:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	3301      	adds	r3, #1
 800c006:	60fb      	str	r3, [r7, #12]
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2b0f      	cmp	r3, #15
 800c00c:	d9f2      	bls.n	800bff4 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c00e:	2300      	movs	r3, #0
 800c010:	60fb      	str	r3, [r7, #12]
 800c012:	e009      	b.n	800c028 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	4413      	add	r3, r2
 800c01a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c01e:	2200      	movs	r2, #0
 800c020:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	3301      	adds	r3, #1
 800c026:	60fb      	str	r3, [r7, #12]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c02e:	d3f1      	bcc.n	800c014 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2201      	movs	r2, #1
 800c040:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2201      	movs	r2, #1
 800c04e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2240      	movs	r2, #64	@ 0x40
 800c054:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2201      	movs	r2, #1
 800c068:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	331c      	adds	r3, #28
 800c080:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c084:	2100      	movs	r1, #0
 800c086:	4618      	mov	r0, r3
 800c088:	f007 fef1 	bl	8013e6e <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c092:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c096:	2100      	movs	r1, #0
 800c098:	4618      	mov	r0, r3
 800c09a:	f007 fee8 	bl	8013e6e <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800c0a4:	2212      	movs	r2, #18
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f007 fee0 	bl	8013e6e <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c0b4:	223e      	movs	r2, #62	@ 0x3e
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f007 fed8 	bl	8013e6e <memset>

  return USBH_OK;
 800c0be:	2300      	movs	r3, #0
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3710      	adds	r7, #16
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d016      	beq.n	800c10a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d10e      	bne.n	800c104 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c0ec:	1c59      	adds	r1, r3, #1
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	33de      	adds	r3, #222	@ 0xde
 800c0f8:	6839      	ldr	r1, [r7, #0]
 800c0fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c0fe:	2300      	movs	r3, #0
 800c100:	73fb      	strb	r3, [r7, #15]
 800c102:	e004      	b.n	800c10e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c104:	2302      	movs	r3, #2
 800c106:	73fb      	strb	r3, [r7, #15]
 800c108:	e001      	b.n	800c10e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c10a:	2302      	movs	r3, #2
 800c10c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c10e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c110:	4618      	mov	r0, r3
 800c112:	3714      	adds	r7, #20
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	460b      	mov	r3, r1
 800c126:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c128:	2300      	movs	r3, #0
 800c12a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800c132:	78fa      	ldrb	r2, [r7, #3]
 800c134:	429a      	cmp	r2, r3
 800c136:	d204      	bcs.n	800c142 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	78fa      	ldrb	r2, [r7, #3]
 800c13c:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800c140:	e001      	b.n	800c146 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c142:	2302      	movs	r3, #2
 800c144:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c146:	7bfb      	ldrb	r3, [r7, #15]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3714      	adds	r7, #20
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c154:	b480      	push	{r7}
 800c156:	b087      	sub	sp, #28
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	4608      	mov	r0, r1
 800c15e:	4611      	mov	r1, r2
 800c160:	461a      	mov	r2, r3
 800c162:	4603      	mov	r3, r0
 800c164:	70fb      	strb	r3, [r7, #3]
 800c166:	460b      	mov	r3, r1
 800c168:	70bb      	strb	r3, [r7, #2]
 800c16a:	4613      	mov	r3, r2
 800c16c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c16e:	2300      	movs	r3, #0
 800c170:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c172:	2300      	movs	r3, #0
 800c174:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c17c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c17e:	e025      	b.n	800c1cc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c180:	7dfb      	ldrb	r3, [r7, #23]
 800c182:	221a      	movs	r2, #26
 800c184:	fb02 f303 	mul.w	r3, r2, r3
 800c188:	3308      	adds	r3, #8
 800c18a:	68fa      	ldr	r2, [r7, #12]
 800c18c:	4413      	add	r3, r2
 800c18e:	3302      	adds	r3, #2
 800c190:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	795b      	ldrb	r3, [r3, #5]
 800c196:	78fa      	ldrb	r2, [r7, #3]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d002      	beq.n	800c1a2 <USBH_FindInterface+0x4e>
 800c19c:	78fb      	ldrb	r3, [r7, #3]
 800c19e:	2bff      	cmp	r3, #255	@ 0xff
 800c1a0:	d111      	bne.n	800c1c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c1a6:	78ba      	ldrb	r2, [r7, #2]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d002      	beq.n	800c1b2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c1ac:	78bb      	ldrb	r3, [r7, #2]
 800c1ae:	2bff      	cmp	r3, #255	@ 0xff
 800c1b0:	d109      	bne.n	800c1c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c1b6:	787a      	ldrb	r2, [r7, #1]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d002      	beq.n	800c1c2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c1bc:	787b      	ldrb	r3, [r7, #1]
 800c1be:	2bff      	cmp	r3, #255	@ 0xff
 800c1c0:	d101      	bne.n	800c1c6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c1c2:	7dfb      	ldrb	r3, [r7, #23]
 800c1c4:	e006      	b.n	800c1d4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c1c6:	7dfb      	ldrb	r3, [r7, #23]
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c1cc:	7dfb      	ldrb	r3, [r7, #23]
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d9d6      	bls.n	800c180 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c1d2:	23ff      	movs	r3, #255	@ 0xff
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	371c      	adds	r7, #28
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f006 fe4b 	bl	8012e84 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c1ee:	2101      	movs	r1, #1
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f006 ff52 	bl	801309a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b088      	sub	sp, #32
 800c204:	af04      	add	r7, sp, #16
 800c206:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c208:	2302      	movs	r3, #2
 800c20a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c20c:	2300      	movs	r3, #0
 800c20e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800c216:	b2db      	uxtb	r3, r3
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d102      	bne.n	800c222 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2203      	movs	r2, #3
 800c220:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	b2db      	uxtb	r3, r3
 800c228:	2b0b      	cmp	r3, #11
 800c22a:	f200 81bc 	bhi.w	800c5a6 <USBH_Process+0x3a6>
 800c22e:	a201      	add	r2, pc, #4	@ (adr r2, 800c234 <USBH_Process+0x34>)
 800c230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c234:	0800c265 	.word	0x0800c265
 800c238:	0800c297 	.word	0x0800c297
 800c23c:	0800c301 	.word	0x0800c301
 800c240:	0800c541 	.word	0x0800c541
 800c244:	0800c5a7 	.word	0x0800c5a7
 800c248:	0800c3a1 	.word	0x0800c3a1
 800c24c:	0800c4e7 	.word	0x0800c4e7
 800c250:	0800c3d7 	.word	0x0800c3d7
 800c254:	0800c3f7 	.word	0x0800c3f7
 800c258:	0800c415 	.word	0x0800c415
 800c25c:	0800c459 	.word	0x0800c459
 800c260:	0800c529 	.word	0x0800c529
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f000 819c 	beq.w	800c5aa <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2201      	movs	r2, #1
 800c276:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c278:	20c8      	movs	r0, #200	@ 0xc8
 800c27a:	f006 ff8b 	bl	8013194 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f006 fe5d 	bl	8012f3e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800c294:	e189      	b.n	800c5aa <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d107      	bne.n	800c2b2 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2202      	movs	r2, #2
 800c2ae:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800c2b0:	e18a      	b.n	800c5c8 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c2b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c2bc:	d914      	bls.n	800c2e8 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	b2da      	uxtb	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c2d4:	2b03      	cmp	r3, #3
 800c2d6:	d903      	bls.n	800c2e0 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	220d      	movs	r2, #13
 800c2dc:	701a      	strb	r2, [r3, #0]
      break;
 800c2de:	e173      	b.n	800c5c8 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	701a      	strb	r2, [r3, #0]
      break;
 800c2e6:	e16f      	b.n	800c5c8 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c2ee:	f103 020a 	add.w	r2, r3, #10
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800c2f8:	200a      	movs	r0, #10
 800c2fa:	f006 ff4b 	bl	8013194 <USBH_Delay>
      break;
 800c2fe:	e163      	b.n	800c5c8 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c306:	2b00      	cmp	r3, #0
 800c308:	d005      	beq.n	800c316 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c310:	2104      	movs	r1, #4
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c316:	2064      	movs	r0, #100	@ 0x64
 800c318:	f006 ff3c 	bl	8013194 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f006 fde7 	bl	8012ef0 <USBH_LL_GetSpeed>
 800c322:	4603      	mov	r3, r0
 800c324:	461a      	mov	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2205      	movs	r2, #5
 800c330:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c332:	2100      	movs	r1, #0
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f001 faa2 	bl	800d87e <USBH_AllocPipe>
 800c33a:	4603      	mov	r3, r0
 800c33c:	461a      	mov	r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c342:	2180      	movs	r1, #128	@ 0x80
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f001 fa9a 	bl	800d87e <USBH_AllocPipe>
 800c34a:	4603      	mov	r3, r0
 800c34c:	461a      	mov	r2, r3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	7919      	ldrb	r1, [r3, #4]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c366:	9202      	str	r2, [sp, #8]
 800c368:	2200      	movs	r2, #0
 800c36a:	9201      	str	r2, [sp, #4]
 800c36c:	9300      	str	r3, [sp, #0]
 800c36e:	4603      	mov	r3, r0
 800c370:	2280      	movs	r2, #128	@ 0x80
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f001 fa54 	bl	800d820 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	7959      	ldrb	r1, [r3, #5]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c38c:	9202      	str	r2, [sp, #8]
 800c38e:	2200      	movs	r2, #0
 800c390:	9201      	str	r2, [sp, #4]
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	4603      	mov	r3, r0
 800c396:	2200      	movs	r2, #0
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f001 fa41 	bl	800d820 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800c39e:	e113      	b.n	800c5c8 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 f917 	bl	800c5d4 <USBH_HandleEnum>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c3aa:	7bbb      	ldrb	r3, [r7, #14]
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f040 80fd 	bne.w	800c5ae <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d103      	bne.n	800c3ce <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2208      	movs	r2, #8
 800c3ca:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800c3cc:	e0ef      	b.n	800c5ae <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2207      	movs	r2, #7
 800c3d2:	701a      	strb	r2, [r3, #0]
      break;
 800c3d4:	e0eb      	b.n	800c5ae <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f000 80e8 	beq.w	800c5b2 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c3e8:	2101      	movs	r1, #1
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2208      	movs	r2, #8
 800c3f2:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800c3f4:	e0dd      	b.n	800c5b2 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 fc3f 	bl	800cc82 <USBH_SetCfg>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	f040 80d5 	bne.w	800c5b6 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2209      	movs	r2, #9
 800c410:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800c412:	e0d0      	b.n	800c5b6 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800c41a:	f003 0320 	and.w	r3, r3, #32
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d016      	beq.n	800c450 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c422:	2101      	movs	r1, #1
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 fc4f 	bl	800ccc8 <USBH_SetFeature>
 800c42a:	4603      	mov	r3, r0
 800c42c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c42e:	7bbb      	ldrb	r3, [r7, #14]
 800c430:	b2db      	uxtb	r3, r3
 800c432:	2b00      	cmp	r3, #0
 800c434:	d103      	bne.n	800c43e <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	220a      	movs	r2, #10
 800c43a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800c43c:	e0bd      	b.n	800c5ba <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 800c43e:	7bbb      	ldrb	r3, [r7, #14]
 800c440:	b2db      	uxtb	r3, r3
 800c442:	2b03      	cmp	r3, #3
 800c444:	f040 80b9 	bne.w	800c5ba <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	220a      	movs	r2, #10
 800c44c:	701a      	strb	r2, [r3, #0]
      break;
 800c44e:	e0b4      	b.n	800c5ba <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	220a      	movs	r2, #10
 800c454:	701a      	strb	r2, [r3, #0]
      break;
 800c456:	e0b0      	b.n	800c5ba <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f000 80ad 	beq.w	800c5be <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c46c:	2300      	movs	r3, #0
 800c46e:	73fb      	strb	r3, [r7, #15]
 800c470:	e016      	b.n	800c4a0 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c472:	7bfa      	ldrb	r2, [r7, #15]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	32de      	adds	r2, #222	@ 0xde
 800c478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c47c:	791a      	ldrb	r2, [r3, #4]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800c484:	429a      	cmp	r2, r3
 800c486:	d108      	bne.n	800c49a <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c488:	7bfa      	ldrb	r2, [r7, #15]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	32de      	adds	r2, #222	@ 0xde
 800c48e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800c498:	e005      	b.n	800c4a6 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c49a:	7bfb      	ldrb	r3, [r7, #15]
 800c49c:	3301      	adds	r3, #1
 800c49e:	73fb      	strb	r3, [r7, #15]
 800c4a0:	7bfb      	ldrb	r3, [r7, #15]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d0e5      	beq.n	800c472 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d016      	beq.n	800c4de <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	4798      	blx	r3
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d109      	bne.n	800c4d6 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2206      	movs	r2, #6
 800c4c6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c4ce:	2103      	movs	r1, #3
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800c4d4:	e073      	b.n	800c5be <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	220d      	movs	r2, #13
 800c4da:	701a      	strb	r2, [r3, #0]
      break;
 800c4dc:	e06f      	b.n	800c5be <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	220d      	movs	r2, #13
 800c4e2:	701a      	strb	r2, [r3, #0]
      break;
 800c4e4:	e06b      	b.n	800c5be <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d017      	beq.n	800c520 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4f6:	691b      	ldr	r3, [r3, #16]
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	4798      	blx	r3
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c500:	7bbb      	ldrb	r3, [r7, #14]
 800c502:	b2db      	uxtb	r3, r3
 800c504:	2b00      	cmp	r3, #0
 800c506:	d103      	bne.n	800c510 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	220b      	movs	r2, #11
 800c50c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800c50e:	e058      	b.n	800c5c2 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 800c510:	7bbb      	ldrb	r3, [r7, #14]
 800c512:	b2db      	uxtb	r3, r3
 800c514:	2b02      	cmp	r3, #2
 800c516:	d154      	bne.n	800c5c2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	220d      	movs	r2, #13
 800c51c:	701a      	strb	r2, [r3, #0]
      break;
 800c51e:	e050      	b.n	800c5c2 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	220d      	movs	r2, #13
 800c524:	701a      	strb	r2, [r3, #0]
      break;
 800c526:	e04c      	b.n	800c5c2 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d049      	beq.n	800c5c6 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c538:	695b      	ldr	r3, [r3, #20]
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	4798      	blx	r3
      }
      break;
 800c53e:	e042      	b.n	800c5c6 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f7ff fd4c 	bl	800bfe6 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c554:	2b00      	cmp	r3, #0
 800c556:	d009      	beq.n	800c56c <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c572:	2b00      	cmp	r3, #0
 800c574:	d005      	beq.n	800c582 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c57c:	2105      	movs	r1, #5
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d107      	bne.n	800c59e <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7ff fe22 	bl	800c1e0 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800c59c:	e014      	b.n	800c5c8 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f006 fc70 	bl	8012e84 <USBH_LL_Start>
      break;
 800c5a4:	e010      	b.n	800c5c8 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800c5a6:	bf00      	nop
 800c5a8:	e00e      	b.n	800c5c8 <USBH_Process+0x3c8>
      break;
 800c5aa:	bf00      	nop
 800c5ac:	e00c      	b.n	800c5c8 <USBH_Process+0x3c8>
      break;
 800c5ae:	bf00      	nop
 800c5b0:	e00a      	b.n	800c5c8 <USBH_Process+0x3c8>
    break;
 800c5b2:	bf00      	nop
 800c5b4:	e008      	b.n	800c5c8 <USBH_Process+0x3c8>
      break;
 800c5b6:	bf00      	nop
 800c5b8:	e006      	b.n	800c5c8 <USBH_Process+0x3c8>
      break;
 800c5ba:	bf00      	nop
 800c5bc:	e004      	b.n	800c5c8 <USBH_Process+0x3c8>
      break;
 800c5be:	bf00      	nop
 800c5c0:	e002      	b.n	800c5c8 <USBH_Process+0x3c8>
      break;
 800c5c2:	bf00      	nop
 800c5c4:	e000      	b.n	800c5c8 <USBH_Process+0x3c8>
      break;
 800c5c6:	bf00      	nop
  }
  return USBH_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop

0800c5d4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b088      	sub	sp, #32
 800c5d8:	af04      	add	r7, sp, #16
 800c5da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	785b      	ldrb	r3, [r3, #1]
 800c5e8:	2b07      	cmp	r3, #7
 800c5ea:	f200 81bd 	bhi.w	800c968 <USBH_HandleEnum+0x394>
 800c5ee:	a201      	add	r2, pc, #4	@ (adr r2, 800c5f4 <USBH_HandleEnum+0x20>)
 800c5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f4:	0800c615 	.word	0x0800c615
 800c5f8:	0800c6cf 	.word	0x0800c6cf
 800c5fc:	0800c739 	.word	0x0800c739
 800c600:	0800c7c3 	.word	0x0800c7c3
 800c604:	0800c82d 	.word	0x0800c82d
 800c608:	0800c89d 	.word	0x0800c89d
 800c60c:	0800c8e3 	.word	0x0800c8e3
 800c610:	0800c929 	.word	0x0800c929
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c614:	2108      	movs	r1, #8
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fa50 	bl	800cabc <USBH_Get_DevDesc>
 800c61c:	4603      	mov	r3, r0
 800c61e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c620:	7bbb      	ldrb	r3, [r7, #14]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d12e      	bne.n	800c684 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	7919      	ldrb	r1, [r3, #4]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c64a:	9202      	str	r2, [sp, #8]
 800c64c:	2200      	movs	r2, #0
 800c64e:	9201      	str	r2, [sp, #4]
 800c650:	9300      	str	r3, [sp, #0]
 800c652:	4603      	mov	r3, r0
 800c654:	2280      	movs	r2, #128	@ 0x80
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f001 f8e2 	bl	800d820 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	7959      	ldrb	r1, [r3, #5]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c670:	9202      	str	r2, [sp, #8]
 800c672:	2200      	movs	r2, #0
 800c674:	9201      	str	r2, [sp, #4]
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	4603      	mov	r3, r0
 800c67a:	2200      	movs	r2, #0
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f001 f8cf 	bl	800d820 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c682:	e173      	b.n	800c96c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c684:	7bbb      	ldrb	r3, [r7, #14]
 800c686:	2b03      	cmp	r3, #3
 800c688:	f040 8170 	bne.w	800c96c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c692:	3301      	adds	r3, #1
 800c694:	b2da      	uxtb	r2, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c6a2:	2b03      	cmp	r3, #3
 800c6a4:	d903      	bls.n	800c6ae <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	220d      	movs	r2, #13
 800c6aa:	701a      	strb	r2, [r3, #0]
      break;
 800c6ac:	e15e      	b.n	800c96c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	795b      	ldrb	r3, [r3, #5]
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f001 f903 	bl	800d8c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	791b      	ldrb	r3, [r3, #4]
 800c6be:	4619      	mov	r1, r3
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f001 f8fd 	bl	800d8c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	701a      	strb	r2, [r3, #0]
      break;
 800c6cc:	e14e      	b.n	800c96c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c6ce:	2112      	movs	r1, #18
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 f9f3 	bl	800cabc <USBH_Get_DevDesc>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c6da:	7bbb      	ldrb	r3, [r7, #14]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d103      	bne.n	800c6e8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2202      	movs	r2, #2
 800c6e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c6e6:	e143      	b.n	800c970 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c6e8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ea:	2b03      	cmp	r3, #3
 800c6ec:	f040 8140 	bne.w	800c970 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	b2da      	uxtb	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c706:	2b03      	cmp	r3, #3
 800c708:	d903      	bls.n	800c712 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	220d      	movs	r2, #13
 800c70e:	701a      	strb	r2, [r3, #0]
      break;
 800c710:	e12e      	b.n	800c970 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	795b      	ldrb	r3, [r3, #5]
 800c716:	4619      	mov	r1, r3
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f001 f8d1 	bl	800d8c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	791b      	ldrb	r3, [r3, #4]
 800c722:	4619      	mov	r1, r3
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f001 f8cb 	bl	800d8c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2200      	movs	r2, #0
 800c72e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	701a      	strb	r2, [r3, #0]
      break;
 800c736:	e11b      	b.n	800c970 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c738:	2101      	movs	r1, #1
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 fa7d 	bl	800cc3a <USBH_SetAddress>
 800c740:	4603      	mov	r3, r0
 800c742:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c744:	7bbb      	ldrb	r3, [r7, #14]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d130      	bne.n	800c7ac <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800c74a:	2002      	movs	r0, #2
 800c74c:	f006 fd22 	bl	8013194 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2201      	movs	r2, #1
 800c754:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2203      	movs	r2, #3
 800c75c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	7919      	ldrb	r1, [r3, #4]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c772:	9202      	str	r2, [sp, #8]
 800c774:	2200      	movs	r2, #0
 800c776:	9201      	str	r2, [sp, #4]
 800c778:	9300      	str	r3, [sp, #0]
 800c77a:	4603      	mov	r3, r0
 800c77c:	2280      	movs	r2, #128	@ 0x80
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f001 f84e 	bl	800d820 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	7959      	ldrb	r1, [r3, #5]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c798:	9202      	str	r2, [sp, #8]
 800c79a:	2200      	movs	r2, #0
 800c79c:	9201      	str	r2, [sp, #4]
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f001 f83b 	bl	800d820 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c7aa:	e0e3      	b.n	800c974 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c7ac:	7bbb      	ldrb	r3, [r7, #14]
 800c7ae:	2b03      	cmp	r3, #3
 800c7b0:	f040 80e0 	bne.w	800c974 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	220d      	movs	r2, #13
 800c7b8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	705a      	strb	r2, [r3, #1]
      break;
 800c7c0:	e0d8      	b.n	800c974 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c7c2:	2109      	movs	r1, #9
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 f9a5 	bl	800cb14 <USBH_Get_CfgDesc>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c7ce:	7bbb      	ldrb	r3, [r7, #14]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d103      	bne.n	800c7dc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2204      	movs	r2, #4
 800c7d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c7da:	e0cd      	b.n	800c978 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c7dc:	7bbb      	ldrb	r3, [r7, #14]
 800c7de:	2b03      	cmp	r3, #3
 800c7e0:	f040 80ca 	bne.w	800c978 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	b2da      	uxtb	r2, r3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c7fa:	2b03      	cmp	r3, #3
 800c7fc:	d903      	bls.n	800c806 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	220d      	movs	r2, #13
 800c802:	701a      	strb	r2, [r3, #0]
      break;
 800c804:	e0b8      	b.n	800c978 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	795b      	ldrb	r3, [r3, #5]
 800c80a:	4619      	mov	r1, r3
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f001 f857 	bl	800d8c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	791b      	ldrb	r3, [r3, #4]
 800c816:	4619      	mov	r1, r3
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f001 f851 	bl	800d8c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2200      	movs	r2, #0
 800c822:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2200      	movs	r2, #0
 800c828:	701a      	strb	r2, [r3, #0]
      break;
 800c82a:	e0a5      	b.n	800c978 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800c832:	4619      	mov	r1, r3
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 f96d 	bl	800cb14 <USBH_Get_CfgDesc>
 800c83a:	4603      	mov	r3, r0
 800c83c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c83e:	7bbb      	ldrb	r3, [r7, #14]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d103      	bne.n	800c84c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2205      	movs	r2, #5
 800c848:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c84a:	e097      	b.n	800c97c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c84c:	7bbb      	ldrb	r3, [r7, #14]
 800c84e:	2b03      	cmp	r3, #3
 800c850:	f040 8094 	bne.w	800c97c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c85a:	3301      	adds	r3, #1
 800c85c:	b2da      	uxtb	r2, r3
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c86a:	2b03      	cmp	r3, #3
 800c86c:	d903      	bls.n	800c876 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	220d      	movs	r2, #13
 800c872:	701a      	strb	r2, [r3, #0]
      break;
 800c874:	e082      	b.n	800c97c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	795b      	ldrb	r3, [r3, #5]
 800c87a:	4619      	mov	r1, r3
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f001 f81f 	bl	800d8c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	791b      	ldrb	r3, [r3, #4]
 800c886:	4619      	mov	r1, r3
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f001 f819 	bl	800d8c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	701a      	strb	r2, [r3, #0]
      break;
 800c89a:	e06f      	b.n	800c97c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d019      	beq.n	800c8da <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c8b2:	23ff      	movs	r3, #255	@ 0xff
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 f957 	bl	800cb68 <USBH_Get_StringDesc>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c8be:	7bbb      	ldrb	r3, [r7, #14]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d103      	bne.n	800c8cc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2206      	movs	r2, #6
 800c8c8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800c8ca:	e059      	b.n	800c980 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c8cc:	7bbb      	ldrb	r3, [r7, #14]
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d156      	bne.n	800c980 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2206      	movs	r2, #6
 800c8d6:	705a      	strb	r2, [r3, #1]
      break;
 800c8d8:	e052      	b.n	800c980 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2206      	movs	r2, #6
 800c8de:	705a      	strb	r2, [r3, #1]
      break;
 800c8e0:	e04e      	b.n	800c980 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d019      	beq.n	800c920 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c8f8:	23ff      	movs	r3, #255	@ 0xff
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 f934 	bl	800cb68 <USBH_Get_StringDesc>
 800c900:	4603      	mov	r3, r0
 800c902:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c904:	7bbb      	ldrb	r3, [r7, #14]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d103      	bne.n	800c912 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2207      	movs	r2, #7
 800c90e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800c910:	e038      	b.n	800c984 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c912:	7bbb      	ldrb	r3, [r7, #14]
 800c914:	2b03      	cmp	r3, #3
 800c916:	d135      	bne.n	800c984 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2207      	movs	r2, #7
 800c91c:	705a      	strb	r2, [r3, #1]
      break;
 800c91e:	e031      	b.n	800c984 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2207      	movs	r2, #7
 800c924:	705a      	strb	r2, [r3, #1]
      break;
 800c926:	e02d      	b.n	800c984 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d017      	beq.n	800c962 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c93e:	23ff      	movs	r3, #255	@ 0xff
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 f911 	bl	800cb68 <USBH_Get_StringDesc>
 800c946:	4603      	mov	r3, r0
 800c948:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c94a:	7bbb      	ldrb	r3, [r7, #14]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d102      	bne.n	800c956 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c950:	2300      	movs	r3, #0
 800c952:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c954:	e018      	b.n	800c988 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c956:	7bbb      	ldrb	r3, [r7, #14]
 800c958:	2b03      	cmp	r3, #3
 800c95a:	d115      	bne.n	800c988 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800c95c:	2300      	movs	r3, #0
 800c95e:	73fb      	strb	r3, [r7, #15]
      break;
 800c960:	e012      	b.n	800c988 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800c962:	2300      	movs	r3, #0
 800c964:	73fb      	strb	r3, [r7, #15]
      break;
 800c966:	e00f      	b.n	800c988 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800c968:	bf00      	nop
 800c96a:	e00e      	b.n	800c98a <USBH_HandleEnum+0x3b6>
      break;
 800c96c:	bf00      	nop
 800c96e:	e00c      	b.n	800c98a <USBH_HandleEnum+0x3b6>
      break;
 800c970:	bf00      	nop
 800c972:	e00a      	b.n	800c98a <USBH_HandleEnum+0x3b6>
      break;
 800c974:	bf00      	nop
 800c976:	e008      	b.n	800c98a <USBH_HandleEnum+0x3b6>
      break;
 800c978:	bf00      	nop
 800c97a:	e006      	b.n	800c98a <USBH_HandleEnum+0x3b6>
      break;
 800c97c:	bf00      	nop
 800c97e:	e004      	b.n	800c98a <USBH_HandleEnum+0x3b6>
      break;
 800c980:	bf00      	nop
 800c982:	e002      	b.n	800c98a <USBH_HandleEnum+0x3b6>
      break;
 800c984:	bf00      	nop
 800c986:	e000      	b.n	800c98a <USBH_HandleEnum+0x3b6>
      break;
 800c988:	bf00      	nop
  }
  return Status;
 800c98a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3710      	adds	r7, #16
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	683a      	ldr	r2, [r7, #0]
 800c9a2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800c9a6:	bf00      	nop
 800c9a8:	370c      	adds	r7, #12
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b082      	sub	sp, #8
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c9c0:	1c5a      	adds	r2, r3, #1
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 f804 	bl	800c9d6 <USBH_HandleSof>
}
 800c9ce:	bf00      	nop
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b082      	sub	sp, #8
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	2b0b      	cmp	r3, #11
 800c9e6:	d10a      	bne.n	800c9fe <USBH_HandleSof+0x28>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d005      	beq.n	800c9fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c9f8:	699b      	ldr	r3, [r3, #24]
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	4798      	blx	r3
  }
}
 800c9fe:	bf00      	nop
 800ca00:	3708      	adds	r7, #8
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ca06:	b480      	push	{r7}
 800ca08:	b083      	sub	sp, #12
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2201      	movs	r2, #1
 800ca12:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800ca16:	bf00      	nop
}
 800ca18:	370c      	adds	r7, #12
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr

0800ca22 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ca22:	b480      	push	{r7}
 800ca24:	b083      	sub	sp, #12
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2201      	movs	r2, #1
 800ca36:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800ca3a:	bf00      	nop
}
 800ca3c:	370c      	adds	r7, #12
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr

0800ca46 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ca46:	b480      	push	{r7}
 800ca48:	b083      	sub	sp, #12
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2201      	movs	r2, #1
 800ca52:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2200      	movs	r2, #0
 800ca62:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ca66:	2300      	movs	r3, #0
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2200      	movs	r2, #0
 800ca88:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f006 fa10 	bl	8012eba <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	791b      	ldrb	r3, [r3, #4]
 800ca9e:	4619      	mov	r1, r3
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 ff0d 	bl	800d8c0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	795b      	ldrb	r3, [r3, #5]
 800caaa:	4619      	mov	r1, r3
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 ff07 	bl	800d8c0 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3708      	adds	r7, #8
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b086      	sub	sp, #24
 800cac0:	af02      	add	r7, sp, #8
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	460b      	mov	r3, r1
 800cac6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800cac8:	887b      	ldrh	r3, [r7, #2]
 800caca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cace:	d901      	bls.n	800cad4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800cad0:	2303      	movs	r3, #3
 800cad2:	e01b      	b.n	800cb0c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800cada:	887b      	ldrh	r3, [r7, #2]
 800cadc:	9300      	str	r3, [sp, #0]
 800cade:	4613      	mov	r3, r2
 800cae0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cae4:	2100      	movs	r1, #0
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 f872 	bl	800cbd0 <USBH_GetDescriptor>
 800caec:	4603      	mov	r3, r0
 800caee:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800caf0:	7bfb      	ldrb	r3, [r7, #15]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d109      	bne.n	800cb0a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cafc:	887a      	ldrh	r2, [r7, #2]
 800cafe:	4619      	mov	r1, r3
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 f929 	bl	800cd58 <USBH_ParseDevDesc>
 800cb06:	4603      	mov	r3, r0
 800cb08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cb0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3710      	adds	r7, #16
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b086      	sub	sp, #24
 800cb18:	af02      	add	r7, sp, #8
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	331c      	adds	r3, #28
 800cb24:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800cb26:	887b      	ldrh	r3, [r7, #2]
 800cb28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb2c:	d901      	bls.n	800cb32 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800cb2e:	2303      	movs	r3, #3
 800cb30:	e016      	b.n	800cb60 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800cb32:	887b      	ldrh	r3, [r7, #2]
 800cb34:	9300      	str	r3, [sp, #0]
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f846 	bl	800cbd0 <USBH_GetDescriptor>
 800cb44:	4603      	mov	r3, r0
 800cb46:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800cb48:	7bfb      	ldrb	r3, [r7, #15]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d107      	bne.n	800cb5e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800cb4e:	887b      	ldrh	r3, [r7, #2]
 800cb50:	461a      	mov	r2, r3
 800cb52:	68b9      	ldr	r1, [r7, #8]
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 f9af 	bl	800ceb8 <USBH_ParseCfgDesc>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cb5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b088      	sub	sp, #32
 800cb6c:	af02      	add	r7, sp, #8
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	607a      	str	r2, [r7, #4]
 800cb72:	461a      	mov	r2, r3
 800cb74:	460b      	mov	r3, r1
 800cb76:	72fb      	strb	r3, [r7, #11]
 800cb78:	4613      	mov	r3, r2
 800cb7a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800cb7c:	893b      	ldrh	r3, [r7, #8]
 800cb7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb82:	d802      	bhi.n	800cb8a <USBH_Get_StringDesc+0x22>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d101      	bne.n	800cb8e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800cb8a:	2303      	movs	r3, #3
 800cb8c:	e01c      	b.n	800cbc8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800cb8e:	7afb      	ldrb	r3, [r7, #11]
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800cb96:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800cb9e:	893b      	ldrh	r3, [r7, #8]
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	460b      	mov	r3, r1
 800cba4:	2100      	movs	r1, #0
 800cba6:	68f8      	ldr	r0, [r7, #12]
 800cba8:	f000 f812 	bl	800cbd0 <USBH_GetDescriptor>
 800cbac:	4603      	mov	r3, r0
 800cbae:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800cbb0:	7dfb      	ldrb	r3, [r7, #23]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d107      	bne.n	800cbc6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cbbc:	893a      	ldrh	r2, [r7, #8]
 800cbbe:	6879      	ldr	r1, [r7, #4]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 fb8c 	bl	800d2de <USBH_ParseStringDesc>
  }

  return status;
 800cbc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3718      	adds	r7, #24
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	607b      	str	r3, [r7, #4]
 800cbda:	460b      	mov	r3, r1
 800cbdc:	72fb      	strb	r3, [r7, #11]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	789b      	ldrb	r3, [r3, #2]
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d11c      	bne.n	800cc24 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800cbea:	7afb      	ldrb	r3, [r7, #11]
 800cbec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cbf0:	b2da      	uxtb	r2, r3
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2206      	movs	r2, #6
 800cbfa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	893a      	ldrh	r2, [r7, #8]
 800cc00:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cc02:	893b      	ldrh	r3, [r7, #8]
 800cc04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cc08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc0c:	d104      	bne.n	800cc18 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f240 4209 	movw	r2, #1033	@ 0x409
 800cc14:	829a      	strh	r2, [r3, #20]
 800cc16:	e002      	b.n	800cc1e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	8b3a      	ldrh	r2, [r7, #24]
 800cc22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cc24:	8b3b      	ldrh	r3, [r7, #24]
 800cc26:	461a      	mov	r2, r3
 800cc28:	6879      	ldr	r1, [r7, #4]
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f000 fba4 	bl	800d378 <USBH_CtlReq>
 800cc30:	4603      	mov	r3, r0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}

0800cc3a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cc3a:	b580      	push	{r7, lr}
 800cc3c:	b082      	sub	sp, #8
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
 800cc42:	460b      	mov	r3, r1
 800cc44:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	789b      	ldrb	r3, [r3, #2]
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d10f      	bne.n	800cc6e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2200      	movs	r2, #0
 800cc52:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2205      	movs	r2, #5
 800cc58:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cc5a:	78fb      	ldrb	r3, [r7, #3]
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cc6e:	2200      	movs	r2, #0
 800cc70:	2100      	movs	r1, #0
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f000 fb80 	bl	800d378 <USBH_CtlReq>
 800cc78:	4603      	mov	r3, r0
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3708      	adds	r7, #8
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b082      	sub	sp, #8
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	789b      	ldrb	r3, [r3, #2]
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d10e      	bne.n	800ccb4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2209      	movs	r2, #9
 800cca0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	887a      	ldrh	r2, [r7, #2]
 800cca6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 fb5d 	bl	800d378 <USBH_CtlReq>
 800ccbe:	4603      	mov	r3, r0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	789b      	ldrb	r3, [r3, #2]
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d10f      	bne.n	800ccfc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2200      	movs	r2, #0
 800cce0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2203      	movs	r2, #3
 800cce6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800cce8:	78fb      	ldrb	r3, [r7, #3]
 800ccea:	b29a      	uxth	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	2100      	movs	r1, #0
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 fb39 	bl	800d378 <USBH_CtlReq>
 800cd06:	4603      	mov	r3, r0
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	460b      	mov	r3, r1
 800cd1a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	789b      	ldrb	r3, [r3, #2]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d10f      	bne.n	800cd44 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2202      	movs	r2, #2
 800cd28:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800cd36:	78fb      	ldrb	r3, [r7, #3]
 800cd38:	b29a      	uxth	r2, r3
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cd44:	2200      	movs	r2, #0
 800cd46:	2100      	movs	r1, #0
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 fb15 	bl	800d378 <USBH_CtlReq>
 800cd4e:	4603      	mov	r3, r0
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3708      	adds	r7, #8
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b087      	sub	sp, #28
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	4613      	mov	r3, r2
 800cd64:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800cd6c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d101      	bne.n	800cd7c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800cd78:	2302      	movs	r3, #2
 800cd7a:	e094      	b.n	800cea6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	781a      	ldrb	r2, [r3, #0]
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	785a      	ldrb	r2, [r3, #1]
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	3302      	adds	r3, #2
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	461a      	mov	r2, r3
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	3303      	adds	r3, #3
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	021b      	lsls	r3, r3, #8
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	b29a      	uxth	r2, r3
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	791a      	ldrb	r2, [r3, #4]
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	795a      	ldrb	r2, [r3, #5]
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	799a      	ldrb	r2, [r3, #6]
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	79da      	ldrb	r2, [r3, #7]
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d004      	beq.n	800cdda <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d11b      	bne.n	800ce12 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	79db      	ldrb	r3, [r3, #7]
 800cdde:	2b20      	cmp	r3, #32
 800cde0:	dc0f      	bgt.n	800ce02 <USBH_ParseDevDesc+0xaa>
 800cde2:	2b08      	cmp	r3, #8
 800cde4:	db0f      	blt.n	800ce06 <USBH_ParseDevDesc+0xae>
 800cde6:	3b08      	subs	r3, #8
 800cde8:	4a32      	ldr	r2, [pc, #200]	@ (800ceb4 <USBH_ParseDevDesc+0x15c>)
 800cdea:	fa22 f303 	lsr.w	r3, r2, r3
 800cdee:	f003 0301 	and.w	r3, r3, #1
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	bf14      	ite	ne
 800cdf6:	2301      	movne	r3, #1
 800cdf8:	2300      	moveq	r3, #0
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d106      	bne.n	800ce0e <USBH_ParseDevDesc+0xb6>
 800ce00:	e001      	b.n	800ce06 <USBH_ParseDevDesc+0xae>
 800ce02:	2b40      	cmp	r3, #64	@ 0x40
 800ce04:	d003      	beq.n	800ce0e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	2208      	movs	r2, #8
 800ce0a:	71da      	strb	r2, [r3, #7]
        break;
 800ce0c:	e000      	b.n	800ce10 <USBH_ParseDevDesc+0xb8>
        break;
 800ce0e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800ce10:	e00e      	b.n	800ce30 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ce18:	2b02      	cmp	r3, #2
 800ce1a:	d107      	bne.n	800ce2c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	79db      	ldrb	r3, [r3, #7]
 800ce20:	2b08      	cmp	r3, #8
 800ce22:	d005      	beq.n	800ce30 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	2208      	movs	r2, #8
 800ce28:	71da      	strb	r2, [r3, #7]
 800ce2a:	e001      	b.n	800ce30 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ce2c:	2303      	movs	r3, #3
 800ce2e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800ce30:	88fb      	ldrh	r3, [r7, #6]
 800ce32:	2b08      	cmp	r3, #8
 800ce34:	d936      	bls.n	800cea4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	3308      	adds	r3, #8
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	3309      	adds	r3, #9
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	021b      	lsls	r3, r3, #8
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	b29a      	uxth	r2, r3
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	330a      	adds	r3, #10
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	461a      	mov	r2, r3
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	330b      	adds	r3, #11
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	021b      	lsls	r3, r3, #8
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	4313      	orrs	r3, r2
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	330c      	adds	r3, #12
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	461a      	mov	r2, r3
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	330d      	adds	r3, #13
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	021b      	lsls	r3, r3, #8
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	b29a      	uxth	r2, r3
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	7b9a      	ldrb	r2, [r3, #14]
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	7bda      	ldrb	r2, [r3, #15]
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	7c1a      	ldrb	r2, [r3, #16]
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	7c5a      	ldrb	r2, [r3, #17]
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800cea4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	371c      	adds	r7, #28
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	01000101 	.word	0x01000101

0800ceb8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b08c      	sub	sp, #48	@ 0x30
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	4613      	mov	r3, r2
 800cec4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800cecc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800cece:	2300      	movs	r3, #0
 800ced0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ced4:	2300      	movs	r3, #0
 800ced6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800ceda:	2300      	movs	r3, #0
 800cedc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d101      	bne.n	800ceea <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800cee6:	2302      	movs	r3, #2
 800cee8:	e0de      	b.n	800d0a8 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800ceee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	2b09      	cmp	r3, #9
 800cef4:	d002      	beq.n	800cefc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800cef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef8:	2209      	movs	r2, #9
 800cefa:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	781a      	ldrb	r2, [r3, #0]
 800cf00:	6a3b      	ldr	r3, [r7, #32]
 800cf02:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	785a      	ldrb	r2, [r3, #1]
 800cf08:	6a3b      	ldr	r3, [r7, #32]
 800cf0a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	3302      	adds	r3, #2
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	461a      	mov	r2, r3
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	3303      	adds	r3, #3
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	021b      	lsls	r3, r3, #8
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf26:	bf28      	it	cs
 800cf28:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800cf2c:	b29a      	uxth	r2, r3
 800cf2e:	6a3b      	ldr	r3, [r7, #32]
 800cf30:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	791a      	ldrb	r2, [r3, #4]
 800cf36:	6a3b      	ldr	r3, [r7, #32]
 800cf38:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	795a      	ldrb	r2, [r3, #5]
 800cf3e:	6a3b      	ldr	r3, [r7, #32]
 800cf40:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	799a      	ldrb	r2, [r3, #6]
 800cf46:	6a3b      	ldr	r3, [r7, #32]
 800cf48:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	79da      	ldrb	r2, [r3, #7]
 800cf4e:	6a3b      	ldr	r3, [r7, #32]
 800cf50:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	7a1a      	ldrb	r2, [r3, #8]
 800cf56:	6a3b      	ldr	r3, [r7, #32]
 800cf58:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800cf5a:	88fb      	ldrh	r3, [r7, #6]
 800cf5c:	2b09      	cmp	r3, #9
 800cf5e:	f240 80a1 	bls.w	800d0a4 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800cf62:	2309      	movs	r3, #9
 800cf64:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800cf66:	2300      	movs	r3, #0
 800cf68:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cf6a:	e085      	b.n	800d078 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cf6c:	f107 0316 	add.w	r3, r7, #22
 800cf70:	4619      	mov	r1, r3
 800cf72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf74:	f000 f9e6 	bl	800d344 <USBH_GetNextDesc>
 800cf78:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800cf7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf7c:	785b      	ldrb	r3, [r3, #1]
 800cf7e:	2b04      	cmp	r3, #4
 800cf80:	d17a      	bne.n	800d078 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800cf82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	2b09      	cmp	r3, #9
 800cf88:	d002      	beq.n	800cf90 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800cf8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf8c:	2209      	movs	r2, #9
 800cf8e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800cf90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf94:	221a      	movs	r2, #26
 800cf96:	fb02 f303 	mul.w	r3, r2, r3
 800cf9a:	3308      	adds	r3, #8
 800cf9c:	6a3a      	ldr	r2, [r7, #32]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	3302      	adds	r3, #2
 800cfa2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800cfa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cfa6:	69f8      	ldr	r0, [r7, #28]
 800cfa8:	f000 f882 	bl	800d0b0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800cfac:	2300      	movs	r3, #0
 800cfae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cfb6:	e043      	b.n	800d040 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cfb8:	f107 0316 	add.w	r3, r7, #22
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfc0:	f000 f9c0 	bl	800d344 <USBH_GetNextDesc>
 800cfc4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cfc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfc8:	785b      	ldrb	r3, [r3, #1]
 800cfca:	2b05      	cmp	r3, #5
 800cfcc:	d138      	bne.n	800d040 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800cfce:	69fb      	ldr	r3, [r7, #28]
 800cfd0:	795b      	ldrb	r3, [r3, #5]
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d113      	bne.n	800cffe <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800cfda:	2b02      	cmp	r3, #2
 800cfdc:	d003      	beq.n	800cfe6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	799b      	ldrb	r3, [r3, #6]
 800cfe2:	2b03      	cmp	r3, #3
 800cfe4:	d10b      	bne.n	800cffe <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	79db      	ldrb	r3, [r3, #7]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d10b      	bne.n	800d006 <USBH_ParseCfgDesc+0x14e>
 800cfee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	2b09      	cmp	r3, #9
 800cff4:	d007      	beq.n	800d006 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800cff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cff8:	2209      	movs	r2, #9
 800cffa:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cffc:	e003      	b.n	800d006 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800cffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d000:	2207      	movs	r2, #7
 800d002:	701a      	strb	r2, [r3, #0]
 800d004:	e000      	b.n	800d008 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d006:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d00c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d010:	3201      	adds	r2, #1
 800d012:	00d2      	lsls	r2, r2, #3
 800d014:	211a      	movs	r1, #26
 800d016:	fb01 f303 	mul.w	r3, r1, r3
 800d01a:	4413      	add	r3, r2
 800d01c:	3308      	adds	r3, #8
 800d01e:	6a3a      	ldr	r2, [r7, #32]
 800d020:	4413      	add	r3, r2
 800d022:	3304      	adds	r3, #4
 800d024:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d026:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d028:	69b9      	ldr	r1, [r7, #24]
 800d02a:	68f8      	ldr	r0, [r7, #12]
 800d02c:	f000 f86f 	bl	800d10e <USBH_ParseEPDesc>
 800d030:	4603      	mov	r3, r0
 800d032:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800d036:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d03a:	3301      	adds	r3, #1
 800d03c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d040:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d044:	2b01      	cmp	r3, #1
 800d046:	d80a      	bhi.n	800d05e <USBH_ParseCfgDesc+0x1a6>
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	791b      	ldrb	r3, [r3, #4]
 800d04c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d050:	429a      	cmp	r2, r3
 800d052:	d204      	bcs.n	800d05e <USBH_ParseCfgDesc+0x1a6>
 800d054:	6a3b      	ldr	r3, [r7, #32]
 800d056:	885a      	ldrh	r2, [r3, #2]
 800d058:	8afb      	ldrh	r3, [r7, #22]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d8ac      	bhi.n	800cfb8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	791b      	ldrb	r3, [r3, #4]
 800d062:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d066:	429a      	cmp	r2, r3
 800d068:	d201      	bcs.n	800d06e <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800d06a:	2303      	movs	r3, #3
 800d06c:	e01c      	b.n	800d0a8 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800d06e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d072:	3301      	adds	r3, #1
 800d074:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d805      	bhi.n	800d08c <USBH_ParseCfgDesc+0x1d4>
 800d080:	6a3b      	ldr	r3, [r7, #32]
 800d082:	885a      	ldrh	r2, [r3, #2]
 800d084:	8afb      	ldrh	r3, [r7, #22]
 800d086:	429a      	cmp	r2, r3
 800d088:	f63f af70 	bhi.w	800cf6c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d08c:	6a3b      	ldr	r3, [r7, #32]
 800d08e:	791b      	ldrb	r3, [r3, #4]
 800d090:	2b02      	cmp	r3, #2
 800d092:	bf28      	it	cs
 800d094:	2302      	movcs	r3, #2
 800d096:	b2db      	uxtb	r3, r3
 800d098:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d201      	bcs.n	800d0a4 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800d0a0:	2303      	movs	r3, #3
 800d0a2:	e001      	b.n	800d0a8 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800d0a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3730      	adds	r7, #48	@ 0x30
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	781a      	ldrb	r2, [r3, #0]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	785a      	ldrb	r2, [r3, #1]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	789a      	ldrb	r2, [r3, #2]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	78da      	ldrb	r2, [r3, #3]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	791a      	ldrb	r2, [r3, #4]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	795a      	ldrb	r2, [r3, #5]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	799a      	ldrb	r2, [r3, #6]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	79da      	ldrb	r2, [r3, #7]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	7a1a      	ldrb	r2, [r3, #8]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	721a      	strb	r2, [r3, #8]
}
 800d102:	bf00      	nop
 800d104:	370c      	adds	r7, #12
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr

0800d10e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800d10e:	b480      	push	{r7}
 800d110:	b087      	sub	sp, #28
 800d112:	af00      	add	r7, sp, #0
 800d114:	60f8      	str	r0, [r7, #12]
 800d116:	60b9      	str	r1, [r7, #8]
 800d118:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d11a:	2300      	movs	r3, #0
 800d11c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	781a      	ldrb	r2, [r3, #0]
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	785a      	ldrb	r2, [r3, #1]
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	789a      	ldrb	r2, [r3, #2]
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	78da      	ldrb	r2, [r3, #3]
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	3304      	adds	r3, #4
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	461a      	mov	r2, r3
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	3305      	adds	r3, #5
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	021b      	lsls	r3, r3, #8
 800d14e:	b29b      	uxth	r3, r3
 800d150:	4313      	orrs	r3, r2
 800d152:	b29a      	uxth	r2, r3
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	799a      	ldrb	r2, [r3, #6]
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	889b      	ldrh	r3, [r3, #4]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d009      	beq.n	800d17c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d16c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d170:	d804      	bhi.n	800d17c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d176:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d17a:	d901      	bls.n	800d180 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800d17c:	2303      	movs	r3, #3
 800d17e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d186:	2b00      	cmp	r3, #0
 800d188:	d136      	bne.n	800d1f8 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	78db      	ldrb	r3, [r3, #3]
 800d18e:	f003 0303 	and.w	r3, r3, #3
 800d192:	2b02      	cmp	r3, #2
 800d194:	d108      	bne.n	800d1a8 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	889b      	ldrh	r3, [r3, #4]
 800d19a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d19e:	f240 8097 	bls.w	800d2d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d1a2:	2303      	movs	r3, #3
 800d1a4:	75fb      	strb	r3, [r7, #23]
 800d1a6:	e093      	b.n	800d2d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	78db      	ldrb	r3, [r3, #3]
 800d1ac:	f003 0303 	and.w	r3, r3, #3
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d107      	bne.n	800d1c4 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	889b      	ldrh	r3, [r3, #4]
 800d1b8:	2b40      	cmp	r3, #64	@ 0x40
 800d1ba:	f240 8089 	bls.w	800d2d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d1be:	2303      	movs	r3, #3
 800d1c0:	75fb      	strb	r3, [r7, #23]
 800d1c2:	e085      	b.n	800d2d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	78db      	ldrb	r3, [r3, #3]
 800d1c8:	f003 0303 	and.w	r3, r3, #3
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d005      	beq.n	800d1dc <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	78db      	ldrb	r3, [r3, #3]
 800d1d4:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d1d8:	2b03      	cmp	r3, #3
 800d1da:	d10a      	bne.n	800d1f2 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	799b      	ldrb	r3, [r3, #6]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d003      	beq.n	800d1ec <USBH_ParseEPDesc+0xde>
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	799b      	ldrb	r3, [r3, #6]
 800d1e8:	2b10      	cmp	r3, #16
 800d1ea:	d970      	bls.n	800d2ce <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800d1ec:	2303      	movs	r3, #3
 800d1ee:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d1f0:	e06d      	b.n	800d2ce <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	75fb      	strb	r3, [r7, #23]
 800d1f6:	e06b      	b.n	800d2d0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d13c      	bne.n	800d27c <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	78db      	ldrb	r3, [r3, #3]
 800d206:	f003 0303 	and.w	r3, r3, #3
 800d20a:	2b02      	cmp	r3, #2
 800d20c:	d005      	beq.n	800d21a <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	78db      	ldrb	r3, [r3, #3]
 800d212:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d216:	2b00      	cmp	r3, #0
 800d218:	d106      	bne.n	800d228 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	889b      	ldrh	r3, [r3, #4]
 800d21e:	2b40      	cmp	r3, #64	@ 0x40
 800d220:	d956      	bls.n	800d2d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d222:	2303      	movs	r3, #3
 800d224:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d226:	e053      	b.n	800d2d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	78db      	ldrb	r3, [r3, #3]
 800d22c:	f003 0303 	and.w	r3, r3, #3
 800d230:	2b01      	cmp	r3, #1
 800d232:	d10e      	bne.n	800d252 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	799b      	ldrb	r3, [r3, #6]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d007      	beq.n	800d24c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800d240:	2b10      	cmp	r3, #16
 800d242:	d803      	bhi.n	800d24c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800d248:	2b40      	cmp	r3, #64	@ 0x40
 800d24a:	d941      	bls.n	800d2d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d24c:	2303      	movs	r3, #3
 800d24e:	75fb      	strb	r3, [r7, #23]
 800d250:	e03e      	b.n	800d2d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	78db      	ldrb	r3, [r3, #3]
 800d256:	f003 0303 	and.w	r3, r3, #3
 800d25a:	2b03      	cmp	r3, #3
 800d25c:	d10b      	bne.n	800d276 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	799b      	ldrb	r3, [r3, #6]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d004      	beq.n	800d270 <USBH_ParseEPDesc+0x162>
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	889b      	ldrh	r3, [r3, #4]
 800d26a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d26e:	d32f      	bcc.n	800d2d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d270:	2303      	movs	r3, #3
 800d272:	75fb      	strb	r3, [r7, #23]
 800d274:	e02c      	b.n	800d2d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d276:	2303      	movs	r3, #3
 800d278:	75fb      	strb	r3, [r7, #23]
 800d27a:	e029      	b.n	800d2d0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d282:	2b02      	cmp	r3, #2
 800d284:	d120      	bne.n	800d2c8 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	78db      	ldrb	r3, [r3, #3]
 800d28a:	f003 0303 	and.w	r3, r3, #3
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d106      	bne.n	800d2a0 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	889b      	ldrh	r3, [r3, #4]
 800d296:	2b08      	cmp	r3, #8
 800d298:	d01a      	beq.n	800d2d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d29a:	2303      	movs	r3, #3
 800d29c:	75fb      	strb	r3, [r7, #23]
 800d29e:	e017      	b.n	800d2d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	78db      	ldrb	r3, [r3, #3]
 800d2a4:	f003 0303 	and.w	r3, r3, #3
 800d2a8:	2b03      	cmp	r3, #3
 800d2aa:	d10a      	bne.n	800d2c2 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	799b      	ldrb	r3, [r3, #6]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d003      	beq.n	800d2bc <USBH_ParseEPDesc+0x1ae>
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	889b      	ldrh	r3, [r3, #4]
 800d2b8:	2b08      	cmp	r3, #8
 800d2ba:	d909      	bls.n	800d2d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d2bc:	2303      	movs	r3, #3
 800d2be:	75fb      	strb	r3, [r7, #23]
 800d2c0:	e006      	b.n	800d2d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d2c2:	2303      	movs	r3, #3
 800d2c4:	75fb      	strb	r3, [r7, #23]
 800d2c6:	e003      	b.n	800d2d0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d2c8:	2303      	movs	r3, #3
 800d2ca:	75fb      	strb	r3, [r7, #23]
 800d2cc:	e000      	b.n	800d2d0 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d2ce:	bf00      	nop
  }

  return status;
 800d2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	371c      	adds	r7, #28
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr

0800d2de <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d2de:	b480      	push	{r7}
 800d2e0:	b087      	sub	sp, #28
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	60f8      	str	r0, [r7, #12]
 800d2e6:	60b9      	str	r1, [r7, #8]
 800d2e8:	4613      	mov	r3, r2
 800d2ea:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	2b03      	cmp	r3, #3
 800d2f4:	d120      	bne.n	800d338 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	1e9a      	subs	r2, r3, #2
 800d2fc:	88fb      	ldrh	r3, [r7, #6]
 800d2fe:	4293      	cmp	r3, r2
 800d300:	bf28      	it	cs
 800d302:	4613      	movcs	r3, r2
 800d304:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	3302      	adds	r3, #2
 800d30a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d30c:	2300      	movs	r3, #0
 800d30e:	82fb      	strh	r3, [r7, #22]
 800d310:	e00b      	b.n	800d32a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d312:	8afb      	ldrh	r3, [r7, #22]
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	4413      	add	r3, r2
 800d318:	781a      	ldrb	r2, [r3, #0]
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	3301      	adds	r3, #1
 800d322:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d324:	8afb      	ldrh	r3, [r7, #22]
 800d326:	3302      	adds	r3, #2
 800d328:	82fb      	strh	r3, [r7, #22]
 800d32a:	8afa      	ldrh	r2, [r7, #22]
 800d32c:	8abb      	ldrh	r3, [r7, #20]
 800d32e:	429a      	cmp	r2, r3
 800d330:	d3ef      	bcc.n	800d312 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	2200      	movs	r2, #0
 800d336:	701a      	strb	r2, [r3, #0]
  }
}
 800d338:	bf00      	nop
 800d33a:	371c      	adds	r7, #28
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	881b      	ldrh	r3, [r3, #0]
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	7812      	ldrb	r2, [r2, #0]
 800d356:	4413      	add	r3, r2
 800d358:	b29a      	uxth	r2, r3
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	4413      	add	r3, r2
 800d368:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d36a:	68fb      	ldr	r3, [r7, #12]
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3714      	adds	r7, #20
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr

0800d378 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b086      	sub	sp, #24
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	4613      	mov	r3, r2
 800d384:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d386:	2301      	movs	r3, #1
 800d388:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	789b      	ldrb	r3, [r3, #2]
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d002      	beq.n	800d398 <USBH_CtlReq+0x20>
 800d392:	2b02      	cmp	r3, #2
 800d394:	d00f      	beq.n	800d3b6 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800d396:	e027      	b.n	800d3e8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	68ba      	ldr	r2, [r7, #8]
 800d39c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	88fa      	ldrh	r2, [r7, #6]
 800d3a2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2202      	movs	r2, #2
 800d3ae:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	75fb      	strb	r3, [r7, #23]
      break;
 800d3b4:	e018      	b.n	800d3e8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d3b6:	68f8      	ldr	r0, [r7, #12]
 800d3b8:	f000 f81c 	bl	800d3f4 <USBH_HandleControl>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d3c0:	7dfb      	ldrb	r3, [r7, #23]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d002      	beq.n	800d3cc <USBH_CtlReq+0x54>
 800d3c6:	7dfb      	ldrb	r3, [r7, #23]
 800d3c8:	2b03      	cmp	r3, #3
 800d3ca:	d106      	bne.n	800d3da <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	761a      	strb	r2, [r3, #24]
      break;
 800d3d8:	e005      	b.n	800d3e6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d3da:	7dfb      	ldrb	r3, [r7, #23]
 800d3dc:	2b02      	cmp	r3, #2
 800d3de:	d102      	bne.n	800d3e6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	709a      	strb	r2, [r3, #2]
      break;
 800d3e6:	bf00      	nop
  }
  return status;
 800d3e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3718      	adds	r7, #24
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
	...

0800d3f4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b086      	sub	sp, #24
 800d3f8:	af02      	add	r7, sp, #8
 800d3fa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d400:	2300      	movs	r3, #0
 800d402:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	7e1b      	ldrb	r3, [r3, #24]
 800d408:	3b01      	subs	r3, #1
 800d40a:	2b0a      	cmp	r3, #10
 800d40c:	f200 8157 	bhi.w	800d6be <USBH_HandleControl+0x2ca>
 800d410:	a201      	add	r2, pc, #4	@ (adr r2, 800d418 <USBH_HandleControl+0x24>)
 800d412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d416:	bf00      	nop
 800d418:	0800d445 	.word	0x0800d445
 800d41c:	0800d45f 	.word	0x0800d45f
 800d420:	0800d4c9 	.word	0x0800d4c9
 800d424:	0800d4ef 	.word	0x0800d4ef
 800d428:	0800d529 	.word	0x0800d529
 800d42c:	0800d553 	.word	0x0800d553
 800d430:	0800d5a5 	.word	0x0800d5a5
 800d434:	0800d5c7 	.word	0x0800d5c7
 800d438:	0800d603 	.word	0x0800d603
 800d43c:	0800d629 	.word	0x0800d629
 800d440:	0800d667 	.word	0x0800d667
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f103 0110 	add.w	r1, r3, #16
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	795b      	ldrb	r3, [r3, #5]
 800d44e:	461a      	mov	r2, r3
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 f945 	bl	800d6e0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2202      	movs	r2, #2
 800d45a:	761a      	strb	r2, [r3, #24]
      break;
 800d45c:	e13a      	b.n	800d6d4 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	795b      	ldrb	r3, [r3, #5]
 800d462:	4619      	mov	r1, r3
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f005 fe05 	bl	8013074 <USBH_LL_GetURBState>
 800d46a:	4603      	mov	r3, r0
 800d46c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d46e:	7bbb      	ldrb	r3, [r7, #14]
 800d470:	2b01      	cmp	r3, #1
 800d472:	d11e      	bne.n	800d4b2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	7c1b      	ldrb	r3, [r3, #16]
 800d478:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d47c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	8adb      	ldrh	r3, [r3, #22]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d00a      	beq.n	800d49c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d486:	7b7b      	ldrb	r3, [r7, #13]
 800d488:	2b80      	cmp	r3, #128	@ 0x80
 800d48a:	d103      	bne.n	800d494 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2203      	movs	r2, #3
 800d490:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800d492:	e116      	b.n	800d6c2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2205      	movs	r2, #5
 800d498:	761a      	strb	r2, [r3, #24]
      break;
 800d49a:	e112      	b.n	800d6c2 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800d49c:	7b7b      	ldrb	r3, [r7, #13]
 800d49e:	2b80      	cmp	r3, #128	@ 0x80
 800d4a0:	d103      	bne.n	800d4aa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2209      	movs	r2, #9
 800d4a6:	761a      	strb	r2, [r3, #24]
      break;
 800d4a8:	e10b      	b.n	800d6c2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2207      	movs	r2, #7
 800d4ae:	761a      	strb	r2, [r3, #24]
      break;
 800d4b0:	e107      	b.n	800d6c2 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d4b2:	7bbb      	ldrb	r3, [r7, #14]
 800d4b4:	2b04      	cmp	r3, #4
 800d4b6:	d003      	beq.n	800d4c0 <USBH_HandleControl+0xcc>
 800d4b8:	7bbb      	ldrb	r3, [r7, #14]
 800d4ba:	2b02      	cmp	r3, #2
 800d4bc:	f040 8101 	bne.w	800d6c2 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	220b      	movs	r2, #11
 800d4c4:	761a      	strb	r2, [r3, #24]
      break;
 800d4c6:	e0fc      	b.n	800d6c2 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d4ce:	b29a      	uxth	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6899      	ldr	r1, [r3, #8]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	899a      	ldrh	r2, [r3, #12]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	791b      	ldrb	r3, [r3, #4]
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f000 f93c 	bl	800d75e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2204      	movs	r2, #4
 800d4ea:	761a      	strb	r2, [r3, #24]
      break;
 800d4ec:	e0f2      	b.n	800d6d4 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	791b      	ldrb	r3, [r3, #4]
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f005 fdbd 	bl	8013074 <USBH_LL_GetURBState>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d4fe:	7bbb      	ldrb	r3, [r7, #14]
 800d500:	2b01      	cmp	r3, #1
 800d502:	d103      	bne.n	800d50c <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2209      	movs	r2, #9
 800d508:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800d50a:	e0dc      	b.n	800d6c6 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800d50c:	7bbb      	ldrb	r3, [r7, #14]
 800d50e:	2b05      	cmp	r3, #5
 800d510:	d102      	bne.n	800d518 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800d512:	2303      	movs	r3, #3
 800d514:	73fb      	strb	r3, [r7, #15]
      break;
 800d516:	e0d6      	b.n	800d6c6 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800d518:	7bbb      	ldrb	r3, [r7, #14]
 800d51a:	2b04      	cmp	r3, #4
 800d51c:	f040 80d3 	bne.w	800d6c6 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	220b      	movs	r2, #11
 800d524:	761a      	strb	r2, [r3, #24]
      break;
 800d526:	e0ce      	b.n	800d6c6 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6899      	ldr	r1, [r3, #8]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	899a      	ldrh	r2, [r3, #12]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	795b      	ldrb	r3, [r3, #5]
 800d534:	2001      	movs	r0, #1
 800d536:	9000      	str	r0, [sp, #0]
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 f8eb 	bl	800d714 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d544:	b29a      	uxth	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2206      	movs	r2, #6
 800d54e:	761a      	strb	r2, [r3, #24]
      break;
 800d550:	e0c0      	b.n	800d6d4 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	795b      	ldrb	r3, [r3, #5]
 800d556:	4619      	mov	r1, r3
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f005 fd8b 	bl	8013074 <USBH_LL_GetURBState>
 800d55e:	4603      	mov	r3, r0
 800d560:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d562:	7bbb      	ldrb	r3, [r7, #14]
 800d564:	2b01      	cmp	r3, #1
 800d566:	d103      	bne.n	800d570 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2207      	movs	r2, #7
 800d56c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800d56e:	e0ac      	b.n	800d6ca <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800d570:	7bbb      	ldrb	r3, [r7, #14]
 800d572:	2b05      	cmp	r3, #5
 800d574:	d105      	bne.n	800d582 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	220c      	movs	r2, #12
 800d57a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d57c:	2303      	movs	r3, #3
 800d57e:	73fb      	strb	r3, [r7, #15]
      break;
 800d580:	e0a3      	b.n	800d6ca <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d582:	7bbb      	ldrb	r3, [r7, #14]
 800d584:	2b02      	cmp	r3, #2
 800d586:	d103      	bne.n	800d590 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2205      	movs	r2, #5
 800d58c:	761a      	strb	r2, [r3, #24]
      break;
 800d58e:	e09c      	b.n	800d6ca <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800d590:	7bbb      	ldrb	r3, [r7, #14]
 800d592:	2b04      	cmp	r3, #4
 800d594:	f040 8099 	bne.w	800d6ca <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	220b      	movs	r2, #11
 800d59c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d59e:	2302      	movs	r3, #2
 800d5a0:	73fb      	strb	r3, [r7, #15]
      break;
 800d5a2:	e092      	b.n	800d6ca <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	791b      	ldrb	r3, [r3, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	2100      	movs	r1, #0
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 f8d6 	bl	800d75e <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d5b8:	b29a      	uxth	r2, r3
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2208      	movs	r2, #8
 800d5c2:	761a      	strb	r2, [r3, #24]

      break;
 800d5c4:	e086      	b.n	800d6d4 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	791b      	ldrb	r3, [r3, #4]
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f005 fd51 	bl	8013074 <USBH_LL_GetURBState>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d5d6:	7bbb      	ldrb	r3, [r7, #14]
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d105      	bne.n	800d5e8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	220d      	movs	r2, #13
 800d5e0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800d5e6:	e072      	b.n	800d6ce <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800d5e8:	7bbb      	ldrb	r3, [r7, #14]
 800d5ea:	2b04      	cmp	r3, #4
 800d5ec:	d103      	bne.n	800d5f6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	220b      	movs	r2, #11
 800d5f2:	761a      	strb	r2, [r3, #24]
      break;
 800d5f4:	e06b      	b.n	800d6ce <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800d5f6:	7bbb      	ldrb	r3, [r7, #14]
 800d5f8:	2b05      	cmp	r3, #5
 800d5fa:	d168      	bne.n	800d6ce <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800d5fc:	2303      	movs	r3, #3
 800d5fe:	73fb      	strb	r3, [r7, #15]
      break;
 800d600:	e065      	b.n	800d6ce <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	795b      	ldrb	r3, [r3, #5]
 800d606:	2201      	movs	r2, #1
 800d608:	9200      	str	r2, [sp, #0]
 800d60a:	2200      	movs	r2, #0
 800d60c:	2100      	movs	r1, #0
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f000 f880 	bl	800d714 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d61a:	b29a      	uxth	r2, r3
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	220a      	movs	r2, #10
 800d624:	761a      	strb	r2, [r3, #24]
      break;
 800d626:	e055      	b.n	800d6d4 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	795b      	ldrb	r3, [r3, #5]
 800d62c:	4619      	mov	r1, r3
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f005 fd20 	bl	8013074 <USBH_LL_GetURBState>
 800d634:	4603      	mov	r3, r0
 800d636:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d638:	7bbb      	ldrb	r3, [r7, #14]
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d105      	bne.n	800d64a <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800d63e:	2300      	movs	r3, #0
 800d640:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	220d      	movs	r2, #13
 800d646:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800d648:	e043      	b.n	800d6d2 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d64a:	7bbb      	ldrb	r3, [r7, #14]
 800d64c:	2b02      	cmp	r3, #2
 800d64e:	d103      	bne.n	800d658 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2209      	movs	r2, #9
 800d654:	761a      	strb	r2, [r3, #24]
      break;
 800d656:	e03c      	b.n	800d6d2 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800d658:	7bbb      	ldrb	r3, [r7, #14]
 800d65a:	2b04      	cmp	r3, #4
 800d65c:	d139      	bne.n	800d6d2 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	220b      	movs	r2, #11
 800d662:	761a      	strb	r2, [r3, #24]
      break;
 800d664:	e035      	b.n	800d6d2 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	7e5b      	ldrb	r3, [r3, #25]
 800d66a:	3301      	adds	r3, #1
 800d66c:	b2da      	uxtb	r2, r3
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	765a      	strb	r2, [r3, #25]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	7e5b      	ldrb	r3, [r3, #25]
 800d676:	2b02      	cmp	r3, #2
 800d678:	d806      	bhi.n	800d688 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2201      	movs	r2, #1
 800d67e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2201      	movs	r2, #1
 800d684:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d686:	e025      	b.n	800d6d4 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d68e:	2106      	movs	r1, #6
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	795b      	ldrb	r3, [r3, #5]
 800d69e:	4619      	mov	r1, r3
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f000 f90d 	bl	800d8c0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	791b      	ldrb	r3, [r3, #4]
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 f907 	bl	800d8c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d6b8:	2302      	movs	r3, #2
 800d6ba:	73fb      	strb	r3, [r7, #15]
      break;
 800d6bc:	e00a      	b.n	800d6d4 <USBH_HandleControl+0x2e0>

    default:
      break;
 800d6be:	bf00      	nop
 800d6c0:	e008      	b.n	800d6d4 <USBH_HandleControl+0x2e0>
      break;
 800d6c2:	bf00      	nop
 800d6c4:	e006      	b.n	800d6d4 <USBH_HandleControl+0x2e0>
      break;
 800d6c6:	bf00      	nop
 800d6c8:	e004      	b.n	800d6d4 <USBH_HandleControl+0x2e0>
      break;
 800d6ca:	bf00      	nop
 800d6cc:	e002      	b.n	800d6d4 <USBH_HandleControl+0x2e0>
      break;
 800d6ce:	bf00      	nop
 800d6d0:	e000      	b.n	800d6d4 <USBH_HandleControl+0x2e0>
      break;
 800d6d2:	bf00      	nop
  }

  return status;
 800d6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3710      	adds	r7, #16
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop

0800d6e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b088      	sub	sp, #32
 800d6e4:	af04      	add	r7, sp, #16
 800d6e6:	60f8      	str	r0, [r7, #12]
 800d6e8:	60b9      	str	r1, [r7, #8]
 800d6ea:	4613      	mov	r3, r2
 800d6ec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d6ee:	79f9      	ldrb	r1, [r7, #7]
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	9303      	str	r3, [sp, #12]
 800d6f4:	2308      	movs	r3, #8
 800d6f6:	9302      	str	r3, [sp, #8]
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	9301      	str	r3, [sp, #4]
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	2300      	movs	r3, #0
 800d702:	2200      	movs	r2, #0
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f005 fc84 	bl	8013012 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d70a:	2300      	movs	r3, #0
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b088      	sub	sp, #32
 800d718:	af04      	add	r7, sp, #16
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	4611      	mov	r1, r2
 800d720:	461a      	mov	r2, r3
 800d722:	460b      	mov	r3, r1
 800d724:	80fb      	strh	r3, [r7, #6]
 800d726:	4613      	mov	r3, r2
 800d728:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d730:	2b00      	cmp	r3, #0
 800d732:	d001      	beq.n	800d738 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d734:	2300      	movs	r3, #0
 800d736:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d738:	7979      	ldrb	r1, [r7, #5]
 800d73a:	7e3b      	ldrb	r3, [r7, #24]
 800d73c:	9303      	str	r3, [sp, #12]
 800d73e:	88fb      	ldrh	r3, [r7, #6]
 800d740:	9302      	str	r3, [sp, #8]
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	9301      	str	r3, [sp, #4]
 800d746:	2301      	movs	r3, #1
 800d748:	9300      	str	r3, [sp, #0]
 800d74a:	2300      	movs	r3, #0
 800d74c:	2200      	movs	r2, #0
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	f005 fc5f 	bl	8013012 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d754:	2300      	movs	r3, #0
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b088      	sub	sp, #32
 800d762:	af04      	add	r7, sp, #16
 800d764:	60f8      	str	r0, [r7, #12]
 800d766:	60b9      	str	r1, [r7, #8]
 800d768:	4611      	mov	r1, r2
 800d76a:	461a      	mov	r2, r3
 800d76c:	460b      	mov	r3, r1
 800d76e:	80fb      	strh	r3, [r7, #6]
 800d770:	4613      	mov	r3, r2
 800d772:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d774:	7979      	ldrb	r1, [r7, #5]
 800d776:	2300      	movs	r3, #0
 800d778:	9303      	str	r3, [sp, #12]
 800d77a:	88fb      	ldrh	r3, [r7, #6]
 800d77c:	9302      	str	r3, [sp, #8]
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	9301      	str	r3, [sp, #4]
 800d782:	2301      	movs	r3, #1
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	2300      	movs	r3, #0
 800d788:	2201      	movs	r2, #1
 800d78a:	68f8      	ldr	r0, [r7, #12]
 800d78c:	f005 fc41 	bl	8013012 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d790:	2300      	movs	r3, #0

}
 800d792:	4618      	mov	r0, r3
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b088      	sub	sp, #32
 800d79e:	af04      	add	r7, sp, #16
 800d7a0:	60f8      	str	r0, [r7, #12]
 800d7a2:	60b9      	str	r1, [r7, #8]
 800d7a4:	4611      	mov	r1, r2
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	80fb      	strh	r3, [r7, #6]
 800d7ac:	4613      	mov	r3, r2
 800d7ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d001      	beq.n	800d7be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d7be:	7979      	ldrb	r1, [r7, #5]
 800d7c0:	7e3b      	ldrb	r3, [r7, #24]
 800d7c2:	9303      	str	r3, [sp, #12]
 800d7c4:	88fb      	ldrh	r3, [r7, #6]
 800d7c6:	9302      	str	r3, [sp, #8]
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	9301      	str	r3, [sp, #4]
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	9300      	str	r3, [sp, #0]
 800d7d0:	2302      	movs	r3, #2
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f005 fc1c 	bl	8013012 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d7da:	2300      	movs	r3, #0
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3710      	adds	r7, #16
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b088      	sub	sp, #32
 800d7e8:	af04      	add	r7, sp, #16
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	4611      	mov	r1, r2
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	460b      	mov	r3, r1
 800d7f4:	80fb      	strh	r3, [r7, #6]
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d7fa:	7979      	ldrb	r1, [r7, #5]
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	9303      	str	r3, [sp, #12]
 800d800:	88fb      	ldrh	r3, [r7, #6]
 800d802:	9302      	str	r3, [sp, #8]
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	9301      	str	r3, [sp, #4]
 800d808:	2301      	movs	r3, #1
 800d80a:	9300      	str	r3, [sp, #0]
 800d80c:	2302      	movs	r3, #2
 800d80e:	2201      	movs	r2, #1
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f005 fbfe 	bl	8013012 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d816:	2300      	movs	r3, #0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b086      	sub	sp, #24
 800d824:	af04      	add	r7, sp, #16
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	4608      	mov	r0, r1
 800d82a:	4611      	mov	r1, r2
 800d82c:	461a      	mov	r2, r3
 800d82e:	4603      	mov	r3, r0
 800d830:	70fb      	strb	r3, [r7, #3]
 800d832:	460b      	mov	r3, r1
 800d834:	70bb      	strb	r3, [r7, #2]
 800d836:	4613      	mov	r3, r2
 800d838:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d83a:	7878      	ldrb	r0, [r7, #1]
 800d83c:	78ba      	ldrb	r2, [r7, #2]
 800d83e:	78f9      	ldrb	r1, [r7, #3]
 800d840:	8b3b      	ldrh	r3, [r7, #24]
 800d842:	9302      	str	r3, [sp, #8]
 800d844:	7d3b      	ldrb	r3, [r7, #20]
 800d846:	9301      	str	r3, [sp, #4]
 800d848:	7c3b      	ldrb	r3, [r7, #16]
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	4603      	mov	r3, r0
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f005 fba3 	bl	8012f9a <USBH_LL_OpenPipe>

  return USBH_OK;
 800d854:	2300      	movs	r3, #0
}
 800d856:	4618      	mov	r0, r3
 800d858:	3708      	adds	r7, #8
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}

0800d85e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d85e:	b580      	push	{r7, lr}
 800d860:	b082      	sub	sp, #8
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
 800d866:	460b      	mov	r3, r1
 800d868:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d86a:	78fb      	ldrb	r3, [r7, #3]
 800d86c:	4619      	mov	r1, r3
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f005 fbc2 	bl	8012ff8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	3708      	adds	r7, #8
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}

0800d87e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d87e:	b580      	push	{r7, lr}
 800d880:	b084      	sub	sp, #16
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
 800d886:	460b      	mov	r3, r1
 800d888:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 f836 	bl	800d8fc <USBH_GetFreePipe>
 800d890:	4603      	mov	r3, r0
 800d892:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d894:	89fb      	ldrh	r3, [r7, #14]
 800d896:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d00a      	beq.n	800d8b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d89e:	78fa      	ldrb	r2, [r7, #3]
 800d8a0:	89fb      	ldrh	r3, [r7, #14]
 800d8a2:	f003 030f 	and.w	r3, r3, #15
 800d8a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d8aa:	6879      	ldr	r1, [r7, #4]
 800d8ac:	33e0      	adds	r3, #224	@ 0xe0
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	440b      	add	r3, r1
 800d8b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d8b4:	89fb      	ldrh	r3, [r7, #14]
 800d8b6:	b2db      	uxtb	r3, r3
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3710      	adds	r7, #16
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d8cc:	78fb      	ldrb	r3, [r7, #3]
 800d8ce:	2b0f      	cmp	r3, #15
 800d8d0:	d80d      	bhi.n	800d8ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d8d2:	78fb      	ldrb	r3, [r7, #3]
 800d8d4:	687a      	ldr	r2, [r7, #4]
 800d8d6:	33e0      	adds	r3, #224	@ 0xe0
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	4413      	add	r3, r2
 800d8dc:	685a      	ldr	r2, [r3, #4]
 800d8de:	78fb      	ldrb	r3, [r7, #3]
 800d8e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d8e4:	6879      	ldr	r1, [r7, #4]
 800d8e6:	33e0      	adds	r3, #224	@ 0xe0
 800d8e8:	009b      	lsls	r3, r3, #2
 800d8ea:	440b      	add	r3, r1
 800d8ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d8ee:	2300      	movs	r3, #0
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b085      	sub	sp, #20
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d904:	2300      	movs	r3, #0
 800d906:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d908:	2300      	movs	r3, #0
 800d90a:	73fb      	strb	r3, [r7, #15]
 800d90c:	e00f      	b.n	800d92e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d90e:	7bfb      	ldrb	r3, [r7, #15]
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	33e0      	adds	r3, #224	@ 0xe0
 800d914:	009b      	lsls	r3, r3, #2
 800d916:	4413      	add	r3, r2
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d102      	bne.n	800d928 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d922:	7bfb      	ldrb	r3, [r7, #15]
 800d924:	b29b      	uxth	r3, r3
 800d926:	e007      	b.n	800d938 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d928:	7bfb      	ldrb	r3, [r7, #15]
 800d92a:	3301      	adds	r3, #1
 800d92c:	73fb      	strb	r3, [r7, #15]
 800d92e:	7bfb      	ldrb	r3, [r7, #15]
 800d930:	2b0f      	cmp	r3, #15
 800d932:	d9ec      	bls.n	800d90e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d934:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3714      	adds	r7, #20
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	4603      	mov	r3, r0
 800d94c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d94e:	79fb      	ldrb	r3, [r7, #7]
 800d950:	4a08      	ldr	r2, [pc, #32]	@ (800d974 <disk_status+0x30>)
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	4413      	add	r3, r2
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	79fa      	ldrb	r2, [r7, #7]
 800d95c:	4905      	ldr	r1, [pc, #20]	@ (800d974 <disk_status+0x30>)
 800d95e:	440a      	add	r2, r1
 800d960:	7a12      	ldrb	r2, [r2, #8]
 800d962:	4610      	mov	r0, r2
 800d964:	4798      	blx	r3
 800d966:	4603      	mov	r3, r0
 800d968:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d96a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3710      	adds	r7, #16
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	20003de0 	.word	0x20003de0

0800d978 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b084      	sub	sp, #16
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	4603      	mov	r3, r0
 800d980:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d982:	2300      	movs	r3, #0
 800d984:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d986:	79fb      	ldrb	r3, [r7, #7]
 800d988:	4a0e      	ldr	r2, [pc, #56]	@ (800d9c4 <disk_initialize+0x4c>)
 800d98a:	5cd3      	ldrb	r3, [r2, r3]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d114      	bne.n	800d9ba <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d990:	79fb      	ldrb	r3, [r7, #7]
 800d992:	4a0c      	ldr	r2, [pc, #48]	@ (800d9c4 <disk_initialize+0x4c>)
 800d994:	009b      	lsls	r3, r3, #2
 800d996:	4413      	add	r3, r2
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	79fa      	ldrb	r2, [r7, #7]
 800d99e:	4909      	ldr	r1, [pc, #36]	@ (800d9c4 <disk_initialize+0x4c>)
 800d9a0:	440a      	add	r2, r1
 800d9a2:	7a12      	ldrb	r2, [r2, #8]
 800d9a4:	4610      	mov	r0, r2
 800d9a6:	4798      	blx	r3
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800d9ac:	7bfb      	ldrb	r3, [r7, #15]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d103      	bne.n	800d9ba <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800d9b2:	79fb      	ldrb	r3, [r7, #7]
 800d9b4:	4a03      	ldr	r2, [pc, #12]	@ (800d9c4 <disk_initialize+0x4c>)
 800d9b6:	2101      	movs	r1, #1
 800d9b8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800d9ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3710      	adds	r7, #16
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	20003de0 	.word	0x20003de0

0800d9c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d9c8:	b590      	push	{r4, r7, lr}
 800d9ca:	b087      	sub	sp, #28
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	60b9      	str	r1, [r7, #8]
 800d9d0:	607a      	str	r2, [r7, #4]
 800d9d2:	603b      	str	r3, [r7, #0]
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d9d8:	7bfb      	ldrb	r3, [r7, #15]
 800d9da:	4a0a      	ldr	r2, [pc, #40]	@ (800da04 <disk_read+0x3c>)
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	4413      	add	r3, r2
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	689c      	ldr	r4, [r3, #8]
 800d9e4:	7bfb      	ldrb	r3, [r7, #15]
 800d9e6:	4a07      	ldr	r2, [pc, #28]	@ (800da04 <disk_read+0x3c>)
 800d9e8:	4413      	add	r3, r2
 800d9ea:	7a18      	ldrb	r0, [r3, #8]
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	68b9      	ldr	r1, [r7, #8]
 800d9f2:	47a0      	blx	r4
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d9f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	371c      	adds	r7, #28
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd90      	pop	{r4, r7, pc}
 800da02:	bf00      	nop
 800da04:	20003de0 	.word	0x20003de0

0800da08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800da08:	b590      	push	{r4, r7, lr}
 800da0a:	b087      	sub	sp, #28
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	60b9      	str	r1, [r7, #8]
 800da10:	607a      	str	r2, [r7, #4]
 800da12:	603b      	str	r3, [r7, #0]
 800da14:	4603      	mov	r3, r0
 800da16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800da18:	7bfb      	ldrb	r3, [r7, #15]
 800da1a:	4a0a      	ldr	r2, [pc, #40]	@ (800da44 <disk_write+0x3c>)
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	4413      	add	r3, r2
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	68dc      	ldr	r4, [r3, #12]
 800da24:	7bfb      	ldrb	r3, [r7, #15]
 800da26:	4a07      	ldr	r2, [pc, #28]	@ (800da44 <disk_write+0x3c>)
 800da28:	4413      	add	r3, r2
 800da2a:	7a18      	ldrb	r0, [r3, #8]
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	68b9      	ldr	r1, [r7, #8]
 800da32:	47a0      	blx	r4
 800da34:	4603      	mov	r3, r0
 800da36:	75fb      	strb	r3, [r7, #23]
  return res;
 800da38:	7dfb      	ldrb	r3, [r7, #23]
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	371c      	adds	r7, #28
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd90      	pop	{r4, r7, pc}
 800da42:	bf00      	nop
 800da44:	20003de0 	.word	0x20003de0

0800da48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	4603      	mov	r3, r0
 800da50:	603a      	str	r2, [r7, #0]
 800da52:	71fb      	strb	r3, [r7, #7]
 800da54:	460b      	mov	r3, r1
 800da56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800da58:	79fb      	ldrb	r3, [r7, #7]
 800da5a:	4a09      	ldr	r2, [pc, #36]	@ (800da80 <disk_ioctl+0x38>)
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	4413      	add	r3, r2
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	691b      	ldr	r3, [r3, #16]
 800da64:	79fa      	ldrb	r2, [r7, #7]
 800da66:	4906      	ldr	r1, [pc, #24]	@ (800da80 <disk_ioctl+0x38>)
 800da68:	440a      	add	r2, r1
 800da6a:	7a10      	ldrb	r0, [r2, #8]
 800da6c:	79b9      	ldrb	r1, [r7, #6]
 800da6e:	683a      	ldr	r2, [r7, #0]
 800da70:	4798      	blx	r3
 800da72:	4603      	mov	r3, r0
 800da74:	73fb      	strb	r3, [r7, #15]
  return res;
 800da76:	7bfb      	ldrb	r3, [r7, #15]
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3710      	adds	r7, #16
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	20003de0 	.word	0x20003de0

0800da84 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800da84:	b480      	push	{r7}
 800da86:	b085      	sub	sp, #20
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	3301      	adds	r3, #1
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800da94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800da98:	021b      	lsls	r3, r3, #8
 800da9a:	b21a      	sxth	r2, r3
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	b21b      	sxth	r3, r3
 800daa2:	4313      	orrs	r3, r2
 800daa4:	b21b      	sxth	r3, r3
 800daa6:	81fb      	strh	r3, [r7, #14]
	return rv;
 800daa8:	89fb      	ldrh	r3, [r7, #14]
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3714      	adds	r7, #20
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr

0800dab6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800dab6:	b480      	push	{r7}
 800dab8:	b085      	sub	sp, #20
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	3303      	adds	r3, #3
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	021b      	lsls	r3, r3, #8
 800daca:	687a      	ldr	r2, [r7, #4]
 800dacc:	3202      	adds	r2, #2
 800dace:	7812      	ldrb	r2, [r2, #0]
 800dad0:	4313      	orrs	r3, r2
 800dad2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	021b      	lsls	r3, r3, #8
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	3201      	adds	r2, #1
 800dadc:	7812      	ldrb	r2, [r2, #0]
 800dade:	4313      	orrs	r3, r2
 800dae0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	021b      	lsls	r3, r3, #8
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	7812      	ldrb	r2, [r2, #0]
 800daea:	4313      	orrs	r3, r2
 800daec:	60fb      	str	r3, [r7, #12]
	return rv;
 800daee:	68fb      	ldr	r3, [r7, #12]
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3714      	adds	r7, #20
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800dafc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800db00:	b09d      	sub	sp, #116	@ 0x74
 800db02:	af00      	add	r7, sp, #0
 800db04:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 800db06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db08:	3307      	adds	r3, #7
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	2200      	movs	r2, #0
 800db10:	469a      	mov	sl, r3
 800db12:	4693      	mov	fp, r2
 800db14:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800db18:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800db1c:	f04f 0000 	mov.w	r0, #0
 800db20:	f04f 0100 	mov.w	r1, #0
 800db24:	0219      	lsls	r1, r3, #8
 800db26:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800db2a:	0210      	lsls	r0, r2, #8
 800db2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db2e:	3306      	adds	r3, #6
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	b2db      	uxtb	r3, r3
 800db34:	2200      	movs	r2, #0
 800db36:	461c      	mov	r4, r3
 800db38:	4615      	mov	r5, r2
 800db3a:	ea40 0804 	orr.w	r8, r0, r4
 800db3e:	ea41 0905 	orr.w	r9, r1, r5
 800db42:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 800db46:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800db4a:	f04f 0000 	mov.w	r0, #0
 800db4e:	f04f 0100 	mov.w	r1, #0
 800db52:	0219      	lsls	r1, r3, #8
 800db54:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800db58:	0210      	lsls	r0, r2, #8
 800db5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db5c:	3305      	adds	r3, #5
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	b2db      	uxtb	r3, r3
 800db62:	2200      	movs	r2, #0
 800db64:	65bb      	str	r3, [r7, #88]	@ 0x58
 800db66:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800db68:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800db6c:	4623      	mov	r3, r4
 800db6e:	4303      	orrs	r3, r0
 800db70:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db72:	462b      	mov	r3, r5
 800db74:	430b      	orrs	r3, r1
 800db76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db78:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800db7c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 800db80:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800db84:	f04f 0000 	mov.w	r0, #0
 800db88:	f04f 0100 	mov.w	r1, #0
 800db8c:	0219      	lsls	r1, r3, #8
 800db8e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800db92:	0210      	lsls	r0, r2, #8
 800db94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db96:	3304      	adds	r3, #4
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	2200      	movs	r2, #0
 800db9e:	653b      	str	r3, [r7, #80]	@ 0x50
 800dba0:	657a      	str	r2, [r7, #84]	@ 0x54
 800dba2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800dba6:	4623      	mov	r3, r4
 800dba8:	4303      	orrs	r3, r0
 800dbaa:	623b      	str	r3, [r7, #32]
 800dbac:	462b      	mov	r3, r5
 800dbae:	430b      	orrs	r3, r1
 800dbb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbb2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800dbb6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800dbba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800dbbe:	f04f 0000 	mov.w	r0, #0
 800dbc2:	f04f 0100 	mov.w	r1, #0
 800dbc6:	0219      	lsls	r1, r3, #8
 800dbc8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800dbcc:	0210      	lsls	r0, r2, #8
 800dbce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dbd0:	3303      	adds	r3, #3
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dbda:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800dbdc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800dbe0:	4623      	mov	r3, r4
 800dbe2:	4303      	orrs	r3, r0
 800dbe4:	61bb      	str	r3, [r7, #24]
 800dbe6:	462b      	mov	r3, r5
 800dbe8:	430b      	orrs	r3, r1
 800dbea:	61fb      	str	r3, [r7, #28]
 800dbec:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800dbf0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800dbf4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800dbf8:	f04f 0000 	mov.w	r0, #0
 800dbfc:	f04f 0100 	mov.w	r1, #0
 800dc00:	0219      	lsls	r1, r3, #8
 800dc02:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800dc06:	0210      	lsls	r0, r2, #8
 800dc08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc0a:	3302      	adds	r3, #2
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	2200      	movs	r2, #0
 800dc12:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc14:	647a      	str	r2, [r7, #68]	@ 0x44
 800dc16:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800dc1a:	4623      	mov	r3, r4
 800dc1c:	4303      	orrs	r3, r0
 800dc1e:	613b      	str	r3, [r7, #16]
 800dc20:	462b      	mov	r3, r5
 800dc22:	430b      	orrs	r3, r1
 800dc24:	617b      	str	r3, [r7, #20]
 800dc26:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800dc2a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 800dc2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800dc32:	f04f 0200 	mov.w	r2, #0
 800dc36:	f04f 0300 	mov.w	r3, #0
 800dc3a:	020b      	lsls	r3, r1, #8
 800dc3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dc40:	0202      	lsls	r2, r0, #8
 800dc42:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800dc44:	3101      	adds	r1, #1
 800dc46:	7809      	ldrb	r1, [r1, #0]
 800dc48:	b2c9      	uxtb	r1, r1
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800dc4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800dc50:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800dc54:	4621      	mov	r1, r4
 800dc56:	4311      	orrs	r1, r2
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	4319      	orrs	r1, r3
 800dc5e:	60f9      	str	r1, [r7, #12]
 800dc60:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800dc64:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 800dc68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800dc6c:	f04f 0200 	mov.w	r2, #0
 800dc70:	f04f 0300 	mov.w	r3, #0
 800dc74:	020b      	lsls	r3, r1, #8
 800dc76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dc7a:	0202      	lsls	r2, r0, #8
 800dc7c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800dc7e:	7809      	ldrb	r1, [r1, #0]
 800dc80:	b2c9      	uxtb	r1, r1
 800dc82:	2000      	movs	r0, #0
 800dc84:	6339      	str	r1, [r7, #48]	@ 0x30
 800dc86:	6378      	str	r0, [r7, #52]	@ 0x34
 800dc88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800dc8c:	4621      	mov	r1, r4
 800dc8e:	4311      	orrs	r1, r2
 800dc90:	6039      	str	r1, [r7, #0]
 800dc92:	4629      	mov	r1, r5
 800dc94:	4319      	orrs	r1, r3
 800dc96:	6079      	str	r1, [r7, #4]
 800dc98:	e9d7 3400 	ldrd	r3, r4, [r7]
 800dc9c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 800dca0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800dca4:	4610      	mov	r0, r2
 800dca6:	4619      	mov	r1, r3
 800dca8:	3774      	adds	r7, #116	@ 0x74
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800dcb0:	4770      	bx	lr

0800dcb2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800dcb2:	b480      	push	{r7}
 800dcb4:	b083      	sub	sp, #12
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
 800dcba:	460b      	mov	r3, r1
 800dcbc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	1c5a      	adds	r2, r3, #1
 800dcc2:	607a      	str	r2, [r7, #4]
 800dcc4:	887a      	ldrh	r2, [r7, #2]
 800dcc6:	b2d2      	uxtb	r2, r2
 800dcc8:	701a      	strb	r2, [r3, #0]
 800dcca:	887b      	ldrh	r3, [r7, #2]
 800dccc:	0a1b      	lsrs	r3, r3, #8
 800dcce:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	1c5a      	adds	r2, r3, #1
 800dcd4:	607a      	str	r2, [r7, #4]
 800dcd6:	887a      	ldrh	r2, [r7, #2]
 800dcd8:	b2d2      	uxtb	r2, r2
 800dcda:	701a      	strb	r2, [r3, #0]
}
 800dcdc:	bf00      	nop
 800dcde:	370c      	adds	r7, #12
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr

0800dce8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800dce8:	b480      	push	{r7}
 800dcea:	b083      	sub	sp, #12
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	1c5a      	adds	r2, r3, #1
 800dcf6:	607a      	str	r2, [r7, #4]
 800dcf8:	683a      	ldr	r2, [r7, #0]
 800dcfa:	b2d2      	uxtb	r2, r2
 800dcfc:	701a      	strb	r2, [r3, #0]
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	0a1b      	lsrs	r3, r3, #8
 800dd02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	1c5a      	adds	r2, r3, #1
 800dd08:	607a      	str	r2, [r7, #4]
 800dd0a:	683a      	ldr	r2, [r7, #0]
 800dd0c:	b2d2      	uxtb	r2, r2
 800dd0e:	701a      	strb	r2, [r3, #0]
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	0a1b      	lsrs	r3, r3, #8
 800dd14:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	1c5a      	adds	r2, r3, #1
 800dd1a:	607a      	str	r2, [r7, #4]
 800dd1c:	683a      	ldr	r2, [r7, #0]
 800dd1e:	b2d2      	uxtb	r2, r2
 800dd20:	701a      	strb	r2, [r3, #0]
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	0a1b      	lsrs	r3, r3, #8
 800dd26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	1c5a      	adds	r2, r3, #1
 800dd2c:	607a      	str	r2, [r7, #4]
 800dd2e:	683a      	ldr	r2, [r7, #0]
 800dd30:	b2d2      	uxtb	r2, r2
 800dd32:	701a      	strb	r2, [r3, #0]
}
 800dd34:	bf00      	nop
 800dd36:	370c      	adds	r7, #12
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	1c5a      	adds	r2, r3, #1
 800dd50:	60fa      	str	r2, [r7, #12]
 800dd52:	783a      	ldrb	r2, [r7, #0]
 800dd54:	701a      	strb	r2, [r3, #0]
 800dd56:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dd5a:	f04f 0200 	mov.w	r2, #0
 800dd5e:	f04f 0300 	mov.w	r3, #0
 800dd62:	0a02      	lsrs	r2, r0, #8
 800dd64:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800dd68:	0a0b      	lsrs	r3, r1, #8
 800dd6a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	1c5a      	adds	r2, r3, #1
 800dd72:	60fa      	str	r2, [r7, #12]
 800dd74:	783a      	ldrb	r2, [r7, #0]
 800dd76:	701a      	strb	r2, [r3, #0]
 800dd78:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dd7c:	f04f 0200 	mov.w	r2, #0
 800dd80:	f04f 0300 	mov.w	r3, #0
 800dd84:	0a02      	lsrs	r2, r0, #8
 800dd86:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800dd8a:	0a0b      	lsrs	r3, r1, #8
 800dd8c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	1c5a      	adds	r2, r3, #1
 800dd94:	60fa      	str	r2, [r7, #12]
 800dd96:	783a      	ldrb	r2, [r7, #0]
 800dd98:	701a      	strb	r2, [r3, #0]
 800dd9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dd9e:	f04f 0200 	mov.w	r2, #0
 800dda2:	f04f 0300 	mov.w	r3, #0
 800dda6:	0a02      	lsrs	r2, r0, #8
 800dda8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ddac:	0a0b      	lsrs	r3, r1, #8
 800ddae:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	1c5a      	adds	r2, r3, #1
 800ddb6:	60fa      	str	r2, [r7, #12]
 800ddb8:	783a      	ldrb	r2, [r7, #0]
 800ddba:	701a      	strb	r2, [r3, #0]
 800ddbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ddc0:	f04f 0200 	mov.w	r2, #0
 800ddc4:	f04f 0300 	mov.w	r3, #0
 800ddc8:	0a02      	lsrs	r2, r0, #8
 800ddca:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ddce:	0a0b      	lsrs	r3, r1, #8
 800ddd0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	1c5a      	adds	r2, r3, #1
 800ddd8:	60fa      	str	r2, [r7, #12]
 800ddda:	783a      	ldrb	r2, [r7, #0]
 800dddc:	701a      	strb	r2, [r3, #0]
 800ddde:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dde2:	f04f 0200 	mov.w	r2, #0
 800dde6:	f04f 0300 	mov.w	r3, #0
 800ddea:	0a02      	lsrs	r2, r0, #8
 800ddec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ddf0:	0a0b      	lsrs	r3, r1, #8
 800ddf2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	1c5a      	adds	r2, r3, #1
 800ddfa:	60fa      	str	r2, [r7, #12]
 800ddfc:	783a      	ldrb	r2, [r7, #0]
 800ddfe:	701a      	strb	r2, [r3, #0]
 800de00:	e9d7 0100 	ldrd	r0, r1, [r7]
 800de04:	f04f 0200 	mov.w	r2, #0
 800de08:	f04f 0300 	mov.w	r3, #0
 800de0c:	0a02      	lsrs	r2, r0, #8
 800de0e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800de12:	0a0b      	lsrs	r3, r1, #8
 800de14:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	1c5a      	adds	r2, r3, #1
 800de1c:	60fa      	str	r2, [r7, #12]
 800de1e:	783a      	ldrb	r2, [r7, #0]
 800de20:	701a      	strb	r2, [r3, #0]
 800de22:	e9d7 0100 	ldrd	r0, r1, [r7]
 800de26:	f04f 0200 	mov.w	r2, #0
 800de2a:	f04f 0300 	mov.w	r3, #0
 800de2e:	0a02      	lsrs	r2, r0, #8
 800de30:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800de34:	0a0b      	lsrs	r3, r1, #8
 800de36:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	1c5a      	adds	r2, r3, #1
 800de3e:	60fa      	str	r2, [r7, #12]
 800de40:	783a      	ldrb	r2, [r7, #0]
 800de42:	701a      	strb	r2, [r3, #0]
}
 800de44:	bf00      	nop
 800de46:	3714      	adds	r7, #20
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr

0800de50 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800de50:	b480      	push	{r7}
 800de52:	b087      	sub	sp, #28
 800de54:	af00      	add	r7, sp, #0
 800de56:	60f8      	str	r0, [r7, #12]
 800de58:	60b9      	str	r1, [r7, #8]
 800de5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d00d      	beq.n	800de86 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800de6a:	693a      	ldr	r2, [r7, #16]
 800de6c:	1c53      	adds	r3, r2, #1
 800de6e:	613b      	str	r3, [r7, #16]
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	1c59      	adds	r1, r3, #1
 800de74:	6179      	str	r1, [r7, #20]
 800de76:	7812      	ldrb	r2, [r2, #0]
 800de78:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	3b01      	subs	r3, #1
 800de7e:	607b      	str	r3, [r7, #4]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1f1      	bne.n	800de6a <mem_cpy+0x1a>
	}
}
 800de86:	bf00      	nop
 800de88:	371c      	adds	r7, #28
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr

0800de92 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800de92:	b480      	push	{r7}
 800de94:	b087      	sub	sp, #28
 800de96:	af00      	add	r7, sp, #0
 800de98:	60f8      	str	r0, [r7, #12]
 800de9a:	60b9      	str	r1, [r7, #8]
 800de9c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	1c5a      	adds	r2, r3, #1
 800dea6:	617a      	str	r2, [r7, #20]
 800dea8:	68ba      	ldr	r2, [r7, #8]
 800deaa:	b2d2      	uxtb	r2, r2
 800deac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	3b01      	subs	r3, #1
 800deb2:	607b      	str	r3, [r7, #4]
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d1f3      	bne.n	800dea2 <mem_set+0x10>
}
 800deba:	bf00      	nop
 800debc:	bf00      	nop
 800debe:	371c      	adds	r7, #28
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800dec8:	b480      	push	{r7}
 800deca:	b089      	sub	sp, #36	@ 0x24
 800decc:	af00      	add	r7, sp, #0
 800dece:	60f8      	str	r0, [r7, #12]
 800ded0:	60b9      	str	r1, [r7, #8]
 800ded2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	61fb      	str	r3, [r7, #28]
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800dedc:	2300      	movs	r3, #0
 800dede:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	1c5a      	adds	r2, r3, #1
 800dee4:	61fa      	str	r2, [r7, #28]
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	4619      	mov	r1, r3
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	1c5a      	adds	r2, r3, #1
 800deee:	61ba      	str	r2, [r7, #24]
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	1acb      	subs	r3, r1, r3
 800def4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	3b01      	subs	r3, #1
 800defa:	607b      	str	r3, [r7, #4]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d002      	beq.n	800df08 <mem_cmp+0x40>
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d0eb      	beq.n	800dee0 <mem_cmp+0x18>

	return r;
 800df08:	697b      	ldr	r3, [r7, #20]
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3724      	adds	r7, #36	@ 0x24
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr

0800df16 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800df16:	b480      	push	{r7}
 800df18:	b083      	sub	sp, #12
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
 800df1e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800df20:	e002      	b.n	800df28 <chk_chr+0x12>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	3301      	adds	r3, #1
 800df26:	607b      	str	r3, [r7, #4]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d005      	beq.n	800df3c <chk_chr+0x26>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	461a      	mov	r2, r3
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	4293      	cmp	r3, r2
 800df3a:	d1f2      	bne.n	800df22 <chk_chr+0xc>
	return *str;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	781b      	ldrb	r3, [r3, #0]
}
 800df40:	4618      	mov	r0, r3
 800df42:	370c      	adds	r7, #12
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr

0800df4c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800df56:	2300      	movs	r3, #0
 800df58:	60bb      	str	r3, [r7, #8]
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	60fb      	str	r3, [r7, #12]
 800df5e:	e029      	b.n	800dfb4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800df60:	4a27      	ldr	r2, [pc, #156]	@ (800e000 <chk_lock+0xb4>)
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	011b      	lsls	r3, r3, #4
 800df66:	4413      	add	r3, r2
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d01d      	beq.n	800dfaa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800df6e:	4a24      	ldr	r2, [pc, #144]	@ (800e000 <chk_lock+0xb4>)
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	011b      	lsls	r3, r3, #4
 800df74:	4413      	add	r3, r2
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d116      	bne.n	800dfae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800df80:	4a1f      	ldr	r2, [pc, #124]	@ (800e000 <chk_lock+0xb4>)
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	011b      	lsls	r3, r3, #4
 800df86:	4413      	add	r3, r2
 800df88:	3304      	adds	r3, #4
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800df90:	429a      	cmp	r2, r3
 800df92:	d10c      	bne.n	800dfae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800df94:	4a1a      	ldr	r2, [pc, #104]	@ (800e000 <chk_lock+0xb4>)
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	011b      	lsls	r3, r3, #4
 800df9a:	4413      	add	r3, r2
 800df9c:	3308      	adds	r3, #8
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d102      	bne.n	800dfae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dfa8:	e007      	b.n	800dfba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800dfaa:	2301      	movs	r3, #1
 800dfac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	60fb      	str	r3, [r7, #12]
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d9d2      	bls.n	800df60 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2b02      	cmp	r3, #2
 800dfbe:	d109      	bne.n	800dfd4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d102      	bne.n	800dfcc <chk_lock+0x80>
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	2b02      	cmp	r3, #2
 800dfca:	d101      	bne.n	800dfd0 <chk_lock+0x84>
 800dfcc:	2300      	movs	r3, #0
 800dfce:	e010      	b.n	800dff2 <chk_lock+0xa6>
 800dfd0:	2312      	movs	r3, #18
 800dfd2:	e00e      	b.n	800dff2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d108      	bne.n	800dfec <chk_lock+0xa0>
 800dfda:	4a09      	ldr	r2, [pc, #36]	@ (800e000 <chk_lock+0xb4>)
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	011b      	lsls	r3, r3, #4
 800dfe0:	4413      	add	r3, r2
 800dfe2:	330c      	adds	r3, #12
 800dfe4:	881b      	ldrh	r3, [r3, #0]
 800dfe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dfea:	d101      	bne.n	800dff0 <chk_lock+0xa4>
 800dfec:	2310      	movs	r3, #16
 800dfee:	e000      	b.n	800dff2 <chk_lock+0xa6>
 800dff0:	2300      	movs	r3, #0
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3714      	adds	r7, #20
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop
 800e000:	20003960 	.word	0x20003960

0800e004 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e00a:	2300      	movs	r3, #0
 800e00c:	607b      	str	r3, [r7, #4]
 800e00e:	e002      	b.n	800e016 <enq_lock+0x12>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	3301      	adds	r3, #1
 800e014:	607b      	str	r3, [r7, #4]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d806      	bhi.n	800e02a <enq_lock+0x26>
 800e01c:	4a09      	ldr	r2, [pc, #36]	@ (800e044 <enq_lock+0x40>)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	011b      	lsls	r3, r3, #4
 800e022:	4413      	add	r3, r2
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d1f2      	bne.n	800e010 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2b02      	cmp	r3, #2
 800e02e:	bf14      	ite	ne
 800e030:	2301      	movne	r3, #1
 800e032:	2300      	moveq	r3, #0
 800e034:	b2db      	uxtb	r3, r3
}
 800e036:	4618      	mov	r0, r3
 800e038:	370c      	adds	r7, #12
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop
 800e044:	20003960 	.word	0x20003960

0800e048 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e048:	b480      	push	{r7}
 800e04a:	b085      	sub	sp, #20
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e052:	2300      	movs	r3, #0
 800e054:	60fb      	str	r3, [r7, #12]
 800e056:	e01f      	b.n	800e098 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e058:	4a41      	ldr	r2, [pc, #260]	@ (800e160 <inc_lock+0x118>)
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	011b      	lsls	r3, r3, #4
 800e05e:	4413      	add	r3, r2
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	429a      	cmp	r2, r3
 800e068:	d113      	bne.n	800e092 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e06a:	4a3d      	ldr	r2, [pc, #244]	@ (800e160 <inc_lock+0x118>)
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	011b      	lsls	r3, r3, #4
 800e070:	4413      	add	r3, r2
 800e072:	3304      	adds	r3, #4
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d109      	bne.n	800e092 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e07e:	4a38      	ldr	r2, [pc, #224]	@ (800e160 <inc_lock+0x118>)
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	011b      	lsls	r3, r3, #4
 800e084:	4413      	add	r3, r2
 800e086:	3308      	adds	r3, #8
 800e088:	681a      	ldr	r2, [r3, #0]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 800e08e:	429a      	cmp	r2, r3
 800e090:	d006      	beq.n	800e0a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	3301      	adds	r3, #1
 800e096:	60fb      	str	r3, [r7, #12]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d9dc      	bls.n	800e058 <inc_lock+0x10>
 800e09e:	e000      	b.n	800e0a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e0a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2b02      	cmp	r3, #2
 800e0a6:	d132      	bne.n	800e10e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	60fb      	str	r3, [r7, #12]
 800e0ac:	e002      	b.n	800e0b4 <inc_lock+0x6c>
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	60fb      	str	r3, [r7, #12]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d806      	bhi.n	800e0c8 <inc_lock+0x80>
 800e0ba:	4a29      	ldr	r2, [pc, #164]	@ (800e160 <inc_lock+0x118>)
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	011b      	lsls	r3, r3, #4
 800e0c0:	4413      	add	r3, r2
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d1f2      	bne.n	800e0ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2b02      	cmp	r3, #2
 800e0cc:	d101      	bne.n	800e0d2 <inc_lock+0x8a>
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	e040      	b.n	800e154 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	4922      	ldr	r1, [pc, #136]	@ (800e160 <inc_lock+0x118>)
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	011b      	lsls	r3, r3, #4
 800e0dc:	440b      	add	r3, r1
 800e0de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	689a      	ldr	r2, [r3, #8]
 800e0e4:	491e      	ldr	r1, [pc, #120]	@ (800e160 <inc_lock+0x118>)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	011b      	lsls	r3, r3, #4
 800e0ea:	440b      	add	r3, r1
 800e0ec:	3304      	adds	r3, #4
 800e0ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e0f4:	491a      	ldr	r1, [pc, #104]	@ (800e160 <inc_lock+0x118>)
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	011b      	lsls	r3, r3, #4
 800e0fa:	440b      	add	r3, r1
 800e0fc:	3308      	adds	r3, #8
 800e0fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e100:	4a17      	ldr	r2, [pc, #92]	@ (800e160 <inc_lock+0x118>)
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	011b      	lsls	r3, r3, #4
 800e106:	4413      	add	r3, r2
 800e108:	330c      	adds	r3, #12
 800e10a:	2200      	movs	r2, #0
 800e10c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d009      	beq.n	800e128 <inc_lock+0xe0>
 800e114:	4a12      	ldr	r2, [pc, #72]	@ (800e160 <inc_lock+0x118>)
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	011b      	lsls	r3, r3, #4
 800e11a:	4413      	add	r3, r2
 800e11c:	330c      	adds	r3, #12
 800e11e:	881b      	ldrh	r3, [r3, #0]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d001      	beq.n	800e128 <inc_lock+0xe0>
 800e124:	2300      	movs	r3, #0
 800e126:	e015      	b.n	800e154 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d108      	bne.n	800e140 <inc_lock+0xf8>
 800e12e:	4a0c      	ldr	r2, [pc, #48]	@ (800e160 <inc_lock+0x118>)
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	011b      	lsls	r3, r3, #4
 800e134:	4413      	add	r3, r2
 800e136:	330c      	adds	r3, #12
 800e138:	881b      	ldrh	r3, [r3, #0]
 800e13a:	3301      	adds	r3, #1
 800e13c:	b29a      	uxth	r2, r3
 800e13e:	e001      	b.n	800e144 <inc_lock+0xfc>
 800e140:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e144:	4906      	ldr	r1, [pc, #24]	@ (800e160 <inc_lock+0x118>)
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	011b      	lsls	r3, r3, #4
 800e14a:	440b      	add	r3, r1
 800e14c:	330c      	adds	r3, #12
 800e14e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	3301      	adds	r3, #1
}
 800e154:	4618      	mov	r0, r3
 800e156:	3714      	adds	r7, #20
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr
 800e160:	20003960 	.word	0x20003960

0800e164 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e164:	b480      	push	{r7}
 800e166:	b085      	sub	sp, #20
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	3b01      	subs	r3, #1
 800e170:	607b      	str	r3, [r7, #4]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2b01      	cmp	r3, #1
 800e176:	d825      	bhi.n	800e1c4 <dec_lock+0x60>
		n = Files[i].ctr;
 800e178:	4a17      	ldr	r2, [pc, #92]	@ (800e1d8 <dec_lock+0x74>)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	011b      	lsls	r3, r3, #4
 800e17e:	4413      	add	r3, r2
 800e180:	330c      	adds	r3, #12
 800e182:	881b      	ldrh	r3, [r3, #0]
 800e184:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e186:	89fb      	ldrh	r3, [r7, #14]
 800e188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e18c:	d101      	bne.n	800e192 <dec_lock+0x2e>
 800e18e:	2300      	movs	r3, #0
 800e190:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e192:	89fb      	ldrh	r3, [r7, #14]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d002      	beq.n	800e19e <dec_lock+0x3a>
 800e198:	89fb      	ldrh	r3, [r7, #14]
 800e19a:	3b01      	subs	r3, #1
 800e19c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e19e:	4a0e      	ldr	r2, [pc, #56]	@ (800e1d8 <dec_lock+0x74>)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	011b      	lsls	r3, r3, #4
 800e1a4:	4413      	add	r3, r2
 800e1a6:	330c      	adds	r3, #12
 800e1a8:	89fa      	ldrh	r2, [r7, #14]
 800e1aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e1ac:	89fb      	ldrh	r3, [r7, #14]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d105      	bne.n	800e1be <dec_lock+0x5a>
 800e1b2:	4a09      	ldr	r2, [pc, #36]	@ (800e1d8 <dec_lock+0x74>)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	011b      	lsls	r3, r3, #4
 800e1b8:	4413      	add	r3, r2
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	737b      	strb	r3, [r7, #13]
 800e1c2:	e001      	b.n	800e1c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e1c4:	2302      	movs	r3, #2
 800e1c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e1c8:	7b7b      	ldrb	r3, [r7, #13]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3714      	adds	r7, #20
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr
 800e1d6:	bf00      	nop
 800e1d8:	20003960 	.word	0x20003960

0800e1dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b085      	sub	sp, #20
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	60fb      	str	r3, [r7, #12]
 800e1e8:	e010      	b.n	800e20c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e1ea:	4a0d      	ldr	r2, [pc, #52]	@ (800e220 <clear_lock+0x44>)
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	011b      	lsls	r3, r3, #4
 800e1f0:	4413      	add	r3, r2
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d105      	bne.n	800e206 <clear_lock+0x2a>
 800e1fa:	4a09      	ldr	r2, [pc, #36]	@ (800e220 <clear_lock+0x44>)
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	011b      	lsls	r3, r3, #4
 800e200:	4413      	add	r3, r2
 800e202:	2200      	movs	r2, #0
 800e204:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	3301      	adds	r3, #1
 800e20a:	60fb      	str	r3, [r7, #12]
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2b01      	cmp	r3, #1
 800e210:	d9eb      	bls.n	800e1ea <clear_lock+0xe>
	}
}
 800e212:	bf00      	nop
 800e214:	bf00      	nop
 800e216:	3714      	adds	r7, #20
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr
 800e220:	20003960 	.word	0x20003960

0800e224 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b086      	sub	sp, #24
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e22c:	2300      	movs	r3, #0
 800e22e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	78db      	ldrb	r3, [r3, #3]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d034      	beq.n	800e2a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e23c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	7858      	ldrb	r0, [r3, #1]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e248:	2301      	movs	r3, #1
 800e24a:	697a      	ldr	r2, [r7, #20]
 800e24c:	f7ff fbdc 	bl	800da08 <disk_write>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d002      	beq.n	800e25c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e256:	2301      	movs	r3, #1
 800e258:	73fb      	strb	r3, [r7, #15]
 800e25a:	e022      	b.n	800e2a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2200      	movs	r2, #0
 800e260:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e266:	697a      	ldr	r2, [r7, #20]
 800e268:	1ad2      	subs	r2, r2, r3
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e26e:	429a      	cmp	r2, r3
 800e270:	d217      	bcs.n	800e2a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	789b      	ldrb	r3, [r3, #2]
 800e276:	613b      	str	r3, [r7, #16]
 800e278:	e010      	b.n	800e29c <sync_window+0x78>
					wsect += fs->fsize;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e27e:	697a      	ldr	r2, [r7, #20]
 800e280:	4413      	add	r3, r2
 800e282:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	7858      	ldrb	r0, [r3, #1]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e28e:	2301      	movs	r3, #1
 800e290:	697a      	ldr	r2, [r7, #20]
 800e292:	f7ff fbb9 	bl	800da08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	3b01      	subs	r3, #1
 800e29a:	613b      	str	r3, [r7, #16]
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d8eb      	bhi.n	800e27a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e2a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3718      	adds	r7, #24
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b084      	sub	sp, #16
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2be:	683a      	ldr	r2, [r7, #0]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d01b      	beq.n	800e2fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f7ff ffad 	bl	800e224 <sync_window>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e2ce:	7bfb      	ldrb	r3, [r7, #15]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d113      	bne.n	800e2fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	7858      	ldrb	r0, [r3, #1]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e2de:	2301      	movs	r3, #1
 800e2e0:	683a      	ldr	r2, [r7, #0]
 800e2e2:	f7ff fb71 	bl	800d9c8 <disk_read>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d004      	beq.n	800e2f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e2ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	683a      	ldr	r2, [r7, #0]
 800e2fa:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800e2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3710      	adds	r7, #16
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
	...

0800e308 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b084      	sub	sp, #16
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f7ff ff87 	bl	800e224 <sync_window>
 800e316:	4603      	mov	r3, r0
 800e318:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e31a:	7bfb      	ldrb	r3, [r7, #15]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d159      	bne.n	800e3d4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	2b03      	cmp	r3, #3
 800e326:	d149      	bne.n	800e3bc <sync_fs+0xb4>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	791b      	ldrb	r3, [r3, #4]
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d145      	bne.n	800e3bc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	899b      	ldrh	r3, [r3, #12]
 800e33a:	461a      	mov	r2, r3
 800e33c:	2100      	movs	r1, #0
 800e33e:	f7ff fda8 	bl	800de92 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	333c      	adds	r3, #60	@ 0x3c
 800e346:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e34a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e34e:	4618      	mov	r0, r3
 800e350:	f7ff fcaf 	bl	800dcb2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	333c      	adds	r3, #60	@ 0x3c
 800e358:	4921      	ldr	r1, [pc, #132]	@ (800e3e0 <sync_fs+0xd8>)
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7ff fcc4 	bl	800dce8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	333c      	adds	r3, #60	@ 0x3c
 800e364:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e368:	491e      	ldr	r1, [pc, #120]	@ (800e3e4 <sync_fs+0xdc>)
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7ff fcbc 	bl	800dce8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	333c      	adds	r3, #60	@ 0x3c
 800e374:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	69db      	ldr	r3, [r3, #28]
 800e37c:	4619      	mov	r1, r3
 800e37e:	4610      	mov	r0, r2
 800e380:	f7ff fcb2 	bl	800dce8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	333c      	adds	r3, #60	@ 0x3c
 800e388:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	699b      	ldr	r3, [r3, #24]
 800e390:	4619      	mov	r1, r3
 800e392:	4610      	mov	r0, r2
 800e394:	f7ff fca8 	bl	800dce8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e39c:	1c5a      	adds	r2, r3, #1
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	7858      	ldrb	r0, [r3, #1]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	f7ff fb29 	bl	800da08 <disk_write>
			fs->fsi_flag = 0;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	785b      	ldrb	r3, [r3, #1]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	2100      	movs	r1, #0
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7ff fb3f 	bl	800da48 <disk_ioctl>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d001      	beq.n	800e3d4 <sync_fs+0xcc>
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3710      	adds	r7, #16
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	41615252 	.word	0x41615252
 800e3e4:	61417272 	.word	0x61417272

0800e3e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b083      	sub	sp, #12
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	3b02      	subs	r3, #2
 800e3f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6a1b      	ldr	r3, [r3, #32]
 800e3fc:	3b02      	subs	r3, #2
 800e3fe:	683a      	ldr	r2, [r7, #0]
 800e400:	429a      	cmp	r2, r3
 800e402:	d301      	bcc.n	800e408 <clust2sect+0x20>
 800e404:	2300      	movs	r3, #0
 800e406:	e008      	b.n	800e41a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	895b      	ldrh	r3, [r3, #10]
 800e40c:	461a      	mov	r2, r3
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	fb03 f202 	mul.w	r2, r3, r2
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e418:	4413      	add	r3, r2
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	370c      	adds	r7, #12
 800e41e:	46bd      	mov	sp, r7
 800e420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e424:	4770      	bx	lr
	...

0800e428 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e42c:	b088      	sub	sp, #32
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
 800e432:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	d904      	bls.n	800e44a <get_fat+0x22>
 800e440:	69bb      	ldr	r3, [r7, #24]
 800e442:	6a1b      	ldr	r3, [r3, #32]
 800e444:	683a      	ldr	r2, [r7, #0]
 800e446:	429a      	cmp	r2, r3
 800e448:	d302      	bcc.n	800e450 <get_fat+0x28>
		val = 1;	/* Internal error */
 800e44a:	2301      	movs	r3, #1
 800e44c:	61fb      	str	r3, [r7, #28]
 800e44e:	e139      	b.n	800e6c4 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e450:	f04f 33ff 	mov.w	r3, #4294967295
 800e454:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800e456:	69bb      	ldr	r3, [r7, #24]
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	3b01      	subs	r3, #1
 800e45c:	2b03      	cmp	r3, #3
 800e45e:	f200 8125 	bhi.w	800e6ac <get_fat+0x284>
 800e462:	a201      	add	r2, pc, #4	@ (adr r2, 800e468 <get_fat+0x40>)
 800e464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e468:	0800e479 	.word	0x0800e479
 800e46c:	0800e525 	.word	0x0800e525
 800e470:	0800e571 	.word	0x0800e571
 800e474:	0800e5c1 	.word	0x0800e5c1
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	60fb      	str	r3, [r7, #12]
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	085b      	lsrs	r3, r3, #1
 800e480:	68fa      	ldr	r2, [r7, #12]
 800e482:	4413      	add	r3, r2
 800e484:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e486:	69bb      	ldr	r3, [r7, #24]
 800e488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	899b      	ldrh	r3, [r3, #12]
 800e48e:	4619      	mov	r1, r3
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	fbb3 f3f1 	udiv	r3, r3, r1
 800e496:	4413      	add	r3, r2
 800e498:	4619      	mov	r1, r3
 800e49a:	69b8      	ldr	r0, [r7, #24]
 800e49c:	f7ff ff06 	bl	800e2ac <move_window>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	f040 8105 	bne.w	800e6b2 <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	1c5a      	adds	r2, r3, #1
 800e4ac:	60fa      	str	r2, [r7, #12]
 800e4ae:	69ba      	ldr	r2, [r7, #24]
 800e4b0:	8992      	ldrh	r2, [r2, #12]
 800e4b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e4b6:	fb01 f202 	mul.w	r2, r1, r2
 800e4ba:	1a9b      	subs	r3, r3, r2
 800e4bc:	69ba      	ldr	r2, [r7, #24]
 800e4be:	4413      	add	r3, r2
 800e4c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e4c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e4c6:	69bb      	ldr	r3, [r7, #24]
 800e4c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4ca:	69bb      	ldr	r3, [r7, #24]
 800e4cc:	899b      	ldrh	r3, [r3, #12]
 800e4ce:	4619      	mov	r1, r3
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4d6:	4413      	add	r3, r2
 800e4d8:	4619      	mov	r1, r3
 800e4da:	69b8      	ldr	r0, [r7, #24]
 800e4dc:	f7ff fee6 	bl	800e2ac <move_window>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	f040 80e7 	bne.w	800e6b6 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e4e8:	69bb      	ldr	r3, [r7, #24]
 800e4ea:	899b      	ldrh	r3, [r3, #12]
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800e4f4:	fb01 f202 	mul.w	r2, r1, r2
 800e4f8:	1a9b      	subs	r3, r3, r2
 800e4fa:	69ba      	ldr	r2, [r7, #24]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e502:	021b      	lsls	r3, r3, #8
 800e504:	68ba      	ldr	r2, [r7, #8]
 800e506:	4313      	orrs	r3, r2
 800e508:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	f003 0301 	and.w	r3, r3, #1
 800e510:	2b00      	cmp	r3, #0
 800e512:	d002      	beq.n	800e51a <get_fat+0xf2>
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	091b      	lsrs	r3, r3, #4
 800e518:	e002      	b.n	800e520 <get_fat+0xf8>
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e520:	61fb      	str	r3, [r7, #28]
			break;
 800e522:	e0cf      	b.n	800e6c4 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e524:	69bb      	ldr	r3, [r7, #24]
 800e526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	899b      	ldrh	r3, [r3, #12]
 800e52c:	085b      	lsrs	r3, r3, #1
 800e52e:	b29b      	uxth	r3, r3
 800e530:	4619      	mov	r1, r3
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	fbb3 f3f1 	udiv	r3, r3, r1
 800e538:	4413      	add	r3, r2
 800e53a:	4619      	mov	r1, r3
 800e53c:	69b8      	ldr	r0, [r7, #24]
 800e53e:	f7ff feb5 	bl	800e2ac <move_window>
 800e542:	4603      	mov	r3, r0
 800e544:	2b00      	cmp	r3, #0
 800e546:	f040 80b8 	bne.w	800e6ba <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e54a:	69bb      	ldr	r3, [r7, #24]
 800e54c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	005b      	lsls	r3, r3, #1
 800e554:	69ba      	ldr	r2, [r7, #24]
 800e556:	8992      	ldrh	r2, [r2, #12]
 800e558:	fbb3 f0f2 	udiv	r0, r3, r2
 800e55c:	fb00 f202 	mul.w	r2, r0, r2
 800e560:	1a9b      	subs	r3, r3, r2
 800e562:	440b      	add	r3, r1
 800e564:	4618      	mov	r0, r3
 800e566:	f7ff fa8d 	bl	800da84 <ld_word>
 800e56a:	4603      	mov	r3, r0
 800e56c:	61fb      	str	r3, [r7, #28]
			break;
 800e56e:	e0a9      	b.n	800e6c4 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e570:	69bb      	ldr	r3, [r7, #24]
 800e572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e574:	69bb      	ldr	r3, [r7, #24]
 800e576:	899b      	ldrh	r3, [r3, #12]
 800e578:	089b      	lsrs	r3, r3, #2
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	4619      	mov	r1, r3
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	fbb3 f3f1 	udiv	r3, r3, r1
 800e584:	4413      	add	r3, r2
 800e586:	4619      	mov	r1, r3
 800e588:	69b8      	ldr	r0, [r7, #24]
 800e58a:	f7ff fe8f 	bl	800e2ac <move_window>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	f040 8094 	bne.w	800e6be <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e596:	69bb      	ldr	r3, [r7, #24]
 800e598:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	009b      	lsls	r3, r3, #2
 800e5a0:	69ba      	ldr	r2, [r7, #24]
 800e5a2:	8992      	ldrh	r2, [r2, #12]
 800e5a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800e5a8:	fb00 f202 	mul.w	r2, r0, r2
 800e5ac:	1a9b      	subs	r3, r3, r2
 800e5ae:	440b      	add	r3, r1
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7ff fa80 	bl	800dab6 <ld_dword>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e5bc:	61fb      	str	r3, [r7, #28]
			break;
 800e5be:	e081      	b.n	800e6c4 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e5c6:	4313      	orrs	r3, r2
 800e5c8:	d070      	beq.n	800e6ac <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	689b      	ldr	r3, [r3, #8]
 800e5ce:	683a      	ldr	r2, [r7, #0]
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e5da:	1e54      	subs	r4, r2, #1
 800e5dc:	f143 35ff 	adc.w	r5, r3, #4294967295
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	899b      	ldrh	r3, [r3, #12]
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	4698      	mov	r8, r3
 800e5ea:	4691      	mov	r9, r2
 800e5ec:	4642      	mov	r2, r8
 800e5ee:	464b      	mov	r3, r9
 800e5f0:	4620      	mov	r0, r4
 800e5f2:	4629      	mov	r1, r5
 800e5f4:	f7f2 fad8 	bl	8000ba8 <__aeabi_uldivmod>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	69bb      	ldr	r3, [r7, #24]
 800e5fe:	895b      	ldrh	r3, [r3, #10]
 800e600:	fbb2 f3f3 	udiv	r3, r2, r3
 800e604:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	79db      	ldrb	r3, [r3, #7]
 800e60a:	2b02      	cmp	r3, #2
 800e60c:	d10e      	bne.n	800e62c <get_fat+0x204>
					if (cofs <= clen) {
 800e60e:	697a      	ldr	r2, [r7, #20]
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	429a      	cmp	r2, r3
 800e614:	d80a      	bhi.n	800e62c <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800e616:	697a      	ldr	r2, [r7, #20]
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d002      	beq.n	800e624 <get_fat+0x1fc>
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	3301      	adds	r3, #1
 800e622:	e001      	b.n	800e628 <get_fat+0x200>
 800e624:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e628:	61fb      	str	r3, [r7, #28]
						break;
 800e62a:	e04b      	b.n	800e6c4 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	79db      	ldrb	r3, [r3, #7]
 800e630:	2b03      	cmp	r3, #3
 800e632:	d108      	bne.n	800e646 <get_fat+0x21e>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	699b      	ldr	r3, [r3, #24]
 800e638:	697a      	ldr	r2, [r7, #20]
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d203      	bcs.n	800e646 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	3301      	adds	r3, #1
 800e642:	61fb      	str	r3, [r7, #28]
					break;
 800e644:	e03e      	b.n	800e6c4 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	79db      	ldrb	r3, [r3, #7]
 800e64a:	2b02      	cmp	r3, #2
 800e64c:	d02e      	beq.n	800e6ac <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	69db      	ldr	r3, [r3, #28]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d003      	beq.n	800e65e <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800e656:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e65a:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800e65c:	e032      	b.n	800e6c4 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e662:	69bb      	ldr	r3, [r7, #24]
 800e664:	899b      	ldrh	r3, [r3, #12]
 800e666:	089b      	lsrs	r3, r3, #2
 800e668:	b29b      	uxth	r3, r3
 800e66a:	4619      	mov	r1, r3
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e672:	4413      	add	r3, r2
 800e674:	4619      	mov	r1, r3
 800e676:	69b8      	ldr	r0, [r7, #24]
 800e678:	f7ff fe18 	bl	800e2ac <move_window>
 800e67c:	4603      	mov	r3, r0
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d11f      	bne.n	800e6c2 <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	009b      	lsls	r3, r3, #2
 800e68c:	69ba      	ldr	r2, [r7, #24]
 800e68e:	8992      	ldrh	r2, [r2, #12]
 800e690:	fbb3 f0f2 	udiv	r0, r3, r2
 800e694:	fb00 f202 	mul.w	r2, r0, r2
 800e698:	1a9b      	subs	r3, r3, r2
 800e69a:	440b      	add	r3, r1
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7ff fa0a 	bl	800dab6 <ld_dword>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e6a8:	61fb      	str	r3, [r7, #28]
					break;
 800e6aa:	e00b      	b.n	800e6c4 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	61fb      	str	r3, [r7, #28]
 800e6b0:	e008      	b.n	800e6c4 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e6b2:	bf00      	nop
 800e6b4:	e006      	b.n	800e6c4 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e6b6:	bf00      	nop
 800e6b8:	e004      	b.n	800e6c4 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e6ba:	bf00      	nop
 800e6bc:	e002      	b.n	800e6c4 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e6be:	bf00      	nop
 800e6c0:	e000      	b.n	800e6c4 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e6c2:	bf00      	nop
		}
	}

	return val;
 800e6c4:	69fb      	ldr	r3, [r7, #28]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3720      	adds	r7, #32
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800e6d0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e6d0:	b590      	push	{r4, r7, lr}
 800e6d2:	b089      	sub	sp, #36	@ 0x24
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e6dc:	2302      	movs	r3, #2
 800e6de:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	2b01      	cmp	r3, #1
 800e6e4:	f240 810d 	bls.w	800e902 <put_fat+0x232>
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6a1b      	ldr	r3, [r3, #32]
 800e6ec:	68ba      	ldr	r2, [r7, #8]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	f080 8107 	bcs.w	800e902 <put_fat+0x232>
		switch (fs->fs_type) {
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	2b04      	cmp	r3, #4
 800e6fa:	f300 8102 	bgt.w	800e902 <put_fat+0x232>
 800e6fe:	2b03      	cmp	r3, #3
 800e700:	f280 80b3 	bge.w	800e86a <put_fat+0x19a>
 800e704:	2b01      	cmp	r3, #1
 800e706:	d003      	beq.n	800e710 <put_fat+0x40>
 800e708:	2b02      	cmp	r3, #2
 800e70a:	f000 8083 	beq.w	800e814 <put_fat+0x144>
 800e70e:	e0f8      	b.n	800e902 <put_fat+0x232>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	61bb      	str	r3, [r7, #24]
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	085b      	lsrs	r3, r3, #1
 800e718:	69ba      	ldr	r2, [r7, #24]
 800e71a:	4413      	add	r3, r2
 800e71c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	899b      	ldrh	r3, [r3, #12]
 800e726:	4619      	mov	r1, r3
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e72e:	4413      	add	r3, r2
 800e730:	4619      	mov	r1, r3
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	f7ff fdba 	bl	800e2ac <move_window>
 800e738:	4603      	mov	r3, r0
 800e73a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e73c:	7ffb      	ldrb	r3, [r7, #31]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	f040 80d8 	bne.w	800e8f4 <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	1c5a      	adds	r2, r3, #1
 800e74e:	61ba      	str	r2, [r7, #24]
 800e750:	68fa      	ldr	r2, [r7, #12]
 800e752:	8992      	ldrh	r2, [r2, #12]
 800e754:	fbb3 f0f2 	udiv	r0, r3, r2
 800e758:	fb00 f202 	mul.w	r2, r0, r2
 800e75c:	1a9b      	subs	r3, r3, r2
 800e75e:	440b      	add	r3, r1
 800e760:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	f003 0301 	and.w	r3, r3, #1
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d00d      	beq.n	800e788 <put_fat+0xb8>
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	b25b      	sxtb	r3, r3
 800e772:	f003 030f 	and.w	r3, r3, #15
 800e776:	b25a      	sxtb	r2, r3
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	b25b      	sxtb	r3, r3
 800e77c:	011b      	lsls	r3, r3, #4
 800e77e:	b25b      	sxtb	r3, r3
 800e780:	4313      	orrs	r3, r2
 800e782:	b25b      	sxtb	r3, r3
 800e784:	b2db      	uxtb	r3, r3
 800e786:	e001      	b.n	800e78c <put_fat+0xbc>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	b2db      	uxtb	r3, r3
 800e78c:	697a      	ldr	r2, [r7, #20]
 800e78e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	2201      	movs	r2, #1
 800e794:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	899b      	ldrh	r3, [r3, #12]
 800e79e:	4619      	mov	r1, r3
 800e7a0:	69bb      	ldr	r3, [r7, #24]
 800e7a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e7a6:	4413      	add	r3, r2
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	68f8      	ldr	r0, [r7, #12]
 800e7ac:	f7ff fd7e 	bl	800e2ac <move_window>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e7b4:	7ffb      	ldrb	r3, [r7, #31]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	f040 809e 	bne.w	800e8f8 <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	899b      	ldrh	r3, [r3, #12]
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	fbb3 f0f2 	udiv	r0, r3, r2
 800e7ce:	fb00 f202 	mul.w	r2, r0, r2
 800e7d2:	1a9b      	subs	r3, r3, r2
 800e7d4:	440b      	add	r3, r1
 800e7d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	f003 0301 	and.w	r3, r3, #1
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d003      	beq.n	800e7ea <put_fat+0x11a>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	091b      	lsrs	r3, r3, #4
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	e00e      	b.n	800e808 <put_fat+0x138>
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	b25b      	sxtb	r3, r3
 800e7f0:	f023 030f 	bic.w	r3, r3, #15
 800e7f4:	b25a      	sxtb	r2, r3
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	0a1b      	lsrs	r3, r3, #8
 800e7fa:	b25b      	sxtb	r3, r3
 800e7fc:	f003 030f 	and.w	r3, r3, #15
 800e800:	b25b      	sxtb	r3, r3
 800e802:	4313      	orrs	r3, r2
 800e804:	b25b      	sxtb	r3, r3
 800e806:	b2db      	uxtb	r3, r3
 800e808:	697a      	ldr	r2, [r7, #20]
 800e80a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2201      	movs	r2, #1
 800e810:	70da      	strb	r2, [r3, #3]
			break;
 800e812:	e076      	b.n	800e902 <put_fat+0x232>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	899b      	ldrh	r3, [r3, #12]
 800e81c:	085b      	lsrs	r3, r3, #1
 800e81e:	b29b      	uxth	r3, r3
 800e820:	4619      	mov	r1, r3
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	fbb3 f3f1 	udiv	r3, r3, r1
 800e828:	4413      	add	r3, r2
 800e82a:	4619      	mov	r1, r3
 800e82c:	68f8      	ldr	r0, [r7, #12]
 800e82e:	f7ff fd3d 	bl	800e2ac <move_window>
 800e832:	4603      	mov	r3, r0
 800e834:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e836:	7ffb      	ldrb	r3, [r7, #31]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d15f      	bne.n	800e8fc <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	005b      	lsls	r3, r3, #1
 800e846:	68fa      	ldr	r2, [r7, #12]
 800e848:	8992      	ldrh	r2, [r2, #12]
 800e84a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e84e:	fb00 f202 	mul.w	r2, r0, r2
 800e852:	1a9b      	subs	r3, r3, r2
 800e854:	440b      	add	r3, r1
 800e856:	687a      	ldr	r2, [r7, #4]
 800e858:	b292      	uxth	r2, r2
 800e85a:	4611      	mov	r1, r2
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7ff fa28 	bl	800dcb2 <st_word>
			fs->wflag = 1;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2201      	movs	r2, #1
 800e866:	70da      	strb	r2, [r3, #3]
			break;
 800e868:	e04b      	b.n	800e902 <put_fat+0x232>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	899b      	ldrh	r3, [r3, #12]
 800e872:	089b      	lsrs	r3, r3, #2
 800e874:	b29b      	uxth	r3, r3
 800e876:	4619      	mov	r1, r3
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e87e:	4413      	add	r3, r2
 800e880:	4619      	mov	r1, r3
 800e882:	68f8      	ldr	r0, [r7, #12]
 800e884:	f7ff fd12 	bl	800e2ac <move_window>
 800e888:	4603      	mov	r3, r0
 800e88a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e88c:	7ffb      	ldrb	r3, [r7, #31]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d136      	bne.n	800e900 <put_fat+0x230>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	2b04      	cmp	r3, #4
 800e898:	d017      	beq.n	800e8ca <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	009b      	lsls	r3, r3, #2
 800e8aa:	68fa      	ldr	r2, [r7, #12]
 800e8ac:	8992      	ldrh	r2, [r2, #12]
 800e8ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800e8b2:	fb00 f202 	mul.w	r2, r0, r2
 800e8b6:	1a9b      	subs	r3, r3, r2
 800e8b8:	440b      	add	r3, r1
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7ff f8fb 	bl	800dab6 <ld_dword>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800e8c6:	4323      	orrs	r3, r4
 800e8c8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	009b      	lsls	r3, r3, #2
 800e8d4:	68fa      	ldr	r2, [r7, #12]
 800e8d6:	8992      	ldrh	r2, [r2, #12]
 800e8d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800e8dc:	fb00 f202 	mul.w	r2, r0, r2
 800e8e0:	1a9b      	subs	r3, r3, r2
 800e8e2:	440b      	add	r3, r1
 800e8e4:	6879      	ldr	r1, [r7, #4]
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7ff f9fe 	bl	800dce8 <st_dword>
			fs->wflag = 1;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	70da      	strb	r2, [r3, #3]
			break;
 800e8f2:	e006      	b.n	800e902 <put_fat+0x232>
			if (res != FR_OK) break;
 800e8f4:	bf00      	nop
 800e8f6:	e004      	b.n	800e902 <put_fat+0x232>
			if (res != FR_OK) break;
 800e8f8:	bf00      	nop
 800e8fa:	e002      	b.n	800e902 <put_fat+0x232>
			if (res != FR_OK) break;
 800e8fc:	bf00      	nop
 800e8fe:	e000      	b.n	800e902 <put_fat+0x232>
			if (res != FR_OK) break;
 800e900:	bf00      	nop
		}
	}
	return res;
 800e902:	7ffb      	ldrb	r3, [r7, #31]
}
 800e904:	4618      	mov	r0, r3
 800e906:	3724      	adds	r7, #36	@ 0x24
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd90      	pop	{r4, r7, pc}

0800e90c <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b08a      	sub	sp, #40	@ 0x28
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	3b02      	subs	r3, #2
 800e91c:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	6a1b      	ldr	r3, [r3, #32]
 800e922:	3b02      	subs	r3, #2
 800e924:	68ba      	ldr	r2, [r7, #8]
 800e926:	429a      	cmp	r2, r3
 800e928:	d301      	bcc.n	800e92e <find_bitmap+0x22>
 800e92a:	2300      	movs	r3, #0
 800e92c:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	61fb      	str	r3, [r7, #28]
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	61bb      	str	r3, [r7, #24]
 800e936:	2300      	movs	r3, #0
 800e938:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e93e:	69fb      	ldr	r3, [r7, #28]
 800e940:	08db      	lsrs	r3, r3, #3
 800e942:	68f9      	ldr	r1, [r7, #12]
 800e944:	8989      	ldrh	r1, [r1, #12]
 800e946:	fbb3 f3f1 	udiv	r3, r3, r1
 800e94a:	4413      	add	r3, r2
 800e94c:	4619      	mov	r1, r3
 800e94e:	68f8      	ldr	r0, [r7, #12]
 800e950:	f7ff fcac 	bl	800e2ac <move_window>
 800e954:	4603      	mov	r3, r0
 800e956:	2b00      	cmp	r3, #0
 800e958:	d002      	beq.n	800e960 <find_bitmap+0x54>
 800e95a:	f04f 33ff 	mov.w	r3, #4294967295
 800e95e:	e058      	b.n	800ea12 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	08db      	lsrs	r3, r3, #3
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	8992      	ldrh	r2, [r2, #12]
 800e968:	fbb3 f1f2 	udiv	r1, r3, r2
 800e96c:	fb01 f202 	mul.w	r2, r1, r2
 800e970:	1a9b      	subs	r3, r3, r2
 800e972:	623b      	str	r3, [r7, #32]
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	f003 0307 	and.w	r3, r3, #7
 800e97a:	2201      	movs	r2, #1
 800e97c:	fa02 f303 	lsl.w	r3, r2, r3
 800e980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800e984:	68fa      	ldr	r2, [r7, #12]
 800e986:	6a3b      	ldr	r3, [r7, #32]
 800e988:	4413      	add	r3, r2
 800e98a:	333c      	adds	r3, #60	@ 0x3c
 800e98c:	781a      	ldrb	r2, [r3, #0]
 800e98e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e992:	4013      	ands	r3, r2
 800e994:	74fb      	strb	r3, [r7, #19]
 800e996:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e99a:	005b      	lsls	r3, r3, #1
 800e99c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800e9a0:	69fb      	ldr	r3, [r7, #28]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	61fb      	str	r3, [r7, #28]
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	6a1b      	ldr	r3, [r3, #32]
 800e9aa:	3b02      	subs	r3, #2
 800e9ac:	69fa      	ldr	r2, [r7, #28]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d307      	bcc.n	800e9c2 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	61fb      	str	r3, [r7, #28]
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	899b      	ldrh	r3, [r3, #12]
 800e9c0:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800e9c2:	7cfb      	ldrb	r3, [r7, #19]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d109      	bne.n	800e9dc <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	617b      	str	r3, [r7, #20]
 800e9ce:	697a      	ldr	r2, [r7, #20]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d106      	bne.n	800e9e4 <find_bitmap+0xd8>
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	3302      	adds	r3, #2
 800e9da:	e01a      	b.n	800ea12 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	61bb      	str	r3, [r7, #24]
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800e9e4:	69fa      	ldr	r2, [r7, #28]
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d101      	bne.n	800e9f0 <find_bitmap+0xe4>
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	e010      	b.n	800ea12 <find_bitmap+0x106>
			} while (bm);
 800e9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d1c5      	bne.n	800e984 <find_bitmap+0x78>
			bm = 1;
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800e9fe:	6a3b      	ldr	r3, [r7, #32]
 800ea00:	3301      	adds	r3, #1
 800ea02:	623b      	str	r3, [r7, #32]
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	899b      	ldrh	r3, [r3, #12]
 800ea08:	461a      	mov	r2, r3
 800ea0a:	6a3b      	ldr	r3, [r7, #32]
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d3b9      	bcc.n	800e984 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800ea10:	e793      	b.n	800e93a <find_bitmap+0x2e>
	}
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3728      	adds	r7, #40	@ 0x28
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}

0800ea1a <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800ea1a:	b580      	push	{r7, lr}
 800ea1c:	b088      	sub	sp, #32
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	60f8      	str	r0, [r7, #12]
 800ea22:	60b9      	str	r1, [r7, #8]
 800ea24:	607a      	str	r2, [r7, #4]
 800ea26:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	3b02      	subs	r3, #2
 800ea2c:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	08db      	lsrs	r3, r3, #3
 800ea36:	68f9      	ldr	r1, [r7, #12]
 800ea38:	8989      	ldrh	r1, [r1, #12]
 800ea3a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea3e:	4413      	add	r3, r2
 800ea40:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	08db      	lsrs	r3, r3, #3
 800ea46:	68fa      	ldr	r2, [r7, #12]
 800ea48:	8992      	ldrh	r2, [r2, #12]
 800ea4a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea4e:	fb01 f202 	mul.w	r2, r1, r2
 800ea52:	1a9b      	subs	r3, r3, r2
 800ea54:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	f003 0307 	and.w	r3, r3, #7
 800ea5c:	2201      	movs	r2, #1
 800ea5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ea62:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	1c5a      	adds	r2, r3, #1
 800ea68:	617a      	str	r2, [r7, #20]
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	68f8      	ldr	r0, [r7, #12]
 800ea6e:	f7ff fc1d 	bl	800e2ac <move_window>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d001      	beq.n	800ea7c <change_bitmap+0x62>
 800ea78:	2301      	movs	r3, #1
 800ea7a:	e03f      	b.n	800eafc <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800ea7c:	68fa      	ldr	r2, [r7, #12]
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	4413      	add	r3, r2
 800ea82:	333c      	adds	r3, #60	@ 0x3c
 800ea84:	781a      	ldrb	r2, [r3, #0]
 800ea86:	7ffb      	ldrb	r3, [r7, #31]
 800ea88:	4013      	ands	r3, r2
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	bf14      	ite	ne
 800ea90:	2301      	movne	r3, #1
 800ea92:	2300      	moveq	r3, #0
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	461a      	mov	r2, r3
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d101      	bne.n	800eaa2 <change_bitmap+0x88>
 800ea9e:	2302      	movs	r3, #2
 800eaa0:	e02c      	b.n	800eafc <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800eaa2:	68fa      	ldr	r2, [r7, #12]
 800eaa4:	69bb      	ldr	r3, [r7, #24]
 800eaa6:	4413      	add	r3, r2
 800eaa8:	333c      	adds	r3, #60	@ 0x3c
 800eaaa:	781a      	ldrb	r2, [r3, #0]
 800eaac:	7ffb      	ldrb	r3, [r7, #31]
 800eaae:	4053      	eors	r3, r2
 800eab0:	b2d9      	uxtb	r1, r3
 800eab2:	68fa      	ldr	r2, [r7, #12]
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	4413      	add	r3, r2
 800eab8:	333c      	adds	r3, #60	@ 0x3c
 800eaba:	460a      	mov	r2, r1
 800eabc:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2201      	movs	r2, #1
 800eac2:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	3b01      	subs	r3, #1
 800eac8:	607b      	str	r3, [r7, #4]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d101      	bne.n	800ead4 <change_bitmap+0xba>
 800ead0:	2300      	movs	r3, #0
 800ead2:	e013      	b.n	800eafc <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800ead4:	7ffb      	ldrb	r3, [r7, #31]
 800ead6:	005b      	lsls	r3, r3, #1
 800ead8:	77fb      	strb	r3, [r7, #31]
 800eada:	7ffb      	ldrb	r3, [r7, #31]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d1cd      	bne.n	800ea7c <change_bitmap+0x62>
			bm = 1;
 800eae0:	2301      	movs	r3, #1
 800eae2:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800eae4:	69bb      	ldr	r3, [r7, #24]
 800eae6:	3301      	adds	r3, #1
 800eae8:	61bb      	str	r3, [r7, #24]
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	899b      	ldrh	r3, [r3, #12]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	69bb      	ldr	r3, [r7, #24]
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d3c2      	bcc.n	800ea7c <change_bitmap+0x62>
		i = 0;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800eafa:	e7b3      	b.n	800ea64 <change_bitmap+0x4a>
	}
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3720      	adds	r7, #32
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b086      	sub	sp, #24
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	79db      	ldrb	r3, [r3, #7]
 800eb10:	2b03      	cmp	r3, #3
 800eb12:	d121      	bne.n	800eb58 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	689b      	ldr	r3, [r3, #8]
 800eb18:	617b      	str	r3, [r7, #20]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	699b      	ldr	r3, [r3, #24]
 800eb1e:	613b      	str	r3, [r7, #16]
 800eb20:	e014      	b.n	800eb4c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6818      	ldr	r0, [r3, #0]
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	461a      	mov	r2, r3
 800eb2c:	6979      	ldr	r1, [r7, #20]
 800eb2e:	f7ff fdcf 	bl	800e6d0 <put_fat>
 800eb32:	4603      	mov	r3, r0
 800eb34:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800eb36:	7bfb      	ldrb	r3, [r7, #15]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d001      	beq.n	800eb40 <fill_first_frag+0x3c>
 800eb3c:	7bfb      	ldrb	r3, [r7, #15]
 800eb3e:	e00c      	b.n	800eb5a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	3301      	adds	r3, #1
 800eb44:	617b      	str	r3, [r7, #20]
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	3b01      	subs	r3, #1
 800eb4a:	613b      	str	r3, [r7, #16]
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d1e7      	bne.n	800eb22 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2200      	movs	r2, #0
 800eb56:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800eb58:	2300      	movs	r3, #0
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3718      	adds	r7, #24
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}

0800eb62 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800eb62:	b580      	push	{r7, lr}
 800eb64:	b086      	sub	sp, #24
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	60f8      	str	r0, [r7, #12]
 800eb6a:	60b9      	str	r1, [r7, #8]
 800eb6c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800eb6e:	e020      	b.n	800ebb2 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	6818      	ldr	r0, [r3, #0]
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	69db      	ldr	r3, [r3, #28]
 800eb78:	68ba      	ldr	r2, [r7, #8]
 800eb7a:	1ad3      	subs	r3, r2, r3
 800eb7c:	1c59      	adds	r1, r3, #1
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	69db      	ldr	r3, [r3, #28]
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	d905      	bls.n	800eb92 <fill_last_frag+0x30>
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	69db      	ldr	r3, [r3, #28]
 800eb8a:	68ba      	ldr	r2, [r7, #8]
 800eb8c:	1ad3      	subs	r3, r2, r3
 800eb8e:	3302      	adds	r3, #2
 800eb90:	e000      	b.n	800eb94 <fill_last_frag+0x32>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	461a      	mov	r2, r3
 800eb96:	f7ff fd9b 	bl	800e6d0 <put_fat>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800eb9e:	7dfb      	ldrb	r3, [r7, #23]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d001      	beq.n	800eba8 <fill_last_frag+0x46>
 800eba4:	7dfb      	ldrb	r3, [r7, #23]
 800eba6:	e009      	b.n	800ebbc <fill_last_frag+0x5a>
		obj->n_frag--;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	69db      	ldr	r3, [r3, #28]
 800ebac:	1e5a      	subs	r2, r3, #1
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	69db      	ldr	r3, [r3, #28]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d1da      	bne.n	800eb70 <fill_last_frag+0xe>
	}
	return FR_OK;
 800ebba:	2300      	movs	r3, #0
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3718      	adds	r7, #24
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b08a      	sub	sp, #40	@ 0x28
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	60f8      	str	r0, [r7, #12]
 800ebcc:	60b9      	str	r1, [r7, #8]
 800ebce:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	2b01      	cmp	r3, #1
 800ebe6:	d904      	bls.n	800ebf2 <remove_chain+0x2e>
 800ebe8:	69bb      	ldr	r3, [r7, #24]
 800ebea:	6a1b      	ldr	r3, [r3, #32]
 800ebec:	68ba      	ldr	r2, [r7, #8]
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d301      	bcc.n	800ebf6 <remove_chain+0x32>
 800ebf2:	2302      	movs	r3, #2
 800ebf4:	e096      	b.n	800ed24 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d014      	beq.n	800ec26 <remove_chain+0x62>
 800ebfc:	69bb      	ldr	r3, [r7, #24]
 800ebfe:	781b      	ldrb	r3, [r3, #0]
 800ec00:	2b04      	cmp	r3, #4
 800ec02:	d103      	bne.n	800ec0c <remove_chain+0x48>
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	79db      	ldrb	r3, [r3, #7]
 800ec08:	2b02      	cmp	r3, #2
 800ec0a:	d00c      	beq.n	800ec26 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ec0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec10:	6879      	ldr	r1, [r7, #4]
 800ec12:	69b8      	ldr	r0, [r7, #24]
 800ec14:	f7ff fd5c 	bl	800e6d0 <put_fat>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ec1c:	7ffb      	ldrb	r3, [r7, #31]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d001      	beq.n	800ec26 <remove_chain+0x62>
 800ec22:	7ffb      	ldrb	r3, [r7, #31]
 800ec24:	e07e      	b.n	800ed24 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ec26:	68b9      	ldr	r1, [r7, #8]
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f7ff fbfd 	bl	800e428 <get_fat>
 800ec2e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d055      	beq.n	800ece2 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	2b01      	cmp	r3, #1
 800ec3a:	d101      	bne.n	800ec40 <remove_chain+0x7c>
 800ec3c:	2302      	movs	r3, #2
 800ec3e:	e071      	b.n	800ed24 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec46:	d101      	bne.n	800ec4c <remove_chain+0x88>
 800ec48:	2301      	movs	r3, #1
 800ec4a:	e06b      	b.n	800ed24 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ec4c:	69bb      	ldr	r3, [r7, #24]
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	2b04      	cmp	r3, #4
 800ec52:	d00b      	beq.n	800ec6c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ec54:	2200      	movs	r2, #0
 800ec56:	68b9      	ldr	r1, [r7, #8]
 800ec58:	69b8      	ldr	r0, [r7, #24]
 800ec5a:	f7ff fd39 	bl	800e6d0 <put_fat>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ec62:	7ffb      	ldrb	r3, [r7, #31]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d001      	beq.n	800ec6c <remove_chain+0xa8>
 800ec68:	7ffb      	ldrb	r3, [r7, #31]
 800ec6a:	e05b      	b.n	800ed24 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	69da      	ldr	r2, [r3, #28]
 800ec70:	69bb      	ldr	r3, [r7, #24]
 800ec72:	6a1b      	ldr	r3, [r3, #32]
 800ec74:	3b02      	subs	r3, #2
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d20b      	bcs.n	800ec92 <remove_chain+0xce>
			fs->free_clst++;
 800ec7a:	69bb      	ldr	r3, [r7, #24]
 800ec7c:	69db      	ldr	r3, [r3, #28]
 800ec7e:	1c5a      	adds	r2, r3, #1
 800ec80:	69bb      	ldr	r3, [r7, #24]
 800ec82:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800ec84:	69bb      	ldr	r3, [r7, #24]
 800ec86:	791b      	ldrb	r3, [r3, #4]
 800ec88:	f043 0301 	orr.w	r3, r3, #1
 800ec8c:	b2da      	uxtb	r2, r3
 800ec8e:	69bb      	ldr	r3, [r7, #24]
 800ec90:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800ec92:	6a3b      	ldr	r3, [r7, #32]
 800ec94:	3301      	adds	r3, #1
 800ec96:	697a      	ldr	r2, [r7, #20]
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d102      	bne.n	800eca2 <remove_chain+0xde>
			ecl = nxt;
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	623b      	str	r3, [r7, #32]
 800eca0:	e017      	b.n	800ecd2 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	2b04      	cmp	r3, #4
 800eca8:	d10f      	bne.n	800ecca <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800ecaa:	6a3a      	ldr	r2, [r7, #32]
 800ecac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecae:	1ad3      	subs	r3, r2, r3
 800ecb0:	1c5a      	adds	r2, r3, #1
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ecb6:	69b8      	ldr	r0, [r7, #24]
 800ecb8:	f7ff feaf 	bl	800ea1a <change_bitmap>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800ecc0:	7ffb      	ldrb	r3, [r7, #31]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d001      	beq.n	800ecca <remove_chain+0x106>
 800ecc6:	7ffb      	ldrb	r3, [r7, #31]
 800ecc8:	e02c      	b.n	800ed24 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	623b      	str	r3, [r7, #32]
 800ecce:	6a3b      	ldr	r3, [r7, #32]
 800ecd0:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ecd6:	69bb      	ldr	r3, [r7, #24]
 800ecd8:	6a1b      	ldr	r3, [r3, #32]
 800ecda:	68ba      	ldr	r2, [r7, #8]
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d3a2      	bcc.n	800ec26 <remove_chain+0x62>
 800ece0:	e000      	b.n	800ece4 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800ece2:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800ece4:	69bb      	ldr	r3, [r7, #24]
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	2b04      	cmp	r3, #4
 800ecea:	d11a      	bne.n	800ed22 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d103      	bne.n	800ecfa <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	71da      	strb	r2, [r3, #7]
 800ecf8:	e013      	b.n	800ed22 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	79db      	ldrb	r3, [r3, #7]
 800ecfe:	2b03      	cmp	r3, #3
 800ed00:	d10f      	bne.n	800ed22 <remove_chain+0x15e>
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	689b      	ldr	r3, [r3, #8]
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d30a      	bcc.n	800ed22 <remove_chain+0x15e>
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	689a      	ldr	r2, [r3, #8]
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	699b      	ldr	r3, [r3, #24]
 800ed14:	4413      	add	r3, r2
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d802      	bhi.n	800ed22 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2202      	movs	r2, #2
 800ed20:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800ed22:	2300      	movs	r3, #0
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3728      	adds	r7, #40	@ 0x28
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b088      	sub	sp, #32
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d10d      	bne.n	800ed5e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	699b      	ldr	r3, [r3, #24]
 800ed46:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d004      	beq.n	800ed58 <create_chain+0x2c>
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	6a1b      	ldr	r3, [r3, #32]
 800ed52:	69ba      	ldr	r2, [r7, #24]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d31b      	bcc.n	800ed90 <create_chain+0x64>
 800ed58:	2301      	movs	r3, #1
 800ed5a:	61bb      	str	r3, [r7, #24]
 800ed5c:	e018      	b.n	800ed90 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ed5e:	6839      	ldr	r1, [r7, #0]
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f7ff fb61 	bl	800e428 <get_fat>
 800ed66:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	2b01      	cmp	r3, #1
 800ed6c:	d801      	bhi.n	800ed72 <create_chain+0x46>
 800ed6e:	2301      	movs	r3, #1
 800ed70:	e0d9      	b.n	800ef26 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed78:	d101      	bne.n	800ed7e <create_chain+0x52>
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	e0d3      	b.n	800ef26 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	6a1b      	ldr	r3, [r3, #32]
 800ed82:	68fa      	ldr	r2, [r7, #12]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d201      	bcs.n	800ed8c <create_chain+0x60>
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	e0cc      	b.n	800ef26 <create_chain+0x1fa>
		scl = clst;
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	2b04      	cmp	r3, #4
 800ed96:	d164      	bne.n	800ee62 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800ed98:	2201      	movs	r2, #1
 800ed9a:	69b9      	ldr	r1, [r7, #24]
 800ed9c:	6938      	ldr	r0, [r7, #16]
 800ed9e:	f7ff fdb5 	bl	800e90c <find_bitmap>
 800eda2:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d003      	beq.n	800edb2 <create_chain+0x86>
 800edaa:	69fb      	ldr	r3, [r7, #28]
 800edac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb0:	d101      	bne.n	800edb6 <create_chain+0x8a>
 800edb2:	69fb      	ldr	r3, [r7, #28]
 800edb4:	e0b7      	b.n	800ef26 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800edb6:	2301      	movs	r3, #1
 800edb8:	2201      	movs	r2, #1
 800edba:	69f9      	ldr	r1, [r7, #28]
 800edbc:	6938      	ldr	r0, [r7, #16]
 800edbe:	f7ff fe2c 	bl	800ea1a <change_bitmap>
 800edc2:	4603      	mov	r3, r0
 800edc4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800edc6:	7dfb      	ldrb	r3, [r7, #23]
 800edc8:	2b02      	cmp	r3, #2
 800edca:	d101      	bne.n	800edd0 <create_chain+0xa4>
 800edcc:	2301      	movs	r3, #1
 800edce:	e0aa      	b.n	800ef26 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800edd0:	7dfb      	ldrb	r3, [r7, #23]
 800edd2:	2b01      	cmp	r3, #1
 800edd4:	d102      	bne.n	800eddc <create_chain+0xb0>
 800edd6:	f04f 33ff 	mov.w	r3, #4294967295
 800edda:	e0a4      	b.n	800ef26 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d103      	bne.n	800edea <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2202      	movs	r2, #2
 800ede6:	71da      	strb	r2, [r3, #7]
 800ede8:	e011      	b.n	800ee0e <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	79db      	ldrb	r3, [r3, #7]
 800edee:	2b02      	cmp	r3, #2
 800edf0:	d10d      	bne.n	800ee0e <create_chain+0xe2>
 800edf2:	69bb      	ldr	r3, [r7, #24]
 800edf4:	3301      	adds	r3, #1
 800edf6:	69fa      	ldr	r2, [r7, #28]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d008      	beq.n	800ee0e <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	689b      	ldr	r3, [r3, #8]
 800ee00:	69ba      	ldr	r2, [r7, #24]
 800ee02:	1ad2      	subs	r2, r2, r3
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2203      	movs	r2, #3
 800ee0c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	79db      	ldrb	r3, [r3, #7]
 800ee12:	2b02      	cmp	r3, #2
 800ee14:	d064      	beq.n	800eee0 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	3301      	adds	r3, #1
 800ee1a:	69fa      	ldr	r2, [r7, #28]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d10b      	bne.n	800ee38 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	69db      	ldr	r3, [r3, #28]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d003      	beq.n	800ee30 <create_chain+0x104>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	69db      	ldr	r3, [r3, #28]
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	e000      	b.n	800ee32 <create_chain+0x106>
 800ee30:	2302      	movs	r3, #2
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	61d3      	str	r3, [r2, #28]
 800ee36:	e053      	b.n	800eee0 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	69db      	ldr	r3, [r3, #28]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d102      	bne.n	800ee46 <create_chain+0x11a>
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2201      	movs	r2, #1
 800ee44:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800ee46:	69fa      	ldr	r2, [r7, #28]
 800ee48:	6839      	ldr	r1, [r7, #0]
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f7ff fe89 	bl	800eb62 <fill_last_frag>
 800ee50:	4603      	mov	r3, r0
 800ee52:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800ee54:	7dfb      	ldrb	r3, [r7, #23]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d142      	bne.n	800eee0 <create_chain+0x1b4>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	61da      	str	r2, [r3, #28]
 800ee60:	e03e      	b.n	800eee0 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ee66:	69fb      	ldr	r3, [r7, #28]
 800ee68:	3301      	adds	r3, #1
 800ee6a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	6a1b      	ldr	r3, [r3, #32]
 800ee70:	69fa      	ldr	r2, [r7, #28]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d307      	bcc.n	800ee86 <create_chain+0x15a>
				ncl = 2;
 800ee76:	2302      	movs	r3, #2
 800ee78:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ee7a:	69fa      	ldr	r2, [r7, #28]
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d901      	bls.n	800ee86 <create_chain+0x15a>
 800ee82:	2300      	movs	r3, #0
 800ee84:	e04f      	b.n	800ef26 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ee86:	69f9      	ldr	r1, [r7, #28]
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f7ff facd 	bl	800e428 <get_fat>
 800ee8e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d00e      	beq.n	800eeb4 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d003      	beq.n	800eea4 <create_chain+0x178>
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea2:	d101      	bne.n	800eea8 <create_chain+0x17c>
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	e03e      	b.n	800ef26 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800eea8:	69fa      	ldr	r2, [r7, #28]
 800eeaa:	69bb      	ldr	r3, [r7, #24]
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d1da      	bne.n	800ee66 <create_chain+0x13a>
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	e038      	b.n	800ef26 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800eeb4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800eeb6:	f04f 32ff 	mov.w	r2, #4294967295
 800eeba:	69f9      	ldr	r1, [r7, #28]
 800eebc:	6938      	ldr	r0, [r7, #16]
 800eebe:	f7ff fc07 	bl	800e6d0 <put_fat>
 800eec2:	4603      	mov	r3, r0
 800eec4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800eec6:	7dfb      	ldrb	r3, [r7, #23]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d109      	bne.n	800eee0 <create_chain+0x1b4>
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d006      	beq.n	800eee0 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800eed2:	69fa      	ldr	r2, [r7, #28]
 800eed4:	6839      	ldr	r1, [r7, #0]
 800eed6:	6938      	ldr	r0, [r7, #16]
 800eed8:	f7ff fbfa 	bl	800e6d0 <put_fat>
 800eedc:	4603      	mov	r3, r0
 800eede:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800eee0:	7dfb      	ldrb	r3, [r7, #23]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d116      	bne.n	800ef14 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	69fa      	ldr	r2, [r7, #28]
 800eeea:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	69da      	ldr	r2, [r3, #28]
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	6a1b      	ldr	r3, [r3, #32]
 800eef4:	3b02      	subs	r3, #2
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d804      	bhi.n	800ef04 <create_chain+0x1d8>
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	69db      	ldr	r3, [r3, #28]
 800eefe:	1e5a      	subs	r2, r3, #1
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	791b      	ldrb	r3, [r3, #4]
 800ef08:	f043 0301 	orr.w	r3, r3, #1
 800ef0c:	b2da      	uxtb	r2, r3
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	711a      	strb	r2, [r3, #4]
 800ef12:	e007      	b.n	800ef24 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ef14:	7dfb      	ldrb	r3, [r7, #23]
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d102      	bne.n	800ef20 <create_chain+0x1f4>
 800ef1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef1e:	e000      	b.n	800ef22 <create_chain+0x1f6>
 800ef20:	2301      	movs	r3, #1
 800ef22:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ef24:	69fb      	ldr	r3, [r7, #28]
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3720      	adds	r7, #32
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}

0800ef2e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ef2e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ef32:	b088      	sub	sp, #32
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	60f8      	str	r0, [r7, #12]
 800ef38:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef46:	3304      	adds	r3, #4
 800ef48:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	899b      	ldrh	r3, [r3, #12]
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	2200      	movs	r2, #0
 800ef52:	4698      	mov	r8, r3
 800ef54:	4691      	mov	r9, r2
 800ef56:	4642      	mov	r2, r8
 800ef58:	464b      	mov	r3, r9
 800ef5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef5e:	f7f1 fe23 	bl	8000ba8 <__aeabi_uldivmod>
 800ef62:	4602      	mov	r2, r0
 800ef64:	460b      	mov	r3, r1
 800ef66:	4610      	mov	r0, r2
 800ef68:	4619      	mov	r1, r3
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	895b      	ldrh	r3, [r3, #10]
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	2200      	movs	r2, #0
 800ef72:	461c      	mov	r4, r3
 800ef74:	4615      	mov	r5, r2
 800ef76:	4622      	mov	r2, r4
 800ef78:	462b      	mov	r3, r5
 800ef7a:	f7f1 fe15 	bl	8000ba8 <__aeabi_uldivmod>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	460b      	mov	r3, r1
 800ef82:	4613      	mov	r3, r2
 800ef84:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ef86:	69bb      	ldr	r3, [r7, #24]
 800ef88:	1d1a      	adds	r2, r3, #4
 800ef8a:	61ba      	str	r2, [r7, #24]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d101      	bne.n	800ef9a <clmt_clust+0x6c>
 800ef96:	2300      	movs	r3, #0
 800ef98:	e010      	b.n	800efbc <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800ef9a:	69fa      	ldr	r2, [r7, #28]
 800ef9c:	693b      	ldr	r3, [r7, #16]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d307      	bcc.n	800efb2 <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800efa2:	69fa      	ldr	r2, [r7, #28]
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	1ad3      	subs	r3, r2, r3
 800efa8:	61fb      	str	r3, [r7, #28]
 800efaa:	69bb      	ldr	r3, [r7, #24]
 800efac:	3304      	adds	r3, #4
 800efae:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800efb0:	e7e9      	b.n	800ef86 <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800efb2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800efb4:	69bb      	ldr	r3, [r7, #24]
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	69fb      	ldr	r3, [r7, #28]
 800efba:	4413      	add	r3, r2
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3720      	adds	r7, #32
 800efc0:	46bd      	mov	sp, r7
 800efc2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800efc6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800efc6:	b580      	push	{r7, lr}
 800efc8:	b086      	sub	sp, #24
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
 800efce:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	2b04      	cmp	r3, #4
 800efdc:	d102      	bne.n	800efe4 <dir_sdi+0x1e>
 800efde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efe2:	e001      	b.n	800efe8 <dir_sdi+0x22>
 800efe4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	429a      	cmp	r2, r3
 800efec:	d904      	bls.n	800eff8 <dir_sdi+0x32>
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	f003 031f 	and.w	r3, r3, #31
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d001      	beq.n	800effc <dir_sdi+0x36>
		return FR_INT_ERR;
 800eff8:	2302      	movs	r3, #2
 800effa:	e074      	b.n	800f0e6 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	683a      	ldr	r2, [r7, #0]
 800f000:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	689b      	ldr	r3, [r3, #8]
 800f006:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d109      	bne.n	800f022 <dir_sdi+0x5c>
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	2b02      	cmp	r3, #2
 800f014:	d905      	bls.n	800f022 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f01a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2200      	movs	r2, #0
 800f020:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d10c      	bne.n	800f042 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	095b      	lsrs	r3, r3, #5
 800f02c:	693a      	ldr	r2, [r7, #16]
 800f02e:	8912      	ldrh	r2, [r2, #8]
 800f030:	4293      	cmp	r3, r2
 800f032:	d301      	bcc.n	800f038 <dir_sdi+0x72>
 800f034:	2302      	movs	r3, #2
 800f036:	e056      	b.n	800f0e6 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	639a      	str	r2, [r3, #56]	@ 0x38
 800f040:	e02d      	b.n	800f09e <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	895b      	ldrh	r3, [r3, #10]
 800f046:	461a      	mov	r2, r3
 800f048:	693b      	ldr	r3, [r7, #16]
 800f04a:	899b      	ldrh	r3, [r3, #12]
 800f04c:	fb02 f303 	mul.w	r3, r2, r3
 800f050:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f052:	e019      	b.n	800f088 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6979      	ldr	r1, [r7, #20]
 800f058:	4618      	mov	r0, r3
 800f05a:	f7ff f9e5 	bl	800e428 <get_fat>
 800f05e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f066:	d101      	bne.n	800f06c <dir_sdi+0xa6>
 800f068:	2301      	movs	r3, #1
 800f06a:	e03c      	b.n	800f0e6 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	2b01      	cmp	r3, #1
 800f070:	d904      	bls.n	800f07c <dir_sdi+0xb6>
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	6a1b      	ldr	r3, [r3, #32]
 800f076:	697a      	ldr	r2, [r7, #20]
 800f078:	429a      	cmp	r2, r3
 800f07a:	d301      	bcc.n	800f080 <dir_sdi+0xba>
 800f07c:	2302      	movs	r3, #2
 800f07e:	e032      	b.n	800f0e6 <dir_sdi+0x120>
			ofs -= csz;
 800f080:	683a      	ldr	r2, [r7, #0]
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	1ad3      	subs	r3, r2, r3
 800f086:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f088:	683a      	ldr	r2, [r7, #0]
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d2e1      	bcs.n	800f054 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800f090:	6979      	ldr	r1, [r7, #20]
 800f092:	6938      	ldr	r0, [r7, #16]
 800f094:	f7ff f9a8 	bl	800e3e8 <clust2sect>
 800f098:	4602      	mov	r2, r0
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	697a      	ldr	r2, [r7, #20]
 800f0a2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d101      	bne.n	800f0b0 <dir_sdi+0xea>
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	e01a      	b.n	800f0e6 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	899b      	ldrh	r3, [r3, #12]
 800f0b8:	4619      	mov	r1, r3
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	fbb3 f3f1 	udiv	r3, r3, r1
 800f0c0:	441a      	add	r2, r3
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	899b      	ldrh	r3, [r3, #12]
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f0d8:	fb00 f202 	mul.w	r2, r0, r2
 800f0dc:	1a9b      	subs	r3, r3, r2
 800f0de:	18ca      	adds	r2, r1, r3
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800f0e4:	2300      	movs	r3, #0
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3718      	adds	r7, #24
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}

0800f0ee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f0ee:	b580      	push	{r7, lr}
 800f0f0:	b086      	sub	sp, #24
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	6078      	str	r0, [r7, #4]
 800f0f6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f102:	3320      	adds	r3, #32
 800f104:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00b      	beq.n	800f126 <dir_next+0x38>
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	781b      	ldrb	r3, [r3, #0]
 800f112:	2b04      	cmp	r3, #4
 800f114:	d102      	bne.n	800f11c <dir_next+0x2e>
 800f116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f11a:	e001      	b.n	800f120 <dir_next+0x32>
 800f11c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	429a      	cmp	r2, r3
 800f124:	d801      	bhi.n	800f12a <dir_next+0x3c>
 800f126:	2304      	movs	r3, #4
 800f128:	e0c3      	b.n	800f2b2 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	899b      	ldrh	r3, [r3, #12]
 800f12e:	461a      	mov	r2, r3
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	fbb3 f1f2 	udiv	r1, r3, r2
 800f136:	fb01 f202 	mul.w	r2, r1, r2
 800f13a:	1a9b      	subs	r3, r3, r2
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	f040 80a5 	bne.w	800f28c <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f146:	1c5a      	adds	r2, r3, #1
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f150:	2b00      	cmp	r3, #0
 800f152:	d10b      	bne.n	800f16c <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	095b      	lsrs	r3, r3, #5
 800f158:	68fa      	ldr	r2, [r7, #12]
 800f15a:	8912      	ldrh	r2, [r2, #8]
 800f15c:	4293      	cmp	r3, r2
 800f15e:	f0c0 8095 	bcc.w	800f28c <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2200      	movs	r2, #0
 800f166:	639a      	str	r2, [r3, #56]	@ 0x38
 800f168:	2304      	movs	r3, #4
 800f16a:	e0a2      	b.n	800f2b2 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	899b      	ldrh	r3, [r3, #12]
 800f170:	461a      	mov	r2, r3
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	fbb3 f3f2 	udiv	r3, r3, r2
 800f178:	68fa      	ldr	r2, [r7, #12]
 800f17a:	8952      	ldrh	r2, [r2, #10]
 800f17c:	3a01      	subs	r2, #1
 800f17e:	4013      	ands	r3, r2
 800f180:	2b00      	cmp	r3, #0
 800f182:	f040 8083 	bne.w	800f28c <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f186:	687a      	ldr	r2, [r7, #4]
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f18c:	4619      	mov	r1, r3
 800f18e:	4610      	mov	r0, r2
 800f190:	f7ff f94a 	bl	800e428 <get_fat>
 800f194:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d801      	bhi.n	800f1a0 <dir_next+0xb2>
 800f19c:	2302      	movs	r3, #2
 800f19e:	e088      	b.n	800f2b2 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f1a0:	697b      	ldr	r3, [r7, #20]
 800f1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1a6:	d101      	bne.n	800f1ac <dir_next+0xbe>
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	e082      	b.n	800f2b2 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	6a1b      	ldr	r3, [r3, #32]
 800f1b0:	697a      	ldr	r2, [r7, #20]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d360      	bcc.n	800f278 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d104      	bne.n	800f1c6 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	639a      	str	r2, [r3, #56]	@ 0x38
 800f1c2:	2304      	movs	r3, #4
 800f1c4:	e075      	b.n	800f2b2 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f1c6:	687a      	ldr	r2, [r7, #4]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	4610      	mov	r0, r2
 800f1d0:	f7ff fdac 	bl	800ed2c <create_chain>
 800f1d4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d101      	bne.n	800f1e0 <dir_next+0xf2>
 800f1dc:	2307      	movs	r3, #7
 800f1de:	e068      	b.n	800f2b2 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	2b01      	cmp	r3, #1
 800f1e4:	d101      	bne.n	800f1ea <dir_next+0xfc>
 800f1e6:	2302      	movs	r3, #2
 800f1e8:	e063      	b.n	800f2b2 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f0:	d101      	bne.n	800f1f6 <dir_next+0x108>
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e05d      	b.n	800f2b2 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	79db      	ldrb	r3, [r3, #7]
 800f1fa:	f043 0304 	orr.w	r3, r3, #4
 800f1fe:	b2da      	uxtb	r2, r3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f204:	68f8      	ldr	r0, [r7, #12]
 800f206:	f7ff f80d 	bl	800e224 <sync_window>
 800f20a:	4603      	mov	r3, r0
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d001      	beq.n	800f214 <dir_next+0x126>
 800f210:	2301      	movs	r3, #1
 800f212:	e04e      	b.n	800f2b2 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	899b      	ldrh	r3, [r3, #12]
 800f21e:	461a      	mov	r2, r3
 800f220:	2100      	movs	r1, #0
 800f222:	f7fe fe36 	bl	800de92 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f226:	2300      	movs	r3, #0
 800f228:	613b      	str	r3, [r7, #16]
 800f22a:	6979      	ldr	r1, [r7, #20]
 800f22c:	68f8      	ldr	r0, [r7, #12]
 800f22e:	f7ff f8db 	bl	800e3e8 <clust2sect>
 800f232:	4602      	mov	r2, r0
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	639a      	str	r2, [r3, #56]	@ 0x38
 800f238:	e012      	b.n	800f260 <dir_next+0x172>
						fs->wflag = 1;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	2201      	movs	r2, #1
 800f23e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	f7fe ffef 	bl	800e224 <sync_window>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d001      	beq.n	800f250 <dir_next+0x162>
 800f24c:	2301      	movs	r3, #1
 800f24e:	e030      	b.n	800f2b2 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	3301      	adds	r3, #1
 800f254:	613b      	str	r3, [r7, #16]
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f25a:	1c5a      	adds	r2, r3, #1
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	639a      	str	r2, [r3, #56]	@ 0x38
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	895b      	ldrh	r3, [r3, #10]
 800f264:	461a      	mov	r2, r3
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	4293      	cmp	r3, r2
 800f26a:	d3e6      	bcc.n	800f23a <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	1ad2      	subs	r2, r2, r3
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	697a      	ldr	r2, [r7, #20]
 800f27c:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800f27e:	6979      	ldr	r1, [r7, #20]
 800f280:	68f8      	ldr	r0, [r7, #12]
 800f282:	f7ff f8b1 	bl	800e3e8 <clust2sect>
 800f286:	4602      	mov	r2, r0
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	68ba      	ldr	r2, [r7, #8]
 800f290:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	899b      	ldrh	r3, [r3, #12]
 800f29c:	461a      	mov	r2, r3
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	fbb3 f0f2 	udiv	r0, r3, r2
 800f2a4:	fb00 f202 	mul.w	r2, r0, r2
 800f2a8:	1a9b      	subs	r3, r3, r2
 800f2aa:	18ca      	adds	r2, r1, r3
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800f2b0:	2300      	movs	r3, #0
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3718      	adds	r7, #24
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}

0800f2ba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f2ba:	b580      	push	{r7, lr}
 800f2bc:	b086      	sub	sp, #24
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
 800f2c2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f2ca:	2100      	movs	r1, #0
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f7ff fe7a 	bl	800efc6 <dir_sdi>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f2d6:	7dfb      	ldrb	r3, [r7, #23]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d140      	bne.n	800f35e <dir_alloc+0xa4>
		n = 0;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	68f8      	ldr	r0, [r7, #12]
 800f2e8:	f7fe ffe0 	bl	800e2ac <move_window>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f2f0:	7dfb      	ldrb	r3, [r7, #23]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d132      	bne.n	800f35c <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	2b04      	cmp	r3, #4
 800f2fc:	d108      	bne.n	800f310 <dir_alloc+0x56>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	b25b      	sxtb	r3, r3
 800f306:	43db      	mvns	r3, r3
 800f308:	b2db      	uxtb	r3, r3
 800f30a:	09db      	lsrs	r3, r3, #7
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	e00f      	b.n	800f330 <dir_alloc+0x76>
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	2be5      	cmp	r3, #229	@ 0xe5
 800f318:	d004      	beq.n	800f324 <dir_alloc+0x6a>
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d101      	bne.n	800f328 <dir_alloc+0x6e>
 800f324:	2301      	movs	r3, #1
 800f326:	e000      	b.n	800f32a <dir_alloc+0x70>
 800f328:	2300      	movs	r3, #0
 800f32a:	f003 0301 	and.w	r3, r3, #1
 800f32e:	b2db      	uxtb	r3, r3
 800f330:	2b00      	cmp	r3, #0
 800f332:	d007      	beq.n	800f344 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	3301      	adds	r3, #1
 800f338:	613b      	str	r3, [r7, #16]
 800f33a:	693a      	ldr	r2, [r7, #16]
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	429a      	cmp	r2, r3
 800f340:	d102      	bne.n	800f348 <dir_alloc+0x8e>
 800f342:	e00c      	b.n	800f35e <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f344:	2300      	movs	r3, #0
 800f346:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f348:	2101      	movs	r1, #1
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f7ff fecf 	bl	800f0ee <dir_next>
 800f350:	4603      	mov	r3, r0
 800f352:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f354:	7dfb      	ldrb	r3, [r7, #23]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d0c2      	beq.n	800f2e0 <dir_alloc+0x26>
 800f35a:	e000      	b.n	800f35e <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800f35c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f35e:	7dfb      	ldrb	r3, [r7, #23]
 800f360:	2b04      	cmp	r3, #4
 800f362:	d101      	bne.n	800f368 <dir_alloc+0xae>
 800f364:	2307      	movs	r3, #7
 800f366:	75fb      	strb	r3, [r7, #23]
	return res;
 800f368:	7dfb      	ldrb	r3, [r7, #23]
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3718      	adds	r7, #24
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}

0800f372 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f372:	b580      	push	{r7, lr}
 800f374:	b084      	sub	sp, #16
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
 800f37a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	331a      	adds	r3, #26
 800f380:	4618      	mov	r0, r3
 800f382:	f7fe fb7f 	bl	800da84 <ld_word>
 800f386:	4603      	mov	r3, r0
 800f388:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	781b      	ldrb	r3, [r3, #0]
 800f38e:	2b03      	cmp	r3, #3
 800f390:	d109      	bne.n	800f3a6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	3314      	adds	r3, #20
 800f396:	4618      	mov	r0, r3
 800f398:	f7fe fb74 	bl	800da84 <ld_word>
 800f39c:	4603      	mov	r3, r0
 800f39e:	041b      	lsls	r3, r3, #16
 800f3a0:	68fa      	ldr	r2, [r7, #12]
 800f3a2:	4313      	orrs	r3, r2
 800f3a4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3710      	adds	r7, #16
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b084      	sub	sp, #16
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	60f8      	str	r0, [r7, #12]
 800f3b8:	60b9      	str	r1, [r7, #8]
 800f3ba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	331a      	adds	r3, #26
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	b292      	uxth	r2, r2
 800f3c4:	4611      	mov	r1, r2
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7fe fc73 	bl	800dcb2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	2b03      	cmp	r3, #3
 800f3d2:	d109      	bne.n	800f3e8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	f103 0214 	add.w	r2, r3, #20
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	0c1b      	lsrs	r3, r3, #16
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	4619      	mov	r1, r3
 800f3e2:	4610      	mov	r0, r2
 800f3e4:	f7fe fc65 	bl	800dcb2 <st_word>
	}
}
 800f3e8:	bf00      	nop
 800f3ea:	3710      	adds	r7, #16
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f3f0:	b590      	push	{r4, r7, lr}
 800f3f2:	b087      	sub	sp, #28
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	331a      	adds	r3, #26
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7fe fb40 	bl	800da84 <ld_word>
 800f404:	4603      	mov	r3, r0
 800f406:	2b00      	cmp	r3, #0
 800f408:	d001      	beq.n	800f40e <cmp_lfn+0x1e>
 800f40a:	2300      	movs	r3, #0
 800f40c:	e059      	b.n	800f4c2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f416:	1e5a      	subs	r2, r3, #1
 800f418:	4613      	mov	r3, r2
 800f41a:	005b      	lsls	r3, r3, #1
 800f41c:	4413      	add	r3, r2
 800f41e:	009b      	lsls	r3, r3, #2
 800f420:	4413      	add	r3, r2
 800f422:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f424:	2301      	movs	r3, #1
 800f426:	81fb      	strh	r3, [r7, #14]
 800f428:	2300      	movs	r3, #0
 800f42a:	613b      	str	r3, [r7, #16]
 800f42c:	e033      	b.n	800f496 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f42e:	4a27      	ldr	r2, [pc, #156]	@ (800f4cc <cmp_lfn+0xdc>)
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	4413      	add	r3, r2
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	461a      	mov	r2, r3
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	4413      	add	r3, r2
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7fe fb21 	bl	800da84 <ld_word>
 800f442:	4603      	mov	r3, r0
 800f444:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f446:	89fb      	ldrh	r3, [r7, #14]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d01a      	beq.n	800f482 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	2bfe      	cmp	r3, #254	@ 0xfe
 800f450:	d812      	bhi.n	800f478 <cmp_lfn+0x88>
 800f452:	89bb      	ldrh	r3, [r7, #12]
 800f454:	4618      	mov	r0, r3
 800f456:	f003 fb3b 	bl	8012ad0 <ff_wtoupper>
 800f45a:	4603      	mov	r3, r0
 800f45c:	461c      	mov	r4, r3
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	1c5a      	adds	r2, r3, #1
 800f462:	617a      	str	r2, [r7, #20]
 800f464:	005b      	lsls	r3, r3, #1
 800f466:	687a      	ldr	r2, [r7, #4]
 800f468:	4413      	add	r3, r2
 800f46a:	881b      	ldrh	r3, [r3, #0]
 800f46c:	4618      	mov	r0, r3
 800f46e:	f003 fb2f 	bl	8012ad0 <ff_wtoupper>
 800f472:	4603      	mov	r3, r0
 800f474:	429c      	cmp	r4, r3
 800f476:	d001      	beq.n	800f47c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800f478:	2300      	movs	r3, #0
 800f47a:	e022      	b.n	800f4c2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800f47c:	89bb      	ldrh	r3, [r7, #12]
 800f47e:	81fb      	strh	r3, [r7, #14]
 800f480:	e006      	b.n	800f490 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f482:	89bb      	ldrh	r3, [r7, #12]
 800f484:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f488:	4293      	cmp	r3, r2
 800f48a:	d001      	beq.n	800f490 <cmp_lfn+0xa0>
 800f48c:	2300      	movs	r3, #0
 800f48e:	e018      	b.n	800f4c2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	3301      	adds	r3, #1
 800f494:	613b      	str	r3, [r7, #16]
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	2b0c      	cmp	r3, #12
 800f49a:	d9c8      	bls.n	800f42e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d00b      	beq.n	800f4c0 <cmp_lfn+0xd0>
 800f4a8:	89fb      	ldrh	r3, [r7, #14]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d008      	beq.n	800f4c0 <cmp_lfn+0xd0>
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	005b      	lsls	r3, r3, #1
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	4413      	add	r3, r2
 800f4b6:	881b      	ldrh	r3, [r3, #0]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d001      	beq.n	800f4c0 <cmp_lfn+0xd0>
 800f4bc:	2300      	movs	r3, #0
 800f4be:	e000      	b.n	800f4c2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800f4c0:	2301      	movs	r3, #1
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	371c      	adds	r7, #28
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd90      	pop	{r4, r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	08015d2c 	.word	0x08015d2c

0800f4d0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b086      	sub	sp, #24
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	331a      	adds	r3, #26
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7fe fad0 	bl	800da84 <ld_word>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d001      	beq.n	800f4ee <pick_lfn+0x1e>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	e04d      	b.n	800f58a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f4f6:	1e5a      	subs	r2, r3, #1
 800f4f8:	4613      	mov	r3, r2
 800f4fa:	005b      	lsls	r3, r3, #1
 800f4fc:	4413      	add	r3, r2
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	4413      	add	r3, r2
 800f502:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f504:	2301      	movs	r3, #1
 800f506:	81fb      	strh	r3, [r7, #14]
 800f508:	2300      	movs	r3, #0
 800f50a:	613b      	str	r3, [r7, #16]
 800f50c:	e028      	b.n	800f560 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f50e:	4a21      	ldr	r2, [pc, #132]	@ (800f594 <pick_lfn+0xc4>)
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	4413      	add	r3, r2
 800f514:	781b      	ldrb	r3, [r3, #0]
 800f516:	461a      	mov	r2, r3
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	4413      	add	r3, r2
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7fe fab1 	bl	800da84 <ld_word>
 800f522:	4603      	mov	r3, r0
 800f524:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f526:	89fb      	ldrh	r3, [r7, #14]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d00f      	beq.n	800f54c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	2bfe      	cmp	r3, #254	@ 0xfe
 800f530:	d901      	bls.n	800f536 <pick_lfn+0x66>
 800f532:	2300      	movs	r3, #0
 800f534:	e029      	b.n	800f58a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f536:	89bb      	ldrh	r3, [r7, #12]
 800f538:	81fb      	strh	r3, [r7, #14]
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	1c5a      	adds	r2, r3, #1
 800f53e:	617a      	str	r2, [r7, #20]
 800f540:	005b      	lsls	r3, r3, #1
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	4413      	add	r3, r2
 800f546:	89fa      	ldrh	r2, [r7, #14]
 800f548:	801a      	strh	r2, [r3, #0]
 800f54a:	e006      	b.n	800f55a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f54c:	89bb      	ldrh	r3, [r7, #12]
 800f54e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f552:	4293      	cmp	r3, r2
 800f554:	d001      	beq.n	800f55a <pick_lfn+0x8a>
 800f556:	2300      	movs	r3, #0
 800f558:	e017      	b.n	800f58a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	3301      	adds	r3, #1
 800f55e:	613b      	str	r3, [r7, #16]
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	2b0c      	cmp	r3, #12
 800f564:	d9d3      	bls.n	800f50e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d00a      	beq.n	800f588 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	2bfe      	cmp	r3, #254	@ 0xfe
 800f576:	d901      	bls.n	800f57c <pick_lfn+0xac>
 800f578:	2300      	movs	r3, #0
 800f57a:	e006      	b.n	800f58a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	005b      	lsls	r3, r3, #1
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	4413      	add	r3, r2
 800f584:	2200      	movs	r2, #0
 800f586:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800f588:	2301      	movs	r3, #1
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3718      	adds	r7, #24
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
 800f592:	bf00      	nop
 800f594:	08015d2c 	.word	0x08015d2c

0800f598 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b088      	sub	sp, #32
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	60b9      	str	r1, [r7, #8]
 800f5a2:	4611      	mov	r1, r2
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	460b      	mov	r3, r1
 800f5a8:	71fb      	strb	r3, [r7, #7]
 800f5aa:	4613      	mov	r3, r2
 800f5ac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	330d      	adds	r3, #13
 800f5b2:	79ba      	ldrb	r2, [r7, #6]
 800f5b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	330b      	adds	r3, #11
 800f5ba:	220f      	movs	r2, #15
 800f5bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	330c      	adds	r3, #12
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	331a      	adds	r3, #26
 800f5ca:	2100      	movs	r1, #0
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7fe fb70 	bl	800dcb2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f5d2:	79fb      	ldrb	r3, [r7, #7]
 800f5d4:	1e5a      	subs	r2, r3, #1
 800f5d6:	4613      	mov	r3, r2
 800f5d8:	005b      	lsls	r3, r3, #1
 800f5da:	4413      	add	r3, r2
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	4413      	add	r3, r2
 800f5e0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	82fb      	strh	r3, [r7, #22]
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f5ea:	8afb      	ldrh	r3, [r7, #22]
 800f5ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d007      	beq.n	800f604 <put_lfn+0x6c>
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	1c5a      	adds	r2, r3, #1
 800f5f8:	61fa      	str	r2, [r7, #28]
 800f5fa:	005b      	lsls	r3, r3, #1
 800f5fc:	68fa      	ldr	r2, [r7, #12]
 800f5fe:	4413      	add	r3, r2
 800f600:	881b      	ldrh	r3, [r3, #0]
 800f602:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f604:	4a17      	ldr	r2, [pc, #92]	@ (800f664 <put_lfn+0xcc>)
 800f606:	69bb      	ldr	r3, [r7, #24]
 800f608:	4413      	add	r3, r2
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	461a      	mov	r2, r3
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	4413      	add	r3, r2
 800f612:	8afa      	ldrh	r2, [r7, #22]
 800f614:	4611      	mov	r1, r2
 800f616:	4618      	mov	r0, r3
 800f618:	f7fe fb4b 	bl	800dcb2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f61c:	8afb      	ldrh	r3, [r7, #22]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d102      	bne.n	800f628 <put_lfn+0x90>
 800f622:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f626:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f628:	69bb      	ldr	r3, [r7, #24]
 800f62a:	3301      	adds	r3, #1
 800f62c:	61bb      	str	r3, [r7, #24]
 800f62e:	69bb      	ldr	r3, [r7, #24]
 800f630:	2b0c      	cmp	r3, #12
 800f632:	d9da      	bls.n	800f5ea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f634:	8afb      	ldrh	r3, [r7, #22]
 800f636:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d006      	beq.n	800f64c <put_lfn+0xb4>
 800f63e:	69fb      	ldr	r3, [r7, #28]
 800f640:	005b      	lsls	r3, r3, #1
 800f642:	68fa      	ldr	r2, [r7, #12]
 800f644:	4413      	add	r3, r2
 800f646:	881b      	ldrh	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d103      	bne.n	800f654 <put_lfn+0xbc>
 800f64c:	79fb      	ldrb	r3, [r7, #7]
 800f64e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f652:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	79fa      	ldrb	r2, [r7, #7]
 800f658:	701a      	strb	r2, [r3, #0]
}
 800f65a:	bf00      	nop
 800f65c:	3720      	adds	r7, #32
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	08015d2c 	.word	0x08015d2c

0800f668 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b08c      	sub	sp, #48	@ 0x30
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	607a      	str	r2, [r7, #4]
 800f674:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f676:	220b      	movs	r2, #11
 800f678:	68b9      	ldr	r1, [r7, #8]
 800f67a:	68f8      	ldr	r0, [r7, #12]
 800f67c:	f7fe fbe8 	bl	800de50 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	2b05      	cmp	r3, #5
 800f684:	d92b      	bls.n	800f6de <gen_numname+0x76>
		sr = seq;
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f68a:	e022      	b.n	800f6d2 <gen_numname+0x6a>
			wc = *lfn++;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	1c9a      	adds	r2, r3, #2
 800f690:	607a      	str	r2, [r7, #4]
 800f692:	881b      	ldrh	r3, [r3, #0]
 800f694:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800f696:	2300      	movs	r3, #0
 800f698:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f69a:	e017      	b.n	800f6cc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	005a      	lsls	r2, r3, #1
 800f6a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f6a2:	f003 0301 	and.w	r3, r3, #1
 800f6a6:	4413      	add	r3, r2
 800f6a8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f6aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f6ac:	085b      	lsrs	r3, r3, #1
 800f6ae:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f6b0:	69fb      	ldr	r3, [r7, #28]
 800f6b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d005      	beq.n	800f6c6 <gen_numname+0x5e>
 800f6ba:	69fb      	ldr	r3, [r7, #28]
 800f6bc:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800f6c0:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800f6c4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ce:	2b0f      	cmp	r3, #15
 800f6d0:	d9e4      	bls.n	800f69c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	881b      	ldrh	r3, [r3, #0]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d1d8      	bne.n	800f68c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f6da:	69fb      	ldr	r3, [r7, #28]
 800f6dc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f6de:	2307      	movs	r3, #7
 800f6e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	f003 030f 	and.w	r3, r3, #15
 800f6ea:	b2db      	uxtb	r3, r3
 800f6ec:	3330      	adds	r3, #48	@ 0x30
 800f6ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800f6f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f6f6:	2b39      	cmp	r3, #57	@ 0x39
 800f6f8:	d904      	bls.n	800f704 <gen_numname+0x9c>
 800f6fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f6fe:	3307      	adds	r3, #7
 800f700:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800f704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f706:	1e5a      	subs	r2, r3, #1
 800f708:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f70a:	3330      	adds	r3, #48	@ 0x30
 800f70c:	443b      	add	r3, r7
 800f70e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800f712:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	091b      	lsrs	r3, r3, #4
 800f71a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d1df      	bne.n	800f6e2 <gen_numname+0x7a>
	ns[i] = '~';
 800f722:	f107 0214 	add.w	r2, r7, #20
 800f726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f728:	4413      	add	r3, r2
 800f72a:	227e      	movs	r2, #126	@ 0x7e
 800f72c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f72e:	2300      	movs	r3, #0
 800f730:	627b      	str	r3, [r7, #36]	@ 0x24
 800f732:	e002      	b.n	800f73a <gen_numname+0xd2>
 800f734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f736:	3301      	adds	r3, #1
 800f738:	627b      	str	r3, [r7, #36]	@ 0x24
 800f73a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f73e:	429a      	cmp	r2, r3
 800f740:	d205      	bcs.n	800f74e <gen_numname+0xe6>
 800f742:	68fa      	ldr	r2, [r7, #12]
 800f744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f746:	4413      	add	r3, r2
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	2b20      	cmp	r3, #32
 800f74c:	d1f2      	bne.n	800f734 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f750:	2b07      	cmp	r3, #7
 800f752:	d807      	bhi.n	800f764 <gen_numname+0xfc>
 800f754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f756:	1c5a      	adds	r2, r3, #1
 800f758:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f75a:	3330      	adds	r3, #48	@ 0x30
 800f75c:	443b      	add	r3, r7
 800f75e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f762:	e000      	b.n	800f766 <gen_numname+0xfe>
 800f764:	2120      	movs	r1, #32
 800f766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f768:	1c5a      	adds	r2, r3, #1
 800f76a:	627a      	str	r2, [r7, #36]	@ 0x24
 800f76c:	68fa      	ldr	r2, [r7, #12]
 800f76e:	4413      	add	r3, r2
 800f770:	460a      	mov	r2, r1
 800f772:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f776:	2b07      	cmp	r3, #7
 800f778:	d9e9      	bls.n	800f74e <gen_numname+0xe6>
}
 800f77a:	bf00      	nop
 800f77c:	bf00      	nop
 800f77e:	3730      	adds	r7, #48	@ 0x30
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f784:	b480      	push	{r7}
 800f786:	b085      	sub	sp, #20
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f78c:	2300      	movs	r3, #0
 800f78e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f790:	230b      	movs	r3, #11
 800f792:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f794:	7bfb      	ldrb	r3, [r7, #15]
 800f796:	b2da      	uxtb	r2, r3
 800f798:	0852      	lsrs	r2, r2, #1
 800f79a:	01db      	lsls	r3, r3, #7
 800f79c:	4313      	orrs	r3, r2
 800f79e:	b2da      	uxtb	r2, r3
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	1c59      	adds	r1, r3, #1
 800f7a4:	6079      	str	r1, [r7, #4]
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	4413      	add	r3, r2
 800f7aa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	3b01      	subs	r3, #1
 800f7b0:	60bb      	str	r3, [r7, #8]
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d1ed      	bne.n	800f794 <sum_sfn+0x10>
	return sum;
 800f7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3714      	adds	r7, #20
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c4:	4770      	bx	lr

0800f7c6 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800f7c6:	b480      	push	{r7}
 800f7c8:	b087      	sub	sp, #28
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	015b      	lsls	r3, r3, #5
 800f7d8:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800f7da:	2300      	movs	r3, #0
 800f7dc:	827b      	strh	r3, [r7, #18]
 800f7de:	2300      	movs	r3, #0
 800f7e0:	617b      	str	r3, [r7, #20]
 800f7e2:	e015      	b.n	800f810 <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	2b02      	cmp	r3, #2
 800f7e8:	d103      	bne.n	800f7f2 <xdir_sum+0x2c>
			i++;
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	617b      	str	r3, [r7, #20]
 800f7f0:	e00b      	b.n	800f80a <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800f7f2:	8a7b      	ldrh	r3, [r7, #18]
 800f7f4:	b29a      	uxth	r2, r3
 800f7f6:	0852      	lsrs	r2, r2, #1
 800f7f8:	03db      	lsls	r3, r3, #15
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	b29b      	uxth	r3, r3
 800f7fe:	6879      	ldr	r1, [r7, #4]
 800f800:	697a      	ldr	r2, [r7, #20]
 800f802:	440a      	add	r2, r1
 800f804:	7812      	ldrb	r2, [r2, #0]
 800f806:	4413      	add	r3, r2
 800f808:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	3301      	adds	r3, #1
 800f80e:	617b      	str	r3, [r7, #20]
 800f810:	697a      	ldr	r2, [r7, #20]
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	429a      	cmp	r2, r3
 800f816:	d3e5      	bcc.n	800f7e4 <xdir_sum+0x1e>
		}
	}
	return sum;
 800f818:	8a7b      	ldrh	r3, [r7, #18]
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	371c      	adds	r7, #28
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr

0800f826 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800f826:	b580      	push	{r7, lr}
 800f828:	b084      	sub	sp, #16
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800f82e:	2300      	movs	r3, #0
 800f830:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800f832:	e01b      	b.n	800f86c <xname_sum+0x46>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800f834:	89bb      	ldrh	r3, [r7, #12]
 800f836:	4618      	mov	r0, r3
 800f838:	f003 f94a 	bl	8012ad0 <ff_wtoupper>
 800f83c:	4603      	mov	r3, r0
 800f83e:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800f840:	89fb      	ldrh	r3, [r7, #14]
 800f842:	b29a      	uxth	r2, r3
 800f844:	0852      	lsrs	r2, r2, #1
 800f846:	03db      	lsls	r3, r3, #15
 800f848:	4313      	orrs	r3, r2
 800f84a:	b29a      	uxth	r2, r3
 800f84c:	89bb      	ldrh	r3, [r7, #12]
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	b29b      	uxth	r3, r3
 800f852:	4413      	add	r3, r2
 800f854:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800f856:	89fb      	ldrh	r3, [r7, #14]
 800f858:	b29a      	uxth	r2, r3
 800f85a:	0852      	lsrs	r2, r2, #1
 800f85c:	03db      	lsls	r3, r3, #15
 800f85e:	4313      	orrs	r3, r2
 800f860:	b29a      	uxth	r2, r3
 800f862:	89bb      	ldrh	r3, [r7, #12]
 800f864:	0a1b      	lsrs	r3, r3, #8
 800f866:	b29b      	uxth	r3, r3
 800f868:	4413      	add	r3, r2
 800f86a:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	1c9a      	adds	r2, r3, #2
 800f870:	607a      	str	r2, [r7, #4]
 800f872:	881b      	ldrh	r3, [r3, #0]
 800f874:	81bb      	strh	r3, [r7, #12]
 800f876:	89bb      	ldrh	r3, [r7, #12]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d1db      	bne.n	800f834 <xname_sum+0xe>
	}
	return sum;
 800f87c:	89fb      	ldrh	r3, [r7, #14]
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3710      	adds	r7, #16
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}

0800f886 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800f886:	b580      	push	{r7, lr}
 800f888:	b086      	sub	sp, #24
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	6078      	str	r0, [r7, #4]
 800f88e:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800f890:	2300      	movs	r3, #0
 800f892:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800f894:	2340      	movs	r3, #64	@ 0x40
 800f896:	613b      	str	r3, [r7, #16]
 800f898:	2300      	movs	r3, #0
 800f89a:	60fb      	str	r3, [r7, #12]
 800f89c:	e02c      	b.n	800f8f8 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	f003 031f 	and.w	r3, r3, #31
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d102      	bne.n	800f8ae <get_xdir_info+0x28>
 800f8a8:	693b      	ldr	r3, [r7, #16]
 800f8aa:	3302      	adds	r3, #2
 800f8ac:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	4413      	add	r3, r2
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7fe f8e5 	bl	800da84 <ld_word>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	2100      	movs	r1, #0
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f003 f8ca 	bl	8012a58 <ff_convert>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800f8c8:	897b      	ldrh	r3, [r7, #10]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d002      	beq.n	800f8d4 <get_xdir_info+0x4e>
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	2bfe      	cmp	r3, #254	@ 0xfe
 800f8d2:	d902      	bls.n	800f8da <get_xdir_info+0x54>
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	617b      	str	r3, [r7, #20]
 800f8d8:	e015      	b.n	800f906 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	1c5a      	adds	r2, r3, #1
 800f8de:	617a      	str	r2, [r7, #20]
 800f8e0:	897a      	ldrh	r2, [r7, #10]
 800f8e2:	b2d1      	uxtb	r1, r2
 800f8e4:	683a      	ldr	r2, [r7, #0]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	460a      	mov	r2, r1
 800f8ea:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	3302      	adds	r3, #2
 800f8f0:	613b      	str	r3, [r7, #16]
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	3301      	adds	r3, #1
 800f8f6:	60fb      	str	r3, [r7, #12]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	3323      	adds	r3, #35	@ 0x23
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	461a      	mov	r2, r3
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	4293      	cmp	r3, r2
 800f904:	d3cb      	bcc.n	800f89e <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d106      	bne.n	800f91a <get_xdir_info+0x94>
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	1c5a      	adds	r2, r3, #1
 800f910:	617a      	str	r2, [r7, #20]
 800f912:	683a      	ldr	r2, [r7, #0]
 800f914:	4413      	add	r3, r2
 800f916:	223f      	movs	r2, #63	@ 0x3f
 800f918:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800f91a:	683a      	ldr	r2, [r7, #0]
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	4413      	add	r3, r2
 800f920:	331a      	adds	r3, #26
 800f922:	2200      	movs	r2, #0
 800f924:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	2200      	movs	r2, #0
 800f92a:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	791a      	ldrb	r2, [r3, #4]
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	7b1b      	ldrb	r3, [r3, #12]
 800f938:	f003 0310 	and.w	r3, r3, #16
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d107      	bne.n	800f950 <get_xdir_info+0xca>
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	3338      	adds	r3, #56	@ 0x38
 800f944:	4618      	mov	r0, r3
 800f946:	f7fe f8d9 	bl	800dafc <ld_qword>
 800f94a:	4602      	mov	r2, r0
 800f94c:	460b      	mov	r3, r1
 800f94e:	e003      	b.n	800f958 <get_xdir_info+0xd2>
 800f950:	f04f 0200 	mov.w	r2, #0
 800f954:	f04f 0300 	mov.w	r3, #0
 800f958:	6839      	ldr	r1, [r7, #0]
 800f95a:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	330c      	adds	r3, #12
 800f962:	4618      	mov	r0, r3
 800f964:	f7fe f88e 	bl	800da84 <ld_word>
 800f968:	4603      	mov	r3, r0
 800f96a:	461a      	mov	r2, r3
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	330e      	adds	r3, #14
 800f974:	4618      	mov	r0, r3
 800f976:	f7fe f885 	bl	800da84 <ld_word>
 800f97a:	4603      	mov	r3, r0
 800f97c:	461a      	mov	r2, r3
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	811a      	strh	r2, [r3, #8]
}
 800f982:	bf00      	nop
 800f984:	3718      	adds	r7, #24
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
	...

0800f98c <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800f98c:	b590      	push	{r4, r7, lr}
 800f98e:	b087      	sub	sp, #28
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	695b      	ldr	r3, [r3, #20]
 800f99a:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681a      	ldr	r2, [r3, #0]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	4610      	mov	r0, r2
 800f9a8:	f7fe fc80 	bl	800e2ac <move_window>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800f9b0:	7bfb      	ldrb	r3, [r7, #15]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d001      	beq.n	800f9ba <load_xdir+0x2e>
 800f9b6:	7bfb      	ldrb	r3, [r7, #15]
 800f9b8:	e09f      	b.n	800fafa <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	2b85      	cmp	r3, #133	@ 0x85
 800f9c2:	d001      	beq.n	800f9c8 <load_xdir+0x3c>
 800f9c4:	2302      	movs	r3, #2
 800f9c6:	e098      	b.n	800fafa <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9cc:	2220      	movs	r2, #32
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	6938      	ldr	r0, [r7, #16]
 800f9d2:	f7fe fa3d 	bl	800de50 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800f9d6:	693b      	ldr	r3, [r7, #16]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	3301      	adds	r3, #1
 800f9de:	015b      	lsls	r3, r3, #5
 800f9e0:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	2b5f      	cmp	r3, #95	@ 0x5f
 800f9e6:	d903      	bls.n	800f9f0 <load_xdir+0x64>
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800f9ee:	d901      	bls.n	800f9f4 <load_xdir+0x68>
 800f9f0:	2302      	movs	r3, #2
 800f9f2:	e082      	b.n	800fafa <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800f9f4:	2100      	movs	r1, #0
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f7ff fb79 	bl	800f0ee <dir_next>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800fa00:	7bfb      	ldrb	r3, [r7, #15]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d001      	beq.n	800fa0a <load_xdir+0x7e>
 800fa06:	7bfb      	ldrb	r3, [r7, #15]
 800fa08:	e077      	b.n	800fafa <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681a      	ldr	r2, [r3, #0]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa12:	4619      	mov	r1, r3
 800fa14:	4610      	mov	r0, r2
 800fa16:	f7fe fc49 	bl	800e2ac <move_window>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800fa1e:	7bfb      	ldrb	r3, [r7, #15]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d001      	beq.n	800fa28 <load_xdir+0x9c>
 800fa24:	7bfb      	ldrb	r3, [r7, #15]
 800fa26:	e068      	b.n	800fafa <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	2bc0      	cmp	r3, #192	@ 0xc0
 800fa30:	d001      	beq.n	800fa36 <load_xdir+0xaa>
 800fa32:	2302      	movs	r3, #2
 800fa34:	e061      	b.n	800fafa <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	f103 0020 	add.w	r0, r3, #32
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa40:	2220      	movs	r2, #32
 800fa42:	4619      	mov	r1, r3
 800fa44:	f7fe fa04 	bl	800de50 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	3323      	adds	r3, #35	@ 0x23
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	332c      	adds	r3, #44	@ 0x2c
 800fa50:	4a2c      	ldr	r2, [pc, #176]	@ (800fb04 <load_xdir+0x178>)
 800fa52:	fba2 2303 	umull	r2, r3, r2, r3
 800fa56:	08db      	lsrs	r3, r3, #3
 800fa58:	015b      	lsls	r3, r3, #5
 800fa5a:	68ba      	ldr	r2, [r7, #8]
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d201      	bcs.n	800fa64 <load_xdir+0xd8>
 800fa60:	2302      	movs	r3, #2
 800fa62:	e04a      	b.n	800fafa <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800fa64:	2340      	movs	r3, #64	@ 0x40
 800fa66:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800fa68:	2100      	movs	r1, #0
 800fa6a:	6878      	ldr	r0, [r7, #4]
 800fa6c:	f7ff fb3f 	bl	800f0ee <dir_next>
 800fa70:	4603      	mov	r3, r0
 800fa72:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800fa74:	7bfb      	ldrb	r3, [r7, #15]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d001      	beq.n	800fa7e <load_xdir+0xf2>
 800fa7a:	7bfb      	ldrb	r3, [r7, #15]
 800fa7c:	e03d      	b.n	800fafa <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681a      	ldr	r2, [r3, #0]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa86:	4619      	mov	r1, r3
 800fa88:	4610      	mov	r0, r2
 800fa8a:	f7fe fc0f 	bl	800e2ac <move_window>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800fa92:	7bfb      	ldrb	r3, [r7, #15]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d001      	beq.n	800fa9c <load_xdir+0x110>
 800fa98:	7bfb      	ldrb	r3, [r7, #15]
 800fa9a:	e02e      	b.n	800fafa <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	2bc1      	cmp	r3, #193	@ 0xc1
 800faa4:	d001      	beq.n	800faaa <load_xdir+0x11e>
 800faa6:	2302      	movs	r3, #2
 800faa8:	e027      	b.n	800fafa <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800fab0:	d208      	bcs.n	800fac4 <load_xdir+0x138>
 800fab2:	693a      	ldr	r2, [r7, #16]
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	18d0      	adds	r0, r2, r3
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fabc:	2220      	movs	r2, #32
 800fabe:	4619      	mov	r1, r3
 800fac0:	f7fe f9c6 	bl	800de50 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	3320      	adds	r3, #32
 800fac8:	617b      	str	r3, [r7, #20]
 800faca:	697a      	ldr	r2, [r7, #20]
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	429a      	cmp	r2, r3
 800fad0:	d3ca      	bcc.n	800fa68 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800fad8:	d80e      	bhi.n	800faf8 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800fada:	6938      	ldr	r0, [r7, #16]
 800fadc:	f7ff fe73 	bl	800f7c6 <xdir_sum>
 800fae0:	4603      	mov	r3, r0
 800fae2:	461c      	mov	r4, r3
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	3302      	adds	r3, #2
 800fae8:	4618      	mov	r0, r3
 800faea:	f7fd ffcb 	bl	800da84 <ld_word>
 800faee:	4603      	mov	r3, r0
 800faf0:	429c      	cmp	r4, r3
 800faf2:	d001      	beq.n	800faf8 <load_xdir+0x16c>
 800faf4:	2302      	movs	r3, #2
 800faf6:	e000      	b.n	800fafa <load_xdir+0x16e>
	}
	return FR_OK;
 800faf8:	2300      	movs	r3, #0
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	371c      	adds	r7, #28
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd90      	pop	{r4, r7, pc}
 800fb02:	bf00      	nop
 800fb04:	88888889 	.word	0x88888889

0800fb08 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800fb08:	b5b0      	push	{r4, r5, r7, lr}
 800fb0a:	b084      	sub	sp, #16
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800fb12:	6839      	ldr	r1, [r7, #0]
 800fb14:	6808      	ldr	r0, [r1, #0]
 800fb16:	6879      	ldr	r1, [r7, #4]
 800fb18:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800fb1a:	6839      	ldr	r1, [r7, #0]
 800fb1c:	6a08      	ldr	r0, [r1, #32]
 800fb1e:	6879      	ldr	r1, [r7, #4]
 800fb20:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800fb22:	6839      	ldr	r1, [r7, #0]
 800fb24:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800fb26:	b2c8      	uxtb	r0, r1
 800fb28:	6879      	ldr	r1, [r7, #4]
 800fb2a:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800fb2c:	6839      	ldr	r1, [r7, #0]
 800fb2e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800fb30:	2000      	movs	r0, #0
 800fb32:	460c      	mov	r4, r1
 800fb34:	4605      	mov	r5, r0
 800fb36:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	6879      	ldr	r1, [r7, #4]
 800fb3e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb4e:	4619      	mov	r1, r3
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f7ff fa38 	bl	800efc6 <dir_sdi>
 800fb56:	4603      	mov	r3, r0
 800fb58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fb5a:	7bfb      	ldrb	r3, [r7, #15]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d104      	bne.n	800fb6a <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f7ff ff13 	bl	800f98c <load_xdir>
 800fb66:	4603      	mov	r3, r0
 800fb68:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800fb6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3710      	adds	r7, #16
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bdb0      	pop	{r4, r5, r7, pc}

0800fb74 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800fb74:	b590      	push	{r4, r7, lr}
 800fb76:	b087      	sub	sp, #28
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	695b      	ldr	r3, [r3, #20]
 800fb82:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	1c9c      	adds	r4, r3, #2
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f7ff fe1c 	bl	800f7c6 <xdir_sum>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	4619      	mov	r1, r3
 800fb92:	4620      	mov	r0, r4
 800fb94:	f7fe f88d 	bl	800dcb2 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	781b      	ldrb	r3, [r3, #0]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fba6:	4619      	mov	r1, r3
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f7ff fa0c 	bl	800efc6 <dir_sdi>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800fbb2:	e026      	b.n	800fc02 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681a      	ldr	r2, [r3, #0]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	4610      	mov	r0, r2
 800fbc0:	f7fe fb74 	bl	800e2ac <move_window>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fbc8:	7dfb      	ldrb	r3, [r7, #23]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d11d      	bne.n	800fc0a <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbd2:	2220      	movs	r2, #32
 800fbd4:	68f9      	ldr	r1, [r7, #12]
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7fe f93a 	bl	800de50 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	2201      	movs	r2, #1
 800fbe2:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	3b01      	subs	r3, #1
 800fbe8:	613b      	str	r3, [r7, #16]
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d00e      	beq.n	800fc0e <store_xdir+0x9a>
		dirb += SZDIRE;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	3320      	adds	r3, #32
 800fbf4:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800fbf6:	2100      	movs	r1, #0
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f7ff fa78 	bl	800f0ee <dir_next>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800fc02:	7dfb      	ldrb	r3, [r7, #23]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d0d5      	beq.n	800fbb4 <store_xdir+0x40>
 800fc08:	e002      	b.n	800fc10 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800fc0a:	bf00      	nop
 800fc0c:	e000      	b.n	800fc10 <store_xdir+0x9c>
		if (--nent == 0) break;
 800fc0e:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800fc10:	7dfb      	ldrb	r3, [r7, #23]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d002      	beq.n	800fc1c <store_xdir+0xa8>
 800fc16:	7dfb      	ldrb	r3, [r7, #23]
 800fc18:	2b01      	cmp	r3, #1
 800fc1a:	d101      	bne.n	800fc20 <store_xdir+0xac>
 800fc1c:	7dfb      	ldrb	r3, [r7, #23]
 800fc1e:	e000      	b.n	800fc22 <store_xdir+0xae>
 800fc20:	2302      	movs	r3, #2
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	371c      	adds	r7, #28
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd90      	pop	{r4, r7, pc}

0800fc2a <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800fc2a:	b590      	push	{r4, r7, lr}
 800fc2c:	b085      	sub	sp, #20
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	6078      	str	r0, [r7, #4]
 800fc32:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800fc34:	2240      	movs	r2, #64	@ 0x40
 800fc36:	2100      	movs	r1, #0
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f7fe f92a 	bl	800de92 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2285      	movs	r2, #133	@ 0x85
 800fc42:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	3320      	adds	r3, #32
 800fc48:	22c0      	movs	r2, #192	@ 0xc0
 800fc4a:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	72bb      	strb	r3, [r7, #10]
 800fc50:	2301      	movs	r3, #1
 800fc52:	72fb      	strb	r3, [r7, #11]
 800fc54:	2301      	movs	r3, #1
 800fc56:	813b      	strh	r3, [r7, #8]
 800fc58:	2340      	movs	r3, #64	@ 0x40
 800fc5a:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	1c5a      	adds	r2, r3, #1
 800fc60:	60fa      	str	r2, [r7, #12]
 800fc62:	687a      	ldr	r2, [r7, #4]
 800fc64:	4413      	add	r3, r2
 800fc66:	22c1      	movs	r2, #193	@ 0xc1
 800fc68:	701a      	strb	r2, [r3, #0]
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	1c5a      	adds	r2, r3, #1
 800fc6e:	60fa      	str	r2, [r7, #12]
 800fc70:	687a      	ldr	r2, [r7, #4]
 800fc72:	4413      	add	r3, r2
 800fc74:	2200      	movs	r2, #0
 800fc76:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800fc78:	893b      	ldrh	r3, [r7, #8]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d00b      	beq.n	800fc96 <create_xdir+0x6c>
 800fc7e:	7abb      	ldrb	r3, [r7, #10]
 800fc80:	005b      	lsls	r3, r3, #1
 800fc82:	683a      	ldr	r2, [r7, #0]
 800fc84:	4413      	add	r3, r2
 800fc86:	881b      	ldrh	r3, [r3, #0]
 800fc88:	813b      	strh	r3, [r7, #8]
 800fc8a:	893b      	ldrh	r3, [r7, #8]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d002      	beq.n	800fc96 <create_xdir+0x6c>
 800fc90:	7abb      	ldrb	r3, [r7, #10]
 800fc92:	3301      	adds	r3, #1
 800fc94:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800fc96:	687a      	ldr	r2, [r7, #4]
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	4413      	add	r3, r2
 800fc9c:	893a      	ldrh	r2, [r7, #8]
 800fc9e:	4611      	mov	r1, r2
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7fe f806 	bl	800dcb2 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	3302      	adds	r3, #2
 800fcaa:	60fb      	str	r3, [r7, #12]
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	f003 031f 	and.w	r3, r3, #31
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d1e0      	bne.n	800fc78 <create_xdir+0x4e>
		nb++;
 800fcb6:	7afb      	ldrb	r3, [r7, #11]
 800fcb8:	3301      	adds	r3, #1
 800fcba:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800fcbc:	7abb      	ldrb	r3, [r7, #10]
 800fcbe:	005b      	lsls	r3, r3, #1
 800fcc0:	683a      	ldr	r2, [r7, #0]
 800fcc2:	4413      	add	r3, r2
 800fcc4:	881b      	ldrh	r3, [r3, #0]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d1c8      	bne.n	800fc5c <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	3323      	adds	r3, #35	@ 0x23
 800fcce:	7aba      	ldrb	r2, [r7, #10]
 800fcd0:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	3301      	adds	r3, #1
 800fcd6:	7afa      	ldrb	r2, [r7, #11]
 800fcd8:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800fce0:	6838      	ldr	r0, [r7, #0]
 800fce2:	f7ff fda0 	bl	800f826 <xname_sum>
 800fce6:	4603      	mov	r3, r0
 800fce8:	4619      	mov	r1, r3
 800fcea:	4620      	mov	r0, r4
 800fcec:	f7fd ffe1 	bl	800dcb2 <st_word>
}
 800fcf0:	bf00      	nop
 800fcf2:	3714      	adds	r7, #20
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd90      	pop	{r4, r7, pc}

0800fcf8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b086      	sub	sp, #24
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800fd02:	2304      	movs	r3, #4
 800fd04:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800fd0c:	23ff      	movs	r3, #255	@ 0xff
 800fd0e:	757b      	strb	r3, [r7, #21]
 800fd10:	23ff      	movs	r3, #255	@ 0xff
 800fd12:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800fd14:	e09f      	b.n	800fe56 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	6938      	ldr	r0, [r7, #16]
 800fd1e:	f7fe fac5 	bl	800e2ac <move_window>
 800fd22:	4603      	mov	r3, r0
 800fd24:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fd26:	7dfb      	ldrb	r3, [r7, #23]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	f040 809a 	bne.w	800fe62 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800fd36:	7dbb      	ldrb	r3, [r7, #22]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d102      	bne.n	800fd42 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800fd3c:	2304      	movs	r3, #4
 800fd3e:	75fb      	strb	r3, [r7, #23]
 800fd40:	e096      	b.n	800fe70 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	781b      	ldrb	r3, [r3, #0]
 800fd46:	2b04      	cmp	r3, #4
 800fd48:	d118      	bne.n	800fd7c <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800fd4a:	7dbb      	ldrb	r3, [r7, #22]
 800fd4c:	2b85      	cmp	r3, #133	@ 0x85
 800fd4e:	d179      	bne.n	800fe44 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f7ff fe17 	bl	800f98c <load_xdir>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800fd62:	7dfb      	ldrb	r3, [r7, #23]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d17e      	bne.n	800fe66 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	695b      	ldr	r3, [r3, #20]
 800fd6c:	3304      	adds	r3, #4
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fd74:	b2da      	uxtb	r2, r3
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	719a      	strb	r2, [r3, #6]
					}
					break;
 800fd7a:	e074      	b.n	800fe66 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd80:	330b      	adds	r3, #11
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fd88:	73fb      	strb	r3, [r7, #15]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	7bfa      	ldrb	r2, [r7, #15]
 800fd8e:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800fd90:	7dbb      	ldrb	r3, [r7, #22]
 800fd92:	2be5      	cmp	r3, #229	@ 0xe5
 800fd94:	d00e      	beq.n	800fdb4 <dir_read+0xbc>
 800fd96:	7dbb      	ldrb	r3, [r7, #22]
 800fd98:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd9a:	d00b      	beq.n	800fdb4 <dir_read+0xbc>
 800fd9c:	7bfb      	ldrb	r3, [r7, #15]
 800fd9e:	f023 0320 	bic.w	r3, r3, #32
 800fda2:	2b08      	cmp	r3, #8
 800fda4:	bf0c      	ite	eq
 800fda6:	2301      	moveq	r3, #1
 800fda8:	2300      	movne	r3, #0
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	461a      	mov	r2, r3
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	4293      	cmp	r3, r2
 800fdb2:	d002      	beq.n	800fdba <dir_read+0xc2>
				ord = 0xFF;
 800fdb4:	23ff      	movs	r3, #255	@ 0xff
 800fdb6:	757b      	strb	r3, [r7, #21]
 800fdb8:	e044      	b.n	800fe44 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800fdba:	7bfb      	ldrb	r3, [r7, #15]
 800fdbc:	2b0f      	cmp	r3, #15
 800fdbe:	d12f      	bne.n	800fe20 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800fdc0:	7dbb      	ldrb	r3, [r7, #22]
 800fdc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d00d      	beq.n	800fde6 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdce:	7b5b      	ldrb	r3, [r3, #13]
 800fdd0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800fdd2:	7dbb      	ldrb	r3, [r7, #22]
 800fdd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fdd8:	75bb      	strb	r3, [r7, #22]
 800fdda:	7dbb      	ldrb	r3, [r7, #22]
 800fddc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fde6:	7dba      	ldrb	r2, [r7, #22]
 800fde8:	7d7b      	ldrb	r3, [r7, #21]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d115      	bne.n	800fe1a <dir_read+0x122>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdf2:	330d      	adds	r3, #13
 800fdf4:	781b      	ldrb	r3, [r3, #0]
 800fdf6:	7d3a      	ldrb	r2, [r7, #20]
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d10e      	bne.n	800fe1a <dir_read+0x122>
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	691a      	ldr	r2, [r3, #16]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe04:	4619      	mov	r1, r3
 800fe06:	4610      	mov	r0, r2
 800fe08:	f7ff fb62 	bl	800f4d0 <pick_lfn>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d003      	beq.n	800fe1a <dir_read+0x122>
 800fe12:	7d7b      	ldrb	r3, [r7, #21]
 800fe14:	3b01      	subs	r3, #1
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	e000      	b.n	800fe1c <dir_read+0x124>
 800fe1a:	23ff      	movs	r3, #255	@ 0xff
 800fe1c:	757b      	strb	r3, [r7, #21]
 800fe1e:	e011      	b.n	800fe44 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800fe20:	7d7b      	ldrb	r3, [r7, #21]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d109      	bne.n	800fe3a <dir_read+0x142>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7ff fcaa 	bl	800f784 <sum_sfn>
 800fe30:	4603      	mov	r3, r0
 800fe32:	461a      	mov	r2, r3
 800fe34:	7d3b      	ldrb	r3, [r7, #20]
 800fe36:	4293      	cmp	r3, r2
 800fe38:	d017      	beq.n	800fe6a <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f04f 32ff 	mov.w	r2, #4294967295
 800fe40:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800fe42:	e012      	b.n	800fe6a <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800fe44:	2100      	movs	r1, #0
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f7ff f951 	bl	800f0ee <dir_next>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fe50:	7dfb      	ldrb	r3, [r7, #23]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d10b      	bne.n	800fe6e <dir_read+0x176>
	while (dp->sect) {
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	f47f af5b 	bne.w	800fd16 <dir_read+0x1e>
 800fe60:	e006      	b.n	800fe70 <dir_read+0x178>
		if (res != FR_OK) break;
 800fe62:	bf00      	nop
 800fe64:	e004      	b.n	800fe70 <dir_read+0x178>
					break;
 800fe66:	bf00      	nop
 800fe68:	e002      	b.n	800fe70 <dir_read+0x178>
					break;
 800fe6a:	bf00      	nop
 800fe6c:	e000      	b.n	800fe70 <dir_read+0x178>
		if (res != FR_OK) break;
 800fe6e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800fe70:	7dfb      	ldrb	r3, [r7, #23]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d002      	beq.n	800fe7c <dir_read+0x184>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800fe7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3718      	adds	r7, #24
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}

0800fe86 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fe86:	b590      	push	{r4, r7, lr}
 800fe88:	b089      	sub	sp, #36	@ 0x24
 800fe8a:	af00      	add	r7, sp, #0
 800fe8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fe94:	2100      	movs	r1, #0
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f7ff f895 	bl	800efc6 <dir_sdi>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800fea0:	7ffb      	ldrb	r3, [r7, #31]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d001      	beq.n	800feaa <dir_find+0x24>
 800fea6:	7ffb      	ldrb	r3, [r7, #31]
 800fea8:	e113      	b.n	80100d2 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	2b04      	cmp	r3, #4
 800feb0:	d165      	bne.n	800ff7e <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	691b      	ldr	r3, [r3, #16]
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7ff fcb5 	bl	800f826 <xname_sum>
 800febc:	4603      	mov	r3, r0
 800febe:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800fec0:	e050      	b.n	800ff64 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	695b      	ldr	r3, [r3, #20]
 800fec6:	3324      	adds	r3, #36	@ 0x24
 800fec8:	4618      	mov	r0, r3
 800feca:	f7fd fddb 	bl	800da84 <ld_word>
 800fece:	4603      	mov	r3, r0
 800fed0:	461a      	mov	r2, r3
 800fed2:	893b      	ldrh	r3, [r7, #8]
 800fed4:	4293      	cmp	r3, r2
 800fed6:	d144      	bne.n	800ff62 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	695b      	ldr	r3, [r3, #20]
 800fedc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800fee0:	76fb      	strb	r3, [r7, #27]
 800fee2:	2340      	movs	r3, #64	@ 0x40
 800fee4:	617b      	str	r3, [r7, #20]
 800fee6:	2300      	movs	r3, #0
 800fee8:	613b      	str	r3, [r7, #16]
 800feea:	e029      	b.n	800ff40 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	f003 031f 	and.w	r3, r3, #31
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d102      	bne.n	800fefc <dir_find+0x76>
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	3302      	adds	r3, #2
 800fefa:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	695a      	ldr	r2, [r3, #20]
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	4413      	add	r3, r2
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7fd fdbd 	bl	800da84 <ld_word>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f002 fddf 	bl	8012ad0 <ff_wtoupper>
 800ff12:	4603      	mov	r3, r0
 800ff14:	461c      	mov	r4, r3
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	691a      	ldr	r2, [r3, #16]
 800ff1a:	693b      	ldr	r3, [r7, #16]
 800ff1c:	005b      	lsls	r3, r3, #1
 800ff1e:	4413      	add	r3, r2
 800ff20:	881b      	ldrh	r3, [r3, #0]
 800ff22:	4618      	mov	r0, r3
 800ff24:	f002 fdd4 	bl	8012ad0 <ff_wtoupper>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	429c      	cmp	r4, r3
 800ff2c:	d10c      	bne.n	800ff48 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800ff2e:	7efb      	ldrb	r3, [r7, #27]
 800ff30:	3b01      	subs	r3, #1
 800ff32:	76fb      	strb	r3, [r7, #27]
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	3302      	adds	r3, #2
 800ff38:	617b      	str	r3, [r7, #20]
 800ff3a:	693b      	ldr	r3, [r7, #16]
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	613b      	str	r3, [r7, #16]
 800ff40:	7efb      	ldrb	r3, [r7, #27]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d1d2      	bne.n	800feec <dir_find+0x66>
 800ff46:	e000      	b.n	800ff4a <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800ff48:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ff4a:	7efb      	ldrb	r3, [r7, #27]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d109      	bne.n	800ff64 <dir_find+0xde>
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	691a      	ldr	r2, [r3, #16]
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	005b      	lsls	r3, r3, #1
 800ff58:	4413      	add	r3, r2
 800ff5a:	881b      	ldrh	r3, [r3, #0]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d00b      	beq.n	800ff78 <dir_find+0xf2>
 800ff60:	e000      	b.n	800ff64 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800ff62:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800ff64:	2100      	movs	r1, #0
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f7ff fec6 	bl	800fcf8 <dir_read>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	77fb      	strb	r3, [r7, #31]
 800ff70:	7ffb      	ldrb	r3, [r7, #31]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d0a5      	beq.n	800fec2 <dir_find+0x3c>
 800ff76:	e000      	b.n	800ff7a <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ff78:	bf00      	nop
		}
		return res;
 800ff7a:	7ffb      	ldrb	r3, [r7, #31]
 800ff7c:	e0a9      	b.n	80100d2 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ff7e:	23ff      	movs	r3, #255	@ 0xff
 800ff80:	773b      	strb	r3, [r7, #28]
 800ff82:	7f3b      	ldrb	r3, [r7, #28]
 800ff84:	777b      	strb	r3, [r7, #29]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f04f 32ff 	mov.w	r2, #4294967295
 800ff8c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff92:	4619      	mov	r1, r3
 800ff94:	68f8      	ldr	r0, [r7, #12]
 800ff96:	f7fe f989 	bl	800e2ac <move_window>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800ff9e:	7ffb      	ldrb	r3, [r7, #31]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	f040 8090 	bne.w	80100c6 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ffae:	7fbb      	ldrb	r3, [r7, #30]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d102      	bne.n	800ffba <dir_find+0x134>
 800ffb4:	2304      	movs	r3, #4
 800ffb6:	77fb      	strb	r3, [r7, #31]
 800ffb8:	e08a      	b.n	80100d0 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffbe:	330b      	adds	r3, #11
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ffc6:	72fb      	strb	r3, [r7, #11]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	7afa      	ldrb	r2, [r7, #11]
 800ffcc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ffce:	7fbb      	ldrb	r3, [r7, #30]
 800ffd0:	2be5      	cmp	r3, #229	@ 0xe5
 800ffd2:	d007      	beq.n	800ffe4 <dir_find+0x15e>
 800ffd4:	7afb      	ldrb	r3, [r7, #11]
 800ffd6:	f003 0308 	and.w	r3, r3, #8
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d009      	beq.n	800fff2 <dir_find+0x16c>
 800ffde:	7afb      	ldrb	r3, [r7, #11]
 800ffe0:	2b0f      	cmp	r3, #15
 800ffe2:	d006      	beq.n	800fff2 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ffe4:	23ff      	movs	r3, #255	@ 0xff
 800ffe6:	777b      	strb	r3, [r7, #29]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f04f 32ff 	mov.w	r2, #4294967295
 800ffee:	64da      	str	r2, [r3, #76]	@ 0x4c
 800fff0:	e05e      	b.n	80100b0 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800fff2:	7afb      	ldrb	r3, [r7, #11]
 800fff4:	2b0f      	cmp	r3, #15
 800fff6:	d136      	bne.n	8010066 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800fffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010002:	2b00      	cmp	r3, #0
 8010004:	d154      	bne.n	80100b0 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010006:	7fbb      	ldrb	r3, [r7, #30]
 8010008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801000c:	2b00      	cmp	r3, #0
 801000e:	d00d      	beq.n	801002c <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010014:	7b5b      	ldrb	r3, [r3, #13]
 8010016:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8010018:	7fbb      	ldrb	r3, [r7, #30]
 801001a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801001e:	77bb      	strb	r3, [r7, #30]
 8010020:	7fbb      	ldrb	r3, [r7, #30]
 8010022:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801002c:	7fba      	ldrb	r2, [r7, #30]
 801002e:	7f7b      	ldrb	r3, [r7, #29]
 8010030:	429a      	cmp	r2, r3
 8010032:	d115      	bne.n	8010060 <dir_find+0x1da>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010038:	330d      	adds	r3, #13
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	7f3a      	ldrb	r2, [r7, #28]
 801003e:	429a      	cmp	r2, r3
 8010040:	d10e      	bne.n	8010060 <dir_find+0x1da>
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	691a      	ldr	r2, [r3, #16]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801004a:	4619      	mov	r1, r3
 801004c:	4610      	mov	r0, r2
 801004e:	f7ff f9cf 	bl	800f3f0 <cmp_lfn>
 8010052:	4603      	mov	r3, r0
 8010054:	2b00      	cmp	r3, #0
 8010056:	d003      	beq.n	8010060 <dir_find+0x1da>
 8010058:	7f7b      	ldrb	r3, [r7, #29]
 801005a:	3b01      	subs	r3, #1
 801005c:	b2db      	uxtb	r3, r3
 801005e:	e000      	b.n	8010062 <dir_find+0x1dc>
 8010060:	23ff      	movs	r3, #255	@ 0xff
 8010062:	777b      	strb	r3, [r7, #29]
 8010064:	e024      	b.n	80100b0 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010066:	7f7b      	ldrb	r3, [r7, #29]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d109      	bne.n	8010080 <dir_find+0x1fa>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010070:	4618      	mov	r0, r3
 8010072:	f7ff fb87 	bl	800f784 <sum_sfn>
 8010076:	4603      	mov	r3, r0
 8010078:	461a      	mov	r2, r3
 801007a:	7f3b      	ldrb	r3, [r7, #28]
 801007c:	4293      	cmp	r3, r2
 801007e:	d024      	beq.n	80100ca <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8010086:	f003 0301 	and.w	r3, r3, #1
 801008a:	2b00      	cmp	r3, #0
 801008c:	d10a      	bne.n	80100a4 <dir_find+0x21e>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	3340      	adds	r3, #64	@ 0x40
 8010096:	220b      	movs	r2, #11
 8010098:	4619      	mov	r1, r3
 801009a:	f7fd ff15 	bl	800dec8 <mem_cmp>
 801009e:	4603      	mov	r3, r0
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d014      	beq.n	80100ce <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80100a4:	23ff      	movs	r3, #255	@ 0xff
 80100a6:	777b      	strb	r3, [r7, #29]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f04f 32ff 	mov.w	r2, #4294967295
 80100ae:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80100b0:	2100      	movs	r1, #0
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f7ff f81b 	bl	800f0ee <dir_next>
 80100b8:	4603      	mov	r3, r0
 80100ba:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 80100bc:	7ffb      	ldrb	r3, [r7, #31]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	f43f af65 	beq.w	800ff8e <dir_find+0x108>
 80100c4:	e004      	b.n	80100d0 <dir_find+0x24a>
		if (res != FR_OK) break;
 80100c6:	bf00      	nop
 80100c8:	e002      	b.n	80100d0 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80100ca:	bf00      	nop
 80100cc:	e000      	b.n	80100d0 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80100ce:	bf00      	nop

	return res;
 80100d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80100d2:	4618      	mov	r0, r3
 80100d4:	3724      	adds	r7, #36	@ 0x24
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd90      	pop	{r4, r7, pc}
	...

080100dc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80100dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80100e0:	b0a0      	sub	sp, #128	@ 0x80
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80100f2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d001      	beq.n	80100fe <dir_register+0x22>
 80100fa:	2306      	movs	r3, #6
 80100fc:	e192      	b.n	8010424 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80100fe:	2300      	movs	r3, #0
 8010100:	677b      	str	r3, [r7, #116]	@ 0x74
 8010102:	e002      	b.n	801010a <dir_register+0x2e>
 8010104:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010106:	3301      	adds	r3, #1
 8010108:	677b      	str	r3, [r7, #116]	@ 0x74
 801010a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801010c:	691a      	ldr	r2, [r3, #16]
 801010e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010110:	005b      	lsls	r3, r3, #1
 8010112:	4413      	add	r3, r2
 8010114:	881b      	ldrh	r3, [r3, #0]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d1f4      	bne.n	8010104 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 801011a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801011c:	781b      	ldrb	r3, [r3, #0]
 801011e:	2b04      	cmp	r3, #4
 8010120:	f040 80a3 	bne.w	801026a <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8010124:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010126:	330e      	adds	r3, #14
 8010128:	4aa4      	ldr	r2, [pc, #656]	@ (80103bc <dir_register+0x2e0>)
 801012a:	fba2 2303 	umull	r2, r3, r2, r3
 801012e:	08db      	lsrs	r3, r3, #3
 8010130:	3302      	adds	r3, #2
 8010132:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8010134:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f7ff f8bf 	bl	800f2ba <dir_alloc>
 801013c:	4603      	mov	r3, r0
 801013e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 8010142:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8010146:	2b00      	cmp	r3, #0
 8010148:	d002      	beq.n	8010150 <dir_register+0x74>
 801014a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801014e:	e169      	b.n	8010424 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010154:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010156:	3b01      	subs	r3, #1
 8010158:	015b      	lsls	r3, r3, #5
 801015a:	1ad2      	subs	r2, r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	689b      	ldr	r3, [r3, #8]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d076      	beq.n	8010256 <dir_register+0x17a>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	79db      	ldrb	r3, [r3, #7]
 801016c:	f003 0304 	and.w	r3, r3, #4
 8010170:	2b00      	cmp	r3, #0
 8010172:	d070      	beq.n	8010256 <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801017a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801017c:	8949      	ldrh	r1, [r1, #10]
 801017e:	4608      	mov	r0, r1
 8010180:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010182:	8989      	ldrh	r1, [r1, #12]
 8010184:	fb00 f101 	mul.w	r1, r0, r1
 8010188:	2000      	movs	r0, #0
 801018a:	460c      	mov	r4, r1
 801018c:	4605      	mov	r5, r0
 801018e:	eb12 0804 	adds.w	r8, r2, r4
 8010192:	eb43 0905 	adc.w	r9, r3, r5
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fe fcb0 	bl	800eb04 <fill_first_frag>
 80101a4:	4603      	mov	r3, r0
 80101a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 80101aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d002      	beq.n	80101b8 <dir_register+0xdc>
 80101b2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80101b6:	e135      	b.n	8010424 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101be:	f04f 32ff 	mov.w	r2, #4294967295
 80101c2:	4619      	mov	r1, r3
 80101c4:	f7fe fccd 	bl	800eb62 <fill_last_frag>
 80101c8:	4603      	mov	r3, r0
 80101ca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 80101ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d002      	beq.n	80101dc <dir_register+0x100>
 80101d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80101da:	e123      	b.n	8010424 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 80101dc:	687a      	ldr	r2, [r7, #4]
 80101de:	f107 0308 	add.w	r3, r7, #8
 80101e2:	4611      	mov	r1, r2
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7ff fc8f 	bl	800fb08 <load_obj_dir>
 80101ea:	4603      	mov	r3, r0
 80101ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 80101f0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d002      	beq.n	80101fe <dir_register+0x122>
 80101f8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80101fc:	e112      	b.n	8010424 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 80101fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010200:	695b      	ldr	r3, [r3, #20]
 8010202:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801020c:	4608      	mov	r0, r1
 801020e:	f7fd fd97 	bl	800dd40 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8010212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010214:	695b      	ldr	r3, [r3, #20]
 8010216:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010220:	4608      	mov	r0, r1
 8010222:	f7fd fd8d 	bl	800dd40 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	79da      	ldrb	r2, [r3, #7]
 801022a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801022c:	695b      	ldr	r3, [r3, #20]
 801022e:	3321      	adds	r3, #33	@ 0x21
 8010230:	f042 0201 	orr.w	r2, r2, #1
 8010234:	b2d2      	uxtb	r2, r2
 8010236:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8010238:	f107 0308 	add.w	r3, r7, #8
 801023c:	4618      	mov	r0, r3
 801023e:	f7ff fc99 	bl	800fb74 <store_xdir>
 8010242:	4603      	mov	r3, r0
 8010244:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8010248:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801024c:	2b00      	cmp	r3, #0
 801024e:	d002      	beq.n	8010256 <dir_register+0x17a>
 8010250:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8010254:	e0e6      	b.n	8010424 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8010256:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010258:	695a      	ldr	r2, [r3, #20]
 801025a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801025c:	691b      	ldr	r3, [r3, #16]
 801025e:	4619      	mov	r1, r3
 8010260:	4610      	mov	r0, r2
 8010262:	f7ff fce2 	bl	800fc2a <create_xdir>
		return FR_OK;
 8010266:	2300      	movs	r3, #0
 8010268:	e0dc      	b.n	8010424 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8010270:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8010274:	220c      	movs	r2, #12
 8010276:	4618      	mov	r0, r3
 8010278:	f7fd fdea 	bl	800de50 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801027c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010280:	f003 0301 	and.w	r3, r3, #1
 8010284:	2b00      	cmp	r3, #0
 8010286:	d033      	beq.n	80102f0 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2240      	movs	r2, #64	@ 0x40
 801028c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 8010290:	2301      	movs	r3, #1
 8010292:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010294:	e016      	b.n	80102c4 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 801029c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801029e:	691a      	ldr	r2, [r3, #16]
 80102a0:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80102a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80102a6:	f7ff f9df 	bl	800f668 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80102aa:	6878      	ldr	r0, [r7, #4]
 80102ac:	f7ff fdeb 	bl	800fe86 <dir_find>
 80102b0:	4603      	mov	r3, r0
 80102b2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 80102b6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d106      	bne.n	80102cc <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 80102be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80102c0:	3301      	adds	r3, #1
 80102c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80102c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80102c6:	2b63      	cmp	r3, #99	@ 0x63
 80102c8:	d9e5      	bls.n	8010296 <dir_register+0x1ba>
 80102ca:	e000      	b.n	80102ce <dir_register+0x1f2>
			if (res != FR_OK) break;
 80102cc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80102ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80102d0:	2b64      	cmp	r3, #100	@ 0x64
 80102d2:	d101      	bne.n	80102d8 <dir_register+0x1fc>
 80102d4:	2307      	movs	r3, #7
 80102d6:	e0a5      	b.n	8010424 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80102d8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80102dc:	2b04      	cmp	r3, #4
 80102de:	d002      	beq.n	80102e6 <dir_register+0x20a>
 80102e0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80102e4:	e09e      	b.n	8010424 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80102e6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80102f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80102f4:	f003 0302 	and.w	r3, r3, #2
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d007      	beq.n	801030c <dir_register+0x230>
 80102fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80102fe:	330c      	adds	r3, #12
 8010300:	4a2f      	ldr	r2, [pc, #188]	@ (80103c0 <dir_register+0x2e4>)
 8010302:	fba2 2303 	umull	r2, r3, r2, r3
 8010306:	089b      	lsrs	r3, r3, #2
 8010308:	3301      	adds	r3, #1
 801030a:	e000      	b.n	801030e <dir_register+0x232>
 801030c:	2301      	movs	r3, #1
 801030e:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010310:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f7fe ffd1 	bl	800f2ba <dir_alloc>
 8010318:	4603      	mov	r3, r0
 801031a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801031e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8010322:	2b00      	cmp	r3, #0
 8010324:	d14f      	bne.n	80103c6 <dir_register+0x2ea>
 8010326:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010328:	3b01      	subs	r3, #1
 801032a:	673b      	str	r3, [r7, #112]	@ 0x70
 801032c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801032e:	2b00      	cmp	r3, #0
 8010330:	d049      	beq.n	80103c6 <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010336:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010338:	015b      	lsls	r3, r3, #5
 801033a:	1ad3      	subs	r3, r2, r3
 801033c:	4619      	mov	r1, r3
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f7fe fe41 	bl	800efc6 <dir_sdi>
 8010344:	4603      	mov	r3, r0
 8010346:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 801034a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801034e:	2b00      	cmp	r3, #0
 8010350:	d139      	bne.n	80103c6 <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	3340      	adds	r3, #64	@ 0x40
 8010356:	4618      	mov	r0, r3
 8010358:	f7ff fa14 	bl	800f784 <sum_sfn>
 801035c:	4603      	mov	r3, r0
 801035e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010366:	4619      	mov	r1, r3
 8010368:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801036a:	f7fd ff9f 	bl	800e2ac <move_window>
 801036e:	4603      	mov	r3, r0
 8010370:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 8010374:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8010378:	2b00      	cmp	r3, #0
 801037a:	d123      	bne.n	80103c4 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801037c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801037e:	6918      	ldr	r0, [r3, #16]
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8010384:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010386:	b2da      	uxtb	r2, r3
 8010388:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 801038c:	f7ff f904 	bl	800f598 <put_lfn>
				fs->wflag = 1;
 8010390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010392:	2201      	movs	r2, #1
 8010394:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8010396:	2100      	movs	r1, #0
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f7fe fea8 	bl	800f0ee <dir_next>
 801039e:	4603      	mov	r3, r0
 80103a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 80103a4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d10c      	bne.n	80103c6 <dir_register+0x2ea>
 80103ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80103ae:	3b01      	subs	r3, #1
 80103b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80103b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d1d4      	bne.n	8010362 <dir_register+0x286>
 80103b8:	e005      	b.n	80103c6 <dir_register+0x2ea>
 80103ba:	bf00      	nop
 80103bc:	88888889 	.word	0x88888889
 80103c0:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 80103c4:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80103c6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d128      	bne.n	8010420 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103d2:	4619      	mov	r1, r3
 80103d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80103d6:	f7fd ff69 	bl	800e2ac <move_window>
 80103da:	4603      	mov	r3, r0
 80103dc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 80103e0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d11b      	bne.n	8010420 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103ec:	2220      	movs	r2, #32
 80103ee:	2100      	movs	r1, #0
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7fd fd4e 	bl	800de92 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	3340      	adds	r3, #64	@ 0x40
 80103fe:	220b      	movs	r2, #11
 8010400:	4619      	mov	r1, r3
 8010402:	f7fd fd25 	bl	800de50 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010410:	330c      	adds	r3, #12
 8010412:	f002 0218 	and.w	r2, r2, #24
 8010416:	b2d2      	uxtb	r2, r2
 8010418:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801041a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801041c:	2201      	movs	r2, #1
 801041e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010420:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8010424:	4618      	mov	r0, r3
 8010426:	3780      	adds	r7, #128	@ 0x80
 8010428:	46bd      	mov	sp, r7
 801042a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801042e:	bf00      	nop

08010430 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8010430:	b5b0      	push	{r4, r5, r7, lr}
 8010432:	b088      	sub	sp, #32
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
 8010438:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	2200      	movs	r2, #0
 8010444:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801044a:	2b00      	cmp	r3, #0
 801044c:	f000 80d9 	beq.w	8010602 <get_fileinfo+0x1d2>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	781b      	ldrb	r3, [r3, #0]
 8010454:	2b04      	cmp	r3, #4
 8010456:	d106      	bne.n	8010466 <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	695b      	ldr	r3, [r3, #20]
 801045c:	6839      	ldr	r1, [r7, #0]
 801045e:	4618      	mov	r0, r3
 8010460:	f7ff fa11 	bl	800f886 <get_xdir_info>
		return;
 8010464:	e0ce      	b.n	8010604 <get_fileinfo+0x1d4>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801046a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801046e:	d032      	beq.n	80104d6 <get_fileinfo+0xa6>
			i = j = 0;
 8010470:	2300      	movs	r3, #0
 8010472:	61bb      	str	r3, [r7, #24]
 8010474:	69bb      	ldr	r3, [r7, #24]
 8010476:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8010478:	e01b      	b.n	80104b2 <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801047a:	89fb      	ldrh	r3, [r7, #14]
 801047c:	2100      	movs	r1, #0
 801047e:	4618      	mov	r0, r3
 8010480:	f002 faea 	bl	8012a58 <ff_convert>
 8010484:	4603      	mov	r3, r0
 8010486:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8010488:	89fb      	ldrh	r3, [r7, #14]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d102      	bne.n	8010494 <get_fileinfo+0x64>
 801048e:	2300      	movs	r3, #0
 8010490:	61fb      	str	r3, [r7, #28]
 8010492:	e01a      	b.n	80104ca <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	2bfe      	cmp	r3, #254	@ 0xfe
 8010498:	d902      	bls.n	80104a0 <get_fileinfo+0x70>
 801049a:	2300      	movs	r3, #0
 801049c:	61fb      	str	r3, [r7, #28]
 801049e:	e014      	b.n	80104ca <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	1c5a      	adds	r2, r3, #1
 80104a4:	61fa      	str	r2, [r7, #28]
 80104a6:	89fa      	ldrh	r2, [r7, #14]
 80104a8:	b2d1      	uxtb	r1, r2
 80104aa:	683a      	ldr	r2, [r7, #0]
 80104ac:	4413      	add	r3, r2
 80104ae:	460a      	mov	r2, r1
 80104b0:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	691a      	ldr	r2, [r3, #16]
 80104b6:	69bb      	ldr	r3, [r7, #24]
 80104b8:	1c59      	adds	r1, r3, #1
 80104ba:	61b9      	str	r1, [r7, #24]
 80104bc:	005b      	lsls	r3, r3, #1
 80104be:	4413      	add	r3, r2
 80104c0:	881b      	ldrh	r3, [r3, #0]
 80104c2:	81fb      	strh	r3, [r7, #14]
 80104c4:	89fb      	ldrh	r3, [r7, #14]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d1d7      	bne.n	801047a <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80104ca:	683a      	ldr	r2, [r7, #0]
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	4413      	add	r3, r2
 80104d0:	331a      	adds	r3, #26
 80104d2:	2200      	movs	r2, #0
 80104d4:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80104d6:	2300      	movs	r3, #0
 80104d8:	61bb      	str	r3, [r7, #24]
 80104da:	69bb      	ldr	r3, [r7, #24]
 80104dc:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80104de:	683a      	ldr	r2, [r7, #0]
 80104e0:	69fb      	ldr	r3, [r7, #28]
 80104e2:	4413      	add	r3, r2
 80104e4:	331a      	adds	r3, #26
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80104ea:	e04d      	b.n	8010588 <get_fileinfo+0x158>
		c = (TCHAR)dp->dir[i++];
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80104f0:	69fb      	ldr	r3, [r7, #28]
 80104f2:	1c59      	adds	r1, r3, #1
 80104f4:	61f9      	str	r1, [r7, #28]
 80104f6:	4413      	add	r3, r2
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80104fc:	7dfb      	ldrb	r3, [r7, #23]
 80104fe:	2b20      	cmp	r3, #32
 8010500:	d041      	beq.n	8010586 <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8010502:	7dfb      	ldrb	r3, [r7, #23]
 8010504:	2b05      	cmp	r3, #5
 8010506:	d101      	bne.n	801050c <get_fileinfo+0xdc>
 8010508:	23e5      	movs	r3, #229	@ 0xe5
 801050a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	2b09      	cmp	r3, #9
 8010510:	d10f      	bne.n	8010532 <get_fileinfo+0x102>
			if (!lfv) fno->fname[j] = '.';
 8010512:	89bb      	ldrh	r3, [r7, #12]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d105      	bne.n	8010524 <get_fileinfo+0xf4>
 8010518:	683a      	ldr	r2, [r7, #0]
 801051a:	69bb      	ldr	r3, [r7, #24]
 801051c:	4413      	add	r3, r2
 801051e:	331a      	adds	r3, #26
 8010520:	222e      	movs	r2, #46	@ 0x2e
 8010522:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8010524:	69bb      	ldr	r3, [r7, #24]
 8010526:	1c5a      	adds	r2, r3, #1
 8010528:	61ba      	str	r2, [r7, #24]
 801052a:	683a      	ldr	r2, [r7, #0]
 801052c:	4413      	add	r3, r2
 801052e:	222e      	movs	r2, #46	@ 0x2e
 8010530:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8010532:	683a      	ldr	r2, [r7, #0]
 8010534:	69bb      	ldr	r3, [r7, #24]
 8010536:	4413      	add	r3, r2
 8010538:	330d      	adds	r3, #13
 801053a:	7dfa      	ldrb	r2, [r7, #23]
 801053c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801053e:	89bb      	ldrh	r3, [r7, #12]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d11c      	bne.n	801057e <get_fileinfo+0x14e>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8010544:	7dfb      	ldrb	r3, [r7, #23]
 8010546:	2b40      	cmp	r3, #64	@ 0x40
 8010548:	d913      	bls.n	8010572 <get_fileinfo+0x142>
 801054a:	7dfb      	ldrb	r3, [r7, #23]
 801054c:	2b5a      	cmp	r3, #90	@ 0x5a
 801054e:	d810      	bhi.n	8010572 <get_fileinfo+0x142>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010554:	330c      	adds	r3, #12
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	461a      	mov	r2, r3
 801055a:	69fb      	ldr	r3, [r7, #28]
 801055c:	2b08      	cmp	r3, #8
 801055e:	d901      	bls.n	8010564 <get_fileinfo+0x134>
 8010560:	2310      	movs	r3, #16
 8010562:	e000      	b.n	8010566 <get_fileinfo+0x136>
 8010564:	2308      	movs	r3, #8
 8010566:	4013      	ands	r3, r2
 8010568:	2b00      	cmp	r3, #0
 801056a:	d002      	beq.n	8010572 <get_fileinfo+0x142>
				c += 0x20;			/* To lower */
 801056c:	7dfb      	ldrb	r3, [r7, #23]
 801056e:	3320      	adds	r3, #32
 8010570:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8010572:	683a      	ldr	r2, [r7, #0]
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	4413      	add	r3, r2
 8010578:	331a      	adds	r3, #26
 801057a:	7dfa      	ldrb	r2, [r7, #23]
 801057c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801057e:	69bb      	ldr	r3, [r7, #24]
 8010580:	3301      	adds	r3, #1
 8010582:	61bb      	str	r3, [r7, #24]
 8010584:	e000      	b.n	8010588 <get_fileinfo+0x158>
		if (c == ' ') continue;				/* Skip padding spaces */
 8010586:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8010588:	69fb      	ldr	r3, [r7, #28]
 801058a:	2b0a      	cmp	r3, #10
 801058c:	d9ae      	bls.n	80104ec <get_fileinfo+0xbc>
	}
	if (!lfv) {
 801058e:	89bb      	ldrh	r3, [r7, #12]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d10d      	bne.n	80105b0 <get_fileinfo+0x180>
		fno->fname[j] = 0;
 8010594:	683a      	ldr	r2, [r7, #0]
 8010596:	69bb      	ldr	r3, [r7, #24]
 8010598:	4413      	add	r3, r2
 801059a:	331a      	adds	r3, #26
 801059c:	2200      	movs	r2, #0
 801059e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105a4:	330c      	adds	r3, #12
 80105a6:	781b      	ldrb	r3, [r3, #0]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d101      	bne.n	80105b0 <get_fileinfo+0x180>
 80105ac:	2300      	movs	r3, #0
 80105ae:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80105b0:	683a      	ldr	r2, [r7, #0]
 80105b2:	69bb      	ldr	r3, [r7, #24]
 80105b4:	4413      	add	r3, r2
 80105b6:	330d      	adds	r3, #13
 80105b8:	2200      	movs	r2, #0
 80105ba:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105c0:	7ada      	ldrb	r2, [r3, #11]
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105ca:	331c      	adds	r3, #28
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7fd fa72 	bl	800dab6 <ld_dword>
 80105d2:	4603      	mov	r3, r0
 80105d4:	2200      	movs	r2, #0
 80105d6:	461c      	mov	r4, r3
 80105d8:	4615      	mov	r5, r2
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105e4:	3316      	adds	r3, #22
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7fd fa65 	bl	800dab6 <ld_dword>
 80105ec:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	b29a      	uxth	r2, r3
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	815a      	strh	r2, [r3, #10]
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	0c1b      	lsrs	r3, r3, #16
 80105fa:	b29a      	uxth	r2, r3
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	811a      	strh	r2, [r3, #8]
 8010600:	e000      	b.n	8010604 <get_fileinfo+0x1d4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010602:	bf00      	nop
}
 8010604:	3720      	adds	r7, #32
 8010606:	46bd      	mov	sp, r7
 8010608:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801060c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b08a      	sub	sp, #40	@ 0x28
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	613b      	str	r3, [r7, #16]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	691b      	ldr	r3, [r3, #16]
 8010622:	60fb      	str	r3, [r7, #12]
 8010624:	2300      	movs	r3, #0
 8010626:	617b      	str	r3, [r7, #20]
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801062c:	69bb      	ldr	r3, [r7, #24]
 801062e:	1c5a      	adds	r2, r3, #1
 8010630:	61ba      	str	r2, [r7, #24]
 8010632:	693a      	ldr	r2, [r7, #16]
 8010634:	4413      	add	r3, r2
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801063a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801063c:	2b1f      	cmp	r3, #31
 801063e:	d940      	bls.n	80106c2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010640:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010642:	2b2f      	cmp	r3, #47	@ 0x2f
 8010644:	d006      	beq.n	8010654 <create_name+0x48>
 8010646:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010648:	2b5c      	cmp	r3, #92	@ 0x5c
 801064a:	d110      	bne.n	801066e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801064c:	e002      	b.n	8010654 <create_name+0x48>
 801064e:	69bb      	ldr	r3, [r7, #24]
 8010650:	3301      	adds	r3, #1
 8010652:	61bb      	str	r3, [r7, #24]
 8010654:	693a      	ldr	r2, [r7, #16]
 8010656:	69bb      	ldr	r3, [r7, #24]
 8010658:	4413      	add	r3, r2
 801065a:	781b      	ldrb	r3, [r3, #0]
 801065c:	2b2f      	cmp	r3, #47	@ 0x2f
 801065e:	d0f6      	beq.n	801064e <create_name+0x42>
 8010660:	693a      	ldr	r2, [r7, #16]
 8010662:	69bb      	ldr	r3, [r7, #24]
 8010664:	4413      	add	r3, r2
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	2b5c      	cmp	r3, #92	@ 0x5c
 801066a:	d0f0      	beq.n	801064e <create_name+0x42>
			break;
 801066c:	e02a      	b.n	80106c4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	2bfe      	cmp	r3, #254	@ 0xfe
 8010672:	d901      	bls.n	8010678 <create_name+0x6c>
 8010674:	2306      	movs	r3, #6
 8010676:	e17d      	b.n	8010974 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010678:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801067a:	b2db      	uxtb	r3, r3
 801067c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801067e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010680:	2101      	movs	r1, #1
 8010682:	4618      	mov	r0, r3
 8010684:	f002 f9e8 	bl	8012a58 <ff_convert>
 8010688:	4603      	mov	r3, r0
 801068a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801068c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801068e:	2b00      	cmp	r3, #0
 8010690:	d101      	bne.n	8010696 <create_name+0x8a>
 8010692:	2306      	movs	r3, #6
 8010694:	e16e      	b.n	8010974 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010696:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010698:	2b7f      	cmp	r3, #127	@ 0x7f
 801069a:	d809      	bhi.n	80106b0 <create_name+0xa4>
 801069c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801069e:	4619      	mov	r1, r3
 80106a0:	488d      	ldr	r0, [pc, #564]	@ (80108d8 <create_name+0x2cc>)
 80106a2:	f7fd fc38 	bl	800df16 <chk_chr>
 80106a6:	4603      	mov	r3, r0
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d001      	beq.n	80106b0 <create_name+0xa4>
 80106ac:	2306      	movs	r3, #6
 80106ae:	e161      	b.n	8010974 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	1c5a      	adds	r2, r3, #1
 80106b4:	617a      	str	r2, [r7, #20]
 80106b6:	005b      	lsls	r3, r3, #1
 80106b8:	68fa      	ldr	r2, [r7, #12]
 80106ba:	4413      	add	r3, r2
 80106bc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80106be:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80106c0:	e7b4      	b.n	801062c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80106c2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80106c4:	693a      	ldr	r2, [r7, #16]
 80106c6:	69bb      	ldr	r3, [r7, #24]
 80106c8:	441a      	add	r2, r3
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80106ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106d0:	2b1f      	cmp	r3, #31
 80106d2:	d801      	bhi.n	80106d8 <create_name+0xcc>
 80106d4:	2304      	movs	r3, #4
 80106d6:	e000      	b.n	80106da <create_name+0xce>
 80106d8:	2300      	movs	r3, #0
 80106da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80106de:	e011      	b.n	8010704 <create_name+0xf8>
		w = lfn[di - 1];
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80106e6:	3b01      	subs	r3, #1
 80106e8:	005b      	lsls	r3, r3, #1
 80106ea:	68fa      	ldr	r2, [r7, #12]
 80106ec:	4413      	add	r3, r2
 80106ee:	881b      	ldrh	r3, [r3, #0]
 80106f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80106f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106f4:	2b20      	cmp	r3, #32
 80106f6:	d002      	beq.n	80106fe <create_name+0xf2>
 80106f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80106fc:	d106      	bne.n	801070c <create_name+0x100>
		di--;
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	3b01      	subs	r3, #1
 8010702:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d1ea      	bne.n	80106e0 <create_name+0xd4>
 801070a:	e000      	b.n	801070e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801070c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	005b      	lsls	r3, r3, #1
 8010712:	68fa      	ldr	r2, [r7, #12]
 8010714:	4413      	add	r3, r2
 8010716:	2200      	movs	r2, #0
 8010718:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d101      	bne.n	8010724 <create_name+0x118>
 8010720:	2306      	movs	r3, #6
 8010722:	e127      	b.n	8010974 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	3340      	adds	r3, #64	@ 0x40
 8010728:	220b      	movs	r2, #11
 801072a:	2120      	movs	r1, #32
 801072c:	4618      	mov	r0, r3
 801072e:	f7fd fbb0 	bl	800de92 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010732:	2300      	movs	r3, #0
 8010734:	61bb      	str	r3, [r7, #24]
 8010736:	e002      	b.n	801073e <create_name+0x132>
 8010738:	69bb      	ldr	r3, [r7, #24]
 801073a:	3301      	adds	r3, #1
 801073c:	61bb      	str	r3, [r7, #24]
 801073e:	69bb      	ldr	r3, [r7, #24]
 8010740:	005b      	lsls	r3, r3, #1
 8010742:	68fa      	ldr	r2, [r7, #12]
 8010744:	4413      	add	r3, r2
 8010746:	881b      	ldrh	r3, [r3, #0]
 8010748:	2b20      	cmp	r3, #32
 801074a:	d0f5      	beq.n	8010738 <create_name+0x12c>
 801074c:	69bb      	ldr	r3, [r7, #24]
 801074e:	005b      	lsls	r3, r3, #1
 8010750:	68fa      	ldr	r2, [r7, #12]
 8010752:	4413      	add	r3, r2
 8010754:	881b      	ldrh	r3, [r3, #0]
 8010756:	2b2e      	cmp	r3, #46	@ 0x2e
 8010758:	d0ee      	beq.n	8010738 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801075a:	69bb      	ldr	r3, [r7, #24]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d009      	beq.n	8010774 <create_name+0x168>
 8010760:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010764:	f043 0303 	orr.w	r3, r3, #3
 8010768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801076c:	e002      	b.n	8010774 <create_name+0x168>
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	3b01      	subs	r3, #1
 8010772:	617b      	str	r3, [r7, #20]
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d009      	beq.n	801078e <create_name+0x182>
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010780:	3b01      	subs	r3, #1
 8010782:	005b      	lsls	r3, r3, #1
 8010784:	68fa      	ldr	r2, [r7, #12]
 8010786:	4413      	add	r3, r2
 8010788:	881b      	ldrh	r3, [r3, #0]
 801078a:	2b2e      	cmp	r3, #46	@ 0x2e
 801078c:	d1ef      	bne.n	801076e <create_name+0x162>

	i = b = 0; ni = 8;
 801078e:	2300      	movs	r3, #0
 8010790:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010794:	2300      	movs	r3, #0
 8010796:	623b      	str	r3, [r7, #32]
 8010798:	2308      	movs	r3, #8
 801079a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801079c:	69bb      	ldr	r3, [r7, #24]
 801079e:	1c5a      	adds	r2, r3, #1
 80107a0:	61ba      	str	r2, [r7, #24]
 80107a2:	005b      	lsls	r3, r3, #1
 80107a4:	68fa      	ldr	r2, [r7, #12]
 80107a6:	4413      	add	r3, r2
 80107a8:	881b      	ldrh	r3, [r3, #0]
 80107aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80107ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	f000 8090 	beq.w	80108d4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80107b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80107b6:	2b20      	cmp	r3, #32
 80107b8:	d006      	beq.n	80107c8 <create_name+0x1bc>
 80107ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80107bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80107be:	d10a      	bne.n	80107d6 <create_name+0x1ca>
 80107c0:	69ba      	ldr	r2, [r7, #24]
 80107c2:	697b      	ldr	r3, [r7, #20]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d006      	beq.n	80107d6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80107c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107cc:	f043 0303 	orr.w	r3, r3, #3
 80107d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80107d4:	e07d      	b.n	80108d2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80107d6:	6a3a      	ldr	r2, [r7, #32]
 80107d8:	69fb      	ldr	r3, [r7, #28]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d203      	bcs.n	80107e6 <create_name+0x1da>
 80107de:	69ba      	ldr	r2, [r7, #24]
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d123      	bne.n	801082e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80107e6:	69fb      	ldr	r3, [r7, #28]
 80107e8:	2b0b      	cmp	r3, #11
 80107ea:	d106      	bne.n	80107fa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80107ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107f0:	f043 0303 	orr.w	r3, r3, #3
 80107f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80107f8:	e075      	b.n	80108e6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80107fa:	69ba      	ldr	r2, [r7, #24]
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	429a      	cmp	r2, r3
 8010800:	d005      	beq.n	801080e <create_name+0x202>
 8010802:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010806:	f043 0303 	orr.w	r3, r3, #3
 801080a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801080e:	69ba      	ldr	r2, [r7, #24]
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	429a      	cmp	r2, r3
 8010814:	d866      	bhi.n	80108e4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	61bb      	str	r3, [r7, #24]
 801081a:	2308      	movs	r3, #8
 801081c:	623b      	str	r3, [r7, #32]
 801081e:	230b      	movs	r3, #11
 8010820:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010822:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010826:	009b      	lsls	r3, r3, #2
 8010828:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801082c:	e051      	b.n	80108d2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801082e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010830:	2b7f      	cmp	r3, #127	@ 0x7f
 8010832:	d914      	bls.n	801085e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010834:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010836:	2100      	movs	r1, #0
 8010838:	4618      	mov	r0, r3
 801083a:	f002 f90d 	bl	8012a58 <ff_convert>
 801083e:	4603      	mov	r3, r0
 8010840:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010842:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010844:	2b00      	cmp	r3, #0
 8010846:	d004      	beq.n	8010852 <create_name+0x246>
 8010848:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801084a:	3b80      	subs	r3, #128	@ 0x80
 801084c:	4a23      	ldr	r2, [pc, #140]	@ (80108dc <create_name+0x2d0>)
 801084e:	5cd3      	ldrb	r3, [r2, r3]
 8010850:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8010852:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010856:	f043 0302 	orr.w	r3, r3, #2
 801085a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801085e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010860:	2b00      	cmp	r3, #0
 8010862:	d007      	beq.n	8010874 <create_name+0x268>
 8010864:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010866:	4619      	mov	r1, r3
 8010868:	481d      	ldr	r0, [pc, #116]	@ (80108e0 <create_name+0x2d4>)
 801086a:	f7fd fb54 	bl	800df16 <chk_chr>
 801086e:	4603      	mov	r3, r0
 8010870:	2b00      	cmp	r3, #0
 8010872:	d008      	beq.n	8010886 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010874:	235f      	movs	r3, #95	@ 0x5f
 8010876:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8010878:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801087c:	f043 0303 	orr.w	r3, r3, #3
 8010880:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010884:	e01b      	b.n	80108be <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010886:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010888:	2b40      	cmp	r3, #64	@ 0x40
 801088a:	d909      	bls.n	80108a0 <create_name+0x294>
 801088c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801088e:	2b5a      	cmp	r3, #90	@ 0x5a
 8010890:	d806      	bhi.n	80108a0 <create_name+0x294>
					b |= 2;
 8010892:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010896:	f043 0302 	orr.w	r3, r3, #2
 801089a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801089e:	e00e      	b.n	80108be <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80108a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108a2:	2b60      	cmp	r3, #96	@ 0x60
 80108a4:	d90b      	bls.n	80108be <create_name+0x2b2>
 80108a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108a8:	2b7a      	cmp	r3, #122	@ 0x7a
 80108aa:	d808      	bhi.n	80108be <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80108ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80108b0:	f043 0301 	orr.w	r3, r3, #1
 80108b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80108b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108ba:	3b20      	subs	r3, #32
 80108bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80108be:	6a3b      	ldr	r3, [r7, #32]
 80108c0:	1c5a      	adds	r2, r3, #1
 80108c2:	623a      	str	r2, [r7, #32]
 80108c4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80108c6:	b2d1      	uxtb	r1, r2
 80108c8:	687a      	ldr	r2, [r7, #4]
 80108ca:	4413      	add	r3, r2
 80108cc:	460a      	mov	r2, r1
 80108ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 80108d2:	e763      	b.n	801079c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80108d4:	bf00      	nop
 80108d6:	e006      	b.n	80108e6 <create_name+0x2da>
 80108d8:	08015bc4 	.word	0x08015bc4
 80108dc:	08015cac 	.word	0x08015cac
 80108e0:	08015bd0 	.word	0x08015bd0
			if (si > di) break;			/* No extension */
 80108e4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80108ec:	2be5      	cmp	r3, #229	@ 0xe5
 80108ee:	d103      	bne.n	80108f8 <create_name+0x2ec>
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2205      	movs	r2, #5
 80108f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 80108f8:	69fb      	ldr	r3, [r7, #28]
 80108fa:	2b08      	cmp	r3, #8
 80108fc:	d104      	bne.n	8010908 <create_name+0x2fc>
 80108fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010902:	009b      	lsls	r3, r3, #2
 8010904:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010908:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801090c:	f003 030c 	and.w	r3, r3, #12
 8010910:	2b0c      	cmp	r3, #12
 8010912:	d005      	beq.n	8010920 <create_name+0x314>
 8010914:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010918:	f003 0303 	and.w	r3, r3, #3
 801091c:	2b03      	cmp	r3, #3
 801091e:	d105      	bne.n	801092c <create_name+0x320>
 8010920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010924:	f043 0302 	orr.w	r3, r3, #2
 8010928:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801092c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010930:	f003 0302 	and.w	r3, r3, #2
 8010934:	2b00      	cmp	r3, #0
 8010936:	d117      	bne.n	8010968 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010938:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801093c:	f003 0303 	and.w	r3, r3, #3
 8010940:	2b01      	cmp	r3, #1
 8010942:	d105      	bne.n	8010950 <create_name+0x344>
 8010944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010948:	f043 0310 	orr.w	r3, r3, #16
 801094c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8010950:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010954:	f003 030c 	and.w	r3, r3, #12
 8010958:	2b04      	cmp	r3, #4
 801095a:	d105      	bne.n	8010968 <create_name+0x35c>
 801095c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010960:	f043 0308 	orr.w	r3, r3, #8
 8010964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801096e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 8010972:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8010974:	4618      	mov	r0, r3
 8010976:	3728      	adds	r7, #40	@ 0x28
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}

0801097c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b086      	sub	sp, #24
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
 8010984:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801098a:	693b      	ldr	r3, [r7, #16]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010990:	e002      	b.n	8010998 <follow_path+0x1c>
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	3301      	adds	r3, #1
 8010996:	603b      	str	r3, [r7, #0]
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	781b      	ldrb	r3, [r3, #0]
 801099c:	2b2f      	cmp	r3, #47	@ 0x2f
 801099e:	d0f8      	beq.n	8010992 <follow_path+0x16>
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	781b      	ldrb	r3, [r3, #0]
 80109a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80109a6:	d0f4      	beq.n	8010992 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80109a8:	693b      	ldr	r3, [r7, #16]
 80109aa:	2200      	movs	r2, #0
 80109ac:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 80109ae:	693b      	ldr	r3, [r7, #16]
 80109b0:	2200      	movs	r2, #0
 80109b2:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	2b1f      	cmp	r3, #31
 80109ba:	d80a      	bhi.n	80109d2 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2280      	movs	r2, #128	@ 0x80
 80109c0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 80109c4:	2100      	movs	r1, #0
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f7fe fafd 	bl	800efc6 <dir_sdi>
 80109cc:	4603      	mov	r3, r0
 80109ce:	75fb      	strb	r3, [r7, #23]
 80109d0:	e07d      	b.n	8010ace <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80109d2:	463b      	mov	r3, r7
 80109d4:	4619      	mov	r1, r3
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f7ff fe18 	bl	801060c <create_name>
 80109dc:	4603      	mov	r3, r0
 80109de:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80109e0:	7dfb      	ldrb	r3, [r7, #23]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d16e      	bne.n	8010ac4 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f7ff fa4d 	bl	800fe86 <dir_find>
 80109ec:	4603      	mov	r3, r0
 80109ee:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80109f6:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80109f8:	7dfb      	ldrb	r3, [r7, #23]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d00a      	beq.n	8010a14 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80109fe:	7dfb      	ldrb	r3, [r7, #23]
 8010a00:	2b04      	cmp	r3, #4
 8010a02:	d161      	bne.n	8010ac8 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010a04:	7afb      	ldrb	r3, [r7, #11]
 8010a06:	f003 0304 	and.w	r3, r3, #4
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d15c      	bne.n	8010ac8 <follow_path+0x14c>
 8010a0e:	2305      	movs	r3, #5
 8010a10:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010a12:	e059      	b.n	8010ac8 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010a14:	7afb      	ldrb	r3, [r7, #11]
 8010a16:	f003 0304 	and.w	r3, r3, #4
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d156      	bne.n	8010acc <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010a1e:	693b      	ldr	r3, [r7, #16]
 8010a20:	799b      	ldrb	r3, [r3, #6]
 8010a22:	f003 0310 	and.w	r3, r3, #16
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d102      	bne.n	8010a30 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8010a2a:	2305      	movs	r3, #5
 8010a2c:	75fb      	strb	r3, [r7, #23]
 8010a2e:	e04e      	b.n	8010ace <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	781b      	ldrb	r3, [r3, #0]
 8010a34:	2b04      	cmp	r3, #4
 8010a36:	d130      	bne.n	8010a9a <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 8010a38:	693b      	ldr	r3, [r7, #16]
 8010a3a:	689a      	ldr	r2, [r3, #8]
 8010a3c:	693b      	ldr	r3, [r7, #16]
 8010a3e:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010a46:	4613      	mov	r3, r2
 8010a48:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8010a4c:	693a      	ldr	r2, [r7, #16]
 8010a4e:	79d2      	ldrb	r2, [r2, #7]
 8010a50:	431a      	orrs	r2, r3
 8010a52:	693b      	ldr	r3, [r7, #16]
 8010a54:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	695b      	ldr	r3, [r3, #20]
 8010a62:	3334      	adds	r3, #52	@ 0x34
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7fd f826 	bl	800dab6 <ld_dword>
 8010a6a:	4602      	mov	r2, r0
 8010a6c:	693b      	ldr	r3, [r7, #16]
 8010a6e:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	695b      	ldr	r3, [r3, #20]
 8010a74:	3321      	adds	r3, #33	@ 0x21
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	f003 0302 	and.w	r3, r3, #2
 8010a7c:	b2da      	uxtb	r2, r3
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	695b      	ldr	r3, [r3, #20]
 8010a86:	3338      	adds	r3, #56	@ 0x38
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7fd f837 	bl	800dafc <ld_qword>
 8010a8e:	4602      	mov	r2, r0
 8010a90:	460b      	mov	r3, r1
 8010a92:	6939      	ldr	r1, [r7, #16]
 8010a94:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8010a98:	e79b      	b.n	80109d2 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010aa4:	68fa      	ldr	r2, [r7, #12]
 8010aa6:	8992      	ldrh	r2, [r2, #12]
 8010aa8:	fbb3 f0f2 	udiv	r0, r3, r2
 8010aac:	fb00 f202 	mul.w	r2, r0, r2
 8010ab0:	1a9b      	subs	r3, r3, r2
 8010ab2:	440b      	add	r3, r1
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	68f8      	ldr	r0, [r7, #12]
 8010ab8:	f7fe fc5b 	bl	800f372 <ld_clust>
 8010abc:	4602      	mov	r2, r0
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010ac2:	e786      	b.n	80109d2 <follow_path+0x56>
			if (res != FR_OK) break;
 8010ac4:	bf00      	nop
 8010ac6:	e002      	b.n	8010ace <follow_path+0x152>
				break;
 8010ac8:	bf00      	nop
 8010aca:	e000      	b.n	8010ace <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010acc:	bf00      	nop
			}
		}
	}

	return res;
 8010ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	3718      	adds	r7, #24
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}

08010ad8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010ad8:	b480      	push	{r7}
 8010ada:	b087      	sub	sp, #28
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ae4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d031      	beq.n	8010b52 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	617b      	str	r3, [r7, #20]
 8010af4:	e002      	b.n	8010afc <get_ldnumber+0x24>
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	3301      	adds	r3, #1
 8010afa:	617b      	str	r3, [r7, #20]
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	2b1f      	cmp	r3, #31
 8010b02:	d903      	bls.n	8010b0c <get_ldnumber+0x34>
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	781b      	ldrb	r3, [r3, #0]
 8010b08:	2b3a      	cmp	r3, #58	@ 0x3a
 8010b0a:	d1f4      	bne.n	8010af6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	2b3a      	cmp	r3, #58	@ 0x3a
 8010b12:	d11c      	bne.n	8010b4e <get_ldnumber+0x76>
			tp = *path;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	1c5a      	adds	r2, r3, #1
 8010b1e:	60fa      	str	r2, [r7, #12]
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	3b30      	subs	r3, #48	@ 0x30
 8010b24:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	2b09      	cmp	r3, #9
 8010b2a:	d80e      	bhi.n	8010b4a <get_ldnumber+0x72>
 8010b2c:	68fa      	ldr	r2, [r7, #12]
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	429a      	cmp	r2, r3
 8010b32:	d10a      	bne.n	8010b4a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d107      	bne.n	8010b4a <get_ldnumber+0x72>
					vol = (int)i;
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	3301      	adds	r3, #1
 8010b42:	617b      	str	r3, [r7, #20]
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	697a      	ldr	r2, [r7, #20]
 8010b48:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010b4a:	693b      	ldr	r3, [r7, #16]
 8010b4c:	e002      	b.n	8010b54 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010b4e:	2300      	movs	r3, #0
 8010b50:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010b52:	693b      	ldr	r3, [r7, #16]
}
 8010b54:	4618      	mov	r0, r3
 8010b56:	371c      	adds	r7, #28
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5e:	4770      	bx	lr

08010b60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b082      	sub	sp, #8
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	70da      	strb	r2, [r3, #3]
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f04f 32ff 	mov.w	r2, #4294967295
 8010b76:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010b78:	6839      	ldr	r1, [r7, #0]
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f7fd fb96 	bl	800e2ac <move_window>
 8010b80:	4603      	mov	r3, r0
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d001      	beq.n	8010b8a <check_fs+0x2a>
 8010b86:	2304      	movs	r3, #4
 8010b88:	e044      	b.n	8010c14 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	333c      	adds	r3, #60	@ 0x3c
 8010b8e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010b92:	4618      	mov	r0, r3
 8010b94:	f7fc ff76 	bl	800da84 <ld_word>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d001      	beq.n	8010ba8 <check_fs+0x48>
 8010ba4:	2303      	movs	r3, #3
 8010ba6:	e035      	b.n	8010c14 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010bae:	2be9      	cmp	r3, #233	@ 0xe9
 8010bb0:	d009      	beq.n	8010bc6 <check_fs+0x66>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010bb8:	2beb      	cmp	r3, #235	@ 0xeb
 8010bba:	d11e      	bne.n	8010bfa <check_fs+0x9a>
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010bc2:	2b90      	cmp	r3, #144	@ 0x90
 8010bc4:	d119      	bne.n	8010bfa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	333c      	adds	r3, #60	@ 0x3c
 8010bca:	3336      	adds	r3, #54	@ 0x36
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7fc ff72 	bl	800dab6 <ld_dword>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010bd8:	4a10      	ldr	r2, [pc, #64]	@ (8010c1c <check_fs+0xbc>)
 8010bda:	4293      	cmp	r3, r2
 8010bdc:	d101      	bne.n	8010be2 <check_fs+0x82>
 8010bde:	2300      	movs	r3, #0
 8010be0:	e018      	b.n	8010c14 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	333c      	adds	r3, #60	@ 0x3c
 8010be6:	3352      	adds	r3, #82	@ 0x52
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7fc ff64 	bl	800dab6 <ld_dword>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	4a0b      	ldr	r2, [pc, #44]	@ (8010c20 <check_fs+0xc0>)
 8010bf2:	4293      	cmp	r3, r2
 8010bf4:	d101      	bne.n	8010bfa <check_fs+0x9a>
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	e00c      	b.n	8010c14 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	333c      	adds	r3, #60	@ 0x3c
 8010bfe:	220b      	movs	r2, #11
 8010c00:	4908      	ldr	r1, [pc, #32]	@ (8010c24 <check_fs+0xc4>)
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7fd f960 	bl	800dec8 <mem_cmp>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d101      	bne.n	8010c12 <check_fs+0xb2>
 8010c0e:	2301      	movs	r3, #1
 8010c10:	e000      	b.n	8010c14 <check_fs+0xb4>
#endif
	return 2;
 8010c12:	2302      	movs	r3, #2
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	3708      	adds	r7, #8
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}
 8010c1c:	00544146 	.word	0x00544146
 8010c20:	33544146 	.word	0x33544146
 8010c24:	08015bd8 	.word	0x08015bd8

08010c28 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c2c:	b09c      	sub	sp, #112	@ 0x70
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	61f8      	str	r0, [r7, #28]
 8010c32:	61b9      	str	r1, [r7, #24]
 8010c34:	4613      	mov	r3, r2
 8010c36:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010c38:	69bb      	ldr	r3, [r7, #24]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010c3e:	69f8      	ldr	r0, [r7, #28]
 8010c40:	f7ff ff4a 	bl	8010ad8 <get_ldnumber>
 8010c44:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 8010c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	da01      	bge.n	8010c50 <find_volume+0x28>
 8010c4c:	230b      	movs	r3, #11
 8010c4e:	e376      	b.n	801133e <find_volume+0x716>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010c50:	4aa6      	ldr	r2, [pc, #664]	@ (8010eec <find_volume+0x2c4>)
 8010c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c58:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010c5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d101      	bne.n	8010c64 <find_volume+0x3c>
 8010c60:	230c      	movs	r3, #12
 8010c62:	e36c      	b.n	801133e <find_volume+0x716>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010c64:	69bb      	ldr	r3, [r7, #24]
 8010c66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010c68:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010c6a:	7dfb      	ldrb	r3, [r7, #23]
 8010c6c:	f023 0301 	bic.w	r3, r3, #1
 8010c70:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010c72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d01a      	beq.n	8010cb0 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8010c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c7c:	785b      	ldrb	r3, [r3, #1]
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f7fc fe60 	bl	800d944 <disk_status>
 8010c84:	4603      	mov	r3, r0
 8010c86:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010c8a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010c8e:	f003 0301 	and.w	r3, r3, #1
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d10c      	bne.n	8010cb0 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010c96:	7dfb      	ldrb	r3, [r7, #23]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d007      	beq.n	8010cac <find_volume+0x84>
 8010c9c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010ca0:	f003 0304 	and.w	r3, r3, #4
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d001      	beq.n	8010cac <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8010ca8:	230a      	movs	r3, #10
 8010caa:	e348      	b.n	801133e <find_volume+0x716>
			}
			return FR_OK;				/* The file system object is valid */
 8010cac:	2300      	movs	r3, #0
 8010cae:	e346      	b.n	801133e <find_volume+0x716>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010cb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010cb8:	b2da      	uxtb	r2, r3
 8010cba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cbc:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010cbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cc0:	785b      	ldrb	r3, [r3, #1]
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f7fc fe58 	bl	800d978 <disk_initialize>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010cce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010cd2:	f003 0301 	and.w	r3, r3, #1
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d001      	beq.n	8010cde <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010cda:	2303      	movs	r3, #3
 8010cdc:	e32f      	b.n	801133e <find_volume+0x716>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010cde:	7dfb      	ldrb	r3, [r7, #23]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d007      	beq.n	8010cf4 <find_volume+0xcc>
 8010ce4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010ce8:	f003 0304 	and.w	r3, r3, #4
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d001      	beq.n	8010cf4 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8010cf0:	230a      	movs	r3, #10
 8010cf2:	e324      	b.n	801133e <find_volume+0x716>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8010cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cf6:	7858      	ldrb	r0, [r3, #1]
 8010cf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cfa:	330c      	adds	r3, #12
 8010cfc:	461a      	mov	r2, r3
 8010cfe:	2102      	movs	r1, #2
 8010d00:	f7fc fea2 	bl	800da48 <disk_ioctl>
 8010d04:	4603      	mov	r3, r0
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d001      	beq.n	8010d0e <find_volume+0xe6>
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	e317      	b.n	801133e <find_volume+0x716>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d10:	899b      	ldrh	r3, [r3, #12]
 8010d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010d16:	d80d      	bhi.n	8010d34 <find_volume+0x10c>
 8010d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d1a:	899b      	ldrh	r3, [r3, #12]
 8010d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d20:	d308      	bcc.n	8010d34 <find_volume+0x10c>
 8010d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d24:	899b      	ldrh	r3, [r3, #12]
 8010d26:	461a      	mov	r2, r3
 8010d28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d2a:	899b      	ldrh	r3, [r3, #12]
 8010d2c:	3b01      	subs	r3, #1
 8010d2e:	4013      	ands	r3, r2
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d001      	beq.n	8010d38 <find_volume+0x110>
 8010d34:	2301      	movs	r3, #1
 8010d36:	e302      	b.n	801133e <find_volume+0x716>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010d3c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010d3e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8010d40:	f7ff ff0e 	bl	8010b60 <check_fs>
 8010d44:	4603      	mov	r3, r0
 8010d46:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010d4a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8010d4e:	2b02      	cmp	r3, #2
 8010d50:	d14d      	bne.n	8010dee <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010d52:	2300      	movs	r3, #0
 8010d54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010d56:	e020      	b.n	8010d9a <find_volume+0x172>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010d58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d5a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8010d5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010d60:	011b      	lsls	r3, r3, #4
 8010d62:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010d66:	4413      	add	r3, r2
 8010d68:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010d6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010d6c:	3304      	adds	r3, #4
 8010d6e:	781b      	ldrb	r3, [r3, #0]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d006      	beq.n	8010d82 <find_volume+0x15a>
 8010d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010d76:	3308      	adds	r3, #8
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7fc fe9c 	bl	800dab6 <ld_dword>
 8010d7e:	4602      	mov	r2, r0
 8010d80:	e000      	b.n	8010d84 <find_volume+0x15c>
 8010d82:	2200      	movs	r2, #0
 8010d84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010d86:	009b      	lsls	r3, r3, #2
 8010d88:	3360      	adds	r3, #96	@ 0x60
 8010d8a:	f107 0110 	add.w	r1, r7, #16
 8010d8e:	440b      	add	r3, r1
 8010d90:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010d94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010d96:	3301      	adds	r3, #1
 8010d98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010d9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010d9c:	2b03      	cmp	r3, #3
 8010d9e:	d9db      	bls.n	8010d58 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010da0:	2300      	movs	r3, #0
 8010da2:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 8010da4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d002      	beq.n	8010db0 <find_volume+0x188>
 8010daa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010dac:	3b01      	subs	r3, #1
 8010dae:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010db0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010db2:	009b      	lsls	r3, r3, #2
 8010db4:	3360      	adds	r3, #96	@ 0x60
 8010db6:	f107 0210 	add.w	r2, r7, #16
 8010dba:	4413      	add	r3, r2
 8010dbc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8010dc0:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010dc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d005      	beq.n	8010dd4 <find_volume+0x1ac>
 8010dc8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010dca:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8010dcc:	f7ff fec8 	bl	8010b60 <check_fs>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	e000      	b.n	8010dd6 <find_volume+0x1ae>
 8010dd4:	2303      	movs	r3, #3
 8010dd6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010dda:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8010dde:	2b01      	cmp	r3, #1
 8010de0:	d905      	bls.n	8010dee <find_volume+0x1c6>
 8010de2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010de4:	3301      	adds	r3, #1
 8010de6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010de8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010dea:	2b03      	cmp	r3, #3
 8010dec:	d9e0      	bls.n	8010db0 <find_volume+0x188>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010dee:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8010df2:	2b04      	cmp	r3, #4
 8010df4:	d101      	bne.n	8010dfa <find_volume+0x1d2>
 8010df6:	2301      	movs	r3, #1
 8010df8:	e2a1      	b.n	801133e <find_volume+0x716>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010dfa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8010dfe:	2b01      	cmp	r3, #1
 8010e00:	d901      	bls.n	8010e06 <find_volume+0x1de>
 8010e02:	230d      	movs	r3, #13
 8010e04:	e29b      	b.n	801133e <find_volume+0x716>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8010e06:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8010e0a:	2b01      	cmp	r3, #1
 8010e0c:	f040 8101 	bne.w	8011012 <find_volume+0x3ea>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8010e10:	230b      	movs	r3, #11
 8010e12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010e14:	e002      	b.n	8010e1c <find_volume+0x1f4>
 8010e16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010e18:	3301      	adds	r3, #1
 8010e1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010e1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010e1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8010e20:	d806      	bhi.n	8010e30 <find_volume+0x208>
 8010e22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010e24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010e26:	4413      	add	r3, r2
 8010e28:	333c      	adds	r3, #60	@ 0x3c
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d0f2      	beq.n	8010e16 <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8010e30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010e32:	2b3f      	cmp	r3, #63	@ 0x3f
 8010e34:	d801      	bhi.n	8010e3a <find_volume+0x212>
 8010e36:	230d      	movs	r3, #13
 8010e38:	e281      	b.n	801133e <find_volume+0x716>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8010e3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e3c:	333c      	adds	r3, #60	@ 0x3c
 8010e3e:	3368      	adds	r3, #104	@ 0x68
 8010e40:	4618      	mov	r0, r3
 8010e42:	f7fc fe1f 	bl	800da84 <ld_word>
 8010e46:	4603      	mov	r3, r0
 8010e48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010e4c:	d001      	beq.n	8010e52 <find_volume+0x22a>
 8010e4e:	230d      	movs	r3, #13
 8010e50:	e275      	b.n	801133e <find_volume+0x716>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8010e52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e54:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8010e58:	461a      	mov	r2, r3
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	4093      	lsls	r3, r2
 8010e5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010e60:	8992      	ldrh	r2, [r2, #12]
 8010e62:	4293      	cmp	r3, r2
 8010e64:	d001      	beq.n	8010e6a <find_volume+0x242>
			return FR_NO_FILESYSTEM;
 8010e66:	230d      	movs	r3, #13
 8010e68:	e269      	b.n	801133e <find_volume+0x716>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8010e6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e6c:	333c      	adds	r3, #60	@ 0x3c
 8010e6e:	3348      	adds	r3, #72	@ 0x48
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7fc fe43 	bl	800dafc <ld_qword>
 8010e76:	4602      	mov	r2, r0
 8010e78:	460b      	mov	r3, r1
 8010e7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010e7c:	2000      	movs	r0, #0
 8010e7e:	60b9      	str	r1, [r7, #8]
 8010e80:	60f8      	str	r0, [r7, #12]
 8010e82:	68b9      	ldr	r1, [r7, #8]
 8010e84:	1851      	adds	r1, r2, r1
 8010e86:	6039      	str	r1, [r7, #0]
 8010e88:	68f9      	ldr	r1, [r7, #12]
 8010e8a:	eb43 0101 	adc.w	r1, r3, r1
 8010e8e:	6079      	str	r1, [r7, #4]
 8010e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e94:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8010e98:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8010e9c:	2b01      	cmp	r3, #1
 8010e9e:	d301      	bcc.n	8010ea4 <find_volume+0x27c>
 8010ea0:	230d      	movs	r3, #13
 8010ea2:	e24c      	b.n	801133e <find_volume+0x716>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8010ea4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ea6:	333c      	adds	r3, #60	@ 0x3c
 8010ea8:	3354      	adds	r3, #84	@ 0x54
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7fc fe03 	bl	800dab6 <ld_dword>
 8010eb0:	4602      	mov	r2, r0
 8010eb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010eb4:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8010eb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010eb8:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8010ebc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ebe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8010ec0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ec2:	789b      	ldrb	r3, [r3, #2]
 8010ec4:	2b01      	cmp	r3, #1
 8010ec6:	d001      	beq.n	8010ecc <find_volume+0x2a4>
 8010ec8:	230d      	movs	r3, #13
 8010eca:	e238      	b.n	801133e <find_volume+0x716>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8010ecc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ece:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	4093      	lsls	r3, r2
 8010ed8:	b29a      	uxth	r2, r3
 8010eda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010edc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8010ede:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ee0:	895b      	ldrh	r3, [r3, #10]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d104      	bne.n	8010ef0 <find_volume+0x2c8>
 8010ee6:	230d      	movs	r3, #13
 8010ee8:	e229      	b.n	801133e <find_volume+0x716>
 8010eea:	bf00      	nop
 8010eec:	20003958 	.word	0x20003958

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8010ef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ef2:	333c      	adds	r3, #60	@ 0x3c
 8010ef4:	335c      	adds	r3, #92	@ 0x5c
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7fc fddd 	bl	800dab6 <ld_dword>
 8010efc:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8010efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f00:	4a99      	ldr	r2, [pc, #612]	@ (8011168 <find_volume+0x540>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d901      	bls.n	8010f0a <find_volume+0x2e2>
 8010f06:	230d      	movs	r3, #13
 8010f08:	e219      	b.n	801133e <find_volume+0x716>
		fs->n_fatent = nclst + 2;
 8010f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f0c:	1c9a      	adds	r2, r3, #2
 8010f0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f10:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8010f12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f14:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010f16:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8010f18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f1a:	333c      	adds	r3, #60	@ 0x3c
 8010f1c:	3358      	adds	r3, #88	@ 0x58
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7fc fdc9 	bl	800dab6 <ld_dword>
 8010f24:	4602      	mov	r2, r0
 8010f26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010f28:	441a      	add	r2, r3
 8010f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f2c:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8010f2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f30:	333c      	adds	r3, #60	@ 0x3c
 8010f32:	3350      	adds	r3, #80	@ 0x50
 8010f34:	4618      	mov	r0, r3
 8010f36:	f7fc fdbe 	bl	800dab6 <ld_dword>
 8010f3a:	4602      	mov	r2, r0
 8010f3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010f3e:	441a      	add	r2, r3
 8010f40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f42:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8010f44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f48:	2200      	movs	r2, #0
 8010f4a:	469a      	mov	sl, r3
 8010f4c:	4693      	mov	fp, r2
 8010f4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f50:	895b      	ldrh	r3, [r3, #10]
 8010f52:	461a      	mov	r2, r3
 8010f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f56:	fb02 f303 	mul.w	r3, r2, r3
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	4698      	mov	r8, r3
 8010f5e:	4691      	mov	r9, r2
 8010f60:	eb1a 0408 	adds.w	r4, sl, r8
 8010f64:	eb4b 0509 	adc.w	r5, fp, r9
 8010f68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8010f6c:	42a2      	cmp	r2, r4
 8010f6e:	41ab      	sbcs	r3, r5
 8010f70:	d201      	bcs.n	8010f76 <find_volume+0x34e>
 8010f72:	230d      	movs	r3, #13
 8010f74:	e1e3      	b.n	801133e <find_volume+0x716>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8010f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f78:	333c      	adds	r3, #60	@ 0x3c
 8010f7a:	3360      	adds	r3, #96	@ 0x60
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f7fc fd9a 	bl	800dab6 <ld_dword>
 8010f82:	4602      	mov	r2, r0
 8010f84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f86:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8010f88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f8c:	4619      	mov	r1, r3
 8010f8e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8010f90:	f7fd fa2a 	bl	800e3e8 <clust2sect>
 8010f94:	4603      	mov	r3, r0
 8010f96:	4619      	mov	r1, r3
 8010f98:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8010f9a:	f7fd f987 	bl	800e2ac <move_window>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d001      	beq.n	8010fa8 <find_volume+0x380>
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	e1ca      	b.n	801133e <find_volume+0x716>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8010fa8:	2300      	movs	r3, #0
 8010faa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010fac:	e015      	b.n	8010fda <find_volume+0x3b2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8010fae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010fb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010fb2:	4413      	add	r3, r2
 8010fb4:	333c      	adds	r3, #60	@ 0x3c
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	2b81      	cmp	r3, #129	@ 0x81
 8010fba:	d10b      	bne.n	8010fd4 <find_volume+0x3ac>
 8010fbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010fbe:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8010fc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010fc4:	3314      	adds	r3, #20
 8010fc6:	4413      	add	r3, r2
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f7fc fd74 	bl	800dab6 <ld_dword>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	2b02      	cmp	r3, #2
 8010fd2:	d009      	beq.n	8010fe8 <find_volume+0x3c0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8010fd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010fd6:	3320      	adds	r3, #32
 8010fd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010fda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010fdc:	899b      	ldrh	r3, [r3, #12]
 8010fde:	461a      	mov	r2, r3
 8010fe0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010fe2:	4293      	cmp	r3, r2
 8010fe4:	d3e3      	bcc.n	8010fae <find_volume+0x386>
 8010fe6:	e000      	b.n	8010fea <find_volume+0x3c2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8010fe8:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8010fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010fec:	899b      	ldrh	r3, [r3, #12]
 8010fee:	461a      	mov	r2, r3
 8010ff0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	d101      	bne.n	8010ffa <find_volume+0x3d2>
 8010ff6:	230d      	movs	r3, #13
 8010ff8:	e1a1      	b.n	801133e <find_volume+0x716>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010ffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8011000:	61da      	str	r2, [r3, #28]
 8011002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011004:	69da      	ldr	r2, [r3, #28]
 8011006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011008:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 801100a:	2304      	movs	r3, #4
 801100c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8011010:	e17d      	b.n	801130e <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011014:	333c      	adds	r3, #60	@ 0x3c
 8011016:	330b      	adds	r3, #11
 8011018:	4618      	mov	r0, r3
 801101a:	f7fc fd33 	bl	800da84 <ld_word>
 801101e:	4603      	mov	r3, r0
 8011020:	461a      	mov	r2, r3
 8011022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011024:	899b      	ldrh	r3, [r3, #12]
 8011026:	429a      	cmp	r2, r3
 8011028:	d001      	beq.n	801102e <find_volume+0x406>
 801102a:	230d      	movs	r3, #13
 801102c:	e187      	b.n	801133e <find_volume+0x716>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801102e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011030:	333c      	adds	r3, #60	@ 0x3c
 8011032:	3316      	adds	r3, #22
 8011034:	4618      	mov	r0, r3
 8011036:	f7fc fd25 	bl	800da84 <ld_word>
 801103a:	4603      	mov	r3, r0
 801103c:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801103e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011040:	2b00      	cmp	r3, #0
 8011042:	d106      	bne.n	8011052 <find_volume+0x42a>
 8011044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011046:	333c      	adds	r3, #60	@ 0x3c
 8011048:	3324      	adds	r3, #36	@ 0x24
 801104a:	4618      	mov	r0, r3
 801104c:	f7fc fd33 	bl	800dab6 <ld_dword>
 8011050:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 8011052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011054:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011056:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801105a:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 801105e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011060:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011064:	789b      	ldrb	r3, [r3, #2]
 8011066:	2b01      	cmp	r3, #1
 8011068:	d005      	beq.n	8011076 <find_volume+0x44e>
 801106a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801106c:	789b      	ldrb	r3, [r3, #2]
 801106e:	2b02      	cmp	r3, #2
 8011070:	d001      	beq.n	8011076 <find_volume+0x44e>
 8011072:	230d      	movs	r3, #13
 8011074:	e163      	b.n	801133e <find_volume+0x716>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011078:	789b      	ldrb	r3, [r3, #2]
 801107a:	461a      	mov	r2, r3
 801107c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801107e:	fb02 f303 	mul.w	r3, r2, r3
 8011082:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011086:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 801108a:	461a      	mov	r2, r3
 801108c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801108e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011092:	895b      	ldrh	r3, [r3, #10]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d008      	beq.n	80110aa <find_volume+0x482>
 8011098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801109a:	895b      	ldrh	r3, [r3, #10]
 801109c:	461a      	mov	r2, r3
 801109e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80110a0:	895b      	ldrh	r3, [r3, #10]
 80110a2:	3b01      	subs	r3, #1
 80110a4:	4013      	ands	r3, r2
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d001      	beq.n	80110ae <find_volume+0x486>
 80110aa:	230d      	movs	r3, #13
 80110ac:	e147      	b.n	801133e <find_volume+0x716>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80110ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80110b0:	333c      	adds	r3, #60	@ 0x3c
 80110b2:	3311      	adds	r3, #17
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7fc fce5 	bl	800da84 <ld_word>
 80110ba:	4603      	mov	r3, r0
 80110bc:	461a      	mov	r2, r3
 80110be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80110c0:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80110c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80110c4:	891b      	ldrh	r3, [r3, #8]
 80110c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80110c8:	8992      	ldrh	r2, [r2, #12]
 80110ca:	0952      	lsrs	r2, r2, #5
 80110cc:	b292      	uxth	r2, r2
 80110ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80110d2:	fb01 f202 	mul.w	r2, r1, r2
 80110d6:	1a9b      	subs	r3, r3, r2
 80110d8:	b29b      	uxth	r3, r3
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d001      	beq.n	80110e2 <find_volume+0x4ba>
 80110de:	230d      	movs	r3, #13
 80110e0:	e12d      	b.n	801133e <find_volume+0x716>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80110e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80110e4:	333c      	adds	r3, #60	@ 0x3c
 80110e6:	3313      	adds	r3, #19
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7fc fccb 	bl	800da84 <ld_word>
 80110ee:	4603      	mov	r3, r0
 80110f0:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80110f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d106      	bne.n	8011106 <find_volume+0x4de>
 80110f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80110fa:	333c      	adds	r3, #60	@ 0x3c
 80110fc:	3320      	adds	r3, #32
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fc fcd9 	bl	800dab6 <ld_dword>
 8011104:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011108:	333c      	adds	r3, #60	@ 0x3c
 801110a:	330e      	adds	r3, #14
 801110c:	4618      	mov	r0, r3
 801110e:	f7fc fcb9 	bl	800da84 <ld_word>
 8011112:	4603      	mov	r3, r0
 8011114:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011118:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801111c:	2b00      	cmp	r3, #0
 801111e:	d101      	bne.n	8011124 <find_volume+0x4fc>
 8011120:	230d      	movs	r3, #13
 8011122:	e10c      	b.n	801133e <find_volume+0x716>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011124:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8011128:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801112a:	4413      	add	r3, r2
 801112c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801112e:	8911      	ldrh	r1, [r2, #8]
 8011130:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011132:	8992      	ldrh	r2, [r2, #12]
 8011134:	0952      	lsrs	r2, r2, #5
 8011136:	b292      	uxth	r2, r2
 8011138:	fbb1 f2f2 	udiv	r2, r1, r2
 801113c:	b292      	uxth	r2, r2
 801113e:	4413      	add	r3, r2
 8011140:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011142:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011144:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011146:	429a      	cmp	r2, r3
 8011148:	d201      	bcs.n	801114e <find_volume+0x526>
 801114a:	230d      	movs	r3, #13
 801114c:	e0f7      	b.n	801133e <find_volume+0x716>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801114e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011152:	1ad3      	subs	r3, r2, r3
 8011154:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011156:	8952      	ldrh	r2, [r2, #10]
 8011158:	fbb3 f3f2 	udiv	r3, r3, r2
 801115c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801115e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011160:	2b00      	cmp	r3, #0
 8011162:	d103      	bne.n	801116c <find_volume+0x544>
 8011164:	230d      	movs	r3, #13
 8011166:	e0ea      	b.n	801133e <find_volume+0x716>
 8011168:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 801116c:	2303      	movs	r3, #3
 801116e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011174:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8011178:	4293      	cmp	r3, r2
 801117a:	d802      	bhi.n	8011182 <find_volume+0x55a>
 801117c:	2302      	movs	r3, #2
 801117e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011184:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8011188:	4293      	cmp	r3, r2
 801118a:	d802      	bhi.n	8011192 <find_volume+0x56a>
 801118c:	2301      	movs	r3, #1
 801118e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011194:	1c9a      	adds	r2, r3, #2
 8011196:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011198:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 801119a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801119c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801119e:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80111a0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80111a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80111a6:	441a      	add	r2, r3
 80111a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111aa:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80111ac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80111ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80111b0:	441a      	add	r2, r3
 80111b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111b4:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 80111b6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80111ba:	2b03      	cmp	r3, #3
 80111bc:	d11e      	bne.n	80111fc <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80111be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111c0:	333c      	adds	r3, #60	@ 0x3c
 80111c2:	332a      	adds	r3, #42	@ 0x2a
 80111c4:	4618      	mov	r0, r3
 80111c6:	f7fc fc5d 	bl	800da84 <ld_word>
 80111ca:	4603      	mov	r3, r0
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d001      	beq.n	80111d4 <find_volume+0x5ac>
 80111d0:	230d      	movs	r3, #13
 80111d2:	e0b4      	b.n	801133e <find_volume+0x716>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80111d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111d6:	891b      	ldrh	r3, [r3, #8]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d001      	beq.n	80111e0 <find_volume+0x5b8>
 80111dc:	230d      	movs	r3, #13
 80111de:	e0ae      	b.n	801133e <find_volume+0x716>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80111e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111e2:	333c      	adds	r3, #60	@ 0x3c
 80111e4:	332c      	adds	r3, #44	@ 0x2c
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7fc fc65 	bl	800dab6 <ld_dword>
 80111ec:	4602      	mov	r2, r0
 80111ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111f0:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80111f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111f4:	6a1b      	ldr	r3, [r3, #32]
 80111f6:	009b      	lsls	r3, r3, #2
 80111f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80111fa:	e01f      	b.n	801123c <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80111fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111fe:	891b      	ldrh	r3, [r3, #8]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d101      	bne.n	8011208 <find_volume+0x5e0>
 8011204:	230d      	movs	r3, #13
 8011206:	e09a      	b.n	801133e <find_volume+0x716>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011208:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801120a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801120c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801120e:	441a      	add	r2, r3
 8011210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011212:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011214:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8011218:	2b02      	cmp	r3, #2
 801121a:	d103      	bne.n	8011224 <find_volume+0x5fc>
 801121c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801121e:	6a1b      	ldr	r3, [r3, #32]
 8011220:	005b      	lsls	r3, r3, #1
 8011222:	e00a      	b.n	801123a <find_volume+0x612>
 8011224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011226:	6a1a      	ldr	r2, [r3, #32]
 8011228:	4613      	mov	r3, r2
 801122a:	005b      	lsls	r3, r3, #1
 801122c:	4413      	add	r3, r2
 801122e:	085a      	lsrs	r2, r3, #1
 8011230:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011232:	6a1b      	ldr	r3, [r3, #32]
 8011234:	f003 0301 	and.w	r3, r3, #1
 8011238:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801123a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801123c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801123e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011242:	899b      	ldrh	r3, [r3, #12]
 8011244:	4619      	mov	r1, r3
 8011246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011248:	440b      	add	r3, r1
 801124a:	3b01      	subs	r3, #1
 801124c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801124e:	8989      	ldrh	r1, [r1, #12]
 8011250:	fbb3 f3f1 	udiv	r3, r3, r1
 8011254:	429a      	cmp	r2, r3
 8011256:	d201      	bcs.n	801125c <find_volume+0x634>
 8011258:	230d      	movs	r3, #13
 801125a:	e070      	b.n	801133e <find_volume+0x716>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801125c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801125e:	f04f 32ff 	mov.w	r2, #4294967295
 8011262:	61da      	str	r2, [r3, #28]
 8011264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011266:	69da      	ldr	r2, [r3, #28]
 8011268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801126a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 801126c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801126e:	2280      	movs	r2, #128	@ 0x80
 8011270:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011272:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8011276:	2b03      	cmp	r3, #3
 8011278:	d149      	bne.n	801130e <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801127a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801127c:	333c      	adds	r3, #60	@ 0x3c
 801127e:	3330      	adds	r3, #48	@ 0x30
 8011280:	4618      	mov	r0, r3
 8011282:	f7fc fbff 	bl	800da84 <ld_word>
 8011286:	4603      	mov	r3, r0
 8011288:	2b01      	cmp	r3, #1
 801128a:	d140      	bne.n	801130e <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 801128c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801128e:	3301      	adds	r3, #1
 8011290:	4619      	mov	r1, r3
 8011292:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8011294:	f7fd f80a 	bl	800e2ac <move_window>
 8011298:	4603      	mov	r3, r0
 801129a:	2b00      	cmp	r3, #0
 801129c:	d137      	bne.n	801130e <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 801129e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112a0:	2200      	movs	r2, #0
 80112a2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80112a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112a6:	333c      	adds	r3, #60	@ 0x3c
 80112a8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80112ac:	4618      	mov	r0, r3
 80112ae:	f7fc fbe9 	bl	800da84 <ld_word>
 80112b2:	4603      	mov	r3, r0
 80112b4:	461a      	mov	r2, r3
 80112b6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d127      	bne.n	801130e <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80112be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112c0:	333c      	adds	r3, #60	@ 0x3c
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7fc fbf7 	bl	800dab6 <ld_dword>
 80112c8:	4603      	mov	r3, r0
 80112ca:	4a1f      	ldr	r2, [pc, #124]	@ (8011348 <find_volume+0x720>)
 80112cc:	4293      	cmp	r3, r2
 80112ce:	d11e      	bne.n	801130e <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80112d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112d2:	333c      	adds	r3, #60	@ 0x3c
 80112d4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80112d8:	4618      	mov	r0, r3
 80112da:	f7fc fbec 	bl	800dab6 <ld_dword>
 80112de:	4603      	mov	r3, r0
 80112e0:	4a1a      	ldr	r2, [pc, #104]	@ (801134c <find_volume+0x724>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d113      	bne.n	801130e <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80112e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112e8:	333c      	adds	r3, #60	@ 0x3c
 80112ea:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7fc fbe1 	bl	800dab6 <ld_dword>
 80112f4:	4602      	mov	r2, r0
 80112f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112f8:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80112fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112fc:	333c      	adds	r3, #60	@ 0x3c
 80112fe:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011302:	4618      	mov	r0, r3
 8011304:	f7fc fbd7 	bl	800dab6 <ld_dword>
 8011308:	4602      	mov	r2, r0
 801130a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801130c:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801130e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011310:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8011314:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011316:	4b0e      	ldr	r3, [pc, #56]	@ (8011350 <find_volume+0x728>)
 8011318:	881b      	ldrh	r3, [r3, #0]
 801131a:	3301      	adds	r3, #1
 801131c:	b29a      	uxth	r2, r3
 801131e:	4b0c      	ldr	r3, [pc, #48]	@ (8011350 <find_volume+0x728>)
 8011320:	801a      	strh	r2, [r3, #0]
 8011322:	4b0b      	ldr	r3, [pc, #44]	@ (8011350 <find_volume+0x728>)
 8011324:	881a      	ldrh	r2, [r3, #0]
 8011326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011328:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801132a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801132c:	4a09      	ldr	r2, [pc, #36]	@ (8011354 <find_volume+0x72c>)
 801132e:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8011330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011332:	4a09      	ldr	r2, [pc, #36]	@ (8011358 <find_volume+0x730>)
 8011334:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011336:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8011338:	f7fc ff50 	bl	800e1dc <clear_lock>
#endif
	return FR_OK;
 801133c:	2300      	movs	r3, #0
}
 801133e:	4618      	mov	r0, r3
 8011340:	3770      	adds	r7, #112	@ 0x70
 8011342:	46bd      	mov	sp, r7
 8011344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011348:	41615252 	.word	0x41615252
 801134c:	61417272 	.word	0x61417272
 8011350:	2000395c 	.word	0x2000395c
 8011354:	20003be0 	.word	0x20003be0
 8011358:	20003980 	.word	0x20003980

0801135c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011366:	2309      	movs	r3, #9
 8011368:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d01c      	beq.n	80113aa <validate+0x4e>
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d018      	beq.n	80113aa <validate+0x4e>
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	781b      	ldrb	r3, [r3, #0]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d013      	beq.n	80113aa <validate+0x4e>
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	889a      	ldrh	r2, [r3, #4]
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	88db      	ldrh	r3, [r3, #6]
 801138c:	429a      	cmp	r2, r3
 801138e:	d10c      	bne.n	80113aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	785b      	ldrb	r3, [r3, #1]
 8011396:	4618      	mov	r0, r3
 8011398:	f7fc fad4 	bl	800d944 <disk_status>
 801139c:	4603      	mov	r3, r0
 801139e:	f003 0301 	and.w	r3, r3, #1
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d101      	bne.n	80113aa <validate+0x4e>
			res = FR_OK;
 80113a6:	2300      	movs	r3, #0
 80113a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80113aa:	7bfb      	ldrb	r3, [r7, #15]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d102      	bne.n	80113b6 <validate+0x5a>
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	e000      	b.n	80113b8 <validate+0x5c>
 80113b6:	2300      	movs	r3, #0
 80113b8:	683a      	ldr	r2, [r7, #0]
 80113ba:	6013      	str	r3, [r2, #0]
	return res;
 80113bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80113be:	4618      	mov	r0, r3
 80113c0:	3710      	adds	r7, #16
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}
	...

080113c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b088      	sub	sp, #32
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	60f8      	str	r0, [r7, #12]
 80113d0:	60b9      	str	r1, [r7, #8]
 80113d2:	4613      	mov	r3, r2
 80113d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80113d6:	68bb      	ldr	r3, [r7, #8]
 80113d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80113da:	f107 0310 	add.w	r3, r7, #16
 80113de:	4618      	mov	r0, r3
 80113e0:	f7ff fb7a 	bl	8010ad8 <get_ldnumber>
 80113e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80113e6:	69fb      	ldr	r3, [r7, #28]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	da01      	bge.n	80113f0 <f_mount+0x28>
 80113ec:	230b      	movs	r3, #11
 80113ee:	e02b      	b.n	8011448 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80113f0:	4a17      	ldr	r2, [pc, #92]	@ (8011450 <f_mount+0x88>)
 80113f2:	69fb      	ldr	r3, [r7, #28]
 80113f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80113fa:	69bb      	ldr	r3, [r7, #24]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d005      	beq.n	801140c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011400:	69b8      	ldr	r0, [r7, #24]
 8011402:	f7fc feeb 	bl	800e1dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011406:	69bb      	ldr	r3, [r7, #24]
 8011408:	2200      	movs	r2, #0
 801140a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d002      	beq.n	8011418 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	2200      	movs	r2, #0
 8011416:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011418:	68fa      	ldr	r2, [r7, #12]
 801141a:	490d      	ldr	r1, [pc, #52]	@ (8011450 <f_mount+0x88>)
 801141c:	69fb      	ldr	r3, [r7, #28]
 801141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d002      	beq.n	801142e <f_mount+0x66>
 8011428:	79fb      	ldrb	r3, [r7, #7]
 801142a:	2b01      	cmp	r3, #1
 801142c:	d001      	beq.n	8011432 <f_mount+0x6a>
 801142e:	2300      	movs	r3, #0
 8011430:	e00a      	b.n	8011448 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011432:	f107 010c 	add.w	r1, r7, #12
 8011436:	f107 0308 	add.w	r3, r7, #8
 801143a:	2200      	movs	r2, #0
 801143c:	4618      	mov	r0, r3
 801143e:	f7ff fbf3 	bl	8010c28 <find_volume>
 8011442:	4603      	mov	r3, r0
 8011444:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011446:	7dfb      	ldrb	r3, [r7, #23]
}
 8011448:	4618      	mov	r0, r3
 801144a:	3720      	adds	r7, #32
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	20003958 	.word	0x20003958

08011454 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011458:	b0a8      	sub	sp, #160	@ 0xa0
 801145a:	af00      	add	r7, sp, #0
 801145c:	6278      	str	r0, [r7, #36]	@ 0x24
 801145e:	6239      	str	r1, [r7, #32]
 8011460:	4613      	mov	r3, r2
 8011462:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011466:	2b00      	cmp	r3, #0
 8011468:	d101      	bne.n	801146e <f_open+0x1a>
 801146a:	2309      	movs	r3, #9
 801146c:	e2bc      	b.n	80119e8 <f_open+0x594>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801146e:	7ffb      	ldrb	r3, [r7, #31]
 8011470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011474:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 8011476:	7ffb      	ldrb	r3, [r7, #31]
 8011478:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 801147c:	f107 0020 	add.w	r0, r7, #32
 8011480:	461a      	mov	r2, r3
 8011482:	f7ff fbd1 	bl	8010c28 <find_volume>
 8011486:	4603      	mov	r3, r0
 8011488:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) {
 801148c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8011490:	2b00      	cmp	r3, #0
 8011492:	f040 82a0 	bne.w	80119d6 <f_open+0x582>
		dj.obj.fs = fs;
 8011496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011498:	633b      	str	r3, [r7, #48]	@ 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801149a:	6a3b      	ldr	r3, [r7, #32]
 801149c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80114a0:	4619      	mov	r1, r3
 80114a2:	4610      	mov	r0, r2
 80114a4:	f7ff fa6a 	bl	801097c <follow_path>
 80114a8:	4603      	mov	r3, r0
 80114aa:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80114ae:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d118      	bne.n	80114e8 <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80114b6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80114ba:	b25b      	sxtb	r3, r3
 80114bc:	2b00      	cmp	r3, #0
 80114be:	da03      	bge.n	80114c8 <f_open+0x74>
				res = FR_INVALID_NAME;
 80114c0:	2306      	movs	r3, #6
 80114c2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 80114c6:	e00f      	b.n	80114e8 <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80114c8:	7ffb      	ldrb	r3, [r7, #31]
 80114ca:	2b01      	cmp	r3, #1
 80114cc:	bf8c      	ite	hi
 80114ce:	2301      	movhi	r3, #1
 80114d0:	2300      	movls	r3, #0
 80114d2:	b2db      	uxtb	r3, r3
 80114d4:	461a      	mov	r2, r3
 80114d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80114da:	4611      	mov	r1, r2
 80114dc:	4618      	mov	r0, r3
 80114de:	f7fc fd35 	bl	800df4c <chk_lock>
 80114e2:	4603      	mov	r3, r0
 80114e4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80114e8:	7ffb      	ldrb	r3, [r7, #31]
 80114ea:	f003 031c 	and.w	r3, r3, #28
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	f000 8117 	beq.w	8011722 <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 80114f4:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d017      	beq.n	801152c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80114fc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8011500:	2b04      	cmp	r3, #4
 8011502:	d10e      	bne.n	8011522 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011504:	f7fc fd7e 	bl	800e004 <enq_lock>
 8011508:	4603      	mov	r3, r0
 801150a:	2b00      	cmp	r3, #0
 801150c:	d006      	beq.n	801151c <f_open+0xc8>
 801150e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011512:	4618      	mov	r0, r3
 8011514:	f7fe fde2 	bl	80100dc <dir_register>
 8011518:	4603      	mov	r3, r0
 801151a:	e000      	b.n	801151e <f_open+0xca>
 801151c:	2312      	movs	r3, #18
 801151e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011522:	7ffb      	ldrb	r3, [r7, #31]
 8011524:	f043 0308 	orr.w	r3, r3, #8
 8011528:	77fb      	strb	r3, [r7, #31]
 801152a:	e011      	b.n	8011550 <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801152c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8011530:	f003 0311 	and.w	r3, r3, #17
 8011534:	2b00      	cmp	r3, #0
 8011536:	d003      	beq.n	8011540 <f_open+0xec>
					res = FR_DENIED;
 8011538:	2307      	movs	r3, #7
 801153a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801153e:	e007      	b.n	8011550 <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011540:	7ffb      	ldrb	r3, [r7, #31]
 8011542:	f003 0304 	and.w	r3, r3, #4
 8011546:	2b00      	cmp	r3, #0
 8011548:	d002      	beq.n	8011550 <f_open+0xfc>
 801154a:	2308      	movs	r3, #8
 801154c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011550:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8011554:	2b00      	cmp	r3, #0
 8011556:	f040 8100 	bne.w	801175a <f_open+0x306>
 801155a:	7ffb      	ldrb	r3, [r7, #31]
 801155c:	f003 0308 	and.w	r3, r3, #8
 8011560:	2b00      	cmp	r3, #0
 8011562:	f000 80fa 	beq.w	801175a <f_open+0x306>
				dw = GET_FATTIME();
 8011566:	f7f8 fffb 	bl	800a560 <get_fattime>
 801156a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 801156e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011570:	781b      	ldrb	r3, [r3, #0]
 8011572:	2b04      	cmp	r3, #4
 8011574:	f040 8085 	bne.w	8011682 <f_open+0x22e>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8011578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801157c:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 801157e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011580:	695b      	ldr	r3, [r3, #20]
 8011582:	3334      	adds	r3, #52	@ 0x34
 8011584:	4618      	mov	r0, r3
 8011586:	f7fc fa96 	bl	800dab6 <ld_dword>
 801158a:	4602      	mov	r2, r0
 801158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801158e:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8011590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011592:	695b      	ldr	r3, [r3, #20]
 8011594:	3338      	adds	r3, #56	@ 0x38
 8011596:	4618      	mov	r0, r3
 8011598:	f7fc fab0 	bl	800dafc <ld_qword>
 801159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801159e:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80115a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a4:	695b      	ldr	r3, [r3, #20]
 80115a6:	3321      	adds	r3, #33	@ 0x21
 80115a8:	781b      	ldrb	r3, [r3, #0]
 80115aa:	f003 0302 	and.w	r3, r3, #2
 80115ae:	b2db      	uxtb	r3, r3
 80115b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115b2:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 80115b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b6:	2200      	movs	r2, #0
 80115b8:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 80115ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115bc:	695b      	ldr	r3, [r3, #20]
 80115be:	3308      	adds	r3, #8
 80115c0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7fc fb8f 	bl	800dce8 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80115ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115cc:	695b      	ldr	r3, [r3, #20]
 80115ce:	f103 0214 	add.w	r2, r3, #20
 80115d2:	2300      	movs	r3, #0
 80115d4:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 80115d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115d8:	695b      	ldr	r3, [r3, #20]
 80115da:	330c      	adds	r3, #12
 80115dc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7fc fb81 	bl	800dce8 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 80115e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115e8:	695b      	ldr	r3, [r3, #20]
 80115ea:	f103 0215 	add.w	r2, r3, #21
 80115ee:	2300      	movs	r3, #0
 80115f0:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 80115f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115f4:	695b      	ldr	r3, [r3, #20]
 80115f6:	1d1a      	adds	r2, r3, #4
 80115f8:	2320      	movs	r3, #32
 80115fa:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 80115fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115fe:	695b      	ldr	r3, [r3, #20]
 8011600:	3334      	adds	r3, #52	@ 0x34
 8011602:	2100      	movs	r1, #0
 8011604:	4618      	mov	r0, r3
 8011606:	f7fc fb6f 	bl	800dce8 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 801160a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801160c:	695b      	ldr	r3, [r3, #20]
 801160e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011612:	f04f 0200 	mov.w	r2, #0
 8011616:	f04f 0300 	mov.w	r3, #0
 801161a:	4608      	mov	r0, r1
 801161c:	f7fc fb90 	bl	800dd40 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8011620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011622:	695b      	ldr	r3, [r3, #20]
 8011624:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8011628:	f04f 0200 	mov.w	r2, #0
 801162c:	f04f 0300 	mov.w	r3, #0
 8011630:	4608      	mov	r0, r1
 8011632:	f7fc fb85 	bl	800dd40 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8011636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011638:	695b      	ldr	r3, [r3, #20]
 801163a:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 801163e:	2301      	movs	r3, #1
 8011640:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 8011642:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011646:	4618      	mov	r0, r3
 8011648:	f7fe fa94 	bl	800fb74 <store_xdir>
 801164c:	4603      	mov	r3, r0
 801164e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8011652:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8011656:	2b00      	cmp	r3, #0
 8011658:	d17f      	bne.n	801175a <f_open+0x306>
 801165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801165c:	689b      	ldr	r3, [r3, #8]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d07b      	beq.n	801175a <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8011662:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011666:	689b      	ldr	r3, [r3, #8]
 8011668:	2200      	movs	r2, #0
 801166a:	4619      	mov	r1, r3
 801166c:	f7fd faaa 	bl	800ebc4 <remove_chain>
 8011670:	4603      	mov	r3, r0
 8011672:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8011676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011678:	689b      	ldr	r3, [r3, #8]
 801167a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801167c:	3b01      	subs	r3, #1
 801167e:	6193      	str	r3, [r2, #24]
 8011680:	e06b      	b.n	801175a <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011684:	330e      	adds	r3, #14
 8011686:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801168a:	4618      	mov	r0, r3
 801168c:	f7fc fb2c 	bl	800dce8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011692:	3316      	adds	r3, #22
 8011694:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8011698:	4618      	mov	r0, r3
 801169a:	f7fc fb25 	bl	800dce8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801169e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116a0:	f103 020b 	add.w	r2, r3, #11
 80116a4:	2320      	movs	r3, #32
 80116a6:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80116a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80116aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116ac:	4619      	mov	r1, r3
 80116ae:	4610      	mov	r0, r2
 80116b0:	f7fd fe5f 	bl	800f372 <ld_clust>
 80116b4:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80116b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80116ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116bc:	2200      	movs	r2, #0
 80116be:	4619      	mov	r1, r3
 80116c0:	f7fd fe76 	bl	800f3b0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80116c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116c6:	331c      	adds	r3, #28
 80116c8:	2100      	movs	r1, #0
 80116ca:	4618      	mov	r0, r3
 80116cc:	f7fc fb0c 	bl	800dce8 <st_dword>
					fs->wflag = 1;
 80116d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80116d2:	2301      	movs	r3, #1
 80116d4:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80116d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d03d      	beq.n	801175a <f_open+0x306>
						dw = fs->winsect;
 80116de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						res = remove_chain(&dj.obj, cl, 0);
 80116e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80116ea:	2200      	movs	r2, #0
 80116ec:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7fd fa67 	bl	800ebc4 <remove_chain>
 80116f6:	4603      	mov	r3, r0
 80116f8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						if (res == FR_OK) {
 80116fc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8011700:	2b00      	cmp	r3, #0
 8011702:	d12a      	bne.n	801175a <f_open+0x306>
							res = move_window(fs, dw);
 8011704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011706:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801170a:	4618      	mov	r0, r3
 801170c:	f7fc fdce 	bl	800e2ac <move_window>
 8011710:	4603      	mov	r3, r0
 8011712:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011718:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801171c:	3b01      	subs	r3, #1
 801171e:	6193      	str	r3, [r2, #24]
 8011720:	e01b      	b.n	801175a <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011722:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8011726:	2b00      	cmp	r3, #0
 8011728:	d117      	bne.n	801175a <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801172a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801172e:	f003 0310 	and.w	r3, r3, #16
 8011732:	2b00      	cmp	r3, #0
 8011734:	d003      	beq.n	801173e <f_open+0x2ea>
					res = FR_NO_FILE;
 8011736:	2304      	movs	r3, #4
 8011738:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801173c:	e00d      	b.n	801175a <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801173e:	7ffb      	ldrb	r3, [r7, #31]
 8011740:	f003 0302 	and.w	r3, r3, #2
 8011744:	2b00      	cmp	r3, #0
 8011746:	d008      	beq.n	801175a <f_open+0x306>
 8011748:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801174c:	f003 0301 	and.w	r3, r3, #1
 8011750:	2b00      	cmp	r3, #0
 8011752:	d002      	beq.n	801175a <f_open+0x306>
						res = FR_DENIED;
 8011754:	2307      	movs	r3, #7
 8011756:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 801175a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801175e:	2b00      	cmp	r3, #0
 8011760:	d126      	bne.n	80117b0 <f_open+0x35c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011762:	7ffb      	ldrb	r3, [r7, #31]
 8011764:	f003 0308 	and.w	r3, r3, #8
 8011768:	2b00      	cmp	r3, #0
 801176a:	d003      	beq.n	8011774 <f_open+0x320>
				mode |= FA_MODIFIED;
 801176c:	7ffb      	ldrb	r3, [r7, #31]
 801176e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011772:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011776:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801177a:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 801177c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011780:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011782:	7ffb      	ldrb	r3, [r7, #31]
 8011784:	2b01      	cmp	r3, #1
 8011786:	bf8c      	ite	hi
 8011788:	2301      	movhi	r3, #1
 801178a:	2300      	movls	r3, #0
 801178c:	b2db      	uxtb	r3, r3
 801178e:	461a      	mov	r2, r3
 8011790:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011794:	4611      	mov	r1, r2
 8011796:	4618      	mov	r0, r3
 8011798:	f7fc fc56 	bl	800e048 <inc_lock>
 801179c:	4602      	mov	r2, r0
 801179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117a0:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80117a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d102      	bne.n	80117b0 <f_open+0x35c>
 80117aa:	2302      	movs	r3, #2
 80117ac:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80117b0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	f040 810e 	bne.w	80119d6 <f_open+0x582>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80117ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	2b04      	cmp	r3, #4
 80117c0:	d12d      	bne.n	801181e <f_open+0x3ca>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80117c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80117c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117c6:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80117c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80117cc:	4613      	mov	r3, r2
 80117ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80117d2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80117d6:	431a      	orrs	r2, r3
 80117d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117da:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80117dc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80117de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117e0:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80117e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117e4:	695b      	ldr	r3, [r3, #20]
 80117e6:	3334      	adds	r3, #52	@ 0x34
 80117e8:	4618      	mov	r0, r3
 80117ea:	f7fc f964 	bl	800dab6 <ld_dword>
 80117ee:	4602      	mov	r2, r0
 80117f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117f2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80117f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117f6:	695b      	ldr	r3, [r3, #20]
 80117f8:	3338      	adds	r3, #56	@ 0x38
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7fc f97e 	bl	800dafc <ld_qword>
 8011800:	4602      	mov	r2, r0
 8011802:	460b      	mov	r3, r1
 8011804:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011806:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801180a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801180c:	695b      	ldr	r3, [r3, #20]
 801180e:	3321      	adds	r3, #33	@ 0x21
 8011810:	781b      	ldrb	r3, [r3, #0]
 8011812:	f003 0302 	and.w	r3, r3, #2
 8011816:	b2da      	uxtb	r2, r3
 8011818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801181a:	71da      	strb	r2, [r3, #7]
 801181c:	e016      	b.n	801184c <f_open+0x3f8>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801181e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011822:	4619      	mov	r1, r3
 8011824:	4610      	mov	r0, r2
 8011826:	f7fd fda4 	bl	800f372 <ld_clust>
 801182a:	4602      	mov	r2, r0
 801182c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801182e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011830:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011832:	331c      	adds	r3, #28
 8011834:	4618      	mov	r0, r3
 8011836:	f7fc f93e 	bl	800dab6 <ld_dword>
 801183a:	4603      	mov	r3, r0
 801183c:	2200      	movs	r2, #0
 801183e:	613b      	str	r3, [r7, #16]
 8011840:	617a      	str	r2, [r7, #20]
 8011842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011844:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8011848:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801184e:	2200      	movs	r2, #0
 8011850:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011856:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801185a:	88da      	ldrh	r2, [r3, #6]
 801185c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801185e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011862:	7ffa      	ldrb	r2, [r7, #31]
 8011864:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 8011868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801186a:	2200      	movs	r2, #0
 801186c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8011870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011872:	2200      	movs	r2, #0
 8011874:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011876:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011878:	f04f 0200 	mov.w	r2, #0
 801187c:	f04f 0300 	mov.w	r3, #0
 8011880:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011886:	3354      	adds	r3, #84	@ 0x54
 8011888:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801188c:	2100      	movs	r1, #0
 801188e:	4618      	mov	r0, r3
 8011890:	f7fc faff 	bl	800de92 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011894:	7ffb      	ldrb	r3, [r7, #31]
 8011896:	f003 0320 	and.w	r3, r3, #32
 801189a:	2b00      	cmp	r3, #0
 801189c:	f000 809b 	beq.w	80119d6 <f_open+0x582>
 80118a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80118a6:	4313      	orrs	r3, r2
 80118a8:	f000 8095 	beq.w	80119d6 <f_open+0x582>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80118ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80118b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80118b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80118b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118ba:	895b      	ldrh	r3, [r3, #10]
 80118bc:	461a      	mov	r2, r3
 80118be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118c0:	899b      	ldrh	r3, [r3, #12]
 80118c2:	fb02 f303 	mul.w	r3, r2, r3
 80118c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80118ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118cc:	689b      	ldr	r3, [r3, #8]
 80118ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80118d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118d4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80118d8:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 80118dc:	e023      	b.n	8011926 <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 80118de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118e0:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7fc fd9f 	bl	800e428 <get_fat>
 80118ea:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst <= 1) res = FR_INT_ERR;
 80118ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80118f2:	2b01      	cmp	r3, #1
 80118f4:	d802      	bhi.n	80118fc <f_open+0x4a8>
 80118f6:	2302      	movs	r3, #2
 80118f8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80118fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011904:	d102      	bne.n	801190c <f_open+0x4b8>
 8011906:	2301      	movs	r3, #1
 8011908:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801190c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011910:	2200      	movs	r2, #0
 8011912:	4698      	mov	r8, r3
 8011914:	4691      	mov	r9, r2
 8011916:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 801191a:	ebb2 0a08 	subs.w	sl, r2, r8
 801191e:	eb63 0b09 	sbc.w	fp, r3, r9
 8011922:	e9c7 ab24 	strd	sl, fp, [r7, #144]	@ 0x90
 8011926:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801192a:	2b00      	cmp	r3, #0
 801192c:	d10a      	bne.n	8011944 <f_open+0x4f0>
 801192e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011932:	2200      	movs	r2, #0
 8011934:	461c      	mov	r4, r3
 8011936:	4615      	mov	r5, r2
 8011938:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 801193c:	4294      	cmp	r4, r2
 801193e:	eb75 0303 	sbcs.w	r3, r5, r3
 8011942:	d3cc      	bcc.n	80118de <f_open+0x48a>
				}
				fp->clust = clst;
 8011944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011946:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801194a:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801194c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8011950:	2b00      	cmp	r3, #0
 8011952:	d140      	bne.n	80119d6 <f_open+0x582>
 8011954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011956:	899b      	ldrh	r3, [r3, #12]
 8011958:	b29b      	uxth	r3, r3
 801195a:	2200      	movs	r2, #0
 801195c:	60bb      	str	r3, [r7, #8]
 801195e:	60fa      	str	r2, [r7, #12]
 8011960:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8011964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011968:	f7ef f91e 	bl	8000ba8 <__aeabi_uldivmod>
 801196c:	4313      	orrs	r3, r2
 801196e:	d032      	beq.n	80119d6 <f_open+0x582>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011972:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8011976:	4618      	mov	r0, r3
 8011978:	f7fc fd36 	bl	800e3e8 <clust2sect>
 801197c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8011980:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011984:	2b00      	cmp	r3, #0
 8011986:	d103      	bne.n	8011990 <f_open+0x53c>
						res = FR_INT_ERR;
 8011988:	2302      	movs	r3, #2
 801198a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801198e:	e022      	b.n	80119d6 <f_open+0x582>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011992:	899b      	ldrh	r3, [r3, #12]
 8011994:	b29b      	uxth	r3, r3
 8011996:	2200      	movs	r2, #0
 8011998:	603b      	str	r3, [r7, #0]
 801199a:	607a      	str	r2, [r7, #4]
 801199c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80119a0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80119a4:	f7ef f900 	bl	8000ba8 <__aeabi_uldivmod>
 80119a8:	4602      	mov	r2, r0
 80119aa:	460b      	mov	r3, r1
 80119ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80119b0:	441a      	add	r2, r3
 80119b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119b4:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80119b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119b8:	7858      	ldrb	r0, [r3, #1]
 80119ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119bc:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80119c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80119c4:	2301      	movs	r3, #1
 80119c6:	f7fb ffff 	bl	800d9c8 <disk_read>
 80119ca:	4603      	mov	r3, r0
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d002      	beq.n	80119d6 <f_open+0x582>
 80119d0:	2301      	movs	r3, #1
 80119d2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80119d6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d002      	beq.n	80119e4 <f_open+0x590>
 80119de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119e0:	2200      	movs	r2, #0
 80119e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80119e4:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	37a0      	adds	r7, #160	@ 0xa0
 80119ec:	46bd      	mov	sp, r7
 80119ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080119f2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80119f2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80119f6:	b098      	sub	sp, #96	@ 0x60
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80119fc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80119fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8011a00:	623b      	str	r3, [r7, #32]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8011a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a04:	64fb      	str	r3, [r7, #76]	@ 0x4c


	*br = 0;	/* Clear read byte counter */
 8011a06:	6a3a      	ldr	r2, [r7, #32]
 8011a08:	2300      	movs	r3, #0
 8011a0a:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011a0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a0e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011a12:	4619      	mov	r1, r3
 8011a14:	4610      	mov	r0, r2
 8011a16:	f7ff fca1 	bl	801135c <validate>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011a20:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d108      	bne.n	8011a3a <f_read+0x48>
 8011a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a2a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011a2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011a32:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d002      	beq.n	8011a40 <f_read+0x4e>
 8011a3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011a3e:	e16b      	b.n	8011d18 <f_read+0x326>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8011a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011a46:	f003 0301 	and.w	r3, r3, #1
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d101      	bne.n	8011a52 <f_read+0x60>
 8011a4e:	2307      	movs	r3, #7
 8011a50:	e162      	b.n	8011d18 <f_read+0x326>
	remain = fp->obj.objsize - fp->fptr;
 8011a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a54:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8011a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a5a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8011a5e:	ebb0 0802 	subs.w	r8, r0, r2
 8011a62:	eb61 0903 	sbc.w	r9, r1, r3
 8011a66:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	461c      	mov	r4, r3
 8011a70:	4615      	mov	r5, r2
 8011a72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8011a76:	42a2      	cmp	r2, r4
 8011a78:	41ab      	sbcs	r3, r5
 8011a7a:	f080 8148 	bcs.w	8011d0e <f_read+0x31c>
 8011a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a80:	627b      	str	r3, [r7, #36]	@ 0x24

	for ( ;  btr;								/* Repeat until all data read */
 8011a82:	e144      	b.n	8011d0e <f_read+0x31c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a86:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8011a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a8c:	899b      	ldrh	r3, [r3, #12]
 8011a8e:	b29b      	uxth	r3, r3
 8011a90:	2200      	movs	r2, #0
 8011a92:	61bb      	str	r3, [r7, #24]
 8011a94:	61fa      	str	r2, [r7, #28]
 8011a96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011a9a:	f7ef f885 	bl	8000ba8 <__aeabi_uldivmod>
 8011a9e:	4313      	orrs	r3, r2
 8011aa0:	f040 80e9 	bne.w	8011c76 <f_read+0x284>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aa6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8011aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011aac:	899b      	ldrh	r3, [r3, #12]
 8011aae:	b29b      	uxth	r3, r3
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	613b      	str	r3, [r7, #16]
 8011ab4:	617a      	str	r2, [r7, #20]
 8011ab6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011aba:	f7ef f875 	bl	8000ba8 <__aeabi_uldivmod>
 8011abe:	4602      	mov	r2, r0
 8011ac0:	460b      	mov	r3, r1
 8011ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ac4:	895b      	ldrh	r3, [r3, #10]
 8011ac6:	3b01      	subs	r3, #1
 8011ac8:	4013      	ands	r3, r2
 8011aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 8011acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d132      	bne.n	8011b38 <f_read+0x146>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ad4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8011ad8:	4313      	orrs	r3, r2
 8011ada:	d103      	bne.n	8011ae4 <f_read+0xf2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ade:	689b      	ldr	r3, [r3, #8]
 8011ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011ae2:	e013      	b.n	8011b0c <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d007      	beq.n	8011afc <f_read+0x10a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8011af2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011af4:	f7fd fa1b 	bl	800ef2e <clmt_clust>
 8011af8:	65b8      	str	r0, [r7, #88]	@ 0x58
 8011afa:	e007      	b.n	8011b0c <f_read+0x11a>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011afc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b02:	4619      	mov	r1, r3
 8011b04:	4610      	mov	r0, r2
 8011b06:	f7fc fc8f 	bl	800e428 <get_fat>
 8011b0a:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011b0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011b0e:	2b01      	cmp	r3, #1
 8011b10:	d805      	bhi.n	8011b1e <f_read+0x12c>
 8011b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b14:	2202      	movs	r2, #2
 8011b16:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8011b1a:	2302      	movs	r3, #2
 8011b1c:	e0fc      	b.n	8011d18 <f_read+0x326>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011b1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b24:	d105      	bne.n	8011b32 <f_read+0x140>
 8011b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b28:	2201      	movs	r2, #1
 8011b2a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8011b2e:	2301      	movs	r3, #1
 8011b30:	e0f2      	b.n	8011d18 <f_read+0x326>
				fp->clust = clst;				/* Update current cluster */
 8011b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011b36:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011b38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b3e:	4619      	mov	r1, r3
 8011b40:	4610      	mov	r0, r2
 8011b42:	f7fc fc51 	bl	800e3e8 <clust2sect>
 8011b46:	63b8      	str	r0, [r7, #56]	@ 0x38
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d105      	bne.n	8011b5a <f_read+0x168>
 8011b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b50:	2202      	movs	r2, #2
 8011b52:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8011b56:	2302      	movs	r3, #2
 8011b58:	e0de      	b.n	8011d18 <f_read+0x326>
			sect += csect;
 8011b5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b5e:	4413      	add	r3, r2
 8011b60:	63bb      	str	r3, [r7, #56]	@ 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b64:	899b      	ldrh	r3, [r3, #12]
 8011b66:	461a      	mov	r2, r3
 8011b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b6e:	653b      	str	r3, [r7, #80]	@ 0x50
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011b70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d043      	beq.n	8011bfe <f_read+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011b76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011b78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b7a:	4413      	add	r3, r2
 8011b7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b7e:	8952      	ldrh	r2, [r2, #10]
 8011b80:	4293      	cmp	r3, r2
 8011b82:	d905      	bls.n	8011b90 <f_read+0x19e>
					cc = fs->csize - csect;
 8011b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b86:	895b      	ldrh	r3, [r3, #10]
 8011b88:	461a      	mov	r2, r3
 8011b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b8c:	1ad3      	subs	r3, r2, r3
 8011b8e:	653b      	str	r3, [r7, #80]	@ 0x50
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b92:	7858      	ldrb	r0, [r3, #1]
 8011b94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011b98:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011b9a:	f7fb ff15 	bl	800d9c8 <disk_read>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d005      	beq.n	8011bb0 <f_read+0x1be>
 8011ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8011bac:	2301      	movs	r3, #1
 8011bae:	e0b3      	b.n	8011d18 <f_read+0x326>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011bb6:	b25b      	sxtb	r3, r3
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	da18      	bge.n	8011bee <f_read+0x1fc>
 8011bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bc2:	1ad3      	subs	r3, r2, r3
 8011bc4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d911      	bls.n	8011bee <f_read+0x1fc>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bd0:	1ad3      	subs	r3, r2, r3
 8011bd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011bd4:	8992      	ldrh	r2, [r2, #12]
 8011bd6:	fb02 f303 	mul.w	r3, r2, r3
 8011bda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011bdc:	18d0      	adds	r0, r2, r3
 8011bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011be0:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8011be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011be6:	899b      	ldrh	r3, [r3, #12]
 8011be8:	461a      	mov	r2, r3
 8011bea:	f7fc f931 	bl	800de50 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bf0:	899b      	ldrh	r3, [r3, #12]
 8011bf2:	461a      	mov	r2, r3
 8011bf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bf6:	fb02 f303 	mul.w	r3, r2, r3
 8011bfa:	657b      	str	r3, [r7, #84]	@ 0x54
				continue;
 8011bfc:	e067      	b.n	8011cce <f_read+0x2dc>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8011bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c04:	429a      	cmp	r2, r3
 8011c06:	d033      	beq.n	8011c70 <f_read+0x27e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011c0e:	b25b      	sxtb	r3, r3
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	da1b      	bge.n	8011c4c <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c16:	7858      	ldrb	r0, [r3, #1]
 8011c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c1a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8011c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011c22:	2301      	movs	r3, #1
 8011c24:	f7fb fef0 	bl	800da08 <disk_write>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d005      	beq.n	8011c3a <f_read+0x248>
 8011c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c30:	2201      	movs	r2, #1
 8011c32:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8011c36:	2301      	movs	r3, #1
 8011c38:	e06e      	b.n	8011d18 <f_read+0x326>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011c40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c44:	b2da      	uxtb	r2, r3
 8011c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c4e:	7858      	ldrb	r0, [r3, #1]
 8011c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c52:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8011c56:	2301      	movs	r3, #1
 8011c58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c5a:	f7fb feb5 	bl	800d9c8 <disk_read>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d005      	beq.n	8011c70 <f_read+0x27e>
 8011c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c66:	2201      	movs	r2, #1
 8011c68:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	e053      	b.n	8011d18 <f_read+0x326>
			}
#endif
			fp->sect = sect;
 8011c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c74:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c78:	899b      	ldrh	r3, [r3, #12]
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c7e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8011c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c84:	899b      	ldrh	r3, [r3, #12]
 8011c86:	fbb2 f1f3 	udiv	r1, r2, r3
 8011c8a:	fb01 f303 	mul.w	r3, r1, r3
 8011c8e:	1ad3      	subs	r3, r2, r3
 8011c90:	1ac3      	subs	r3, r0, r3
 8011c92:	657b      	str	r3, [r7, #84]	@ 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011c94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c98:	429a      	cmp	r2, r3
 8011c9a:	d901      	bls.n	8011ca0 <f_read+0x2ae>
 8011c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c9e:	657b      	str	r3, [r7, #84]	@ 0x54
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ca2:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 8011ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ca8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8011cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cae:	899b      	ldrh	r3, [r3, #12]
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	60bb      	str	r3, [r7, #8]
 8011cb6:	60fa      	str	r2, [r7, #12]
 8011cb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011cbc:	f7ee ff74 	bl	8000ba8 <__aeabi_uldivmod>
 8011cc0:	4613      	mov	r3, r2
 8011cc2:	4423      	add	r3, r4
 8011cc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011cc6:	4619      	mov	r1, r3
 8011cc8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8011cca:	f7fc f8c1 	bl	800de50 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011cce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011cd2:	4413      	add	r3, r2
 8011cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cd8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8011cdc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011cde:	2000      	movs	r0, #0
 8011ce0:	468a      	mov	sl, r1
 8011ce2:	4683      	mov	fp, r0
 8011ce4:	eb12 010a 	adds.w	r1, r2, sl
 8011ce8:	6039      	str	r1, [r7, #0]
 8011cea:	eb43 030b 	adc.w	r3, r3, fp
 8011cee:	607b      	str	r3, [r7, #4]
 8011cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cf2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8011cf6:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 8011cfa:	6a3b      	ldr	r3, [r7, #32]
 8011cfc:	681a      	ldr	r2, [r3, #0]
 8011cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d00:	441a      	add	r2, r3
 8011d02:	6a3b      	ldr	r3, [r7, #32]
 8011d04:	601a      	str	r2, [r3, #0]
 8011d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d0a:	1ad3      	subs	r3, r2, r3
 8011d0c:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( ;  btr;								/* Repeat until all data read */
 8011d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	f47f aeb7 	bne.w	8011a84 <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011d16:	2300      	movs	r3, #0
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3760      	adds	r7, #96	@ 0x60
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011d22 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011d22:	b580      	push	{r7, lr}
 8011d24:	b09a      	sub	sp, #104	@ 0x68
 8011d26:	af00      	add	r7, sp, #0
 8011d28:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8011d30:	4611      	mov	r1, r2
 8011d32:	4618      	mov	r0, r3
 8011d34:	f7ff fb12 	bl	801135c <validate>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8011d3e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	f040 8105 	bne.w	8011f52 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	f000 80fd 	beq.w	8011f52 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011d5e:	b25b      	sxtb	r3, r3
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	da17      	bge.n	8011d94 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011d64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011d66:	7858      	ldrb	r0, [r3, #1]
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011d72:	2301      	movs	r3, #1
 8011d74:	f7fb fe48 	bl	800da08 <disk_write>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d001      	beq.n	8011d82 <f_sync+0x60>
 8011d7e:	2301      	movs	r3, #1
 8011d80:	e0e9      	b.n	8011f56 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011d88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011d8c:	b2da      	uxtb	r2, r3
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011d94:	f7f8 fbe4 	bl	800a560 <get_fattime>
 8011d98:	6638      	str	r0, [r7, #96]	@ 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8011d9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011d9c:	781b      	ldrb	r3, [r3, #0]
 8011d9e:	2b04      	cmp	r3, #4
 8011da0:	f040 808c 	bne.w	8011ebc <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7fc feac 	bl	800eb04 <fill_first_frag>
 8011dac:	4603      	mov	r3, r0
 8011dae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 8011db2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d10a      	bne.n	8011dd0 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	f7fc fecc 	bl	800eb62 <fill_last_frag>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 8011dd0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	f040 80bc 	bne.w	8011f52 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8011dda:	687a      	ldr	r2, [r7, #4]
 8011ddc:	f107 0308 	add.w	r3, r7, #8
 8011de0:	4611      	mov	r1, r2
 8011de2:	4618      	mov	r0, r3
 8011de4:	f7fd fe90 	bl	800fb08 <load_obj_dir>
 8011de8:	4603      	mov	r3, r0
 8011dea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 8011dee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	f040 80ad 	bne.w	8011f52 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8011df8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011dfa:	695b      	ldr	r3, [r3, #20]
 8011dfc:	3304      	adds	r3, #4
 8011dfe:	781a      	ldrb	r2, [r3, #0]
 8011e00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011e02:	695b      	ldr	r3, [r3, #20]
 8011e04:	3304      	adds	r3, #4
 8011e06:	f042 0220 	orr.w	r2, r2, #32
 8011e0a:	b2d2      	uxtb	r2, r2
 8011e0c:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	79da      	ldrb	r2, [r3, #7]
 8011e12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011e14:	695b      	ldr	r3, [r3, #20]
 8011e16:	3321      	adds	r3, #33	@ 0x21
 8011e18:	f042 0201 	orr.w	r2, r2, #1
 8011e1c:	b2d2      	uxtb	r2, r2
 8011e1e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8011e20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011e22:	695b      	ldr	r3, [r3, #20]
 8011e24:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	689b      	ldr	r3, [r3, #8]
 8011e2c:	4619      	mov	r1, r3
 8011e2e:	4610      	mov	r0, r2
 8011e30:	f7fb ff5a 	bl	800dce8 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8011e34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011e36:	695b      	ldr	r3, [r3, #20]
 8011e38:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011e42:	4608      	mov	r0, r1
 8011e44:	f7fb ff7c 	bl	800dd40 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8011e48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011e4a:	695b      	ldr	r3, [r3, #20]
 8011e4c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011e56:	4608      	mov	r0, r1
 8011e58:	f7fb ff72 	bl	800dd40 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8011e5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011e5e:	695b      	ldr	r3, [r3, #20]
 8011e60:	330c      	adds	r3, #12
 8011e62:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7fb ff3f 	bl	800dce8 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8011e6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011e6c:	695b      	ldr	r3, [r3, #20]
 8011e6e:	3315      	adds	r3, #21
 8011e70:	2200      	movs	r2, #0
 8011e72:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8011e74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011e76:	695b      	ldr	r3, [r3, #20]
 8011e78:	3310      	adds	r3, #16
 8011e7a:	2100      	movs	r1, #0
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7fb ff33 	bl	800dce8 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8011e82:	f107 0308 	add.w	r3, r7, #8
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7fd fe74 	bl	800fb74 <store_xdir>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8011e92:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d15b      	bne.n	8011f52 <f_sync+0x230>
							res = sync_fs(fs);
 8011e9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f7fc fa33 	bl	800e308 <sync_fs>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011eae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011eb2:	b2da      	uxtb	r2, r3
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8011eba:	e04a      	b.n	8011f52 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011ebc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011ec2:	4619      	mov	r1, r3
 8011ec4:	4610      	mov	r0, r2
 8011ec6:	f7fc f9f1 	bl	800e2ac <move_window>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 8011ed0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d13c      	bne.n	8011f52 <f_sync+0x230>
					dir = fp->dir_ptr;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011ede:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011ee0:	330b      	adds	r3, #11
 8011ee2:	781a      	ldrb	r2, [r3, #0]
 8011ee4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011ee6:	330b      	adds	r3, #11
 8011ee8:	f042 0220 	orr.w	r2, r2, #32
 8011eec:	b2d2      	uxtb	r2, r2
 8011eee:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	6818      	ldr	r0, [r3, #0]
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	689b      	ldr	r3, [r3, #8]
 8011ef8:	461a      	mov	r2, r3
 8011efa:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8011efc:	f7fd fa58 	bl	800f3b0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011f00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011f02:	f103 001c 	add.w	r0, r3, #28
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011f0c:	4613      	mov	r3, r2
 8011f0e:	4619      	mov	r1, r3
 8011f10:	f7fb feea 	bl	800dce8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011f14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011f16:	3316      	adds	r3, #22
 8011f18:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7fb fee4 	bl	800dce8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011f20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011f22:	3312      	adds	r3, #18
 8011f24:	2100      	movs	r1, #0
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7fb fec3 	bl	800dcb2 <st_word>
					fs->wflag = 1;
 8011f2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011f2e:	2201      	movs	r2, #1
 8011f30:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011f32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7fc f9e7 	bl	800e308 <sync_fs>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011f46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011f4a:	b2da      	uxtb	r2, r3
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011f52:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3768      	adds	r7, #104	@ 0x68
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}

08011f5e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011f5e:	b580      	push	{r7, lr}
 8011f60:	b084      	sub	sp, #16
 8011f62:	af00      	add	r7, sp, #0
 8011f64:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f7ff fedb 	bl	8011d22 <f_sync>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011f70:	7bfb      	ldrb	r3, [r7, #15]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d118      	bne.n	8011fa8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f107 0208 	add.w	r2, r7, #8
 8011f7c:	4611      	mov	r1, r2
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7ff f9ec 	bl	801135c <validate>
 8011f84:	4603      	mov	r3, r0
 8011f86:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011f88:	7bfb      	ldrb	r3, [r7, #15]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d10c      	bne.n	8011fa8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7fc f8e6 	bl	800e164 <dec_lock>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011f9c:	7bfb      	ldrb	r3, [r7, #15]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d102      	bne.n	8011fa8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3710      	adds	r7, #16
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}

08011fb2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011fb2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011fb6:	b0ba      	sub	sp, #232	@ 0xe8
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 8011fbe:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011fc2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011fc6:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8011fca:	4619      	mov	r1, r3
 8011fcc:	4610      	mov	r0, r2
 8011fce:	f7ff f9c5 	bl	801135c <validate>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011fd8:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d105      	bne.n	8011fec <f_lseek+0x3a>
 8011fe0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011fe4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011fe8:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 8011fec:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d111      	bne.n	8012018 <f_lseek+0x66>
 8011ff4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011ff8:	781b      	ldrb	r3, [r3, #0]
 8011ffa:	2b04      	cmp	r3, #4
 8011ffc:	d10c      	bne.n	8012018 <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8011ffe:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8012002:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012008:	f04f 32ff 	mov.w	r2, #4294967295
 801200c:	4619      	mov	r1, r3
 801200e:	f7fc fda8 	bl	800eb62 <fill_last_frag>
 8012012:	4603      	mov	r3, r0
 8012014:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012018:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 801201c:	2b00      	cmp	r3, #0
 801201e:	d002      	beq.n	8012026 <f_lseek+0x74>
 8012020:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8012024:	e3ab      	b.n	801277e <f_lseek+0x7cc>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801202a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801202c:	2b00      	cmp	r3, #0
 801202e:	f000 8152 	beq.w	80122d6 <f_lseek+0x324>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012032:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8012036:	f1b3 3fff 	cmp.w	r3, #4294967295
 801203a:	bf08      	it	eq
 801203c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8012040:	f040 8087 	bne.w	8012152 <f_lseek+0x1a0>
			tbl = fp->cltbl;
 8012044:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801204a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801204e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012052:	1d1a      	adds	r2, r3, #4
 8012054:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801205e:	2302      	movs	r3, #2
 8012060:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012064:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012068:	689b      	ldr	r3, [r3, #8]
 801206a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			if (cl) {
 801206e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012072:	2b00      	cmp	r3, #0
 8012074:	d058      	beq.n	8012128 <f_lseek+0x176>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8012076:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801207a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801207e:	2300      	movs	r3, #0
 8012080:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012084:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8012088:	3302      	adds	r3, #2
 801208a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
					do {
						pcl = cl; ncl++;
 801208e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012092:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801209a:	3301      	adds	r3, #1
 801209c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
						cl = get_fat(&fp->obj, cl);
 80120a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80120a4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 80120a8:	4618      	mov	r0, r3
 80120aa:	f7fc f9bd 	bl	800e428 <get_fat>
 80120ae:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80120b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80120b6:	2b01      	cmp	r3, #1
 80120b8:	d806      	bhi.n	80120c8 <f_lseek+0x116>
 80120ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80120be:	2202      	movs	r2, #2
 80120c0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80120c4:	2302      	movs	r3, #2
 80120c6:	e35a      	b.n	801277e <f_lseek+0x7cc>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80120c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80120cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120d0:	d106      	bne.n	80120e0 <f_lseek+0x12e>
 80120d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80120d6:	2201      	movs	r2, #1
 80120d8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80120dc:	2301      	movs	r3, #1
 80120de:	e34e      	b.n	801277e <f_lseek+0x7cc>
					} while (cl == pcl + 1);
 80120e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120e4:	3301      	adds	r3, #1
 80120e6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d0cf      	beq.n	801208e <f_lseek+0xdc>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80120ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80120f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d80f      	bhi.n	801211a <f_lseek+0x168>
						*tbl++ = ncl; *tbl++ = tcl;
 80120fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80120fe:	1d1a      	adds	r2, r3, #4
 8012100:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8012104:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012108:	601a      	str	r2, [r3, #0]
 801210a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801210e:	1d1a      	adds	r2, r3, #4
 8012110:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8012114:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8012118:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801211a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801211e:	6a1b      	ldr	r3, [r3, #32]
 8012120:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8012124:	429a      	cmp	r2, r3
 8012126:	d3a6      	bcc.n	8012076 <f_lseek+0xc4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012128:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801212c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801212e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8012132:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012134:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8012138:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801213c:	429a      	cmp	r2, r3
 801213e:	d804      	bhi.n	801214a <f_lseek+0x198>
				*tbl = 0;		/* Terminate table */
 8012140:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012144:	2200      	movs	r2, #0
 8012146:	601a      	str	r2, [r3, #0]
 8012148:	e317      	b.n	801277a <f_lseek+0x7c8>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801214a:	2311      	movs	r3, #17
 801214c:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 8012150:	e313      	b.n	801277a <f_lseek+0x7c8>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012152:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012156:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801215a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 801215e:	4290      	cmp	r0, r2
 8012160:	eb71 0303 	sbcs.w	r3, r1, r3
 8012164:	d205      	bcs.n	8012172 <f_lseek+0x1c0>
 8012166:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801216a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801216e:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
			fp->fptr = ofs;				/* Set file pointer */
 8012172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8012176:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 801217a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
			if (ofs) {
 801217e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8012182:	4313      	orrs	r3, r2
 8012184:	f000 82f9 	beq.w	801277a <f_lseek+0x7c8>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012188:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 801218c:	f112 38ff 	adds.w	r8, r2, #4294967295
 8012190:	f143 39ff 	adc.w	r9, r3, #4294967295
 8012194:	4642      	mov	r2, r8
 8012196:	464b      	mov	r3, r9
 8012198:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 801219c:	f7fc fec7 	bl	800ef2e <clmt_clust>
 80121a0:	4602      	mov	r2, r0
 80121a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80121a6:	641a      	str	r2, [r3, #64]	@ 0x40
				dsc = clust2sect(fs, fp->clust);
 80121a8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80121ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80121b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80121b2:	4619      	mov	r1, r3
 80121b4:	4610      	mov	r0, r2
 80121b6:	f7fc f917 	bl	800e3e8 <clust2sect>
 80121ba:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80121be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d106      	bne.n	80121d4 <f_lseek+0x222>
 80121c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80121ca:	2202      	movs	r2, #2
 80121cc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80121d0:	2302      	movs	r3, #2
 80121d2:	e2d4      	b.n	801277e <f_lseek+0x7cc>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80121d4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80121d8:	1e54      	subs	r4, r2, #1
 80121da:	f143 35ff 	adc.w	r5, r3, #4294967295
 80121de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80121e2:	899b      	ldrh	r3, [r3, #12]
 80121e4:	b29b      	uxth	r3, r3
 80121e6:	2200      	movs	r2, #0
 80121e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80121ec:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80121f0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80121f4:	4620      	mov	r0, r4
 80121f6:	4629      	mov	r1, r5
 80121f8:	f7ee fcd6 	bl	8000ba8 <__aeabi_uldivmod>
 80121fc:	4602      	mov	r2, r0
 80121fe:	460b      	mov	r3, r1
 8012200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012204:	895b      	ldrh	r3, [r3, #10]
 8012206:	3b01      	subs	r3, #1
 8012208:	4013      	ands	r3, r2
 801220a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801220e:	4413      	add	r3, r2
 8012210:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8012214:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012218:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 801221c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012220:	899b      	ldrh	r3, [r3, #12]
 8012222:	b29b      	uxth	r3, r3
 8012224:	2200      	movs	r2, #0
 8012226:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801222a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801222e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8012232:	f7ee fcb9 	bl	8000ba8 <__aeabi_uldivmod>
 8012236:	4313      	orrs	r3, r2
 8012238:	f000 829f 	beq.w	801277a <f_lseek+0x7c8>
 801223c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012242:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8012246:	429a      	cmp	r2, r3
 8012248:	f000 8297 	beq.w	801277a <f_lseek+0x7c8>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801224c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012250:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012254:	b25b      	sxtb	r3, r3
 8012256:	2b00      	cmp	r3, #0
 8012258:	da21      	bge.n	801229e <f_lseek+0x2ec>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801225a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801225e:	7858      	ldrb	r0, [r3, #1]
 8012260:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012264:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8012268:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801226c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801226e:	2301      	movs	r3, #1
 8012270:	f7fb fbca 	bl	800da08 <disk_write>
 8012274:	4603      	mov	r3, r0
 8012276:	2b00      	cmp	r3, #0
 8012278:	d006      	beq.n	8012288 <f_lseek+0x2d6>
 801227a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801227e:	2201      	movs	r2, #1
 8012280:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8012284:	2301      	movs	r3, #1
 8012286:	e27a      	b.n	801277e <f_lseek+0x7cc>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012288:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801228c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012294:	b2da      	uxtb	r2, r3
 8012296:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801229a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801229e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80122a2:	7858      	ldrb	r0, [r3, #1]
 80122a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80122a8:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80122ac:	2301      	movs	r3, #1
 80122ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80122b2:	f7fb fb89 	bl	800d9c8 <disk_read>
 80122b6:	4603      	mov	r3, r0
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d006      	beq.n	80122ca <f_lseek+0x318>
 80122bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80122c0:	2201      	movs	r2, #1
 80122c2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80122c6:	2301      	movs	r3, #1
 80122c8:	e259      	b.n	801277e <f_lseek+0x7cc>
#endif
					fp->sect = dsc;
 80122ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80122ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80122d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80122d4:	e251      	b.n	801277a <f_lseek+0x7c8>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 80122d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	2b04      	cmp	r3, #4
 80122de:	d009      	beq.n	80122f4 <f_lseek+0x342>
 80122e0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80122e4:	2b01      	cmp	r3, #1
 80122e6:	d305      	bcc.n	80122f4 <f_lseek+0x342>
 80122e8:	f04f 32ff 	mov.w	r2, #4294967295
 80122ec:	f04f 0300 	mov.w	r3, #0
 80122f0:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80122f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80122f8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80122fc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8012300:	4290      	cmp	r0, r2
 8012302:	eb71 0303 	sbcs.w	r3, r1, r3
 8012306:	d20d      	bcs.n	8012324 <f_lseek+0x372>
 8012308:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801230c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012310:	f003 0302 	and.w	r3, r3, #2
 8012314:	2b00      	cmp	r3, #0
 8012316:	d105      	bne.n	8012324 <f_lseek+0x372>
			ofs = fp->obj.objsize;
 8012318:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801231c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012320:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		}
		ifptr = fp->fptr;
 8012324:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012328:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801232c:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
		fp->fptr = nsect = 0;
 8012330:	2300      	movs	r3, #0
 8012332:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8012336:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801233a:	f04f 0200 	mov.w	r2, #0
 801233e:	f04f 0300 	mov.w	r3, #0
 8012342:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		if (ofs) {
 8012346:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 801234a:	4313      	orrs	r3, r2
 801234c:	f000 819a 	beq.w	8012684 <f_lseek+0x6d2>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8012350:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012354:	895b      	ldrh	r3, [r3, #10]
 8012356:	461a      	mov	r2, r3
 8012358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801235c:	899b      	ldrh	r3, [r3, #12]
 801235e:	fb02 f303 	mul.w	r3, r2, r3
 8012362:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			if (ifptr > 0 &&
 8012366:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 801236a:	4313      	orrs	r3, r2
 801236c:	d069      	beq.n	8012442 <f_lseek+0x490>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801236e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8012372:	1e51      	subs	r1, r2, #1
 8012374:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8012378:	f143 33ff 	adc.w	r3, r3, #4294967295
 801237c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012380:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012384:	2200      	movs	r2, #0
 8012386:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012388:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801238a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 801238e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8012392:	f7ee fc09 	bl	8000ba8 <__aeabi_uldivmod>
 8012396:	4602      	mov	r2, r0
 8012398:	460b      	mov	r3, r1
 801239a:	4614      	mov	r4, r2
 801239c:	461d      	mov	r5, r3
 801239e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80123a2:	1e51      	subs	r1, r2, #1
 80123a4:	6739      	str	r1, [r7, #112]	@ 0x70
 80123a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80123aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80123ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80123b0:	2200      	movs	r2, #0
 80123b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80123b4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80123b6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80123ba:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80123be:	f7ee fbf3 	bl	8000ba8 <__aeabi_uldivmod>
 80123c2:	4602      	mov	r2, r0
 80123c4:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 80123c6:	4294      	cmp	r4, r2
 80123c8:	eb75 0303 	sbcs.w	r3, r5, r3
 80123cc:	d339      	bcc.n	8012442 <f_lseek+0x490>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80123ce:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80123d2:	1e51      	subs	r1, r2, #1
 80123d4:	6639      	str	r1, [r7, #96]	@ 0x60
 80123d6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80123da:	667b      	str	r3, [r7, #100]	@ 0x64
 80123dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80123e0:	3b01      	subs	r3, #1
 80123e2:	2200      	movs	r2, #0
 80123e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80123e6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80123e8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80123ec:	460b      	mov	r3, r1
 80123ee:	ea6f 0a03 	mvn.w	sl, r3
 80123f2:	4613      	mov	r3, r2
 80123f4:	ea6f 0b03 	mvn.w	fp, r3
 80123f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80123fc:	460b      	mov	r3, r1
 80123fe:	ea03 030a 	and.w	r3, r3, sl
 8012402:	653b      	str	r3, [r7, #80]	@ 0x50
 8012404:	4613      	mov	r3, r2
 8012406:	ea03 030b 	and.w	r3, r3, fp
 801240a:	657b      	str	r3, [r7, #84]	@ 0x54
 801240c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012410:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8012414:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				ofs -= fp->fptr;
 8012418:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801241c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8012420:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8012424:	1a14      	subs	r4, r2, r0
 8012426:	60bc      	str	r4, [r7, #8]
 8012428:	eb63 0301 	sbc.w	r3, r3, r1
 801242c:	60fb      	str	r3, [r7, #12]
 801242e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8012432:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
				clst = fp->clust;
 8012436:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801243c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012440:	e031      	b.n	80124a6 <f_lseek+0x4f4>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012442:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012446:	689b      	ldr	r3, [r3, #8]
 8012448:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801244c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012450:	2b00      	cmp	r3, #0
 8012452:	d123      	bne.n	801249c <f_lseek+0x4ea>
					clst = create_chain(&fp->obj, 0);
 8012454:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012458:	2100      	movs	r1, #0
 801245a:	4618      	mov	r0, r3
 801245c:	f7fc fc66 	bl	800ed2c <create_chain>
 8012460:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012468:	2b01      	cmp	r3, #1
 801246a:	d106      	bne.n	801247a <f_lseek+0x4c8>
 801246c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012470:	2202      	movs	r2, #2
 8012472:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8012476:	2302      	movs	r3, #2
 8012478:	e181      	b.n	801277e <f_lseek+0x7cc>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801247a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801247e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012482:	d106      	bne.n	8012492 <f_lseek+0x4e0>
 8012484:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012488:	2201      	movs	r2, #1
 801248a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 801248e:	2301      	movs	r3, #1
 8012490:	e175      	b.n	801277e <f_lseek+0x7cc>
					fp->obj.sclust = clst;
 8012492:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8012496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801249a:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 801249c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80124a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80124a4:	6413      	str	r3, [r2, #64]	@ 0x40
			}
			if (clst != 0) {
 80124a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	f000 80ea 	beq.w	8012684 <f_lseek+0x6d2>
				while (ofs > bcs) {						/* Cluster following loop */
 80124b0:	e090      	b.n	80125d4 <f_lseek+0x622>
					ofs -= bcs; fp->fptr += bcs;
 80124b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80124b6:	2200      	movs	r2, #0
 80124b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80124ba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80124bc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80124c0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80124c4:	4621      	mov	r1, r4
 80124c6:	1a51      	subs	r1, r2, r1
 80124c8:	6039      	str	r1, [r7, #0]
 80124ca:	4629      	mov	r1, r5
 80124cc:	eb63 0301 	sbc.w	r3, r3, r1
 80124d0:	607b      	str	r3, [r7, #4]
 80124d2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80124d6:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
 80124da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80124de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80124e2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80124e6:	2000      	movs	r0, #0
 80124e8:	6439      	str	r1, [r7, #64]	@ 0x40
 80124ea:	6478      	str	r0, [r7, #68]	@ 0x44
 80124ec:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80124f0:	4621      	mov	r1, r4
 80124f2:	1851      	adds	r1, r2, r1
 80124f4:	63b9      	str	r1, [r7, #56]	@ 0x38
 80124f6:	4629      	mov	r1, r5
 80124f8:	414b      	adcs	r3, r1
 80124fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80124fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012500:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8012504:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012508:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801250c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012510:	f003 0302 	and.w	r3, r3, #2
 8012514:	2b00      	cmp	r3, #0
 8012516:	d031      	beq.n	801257c <f_lseek+0x5ca>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 8012518:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801251c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8012520:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012524:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012528:	4282      	cmp	r2, r0
 801252a:	418b      	sbcs	r3, r1
 801252c:	d212      	bcs.n	8012554 <f_lseek+0x5a2>
							fp->obj.objsize = fp->fptr;
 801252e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012532:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8012536:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801253a:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 801253e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012542:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801254a:	b2db      	uxtb	r3, r3
 801254c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8012550:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012554:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012558:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 801255c:	4618      	mov	r0, r3
 801255e:	f7fc fbe5 	bl	800ed2c <create_chain>
 8012562:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801256a:	2b00      	cmp	r3, #0
 801256c:	d10f      	bne.n	801258e <f_lseek+0x5dc>
							ofs = 0; break;
 801256e:	f04f 0200 	mov.w	r2, #0
 8012572:	f04f 0300 	mov.w	r3, #0
 8012576:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 801257a:	e03b      	b.n	80125f4 <f_lseek+0x642>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801257c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012580:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8012584:	4618      	mov	r0, r3
 8012586:	f7fb ff4f 	bl	800e428 <get_fat>
 801258a:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801258e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012596:	d106      	bne.n	80125a6 <f_lseek+0x5f4>
 8012598:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801259c:	2201      	movs	r2, #1
 801259e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80125a2:	2301      	movs	r3, #1
 80125a4:	e0eb      	b.n	801277e <f_lseek+0x7cc>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80125a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80125aa:	2b01      	cmp	r3, #1
 80125ac:	d906      	bls.n	80125bc <f_lseek+0x60a>
 80125ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80125b2:	6a1a      	ldr	r2, [r3, #32]
 80125b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80125b8:	4293      	cmp	r3, r2
 80125ba:	d306      	bcc.n	80125ca <f_lseek+0x618>
 80125bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80125c0:	2202      	movs	r2, #2
 80125c2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80125c6:	2302      	movs	r3, #2
 80125c8:	e0d9      	b.n	801277e <f_lseek+0x7cc>
					fp->clust = clst;
 80125ca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80125ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80125d2:	6413      	str	r3, [r2, #64]	@ 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 80125d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80125d8:	2200      	movs	r2, #0
 80125da:	633b      	str	r3, [r7, #48]	@ 0x30
 80125dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80125de:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80125e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80125e6:	4621      	mov	r1, r4
 80125e8:	4291      	cmp	r1, r2
 80125ea:	4629      	mov	r1, r5
 80125ec:	eb71 0303 	sbcs.w	r3, r1, r3
 80125f0:	f4ff af5f 	bcc.w	80124b2 <f_lseek+0x500>
				}
				fp->fptr += ofs;
 80125f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80125f8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80125fc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8012600:	1884      	adds	r4, r0, r2
 8012602:	62bc      	str	r4, [r7, #40]	@ 0x28
 8012604:	eb41 0303 	adc.w	r3, r1, r3
 8012608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801260a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801260e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8012612:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				if (ofs % SS(fs)) {
 8012616:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801261a:	899b      	ldrh	r3, [r3, #12]
 801261c:	b29b      	uxth	r3, r3
 801261e:	2200      	movs	r2, #0
 8012620:	623b      	str	r3, [r7, #32]
 8012622:	627a      	str	r2, [r7, #36]	@ 0x24
 8012624:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8012628:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801262c:	f7ee fabc 	bl	8000ba8 <__aeabi_uldivmod>
 8012630:	4313      	orrs	r3, r2
 8012632:	d027      	beq.n	8012684 <f_lseek+0x6d2>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012634:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012638:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 801263c:	4618      	mov	r0, r3
 801263e:	f7fb fed3 	bl	800e3e8 <clust2sect>
 8012642:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801264a:	2b00      	cmp	r3, #0
 801264c:	d106      	bne.n	801265c <f_lseek+0x6aa>
 801264e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012652:	2202      	movs	r2, #2
 8012654:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8012658:	2302      	movs	r3, #2
 801265a:	e090      	b.n	801277e <f_lseek+0x7cc>
					nsect += (DWORD)(ofs / SS(fs));
 801265c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012660:	899b      	ldrh	r3, [r3, #12]
 8012662:	b29b      	uxth	r3, r3
 8012664:	2200      	movs	r2, #0
 8012666:	61bb      	str	r3, [r7, #24]
 8012668:	61fa      	str	r2, [r7, #28]
 801266a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801266e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8012672:	f7ee fa99 	bl	8000ba8 <__aeabi_uldivmod>
 8012676:	4602      	mov	r2, r0
 8012678:	460b      	mov	r3, r1
 801267a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801267e:	4413      	add	r3, r2
 8012680:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012684:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012688:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801268c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8012690:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8012694:	4290      	cmp	r0, r2
 8012696:	eb71 0303 	sbcs.w	r3, r1, r3
 801269a:	d212      	bcs.n	80126c2 <f_lseek+0x710>
			fp->obj.objsize = fp->fptr;
 801269c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80126a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80126a4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80126a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 80126ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80126b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80126b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80126b8:	b2da      	uxtb	r2, r3
 80126ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80126be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80126c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80126c6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80126ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80126ce:	899b      	ldrh	r3, [r3, #12]
 80126d0:	b29b      	uxth	r3, r3
 80126d2:	2200      	movs	r2, #0
 80126d4:	613b      	str	r3, [r7, #16]
 80126d6:	617a      	str	r2, [r7, #20]
 80126d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80126dc:	f7ee fa64 	bl	8000ba8 <__aeabi_uldivmod>
 80126e0:	4313      	orrs	r3, r2
 80126e2:	d04a      	beq.n	801277a <f_lseek+0x7c8>
 80126e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80126e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80126ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80126ee:	429a      	cmp	r2, r3
 80126f0:	d043      	beq.n	801277a <f_lseek+0x7c8>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80126f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80126f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80126fa:	b25b      	sxtb	r3, r3
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	da21      	bge.n	8012744 <f_lseek+0x792>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012704:	7858      	ldrb	r0, [r3, #1]
 8012706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801270a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 801270e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012712:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012714:	2301      	movs	r3, #1
 8012716:	f7fb f977 	bl	800da08 <disk_write>
 801271a:	4603      	mov	r3, r0
 801271c:	2b00      	cmp	r3, #0
 801271e:	d006      	beq.n	801272e <f_lseek+0x77c>
 8012720:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012724:	2201      	movs	r2, #1
 8012726:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 801272a:	2301      	movs	r3, #1
 801272c:	e027      	b.n	801277e <f_lseek+0x7cc>
				fp->flag &= (BYTE)~FA_DIRTY;
 801272e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012732:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801273a:	b2da      	uxtb	r2, r3
 801273c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012740:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012744:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012748:	7858      	ldrb	r0, [r3, #1]
 801274a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801274e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8012752:	2301      	movs	r3, #1
 8012754:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012758:	f7fb f936 	bl	800d9c8 <disk_read>
 801275c:	4603      	mov	r3, r0
 801275e:	2b00      	cmp	r3, #0
 8012760:	d006      	beq.n	8012770 <f_lseek+0x7be>
 8012762:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012766:	2201      	movs	r2, #1
 8012768:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 801276c:	2301      	movs	r3, #1
 801276e:	e006      	b.n	801277e <f_lseek+0x7cc>
#endif
			fp->sect = nsect;
 8012770:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012774:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012778:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	}

	LEAVE_FF(fs, res);
 801277a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
}
 801277e:	4618      	mov	r0, r3
 8012780:	37e8      	adds	r7, #232	@ 0xe8
 8012782:	46bd      	mov	sp, r7
 8012784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012788 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b086      	sub	sp, #24
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
 8012790:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d101      	bne.n	801279c <f_opendir+0x14>
 8012798:	2309      	movs	r3, #9
 801279a:	e09a      	b.n	80128d2 <f_opendir+0x14a>

	/* Get logical drive */
	obj = &dp->obj;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80127a0:	f107 010c 	add.w	r1, r7, #12
 80127a4:	463b      	mov	r3, r7
 80127a6:	2200      	movs	r2, #0
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7fe fa3d 	bl	8010c28 <find_volume>
 80127ae:	4603      	mov	r3, r0
 80127b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80127b2:	7dfb      	ldrb	r3, [r7, #23]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	f040 8085 	bne.w	80128c4 <f_opendir+0x13c>
		obj->fs = fs;
 80127ba:	68fa      	ldr	r2, [r7, #12]
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	4619      	mov	r1, r3
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	f7fe f8d9 	bl	801097c <follow_path>
 80127ca:	4603      	mov	r3, r0
 80127cc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80127ce:	7dfb      	ldrb	r3, [r7, #23]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d172      	bne.n	80128ba <f_opendir+0x132>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80127da:	b25b      	sxtb	r3, r3
 80127dc:	2b00      	cmp	r3, #0
 80127de:	db47      	blt.n	8012870 <f_opendir+0xe8>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80127e0:	693b      	ldr	r3, [r7, #16]
 80127e2:	799b      	ldrb	r3, [r3, #6]
 80127e4:	f003 0310 	and.w	r3, r3, #16
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d03f      	beq.n	801286c <f_opendir+0xe4>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	781b      	ldrb	r3, [r3, #0]
 80127f0:	2b04      	cmp	r3, #4
 80127f2:	d130      	bne.n	8012856 <f_opendir+0xce>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	689a      	ldr	r2, [r3, #8]
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80127fc:	693b      	ldr	r3, [r7, #16]
 80127fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012802:	4613      	mov	r3, r2
 8012804:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8012808:	693a      	ldr	r2, [r7, #16]
 801280a:	79d2      	ldrb	r2, [r2, #7]
 801280c:	431a      	orrs	r2, r3
 801280e:	693b      	ldr	r3, [r7, #16]
 8012810:	625a      	str	r2, [r3, #36]	@ 0x24
						obj->c_ofs = dp->blk_ofs;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012816:	693b      	ldr	r3, [r7, #16]
 8012818:	629a      	str	r2, [r3, #40]	@ 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	695b      	ldr	r3, [r3, #20]
 801281e:	3334      	adds	r3, #52	@ 0x34
 8012820:	4618      	mov	r0, r3
 8012822:	f7fb f948 	bl	800dab6 <ld_dword>
 8012826:	4602      	mov	r2, r0
 8012828:	693b      	ldr	r3, [r7, #16]
 801282a:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	695b      	ldr	r3, [r3, #20]
 8012830:	3338      	adds	r3, #56	@ 0x38
 8012832:	4618      	mov	r0, r3
 8012834:	f7fb f962 	bl	800dafc <ld_qword>
 8012838:	4602      	mov	r2, r0
 801283a:	460b      	mov	r3, r1
 801283c:	6939      	ldr	r1, [r7, #16]
 801283e:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	695b      	ldr	r3, [r3, #20]
 8012846:	3321      	adds	r3, #33	@ 0x21
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	f003 0302 	and.w	r3, r3, #2
 801284e:	b2da      	uxtb	r2, r3
 8012850:	693b      	ldr	r3, [r7, #16]
 8012852:	71da      	strb	r2, [r3, #7]
 8012854:	e00c      	b.n	8012870 <f_opendir+0xe8>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8012856:	68fa      	ldr	r2, [r7, #12]
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801285c:	4619      	mov	r1, r3
 801285e:	4610      	mov	r0, r2
 8012860:	f7fc fd87 	bl	800f372 <ld_clust>
 8012864:	4602      	mov	r2, r0
 8012866:	693b      	ldr	r3, [r7, #16]
 8012868:	609a      	str	r2, [r3, #8]
 801286a:	e001      	b.n	8012870 <f_opendir+0xe8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801286c:	2305      	movs	r3, #5
 801286e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8012870:	7dfb      	ldrb	r3, [r7, #23]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d121      	bne.n	80128ba <f_opendir+0x132>
				obj->id = fs->id;
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	88da      	ldrh	r2, [r3, #6]
 801287a:	693b      	ldr	r3, [r7, #16]
 801287c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801287e:	2100      	movs	r1, #0
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f7fc fba0 	bl	800efc6 <dir_sdi>
 8012886:	4603      	mov	r3, r0
 8012888:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801288a:	7dfb      	ldrb	r3, [r7, #23]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d114      	bne.n	80128ba <f_opendir+0x132>
					if (obj->sclust) {
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	689b      	ldr	r3, [r3, #8]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d00d      	beq.n	80128b4 <f_opendir+0x12c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8012898:	2100      	movs	r1, #0
 801289a:	6878      	ldr	r0, [r7, #4]
 801289c:	f7fb fbd4 	bl	800e048 <inc_lock>
 80128a0:	4602      	mov	r2, r0
 80128a2:	693b      	ldr	r3, [r7, #16]
 80128a4:	62da      	str	r2, [r3, #44]	@ 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d105      	bne.n	80128ba <f_opendir+0x132>
 80128ae:	2312      	movs	r3, #18
 80128b0:	75fb      	strb	r3, [r7, #23]
 80128b2:	e002      	b.n	80128ba <f_opendir+0x132>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80128b4:	693b      	ldr	r3, [r7, #16]
 80128b6:	2200      	movs	r2, #0
 80128b8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80128ba:	7dfb      	ldrb	r3, [r7, #23]
 80128bc:	2b04      	cmp	r3, #4
 80128be:	d101      	bne.n	80128c4 <f_opendir+0x13c>
 80128c0:	2305      	movs	r3, #5
 80128c2:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80128c4:	7dfb      	ldrb	r3, [r7, #23]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d002      	beq.n	80128d0 <f_opendir+0x148>
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	2200      	movs	r2, #0
 80128ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80128d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80128d2:	4618      	mov	r0, r3
 80128d4:	3718      	adds	r7, #24
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd80      	pop	{r7, pc}

080128da <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80128da:	b580      	push	{r7, lr}
 80128dc:	b084      	sub	sp, #16
 80128de:	af00      	add	r7, sp, #0
 80128e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f107 0208 	add.w	r2, r7, #8
 80128e8:	4611      	mov	r1, r2
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7fe fd36 	bl	801135c <validate>
 80128f0:	4603      	mov	r3, r0
 80128f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80128f4:	7bfb      	ldrb	r3, [r7, #15]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d110      	bne.n	801291c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d006      	beq.n	8012910 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012906:	4618      	mov	r0, r3
 8012908:	f7fb fc2c 	bl	800e164 <dec_lock>
 801290c:	4603      	mov	r3, r0
 801290e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8012910:	7bfb      	ldrb	r3, [r7, #15]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d102      	bne.n	801291c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2200      	movs	r2, #0
 801291a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801291c:	7bfb      	ldrb	r3, [r7, #15]
}
 801291e:	4618      	mov	r0, r3
 8012920:	3710      	adds	r7, #16
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}

08012926 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012926:	b580      	push	{r7, lr}
 8012928:	b084      	sub	sp, #16
 801292a:	af00      	add	r7, sp, #0
 801292c:	6078      	str	r0, [r7, #4]
 801292e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f107 0208 	add.w	r2, r7, #8
 8012936:	4611      	mov	r1, r2
 8012938:	4618      	mov	r0, r3
 801293a:	f7fe fd0f 	bl	801135c <validate>
 801293e:	4603      	mov	r3, r0
 8012940:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012942:	7bfb      	ldrb	r3, [r7, #15]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d126      	bne.n	8012996 <f_readdir+0x70>
		if (!fno) {
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d106      	bne.n	801295c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801294e:	2100      	movs	r1, #0
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	f7fc fb38 	bl	800efc6 <dir_sdi>
 8012956:	4603      	mov	r3, r0
 8012958:	73fb      	strb	r3, [r7, #15]
 801295a:	e01c      	b.n	8012996 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801295c:	2100      	movs	r1, #0
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f7fd f9ca 	bl	800fcf8 <dir_read>
 8012964:	4603      	mov	r3, r0
 8012966:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8012968:	7bfb      	ldrb	r3, [r7, #15]
 801296a:	2b04      	cmp	r3, #4
 801296c:	d101      	bne.n	8012972 <f_readdir+0x4c>
 801296e:	2300      	movs	r3, #0
 8012970:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8012972:	7bfb      	ldrb	r3, [r7, #15]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d10e      	bne.n	8012996 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8012978:	6839      	ldr	r1, [r7, #0]
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f7fd fd58 	bl	8010430 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8012980:	2100      	movs	r1, #0
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f7fc fbb3 	bl	800f0ee <dir_next>
 8012988:	4603      	mov	r3, r0
 801298a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801298c:	7bfb      	ldrb	r3, [r7, #15]
 801298e:	2b04      	cmp	r3, #4
 8012990:	d101      	bne.n	8012996 <f_readdir+0x70>
 8012992:	2300      	movs	r3, #0
 8012994:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8012996:	7bfb      	ldrb	r3, [r7, #15]
}
 8012998:	4618      	mov	r0, r3
 801299a:	3710      	adds	r7, #16
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}

080129a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80129a0:	b480      	push	{r7}
 80129a2:	b087      	sub	sp, #28
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	60f8      	str	r0, [r7, #12]
 80129a8:	60b9      	str	r1, [r7, #8]
 80129aa:	4613      	mov	r3, r2
 80129ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80129ae:	2301      	movs	r3, #1
 80129b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80129b2:	2300      	movs	r3, #0
 80129b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80129b6:	4b1f      	ldr	r3, [pc, #124]	@ (8012a34 <FATFS_LinkDriverEx+0x94>)
 80129b8:	7a5b      	ldrb	r3, [r3, #9]
 80129ba:	b2db      	uxtb	r3, r3
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d131      	bne.n	8012a24 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80129c0:	4b1c      	ldr	r3, [pc, #112]	@ (8012a34 <FATFS_LinkDriverEx+0x94>)
 80129c2:	7a5b      	ldrb	r3, [r3, #9]
 80129c4:	b2db      	uxtb	r3, r3
 80129c6:	461a      	mov	r2, r3
 80129c8:	4b1a      	ldr	r3, [pc, #104]	@ (8012a34 <FATFS_LinkDriverEx+0x94>)
 80129ca:	2100      	movs	r1, #0
 80129cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80129ce:	4b19      	ldr	r3, [pc, #100]	@ (8012a34 <FATFS_LinkDriverEx+0x94>)
 80129d0:	7a5b      	ldrb	r3, [r3, #9]
 80129d2:	b2db      	uxtb	r3, r3
 80129d4:	4a17      	ldr	r2, [pc, #92]	@ (8012a34 <FATFS_LinkDriverEx+0x94>)
 80129d6:	009b      	lsls	r3, r3, #2
 80129d8:	4413      	add	r3, r2
 80129da:	68fa      	ldr	r2, [r7, #12]
 80129dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80129de:	4b15      	ldr	r3, [pc, #84]	@ (8012a34 <FATFS_LinkDriverEx+0x94>)
 80129e0:	7a5b      	ldrb	r3, [r3, #9]
 80129e2:	b2db      	uxtb	r3, r3
 80129e4:	461a      	mov	r2, r3
 80129e6:	4b13      	ldr	r3, [pc, #76]	@ (8012a34 <FATFS_LinkDriverEx+0x94>)
 80129e8:	4413      	add	r3, r2
 80129ea:	79fa      	ldrb	r2, [r7, #7]
 80129ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80129ee:	4b11      	ldr	r3, [pc, #68]	@ (8012a34 <FATFS_LinkDriverEx+0x94>)
 80129f0:	7a5b      	ldrb	r3, [r3, #9]
 80129f2:	b2db      	uxtb	r3, r3
 80129f4:	1c5a      	adds	r2, r3, #1
 80129f6:	b2d1      	uxtb	r1, r2
 80129f8:	4a0e      	ldr	r2, [pc, #56]	@ (8012a34 <FATFS_LinkDriverEx+0x94>)
 80129fa:	7251      	strb	r1, [r2, #9]
 80129fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80129fe:	7dbb      	ldrb	r3, [r7, #22]
 8012a00:	3330      	adds	r3, #48	@ 0x30
 8012a02:	b2da      	uxtb	r2, r3
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012a08:	68bb      	ldr	r3, [r7, #8]
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	223a      	movs	r2, #58	@ 0x3a
 8012a0e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	3302      	adds	r3, #2
 8012a14:	222f      	movs	r2, #47	@ 0x2f
 8012a16:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	3303      	adds	r3, #3
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012a20:	2300      	movs	r3, #0
 8012a22:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	371c      	adds	r7, #28
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a30:	4770      	bx	lr
 8012a32:	bf00      	nop
 8012a34:	20003de0 	.word	0x20003de0

08012a38 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b082      	sub	sp, #8
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
 8012a40:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012a42:	2200      	movs	r2, #0
 8012a44:	6839      	ldr	r1, [r7, #0]
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f7ff ffaa 	bl	80129a0 <FATFS_LinkDriverEx>
 8012a4c:	4603      	mov	r3, r0
}
 8012a4e:	4618      	mov	r0, r3
 8012a50:	3708      	adds	r7, #8
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}
	...

08012a58 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8012a58:	b480      	push	{r7}
 8012a5a:	b085      	sub	sp, #20
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	4603      	mov	r3, r0
 8012a60:	6039      	str	r1, [r7, #0]
 8012a62:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012a64:	88fb      	ldrh	r3, [r7, #6]
 8012a66:	2b7f      	cmp	r3, #127	@ 0x7f
 8012a68:	d802      	bhi.n	8012a70 <ff_convert+0x18>
		c = chr;
 8012a6a:	88fb      	ldrh	r3, [r7, #6]
 8012a6c:	81fb      	strh	r3, [r7, #14]
 8012a6e:	e025      	b.n	8012abc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012a70:	683b      	ldr	r3, [r7, #0]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d00b      	beq.n	8012a8e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012a76:	88fb      	ldrh	r3, [r7, #6]
 8012a78:	2bff      	cmp	r3, #255	@ 0xff
 8012a7a:	d805      	bhi.n	8012a88 <ff_convert+0x30>
 8012a7c:	88fb      	ldrh	r3, [r7, #6]
 8012a7e:	3b80      	subs	r3, #128	@ 0x80
 8012a80:	4a12      	ldr	r2, [pc, #72]	@ (8012acc <ff_convert+0x74>)
 8012a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012a86:	e000      	b.n	8012a8a <ff_convert+0x32>
 8012a88:	2300      	movs	r3, #0
 8012a8a:	81fb      	strh	r3, [r7, #14]
 8012a8c:	e016      	b.n	8012abc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8012a8e:	2300      	movs	r3, #0
 8012a90:	81fb      	strh	r3, [r7, #14]
 8012a92:	e009      	b.n	8012aa8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012a94:	89fb      	ldrh	r3, [r7, #14]
 8012a96:	4a0d      	ldr	r2, [pc, #52]	@ (8012acc <ff_convert+0x74>)
 8012a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012a9c:	88fa      	ldrh	r2, [r7, #6]
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d006      	beq.n	8012ab0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8012aa2:	89fb      	ldrh	r3, [r7, #14]
 8012aa4:	3301      	adds	r3, #1
 8012aa6:	81fb      	strh	r3, [r7, #14]
 8012aa8:	89fb      	ldrh	r3, [r7, #14]
 8012aaa:	2b7f      	cmp	r3, #127	@ 0x7f
 8012aac:	d9f2      	bls.n	8012a94 <ff_convert+0x3c>
 8012aae:	e000      	b.n	8012ab2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8012ab0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8012ab2:	89fb      	ldrh	r3, [r7, #14]
 8012ab4:	3380      	adds	r3, #128	@ 0x80
 8012ab6:	b29b      	uxth	r3, r3
 8012ab8:	b2db      	uxtb	r3, r3
 8012aba:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8012abc:	89fb      	ldrh	r3, [r7, #14]
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3714      	adds	r7, #20
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac8:	4770      	bx	lr
 8012aca:	bf00      	nop
 8012acc:	08015d3c 	.word	0x08015d3c

08012ad0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8012ad0:	b480      	push	{r7}
 8012ad2:	b087      	sub	sp, #28
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012ada:	88fb      	ldrh	r3, [r7, #6]
 8012adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012ae0:	d201      	bcs.n	8012ae6 <ff_wtoupper+0x16>
 8012ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8012bdc <ff_wtoupper+0x10c>)
 8012ae4:	e000      	b.n	8012ae8 <ff_wtoupper+0x18>
 8012ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8012be0 <ff_wtoupper+0x110>)
 8012ae8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8012aea:	697b      	ldr	r3, [r7, #20]
 8012aec:	1c9a      	adds	r2, r3, #2
 8012aee:	617a      	str	r2, [r7, #20]
 8012af0:	881b      	ldrh	r3, [r3, #0]
 8012af2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8012af4:	8a7b      	ldrh	r3, [r7, #18]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d068      	beq.n	8012bcc <ff_wtoupper+0xfc>
 8012afa:	88fa      	ldrh	r2, [r7, #6]
 8012afc:	8a7b      	ldrh	r3, [r7, #18]
 8012afe:	429a      	cmp	r2, r3
 8012b00:	d364      	bcc.n	8012bcc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	1c9a      	adds	r2, r3, #2
 8012b06:	617a      	str	r2, [r7, #20]
 8012b08:	881b      	ldrh	r3, [r3, #0]
 8012b0a:	823b      	strh	r3, [r7, #16]
 8012b0c:	8a3b      	ldrh	r3, [r7, #16]
 8012b0e:	0a1b      	lsrs	r3, r3, #8
 8012b10:	81fb      	strh	r3, [r7, #14]
 8012b12:	8a3b      	ldrh	r3, [r7, #16]
 8012b14:	b2db      	uxtb	r3, r3
 8012b16:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8012b18:	88fa      	ldrh	r2, [r7, #6]
 8012b1a:	8a79      	ldrh	r1, [r7, #18]
 8012b1c:	8a3b      	ldrh	r3, [r7, #16]
 8012b1e:	440b      	add	r3, r1
 8012b20:	429a      	cmp	r2, r3
 8012b22:	da49      	bge.n	8012bb8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8012b24:	89fb      	ldrh	r3, [r7, #14]
 8012b26:	2b08      	cmp	r3, #8
 8012b28:	d84f      	bhi.n	8012bca <ff_wtoupper+0xfa>
 8012b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8012b30 <ff_wtoupper+0x60>)
 8012b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b30:	08012b55 	.word	0x08012b55
 8012b34:	08012b67 	.word	0x08012b67
 8012b38:	08012b7d 	.word	0x08012b7d
 8012b3c:	08012b85 	.word	0x08012b85
 8012b40:	08012b8d 	.word	0x08012b8d
 8012b44:	08012b95 	.word	0x08012b95
 8012b48:	08012b9d 	.word	0x08012b9d
 8012b4c:	08012ba5 	.word	0x08012ba5
 8012b50:	08012bad 	.word	0x08012bad
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8012b54:	88fa      	ldrh	r2, [r7, #6]
 8012b56:	8a7b      	ldrh	r3, [r7, #18]
 8012b58:	1ad3      	subs	r3, r2, r3
 8012b5a:	005b      	lsls	r3, r3, #1
 8012b5c:	697a      	ldr	r2, [r7, #20]
 8012b5e:	4413      	add	r3, r2
 8012b60:	881b      	ldrh	r3, [r3, #0]
 8012b62:	80fb      	strh	r3, [r7, #6]
 8012b64:	e027      	b.n	8012bb6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012b66:	88fa      	ldrh	r2, [r7, #6]
 8012b68:	8a7b      	ldrh	r3, [r7, #18]
 8012b6a:	1ad3      	subs	r3, r2, r3
 8012b6c:	b29b      	uxth	r3, r3
 8012b6e:	f003 0301 	and.w	r3, r3, #1
 8012b72:	b29b      	uxth	r3, r3
 8012b74:	88fa      	ldrh	r2, [r7, #6]
 8012b76:	1ad3      	subs	r3, r2, r3
 8012b78:	80fb      	strh	r3, [r7, #6]
 8012b7a:	e01c      	b.n	8012bb6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012b7c:	88fb      	ldrh	r3, [r7, #6]
 8012b7e:	3b10      	subs	r3, #16
 8012b80:	80fb      	strh	r3, [r7, #6]
 8012b82:	e018      	b.n	8012bb6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012b84:	88fb      	ldrh	r3, [r7, #6]
 8012b86:	3b20      	subs	r3, #32
 8012b88:	80fb      	strh	r3, [r7, #6]
 8012b8a:	e014      	b.n	8012bb6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012b8c:	88fb      	ldrh	r3, [r7, #6]
 8012b8e:	3b30      	subs	r3, #48	@ 0x30
 8012b90:	80fb      	strh	r3, [r7, #6]
 8012b92:	e010      	b.n	8012bb6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012b94:	88fb      	ldrh	r3, [r7, #6]
 8012b96:	3b1a      	subs	r3, #26
 8012b98:	80fb      	strh	r3, [r7, #6]
 8012b9a:	e00c      	b.n	8012bb6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8012b9c:	88fb      	ldrh	r3, [r7, #6]
 8012b9e:	3308      	adds	r3, #8
 8012ba0:	80fb      	strh	r3, [r7, #6]
 8012ba2:	e008      	b.n	8012bb6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012ba4:	88fb      	ldrh	r3, [r7, #6]
 8012ba6:	3b50      	subs	r3, #80	@ 0x50
 8012ba8:	80fb      	strh	r3, [r7, #6]
 8012baa:	e004      	b.n	8012bb6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012bac:	88fb      	ldrh	r3, [r7, #6]
 8012bae:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8012bb2:	80fb      	strh	r3, [r7, #6]
 8012bb4:	bf00      	nop
			}
			break;
 8012bb6:	e008      	b.n	8012bca <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8012bb8:	89fb      	ldrh	r3, [r7, #14]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d195      	bne.n	8012aea <ff_wtoupper+0x1a>
 8012bbe:	8a3b      	ldrh	r3, [r7, #16]
 8012bc0:	005b      	lsls	r3, r3, #1
 8012bc2:	697a      	ldr	r2, [r7, #20]
 8012bc4:	4413      	add	r3, r2
 8012bc6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8012bc8:	e78f      	b.n	8012aea <ff_wtoupper+0x1a>
			break;
 8012bca:	bf00      	nop
	}

	return chr;
 8012bcc:	88fb      	ldrh	r3, [r7, #6]
}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	371c      	adds	r7, #28
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd8:	4770      	bx	lr
 8012bda:	bf00      	nop
 8012bdc:	08015e3c 	.word	0x08015e3c
 8012be0:	08016030 	.word	0x08016030

08012be4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8012be8:	2201      	movs	r2, #1
 8012bea:	490e      	ldr	r1, [pc, #56]	@ (8012c24 <MX_USB_HOST_Init+0x40>)
 8012bec:	480e      	ldr	r0, [pc, #56]	@ (8012c28 <MX_USB_HOST_Init+0x44>)
 8012bee:	f7f9 f9c0 	bl	800bf72 <USBH_Init>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d001      	beq.n	8012bfc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8012bf8:	f7ef fafc 	bl	80021f4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8012bfc:	490b      	ldr	r1, [pc, #44]	@ (8012c2c <MX_USB_HOST_Init+0x48>)
 8012bfe:	480a      	ldr	r0, [pc, #40]	@ (8012c28 <MX_USB_HOST_Init+0x44>)
 8012c00:	f7f9 fa62 	bl	800c0c8 <USBH_RegisterClass>
 8012c04:	4603      	mov	r3, r0
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d001      	beq.n	8012c0e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8012c0a:	f7ef faf3 	bl	80021f4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8012c0e:	4806      	ldr	r0, [pc, #24]	@ (8012c28 <MX_USB_HOST_Init+0x44>)
 8012c10:	f7f9 fae6 	bl	800c1e0 <USBH_Start>
 8012c14:	4603      	mov	r3, r0
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d001      	beq.n	8012c1e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8012c1a:	f7ef faeb 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8012c1e:	bf00      	nop
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	bf00      	nop
 8012c24:	08012c45 	.word	0x08012c45
 8012c28:	20003dec 	.word	0x20003dec
 8012c2c:	20000048 	.word	0x20000048

08012c30 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8012c34:	4802      	ldr	r0, [pc, #8]	@ (8012c40 <MX_USB_HOST_Process+0x10>)
 8012c36:	f7f9 fae3 	bl	800c200 <USBH_Process>
}
 8012c3a:	bf00      	nop
 8012c3c:	bd80      	pop	{r7, pc}
 8012c3e:	bf00      	nop
 8012c40:	20003dec 	.word	0x20003dec

08012c44 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012c44:	b480      	push	{r7}
 8012c46:	b083      	sub	sp, #12
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
 8012c4c:	460b      	mov	r3, r1
 8012c4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8012c50:	78fb      	ldrb	r3, [r7, #3]
 8012c52:	3b01      	subs	r3, #1
 8012c54:	2b04      	cmp	r3, #4
 8012c56:	d819      	bhi.n	8012c8c <USBH_UserProcess+0x48>
 8012c58:	a201      	add	r2, pc, #4	@ (adr r2, 8012c60 <USBH_UserProcess+0x1c>)
 8012c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c5e:	bf00      	nop
 8012c60:	08012c8d 	.word	0x08012c8d
 8012c64:	08012c7d 	.word	0x08012c7d
 8012c68:	08012c8d 	.word	0x08012c8d
 8012c6c:	08012c85 	.word	0x08012c85
 8012c70:	08012c75 	.word	0x08012c75
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012c74:	4b09      	ldr	r3, [pc, #36]	@ (8012c9c <USBH_UserProcess+0x58>)
 8012c76:	2203      	movs	r2, #3
 8012c78:	701a      	strb	r2, [r3, #0]
  break;
 8012c7a:	e008      	b.n	8012c8e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8012c7c:	4b07      	ldr	r3, [pc, #28]	@ (8012c9c <USBH_UserProcess+0x58>)
 8012c7e:	2202      	movs	r2, #2
 8012c80:	701a      	strb	r2, [r3, #0]
  break;
 8012c82:	e004      	b.n	8012c8e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012c84:	4b05      	ldr	r3, [pc, #20]	@ (8012c9c <USBH_UserProcess+0x58>)
 8012c86:	2201      	movs	r2, #1
 8012c88:	701a      	strb	r2, [r3, #0]
  break;
 8012c8a:	e000      	b.n	8012c8e <USBH_UserProcess+0x4a>

  default:
  break;
 8012c8c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8012c8e:	bf00      	nop
 8012c90:	370c      	adds	r7, #12
 8012c92:	46bd      	mov	sp, r7
 8012c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c98:	4770      	bx	lr
 8012c9a:	bf00      	nop
 8012c9c:	200041c4 	.word	0x200041c4

08012ca0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b08a      	sub	sp, #40	@ 0x28
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012ca8:	f107 0314 	add.w	r3, r7, #20
 8012cac:	2200      	movs	r2, #0
 8012cae:	601a      	str	r2, [r3, #0]
 8012cb0:	605a      	str	r2, [r3, #4]
 8012cb2:	609a      	str	r2, [r3, #8]
 8012cb4:	60da      	str	r2, [r3, #12]
 8012cb6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012cc0:	d147      	bne.n	8012d52 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	613b      	str	r3, [r7, #16]
 8012cc6:	4b25      	ldr	r3, [pc, #148]	@ (8012d5c <HAL_HCD_MspInit+0xbc>)
 8012cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012cca:	4a24      	ldr	r2, [pc, #144]	@ (8012d5c <HAL_HCD_MspInit+0xbc>)
 8012ccc:	f043 0301 	orr.w	r3, r3, #1
 8012cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8012cd2:	4b22      	ldr	r3, [pc, #136]	@ (8012d5c <HAL_HCD_MspInit+0xbc>)
 8012cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012cd6:	f003 0301 	and.w	r3, r3, #1
 8012cda:	613b      	str	r3, [r7, #16]
 8012cdc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8012cde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012cec:	f107 0314 	add.w	r3, r7, #20
 8012cf0:	4619      	mov	r1, r3
 8012cf2:	481b      	ldr	r0, [pc, #108]	@ (8012d60 <HAL_HCD_MspInit+0xc0>)
 8012cf4:	f7f0 fd0a 	bl	800370c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012cf8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012cfe:	2302      	movs	r3, #2
 8012d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d02:	2300      	movs	r3, #0
 8012d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012d06:	2303      	movs	r3, #3
 8012d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012d0a:	230a      	movs	r3, #10
 8012d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012d0e:	f107 0314 	add.w	r3, r7, #20
 8012d12:	4619      	mov	r1, r3
 8012d14:	4812      	ldr	r0, [pc, #72]	@ (8012d60 <HAL_HCD_MspInit+0xc0>)
 8012d16:	f7f0 fcf9 	bl	800370c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012d1a:	4b10      	ldr	r3, [pc, #64]	@ (8012d5c <HAL_HCD_MspInit+0xbc>)
 8012d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8012d5c <HAL_HCD_MspInit+0xbc>)
 8012d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d24:	6353      	str	r3, [r2, #52]	@ 0x34
 8012d26:	2300      	movs	r3, #0
 8012d28:	60fb      	str	r3, [r7, #12]
 8012d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8012d5c <HAL_HCD_MspInit+0xbc>)
 8012d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d2e:	4a0b      	ldr	r2, [pc, #44]	@ (8012d5c <HAL_HCD_MspInit+0xbc>)
 8012d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8012d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8012d36:	4b09      	ldr	r3, [pc, #36]	@ (8012d5c <HAL_HCD_MspInit+0xbc>)
 8012d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012d3e:	60fb      	str	r3, [r7, #12]
 8012d40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012d42:	2200      	movs	r2, #0
 8012d44:	2100      	movs	r1, #0
 8012d46:	2043      	movs	r0, #67	@ 0x43
 8012d48:	f7f0 f86b 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012d4c:	2043      	movs	r0, #67	@ 0x43
 8012d4e:	f7f0 f884 	bl	8002e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012d52:	bf00      	nop
 8012d54:	3728      	adds	r7, #40	@ 0x28
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}
 8012d5a:	bf00      	nop
 8012d5c:	40023800 	.word	0x40023800
 8012d60:	40020000 	.word	0x40020000

08012d64 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b082      	sub	sp, #8
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012d72:	4618      	mov	r0, r3
 8012d74:	f7f9 fe1d 	bl	800c9b2 <USBH_LL_IncTimer>
}
 8012d78:	bf00      	nop
 8012d7a:	3708      	adds	r7, #8
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bd80      	pop	{r7, pc}

08012d80 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b082      	sub	sp, #8
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f7f9 fe59 	bl	800ca46 <USBH_LL_Connect>
}
 8012d94:	bf00      	nop
 8012d96:	3708      	adds	r7, #8
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}

08012d9c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b082      	sub	sp, #8
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012daa:	4618      	mov	r0, r3
 8012dac:	f7f9 fe62 	bl	800ca74 <USBH_LL_Disconnect>
}
 8012db0:	bf00      	nop
 8012db2:	3708      	adds	r7, #8
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}

08012db8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8012db8:	b480      	push	{r7}
 8012dba:	b083      	sub	sp, #12
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	460b      	mov	r3, r1
 8012dc2:	70fb      	strb	r3, [r7, #3]
 8012dc4:	4613      	mov	r3, r2
 8012dc6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8012dc8:	bf00      	nop
 8012dca:	370c      	adds	r7, #12
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd2:	4770      	bx	lr

08012dd4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b082      	sub	sp, #8
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7f9 fe0f 	bl	800ca06 <USBH_LL_PortEnabled>
}
 8012de8:	bf00      	nop
 8012dea:	3708      	adds	r7, #8
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}

08012df0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b082      	sub	sp, #8
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7f9 fe0f 	bl	800ca22 <USBH_LL_PortDisabled>
}
 8012e04:	bf00      	nop
 8012e06:	3708      	adds	r7, #8
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}

08012e0c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b082      	sub	sp, #8
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8012e1a:	2b01      	cmp	r3, #1
 8012e1c:	d12a      	bne.n	8012e74 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8012e1e:	4a18      	ldr	r2, [pc, #96]	@ (8012e80 <USBH_LL_Init+0x74>)
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	4a15      	ldr	r2, [pc, #84]	@ (8012e80 <USBH_LL_Init+0x74>)
 8012e2a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012e2e:	4b14      	ldr	r3, [pc, #80]	@ (8012e80 <USBH_LL_Init+0x74>)
 8012e30:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8012e34:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8012e36:	4b12      	ldr	r3, [pc, #72]	@ (8012e80 <USBH_LL_Init+0x74>)
 8012e38:	2208      	movs	r2, #8
 8012e3a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8012e3c:	4b10      	ldr	r3, [pc, #64]	@ (8012e80 <USBH_LL_Init+0x74>)
 8012e3e:	2201      	movs	r2, #1
 8012e40:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012e42:	4b0f      	ldr	r3, [pc, #60]	@ (8012e80 <USBH_LL_Init+0x74>)
 8012e44:	2200      	movs	r2, #0
 8012e46:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8012e48:	4b0d      	ldr	r3, [pc, #52]	@ (8012e80 <USBH_LL_Init+0x74>)
 8012e4a:	2202      	movs	r2, #2
 8012e4c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8012e80 <USBH_LL_Init+0x74>)
 8012e50:	2200      	movs	r2, #0
 8012e52:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8012e54:	480a      	ldr	r0, [pc, #40]	@ (8012e80 <USBH_LL_Init+0x74>)
 8012e56:	f7f0 ff23 	bl	8003ca0 <HAL_HCD_Init>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d001      	beq.n	8012e64 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8012e60:	f7ef f9c8 	bl	80021f4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8012e64:	4806      	ldr	r0, [pc, #24]	@ (8012e80 <USBH_LL_Init+0x74>)
 8012e66:	f7f1 fb61 	bl	800452c <HAL_HCD_GetCurrentFrame>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	4619      	mov	r1, r3
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f7f9 fd90 	bl	800c994 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012e74:	2300      	movs	r3, #0
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3708      	adds	r7, #8
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}
 8012e7e:	bf00      	nop
 8012e80:	200041c8 	.word	0x200041c8

08012e84 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b084      	sub	sp, #16
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012e90:	2300      	movs	r3, #0
 8012e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7f1 face 	bl	800443c <HAL_HCD_Start>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012ea4:	7bfb      	ldrb	r3, [r7, #15]
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f000 f980 	bl	80131ac <USBH_Get_USB_Status>
 8012eac:	4603      	mov	r3, r0
 8012eae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012eb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3710      	adds	r7, #16
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}

08012eba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8012eba:	b580      	push	{r7, lr}
 8012ebc:	b084      	sub	sp, #16
 8012ebe:	af00      	add	r7, sp, #0
 8012ec0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f7f1 fad6 	bl	8004482 <HAL_HCD_Stop>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012eda:	7bfb      	ldrb	r3, [r7, #15]
 8012edc:	4618      	mov	r0, r3
 8012ede:	f000 f965 	bl	80131ac <USBH_Get_USB_Status>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012ee6:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ee8:	4618      	mov	r0, r3
 8012eea:	3710      	adds	r7, #16
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd80      	pop	{r7, pc}

08012ef0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b084      	sub	sp, #16
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8012ef8:	2301      	movs	r3, #1
 8012efa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7f1 fb20 	bl	8004548 <HAL_HCD_GetCurrentSpeed>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	2b02      	cmp	r3, #2
 8012f0c:	d00c      	beq.n	8012f28 <USBH_LL_GetSpeed+0x38>
 8012f0e:	2b02      	cmp	r3, #2
 8012f10:	d80d      	bhi.n	8012f2e <USBH_LL_GetSpeed+0x3e>
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d002      	beq.n	8012f1c <USBH_LL_GetSpeed+0x2c>
 8012f16:	2b01      	cmp	r3, #1
 8012f18:	d003      	beq.n	8012f22 <USBH_LL_GetSpeed+0x32>
 8012f1a:	e008      	b.n	8012f2e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8012f20:	e008      	b.n	8012f34 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8012f22:	2301      	movs	r3, #1
 8012f24:	73fb      	strb	r3, [r7, #15]
    break;
 8012f26:	e005      	b.n	8012f34 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012f28:	2302      	movs	r3, #2
 8012f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8012f2c:	e002      	b.n	8012f34 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8012f2e:	2301      	movs	r3, #1
 8012f30:	73fb      	strb	r3, [r7, #15]
    break;
 8012f32:	bf00      	nop
  }
  return  speed;
 8012f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3710      	adds	r7, #16
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}

08012f3e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8012f3e:	b580      	push	{r7, lr}
 8012f40:	b084      	sub	sp, #16
 8012f42:	af00      	add	r7, sp, #0
 8012f44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f46:	2300      	movs	r3, #0
 8012f48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012f54:	4618      	mov	r0, r3
 8012f56:	f7f1 fab1 	bl	80044bc <HAL_HCD_ResetPort>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012f5e:	7bfb      	ldrb	r3, [r7, #15]
 8012f60:	4618      	mov	r0, r3
 8012f62:	f000 f923 	bl	80131ac <USBH_Get_USB_Status>
 8012f66:	4603      	mov	r3, r0
 8012f68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	3710      	adds	r7, #16
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd80      	pop	{r7, pc}

08012f74 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b082      	sub	sp, #8
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
 8012f7c:	460b      	mov	r3, r1
 8012f7e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012f86:	78fa      	ldrb	r2, [r7, #3]
 8012f88:	4611      	mov	r1, r2
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f7f1 fab9 	bl	8004502 <HAL_HCD_HC_GetXferCount>
 8012f90:	4603      	mov	r3, r0
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	3708      	adds	r7, #8
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}

08012f9a <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 8012f9a:	b590      	push	{r4, r7, lr}
 8012f9c:	b089      	sub	sp, #36	@ 0x24
 8012f9e:	af04      	add	r7, sp, #16
 8012fa0:	6078      	str	r0, [r7, #4]
 8012fa2:	4608      	mov	r0, r1
 8012fa4:	4611      	mov	r1, r2
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	4603      	mov	r3, r0
 8012faa:	70fb      	strb	r3, [r7, #3]
 8012fac:	460b      	mov	r3, r1
 8012fae:	70bb      	strb	r3, [r7, #2]
 8012fb0:	4613      	mov	r3, r2
 8012fb2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe, epnum,
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8012fc2:	787c      	ldrb	r4, [r7, #1]
 8012fc4:	78ba      	ldrb	r2, [r7, #2]
 8012fc6:	78f9      	ldrb	r1, [r7, #3]
 8012fc8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012fca:	9302      	str	r3, [sp, #8]
 8012fcc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012fd0:	9301      	str	r3, [sp, #4]
 8012fd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012fd6:	9300      	str	r3, [sp, #0]
 8012fd8:	4623      	mov	r3, r4
 8012fda:	f7f0 fec8 	bl	8003d6e <HAL_HCD_HC_Init>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8012fe2:	7bfb      	ldrb	r3, [r7, #15]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f000 f8e1 	bl	80131ac <USBH_Get_USB_Status>
 8012fea:	4603      	mov	r3, r0
 8012fec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012fee:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	3714      	adds	r7, #20
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd90      	pop	{r4, r7, pc}

08012ff8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012ff8:	b480      	push	{r7}
 8012ffa:	b083      	sub	sp, #12
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
 8013000:	460b      	mov	r3, r1
 8013002:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(pipe);

  return USBH_OK;
 8013004:	2300      	movs	r3, #0
}
 8013006:	4618      	mov	r0, r3
 8013008:	370c      	adds	r7, #12
 801300a:	46bd      	mov	sp, r7
 801300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013010:	4770      	bx	lr

08013012 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8013012:	b590      	push	{r4, r7, lr}
 8013014:	b089      	sub	sp, #36	@ 0x24
 8013016:	af04      	add	r7, sp, #16
 8013018:	6078      	str	r0, [r7, #4]
 801301a:	4608      	mov	r0, r1
 801301c:	4611      	mov	r1, r2
 801301e:	461a      	mov	r2, r3
 8013020:	4603      	mov	r3, r0
 8013022:	70fb      	strb	r3, [r7, #3]
 8013024:	460b      	mov	r3, r1
 8013026:	70bb      	strb	r3, [r7, #2]
 8013028:	4613      	mov	r3, r2
 801302a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801302c:	2300      	movs	r3, #0
 801302e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013030:	2300      	movs	r3, #0
 8013032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801303a:	787c      	ldrb	r4, [r7, #1]
 801303c:	78ba      	ldrb	r2, [r7, #2]
 801303e:	78f9      	ldrb	r1, [r7, #3]
 8013040:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8013044:	9303      	str	r3, [sp, #12]
 8013046:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013048:	9302      	str	r3, [sp, #8]
 801304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801304c:	9301      	str	r3, [sp, #4]
 801304e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013052:	9300      	str	r3, [sp, #0]
 8013054:	4623      	mov	r3, r4
 8013056:	f7f0 ff43 	bl	8003ee0 <HAL_HCD_HC_SubmitRequest>
 801305a:	4603      	mov	r3, r0
 801305c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801305e:	7bfb      	ldrb	r3, [r7, #15]
 8013060:	4618      	mov	r0, r3
 8013062:	f000 f8a3 	bl	80131ac <USBH_Get_USB_Status>
 8013066:	4603      	mov	r3, r0
 8013068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801306a:	7bbb      	ldrb	r3, [r7, #14]
}
 801306c:	4618      	mov	r0, r3
 801306e:	3714      	adds	r7, #20
 8013070:	46bd      	mov	sp, r7
 8013072:	bd90      	pop	{r4, r7, pc}

08013074 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b082      	sub	sp, #8
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
 801307c:	460b      	mov	r3, r1
 801307e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013086:	78fa      	ldrb	r2, [r7, #3]
 8013088:	4611      	mov	r1, r2
 801308a:	4618      	mov	r0, r3
 801308c:	f7f1 fa24 	bl	80044d8 <HAL_HCD_HC_GetURBState>
 8013090:	4603      	mov	r3, r0
}
 8013092:	4618      	mov	r0, r3
 8013094:	3708      	adds	r7, #8
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}

0801309a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801309a:	b580      	push	{r7, lr}
 801309c:	b082      	sub	sp, #8
 801309e:	af00      	add	r7, sp, #0
 80130a0:	6078      	str	r0, [r7, #4]
 80130a2:	460b      	mov	r3, r1
 80130a4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80130ac:	2b01      	cmp	r3, #1
 80130ae:	d103      	bne.n	80130b8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80130b0:	78fb      	ldrb	r3, [r7, #3]
 80130b2:	4618      	mov	r0, r3
 80130b4:	f000 f8a6 	bl	8013204 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80130b8:	20c8      	movs	r0, #200	@ 0xc8
 80130ba:	f7ef fdb3 	bl	8002c24 <HAL_Delay>
  return USBH_OK;
 80130be:	2300      	movs	r3, #0
}
 80130c0:	4618      	mov	r0, r3
 80130c2:	3708      	adds	r7, #8
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}

080130c8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80130c8:	b480      	push	{r7}
 80130ca:	b085      	sub	sp, #20
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
 80130d0:	460b      	mov	r3, r1
 80130d2:	70fb      	strb	r3, [r7, #3]
 80130d4:	4613      	mov	r3, r2
 80130d6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80130de:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80130e0:	78fa      	ldrb	r2, [r7, #3]
 80130e2:	68f9      	ldr	r1, [r7, #12]
 80130e4:	4613      	mov	r3, r2
 80130e6:	011b      	lsls	r3, r3, #4
 80130e8:	1a9b      	subs	r3, r3, r2
 80130ea:	009b      	lsls	r3, r3, #2
 80130ec:	440b      	add	r3, r1
 80130ee:	3317      	adds	r3, #23
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d00a      	beq.n	801310c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80130f6:	78fa      	ldrb	r2, [r7, #3]
 80130f8:	68f9      	ldr	r1, [r7, #12]
 80130fa:	4613      	mov	r3, r2
 80130fc:	011b      	lsls	r3, r3, #4
 80130fe:	1a9b      	subs	r3, r3, r2
 8013100:	009b      	lsls	r3, r3, #2
 8013102:	440b      	add	r3, r1
 8013104:	333c      	adds	r3, #60	@ 0x3c
 8013106:	78ba      	ldrb	r2, [r7, #2]
 8013108:	701a      	strb	r2, [r3, #0]
 801310a:	e009      	b.n	8013120 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801310c:	78fa      	ldrb	r2, [r7, #3]
 801310e:	68f9      	ldr	r1, [r7, #12]
 8013110:	4613      	mov	r3, r2
 8013112:	011b      	lsls	r3, r3, #4
 8013114:	1a9b      	subs	r3, r3, r2
 8013116:	009b      	lsls	r3, r3, #2
 8013118:	440b      	add	r3, r1
 801311a:	333d      	adds	r3, #61	@ 0x3d
 801311c:	78ba      	ldrb	r2, [r7, #2]
 801311e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8013120:	2300      	movs	r3, #0
}
 8013122:	4618      	mov	r0, r3
 8013124:	3714      	adds	r7, #20
 8013126:	46bd      	mov	sp, r7
 8013128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312c:	4770      	bx	lr

0801312e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801312e:	b480      	push	{r7}
 8013130:	b085      	sub	sp, #20
 8013132:	af00      	add	r7, sp, #0
 8013134:	6078      	str	r0, [r7, #4]
 8013136:	460b      	mov	r3, r1
 8013138:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801313a:	2300      	movs	r3, #0
 801313c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013144:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8013146:	78fa      	ldrb	r2, [r7, #3]
 8013148:	68b9      	ldr	r1, [r7, #8]
 801314a:	4613      	mov	r3, r2
 801314c:	011b      	lsls	r3, r3, #4
 801314e:	1a9b      	subs	r3, r3, r2
 8013150:	009b      	lsls	r3, r3, #2
 8013152:	440b      	add	r3, r1
 8013154:	3317      	adds	r3, #23
 8013156:	781b      	ldrb	r3, [r3, #0]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d00a      	beq.n	8013172 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801315c:	78fa      	ldrb	r2, [r7, #3]
 801315e:	68b9      	ldr	r1, [r7, #8]
 8013160:	4613      	mov	r3, r2
 8013162:	011b      	lsls	r3, r3, #4
 8013164:	1a9b      	subs	r3, r3, r2
 8013166:	009b      	lsls	r3, r3, #2
 8013168:	440b      	add	r3, r1
 801316a:	333c      	adds	r3, #60	@ 0x3c
 801316c:	781b      	ldrb	r3, [r3, #0]
 801316e:	73fb      	strb	r3, [r7, #15]
 8013170:	e009      	b.n	8013186 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8013172:	78fa      	ldrb	r2, [r7, #3]
 8013174:	68b9      	ldr	r1, [r7, #8]
 8013176:	4613      	mov	r3, r2
 8013178:	011b      	lsls	r3, r3, #4
 801317a:	1a9b      	subs	r3, r3, r2
 801317c:	009b      	lsls	r3, r3, #2
 801317e:	440b      	add	r3, r1
 8013180:	333d      	adds	r3, #61	@ 0x3d
 8013182:	781b      	ldrb	r3, [r3, #0]
 8013184:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8013186:	7bfb      	ldrb	r3, [r7, #15]
}
 8013188:	4618      	mov	r0, r3
 801318a:	3714      	adds	r7, #20
 801318c:	46bd      	mov	sp, r7
 801318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013192:	4770      	bx	lr

08013194 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b082      	sub	sp, #8
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	f7ef fd41 	bl	8002c24 <HAL_Delay>
}
 80131a2:	bf00      	nop
 80131a4:	3708      	adds	r7, #8
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd80      	pop	{r7, pc}
	...

080131ac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80131ac:	b480      	push	{r7}
 80131ae:	b085      	sub	sp, #20
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	4603      	mov	r3, r0
 80131b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80131b6:	2300      	movs	r3, #0
 80131b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80131ba:	79fb      	ldrb	r3, [r7, #7]
 80131bc:	2b03      	cmp	r3, #3
 80131be:	d817      	bhi.n	80131f0 <USBH_Get_USB_Status+0x44>
 80131c0:	a201      	add	r2, pc, #4	@ (adr r2, 80131c8 <USBH_Get_USB_Status+0x1c>)
 80131c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131c6:	bf00      	nop
 80131c8:	080131d9 	.word	0x080131d9
 80131cc:	080131df 	.word	0x080131df
 80131d0:	080131e5 	.word	0x080131e5
 80131d4:	080131eb 	.word	0x080131eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80131d8:	2300      	movs	r3, #0
 80131da:	73fb      	strb	r3, [r7, #15]
    break;
 80131dc:	e00b      	b.n	80131f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80131de:	2302      	movs	r3, #2
 80131e0:	73fb      	strb	r3, [r7, #15]
    break;
 80131e2:	e008      	b.n	80131f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80131e4:	2301      	movs	r3, #1
 80131e6:	73fb      	strb	r3, [r7, #15]
    break;
 80131e8:	e005      	b.n	80131f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80131ea:	2302      	movs	r3, #2
 80131ec:	73fb      	strb	r3, [r7, #15]
    break;
 80131ee:	e002      	b.n	80131f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80131f0:	2302      	movs	r3, #2
 80131f2:	73fb      	strb	r3, [r7, #15]
    break;
 80131f4:	bf00      	nop
  }
  return usb_status;
 80131f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80131f8:	4618      	mov	r0, r3
 80131fa:	3714      	adds	r7, #20
 80131fc:	46bd      	mov	sp, r7
 80131fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013202:	4770      	bx	lr

08013204 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b084      	sub	sp, #16
 8013208:	af00      	add	r7, sp, #0
 801320a:	4603      	mov	r3, r0
 801320c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801320e:	79fb      	ldrb	r3, [r7, #7]
 8013210:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8013212:	79fb      	ldrb	r3, [r7, #7]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d102      	bne.n	801321e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8013218:	2301      	movs	r3, #1
 801321a:	73fb      	strb	r3, [r7, #15]
 801321c:	e001      	b.n	8013222 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801321e:	2300      	movs	r3, #0
 8013220:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8013222:	7bfb      	ldrb	r3, [r7, #15]
 8013224:	461a      	mov	r2, r3
 8013226:	2101      	movs	r1, #1
 8013228:	4803      	ldr	r0, [pc, #12]	@ (8013238 <MX_DriverVbusFS+0x34>)
 801322a:	f7f0 fd07 	bl	8003c3c <HAL_GPIO_WritePin>
}
 801322e:	bf00      	nop
 8013230:	3710      	adds	r7, #16
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}
 8013236:	bf00      	nop
 8013238:	40020800 	.word	0x40020800

0801323c <malloc>:
 801323c:	4b02      	ldr	r3, [pc, #8]	@ (8013248 <malloc+0xc>)
 801323e:	4601      	mov	r1, r0
 8013240:	6818      	ldr	r0, [r3, #0]
 8013242:	f000 b82d 	b.w	80132a0 <_malloc_r>
 8013246:	bf00      	nop
 8013248:	20000074 	.word	0x20000074

0801324c <free>:
 801324c:	4b02      	ldr	r3, [pc, #8]	@ (8013258 <free+0xc>)
 801324e:	4601      	mov	r1, r0
 8013250:	6818      	ldr	r0, [r3, #0]
 8013252:	f001 bd2d 	b.w	8014cb0 <_free_r>
 8013256:	bf00      	nop
 8013258:	20000074 	.word	0x20000074

0801325c <sbrk_aligned>:
 801325c:	b570      	push	{r4, r5, r6, lr}
 801325e:	4e0f      	ldr	r6, [pc, #60]	@ (801329c <sbrk_aligned+0x40>)
 8013260:	460c      	mov	r4, r1
 8013262:	6831      	ldr	r1, [r6, #0]
 8013264:	4605      	mov	r5, r0
 8013266:	b911      	cbnz	r1, 801326e <sbrk_aligned+0x12>
 8013268:	f000 fe6a 	bl	8013f40 <_sbrk_r>
 801326c:	6030      	str	r0, [r6, #0]
 801326e:	4621      	mov	r1, r4
 8013270:	4628      	mov	r0, r5
 8013272:	f000 fe65 	bl	8013f40 <_sbrk_r>
 8013276:	1c43      	adds	r3, r0, #1
 8013278:	d103      	bne.n	8013282 <sbrk_aligned+0x26>
 801327a:	f04f 34ff 	mov.w	r4, #4294967295
 801327e:	4620      	mov	r0, r4
 8013280:	bd70      	pop	{r4, r5, r6, pc}
 8013282:	1cc4      	adds	r4, r0, #3
 8013284:	f024 0403 	bic.w	r4, r4, #3
 8013288:	42a0      	cmp	r0, r4
 801328a:	d0f8      	beq.n	801327e <sbrk_aligned+0x22>
 801328c:	1a21      	subs	r1, r4, r0
 801328e:	4628      	mov	r0, r5
 8013290:	f000 fe56 	bl	8013f40 <_sbrk_r>
 8013294:	3001      	adds	r0, #1
 8013296:	d1f2      	bne.n	801327e <sbrk_aligned+0x22>
 8013298:	e7ef      	b.n	801327a <sbrk_aligned+0x1e>
 801329a:	bf00      	nop
 801329c:	200045a8 	.word	0x200045a8

080132a0 <_malloc_r>:
 80132a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132a4:	1ccd      	adds	r5, r1, #3
 80132a6:	f025 0503 	bic.w	r5, r5, #3
 80132aa:	3508      	adds	r5, #8
 80132ac:	2d0c      	cmp	r5, #12
 80132ae:	bf38      	it	cc
 80132b0:	250c      	movcc	r5, #12
 80132b2:	2d00      	cmp	r5, #0
 80132b4:	4606      	mov	r6, r0
 80132b6:	db01      	blt.n	80132bc <_malloc_r+0x1c>
 80132b8:	42a9      	cmp	r1, r5
 80132ba:	d904      	bls.n	80132c6 <_malloc_r+0x26>
 80132bc:	230c      	movs	r3, #12
 80132be:	6033      	str	r3, [r6, #0]
 80132c0:	2000      	movs	r0, #0
 80132c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801339c <_malloc_r+0xfc>
 80132ca:	f000 f869 	bl	80133a0 <__malloc_lock>
 80132ce:	f8d8 3000 	ldr.w	r3, [r8]
 80132d2:	461c      	mov	r4, r3
 80132d4:	bb44      	cbnz	r4, 8013328 <_malloc_r+0x88>
 80132d6:	4629      	mov	r1, r5
 80132d8:	4630      	mov	r0, r6
 80132da:	f7ff ffbf 	bl	801325c <sbrk_aligned>
 80132de:	1c43      	adds	r3, r0, #1
 80132e0:	4604      	mov	r4, r0
 80132e2:	d158      	bne.n	8013396 <_malloc_r+0xf6>
 80132e4:	f8d8 4000 	ldr.w	r4, [r8]
 80132e8:	4627      	mov	r7, r4
 80132ea:	2f00      	cmp	r7, #0
 80132ec:	d143      	bne.n	8013376 <_malloc_r+0xd6>
 80132ee:	2c00      	cmp	r4, #0
 80132f0:	d04b      	beq.n	801338a <_malloc_r+0xea>
 80132f2:	6823      	ldr	r3, [r4, #0]
 80132f4:	4639      	mov	r1, r7
 80132f6:	4630      	mov	r0, r6
 80132f8:	eb04 0903 	add.w	r9, r4, r3
 80132fc:	f000 fe20 	bl	8013f40 <_sbrk_r>
 8013300:	4581      	cmp	r9, r0
 8013302:	d142      	bne.n	801338a <_malloc_r+0xea>
 8013304:	6821      	ldr	r1, [r4, #0]
 8013306:	1a6d      	subs	r5, r5, r1
 8013308:	4629      	mov	r1, r5
 801330a:	4630      	mov	r0, r6
 801330c:	f7ff ffa6 	bl	801325c <sbrk_aligned>
 8013310:	3001      	adds	r0, #1
 8013312:	d03a      	beq.n	801338a <_malloc_r+0xea>
 8013314:	6823      	ldr	r3, [r4, #0]
 8013316:	442b      	add	r3, r5
 8013318:	6023      	str	r3, [r4, #0]
 801331a:	f8d8 3000 	ldr.w	r3, [r8]
 801331e:	685a      	ldr	r2, [r3, #4]
 8013320:	bb62      	cbnz	r2, 801337c <_malloc_r+0xdc>
 8013322:	f8c8 7000 	str.w	r7, [r8]
 8013326:	e00f      	b.n	8013348 <_malloc_r+0xa8>
 8013328:	6822      	ldr	r2, [r4, #0]
 801332a:	1b52      	subs	r2, r2, r5
 801332c:	d420      	bmi.n	8013370 <_malloc_r+0xd0>
 801332e:	2a0b      	cmp	r2, #11
 8013330:	d917      	bls.n	8013362 <_malloc_r+0xc2>
 8013332:	1961      	adds	r1, r4, r5
 8013334:	42a3      	cmp	r3, r4
 8013336:	6025      	str	r5, [r4, #0]
 8013338:	bf18      	it	ne
 801333a:	6059      	strne	r1, [r3, #4]
 801333c:	6863      	ldr	r3, [r4, #4]
 801333e:	bf08      	it	eq
 8013340:	f8c8 1000 	streq.w	r1, [r8]
 8013344:	5162      	str	r2, [r4, r5]
 8013346:	604b      	str	r3, [r1, #4]
 8013348:	4630      	mov	r0, r6
 801334a:	f000 f82f 	bl	80133ac <__malloc_unlock>
 801334e:	f104 000b 	add.w	r0, r4, #11
 8013352:	1d23      	adds	r3, r4, #4
 8013354:	f020 0007 	bic.w	r0, r0, #7
 8013358:	1ac2      	subs	r2, r0, r3
 801335a:	bf1c      	itt	ne
 801335c:	1a1b      	subne	r3, r3, r0
 801335e:	50a3      	strne	r3, [r4, r2]
 8013360:	e7af      	b.n	80132c2 <_malloc_r+0x22>
 8013362:	6862      	ldr	r2, [r4, #4]
 8013364:	42a3      	cmp	r3, r4
 8013366:	bf0c      	ite	eq
 8013368:	f8c8 2000 	streq.w	r2, [r8]
 801336c:	605a      	strne	r2, [r3, #4]
 801336e:	e7eb      	b.n	8013348 <_malloc_r+0xa8>
 8013370:	4623      	mov	r3, r4
 8013372:	6864      	ldr	r4, [r4, #4]
 8013374:	e7ae      	b.n	80132d4 <_malloc_r+0x34>
 8013376:	463c      	mov	r4, r7
 8013378:	687f      	ldr	r7, [r7, #4]
 801337a:	e7b6      	b.n	80132ea <_malloc_r+0x4a>
 801337c:	461a      	mov	r2, r3
 801337e:	685b      	ldr	r3, [r3, #4]
 8013380:	42a3      	cmp	r3, r4
 8013382:	d1fb      	bne.n	801337c <_malloc_r+0xdc>
 8013384:	2300      	movs	r3, #0
 8013386:	6053      	str	r3, [r2, #4]
 8013388:	e7de      	b.n	8013348 <_malloc_r+0xa8>
 801338a:	230c      	movs	r3, #12
 801338c:	6033      	str	r3, [r6, #0]
 801338e:	4630      	mov	r0, r6
 8013390:	f000 f80c 	bl	80133ac <__malloc_unlock>
 8013394:	e794      	b.n	80132c0 <_malloc_r+0x20>
 8013396:	6005      	str	r5, [r0, #0]
 8013398:	e7d6      	b.n	8013348 <_malloc_r+0xa8>
 801339a:	bf00      	nop
 801339c:	200045ac 	.word	0x200045ac

080133a0 <__malloc_lock>:
 80133a0:	4801      	ldr	r0, [pc, #4]	@ (80133a8 <__malloc_lock+0x8>)
 80133a2:	f000 be1a 	b.w	8013fda <__retarget_lock_acquire_recursive>
 80133a6:	bf00      	nop
 80133a8:	200046f0 	.word	0x200046f0

080133ac <__malloc_unlock>:
 80133ac:	4801      	ldr	r0, [pc, #4]	@ (80133b4 <__malloc_unlock+0x8>)
 80133ae:	f000 be15 	b.w	8013fdc <__retarget_lock_release_recursive>
 80133b2:	bf00      	nop
 80133b4:	200046f0 	.word	0x200046f0

080133b8 <__cvt>:
 80133b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80133bc:	ec57 6b10 	vmov	r6, r7, d0
 80133c0:	2f00      	cmp	r7, #0
 80133c2:	460c      	mov	r4, r1
 80133c4:	4619      	mov	r1, r3
 80133c6:	463b      	mov	r3, r7
 80133c8:	bfbb      	ittet	lt
 80133ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80133ce:	461f      	movlt	r7, r3
 80133d0:	2300      	movge	r3, #0
 80133d2:	232d      	movlt	r3, #45	@ 0x2d
 80133d4:	700b      	strb	r3, [r1, #0]
 80133d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80133d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80133dc:	4691      	mov	r9, r2
 80133de:	f023 0820 	bic.w	r8, r3, #32
 80133e2:	bfbc      	itt	lt
 80133e4:	4632      	movlt	r2, r6
 80133e6:	4616      	movlt	r6, r2
 80133e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80133ec:	d005      	beq.n	80133fa <__cvt+0x42>
 80133ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80133f2:	d100      	bne.n	80133f6 <__cvt+0x3e>
 80133f4:	3401      	adds	r4, #1
 80133f6:	2102      	movs	r1, #2
 80133f8:	e000      	b.n	80133fc <__cvt+0x44>
 80133fa:	2103      	movs	r1, #3
 80133fc:	ab03      	add	r3, sp, #12
 80133fe:	9301      	str	r3, [sp, #4]
 8013400:	ab02      	add	r3, sp, #8
 8013402:	9300      	str	r3, [sp, #0]
 8013404:	ec47 6b10 	vmov	d0, r6, r7
 8013408:	4653      	mov	r3, sl
 801340a:	4622      	mov	r2, r4
 801340c:	f000 fe80 	bl	8014110 <_dtoa_r>
 8013410:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013414:	4605      	mov	r5, r0
 8013416:	d119      	bne.n	801344c <__cvt+0x94>
 8013418:	f019 0f01 	tst.w	r9, #1
 801341c:	d00e      	beq.n	801343c <__cvt+0x84>
 801341e:	eb00 0904 	add.w	r9, r0, r4
 8013422:	2200      	movs	r2, #0
 8013424:	2300      	movs	r3, #0
 8013426:	4630      	mov	r0, r6
 8013428:	4639      	mov	r1, r7
 801342a:	f7ed fb4d 	bl	8000ac8 <__aeabi_dcmpeq>
 801342e:	b108      	cbz	r0, 8013434 <__cvt+0x7c>
 8013430:	f8cd 900c 	str.w	r9, [sp, #12]
 8013434:	2230      	movs	r2, #48	@ 0x30
 8013436:	9b03      	ldr	r3, [sp, #12]
 8013438:	454b      	cmp	r3, r9
 801343a:	d31e      	bcc.n	801347a <__cvt+0xc2>
 801343c:	9b03      	ldr	r3, [sp, #12]
 801343e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013440:	1b5b      	subs	r3, r3, r5
 8013442:	4628      	mov	r0, r5
 8013444:	6013      	str	r3, [r2, #0]
 8013446:	b004      	add	sp, #16
 8013448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801344c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013450:	eb00 0904 	add.w	r9, r0, r4
 8013454:	d1e5      	bne.n	8013422 <__cvt+0x6a>
 8013456:	7803      	ldrb	r3, [r0, #0]
 8013458:	2b30      	cmp	r3, #48	@ 0x30
 801345a:	d10a      	bne.n	8013472 <__cvt+0xba>
 801345c:	2200      	movs	r2, #0
 801345e:	2300      	movs	r3, #0
 8013460:	4630      	mov	r0, r6
 8013462:	4639      	mov	r1, r7
 8013464:	f7ed fb30 	bl	8000ac8 <__aeabi_dcmpeq>
 8013468:	b918      	cbnz	r0, 8013472 <__cvt+0xba>
 801346a:	f1c4 0401 	rsb	r4, r4, #1
 801346e:	f8ca 4000 	str.w	r4, [sl]
 8013472:	f8da 3000 	ldr.w	r3, [sl]
 8013476:	4499      	add	r9, r3
 8013478:	e7d3      	b.n	8013422 <__cvt+0x6a>
 801347a:	1c59      	adds	r1, r3, #1
 801347c:	9103      	str	r1, [sp, #12]
 801347e:	701a      	strb	r2, [r3, #0]
 8013480:	e7d9      	b.n	8013436 <__cvt+0x7e>

08013482 <__exponent>:
 8013482:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013484:	2900      	cmp	r1, #0
 8013486:	bfba      	itte	lt
 8013488:	4249      	neglt	r1, r1
 801348a:	232d      	movlt	r3, #45	@ 0x2d
 801348c:	232b      	movge	r3, #43	@ 0x2b
 801348e:	2909      	cmp	r1, #9
 8013490:	7002      	strb	r2, [r0, #0]
 8013492:	7043      	strb	r3, [r0, #1]
 8013494:	dd29      	ble.n	80134ea <__exponent+0x68>
 8013496:	f10d 0307 	add.w	r3, sp, #7
 801349a:	461d      	mov	r5, r3
 801349c:	270a      	movs	r7, #10
 801349e:	461a      	mov	r2, r3
 80134a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80134a4:	fb07 1416 	mls	r4, r7, r6, r1
 80134a8:	3430      	adds	r4, #48	@ 0x30
 80134aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80134ae:	460c      	mov	r4, r1
 80134b0:	2c63      	cmp	r4, #99	@ 0x63
 80134b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80134b6:	4631      	mov	r1, r6
 80134b8:	dcf1      	bgt.n	801349e <__exponent+0x1c>
 80134ba:	3130      	adds	r1, #48	@ 0x30
 80134bc:	1e94      	subs	r4, r2, #2
 80134be:	f803 1c01 	strb.w	r1, [r3, #-1]
 80134c2:	1c41      	adds	r1, r0, #1
 80134c4:	4623      	mov	r3, r4
 80134c6:	42ab      	cmp	r3, r5
 80134c8:	d30a      	bcc.n	80134e0 <__exponent+0x5e>
 80134ca:	f10d 0309 	add.w	r3, sp, #9
 80134ce:	1a9b      	subs	r3, r3, r2
 80134d0:	42ac      	cmp	r4, r5
 80134d2:	bf88      	it	hi
 80134d4:	2300      	movhi	r3, #0
 80134d6:	3302      	adds	r3, #2
 80134d8:	4403      	add	r3, r0
 80134da:	1a18      	subs	r0, r3, r0
 80134dc:	b003      	add	sp, #12
 80134de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80134e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80134e8:	e7ed      	b.n	80134c6 <__exponent+0x44>
 80134ea:	2330      	movs	r3, #48	@ 0x30
 80134ec:	3130      	adds	r1, #48	@ 0x30
 80134ee:	7083      	strb	r3, [r0, #2]
 80134f0:	70c1      	strb	r1, [r0, #3]
 80134f2:	1d03      	adds	r3, r0, #4
 80134f4:	e7f1      	b.n	80134da <__exponent+0x58>
	...

080134f8 <_printf_float>:
 80134f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134fc:	b08d      	sub	sp, #52	@ 0x34
 80134fe:	460c      	mov	r4, r1
 8013500:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013504:	4616      	mov	r6, r2
 8013506:	461f      	mov	r7, r3
 8013508:	4605      	mov	r5, r0
 801350a:	f000 fce1 	bl	8013ed0 <_localeconv_r>
 801350e:	6803      	ldr	r3, [r0, #0]
 8013510:	9304      	str	r3, [sp, #16]
 8013512:	4618      	mov	r0, r3
 8013514:	f7ec feac 	bl	8000270 <strlen>
 8013518:	2300      	movs	r3, #0
 801351a:	930a      	str	r3, [sp, #40]	@ 0x28
 801351c:	f8d8 3000 	ldr.w	r3, [r8]
 8013520:	9005      	str	r0, [sp, #20]
 8013522:	3307      	adds	r3, #7
 8013524:	f023 0307 	bic.w	r3, r3, #7
 8013528:	f103 0208 	add.w	r2, r3, #8
 801352c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013530:	f8d4 b000 	ldr.w	fp, [r4]
 8013534:	f8c8 2000 	str.w	r2, [r8]
 8013538:	e9d3 8900 	ldrd	r8, r9, [r3]
 801353c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013540:	9307      	str	r3, [sp, #28]
 8013542:	f8cd 8018 	str.w	r8, [sp, #24]
 8013546:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801354a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801354e:	4b9c      	ldr	r3, [pc, #624]	@ (80137c0 <_printf_float+0x2c8>)
 8013550:	f04f 32ff 	mov.w	r2, #4294967295
 8013554:	f7ed faea 	bl	8000b2c <__aeabi_dcmpun>
 8013558:	bb70      	cbnz	r0, 80135b8 <_printf_float+0xc0>
 801355a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801355e:	4b98      	ldr	r3, [pc, #608]	@ (80137c0 <_printf_float+0x2c8>)
 8013560:	f04f 32ff 	mov.w	r2, #4294967295
 8013564:	f7ed fac4 	bl	8000af0 <__aeabi_dcmple>
 8013568:	bb30      	cbnz	r0, 80135b8 <_printf_float+0xc0>
 801356a:	2200      	movs	r2, #0
 801356c:	2300      	movs	r3, #0
 801356e:	4640      	mov	r0, r8
 8013570:	4649      	mov	r1, r9
 8013572:	f7ed fab3 	bl	8000adc <__aeabi_dcmplt>
 8013576:	b110      	cbz	r0, 801357e <_printf_float+0x86>
 8013578:	232d      	movs	r3, #45	@ 0x2d
 801357a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801357e:	4a91      	ldr	r2, [pc, #580]	@ (80137c4 <_printf_float+0x2cc>)
 8013580:	4b91      	ldr	r3, [pc, #580]	@ (80137c8 <_printf_float+0x2d0>)
 8013582:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013586:	bf8c      	ite	hi
 8013588:	4690      	movhi	r8, r2
 801358a:	4698      	movls	r8, r3
 801358c:	2303      	movs	r3, #3
 801358e:	6123      	str	r3, [r4, #16]
 8013590:	f02b 0304 	bic.w	r3, fp, #4
 8013594:	6023      	str	r3, [r4, #0]
 8013596:	f04f 0900 	mov.w	r9, #0
 801359a:	9700      	str	r7, [sp, #0]
 801359c:	4633      	mov	r3, r6
 801359e:	aa0b      	add	r2, sp, #44	@ 0x2c
 80135a0:	4621      	mov	r1, r4
 80135a2:	4628      	mov	r0, r5
 80135a4:	f000 f9d2 	bl	801394c <_printf_common>
 80135a8:	3001      	adds	r0, #1
 80135aa:	f040 808d 	bne.w	80136c8 <_printf_float+0x1d0>
 80135ae:	f04f 30ff 	mov.w	r0, #4294967295
 80135b2:	b00d      	add	sp, #52	@ 0x34
 80135b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135b8:	4642      	mov	r2, r8
 80135ba:	464b      	mov	r3, r9
 80135bc:	4640      	mov	r0, r8
 80135be:	4649      	mov	r1, r9
 80135c0:	f7ed fab4 	bl	8000b2c <__aeabi_dcmpun>
 80135c4:	b140      	cbz	r0, 80135d8 <_printf_float+0xe0>
 80135c6:	464b      	mov	r3, r9
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	bfbc      	itt	lt
 80135cc:	232d      	movlt	r3, #45	@ 0x2d
 80135ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80135d2:	4a7e      	ldr	r2, [pc, #504]	@ (80137cc <_printf_float+0x2d4>)
 80135d4:	4b7e      	ldr	r3, [pc, #504]	@ (80137d0 <_printf_float+0x2d8>)
 80135d6:	e7d4      	b.n	8013582 <_printf_float+0x8a>
 80135d8:	6863      	ldr	r3, [r4, #4]
 80135da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80135de:	9206      	str	r2, [sp, #24]
 80135e0:	1c5a      	adds	r2, r3, #1
 80135e2:	d13b      	bne.n	801365c <_printf_float+0x164>
 80135e4:	2306      	movs	r3, #6
 80135e6:	6063      	str	r3, [r4, #4]
 80135e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80135ec:	2300      	movs	r3, #0
 80135ee:	6022      	str	r2, [r4, #0]
 80135f0:	9303      	str	r3, [sp, #12]
 80135f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80135f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80135f8:	ab09      	add	r3, sp, #36	@ 0x24
 80135fa:	9300      	str	r3, [sp, #0]
 80135fc:	6861      	ldr	r1, [r4, #4]
 80135fe:	ec49 8b10 	vmov	d0, r8, r9
 8013602:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013606:	4628      	mov	r0, r5
 8013608:	f7ff fed6 	bl	80133b8 <__cvt>
 801360c:	9b06      	ldr	r3, [sp, #24]
 801360e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013610:	2b47      	cmp	r3, #71	@ 0x47
 8013612:	4680      	mov	r8, r0
 8013614:	d129      	bne.n	801366a <_printf_float+0x172>
 8013616:	1cc8      	adds	r0, r1, #3
 8013618:	db02      	blt.n	8013620 <_printf_float+0x128>
 801361a:	6863      	ldr	r3, [r4, #4]
 801361c:	4299      	cmp	r1, r3
 801361e:	dd41      	ble.n	80136a4 <_printf_float+0x1ac>
 8013620:	f1aa 0a02 	sub.w	sl, sl, #2
 8013624:	fa5f fa8a 	uxtb.w	sl, sl
 8013628:	3901      	subs	r1, #1
 801362a:	4652      	mov	r2, sl
 801362c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013630:	9109      	str	r1, [sp, #36]	@ 0x24
 8013632:	f7ff ff26 	bl	8013482 <__exponent>
 8013636:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013638:	1813      	adds	r3, r2, r0
 801363a:	2a01      	cmp	r2, #1
 801363c:	4681      	mov	r9, r0
 801363e:	6123      	str	r3, [r4, #16]
 8013640:	dc02      	bgt.n	8013648 <_printf_float+0x150>
 8013642:	6822      	ldr	r2, [r4, #0]
 8013644:	07d2      	lsls	r2, r2, #31
 8013646:	d501      	bpl.n	801364c <_printf_float+0x154>
 8013648:	3301      	adds	r3, #1
 801364a:	6123      	str	r3, [r4, #16]
 801364c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013650:	2b00      	cmp	r3, #0
 8013652:	d0a2      	beq.n	801359a <_printf_float+0xa2>
 8013654:	232d      	movs	r3, #45	@ 0x2d
 8013656:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801365a:	e79e      	b.n	801359a <_printf_float+0xa2>
 801365c:	9a06      	ldr	r2, [sp, #24]
 801365e:	2a47      	cmp	r2, #71	@ 0x47
 8013660:	d1c2      	bne.n	80135e8 <_printf_float+0xf0>
 8013662:	2b00      	cmp	r3, #0
 8013664:	d1c0      	bne.n	80135e8 <_printf_float+0xf0>
 8013666:	2301      	movs	r3, #1
 8013668:	e7bd      	b.n	80135e6 <_printf_float+0xee>
 801366a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801366e:	d9db      	bls.n	8013628 <_printf_float+0x130>
 8013670:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8013674:	d118      	bne.n	80136a8 <_printf_float+0x1b0>
 8013676:	2900      	cmp	r1, #0
 8013678:	6863      	ldr	r3, [r4, #4]
 801367a:	dd0b      	ble.n	8013694 <_printf_float+0x19c>
 801367c:	6121      	str	r1, [r4, #16]
 801367e:	b913      	cbnz	r3, 8013686 <_printf_float+0x18e>
 8013680:	6822      	ldr	r2, [r4, #0]
 8013682:	07d0      	lsls	r0, r2, #31
 8013684:	d502      	bpl.n	801368c <_printf_float+0x194>
 8013686:	3301      	adds	r3, #1
 8013688:	440b      	add	r3, r1
 801368a:	6123      	str	r3, [r4, #16]
 801368c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801368e:	f04f 0900 	mov.w	r9, #0
 8013692:	e7db      	b.n	801364c <_printf_float+0x154>
 8013694:	b913      	cbnz	r3, 801369c <_printf_float+0x1a4>
 8013696:	6822      	ldr	r2, [r4, #0]
 8013698:	07d2      	lsls	r2, r2, #31
 801369a:	d501      	bpl.n	80136a0 <_printf_float+0x1a8>
 801369c:	3302      	adds	r3, #2
 801369e:	e7f4      	b.n	801368a <_printf_float+0x192>
 80136a0:	2301      	movs	r3, #1
 80136a2:	e7f2      	b.n	801368a <_printf_float+0x192>
 80136a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80136a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80136aa:	4299      	cmp	r1, r3
 80136ac:	db05      	blt.n	80136ba <_printf_float+0x1c2>
 80136ae:	6823      	ldr	r3, [r4, #0]
 80136b0:	6121      	str	r1, [r4, #16]
 80136b2:	07d8      	lsls	r0, r3, #31
 80136b4:	d5ea      	bpl.n	801368c <_printf_float+0x194>
 80136b6:	1c4b      	adds	r3, r1, #1
 80136b8:	e7e7      	b.n	801368a <_printf_float+0x192>
 80136ba:	2900      	cmp	r1, #0
 80136bc:	bfd4      	ite	le
 80136be:	f1c1 0202 	rsble	r2, r1, #2
 80136c2:	2201      	movgt	r2, #1
 80136c4:	4413      	add	r3, r2
 80136c6:	e7e0      	b.n	801368a <_printf_float+0x192>
 80136c8:	6823      	ldr	r3, [r4, #0]
 80136ca:	055a      	lsls	r2, r3, #21
 80136cc:	d407      	bmi.n	80136de <_printf_float+0x1e6>
 80136ce:	6923      	ldr	r3, [r4, #16]
 80136d0:	4642      	mov	r2, r8
 80136d2:	4631      	mov	r1, r6
 80136d4:	4628      	mov	r0, r5
 80136d6:	47b8      	blx	r7
 80136d8:	3001      	adds	r0, #1
 80136da:	d12b      	bne.n	8013734 <_printf_float+0x23c>
 80136dc:	e767      	b.n	80135ae <_printf_float+0xb6>
 80136de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80136e2:	f240 80dd 	bls.w	80138a0 <_printf_float+0x3a8>
 80136e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80136ea:	2200      	movs	r2, #0
 80136ec:	2300      	movs	r3, #0
 80136ee:	f7ed f9eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80136f2:	2800      	cmp	r0, #0
 80136f4:	d033      	beq.n	801375e <_printf_float+0x266>
 80136f6:	4a37      	ldr	r2, [pc, #220]	@ (80137d4 <_printf_float+0x2dc>)
 80136f8:	2301      	movs	r3, #1
 80136fa:	4631      	mov	r1, r6
 80136fc:	4628      	mov	r0, r5
 80136fe:	47b8      	blx	r7
 8013700:	3001      	adds	r0, #1
 8013702:	f43f af54 	beq.w	80135ae <_printf_float+0xb6>
 8013706:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801370a:	4543      	cmp	r3, r8
 801370c:	db02      	blt.n	8013714 <_printf_float+0x21c>
 801370e:	6823      	ldr	r3, [r4, #0]
 8013710:	07d8      	lsls	r0, r3, #31
 8013712:	d50f      	bpl.n	8013734 <_printf_float+0x23c>
 8013714:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013718:	4631      	mov	r1, r6
 801371a:	4628      	mov	r0, r5
 801371c:	47b8      	blx	r7
 801371e:	3001      	adds	r0, #1
 8013720:	f43f af45 	beq.w	80135ae <_printf_float+0xb6>
 8013724:	f04f 0900 	mov.w	r9, #0
 8013728:	f108 38ff 	add.w	r8, r8, #4294967295
 801372c:	f104 0a1a 	add.w	sl, r4, #26
 8013730:	45c8      	cmp	r8, r9
 8013732:	dc09      	bgt.n	8013748 <_printf_float+0x250>
 8013734:	6823      	ldr	r3, [r4, #0]
 8013736:	079b      	lsls	r3, r3, #30
 8013738:	f100 8103 	bmi.w	8013942 <_printf_float+0x44a>
 801373c:	68e0      	ldr	r0, [r4, #12]
 801373e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013740:	4298      	cmp	r0, r3
 8013742:	bfb8      	it	lt
 8013744:	4618      	movlt	r0, r3
 8013746:	e734      	b.n	80135b2 <_printf_float+0xba>
 8013748:	2301      	movs	r3, #1
 801374a:	4652      	mov	r2, sl
 801374c:	4631      	mov	r1, r6
 801374e:	4628      	mov	r0, r5
 8013750:	47b8      	blx	r7
 8013752:	3001      	adds	r0, #1
 8013754:	f43f af2b 	beq.w	80135ae <_printf_float+0xb6>
 8013758:	f109 0901 	add.w	r9, r9, #1
 801375c:	e7e8      	b.n	8013730 <_printf_float+0x238>
 801375e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013760:	2b00      	cmp	r3, #0
 8013762:	dc39      	bgt.n	80137d8 <_printf_float+0x2e0>
 8013764:	4a1b      	ldr	r2, [pc, #108]	@ (80137d4 <_printf_float+0x2dc>)
 8013766:	2301      	movs	r3, #1
 8013768:	4631      	mov	r1, r6
 801376a:	4628      	mov	r0, r5
 801376c:	47b8      	blx	r7
 801376e:	3001      	adds	r0, #1
 8013770:	f43f af1d 	beq.w	80135ae <_printf_float+0xb6>
 8013774:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013778:	ea59 0303 	orrs.w	r3, r9, r3
 801377c:	d102      	bne.n	8013784 <_printf_float+0x28c>
 801377e:	6823      	ldr	r3, [r4, #0]
 8013780:	07d9      	lsls	r1, r3, #31
 8013782:	d5d7      	bpl.n	8013734 <_printf_float+0x23c>
 8013784:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013788:	4631      	mov	r1, r6
 801378a:	4628      	mov	r0, r5
 801378c:	47b8      	blx	r7
 801378e:	3001      	adds	r0, #1
 8013790:	f43f af0d 	beq.w	80135ae <_printf_float+0xb6>
 8013794:	f04f 0a00 	mov.w	sl, #0
 8013798:	f104 0b1a 	add.w	fp, r4, #26
 801379c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801379e:	425b      	negs	r3, r3
 80137a0:	4553      	cmp	r3, sl
 80137a2:	dc01      	bgt.n	80137a8 <_printf_float+0x2b0>
 80137a4:	464b      	mov	r3, r9
 80137a6:	e793      	b.n	80136d0 <_printf_float+0x1d8>
 80137a8:	2301      	movs	r3, #1
 80137aa:	465a      	mov	r2, fp
 80137ac:	4631      	mov	r1, r6
 80137ae:	4628      	mov	r0, r5
 80137b0:	47b8      	blx	r7
 80137b2:	3001      	adds	r0, #1
 80137b4:	f43f aefb 	beq.w	80135ae <_printf_float+0xb6>
 80137b8:	f10a 0a01 	add.w	sl, sl, #1
 80137bc:	e7ee      	b.n	801379c <_printf_float+0x2a4>
 80137be:	bf00      	nop
 80137c0:	7fefffff 	.word	0x7fefffff
 80137c4:	080160f0 	.word	0x080160f0
 80137c8:	080160ec 	.word	0x080160ec
 80137cc:	080160f8 	.word	0x080160f8
 80137d0:	080160f4 	.word	0x080160f4
 80137d4:	080160fc 	.word	0x080160fc
 80137d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80137da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80137de:	4553      	cmp	r3, sl
 80137e0:	bfa8      	it	ge
 80137e2:	4653      	movge	r3, sl
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	4699      	mov	r9, r3
 80137e8:	dc36      	bgt.n	8013858 <_printf_float+0x360>
 80137ea:	f04f 0b00 	mov.w	fp, #0
 80137ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80137f2:	f104 021a 	add.w	r2, r4, #26
 80137f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80137f8:	9306      	str	r3, [sp, #24]
 80137fa:	eba3 0309 	sub.w	r3, r3, r9
 80137fe:	455b      	cmp	r3, fp
 8013800:	dc31      	bgt.n	8013866 <_printf_float+0x36e>
 8013802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013804:	459a      	cmp	sl, r3
 8013806:	dc3a      	bgt.n	801387e <_printf_float+0x386>
 8013808:	6823      	ldr	r3, [r4, #0]
 801380a:	07da      	lsls	r2, r3, #31
 801380c:	d437      	bmi.n	801387e <_printf_float+0x386>
 801380e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013810:	ebaa 0903 	sub.w	r9, sl, r3
 8013814:	9b06      	ldr	r3, [sp, #24]
 8013816:	ebaa 0303 	sub.w	r3, sl, r3
 801381a:	4599      	cmp	r9, r3
 801381c:	bfa8      	it	ge
 801381e:	4699      	movge	r9, r3
 8013820:	f1b9 0f00 	cmp.w	r9, #0
 8013824:	dc33      	bgt.n	801388e <_printf_float+0x396>
 8013826:	f04f 0800 	mov.w	r8, #0
 801382a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801382e:	f104 0b1a 	add.w	fp, r4, #26
 8013832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013834:	ebaa 0303 	sub.w	r3, sl, r3
 8013838:	eba3 0309 	sub.w	r3, r3, r9
 801383c:	4543      	cmp	r3, r8
 801383e:	f77f af79 	ble.w	8013734 <_printf_float+0x23c>
 8013842:	2301      	movs	r3, #1
 8013844:	465a      	mov	r2, fp
 8013846:	4631      	mov	r1, r6
 8013848:	4628      	mov	r0, r5
 801384a:	47b8      	blx	r7
 801384c:	3001      	adds	r0, #1
 801384e:	f43f aeae 	beq.w	80135ae <_printf_float+0xb6>
 8013852:	f108 0801 	add.w	r8, r8, #1
 8013856:	e7ec      	b.n	8013832 <_printf_float+0x33a>
 8013858:	4642      	mov	r2, r8
 801385a:	4631      	mov	r1, r6
 801385c:	4628      	mov	r0, r5
 801385e:	47b8      	blx	r7
 8013860:	3001      	adds	r0, #1
 8013862:	d1c2      	bne.n	80137ea <_printf_float+0x2f2>
 8013864:	e6a3      	b.n	80135ae <_printf_float+0xb6>
 8013866:	2301      	movs	r3, #1
 8013868:	4631      	mov	r1, r6
 801386a:	4628      	mov	r0, r5
 801386c:	9206      	str	r2, [sp, #24]
 801386e:	47b8      	blx	r7
 8013870:	3001      	adds	r0, #1
 8013872:	f43f ae9c 	beq.w	80135ae <_printf_float+0xb6>
 8013876:	9a06      	ldr	r2, [sp, #24]
 8013878:	f10b 0b01 	add.w	fp, fp, #1
 801387c:	e7bb      	b.n	80137f6 <_printf_float+0x2fe>
 801387e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013882:	4631      	mov	r1, r6
 8013884:	4628      	mov	r0, r5
 8013886:	47b8      	blx	r7
 8013888:	3001      	adds	r0, #1
 801388a:	d1c0      	bne.n	801380e <_printf_float+0x316>
 801388c:	e68f      	b.n	80135ae <_printf_float+0xb6>
 801388e:	9a06      	ldr	r2, [sp, #24]
 8013890:	464b      	mov	r3, r9
 8013892:	4442      	add	r2, r8
 8013894:	4631      	mov	r1, r6
 8013896:	4628      	mov	r0, r5
 8013898:	47b8      	blx	r7
 801389a:	3001      	adds	r0, #1
 801389c:	d1c3      	bne.n	8013826 <_printf_float+0x32e>
 801389e:	e686      	b.n	80135ae <_printf_float+0xb6>
 80138a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80138a4:	f1ba 0f01 	cmp.w	sl, #1
 80138a8:	dc01      	bgt.n	80138ae <_printf_float+0x3b6>
 80138aa:	07db      	lsls	r3, r3, #31
 80138ac:	d536      	bpl.n	801391c <_printf_float+0x424>
 80138ae:	2301      	movs	r3, #1
 80138b0:	4642      	mov	r2, r8
 80138b2:	4631      	mov	r1, r6
 80138b4:	4628      	mov	r0, r5
 80138b6:	47b8      	blx	r7
 80138b8:	3001      	adds	r0, #1
 80138ba:	f43f ae78 	beq.w	80135ae <_printf_float+0xb6>
 80138be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138c2:	4631      	mov	r1, r6
 80138c4:	4628      	mov	r0, r5
 80138c6:	47b8      	blx	r7
 80138c8:	3001      	adds	r0, #1
 80138ca:	f43f ae70 	beq.w	80135ae <_printf_float+0xb6>
 80138ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80138d2:	2200      	movs	r2, #0
 80138d4:	2300      	movs	r3, #0
 80138d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80138da:	f7ed f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80138de:	b9c0      	cbnz	r0, 8013912 <_printf_float+0x41a>
 80138e0:	4653      	mov	r3, sl
 80138e2:	f108 0201 	add.w	r2, r8, #1
 80138e6:	4631      	mov	r1, r6
 80138e8:	4628      	mov	r0, r5
 80138ea:	47b8      	blx	r7
 80138ec:	3001      	adds	r0, #1
 80138ee:	d10c      	bne.n	801390a <_printf_float+0x412>
 80138f0:	e65d      	b.n	80135ae <_printf_float+0xb6>
 80138f2:	2301      	movs	r3, #1
 80138f4:	465a      	mov	r2, fp
 80138f6:	4631      	mov	r1, r6
 80138f8:	4628      	mov	r0, r5
 80138fa:	47b8      	blx	r7
 80138fc:	3001      	adds	r0, #1
 80138fe:	f43f ae56 	beq.w	80135ae <_printf_float+0xb6>
 8013902:	f108 0801 	add.w	r8, r8, #1
 8013906:	45d0      	cmp	r8, sl
 8013908:	dbf3      	blt.n	80138f2 <_printf_float+0x3fa>
 801390a:	464b      	mov	r3, r9
 801390c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013910:	e6df      	b.n	80136d2 <_printf_float+0x1da>
 8013912:	f04f 0800 	mov.w	r8, #0
 8013916:	f104 0b1a 	add.w	fp, r4, #26
 801391a:	e7f4      	b.n	8013906 <_printf_float+0x40e>
 801391c:	2301      	movs	r3, #1
 801391e:	4642      	mov	r2, r8
 8013920:	e7e1      	b.n	80138e6 <_printf_float+0x3ee>
 8013922:	2301      	movs	r3, #1
 8013924:	464a      	mov	r2, r9
 8013926:	4631      	mov	r1, r6
 8013928:	4628      	mov	r0, r5
 801392a:	47b8      	blx	r7
 801392c:	3001      	adds	r0, #1
 801392e:	f43f ae3e 	beq.w	80135ae <_printf_float+0xb6>
 8013932:	f108 0801 	add.w	r8, r8, #1
 8013936:	68e3      	ldr	r3, [r4, #12]
 8013938:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801393a:	1a5b      	subs	r3, r3, r1
 801393c:	4543      	cmp	r3, r8
 801393e:	dcf0      	bgt.n	8013922 <_printf_float+0x42a>
 8013940:	e6fc      	b.n	801373c <_printf_float+0x244>
 8013942:	f04f 0800 	mov.w	r8, #0
 8013946:	f104 0919 	add.w	r9, r4, #25
 801394a:	e7f4      	b.n	8013936 <_printf_float+0x43e>

0801394c <_printf_common>:
 801394c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013950:	4616      	mov	r6, r2
 8013952:	4698      	mov	r8, r3
 8013954:	688a      	ldr	r2, [r1, #8]
 8013956:	690b      	ldr	r3, [r1, #16]
 8013958:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801395c:	4293      	cmp	r3, r2
 801395e:	bfb8      	it	lt
 8013960:	4613      	movlt	r3, r2
 8013962:	6033      	str	r3, [r6, #0]
 8013964:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013968:	4607      	mov	r7, r0
 801396a:	460c      	mov	r4, r1
 801396c:	b10a      	cbz	r2, 8013972 <_printf_common+0x26>
 801396e:	3301      	adds	r3, #1
 8013970:	6033      	str	r3, [r6, #0]
 8013972:	6823      	ldr	r3, [r4, #0]
 8013974:	0699      	lsls	r1, r3, #26
 8013976:	bf42      	ittt	mi
 8013978:	6833      	ldrmi	r3, [r6, #0]
 801397a:	3302      	addmi	r3, #2
 801397c:	6033      	strmi	r3, [r6, #0]
 801397e:	6825      	ldr	r5, [r4, #0]
 8013980:	f015 0506 	ands.w	r5, r5, #6
 8013984:	d106      	bne.n	8013994 <_printf_common+0x48>
 8013986:	f104 0a19 	add.w	sl, r4, #25
 801398a:	68e3      	ldr	r3, [r4, #12]
 801398c:	6832      	ldr	r2, [r6, #0]
 801398e:	1a9b      	subs	r3, r3, r2
 8013990:	42ab      	cmp	r3, r5
 8013992:	dc26      	bgt.n	80139e2 <_printf_common+0x96>
 8013994:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013998:	6822      	ldr	r2, [r4, #0]
 801399a:	3b00      	subs	r3, #0
 801399c:	bf18      	it	ne
 801399e:	2301      	movne	r3, #1
 80139a0:	0692      	lsls	r2, r2, #26
 80139a2:	d42b      	bmi.n	80139fc <_printf_common+0xb0>
 80139a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80139a8:	4641      	mov	r1, r8
 80139aa:	4638      	mov	r0, r7
 80139ac:	47c8      	blx	r9
 80139ae:	3001      	adds	r0, #1
 80139b0:	d01e      	beq.n	80139f0 <_printf_common+0xa4>
 80139b2:	6823      	ldr	r3, [r4, #0]
 80139b4:	6922      	ldr	r2, [r4, #16]
 80139b6:	f003 0306 	and.w	r3, r3, #6
 80139ba:	2b04      	cmp	r3, #4
 80139bc:	bf02      	ittt	eq
 80139be:	68e5      	ldreq	r5, [r4, #12]
 80139c0:	6833      	ldreq	r3, [r6, #0]
 80139c2:	1aed      	subeq	r5, r5, r3
 80139c4:	68a3      	ldr	r3, [r4, #8]
 80139c6:	bf0c      	ite	eq
 80139c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80139cc:	2500      	movne	r5, #0
 80139ce:	4293      	cmp	r3, r2
 80139d0:	bfc4      	itt	gt
 80139d2:	1a9b      	subgt	r3, r3, r2
 80139d4:	18ed      	addgt	r5, r5, r3
 80139d6:	2600      	movs	r6, #0
 80139d8:	341a      	adds	r4, #26
 80139da:	42b5      	cmp	r5, r6
 80139dc:	d11a      	bne.n	8013a14 <_printf_common+0xc8>
 80139de:	2000      	movs	r0, #0
 80139e0:	e008      	b.n	80139f4 <_printf_common+0xa8>
 80139e2:	2301      	movs	r3, #1
 80139e4:	4652      	mov	r2, sl
 80139e6:	4641      	mov	r1, r8
 80139e8:	4638      	mov	r0, r7
 80139ea:	47c8      	blx	r9
 80139ec:	3001      	adds	r0, #1
 80139ee:	d103      	bne.n	80139f8 <_printf_common+0xac>
 80139f0:	f04f 30ff 	mov.w	r0, #4294967295
 80139f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139f8:	3501      	adds	r5, #1
 80139fa:	e7c6      	b.n	801398a <_printf_common+0x3e>
 80139fc:	18e1      	adds	r1, r4, r3
 80139fe:	1c5a      	adds	r2, r3, #1
 8013a00:	2030      	movs	r0, #48	@ 0x30
 8013a02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013a06:	4422      	add	r2, r4
 8013a08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013a0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013a10:	3302      	adds	r3, #2
 8013a12:	e7c7      	b.n	80139a4 <_printf_common+0x58>
 8013a14:	2301      	movs	r3, #1
 8013a16:	4622      	mov	r2, r4
 8013a18:	4641      	mov	r1, r8
 8013a1a:	4638      	mov	r0, r7
 8013a1c:	47c8      	blx	r9
 8013a1e:	3001      	adds	r0, #1
 8013a20:	d0e6      	beq.n	80139f0 <_printf_common+0xa4>
 8013a22:	3601      	adds	r6, #1
 8013a24:	e7d9      	b.n	80139da <_printf_common+0x8e>
	...

08013a28 <_printf_i>:
 8013a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a2c:	7e0f      	ldrb	r7, [r1, #24]
 8013a2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013a30:	2f78      	cmp	r7, #120	@ 0x78
 8013a32:	4691      	mov	r9, r2
 8013a34:	4680      	mov	r8, r0
 8013a36:	460c      	mov	r4, r1
 8013a38:	469a      	mov	sl, r3
 8013a3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013a3e:	d807      	bhi.n	8013a50 <_printf_i+0x28>
 8013a40:	2f62      	cmp	r7, #98	@ 0x62
 8013a42:	d80a      	bhi.n	8013a5a <_printf_i+0x32>
 8013a44:	2f00      	cmp	r7, #0
 8013a46:	f000 80d1 	beq.w	8013bec <_printf_i+0x1c4>
 8013a4a:	2f58      	cmp	r7, #88	@ 0x58
 8013a4c:	f000 80b8 	beq.w	8013bc0 <_printf_i+0x198>
 8013a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013a54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013a58:	e03a      	b.n	8013ad0 <_printf_i+0xa8>
 8013a5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013a5e:	2b15      	cmp	r3, #21
 8013a60:	d8f6      	bhi.n	8013a50 <_printf_i+0x28>
 8013a62:	a101      	add	r1, pc, #4	@ (adr r1, 8013a68 <_printf_i+0x40>)
 8013a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013a68:	08013ac1 	.word	0x08013ac1
 8013a6c:	08013ad5 	.word	0x08013ad5
 8013a70:	08013a51 	.word	0x08013a51
 8013a74:	08013a51 	.word	0x08013a51
 8013a78:	08013a51 	.word	0x08013a51
 8013a7c:	08013a51 	.word	0x08013a51
 8013a80:	08013ad5 	.word	0x08013ad5
 8013a84:	08013a51 	.word	0x08013a51
 8013a88:	08013a51 	.word	0x08013a51
 8013a8c:	08013a51 	.word	0x08013a51
 8013a90:	08013a51 	.word	0x08013a51
 8013a94:	08013bd3 	.word	0x08013bd3
 8013a98:	08013aff 	.word	0x08013aff
 8013a9c:	08013b8d 	.word	0x08013b8d
 8013aa0:	08013a51 	.word	0x08013a51
 8013aa4:	08013a51 	.word	0x08013a51
 8013aa8:	08013bf5 	.word	0x08013bf5
 8013aac:	08013a51 	.word	0x08013a51
 8013ab0:	08013aff 	.word	0x08013aff
 8013ab4:	08013a51 	.word	0x08013a51
 8013ab8:	08013a51 	.word	0x08013a51
 8013abc:	08013b95 	.word	0x08013b95
 8013ac0:	6833      	ldr	r3, [r6, #0]
 8013ac2:	1d1a      	adds	r2, r3, #4
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	6032      	str	r2, [r6, #0]
 8013ac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013acc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013ad0:	2301      	movs	r3, #1
 8013ad2:	e09c      	b.n	8013c0e <_printf_i+0x1e6>
 8013ad4:	6833      	ldr	r3, [r6, #0]
 8013ad6:	6820      	ldr	r0, [r4, #0]
 8013ad8:	1d19      	adds	r1, r3, #4
 8013ada:	6031      	str	r1, [r6, #0]
 8013adc:	0606      	lsls	r6, r0, #24
 8013ade:	d501      	bpl.n	8013ae4 <_printf_i+0xbc>
 8013ae0:	681d      	ldr	r5, [r3, #0]
 8013ae2:	e003      	b.n	8013aec <_printf_i+0xc4>
 8013ae4:	0645      	lsls	r5, r0, #25
 8013ae6:	d5fb      	bpl.n	8013ae0 <_printf_i+0xb8>
 8013ae8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013aec:	2d00      	cmp	r5, #0
 8013aee:	da03      	bge.n	8013af8 <_printf_i+0xd0>
 8013af0:	232d      	movs	r3, #45	@ 0x2d
 8013af2:	426d      	negs	r5, r5
 8013af4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013af8:	4858      	ldr	r0, [pc, #352]	@ (8013c5c <_printf_i+0x234>)
 8013afa:	230a      	movs	r3, #10
 8013afc:	e011      	b.n	8013b22 <_printf_i+0xfa>
 8013afe:	6821      	ldr	r1, [r4, #0]
 8013b00:	6833      	ldr	r3, [r6, #0]
 8013b02:	0608      	lsls	r0, r1, #24
 8013b04:	f853 5b04 	ldr.w	r5, [r3], #4
 8013b08:	d402      	bmi.n	8013b10 <_printf_i+0xe8>
 8013b0a:	0649      	lsls	r1, r1, #25
 8013b0c:	bf48      	it	mi
 8013b0e:	b2ad      	uxthmi	r5, r5
 8013b10:	2f6f      	cmp	r7, #111	@ 0x6f
 8013b12:	4852      	ldr	r0, [pc, #328]	@ (8013c5c <_printf_i+0x234>)
 8013b14:	6033      	str	r3, [r6, #0]
 8013b16:	bf14      	ite	ne
 8013b18:	230a      	movne	r3, #10
 8013b1a:	2308      	moveq	r3, #8
 8013b1c:	2100      	movs	r1, #0
 8013b1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013b22:	6866      	ldr	r6, [r4, #4]
 8013b24:	60a6      	str	r6, [r4, #8]
 8013b26:	2e00      	cmp	r6, #0
 8013b28:	db05      	blt.n	8013b36 <_printf_i+0x10e>
 8013b2a:	6821      	ldr	r1, [r4, #0]
 8013b2c:	432e      	orrs	r6, r5
 8013b2e:	f021 0104 	bic.w	r1, r1, #4
 8013b32:	6021      	str	r1, [r4, #0]
 8013b34:	d04b      	beq.n	8013bce <_printf_i+0x1a6>
 8013b36:	4616      	mov	r6, r2
 8013b38:	fbb5 f1f3 	udiv	r1, r5, r3
 8013b3c:	fb03 5711 	mls	r7, r3, r1, r5
 8013b40:	5dc7      	ldrb	r7, [r0, r7]
 8013b42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013b46:	462f      	mov	r7, r5
 8013b48:	42bb      	cmp	r3, r7
 8013b4a:	460d      	mov	r5, r1
 8013b4c:	d9f4      	bls.n	8013b38 <_printf_i+0x110>
 8013b4e:	2b08      	cmp	r3, #8
 8013b50:	d10b      	bne.n	8013b6a <_printf_i+0x142>
 8013b52:	6823      	ldr	r3, [r4, #0]
 8013b54:	07df      	lsls	r7, r3, #31
 8013b56:	d508      	bpl.n	8013b6a <_printf_i+0x142>
 8013b58:	6923      	ldr	r3, [r4, #16]
 8013b5a:	6861      	ldr	r1, [r4, #4]
 8013b5c:	4299      	cmp	r1, r3
 8013b5e:	bfde      	ittt	le
 8013b60:	2330      	movle	r3, #48	@ 0x30
 8013b62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013b66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013b6a:	1b92      	subs	r2, r2, r6
 8013b6c:	6122      	str	r2, [r4, #16]
 8013b6e:	f8cd a000 	str.w	sl, [sp]
 8013b72:	464b      	mov	r3, r9
 8013b74:	aa03      	add	r2, sp, #12
 8013b76:	4621      	mov	r1, r4
 8013b78:	4640      	mov	r0, r8
 8013b7a:	f7ff fee7 	bl	801394c <_printf_common>
 8013b7e:	3001      	adds	r0, #1
 8013b80:	d14a      	bne.n	8013c18 <_printf_i+0x1f0>
 8013b82:	f04f 30ff 	mov.w	r0, #4294967295
 8013b86:	b004      	add	sp, #16
 8013b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b8c:	6823      	ldr	r3, [r4, #0]
 8013b8e:	f043 0320 	orr.w	r3, r3, #32
 8013b92:	6023      	str	r3, [r4, #0]
 8013b94:	4832      	ldr	r0, [pc, #200]	@ (8013c60 <_printf_i+0x238>)
 8013b96:	2778      	movs	r7, #120	@ 0x78
 8013b98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013b9c:	6823      	ldr	r3, [r4, #0]
 8013b9e:	6831      	ldr	r1, [r6, #0]
 8013ba0:	061f      	lsls	r7, r3, #24
 8013ba2:	f851 5b04 	ldr.w	r5, [r1], #4
 8013ba6:	d402      	bmi.n	8013bae <_printf_i+0x186>
 8013ba8:	065f      	lsls	r7, r3, #25
 8013baa:	bf48      	it	mi
 8013bac:	b2ad      	uxthmi	r5, r5
 8013bae:	6031      	str	r1, [r6, #0]
 8013bb0:	07d9      	lsls	r1, r3, #31
 8013bb2:	bf44      	itt	mi
 8013bb4:	f043 0320 	orrmi.w	r3, r3, #32
 8013bb8:	6023      	strmi	r3, [r4, #0]
 8013bba:	b11d      	cbz	r5, 8013bc4 <_printf_i+0x19c>
 8013bbc:	2310      	movs	r3, #16
 8013bbe:	e7ad      	b.n	8013b1c <_printf_i+0xf4>
 8013bc0:	4826      	ldr	r0, [pc, #152]	@ (8013c5c <_printf_i+0x234>)
 8013bc2:	e7e9      	b.n	8013b98 <_printf_i+0x170>
 8013bc4:	6823      	ldr	r3, [r4, #0]
 8013bc6:	f023 0320 	bic.w	r3, r3, #32
 8013bca:	6023      	str	r3, [r4, #0]
 8013bcc:	e7f6      	b.n	8013bbc <_printf_i+0x194>
 8013bce:	4616      	mov	r6, r2
 8013bd0:	e7bd      	b.n	8013b4e <_printf_i+0x126>
 8013bd2:	6833      	ldr	r3, [r6, #0]
 8013bd4:	6825      	ldr	r5, [r4, #0]
 8013bd6:	6961      	ldr	r1, [r4, #20]
 8013bd8:	1d18      	adds	r0, r3, #4
 8013bda:	6030      	str	r0, [r6, #0]
 8013bdc:	062e      	lsls	r6, r5, #24
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	d501      	bpl.n	8013be6 <_printf_i+0x1be>
 8013be2:	6019      	str	r1, [r3, #0]
 8013be4:	e002      	b.n	8013bec <_printf_i+0x1c4>
 8013be6:	0668      	lsls	r0, r5, #25
 8013be8:	d5fb      	bpl.n	8013be2 <_printf_i+0x1ba>
 8013bea:	8019      	strh	r1, [r3, #0]
 8013bec:	2300      	movs	r3, #0
 8013bee:	6123      	str	r3, [r4, #16]
 8013bf0:	4616      	mov	r6, r2
 8013bf2:	e7bc      	b.n	8013b6e <_printf_i+0x146>
 8013bf4:	6833      	ldr	r3, [r6, #0]
 8013bf6:	1d1a      	adds	r2, r3, #4
 8013bf8:	6032      	str	r2, [r6, #0]
 8013bfa:	681e      	ldr	r6, [r3, #0]
 8013bfc:	6862      	ldr	r2, [r4, #4]
 8013bfe:	2100      	movs	r1, #0
 8013c00:	4630      	mov	r0, r6
 8013c02:	f7ec fae5 	bl	80001d0 <memchr>
 8013c06:	b108      	cbz	r0, 8013c0c <_printf_i+0x1e4>
 8013c08:	1b80      	subs	r0, r0, r6
 8013c0a:	6060      	str	r0, [r4, #4]
 8013c0c:	6863      	ldr	r3, [r4, #4]
 8013c0e:	6123      	str	r3, [r4, #16]
 8013c10:	2300      	movs	r3, #0
 8013c12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013c16:	e7aa      	b.n	8013b6e <_printf_i+0x146>
 8013c18:	6923      	ldr	r3, [r4, #16]
 8013c1a:	4632      	mov	r2, r6
 8013c1c:	4649      	mov	r1, r9
 8013c1e:	4640      	mov	r0, r8
 8013c20:	47d0      	blx	sl
 8013c22:	3001      	adds	r0, #1
 8013c24:	d0ad      	beq.n	8013b82 <_printf_i+0x15a>
 8013c26:	6823      	ldr	r3, [r4, #0]
 8013c28:	079b      	lsls	r3, r3, #30
 8013c2a:	d413      	bmi.n	8013c54 <_printf_i+0x22c>
 8013c2c:	68e0      	ldr	r0, [r4, #12]
 8013c2e:	9b03      	ldr	r3, [sp, #12]
 8013c30:	4298      	cmp	r0, r3
 8013c32:	bfb8      	it	lt
 8013c34:	4618      	movlt	r0, r3
 8013c36:	e7a6      	b.n	8013b86 <_printf_i+0x15e>
 8013c38:	2301      	movs	r3, #1
 8013c3a:	4632      	mov	r2, r6
 8013c3c:	4649      	mov	r1, r9
 8013c3e:	4640      	mov	r0, r8
 8013c40:	47d0      	blx	sl
 8013c42:	3001      	adds	r0, #1
 8013c44:	d09d      	beq.n	8013b82 <_printf_i+0x15a>
 8013c46:	3501      	adds	r5, #1
 8013c48:	68e3      	ldr	r3, [r4, #12]
 8013c4a:	9903      	ldr	r1, [sp, #12]
 8013c4c:	1a5b      	subs	r3, r3, r1
 8013c4e:	42ab      	cmp	r3, r5
 8013c50:	dcf2      	bgt.n	8013c38 <_printf_i+0x210>
 8013c52:	e7eb      	b.n	8013c2c <_printf_i+0x204>
 8013c54:	2500      	movs	r5, #0
 8013c56:	f104 0619 	add.w	r6, r4, #25
 8013c5a:	e7f5      	b.n	8013c48 <_printf_i+0x220>
 8013c5c:	080160fe 	.word	0x080160fe
 8013c60:	0801610f 	.word	0x0801610f

08013c64 <std>:
 8013c64:	2300      	movs	r3, #0
 8013c66:	b510      	push	{r4, lr}
 8013c68:	4604      	mov	r4, r0
 8013c6a:	e9c0 3300 	strd	r3, r3, [r0]
 8013c6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013c72:	6083      	str	r3, [r0, #8]
 8013c74:	8181      	strh	r1, [r0, #12]
 8013c76:	6643      	str	r3, [r0, #100]	@ 0x64
 8013c78:	81c2      	strh	r2, [r0, #14]
 8013c7a:	6183      	str	r3, [r0, #24]
 8013c7c:	4619      	mov	r1, r3
 8013c7e:	2208      	movs	r2, #8
 8013c80:	305c      	adds	r0, #92	@ 0x5c
 8013c82:	f000 f8f4 	bl	8013e6e <memset>
 8013c86:	4b0d      	ldr	r3, [pc, #52]	@ (8013cbc <std+0x58>)
 8013c88:	6263      	str	r3, [r4, #36]	@ 0x24
 8013c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8013cc0 <std+0x5c>)
 8013c8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8013cc4 <std+0x60>)
 8013c90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013c92:	4b0d      	ldr	r3, [pc, #52]	@ (8013cc8 <std+0x64>)
 8013c94:	6323      	str	r3, [r4, #48]	@ 0x30
 8013c96:	4b0d      	ldr	r3, [pc, #52]	@ (8013ccc <std+0x68>)
 8013c98:	6224      	str	r4, [r4, #32]
 8013c9a:	429c      	cmp	r4, r3
 8013c9c:	d006      	beq.n	8013cac <std+0x48>
 8013c9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013ca2:	4294      	cmp	r4, r2
 8013ca4:	d002      	beq.n	8013cac <std+0x48>
 8013ca6:	33d0      	adds	r3, #208	@ 0xd0
 8013ca8:	429c      	cmp	r4, r3
 8013caa:	d105      	bne.n	8013cb8 <std+0x54>
 8013cac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cb4:	f000 b990 	b.w	8013fd8 <__retarget_lock_init_recursive>
 8013cb8:	bd10      	pop	{r4, pc}
 8013cba:	bf00      	nop
 8013cbc:	08013de9 	.word	0x08013de9
 8013cc0:	08013e0b 	.word	0x08013e0b
 8013cc4:	08013e43 	.word	0x08013e43
 8013cc8:	08013e67 	.word	0x08013e67
 8013ccc:	200045b0 	.word	0x200045b0

08013cd0 <stdio_exit_handler>:
 8013cd0:	4a02      	ldr	r2, [pc, #8]	@ (8013cdc <stdio_exit_handler+0xc>)
 8013cd2:	4903      	ldr	r1, [pc, #12]	@ (8013ce0 <stdio_exit_handler+0x10>)
 8013cd4:	4803      	ldr	r0, [pc, #12]	@ (8013ce4 <stdio_exit_handler+0x14>)
 8013cd6:	f000 b869 	b.w	8013dac <_fwalk_sglue>
 8013cda:	bf00      	nop
 8013cdc:	20000068 	.word	0x20000068
 8013ce0:	08015541 	.word	0x08015541
 8013ce4:	20000078 	.word	0x20000078

08013ce8 <cleanup_stdio>:
 8013ce8:	6841      	ldr	r1, [r0, #4]
 8013cea:	4b0c      	ldr	r3, [pc, #48]	@ (8013d1c <cleanup_stdio+0x34>)
 8013cec:	4299      	cmp	r1, r3
 8013cee:	b510      	push	{r4, lr}
 8013cf0:	4604      	mov	r4, r0
 8013cf2:	d001      	beq.n	8013cf8 <cleanup_stdio+0x10>
 8013cf4:	f001 fc24 	bl	8015540 <_fflush_r>
 8013cf8:	68a1      	ldr	r1, [r4, #8]
 8013cfa:	4b09      	ldr	r3, [pc, #36]	@ (8013d20 <cleanup_stdio+0x38>)
 8013cfc:	4299      	cmp	r1, r3
 8013cfe:	d002      	beq.n	8013d06 <cleanup_stdio+0x1e>
 8013d00:	4620      	mov	r0, r4
 8013d02:	f001 fc1d 	bl	8015540 <_fflush_r>
 8013d06:	68e1      	ldr	r1, [r4, #12]
 8013d08:	4b06      	ldr	r3, [pc, #24]	@ (8013d24 <cleanup_stdio+0x3c>)
 8013d0a:	4299      	cmp	r1, r3
 8013d0c:	d004      	beq.n	8013d18 <cleanup_stdio+0x30>
 8013d0e:	4620      	mov	r0, r4
 8013d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d14:	f001 bc14 	b.w	8015540 <_fflush_r>
 8013d18:	bd10      	pop	{r4, pc}
 8013d1a:	bf00      	nop
 8013d1c:	200045b0 	.word	0x200045b0
 8013d20:	20004618 	.word	0x20004618
 8013d24:	20004680 	.word	0x20004680

08013d28 <global_stdio_init.part.0>:
 8013d28:	b510      	push	{r4, lr}
 8013d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8013d58 <global_stdio_init.part.0+0x30>)
 8013d2c:	4c0b      	ldr	r4, [pc, #44]	@ (8013d5c <global_stdio_init.part.0+0x34>)
 8013d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8013d60 <global_stdio_init.part.0+0x38>)
 8013d30:	601a      	str	r2, [r3, #0]
 8013d32:	4620      	mov	r0, r4
 8013d34:	2200      	movs	r2, #0
 8013d36:	2104      	movs	r1, #4
 8013d38:	f7ff ff94 	bl	8013c64 <std>
 8013d3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013d40:	2201      	movs	r2, #1
 8013d42:	2109      	movs	r1, #9
 8013d44:	f7ff ff8e 	bl	8013c64 <std>
 8013d48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013d4c:	2202      	movs	r2, #2
 8013d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d52:	2112      	movs	r1, #18
 8013d54:	f7ff bf86 	b.w	8013c64 <std>
 8013d58:	200046e8 	.word	0x200046e8
 8013d5c:	200045b0 	.word	0x200045b0
 8013d60:	08013cd1 	.word	0x08013cd1

08013d64 <__sfp_lock_acquire>:
 8013d64:	4801      	ldr	r0, [pc, #4]	@ (8013d6c <__sfp_lock_acquire+0x8>)
 8013d66:	f000 b938 	b.w	8013fda <__retarget_lock_acquire_recursive>
 8013d6a:	bf00      	nop
 8013d6c:	200046f1 	.word	0x200046f1

08013d70 <__sfp_lock_release>:
 8013d70:	4801      	ldr	r0, [pc, #4]	@ (8013d78 <__sfp_lock_release+0x8>)
 8013d72:	f000 b933 	b.w	8013fdc <__retarget_lock_release_recursive>
 8013d76:	bf00      	nop
 8013d78:	200046f1 	.word	0x200046f1

08013d7c <__sinit>:
 8013d7c:	b510      	push	{r4, lr}
 8013d7e:	4604      	mov	r4, r0
 8013d80:	f7ff fff0 	bl	8013d64 <__sfp_lock_acquire>
 8013d84:	6a23      	ldr	r3, [r4, #32]
 8013d86:	b11b      	cbz	r3, 8013d90 <__sinit+0x14>
 8013d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d8c:	f7ff bff0 	b.w	8013d70 <__sfp_lock_release>
 8013d90:	4b04      	ldr	r3, [pc, #16]	@ (8013da4 <__sinit+0x28>)
 8013d92:	6223      	str	r3, [r4, #32]
 8013d94:	4b04      	ldr	r3, [pc, #16]	@ (8013da8 <__sinit+0x2c>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d1f5      	bne.n	8013d88 <__sinit+0xc>
 8013d9c:	f7ff ffc4 	bl	8013d28 <global_stdio_init.part.0>
 8013da0:	e7f2      	b.n	8013d88 <__sinit+0xc>
 8013da2:	bf00      	nop
 8013da4:	08013ce9 	.word	0x08013ce9
 8013da8:	200046e8 	.word	0x200046e8

08013dac <_fwalk_sglue>:
 8013dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013db0:	4607      	mov	r7, r0
 8013db2:	4688      	mov	r8, r1
 8013db4:	4614      	mov	r4, r2
 8013db6:	2600      	movs	r6, #0
 8013db8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013dbc:	f1b9 0901 	subs.w	r9, r9, #1
 8013dc0:	d505      	bpl.n	8013dce <_fwalk_sglue+0x22>
 8013dc2:	6824      	ldr	r4, [r4, #0]
 8013dc4:	2c00      	cmp	r4, #0
 8013dc6:	d1f7      	bne.n	8013db8 <_fwalk_sglue+0xc>
 8013dc8:	4630      	mov	r0, r6
 8013dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dce:	89ab      	ldrh	r3, [r5, #12]
 8013dd0:	2b01      	cmp	r3, #1
 8013dd2:	d907      	bls.n	8013de4 <_fwalk_sglue+0x38>
 8013dd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013dd8:	3301      	adds	r3, #1
 8013dda:	d003      	beq.n	8013de4 <_fwalk_sglue+0x38>
 8013ddc:	4629      	mov	r1, r5
 8013dde:	4638      	mov	r0, r7
 8013de0:	47c0      	blx	r8
 8013de2:	4306      	orrs	r6, r0
 8013de4:	3568      	adds	r5, #104	@ 0x68
 8013de6:	e7e9      	b.n	8013dbc <_fwalk_sglue+0x10>

08013de8 <__sread>:
 8013de8:	b510      	push	{r4, lr}
 8013dea:	460c      	mov	r4, r1
 8013dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013df0:	f000 f894 	bl	8013f1c <_read_r>
 8013df4:	2800      	cmp	r0, #0
 8013df6:	bfab      	itete	ge
 8013df8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8013dfc:	181b      	addge	r3, r3, r0
 8013dfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013e02:	bfac      	ite	ge
 8013e04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013e06:	81a3      	strhlt	r3, [r4, #12]
 8013e08:	bd10      	pop	{r4, pc}

08013e0a <__swrite>:
 8013e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e0e:	461f      	mov	r7, r3
 8013e10:	898b      	ldrh	r3, [r1, #12]
 8013e12:	05db      	lsls	r3, r3, #23
 8013e14:	4605      	mov	r5, r0
 8013e16:	460c      	mov	r4, r1
 8013e18:	4616      	mov	r6, r2
 8013e1a:	d505      	bpl.n	8013e28 <__swrite+0x1e>
 8013e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e20:	2302      	movs	r3, #2
 8013e22:	2200      	movs	r2, #0
 8013e24:	f000 f868 	bl	8013ef8 <_lseek_r>
 8013e28:	89a3      	ldrh	r3, [r4, #12]
 8013e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013e32:	81a3      	strh	r3, [r4, #12]
 8013e34:	4632      	mov	r2, r6
 8013e36:	463b      	mov	r3, r7
 8013e38:	4628      	mov	r0, r5
 8013e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e3e:	f000 b88f 	b.w	8013f60 <_write_r>

08013e42 <__sseek>:
 8013e42:	b510      	push	{r4, lr}
 8013e44:	460c      	mov	r4, r1
 8013e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e4a:	f000 f855 	bl	8013ef8 <_lseek_r>
 8013e4e:	1c43      	adds	r3, r0, #1
 8013e50:	89a3      	ldrh	r3, [r4, #12]
 8013e52:	bf15      	itete	ne
 8013e54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013e56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013e5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013e5e:	81a3      	strheq	r3, [r4, #12]
 8013e60:	bf18      	it	ne
 8013e62:	81a3      	strhne	r3, [r4, #12]
 8013e64:	bd10      	pop	{r4, pc}

08013e66 <__sclose>:
 8013e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e6a:	f000 b835 	b.w	8013ed8 <_close_r>

08013e6e <memset>:
 8013e6e:	4402      	add	r2, r0
 8013e70:	4603      	mov	r3, r0
 8013e72:	4293      	cmp	r3, r2
 8013e74:	d100      	bne.n	8013e78 <memset+0xa>
 8013e76:	4770      	bx	lr
 8013e78:	f803 1b01 	strb.w	r1, [r3], #1
 8013e7c:	e7f9      	b.n	8013e72 <memset+0x4>

08013e7e <strncpy>:
 8013e7e:	b510      	push	{r4, lr}
 8013e80:	3901      	subs	r1, #1
 8013e82:	4603      	mov	r3, r0
 8013e84:	b132      	cbz	r2, 8013e94 <strncpy+0x16>
 8013e86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013e8a:	f803 4b01 	strb.w	r4, [r3], #1
 8013e8e:	3a01      	subs	r2, #1
 8013e90:	2c00      	cmp	r4, #0
 8013e92:	d1f7      	bne.n	8013e84 <strncpy+0x6>
 8013e94:	441a      	add	r2, r3
 8013e96:	2100      	movs	r1, #0
 8013e98:	4293      	cmp	r3, r2
 8013e9a:	d100      	bne.n	8013e9e <strncpy+0x20>
 8013e9c:	bd10      	pop	{r4, pc}
 8013e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8013ea2:	e7f9      	b.n	8013e98 <strncpy+0x1a>

08013ea4 <strstr>:
 8013ea4:	780a      	ldrb	r2, [r1, #0]
 8013ea6:	b570      	push	{r4, r5, r6, lr}
 8013ea8:	b96a      	cbnz	r2, 8013ec6 <strstr+0x22>
 8013eaa:	bd70      	pop	{r4, r5, r6, pc}
 8013eac:	429a      	cmp	r2, r3
 8013eae:	d109      	bne.n	8013ec4 <strstr+0x20>
 8013eb0:	460c      	mov	r4, r1
 8013eb2:	4605      	mov	r5, r0
 8013eb4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d0f6      	beq.n	8013eaa <strstr+0x6>
 8013ebc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013ec0:	429e      	cmp	r6, r3
 8013ec2:	d0f7      	beq.n	8013eb4 <strstr+0x10>
 8013ec4:	3001      	adds	r0, #1
 8013ec6:	7803      	ldrb	r3, [r0, #0]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d1ef      	bne.n	8013eac <strstr+0x8>
 8013ecc:	4618      	mov	r0, r3
 8013ece:	e7ec      	b.n	8013eaa <strstr+0x6>

08013ed0 <_localeconv_r>:
 8013ed0:	4800      	ldr	r0, [pc, #0]	@ (8013ed4 <_localeconv_r+0x4>)
 8013ed2:	4770      	bx	lr
 8013ed4:	200001b4 	.word	0x200001b4

08013ed8 <_close_r>:
 8013ed8:	b538      	push	{r3, r4, r5, lr}
 8013eda:	4d06      	ldr	r5, [pc, #24]	@ (8013ef4 <_close_r+0x1c>)
 8013edc:	2300      	movs	r3, #0
 8013ede:	4604      	mov	r4, r0
 8013ee0:	4608      	mov	r0, r1
 8013ee2:	602b      	str	r3, [r5, #0]
 8013ee4:	f7ee fbca 	bl	800267c <_close>
 8013ee8:	1c43      	adds	r3, r0, #1
 8013eea:	d102      	bne.n	8013ef2 <_close_r+0x1a>
 8013eec:	682b      	ldr	r3, [r5, #0]
 8013eee:	b103      	cbz	r3, 8013ef2 <_close_r+0x1a>
 8013ef0:	6023      	str	r3, [r4, #0]
 8013ef2:	bd38      	pop	{r3, r4, r5, pc}
 8013ef4:	200046ec 	.word	0x200046ec

08013ef8 <_lseek_r>:
 8013ef8:	b538      	push	{r3, r4, r5, lr}
 8013efa:	4d07      	ldr	r5, [pc, #28]	@ (8013f18 <_lseek_r+0x20>)
 8013efc:	4604      	mov	r4, r0
 8013efe:	4608      	mov	r0, r1
 8013f00:	4611      	mov	r1, r2
 8013f02:	2200      	movs	r2, #0
 8013f04:	602a      	str	r2, [r5, #0]
 8013f06:	461a      	mov	r2, r3
 8013f08:	f7ee fbdf 	bl	80026ca <_lseek>
 8013f0c:	1c43      	adds	r3, r0, #1
 8013f0e:	d102      	bne.n	8013f16 <_lseek_r+0x1e>
 8013f10:	682b      	ldr	r3, [r5, #0]
 8013f12:	b103      	cbz	r3, 8013f16 <_lseek_r+0x1e>
 8013f14:	6023      	str	r3, [r4, #0]
 8013f16:	bd38      	pop	{r3, r4, r5, pc}
 8013f18:	200046ec 	.word	0x200046ec

08013f1c <_read_r>:
 8013f1c:	b538      	push	{r3, r4, r5, lr}
 8013f1e:	4d07      	ldr	r5, [pc, #28]	@ (8013f3c <_read_r+0x20>)
 8013f20:	4604      	mov	r4, r0
 8013f22:	4608      	mov	r0, r1
 8013f24:	4611      	mov	r1, r2
 8013f26:	2200      	movs	r2, #0
 8013f28:	602a      	str	r2, [r5, #0]
 8013f2a:	461a      	mov	r2, r3
 8013f2c:	f7ee fb6d 	bl	800260a <_read>
 8013f30:	1c43      	adds	r3, r0, #1
 8013f32:	d102      	bne.n	8013f3a <_read_r+0x1e>
 8013f34:	682b      	ldr	r3, [r5, #0]
 8013f36:	b103      	cbz	r3, 8013f3a <_read_r+0x1e>
 8013f38:	6023      	str	r3, [r4, #0]
 8013f3a:	bd38      	pop	{r3, r4, r5, pc}
 8013f3c:	200046ec 	.word	0x200046ec

08013f40 <_sbrk_r>:
 8013f40:	b538      	push	{r3, r4, r5, lr}
 8013f42:	4d06      	ldr	r5, [pc, #24]	@ (8013f5c <_sbrk_r+0x1c>)
 8013f44:	2300      	movs	r3, #0
 8013f46:	4604      	mov	r4, r0
 8013f48:	4608      	mov	r0, r1
 8013f4a:	602b      	str	r3, [r5, #0]
 8013f4c:	f7ee fbca 	bl	80026e4 <_sbrk>
 8013f50:	1c43      	adds	r3, r0, #1
 8013f52:	d102      	bne.n	8013f5a <_sbrk_r+0x1a>
 8013f54:	682b      	ldr	r3, [r5, #0]
 8013f56:	b103      	cbz	r3, 8013f5a <_sbrk_r+0x1a>
 8013f58:	6023      	str	r3, [r4, #0]
 8013f5a:	bd38      	pop	{r3, r4, r5, pc}
 8013f5c:	200046ec 	.word	0x200046ec

08013f60 <_write_r>:
 8013f60:	b538      	push	{r3, r4, r5, lr}
 8013f62:	4d07      	ldr	r5, [pc, #28]	@ (8013f80 <_write_r+0x20>)
 8013f64:	4604      	mov	r4, r0
 8013f66:	4608      	mov	r0, r1
 8013f68:	4611      	mov	r1, r2
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	602a      	str	r2, [r5, #0]
 8013f6e:	461a      	mov	r2, r3
 8013f70:	f7ee fb68 	bl	8002644 <_write>
 8013f74:	1c43      	adds	r3, r0, #1
 8013f76:	d102      	bne.n	8013f7e <_write_r+0x1e>
 8013f78:	682b      	ldr	r3, [r5, #0]
 8013f7a:	b103      	cbz	r3, 8013f7e <_write_r+0x1e>
 8013f7c:	6023      	str	r3, [r4, #0]
 8013f7e:	bd38      	pop	{r3, r4, r5, pc}
 8013f80:	200046ec 	.word	0x200046ec

08013f84 <__errno>:
 8013f84:	4b01      	ldr	r3, [pc, #4]	@ (8013f8c <__errno+0x8>)
 8013f86:	6818      	ldr	r0, [r3, #0]
 8013f88:	4770      	bx	lr
 8013f8a:	bf00      	nop
 8013f8c:	20000074 	.word	0x20000074

08013f90 <__libc_init_array>:
 8013f90:	b570      	push	{r4, r5, r6, lr}
 8013f92:	4d0d      	ldr	r5, [pc, #52]	@ (8013fc8 <__libc_init_array+0x38>)
 8013f94:	4c0d      	ldr	r4, [pc, #52]	@ (8013fcc <__libc_init_array+0x3c>)
 8013f96:	1b64      	subs	r4, r4, r5
 8013f98:	10a4      	asrs	r4, r4, #2
 8013f9a:	2600      	movs	r6, #0
 8013f9c:	42a6      	cmp	r6, r4
 8013f9e:	d109      	bne.n	8013fb4 <__libc_init_array+0x24>
 8013fa0:	4d0b      	ldr	r5, [pc, #44]	@ (8013fd0 <__libc_init_array+0x40>)
 8013fa2:	4c0c      	ldr	r4, [pc, #48]	@ (8013fd4 <__libc_init_array+0x44>)
 8013fa4:	f001 fdfc 	bl	8015ba0 <_init>
 8013fa8:	1b64      	subs	r4, r4, r5
 8013faa:	10a4      	asrs	r4, r4, #2
 8013fac:	2600      	movs	r6, #0
 8013fae:	42a6      	cmp	r6, r4
 8013fb0:	d105      	bne.n	8013fbe <__libc_init_array+0x2e>
 8013fb2:	bd70      	pop	{r4, r5, r6, pc}
 8013fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8013fb8:	4798      	blx	r3
 8013fba:	3601      	adds	r6, #1
 8013fbc:	e7ee      	b.n	8013f9c <__libc_init_array+0xc>
 8013fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8013fc2:	4798      	blx	r3
 8013fc4:	3601      	adds	r6, #1
 8013fc6:	e7f2      	b.n	8013fae <__libc_init_array+0x1e>
 8013fc8:	0801646c 	.word	0x0801646c
 8013fcc:	0801646c 	.word	0x0801646c
 8013fd0:	0801646c 	.word	0x0801646c
 8013fd4:	08016470 	.word	0x08016470

08013fd8 <__retarget_lock_init_recursive>:
 8013fd8:	4770      	bx	lr

08013fda <__retarget_lock_acquire_recursive>:
 8013fda:	4770      	bx	lr

08013fdc <__retarget_lock_release_recursive>:
 8013fdc:	4770      	bx	lr

08013fde <memcpy>:
 8013fde:	440a      	add	r2, r1
 8013fe0:	4291      	cmp	r1, r2
 8013fe2:	f100 33ff 	add.w	r3, r0, #4294967295
 8013fe6:	d100      	bne.n	8013fea <memcpy+0xc>
 8013fe8:	4770      	bx	lr
 8013fea:	b510      	push	{r4, lr}
 8013fec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013ff4:	4291      	cmp	r1, r2
 8013ff6:	d1f9      	bne.n	8013fec <memcpy+0xe>
 8013ff8:	bd10      	pop	{r4, pc}

08013ffa <quorem>:
 8013ffa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ffe:	6903      	ldr	r3, [r0, #16]
 8014000:	690c      	ldr	r4, [r1, #16]
 8014002:	42a3      	cmp	r3, r4
 8014004:	4607      	mov	r7, r0
 8014006:	db7e      	blt.n	8014106 <quorem+0x10c>
 8014008:	3c01      	subs	r4, #1
 801400a:	f101 0814 	add.w	r8, r1, #20
 801400e:	00a3      	lsls	r3, r4, #2
 8014010:	f100 0514 	add.w	r5, r0, #20
 8014014:	9300      	str	r3, [sp, #0]
 8014016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801401a:	9301      	str	r3, [sp, #4]
 801401c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014020:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014024:	3301      	adds	r3, #1
 8014026:	429a      	cmp	r2, r3
 8014028:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801402c:	fbb2 f6f3 	udiv	r6, r2, r3
 8014030:	d32e      	bcc.n	8014090 <quorem+0x96>
 8014032:	f04f 0a00 	mov.w	sl, #0
 8014036:	46c4      	mov	ip, r8
 8014038:	46ae      	mov	lr, r5
 801403a:	46d3      	mov	fp, sl
 801403c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014040:	b298      	uxth	r0, r3
 8014042:	fb06 a000 	mla	r0, r6, r0, sl
 8014046:	0c02      	lsrs	r2, r0, #16
 8014048:	0c1b      	lsrs	r3, r3, #16
 801404a:	fb06 2303 	mla	r3, r6, r3, r2
 801404e:	f8de 2000 	ldr.w	r2, [lr]
 8014052:	b280      	uxth	r0, r0
 8014054:	b292      	uxth	r2, r2
 8014056:	1a12      	subs	r2, r2, r0
 8014058:	445a      	add	r2, fp
 801405a:	f8de 0000 	ldr.w	r0, [lr]
 801405e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014062:	b29b      	uxth	r3, r3
 8014064:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014068:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801406c:	b292      	uxth	r2, r2
 801406e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014072:	45e1      	cmp	r9, ip
 8014074:	f84e 2b04 	str.w	r2, [lr], #4
 8014078:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801407c:	d2de      	bcs.n	801403c <quorem+0x42>
 801407e:	9b00      	ldr	r3, [sp, #0]
 8014080:	58eb      	ldr	r3, [r5, r3]
 8014082:	b92b      	cbnz	r3, 8014090 <quorem+0x96>
 8014084:	9b01      	ldr	r3, [sp, #4]
 8014086:	3b04      	subs	r3, #4
 8014088:	429d      	cmp	r5, r3
 801408a:	461a      	mov	r2, r3
 801408c:	d32f      	bcc.n	80140ee <quorem+0xf4>
 801408e:	613c      	str	r4, [r7, #16]
 8014090:	4638      	mov	r0, r7
 8014092:	f001 f8c9 	bl	8015228 <__mcmp>
 8014096:	2800      	cmp	r0, #0
 8014098:	db25      	blt.n	80140e6 <quorem+0xec>
 801409a:	4629      	mov	r1, r5
 801409c:	2000      	movs	r0, #0
 801409e:	f858 2b04 	ldr.w	r2, [r8], #4
 80140a2:	f8d1 c000 	ldr.w	ip, [r1]
 80140a6:	fa1f fe82 	uxth.w	lr, r2
 80140aa:	fa1f f38c 	uxth.w	r3, ip
 80140ae:	eba3 030e 	sub.w	r3, r3, lr
 80140b2:	4403      	add	r3, r0
 80140b4:	0c12      	lsrs	r2, r2, #16
 80140b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80140ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80140be:	b29b      	uxth	r3, r3
 80140c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80140c4:	45c1      	cmp	r9, r8
 80140c6:	f841 3b04 	str.w	r3, [r1], #4
 80140ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80140ce:	d2e6      	bcs.n	801409e <quorem+0xa4>
 80140d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80140d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80140d8:	b922      	cbnz	r2, 80140e4 <quorem+0xea>
 80140da:	3b04      	subs	r3, #4
 80140dc:	429d      	cmp	r5, r3
 80140de:	461a      	mov	r2, r3
 80140e0:	d30b      	bcc.n	80140fa <quorem+0x100>
 80140e2:	613c      	str	r4, [r7, #16]
 80140e4:	3601      	adds	r6, #1
 80140e6:	4630      	mov	r0, r6
 80140e8:	b003      	add	sp, #12
 80140ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140ee:	6812      	ldr	r2, [r2, #0]
 80140f0:	3b04      	subs	r3, #4
 80140f2:	2a00      	cmp	r2, #0
 80140f4:	d1cb      	bne.n	801408e <quorem+0x94>
 80140f6:	3c01      	subs	r4, #1
 80140f8:	e7c6      	b.n	8014088 <quorem+0x8e>
 80140fa:	6812      	ldr	r2, [r2, #0]
 80140fc:	3b04      	subs	r3, #4
 80140fe:	2a00      	cmp	r2, #0
 8014100:	d1ef      	bne.n	80140e2 <quorem+0xe8>
 8014102:	3c01      	subs	r4, #1
 8014104:	e7ea      	b.n	80140dc <quorem+0xe2>
 8014106:	2000      	movs	r0, #0
 8014108:	e7ee      	b.n	80140e8 <quorem+0xee>
 801410a:	0000      	movs	r0, r0
 801410c:	0000      	movs	r0, r0
	...

08014110 <_dtoa_r>:
 8014110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014114:	69c7      	ldr	r7, [r0, #28]
 8014116:	b097      	sub	sp, #92	@ 0x5c
 8014118:	ed8d 0b04 	vstr	d0, [sp, #16]
 801411c:	ec55 4b10 	vmov	r4, r5, d0
 8014120:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014122:	9107      	str	r1, [sp, #28]
 8014124:	4681      	mov	r9, r0
 8014126:	920c      	str	r2, [sp, #48]	@ 0x30
 8014128:	9311      	str	r3, [sp, #68]	@ 0x44
 801412a:	b97f      	cbnz	r7, 801414c <_dtoa_r+0x3c>
 801412c:	2010      	movs	r0, #16
 801412e:	f7ff f885 	bl	801323c <malloc>
 8014132:	4602      	mov	r2, r0
 8014134:	f8c9 001c 	str.w	r0, [r9, #28]
 8014138:	b920      	cbnz	r0, 8014144 <_dtoa_r+0x34>
 801413a:	4ba9      	ldr	r3, [pc, #676]	@ (80143e0 <_dtoa_r+0x2d0>)
 801413c:	21ef      	movs	r1, #239	@ 0xef
 801413e:	48a9      	ldr	r0, [pc, #676]	@ (80143e4 <_dtoa_r+0x2d4>)
 8014140:	f001 fa26 	bl	8015590 <__assert_func>
 8014144:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014148:	6007      	str	r7, [r0, #0]
 801414a:	60c7      	str	r7, [r0, #12]
 801414c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014150:	6819      	ldr	r1, [r3, #0]
 8014152:	b159      	cbz	r1, 801416c <_dtoa_r+0x5c>
 8014154:	685a      	ldr	r2, [r3, #4]
 8014156:	604a      	str	r2, [r1, #4]
 8014158:	2301      	movs	r3, #1
 801415a:	4093      	lsls	r3, r2
 801415c:	608b      	str	r3, [r1, #8]
 801415e:	4648      	mov	r0, r9
 8014160:	f000 fe30 	bl	8014dc4 <_Bfree>
 8014164:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014168:	2200      	movs	r2, #0
 801416a:	601a      	str	r2, [r3, #0]
 801416c:	1e2b      	subs	r3, r5, #0
 801416e:	bfb9      	ittee	lt
 8014170:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014174:	9305      	strlt	r3, [sp, #20]
 8014176:	2300      	movge	r3, #0
 8014178:	6033      	strge	r3, [r6, #0]
 801417a:	9f05      	ldr	r7, [sp, #20]
 801417c:	4b9a      	ldr	r3, [pc, #616]	@ (80143e8 <_dtoa_r+0x2d8>)
 801417e:	bfbc      	itt	lt
 8014180:	2201      	movlt	r2, #1
 8014182:	6032      	strlt	r2, [r6, #0]
 8014184:	43bb      	bics	r3, r7
 8014186:	d112      	bne.n	80141ae <_dtoa_r+0x9e>
 8014188:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801418a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801418e:	6013      	str	r3, [r2, #0]
 8014190:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014194:	4323      	orrs	r3, r4
 8014196:	f000 855a 	beq.w	8014c4e <_dtoa_r+0xb3e>
 801419a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801419c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80143fc <_dtoa_r+0x2ec>
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	f000 855c 	beq.w	8014c5e <_dtoa_r+0xb4e>
 80141a6:	f10a 0303 	add.w	r3, sl, #3
 80141aa:	f000 bd56 	b.w	8014c5a <_dtoa_r+0xb4a>
 80141ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80141b2:	2200      	movs	r2, #0
 80141b4:	ec51 0b17 	vmov	r0, r1, d7
 80141b8:	2300      	movs	r3, #0
 80141ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80141be:	f7ec fc83 	bl	8000ac8 <__aeabi_dcmpeq>
 80141c2:	4680      	mov	r8, r0
 80141c4:	b158      	cbz	r0, 80141de <_dtoa_r+0xce>
 80141c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80141c8:	2301      	movs	r3, #1
 80141ca:	6013      	str	r3, [r2, #0]
 80141cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80141ce:	b113      	cbz	r3, 80141d6 <_dtoa_r+0xc6>
 80141d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80141d2:	4b86      	ldr	r3, [pc, #536]	@ (80143ec <_dtoa_r+0x2dc>)
 80141d4:	6013      	str	r3, [r2, #0]
 80141d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8014400 <_dtoa_r+0x2f0>
 80141da:	f000 bd40 	b.w	8014c5e <_dtoa_r+0xb4e>
 80141de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80141e2:	aa14      	add	r2, sp, #80	@ 0x50
 80141e4:	a915      	add	r1, sp, #84	@ 0x54
 80141e6:	4648      	mov	r0, r9
 80141e8:	f001 f8ce 	bl	8015388 <__d2b>
 80141ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80141f0:	9002      	str	r0, [sp, #8]
 80141f2:	2e00      	cmp	r6, #0
 80141f4:	d078      	beq.n	80142e8 <_dtoa_r+0x1d8>
 80141f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80141f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80141fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014200:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014204:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014208:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801420c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014210:	4619      	mov	r1, r3
 8014212:	2200      	movs	r2, #0
 8014214:	4b76      	ldr	r3, [pc, #472]	@ (80143f0 <_dtoa_r+0x2e0>)
 8014216:	f7ec f837 	bl	8000288 <__aeabi_dsub>
 801421a:	a36b      	add	r3, pc, #428	@ (adr r3, 80143c8 <_dtoa_r+0x2b8>)
 801421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014220:	f7ec f9ea 	bl	80005f8 <__aeabi_dmul>
 8014224:	a36a      	add	r3, pc, #424	@ (adr r3, 80143d0 <_dtoa_r+0x2c0>)
 8014226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801422a:	f7ec f82f 	bl	800028c <__adddf3>
 801422e:	4604      	mov	r4, r0
 8014230:	4630      	mov	r0, r6
 8014232:	460d      	mov	r5, r1
 8014234:	f7ec f976 	bl	8000524 <__aeabi_i2d>
 8014238:	a367      	add	r3, pc, #412	@ (adr r3, 80143d8 <_dtoa_r+0x2c8>)
 801423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801423e:	f7ec f9db 	bl	80005f8 <__aeabi_dmul>
 8014242:	4602      	mov	r2, r0
 8014244:	460b      	mov	r3, r1
 8014246:	4620      	mov	r0, r4
 8014248:	4629      	mov	r1, r5
 801424a:	f7ec f81f 	bl	800028c <__adddf3>
 801424e:	4604      	mov	r4, r0
 8014250:	460d      	mov	r5, r1
 8014252:	f7ec fc81 	bl	8000b58 <__aeabi_d2iz>
 8014256:	2200      	movs	r2, #0
 8014258:	4607      	mov	r7, r0
 801425a:	2300      	movs	r3, #0
 801425c:	4620      	mov	r0, r4
 801425e:	4629      	mov	r1, r5
 8014260:	f7ec fc3c 	bl	8000adc <__aeabi_dcmplt>
 8014264:	b140      	cbz	r0, 8014278 <_dtoa_r+0x168>
 8014266:	4638      	mov	r0, r7
 8014268:	f7ec f95c 	bl	8000524 <__aeabi_i2d>
 801426c:	4622      	mov	r2, r4
 801426e:	462b      	mov	r3, r5
 8014270:	f7ec fc2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8014274:	b900      	cbnz	r0, 8014278 <_dtoa_r+0x168>
 8014276:	3f01      	subs	r7, #1
 8014278:	2f16      	cmp	r7, #22
 801427a:	d852      	bhi.n	8014322 <_dtoa_r+0x212>
 801427c:	4b5d      	ldr	r3, [pc, #372]	@ (80143f4 <_dtoa_r+0x2e4>)
 801427e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014286:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801428a:	f7ec fc27 	bl	8000adc <__aeabi_dcmplt>
 801428e:	2800      	cmp	r0, #0
 8014290:	d049      	beq.n	8014326 <_dtoa_r+0x216>
 8014292:	3f01      	subs	r7, #1
 8014294:	2300      	movs	r3, #0
 8014296:	9310      	str	r3, [sp, #64]	@ 0x40
 8014298:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801429a:	1b9b      	subs	r3, r3, r6
 801429c:	1e5a      	subs	r2, r3, #1
 801429e:	bf45      	ittet	mi
 80142a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80142a4:	9300      	strmi	r3, [sp, #0]
 80142a6:	2300      	movpl	r3, #0
 80142a8:	2300      	movmi	r3, #0
 80142aa:	9206      	str	r2, [sp, #24]
 80142ac:	bf54      	ite	pl
 80142ae:	9300      	strpl	r3, [sp, #0]
 80142b0:	9306      	strmi	r3, [sp, #24]
 80142b2:	2f00      	cmp	r7, #0
 80142b4:	db39      	blt.n	801432a <_dtoa_r+0x21a>
 80142b6:	9b06      	ldr	r3, [sp, #24]
 80142b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80142ba:	443b      	add	r3, r7
 80142bc:	9306      	str	r3, [sp, #24]
 80142be:	2300      	movs	r3, #0
 80142c0:	9308      	str	r3, [sp, #32]
 80142c2:	9b07      	ldr	r3, [sp, #28]
 80142c4:	2b09      	cmp	r3, #9
 80142c6:	d863      	bhi.n	8014390 <_dtoa_r+0x280>
 80142c8:	2b05      	cmp	r3, #5
 80142ca:	bfc4      	itt	gt
 80142cc:	3b04      	subgt	r3, #4
 80142ce:	9307      	strgt	r3, [sp, #28]
 80142d0:	9b07      	ldr	r3, [sp, #28]
 80142d2:	f1a3 0302 	sub.w	r3, r3, #2
 80142d6:	bfcc      	ite	gt
 80142d8:	2400      	movgt	r4, #0
 80142da:	2401      	movle	r4, #1
 80142dc:	2b03      	cmp	r3, #3
 80142de:	d863      	bhi.n	80143a8 <_dtoa_r+0x298>
 80142e0:	e8df f003 	tbb	[pc, r3]
 80142e4:	2b375452 	.word	0x2b375452
 80142e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80142ec:	441e      	add	r6, r3
 80142ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80142f2:	2b20      	cmp	r3, #32
 80142f4:	bfc1      	itttt	gt
 80142f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80142fa:	409f      	lslgt	r7, r3
 80142fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014300:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014304:	bfd6      	itet	le
 8014306:	f1c3 0320 	rsble	r3, r3, #32
 801430a:	ea47 0003 	orrgt.w	r0, r7, r3
 801430e:	fa04 f003 	lslle.w	r0, r4, r3
 8014312:	f7ec f8f7 	bl	8000504 <__aeabi_ui2d>
 8014316:	2201      	movs	r2, #1
 8014318:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801431c:	3e01      	subs	r6, #1
 801431e:	9212      	str	r2, [sp, #72]	@ 0x48
 8014320:	e776      	b.n	8014210 <_dtoa_r+0x100>
 8014322:	2301      	movs	r3, #1
 8014324:	e7b7      	b.n	8014296 <_dtoa_r+0x186>
 8014326:	9010      	str	r0, [sp, #64]	@ 0x40
 8014328:	e7b6      	b.n	8014298 <_dtoa_r+0x188>
 801432a:	9b00      	ldr	r3, [sp, #0]
 801432c:	1bdb      	subs	r3, r3, r7
 801432e:	9300      	str	r3, [sp, #0]
 8014330:	427b      	negs	r3, r7
 8014332:	9308      	str	r3, [sp, #32]
 8014334:	2300      	movs	r3, #0
 8014336:	930d      	str	r3, [sp, #52]	@ 0x34
 8014338:	e7c3      	b.n	80142c2 <_dtoa_r+0x1b2>
 801433a:	2301      	movs	r3, #1
 801433c:	9309      	str	r3, [sp, #36]	@ 0x24
 801433e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014340:	eb07 0b03 	add.w	fp, r7, r3
 8014344:	f10b 0301 	add.w	r3, fp, #1
 8014348:	2b01      	cmp	r3, #1
 801434a:	9303      	str	r3, [sp, #12]
 801434c:	bfb8      	it	lt
 801434e:	2301      	movlt	r3, #1
 8014350:	e006      	b.n	8014360 <_dtoa_r+0x250>
 8014352:	2301      	movs	r3, #1
 8014354:	9309      	str	r3, [sp, #36]	@ 0x24
 8014356:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014358:	2b00      	cmp	r3, #0
 801435a:	dd28      	ble.n	80143ae <_dtoa_r+0x29e>
 801435c:	469b      	mov	fp, r3
 801435e:	9303      	str	r3, [sp, #12]
 8014360:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8014364:	2100      	movs	r1, #0
 8014366:	2204      	movs	r2, #4
 8014368:	f102 0514 	add.w	r5, r2, #20
 801436c:	429d      	cmp	r5, r3
 801436e:	d926      	bls.n	80143be <_dtoa_r+0x2ae>
 8014370:	6041      	str	r1, [r0, #4]
 8014372:	4648      	mov	r0, r9
 8014374:	f000 fce6 	bl	8014d44 <_Balloc>
 8014378:	4682      	mov	sl, r0
 801437a:	2800      	cmp	r0, #0
 801437c:	d142      	bne.n	8014404 <_dtoa_r+0x2f4>
 801437e:	4b1e      	ldr	r3, [pc, #120]	@ (80143f8 <_dtoa_r+0x2e8>)
 8014380:	4602      	mov	r2, r0
 8014382:	f240 11af 	movw	r1, #431	@ 0x1af
 8014386:	e6da      	b.n	801413e <_dtoa_r+0x2e>
 8014388:	2300      	movs	r3, #0
 801438a:	e7e3      	b.n	8014354 <_dtoa_r+0x244>
 801438c:	2300      	movs	r3, #0
 801438e:	e7d5      	b.n	801433c <_dtoa_r+0x22c>
 8014390:	2401      	movs	r4, #1
 8014392:	2300      	movs	r3, #0
 8014394:	9307      	str	r3, [sp, #28]
 8014396:	9409      	str	r4, [sp, #36]	@ 0x24
 8014398:	f04f 3bff 	mov.w	fp, #4294967295
 801439c:	2200      	movs	r2, #0
 801439e:	f8cd b00c 	str.w	fp, [sp, #12]
 80143a2:	2312      	movs	r3, #18
 80143a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80143a6:	e7db      	b.n	8014360 <_dtoa_r+0x250>
 80143a8:	2301      	movs	r3, #1
 80143aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80143ac:	e7f4      	b.n	8014398 <_dtoa_r+0x288>
 80143ae:	f04f 0b01 	mov.w	fp, #1
 80143b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80143b6:	465b      	mov	r3, fp
 80143b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80143bc:	e7d0      	b.n	8014360 <_dtoa_r+0x250>
 80143be:	3101      	adds	r1, #1
 80143c0:	0052      	lsls	r2, r2, #1
 80143c2:	e7d1      	b.n	8014368 <_dtoa_r+0x258>
 80143c4:	f3af 8000 	nop.w
 80143c8:	636f4361 	.word	0x636f4361
 80143cc:	3fd287a7 	.word	0x3fd287a7
 80143d0:	8b60c8b3 	.word	0x8b60c8b3
 80143d4:	3fc68a28 	.word	0x3fc68a28
 80143d8:	509f79fb 	.word	0x509f79fb
 80143dc:	3fd34413 	.word	0x3fd34413
 80143e0:	0801612d 	.word	0x0801612d
 80143e4:	08016144 	.word	0x08016144
 80143e8:	7ff00000 	.word	0x7ff00000
 80143ec:	080160fd 	.word	0x080160fd
 80143f0:	3ff80000 	.word	0x3ff80000
 80143f4:	08016298 	.word	0x08016298
 80143f8:	0801619c 	.word	0x0801619c
 80143fc:	08016129 	.word	0x08016129
 8014400:	080160fc 	.word	0x080160fc
 8014404:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014408:	6018      	str	r0, [r3, #0]
 801440a:	9b03      	ldr	r3, [sp, #12]
 801440c:	2b0e      	cmp	r3, #14
 801440e:	f200 80a1 	bhi.w	8014554 <_dtoa_r+0x444>
 8014412:	2c00      	cmp	r4, #0
 8014414:	f000 809e 	beq.w	8014554 <_dtoa_r+0x444>
 8014418:	2f00      	cmp	r7, #0
 801441a:	dd33      	ble.n	8014484 <_dtoa_r+0x374>
 801441c:	4b9c      	ldr	r3, [pc, #624]	@ (8014690 <_dtoa_r+0x580>)
 801441e:	f007 020f 	and.w	r2, r7, #15
 8014422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014426:	ed93 7b00 	vldr	d7, [r3]
 801442a:	05f8      	lsls	r0, r7, #23
 801442c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8014430:	ea4f 1427 	mov.w	r4, r7, asr #4
 8014434:	d516      	bpl.n	8014464 <_dtoa_r+0x354>
 8014436:	4b97      	ldr	r3, [pc, #604]	@ (8014694 <_dtoa_r+0x584>)
 8014438:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801443c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014440:	f7ec fa04 	bl	800084c <__aeabi_ddiv>
 8014444:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014448:	f004 040f 	and.w	r4, r4, #15
 801444c:	2603      	movs	r6, #3
 801444e:	4d91      	ldr	r5, [pc, #580]	@ (8014694 <_dtoa_r+0x584>)
 8014450:	b954      	cbnz	r4, 8014468 <_dtoa_r+0x358>
 8014452:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014456:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801445a:	f7ec f9f7 	bl	800084c <__aeabi_ddiv>
 801445e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014462:	e028      	b.n	80144b6 <_dtoa_r+0x3a6>
 8014464:	2602      	movs	r6, #2
 8014466:	e7f2      	b.n	801444e <_dtoa_r+0x33e>
 8014468:	07e1      	lsls	r1, r4, #31
 801446a:	d508      	bpl.n	801447e <_dtoa_r+0x36e>
 801446c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8014470:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014474:	f7ec f8c0 	bl	80005f8 <__aeabi_dmul>
 8014478:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801447c:	3601      	adds	r6, #1
 801447e:	1064      	asrs	r4, r4, #1
 8014480:	3508      	adds	r5, #8
 8014482:	e7e5      	b.n	8014450 <_dtoa_r+0x340>
 8014484:	f000 80af 	beq.w	80145e6 <_dtoa_r+0x4d6>
 8014488:	427c      	negs	r4, r7
 801448a:	4b81      	ldr	r3, [pc, #516]	@ (8014690 <_dtoa_r+0x580>)
 801448c:	4d81      	ldr	r5, [pc, #516]	@ (8014694 <_dtoa_r+0x584>)
 801448e:	f004 020f 	and.w	r2, r4, #15
 8014492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801449a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801449e:	f7ec f8ab 	bl	80005f8 <__aeabi_dmul>
 80144a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80144a6:	1124      	asrs	r4, r4, #4
 80144a8:	2300      	movs	r3, #0
 80144aa:	2602      	movs	r6, #2
 80144ac:	2c00      	cmp	r4, #0
 80144ae:	f040 808f 	bne.w	80145d0 <_dtoa_r+0x4c0>
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d1d3      	bne.n	801445e <_dtoa_r+0x34e>
 80144b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80144b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	f000 8094 	beq.w	80145ea <_dtoa_r+0x4da>
 80144c2:	4b75      	ldr	r3, [pc, #468]	@ (8014698 <_dtoa_r+0x588>)
 80144c4:	2200      	movs	r2, #0
 80144c6:	4620      	mov	r0, r4
 80144c8:	4629      	mov	r1, r5
 80144ca:	f7ec fb07 	bl	8000adc <__aeabi_dcmplt>
 80144ce:	2800      	cmp	r0, #0
 80144d0:	f000 808b 	beq.w	80145ea <_dtoa_r+0x4da>
 80144d4:	9b03      	ldr	r3, [sp, #12]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	f000 8087 	beq.w	80145ea <_dtoa_r+0x4da>
 80144dc:	f1bb 0f00 	cmp.w	fp, #0
 80144e0:	dd34      	ble.n	801454c <_dtoa_r+0x43c>
 80144e2:	4620      	mov	r0, r4
 80144e4:	4b6d      	ldr	r3, [pc, #436]	@ (801469c <_dtoa_r+0x58c>)
 80144e6:	2200      	movs	r2, #0
 80144e8:	4629      	mov	r1, r5
 80144ea:	f7ec f885 	bl	80005f8 <__aeabi_dmul>
 80144ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80144f2:	f107 38ff 	add.w	r8, r7, #4294967295
 80144f6:	3601      	adds	r6, #1
 80144f8:	465c      	mov	r4, fp
 80144fa:	4630      	mov	r0, r6
 80144fc:	f7ec f812 	bl	8000524 <__aeabi_i2d>
 8014500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014504:	f7ec f878 	bl	80005f8 <__aeabi_dmul>
 8014508:	4b65      	ldr	r3, [pc, #404]	@ (80146a0 <_dtoa_r+0x590>)
 801450a:	2200      	movs	r2, #0
 801450c:	f7eb febe 	bl	800028c <__adddf3>
 8014510:	4605      	mov	r5, r0
 8014512:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8014516:	2c00      	cmp	r4, #0
 8014518:	d16a      	bne.n	80145f0 <_dtoa_r+0x4e0>
 801451a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801451e:	4b61      	ldr	r3, [pc, #388]	@ (80146a4 <_dtoa_r+0x594>)
 8014520:	2200      	movs	r2, #0
 8014522:	f7eb feb1 	bl	8000288 <__aeabi_dsub>
 8014526:	4602      	mov	r2, r0
 8014528:	460b      	mov	r3, r1
 801452a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801452e:	462a      	mov	r2, r5
 8014530:	4633      	mov	r3, r6
 8014532:	f7ec faf1 	bl	8000b18 <__aeabi_dcmpgt>
 8014536:	2800      	cmp	r0, #0
 8014538:	f040 8298 	bne.w	8014a6c <_dtoa_r+0x95c>
 801453c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014540:	462a      	mov	r2, r5
 8014542:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014546:	f7ec fac9 	bl	8000adc <__aeabi_dcmplt>
 801454a:	bb38      	cbnz	r0, 801459c <_dtoa_r+0x48c>
 801454c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8014550:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8014554:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014556:	2b00      	cmp	r3, #0
 8014558:	f2c0 8157 	blt.w	801480a <_dtoa_r+0x6fa>
 801455c:	2f0e      	cmp	r7, #14
 801455e:	f300 8154 	bgt.w	801480a <_dtoa_r+0x6fa>
 8014562:	4b4b      	ldr	r3, [pc, #300]	@ (8014690 <_dtoa_r+0x580>)
 8014564:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014568:	ed93 7b00 	vldr	d7, [r3]
 801456c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801456e:	2b00      	cmp	r3, #0
 8014570:	ed8d 7b00 	vstr	d7, [sp]
 8014574:	f280 80e5 	bge.w	8014742 <_dtoa_r+0x632>
 8014578:	9b03      	ldr	r3, [sp, #12]
 801457a:	2b00      	cmp	r3, #0
 801457c:	f300 80e1 	bgt.w	8014742 <_dtoa_r+0x632>
 8014580:	d10c      	bne.n	801459c <_dtoa_r+0x48c>
 8014582:	4b48      	ldr	r3, [pc, #288]	@ (80146a4 <_dtoa_r+0x594>)
 8014584:	2200      	movs	r2, #0
 8014586:	ec51 0b17 	vmov	r0, r1, d7
 801458a:	f7ec f835 	bl	80005f8 <__aeabi_dmul>
 801458e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014592:	f7ec fab7 	bl	8000b04 <__aeabi_dcmpge>
 8014596:	2800      	cmp	r0, #0
 8014598:	f000 8266 	beq.w	8014a68 <_dtoa_r+0x958>
 801459c:	2400      	movs	r4, #0
 801459e:	4625      	mov	r5, r4
 80145a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80145a2:	4656      	mov	r6, sl
 80145a4:	ea6f 0803 	mvn.w	r8, r3
 80145a8:	2700      	movs	r7, #0
 80145aa:	4621      	mov	r1, r4
 80145ac:	4648      	mov	r0, r9
 80145ae:	f000 fc09 	bl	8014dc4 <_Bfree>
 80145b2:	2d00      	cmp	r5, #0
 80145b4:	f000 80bd 	beq.w	8014732 <_dtoa_r+0x622>
 80145b8:	b12f      	cbz	r7, 80145c6 <_dtoa_r+0x4b6>
 80145ba:	42af      	cmp	r7, r5
 80145bc:	d003      	beq.n	80145c6 <_dtoa_r+0x4b6>
 80145be:	4639      	mov	r1, r7
 80145c0:	4648      	mov	r0, r9
 80145c2:	f000 fbff 	bl	8014dc4 <_Bfree>
 80145c6:	4629      	mov	r1, r5
 80145c8:	4648      	mov	r0, r9
 80145ca:	f000 fbfb 	bl	8014dc4 <_Bfree>
 80145ce:	e0b0      	b.n	8014732 <_dtoa_r+0x622>
 80145d0:	07e2      	lsls	r2, r4, #31
 80145d2:	d505      	bpl.n	80145e0 <_dtoa_r+0x4d0>
 80145d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80145d8:	f7ec f80e 	bl	80005f8 <__aeabi_dmul>
 80145dc:	3601      	adds	r6, #1
 80145de:	2301      	movs	r3, #1
 80145e0:	1064      	asrs	r4, r4, #1
 80145e2:	3508      	adds	r5, #8
 80145e4:	e762      	b.n	80144ac <_dtoa_r+0x39c>
 80145e6:	2602      	movs	r6, #2
 80145e8:	e765      	b.n	80144b6 <_dtoa_r+0x3a6>
 80145ea:	9c03      	ldr	r4, [sp, #12]
 80145ec:	46b8      	mov	r8, r7
 80145ee:	e784      	b.n	80144fa <_dtoa_r+0x3ea>
 80145f0:	4b27      	ldr	r3, [pc, #156]	@ (8014690 <_dtoa_r+0x580>)
 80145f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80145f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80145f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80145fc:	4454      	add	r4, sl
 80145fe:	2900      	cmp	r1, #0
 8014600:	d054      	beq.n	80146ac <_dtoa_r+0x59c>
 8014602:	4929      	ldr	r1, [pc, #164]	@ (80146a8 <_dtoa_r+0x598>)
 8014604:	2000      	movs	r0, #0
 8014606:	f7ec f921 	bl	800084c <__aeabi_ddiv>
 801460a:	4633      	mov	r3, r6
 801460c:	462a      	mov	r2, r5
 801460e:	f7eb fe3b 	bl	8000288 <__aeabi_dsub>
 8014612:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014616:	4656      	mov	r6, sl
 8014618:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801461c:	f7ec fa9c 	bl	8000b58 <__aeabi_d2iz>
 8014620:	4605      	mov	r5, r0
 8014622:	f7eb ff7f 	bl	8000524 <__aeabi_i2d>
 8014626:	4602      	mov	r2, r0
 8014628:	460b      	mov	r3, r1
 801462a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801462e:	f7eb fe2b 	bl	8000288 <__aeabi_dsub>
 8014632:	3530      	adds	r5, #48	@ 0x30
 8014634:	4602      	mov	r2, r0
 8014636:	460b      	mov	r3, r1
 8014638:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801463c:	f806 5b01 	strb.w	r5, [r6], #1
 8014640:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014644:	f7ec fa4a 	bl	8000adc <__aeabi_dcmplt>
 8014648:	2800      	cmp	r0, #0
 801464a:	d172      	bne.n	8014732 <_dtoa_r+0x622>
 801464c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014650:	4911      	ldr	r1, [pc, #68]	@ (8014698 <_dtoa_r+0x588>)
 8014652:	2000      	movs	r0, #0
 8014654:	f7eb fe18 	bl	8000288 <__aeabi_dsub>
 8014658:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801465c:	f7ec fa3e 	bl	8000adc <__aeabi_dcmplt>
 8014660:	2800      	cmp	r0, #0
 8014662:	f040 80b4 	bne.w	80147ce <_dtoa_r+0x6be>
 8014666:	42a6      	cmp	r6, r4
 8014668:	f43f af70 	beq.w	801454c <_dtoa_r+0x43c>
 801466c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8014670:	4b0a      	ldr	r3, [pc, #40]	@ (801469c <_dtoa_r+0x58c>)
 8014672:	2200      	movs	r2, #0
 8014674:	f7eb ffc0 	bl	80005f8 <__aeabi_dmul>
 8014678:	4b08      	ldr	r3, [pc, #32]	@ (801469c <_dtoa_r+0x58c>)
 801467a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801467e:	2200      	movs	r2, #0
 8014680:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014684:	f7eb ffb8 	bl	80005f8 <__aeabi_dmul>
 8014688:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801468c:	e7c4      	b.n	8014618 <_dtoa_r+0x508>
 801468e:	bf00      	nop
 8014690:	08016298 	.word	0x08016298
 8014694:	08016270 	.word	0x08016270
 8014698:	3ff00000 	.word	0x3ff00000
 801469c:	40240000 	.word	0x40240000
 80146a0:	401c0000 	.word	0x401c0000
 80146a4:	40140000 	.word	0x40140000
 80146a8:	3fe00000 	.word	0x3fe00000
 80146ac:	4631      	mov	r1, r6
 80146ae:	4628      	mov	r0, r5
 80146b0:	f7eb ffa2 	bl	80005f8 <__aeabi_dmul>
 80146b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80146b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80146ba:	4656      	mov	r6, sl
 80146bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80146c0:	f7ec fa4a 	bl	8000b58 <__aeabi_d2iz>
 80146c4:	4605      	mov	r5, r0
 80146c6:	f7eb ff2d 	bl	8000524 <__aeabi_i2d>
 80146ca:	4602      	mov	r2, r0
 80146cc:	460b      	mov	r3, r1
 80146ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80146d2:	f7eb fdd9 	bl	8000288 <__aeabi_dsub>
 80146d6:	3530      	adds	r5, #48	@ 0x30
 80146d8:	f806 5b01 	strb.w	r5, [r6], #1
 80146dc:	4602      	mov	r2, r0
 80146de:	460b      	mov	r3, r1
 80146e0:	42a6      	cmp	r6, r4
 80146e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80146e6:	f04f 0200 	mov.w	r2, #0
 80146ea:	d124      	bne.n	8014736 <_dtoa_r+0x626>
 80146ec:	4baf      	ldr	r3, [pc, #700]	@ (80149ac <_dtoa_r+0x89c>)
 80146ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80146f2:	f7eb fdcb 	bl	800028c <__adddf3>
 80146f6:	4602      	mov	r2, r0
 80146f8:	460b      	mov	r3, r1
 80146fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80146fe:	f7ec fa0b 	bl	8000b18 <__aeabi_dcmpgt>
 8014702:	2800      	cmp	r0, #0
 8014704:	d163      	bne.n	80147ce <_dtoa_r+0x6be>
 8014706:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801470a:	49a8      	ldr	r1, [pc, #672]	@ (80149ac <_dtoa_r+0x89c>)
 801470c:	2000      	movs	r0, #0
 801470e:	f7eb fdbb 	bl	8000288 <__aeabi_dsub>
 8014712:	4602      	mov	r2, r0
 8014714:	460b      	mov	r3, r1
 8014716:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801471a:	f7ec f9df 	bl	8000adc <__aeabi_dcmplt>
 801471e:	2800      	cmp	r0, #0
 8014720:	f43f af14 	beq.w	801454c <_dtoa_r+0x43c>
 8014724:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8014726:	1e73      	subs	r3, r6, #1
 8014728:	9313      	str	r3, [sp, #76]	@ 0x4c
 801472a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801472e:	2b30      	cmp	r3, #48	@ 0x30
 8014730:	d0f8      	beq.n	8014724 <_dtoa_r+0x614>
 8014732:	4647      	mov	r7, r8
 8014734:	e03b      	b.n	80147ae <_dtoa_r+0x69e>
 8014736:	4b9e      	ldr	r3, [pc, #632]	@ (80149b0 <_dtoa_r+0x8a0>)
 8014738:	f7eb ff5e 	bl	80005f8 <__aeabi_dmul>
 801473c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014740:	e7bc      	b.n	80146bc <_dtoa_r+0x5ac>
 8014742:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8014746:	4656      	mov	r6, sl
 8014748:	e9dd 2300 	ldrd	r2, r3, [sp]
 801474c:	4620      	mov	r0, r4
 801474e:	4629      	mov	r1, r5
 8014750:	f7ec f87c 	bl	800084c <__aeabi_ddiv>
 8014754:	f7ec fa00 	bl	8000b58 <__aeabi_d2iz>
 8014758:	4680      	mov	r8, r0
 801475a:	f7eb fee3 	bl	8000524 <__aeabi_i2d>
 801475e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014762:	f7eb ff49 	bl	80005f8 <__aeabi_dmul>
 8014766:	4602      	mov	r2, r0
 8014768:	460b      	mov	r3, r1
 801476a:	4620      	mov	r0, r4
 801476c:	4629      	mov	r1, r5
 801476e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8014772:	f7eb fd89 	bl	8000288 <__aeabi_dsub>
 8014776:	f806 4b01 	strb.w	r4, [r6], #1
 801477a:	9d03      	ldr	r5, [sp, #12]
 801477c:	eba6 040a 	sub.w	r4, r6, sl
 8014780:	42a5      	cmp	r5, r4
 8014782:	4602      	mov	r2, r0
 8014784:	460b      	mov	r3, r1
 8014786:	d133      	bne.n	80147f0 <_dtoa_r+0x6e0>
 8014788:	f7eb fd80 	bl	800028c <__adddf3>
 801478c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014790:	4604      	mov	r4, r0
 8014792:	460d      	mov	r5, r1
 8014794:	f7ec f9c0 	bl	8000b18 <__aeabi_dcmpgt>
 8014798:	b9c0      	cbnz	r0, 80147cc <_dtoa_r+0x6bc>
 801479a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801479e:	4620      	mov	r0, r4
 80147a0:	4629      	mov	r1, r5
 80147a2:	f7ec f991 	bl	8000ac8 <__aeabi_dcmpeq>
 80147a6:	b110      	cbz	r0, 80147ae <_dtoa_r+0x69e>
 80147a8:	f018 0f01 	tst.w	r8, #1
 80147ac:	d10e      	bne.n	80147cc <_dtoa_r+0x6bc>
 80147ae:	9902      	ldr	r1, [sp, #8]
 80147b0:	4648      	mov	r0, r9
 80147b2:	f000 fb07 	bl	8014dc4 <_Bfree>
 80147b6:	2300      	movs	r3, #0
 80147b8:	7033      	strb	r3, [r6, #0]
 80147ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80147bc:	3701      	adds	r7, #1
 80147be:	601f      	str	r7, [r3, #0]
 80147c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	f000 824b 	beq.w	8014c5e <_dtoa_r+0xb4e>
 80147c8:	601e      	str	r6, [r3, #0]
 80147ca:	e248      	b.n	8014c5e <_dtoa_r+0xb4e>
 80147cc:	46b8      	mov	r8, r7
 80147ce:	4633      	mov	r3, r6
 80147d0:	461e      	mov	r6, r3
 80147d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80147d6:	2a39      	cmp	r2, #57	@ 0x39
 80147d8:	d106      	bne.n	80147e8 <_dtoa_r+0x6d8>
 80147da:	459a      	cmp	sl, r3
 80147dc:	d1f8      	bne.n	80147d0 <_dtoa_r+0x6c0>
 80147de:	2230      	movs	r2, #48	@ 0x30
 80147e0:	f108 0801 	add.w	r8, r8, #1
 80147e4:	f88a 2000 	strb.w	r2, [sl]
 80147e8:	781a      	ldrb	r2, [r3, #0]
 80147ea:	3201      	adds	r2, #1
 80147ec:	701a      	strb	r2, [r3, #0]
 80147ee:	e7a0      	b.n	8014732 <_dtoa_r+0x622>
 80147f0:	4b6f      	ldr	r3, [pc, #444]	@ (80149b0 <_dtoa_r+0x8a0>)
 80147f2:	2200      	movs	r2, #0
 80147f4:	f7eb ff00 	bl	80005f8 <__aeabi_dmul>
 80147f8:	2200      	movs	r2, #0
 80147fa:	2300      	movs	r3, #0
 80147fc:	4604      	mov	r4, r0
 80147fe:	460d      	mov	r5, r1
 8014800:	f7ec f962 	bl	8000ac8 <__aeabi_dcmpeq>
 8014804:	2800      	cmp	r0, #0
 8014806:	d09f      	beq.n	8014748 <_dtoa_r+0x638>
 8014808:	e7d1      	b.n	80147ae <_dtoa_r+0x69e>
 801480a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801480c:	2a00      	cmp	r2, #0
 801480e:	f000 80ea 	beq.w	80149e6 <_dtoa_r+0x8d6>
 8014812:	9a07      	ldr	r2, [sp, #28]
 8014814:	2a01      	cmp	r2, #1
 8014816:	f300 80cd 	bgt.w	80149b4 <_dtoa_r+0x8a4>
 801481a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801481c:	2a00      	cmp	r2, #0
 801481e:	f000 80c1 	beq.w	80149a4 <_dtoa_r+0x894>
 8014822:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8014826:	9c08      	ldr	r4, [sp, #32]
 8014828:	9e00      	ldr	r6, [sp, #0]
 801482a:	9a00      	ldr	r2, [sp, #0]
 801482c:	441a      	add	r2, r3
 801482e:	9200      	str	r2, [sp, #0]
 8014830:	9a06      	ldr	r2, [sp, #24]
 8014832:	2101      	movs	r1, #1
 8014834:	441a      	add	r2, r3
 8014836:	4648      	mov	r0, r9
 8014838:	9206      	str	r2, [sp, #24]
 801483a:	f000 fb77 	bl	8014f2c <__i2b>
 801483e:	4605      	mov	r5, r0
 8014840:	b166      	cbz	r6, 801485c <_dtoa_r+0x74c>
 8014842:	9b06      	ldr	r3, [sp, #24]
 8014844:	2b00      	cmp	r3, #0
 8014846:	dd09      	ble.n	801485c <_dtoa_r+0x74c>
 8014848:	42b3      	cmp	r3, r6
 801484a:	9a00      	ldr	r2, [sp, #0]
 801484c:	bfa8      	it	ge
 801484e:	4633      	movge	r3, r6
 8014850:	1ad2      	subs	r2, r2, r3
 8014852:	9200      	str	r2, [sp, #0]
 8014854:	9a06      	ldr	r2, [sp, #24]
 8014856:	1af6      	subs	r6, r6, r3
 8014858:	1ad3      	subs	r3, r2, r3
 801485a:	9306      	str	r3, [sp, #24]
 801485c:	9b08      	ldr	r3, [sp, #32]
 801485e:	b30b      	cbz	r3, 80148a4 <_dtoa_r+0x794>
 8014860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014862:	2b00      	cmp	r3, #0
 8014864:	f000 80c6 	beq.w	80149f4 <_dtoa_r+0x8e4>
 8014868:	2c00      	cmp	r4, #0
 801486a:	f000 80c0 	beq.w	80149ee <_dtoa_r+0x8de>
 801486e:	4629      	mov	r1, r5
 8014870:	4622      	mov	r2, r4
 8014872:	4648      	mov	r0, r9
 8014874:	f000 fc12 	bl	801509c <__pow5mult>
 8014878:	9a02      	ldr	r2, [sp, #8]
 801487a:	4601      	mov	r1, r0
 801487c:	4605      	mov	r5, r0
 801487e:	4648      	mov	r0, r9
 8014880:	f000 fb6a 	bl	8014f58 <__multiply>
 8014884:	9902      	ldr	r1, [sp, #8]
 8014886:	4680      	mov	r8, r0
 8014888:	4648      	mov	r0, r9
 801488a:	f000 fa9b 	bl	8014dc4 <_Bfree>
 801488e:	9b08      	ldr	r3, [sp, #32]
 8014890:	1b1b      	subs	r3, r3, r4
 8014892:	9308      	str	r3, [sp, #32]
 8014894:	f000 80b1 	beq.w	80149fa <_dtoa_r+0x8ea>
 8014898:	9a08      	ldr	r2, [sp, #32]
 801489a:	4641      	mov	r1, r8
 801489c:	4648      	mov	r0, r9
 801489e:	f000 fbfd 	bl	801509c <__pow5mult>
 80148a2:	9002      	str	r0, [sp, #8]
 80148a4:	2101      	movs	r1, #1
 80148a6:	4648      	mov	r0, r9
 80148a8:	f000 fb40 	bl	8014f2c <__i2b>
 80148ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80148ae:	4604      	mov	r4, r0
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	f000 81d8 	beq.w	8014c66 <_dtoa_r+0xb56>
 80148b6:	461a      	mov	r2, r3
 80148b8:	4601      	mov	r1, r0
 80148ba:	4648      	mov	r0, r9
 80148bc:	f000 fbee 	bl	801509c <__pow5mult>
 80148c0:	9b07      	ldr	r3, [sp, #28]
 80148c2:	2b01      	cmp	r3, #1
 80148c4:	4604      	mov	r4, r0
 80148c6:	f300 809f 	bgt.w	8014a08 <_dtoa_r+0x8f8>
 80148ca:	9b04      	ldr	r3, [sp, #16]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	f040 8097 	bne.w	8014a00 <_dtoa_r+0x8f0>
 80148d2:	9b05      	ldr	r3, [sp, #20]
 80148d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80148d8:	2b00      	cmp	r3, #0
 80148da:	f040 8093 	bne.w	8014a04 <_dtoa_r+0x8f4>
 80148de:	9b05      	ldr	r3, [sp, #20]
 80148e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80148e4:	0d1b      	lsrs	r3, r3, #20
 80148e6:	051b      	lsls	r3, r3, #20
 80148e8:	b133      	cbz	r3, 80148f8 <_dtoa_r+0x7e8>
 80148ea:	9b00      	ldr	r3, [sp, #0]
 80148ec:	3301      	adds	r3, #1
 80148ee:	9300      	str	r3, [sp, #0]
 80148f0:	9b06      	ldr	r3, [sp, #24]
 80148f2:	3301      	adds	r3, #1
 80148f4:	9306      	str	r3, [sp, #24]
 80148f6:	2301      	movs	r3, #1
 80148f8:	9308      	str	r3, [sp, #32]
 80148fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	f000 81b8 	beq.w	8014c72 <_dtoa_r+0xb62>
 8014902:	6923      	ldr	r3, [r4, #16]
 8014904:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014908:	6918      	ldr	r0, [r3, #16]
 801490a:	f000 fac3 	bl	8014e94 <__hi0bits>
 801490e:	f1c0 0020 	rsb	r0, r0, #32
 8014912:	9b06      	ldr	r3, [sp, #24]
 8014914:	4418      	add	r0, r3
 8014916:	f010 001f 	ands.w	r0, r0, #31
 801491a:	f000 8082 	beq.w	8014a22 <_dtoa_r+0x912>
 801491e:	f1c0 0320 	rsb	r3, r0, #32
 8014922:	2b04      	cmp	r3, #4
 8014924:	dd73      	ble.n	8014a0e <_dtoa_r+0x8fe>
 8014926:	9b00      	ldr	r3, [sp, #0]
 8014928:	f1c0 001c 	rsb	r0, r0, #28
 801492c:	4403      	add	r3, r0
 801492e:	9300      	str	r3, [sp, #0]
 8014930:	9b06      	ldr	r3, [sp, #24]
 8014932:	4403      	add	r3, r0
 8014934:	4406      	add	r6, r0
 8014936:	9306      	str	r3, [sp, #24]
 8014938:	9b00      	ldr	r3, [sp, #0]
 801493a:	2b00      	cmp	r3, #0
 801493c:	dd05      	ble.n	801494a <_dtoa_r+0x83a>
 801493e:	9902      	ldr	r1, [sp, #8]
 8014940:	461a      	mov	r2, r3
 8014942:	4648      	mov	r0, r9
 8014944:	f000 fc04 	bl	8015150 <__lshift>
 8014948:	9002      	str	r0, [sp, #8]
 801494a:	9b06      	ldr	r3, [sp, #24]
 801494c:	2b00      	cmp	r3, #0
 801494e:	dd05      	ble.n	801495c <_dtoa_r+0x84c>
 8014950:	4621      	mov	r1, r4
 8014952:	461a      	mov	r2, r3
 8014954:	4648      	mov	r0, r9
 8014956:	f000 fbfb 	bl	8015150 <__lshift>
 801495a:	4604      	mov	r4, r0
 801495c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801495e:	2b00      	cmp	r3, #0
 8014960:	d061      	beq.n	8014a26 <_dtoa_r+0x916>
 8014962:	9802      	ldr	r0, [sp, #8]
 8014964:	4621      	mov	r1, r4
 8014966:	f000 fc5f 	bl	8015228 <__mcmp>
 801496a:	2800      	cmp	r0, #0
 801496c:	da5b      	bge.n	8014a26 <_dtoa_r+0x916>
 801496e:	2300      	movs	r3, #0
 8014970:	9902      	ldr	r1, [sp, #8]
 8014972:	220a      	movs	r2, #10
 8014974:	4648      	mov	r0, r9
 8014976:	f000 fa47 	bl	8014e08 <__multadd>
 801497a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801497c:	9002      	str	r0, [sp, #8]
 801497e:	f107 38ff 	add.w	r8, r7, #4294967295
 8014982:	2b00      	cmp	r3, #0
 8014984:	f000 8177 	beq.w	8014c76 <_dtoa_r+0xb66>
 8014988:	4629      	mov	r1, r5
 801498a:	2300      	movs	r3, #0
 801498c:	220a      	movs	r2, #10
 801498e:	4648      	mov	r0, r9
 8014990:	f000 fa3a 	bl	8014e08 <__multadd>
 8014994:	f1bb 0f00 	cmp.w	fp, #0
 8014998:	4605      	mov	r5, r0
 801499a:	dc6f      	bgt.n	8014a7c <_dtoa_r+0x96c>
 801499c:	9b07      	ldr	r3, [sp, #28]
 801499e:	2b02      	cmp	r3, #2
 80149a0:	dc49      	bgt.n	8014a36 <_dtoa_r+0x926>
 80149a2:	e06b      	b.n	8014a7c <_dtoa_r+0x96c>
 80149a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80149a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80149aa:	e73c      	b.n	8014826 <_dtoa_r+0x716>
 80149ac:	3fe00000 	.word	0x3fe00000
 80149b0:	40240000 	.word	0x40240000
 80149b4:	9b03      	ldr	r3, [sp, #12]
 80149b6:	1e5c      	subs	r4, r3, #1
 80149b8:	9b08      	ldr	r3, [sp, #32]
 80149ba:	42a3      	cmp	r3, r4
 80149bc:	db09      	blt.n	80149d2 <_dtoa_r+0x8c2>
 80149be:	1b1c      	subs	r4, r3, r4
 80149c0:	9b03      	ldr	r3, [sp, #12]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	f6bf af30 	bge.w	8014828 <_dtoa_r+0x718>
 80149c8:	9b00      	ldr	r3, [sp, #0]
 80149ca:	9a03      	ldr	r2, [sp, #12]
 80149cc:	1a9e      	subs	r6, r3, r2
 80149ce:	2300      	movs	r3, #0
 80149d0:	e72b      	b.n	801482a <_dtoa_r+0x71a>
 80149d2:	9b08      	ldr	r3, [sp, #32]
 80149d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80149d6:	9408      	str	r4, [sp, #32]
 80149d8:	1ae3      	subs	r3, r4, r3
 80149da:	441a      	add	r2, r3
 80149dc:	9e00      	ldr	r6, [sp, #0]
 80149de:	9b03      	ldr	r3, [sp, #12]
 80149e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80149e2:	2400      	movs	r4, #0
 80149e4:	e721      	b.n	801482a <_dtoa_r+0x71a>
 80149e6:	9c08      	ldr	r4, [sp, #32]
 80149e8:	9e00      	ldr	r6, [sp, #0]
 80149ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80149ec:	e728      	b.n	8014840 <_dtoa_r+0x730>
 80149ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80149f2:	e751      	b.n	8014898 <_dtoa_r+0x788>
 80149f4:	9a08      	ldr	r2, [sp, #32]
 80149f6:	9902      	ldr	r1, [sp, #8]
 80149f8:	e750      	b.n	801489c <_dtoa_r+0x78c>
 80149fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80149fe:	e751      	b.n	80148a4 <_dtoa_r+0x794>
 8014a00:	2300      	movs	r3, #0
 8014a02:	e779      	b.n	80148f8 <_dtoa_r+0x7e8>
 8014a04:	9b04      	ldr	r3, [sp, #16]
 8014a06:	e777      	b.n	80148f8 <_dtoa_r+0x7e8>
 8014a08:	2300      	movs	r3, #0
 8014a0a:	9308      	str	r3, [sp, #32]
 8014a0c:	e779      	b.n	8014902 <_dtoa_r+0x7f2>
 8014a0e:	d093      	beq.n	8014938 <_dtoa_r+0x828>
 8014a10:	9a00      	ldr	r2, [sp, #0]
 8014a12:	331c      	adds	r3, #28
 8014a14:	441a      	add	r2, r3
 8014a16:	9200      	str	r2, [sp, #0]
 8014a18:	9a06      	ldr	r2, [sp, #24]
 8014a1a:	441a      	add	r2, r3
 8014a1c:	441e      	add	r6, r3
 8014a1e:	9206      	str	r2, [sp, #24]
 8014a20:	e78a      	b.n	8014938 <_dtoa_r+0x828>
 8014a22:	4603      	mov	r3, r0
 8014a24:	e7f4      	b.n	8014a10 <_dtoa_r+0x900>
 8014a26:	9b03      	ldr	r3, [sp, #12]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	46b8      	mov	r8, r7
 8014a2c:	dc20      	bgt.n	8014a70 <_dtoa_r+0x960>
 8014a2e:	469b      	mov	fp, r3
 8014a30:	9b07      	ldr	r3, [sp, #28]
 8014a32:	2b02      	cmp	r3, #2
 8014a34:	dd1e      	ble.n	8014a74 <_dtoa_r+0x964>
 8014a36:	f1bb 0f00 	cmp.w	fp, #0
 8014a3a:	f47f adb1 	bne.w	80145a0 <_dtoa_r+0x490>
 8014a3e:	4621      	mov	r1, r4
 8014a40:	465b      	mov	r3, fp
 8014a42:	2205      	movs	r2, #5
 8014a44:	4648      	mov	r0, r9
 8014a46:	f000 f9df 	bl	8014e08 <__multadd>
 8014a4a:	4601      	mov	r1, r0
 8014a4c:	4604      	mov	r4, r0
 8014a4e:	9802      	ldr	r0, [sp, #8]
 8014a50:	f000 fbea 	bl	8015228 <__mcmp>
 8014a54:	2800      	cmp	r0, #0
 8014a56:	f77f ada3 	ble.w	80145a0 <_dtoa_r+0x490>
 8014a5a:	4656      	mov	r6, sl
 8014a5c:	2331      	movs	r3, #49	@ 0x31
 8014a5e:	f806 3b01 	strb.w	r3, [r6], #1
 8014a62:	f108 0801 	add.w	r8, r8, #1
 8014a66:	e59f      	b.n	80145a8 <_dtoa_r+0x498>
 8014a68:	9c03      	ldr	r4, [sp, #12]
 8014a6a:	46b8      	mov	r8, r7
 8014a6c:	4625      	mov	r5, r4
 8014a6e:	e7f4      	b.n	8014a5a <_dtoa_r+0x94a>
 8014a70:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8014a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	f000 8101 	beq.w	8014c7e <_dtoa_r+0xb6e>
 8014a7c:	2e00      	cmp	r6, #0
 8014a7e:	dd05      	ble.n	8014a8c <_dtoa_r+0x97c>
 8014a80:	4629      	mov	r1, r5
 8014a82:	4632      	mov	r2, r6
 8014a84:	4648      	mov	r0, r9
 8014a86:	f000 fb63 	bl	8015150 <__lshift>
 8014a8a:	4605      	mov	r5, r0
 8014a8c:	9b08      	ldr	r3, [sp, #32]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d05c      	beq.n	8014b4c <_dtoa_r+0xa3c>
 8014a92:	6869      	ldr	r1, [r5, #4]
 8014a94:	4648      	mov	r0, r9
 8014a96:	f000 f955 	bl	8014d44 <_Balloc>
 8014a9a:	4606      	mov	r6, r0
 8014a9c:	b928      	cbnz	r0, 8014aaa <_dtoa_r+0x99a>
 8014a9e:	4b82      	ldr	r3, [pc, #520]	@ (8014ca8 <_dtoa_r+0xb98>)
 8014aa0:	4602      	mov	r2, r0
 8014aa2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014aa6:	f7ff bb4a 	b.w	801413e <_dtoa_r+0x2e>
 8014aaa:	692a      	ldr	r2, [r5, #16]
 8014aac:	3202      	adds	r2, #2
 8014aae:	0092      	lsls	r2, r2, #2
 8014ab0:	f105 010c 	add.w	r1, r5, #12
 8014ab4:	300c      	adds	r0, #12
 8014ab6:	f7ff fa92 	bl	8013fde <memcpy>
 8014aba:	2201      	movs	r2, #1
 8014abc:	4631      	mov	r1, r6
 8014abe:	4648      	mov	r0, r9
 8014ac0:	f000 fb46 	bl	8015150 <__lshift>
 8014ac4:	f10a 0301 	add.w	r3, sl, #1
 8014ac8:	9300      	str	r3, [sp, #0]
 8014aca:	eb0a 030b 	add.w	r3, sl, fp
 8014ace:	9308      	str	r3, [sp, #32]
 8014ad0:	9b04      	ldr	r3, [sp, #16]
 8014ad2:	f003 0301 	and.w	r3, r3, #1
 8014ad6:	462f      	mov	r7, r5
 8014ad8:	9306      	str	r3, [sp, #24]
 8014ada:	4605      	mov	r5, r0
 8014adc:	9b00      	ldr	r3, [sp, #0]
 8014ade:	9802      	ldr	r0, [sp, #8]
 8014ae0:	4621      	mov	r1, r4
 8014ae2:	f103 3bff 	add.w	fp, r3, #4294967295
 8014ae6:	f7ff fa88 	bl	8013ffa <quorem>
 8014aea:	4603      	mov	r3, r0
 8014aec:	3330      	adds	r3, #48	@ 0x30
 8014aee:	9003      	str	r0, [sp, #12]
 8014af0:	4639      	mov	r1, r7
 8014af2:	9802      	ldr	r0, [sp, #8]
 8014af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8014af6:	f000 fb97 	bl	8015228 <__mcmp>
 8014afa:	462a      	mov	r2, r5
 8014afc:	9004      	str	r0, [sp, #16]
 8014afe:	4621      	mov	r1, r4
 8014b00:	4648      	mov	r0, r9
 8014b02:	f000 fbad 	bl	8015260 <__mdiff>
 8014b06:	68c2      	ldr	r2, [r0, #12]
 8014b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b0a:	4606      	mov	r6, r0
 8014b0c:	bb02      	cbnz	r2, 8014b50 <_dtoa_r+0xa40>
 8014b0e:	4601      	mov	r1, r0
 8014b10:	9802      	ldr	r0, [sp, #8]
 8014b12:	f000 fb89 	bl	8015228 <__mcmp>
 8014b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b18:	4602      	mov	r2, r0
 8014b1a:	4631      	mov	r1, r6
 8014b1c:	4648      	mov	r0, r9
 8014b1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8014b20:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b22:	f000 f94f 	bl	8014dc4 <_Bfree>
 8014b26:	9b07      	ldr	r3, [sp, #28]
 8014b28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014b2a:	9e00      	ldr	r6, [sp, #0]
 8014b2c:	ea42 0103 	orr.w	r1, r2, r3
 8014b30:	9b06      	ldr	r3, [sp, #24]
 8014b32:	4319      	orrs	r1, r3
 8014b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b36:	d10d      	bne.n	8014b54 <_dtoa_r+0xa44>
 8014b38:	2b39      	cmp	r3, #57	@ 0x39
 8014b3a:	d027      	beq.n	8014b8c <_dtoa_r+0xa7c>
 8014b3c:	9a04      	ldr	r2, [sp, #16]
 8014b3e:	2a00      	cmp	r2, #0
 8014b40:	dd01      	ble.n	8014b46 <_dtoa_r+0xa36>
 8014b42:	9b03      	ldr	r3, [sp, #12]
 8014b44:	3331      	adds	r3, #49	@ 0x31
 8014b46:	f88b 3000 	strb.w	r3, [fp]
 8014b4a:	e52e      	b.n	80145aa <_dtoa_r+0x49a>
 8014b4c:	4628      	mov	r0, r5
 8014b4e:	e7b9      	b.n	8014ac4 <_dtoa_r+0x9b4>
 8014b50:	2201      	movs	r2, #1
 8014b52:	e7e2      	b.n	8014b1a <_dtoa_r+0xa0a>
 8014b54:	9904      	ldr	r1, [sp, #16]
 8014b56:	2900      	cmp	r1, #0
 8014b58:	db04      	blt.n	8014b64 <_dtoa_r+0xa54>
 8014b5a:	9807      	ldr	r0, [sp, #28]
 8014b5c:	4301      	orrs	r1, r0
 8014b5e:	9806      	ldr	r0, [sp, #24]
 8014b60:	4301      	orrs	r1, r0
 8014b62:	d120      	bne.n	8014ba6 <_dtoa_r+0xa96>
 8014b64:	2a00      	cmp	r2, #0
 8014b66:	ddee      	ble.n	8014b46 <_dtoa_r+0xa36>
 8014b68:	9902      	ldr	r1, [sp, #8]
 8014b6a:	9300      	str	r3, [sp, #0]
 8014b6c:	2201      	movs	r2, #1
 8014b6e:	4648      	mov	r0, r9
 8014b70:	f000 faee 	bl	8015150 <__lshift>
 8014b74:	4621      	mov	r1, r4
 8014b76:	9002      	str	r0, [sp, #8]
 8014b78:	f000 fb56 	bl	8015228 <__mcmp>
 8014b7c:	2800      	cmp	r0, #0
 8014b7e:	9b00      	ldr	r3, [sp, #0]
 8014b80:	dc02      	bgt.n	8014b88 <_dtoa_r+0xa78>
 8014b82:	d1e0      	bne.n	8014b46 <_dtoa_r+0xa36>
 8014b84:	07da      	lsls	r2, r3, #31
 8014b86:	d5de      	bpl.n	8014b46 <_dtoa_r+0xa36>
 8014b88:	2b39      	cmp	r3, #57	@ 0x39
 8014b8a:	d1da      	bne.n	8014b42 <_dtoa_r+0xa32>
 8014b8c:	2339      	movs	r3, #57	@ 0x39
 8014b8e:	f88b 3000 	strb.w	r3, [fp]
 8014b92:	4633      	mov	r3, r6
 8014b94:	461e      	mov	r6, r3
 8014b96:	3b01      	subs	r3, #1
 8014b98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014b9c:	2a39      	cmp	r2, #57	@ 0x39
 8014b9e:	d04e      	beq.n	8014c3e <_dtoa_r+0xb2e>
 8014ba0:	3201      	adds	r2, #1
 8014ba2:	701a      	strb	r2, [r3, #0]
 8014ba4:	e501      	b.n	80145aa <_dtoa_r+0x49a>
 8014ba6:	2a00      	cmp	r2, #0
 8014ba8:	dd03      	ble.n	8014bb2 <_dtoa_r+0xaa2>
 8014baa:	2b39      	cmp	r3, #57	@ 0x39
 8014bac:	d0ee      	beq.n	8014b8c <_dtoa_r+0xa7c>
 8014bae:	3301      	adds	r3, #1
 8014bb0:	e7c9      	b.n	8014b46 <_dtoa_r+0xa36>
 8014bb2:	9a00      	ldr	r2, [sp, #0]
 8014bb4:	9908      	ldr	r1, [sp, #32]
 8014bb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014bba:	428a      	cmp	r2, r1
 8014bbc:	d028      	beq.n	8014c10 <_dtoa_r+0xb00>
 8014bbe:	9902      	ldr	r1, [sp, #8]
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	220a      	movs	r2, #10
 8014bc4:	4648      	mov	r0, r9
 8014bc6:	f000 f91f 	bl	8014e08 <__multadd>
 8014bca:	42af      	cmp	r7, r5
 8014bcc:	9002      	str	r0, [sp, #8]
 8014bce:	f04f 0300 	mov.w	r3, #0
 8014bd2:	f04f 020a 	mov.w	r2, #10
 8014bd6:	4639      	mov	r1, r7
 8014bd8:	4648      	mov	r0, r9
 8014bda:	d107      	bne.n	8014bec <_dtoa_r+0xadc>
 8014bdc:	f000 f914 	bl	8014e08 <__multadd>
 8014be0:	4607      	mov	r7, r0
 8014be2:	4605      	mov	r5, r0
 8014be4:	9b00      	ldr	r3, [sp, #0]
 8014be6:	3301      	adds	r3, #1
 8014be8:	9300      	str	r3, [sp, #0]
 8014bea:	e777      	b.n	8014adc <_dtoa_r+0x9cc>
 8014bec:	f000 f90c 	bl	8014e08 <__multadd>
 8014bf0:	4629      	mov	r1, r5
 8014bf2:	4607      	mov	r7, r0
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	220a      	movs	r2, #10
 8014bf8:	4648      	mov	r0, r9
 8014bfa:	f000 f905 	bl	8014e08 <__multadd>
 8014bfe:	4605      	mov	r5, r0
 8014c00:	e7f0      	b.n	8014be4 <_dtoa_r+0xad4>
 8014c02:	f1bb 0f00 	cmp.w	fp, #0
 8014c06:	bfcc      	ite	gt
 8014c08:	465e      	movgt	r6, fp
 8014c0a:	2601      	movle	r6, #1
 8014c0c:	4456      	add	r6, sl
 8014c0e:	2700      	movs	r7, #0
 8014c10:	9902      	ldr	r1, [sp, #8]
 8014c12:	9300      	str	r3, [sp, #0]
 8014c14:	2201      	movs	r2, #1
 8014c16:	4648      	mov	r0, r9
 8014c18:	f000 fa9a 	bl	8015150 <__lshift>
 8014c1c:	4621      	mov	r1, r4
 8014c1e:	9002      	str	r0, [sp, #8]
 8014c20:	f000 fb02 	bl	8015228 <__mcmp>
 8014c24:	2800      	cmp	r0, #0
 8014c26:	dcb4      	bgt.n	8014b92 <_dtoa_r+0xa82>
 8014c28:	d102      	bne.n	8014c30 <_dtoa_r+0xb20>
 8014c2a:	9b00      	ldr	r3, [sp, #0]
 8014c2c:	07db      	lsls	r3, r3, #31
 8014c2e:	d4b0      	bmi.n	8014b92 <_dtoa_r+0xa82>
 8014c30:	4633      	mov	r3, r6
 8014c32:	461e      	mov	r6, r3
 8014c34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014c38:	2a30      	cmp	r2, #48	@ 0x30
 8014c3a:	d0fa      	beq.n	8014c32 <_dtoa_r+0xb22>
 8014c3c:	e4b5      	b.n	80145aa <_dtoa_r+0x49a>
 8014c3e:	459a      	cmp	sl, r3
 8014c40:	d1a8      	bne.n	8014b94 <_dtoa_r+0xa84>
 8014c42:	2331      	movs	r3, #49	@ 0x31
 8014c44:	f108 0801 	add.w	r8, r8, #1
 8014c48:	f88a 3000 	strb.w	r3, [sl]
 8014c4c:	e4ad      	b.n	80145aa <_dtoa_r+0x49a>
 8014c4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014c50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8014cac <_dtoa_r+0xb9c>
 8014c54:	b11b      	cbz	r3, 8014c5e <_dtoa_r+0xb4e>
 8014c56:	f10a 0308 	add.w	r3, sl, #8
 8014c5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014c5c:	6013      	str	r3, [r2, #0]
 8014c5e:	4650      	mov	r0, sl
 8014c60:	b017      	add	sp, #92	@ 0x5c
 8014c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c66:	9b07      	ldr	r3, [sp, #28]
 8014c68:	2b01      	cmp	r3, #1
 8014c6a:	f77f ae2e 	ble.w	80148ca <_dtoa_r+0x7ba>
 8014c6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014c70:	9308      	str	r3, [sp, #32]
 8014c72:	2001      	movs	r0, #1
 8014c74:	e64d      	b.n	8014912 <_dtoa_r+0x802>
 8014c76:	f1bb 0f00 	cmp.w	fp, #0
 8014c7a:	f77f aed9 	ble.w	8014a30 <_dtoa_r+0x920>
 8014c7e:	4656      	mov	r6, sl
 8014c80:	9802      	ldr	r0, [sp, #8]
 8014c82:	4621      	mov	r1, r4
 8014c84:	f7ff f9b9 	bl	8013ffa <quorem>
 8014c88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8014c8c:	f806 3b01 	strb.w	r3, [r6], #1
 8014c90:	eba6 020a 	sub.w	r2, r6, sl
 8014c94:	4593      	cmp	fp, r2
 8014c96:	ddb4      	ble.n	8014c02 <_dtoa_r+0xaf2>
 8014c98:	9902      	ldr	r1, [sp, #8]
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	220a      	movs	r2, #10
 8014c9e:	4648      	mov	r0, r9
 8014ca0:	f000 f8b2 	bl	8014e08 <__multadd>
 8014ca4:	9002      	str	r0, [sp, #8]
 8014ca6:	e7eb      	b.n	8014c80 <_dtoa_r+0xb70>
 8014ca8:	0801619c 	.word	0x0801619c
 8014cac:	08016120 	.word	0x08016120

08014cb0 <_free_r>:
 8014cb0:	b538      	push	{r3, r4, r5, lr}
 8014cb2:	4605      	mov	r5, r0
 8014cb4:	2900      	cmp	r1, #0
 8014cb6:	d041      	beq.n	8014d3c <_free_r+0x8c>
 8014cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014cbc:	1f0c      	subs	r4, r1, #4
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	bfb8      	it	lt
 8014cc2:	18e4      	addlt	r4, r4, r3
 8014cc4:	f7fe fb6c 	bl	80133a0 <__malloc_lock>
 8014cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8014d40 <_free_r+0x90>)
 8014cca:	6813      	ldr	r3, [r2, #0]
 8014ccc:	b933      	cbnz	r3, 8014cdc <_free_r+0x2c>
 8014cce:	6063      	str	r3, [r4, #4]
 8014cd0:	6014      	str	r4, [r2, #0]
 8014cd2:	4628      	mov	r0, r5
 8014cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014cd8:	f7fe bb68 	b.w	80133ac <__malloc_unlock>
 8014cdc:	42a3      	cmp	r3, r4
 8014cde:	d908      	bls.n	8014cf2 <_free_r+0x42>
 8014ce0:	6820      	ldr	r0, [r4, #0]
 8014ce2:	1821      	adds	r1, r4, r0
 8014ce4:	428b      	cmp	r3, r1
 8014ce6:	bf01      	itttt	eq
 8014ce8:	6819      	ldreq	r1, [r3, #0]
 8014cea:	685b      	ldreq	r3, [r3, #4]
 8014cec:	1809      	addeq	r1, r1, r0
 8014cee:	6021      	streq	r1, [r4, #0]
 8014cf0:	e7ed      	b.n	8014cce <_free_r+0x1e>
 8014cf2:	461a      	mov	r2, r3
 8014cf4:	685b      	ldr	r3, [r3, #4]
 8014cf6:	b10b      	cbz	r3, 8014cfc <_free_r+0x4c>
 8014cf8:	42a3      	cmp	r3, r4
 8014cfa:	d9fa      	bls.n	8014cf2 <_free_r+0x42>
 8014cfc:	6811      	ldr	r1, [r2, #0]
 8014cfe:	1850      	adds	r0, r2, r1
 8014d00:	42a0      	cmp	r0, r4
 8014d02:	d10b      	bne.n	8014d1c <_free_r+0x6c>
 8014d04:	6820      	ldr	r0, [r4, #0]
 8014d06:	4401      	add	r1, r0
 8014d08:	1850      	adds	r0, r2, r1
 8014d0a:	4283      	cmp	r3, r0
 8014d0c:	6011      	str	r1, [r2, #0]
 8014d0e:	d1e0      	bne.n	8014cd2 <_free_r+0x22>
 8014d10:	6818      	ldr	r0, [r3, #0]
 8014d12:	685b      	ldr	r3, [r3, #4]
 8014d14:	6053      	str	r3, [r2, #4]
 8014d16:	4408      	add	r0, r1
 8014d18:	6010      	str	r0, [r2, #0]
 8014d1a:	e7da      	b.n	8014cd2 <_free_r+0x22>
 8014d1c:	d902      	bls.n	8014d24 <_free_r+0x74>
 8014d1e:	230c      	movs	r3, #12
 8014d20:	602b      	str	r3, [r5, #0]
 8014d22:	e7d6      	b.n	8014cd2 <_free_r+0x22>
 8014d24:	6820      	ldr	r0, [r4, #0]
 8014d26:	1821      	adds	r1, r4, r0
 8014d28:	428b      	cmp	r3, r1
 8014d2a:	bf04      	itt	eq
 8014d2c:	6819      	ldreq	r1, [r3, #0]
 8014d2e:	685b      	ldreq	r3, [r3, #4]
 8014d30:	6063      	str	r3, [r4, #4]
 8014d32:	bf04      	itt	eq
 8014d34:	1809      	addeq	r1, r1, r0
 8014d36:	6021      	streq	r1, [r4, #0]
 8014d38:	6054      	str	r4, [r2, #4]
 8014d3a:	e7ca      	b.n	8014cd2 <_free_r+0x22>
 8014d3c:	bd38      	pop	{r3, r4, r5, pc}
 8014d3e:	bf00      	nop
 8014d40:	200045ac 	.word	0x200045ac

08014d44 <_Balloc>:
 8014d44:	b570      	push	{r4, r5, r6, lr}
 8014d46:	69c6      	ldr	r6, [r0, #28]
 8014d48:	4604      	mov	r4, r0
 8014d4a:	460d      	mov	r5, r1
 8014d4c:	b976      	cbnz	r6, 8014d6c <_Balloc+0x28>
 8014d4e:	2010      	movs	r0, #16
 8014d50:	f7fe fa74 	bl	801323c <malloc>
 8014d54:	4602      	mov	r2, r0
 8014d56:	61e0      	str	r0, [r4, #28]
 8014d58:	b920      	cbnz	r0, 8014d64 <_Balloc+0x20>
 8014d5a:	4b18      	ldr	r3, [pc, #96]	@ (8014dbc <_Balloc+0x78>)
 8014d5c:	4818      	ldr	r0, [pc, #96]	@ (8014dc0 <_Balloc+0x7c>)
 8014d5e:	216b      	movs	r1, #107	@ 0x6b
 8014d60:	f000 fc16 	bl	8015590 <__assert_func>
 8014d64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014d68:	6006      	str	r6, [r0, #0]
 8014d6a:	60c6      	str	r6, [r0, #12]
 8014d6c:	69e6      	ldr	r6, [r4, #28]
 8014d6e:	68f3      	ldr	r3, [r6, #12]
 8014d70:	b183      	cbz	r3, 8014d94 <_Balloc+0x50>
 8014d72:	69e3      	ldr	r3, [r4, #28]
 8014d74:	68db      	ldr	r3, [r3, #12]
 8014d76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014d7a:	b9b8      	cbnz	r0, 8014dac <_Balloc+0x68>
 8014d7c:	2101      	movs	r1, #1
 8014d7e:	fa01 f605 	lsl.w	r6, r1, r5
 8014d82:	1d72      	adds	r2, r6, #5
 8014d84:	0092      	lsls	r2, r2, #2
 8014d86:	4620      	mov	r0, r4
 8014d88:	f000 fc20 	bl	80155cc <_calloc_r>
 8014d8c:	b160      	cbz	r0, 8014da8 <_Balloc+0x64>
 8014d8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014d92:	e00e      	b.n	8014db2 <_Balloc+0x6e>
 8014d94:	2221      	movs	r2, #33	@ 0x21
 8014d96:	2104      	movs	r1, #4
 8014d98:	4620      	mov	r0, r4
 8014d9a:	f000 fc17 	bl	80155cc <_calloc_r>
 8014d9e:	69e3      	ldr	r3, [r4, #28]
 8014da0:	60f0      	str	r0, [r6, #12]
 8014da2:	68db      	ldr	r3, [r3, #12]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d1e4      	bne.n	8014d72 <_Balloc+0x2e>
 8014da8:	2000      	movs	r0, #0
 8014daa:	bd70      	pop	{r4, r5, r6, pc}
 8014dac:	6802      	ldr	r2, [r0, #0]
 8014dae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014db2:	2300      	movs	r3, #0
 8014db4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014db8:	e7f7      	b.n	8014daa <_Balloc+0x66>
 8014dba:	bf00      	nop
 8014dbc:	0801612d 	.word	0x0801612d
 8014dc0:	080161ad 	.word	0x080161ad

08014dc4 <_Bfree>:
 8014dc4:	b570      	push	{r4, r5, r6, lr}
 8014dc6:	69c6      	ldr	r6, [r0, #28]
 8014dc8:	4605      	mov	r5, r0
 8014dca:	460c      	mov	r4, r1
 8014dcc:	b976      	cbnz	r6, 8014dec <_Bfree+0x28>
 8014dce:	2010      	movs	r0, #16
 8014dd0:	f7fe fa34 	bl	801323c <malloc>
 8014dd4:	4602      	mov	r2, r0
 8014dd6:	61e8      	str	r0, [r5, #28]
 8014dd8:	b920      	cbnz	r0, 8014de4 <_Bfree+0x20>
 8014dda:	4b09      	ldr	r3, [pc, #36]	@ (8014e00 <_Bfree+0x3c>)
 8014ddc:	4809      	ldr	r0, [pc, #36]	@ (8014e04 <_Bfree+0x40>)
 8014dde:	218f      	movs	r1, #143	@ 0x8f
 8014de0:	f000 fbd6 	bl	8015590 <__assert_func>
 8014de4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014de8:	6006      	str	r6, [r0, #0]
 8014dea:	60c6      	str	r6, [r0, #12]
 8014dec:	b13c      	cbz	r4, 8014dfe <_Bfree+0x3a>
 8014dee:	69eb      	ldr	r3, [r5, #28]
 8014df0:	6862      	ldr	r2, [r4, #4]
 8014df2:	68db      	ldr	r3, [r3, #12]
 8014df4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014df8:	6021      	str	r1, [r4, #0]
 8014dfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014dfe:	bd70      	pop	{r4, r5, r6, pc}
 8014e00:	0801612d 	.word	0x0801612d
 8014e04:	080161ad 	.word	0x080161ad

08014e08 <__multadd>:
 8014e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e0c:	690d      	ldr	r5, [r1, #16]
 8014e0e:	4607      	mov	r7, r0
 8014e10:	460c      	mov	r4, r1
 8014e12:	461e      	mov	r6, r3
 8014e14:	f101 0c14 	add.w	ip, r1, #20
 8014e18:	2000      	movs	r0, #0
 8014e1a:	f8dc 3000 	ldr.w	r3, [ip]
 8014e1e:	b299      	uxth	r1, r3
 8014e20:	fb02 6101 	mla	r1, r2, r1, r6
 8014e24:	0c1e      	lsrs	r6, r3, #16
 8014e26:	0c0b      	lsrs	r3, r1, #16
 8014e28:	fb02 3306 	mla	r3, r2, r6, r3
 8014e2c:	b289      	uxth	r1, r1
 8014e2e:	3001      	adds	r0, #1
 8014e30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014e34:	4285      	cmp	r5, r0
 8014e36:	f84c 1b04 	str.w	r1, [ip], #4
 8014e3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014e3e:	dcec      	bgt.n	8014e1a <__multadd+0x12>
 8014e40:	b30e      	cbz	r6, 8014e86 <__multadd+0x7e>
 8014e42:	68a3      	ldr	r3, [r4, #8]
 8014e44:	42ab      	cmp	r3, r5
 8014e46:	dc19      	bgt.n	8014e7c <__multadd+0x74>
 8014e48:	6861      	ldr	r1, [r4, #4]
 8014e4a:	4638      	mov	r0, r7
 8014e4c:	3101      	adds	r1, #1
 8014e4e:	f7ff ff79 	bl	8014d44 <_Balloc>
 8014e52:	4680      	mov	r8, r0
 8014e54:	b928      	cbnz	r0, 8014e62 <__multadd+0x5a>
 8014e56:	4602      	mov	r2, r0
 8014e58:	4b0c      	ldr	r3, [pc, #48]	@ (8014e8c <__multadd+0x84>)
 8014e5a:	480d      	ldr	r0, [pc, #52]	@ (8014e90 <__multadd+0x88>)
 8014e5c:	21ba      	movs	r1, #186	@ 0xba
 8014e5e:	f000 fb97 	bl	8015590 <__assert_func>
 8014e62:	6922      	ldr	r2, [r4, #16]
 8014e64:	3202      	adds	r2, #2
 8014e66:	f104 010c 	add.w	r1, r4, #12
 8014e6a:	0092      	lsls	r2, r2, #2
 8014e6c:	300c      	adds	r0, #12
 8014e6e:	f7ff f8b6 	bl	8013fde <memcpy>
 8014e72:	4621      	mov	r1, r4
 8014e74:	4638      	mov	r0, r7
 8014e76:	f7ff ffa5 	bl	8014dc4 <_Bfree>
 8014e7a:	4644      	mov	r4, r8
 8014e7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014e80:	3501      	adds	r5, #1
 8014e82:	615e      	str	r6, [r3, #20]
 8014e84:	6125      	str	r5, [r4, #16]
 8014e86:	4620      	mov	r0, r4
 8014e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e8c:	0801619c 	.word	0x0801619c
 8014e90:	080161ad 	.word	0x080161ad

08014e94 <__hi0bits>:
 8014e94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014e98:	4603      	mov	r3, r0
 8014e9a:	bf36      	itet	cc
 8014e9c:	0403      	lslcc	r3, r0, #16
 8014e9e:	2000      	movcs	r0, #0
 8014ea0:	2010      	movcc	r0, #16
 8014ea2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014ea6:	bf3c      	itt	cc
 8014ea8:	021b      	lslcc	r3, r3, #8
 8014eaa:	3008      	addcc	r0, #8
 8014eac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014eb0:	bf3c      	itt	cc
 8014eb2:	011b      	lslcc	r3, r3, #4
 8014eb4:	3004      	addcc	r0, #4
 8014eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014eba:	bf3c      	itt	cc
 8014ebc:	009b      	lslcc	r3, r3, #2
 8014ebe:	3002      	addcc	r0, #2
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	db05      	blt.n	8014ed0 <__hi0bits+0x3c>
 8014ec4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014ec8:	f100 0001 	add.w	r0, r0, #1
 8014ecc:	bf08      	it	eq
 8014ece:	2020      	moveq	r0, #32
 8014ed0:	4770      	bx	lr

08014ed2 <__lo0bits>:
 8014ed2:	6803      	ldr	r3, [r0, #0]
 8014ed4:	4602      	mov	r2, r0
 8014ed6:	f013 0007 	ands.w	r0, r3, #7
 8014eda:	d00b      	beq.n	8014ef4 <__lo0bits+0x22>
 8014edc:	07d9      	lsls	r1, r3, #31
 8014ede:	d421      	bmi.n	8014f24 <__lo0bits+0x52>
 8014ee0:	0798      	lsls	r0, r3, #30
 8014ee2:	bf49      	itett	mi
 8014ee4:	085b      	lsrmi	r3, r3, #1
 8014ee6:	089b      	lsrpl	r3, r3, #2
 8014ee8:	2001      	movmi	r0, #1
 8014eea:	6013      	strmi	r3, [r2, #0]
 8014eec:	bf5c      	itt	pl
 8014eee:	6013      	strpl	r3, [r2, #0]
 8014ef0:	2002      	movpl	r0, #2
 8014ef2:	4770      	bx	lr
 8014ef4:	b299      	uxth	r1, r3
 8014ef6:	b909      	cbnz	r1, 8014efc <__lo0bits+0x2a>
 8014ef8:	0c1b      	lsrs	r3, r3, #16
 8014efa:	2010      	movs	r0, #16
 8014efc:	b2d9      	uxtb	r1, r3
 8014efe:	b909      	cbnz	r1, 8014f04 <__lo0bits+0x32>
 8014f00:	3008      	adds	r0, #8
 8014f02:	0a1b      	lsrs	r3, r3, #8
 8014f04:	0719      	lsls	r1, r3, #28
 8014f06:	bf04      	itt	eq
 8014f08:	091b      	lsreq	r3, r3, #4
 8014f0a:	3004      	addeq	r0, #4
 8014f0c:	0799      	lsls	r1, r3, #30
 8014f0e:	bf04      	itt	eq
 8014f10:	089b      	lsreq	r3, r3, #2
 8014f12:	3002      	addeq	r0, #2
 8014f14:	07d9      	lsls	r1, r3, #31
 8014f16:	d403      	bmi.n	8014f20 <__lo0bits+0x4e>
 8014f18:	085b      	lsrs	r3, r3, #1
 8014f1a:	f100 0001 	add.w	r0, r0, #1
 8014f1e:	d003      	beq.n	8014f28 <__lo0bits+0x56>
 8014f20:	6013      	str	r3, [r2, #0]
 8014f22:	4770      	bx	lr
 8014f24:	2000      	movs	r0, #0
 8014f26:	4770      	bx	lr
 8014f28:	2020      	movs	r0, #32
 8014f2a:	4770      	bx	lr

08014f2c <__i2b>:
 8014f2c:	b510      	push	{r4, lr}
 8014f2e:	460c      	mov	r4, r1
 8014f30:	2101      	movs	r1, #1
 8014f32:	f7ff ff07 	bl	8014d44 <_Balloc>
 8014f36:	4602      	mov	r2, r0
 8014f38:	b928      	cbnz	r0, 8014f46 <__i2b+0x1a>
 8014f3a:	4b05      	ldr	r3, [pc, #20]	@ (8014f50 <__i2b+0x24>)
 8014f3c:	4805      	ldr	r0, [pc, #20]	@ (8014f54 <__i2b+0x28>)
 8014f3e:	f240 1145 	movw	r1, #325	@ 0x145
 8014f42:	f000 fb25 	bl	8015590 <__assert_func>
 8014f46:	2301      	movs	r3, #1
 8014f48:	6144      	str	r4, [r0, #20]
 8014f4a:	6103      	str	r3, [r0, #16]
 8014f4c:	bd10      	pop	{r4, pc}
 8014f4e:	bf00      	nop
 8014f50:	0801619c 	.word	0x0801619c
 8014f54:	080161ad 	.word	0x080161ad

08014f58 <__multiply>:
 8014f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f5c:	4617      	mov	r7, r2
 8014f5e:	690a      	ldr	r2, [r1, #16]
 8014f60:	693b      	ldr	r3, [r7, #16]
 8014f62:	429a      	cmp	r2, r3
 8014f64:	bfa8      	it	ge
 8014f66:	463b      	movge	r3, r7
 8014f68:	4689      	mov	r9, r1
 8014f6a:	bfa4      	itt	ge
 8014f6c:	460f      	movge	r7, r1
 8014f6e:	4699      	movge	r9, r3
 8014f70:	693d      	ldr	r5, [r7, #16]
 8014f72:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014f76:	68bb      	ldr	r3, [r7, #8]
 8014f78:	6879      	ldr	r1, [r7, #4]
 8014f7a:	eb05 060a 	add.w	r6, r5, sl
 8014f7e:	42b3      	cmp	r3, r6
 8014f80:	b085      	sub	sp, #20
 8014f82:	bfb8      	it	lt
 8014f84:	3101      	addlt	r1, #1
 8014f86:	f7ff fedd 	bl	8014d44 <_Balloc>
 8014f8a:	b930      	cbnz	r0, 8014f9a <__multiply+0x42>
 8014f8c:	4602      	mov	r2, r0
 8014f8e:	4b41      	ldr	r3, [pc, #260]	@ (8015094 <__multiply+0x13c>)
 8014f90:	4841      	ldr	r0, [pc, #260]	@ (8015098 <__multiply+0x140>)
 8014f92:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014f96:	f000 fafb 	bl	8015590 <__assert_func>
 8014f9a:	f100 0414 	add.w	r4, r0, #20
 8014f9e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8014fa2:	4623      	mov	r3, r4
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	4573      	cmp	r3, lr
 8014fa8:	d320      	bcc.n	8014fec <__multiply+0x94>
 8014faa:	f107 0814 	add.w	r8, r7, #20
 8014fae:	f109 0114 	add.w	r1, r9, #20
 8014fb2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8014fb6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8014fba:	9302      	str	r3, [sp, #8]
 8014fbc:	1beb      	subs	r3, r5, r7
 8014fbe:	3b15      	subs	r3, #21
 8014fc0:	f023 0303 	bic.w	r3, r3, #3
 8014fc4:	3304      	adds	r3, #4
 8014fc6:	3715      	adds	r7, #21
 8014fc8:	42bd      	cmp	r5, r7
 8014fca:	bf38      	it	cc
 8014fcc:	2304      	movcc	r3, #4
 8014fce:	9301      	str	r3, [sp, #4]
 8014fd0:	9b02      	ldr	r3, [sp, #8]
 8014fd2:	9103      	str	r1, [sp, #12]
 8014fd4:	428b      	cmp	r3, r1
 8014fd6:	d80c      	bhi.n	8014ff2 <__multiply+0x9a>
 8014fd8:	2e00      	cmp	r6, #0
 8014fda:	dd03      	ble.n	8014fe4 <__multiply+0x8c>
 8014fdc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d055      	beq.n	8015090 <__multiply+0x138>
 8014fe4:	6106      	str	r6, [r0, #16]
 8014fe6:	b005      	add	sp, #20
 8014fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fec:	f843 2b04 	str.w	r2, [r3], #4
 8014ff0:	e7d9      	b.n	8014fa6 <__multiply+0x4e>
 8014ff2:	f8b1 a000 	ldrh.w	sl, [r1]
 8014ff6:	f1ba 0f00 	cmp.w	sl, #0
 8014ffa:	d01f      	beq.n	801503c <__multiply+0xe4>
 8014ffc:	46c4      	mov	ip, r8
 8014ffe:	46a1      	mov	r9, r4
 8015000:	2700      	movs	r7, #0
 8015002:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015006:	f8d9 3000 	ldr.w	r3, [r9]
 801500a:	fa1f fb82 	uxth.w	fp, r2
 801500e:	b29b      	uxth	r3, r3
 8015010:	fb0a 330b 	mla	r3, sl, fp, r3
 8015014:	443b      	add	r3, r7
 8015016:	f8d9 7000 	ldr.w	r7, [r9]
 801501a:	0c12      	lsrs	r2, r2, #16
 801501c:	0c3f      	lsrs	r7, r7, #16
 801501e:	fb0a 7202 	mla	r2, sl, r2, r7
 8015022:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8015026:	b29b      	uxth	r3, r3
 8015028:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801502c:	4565      	cmp	r5, ip
 801502e:	f849 3b04 	str.w	r3, [r9], #4
 8015032:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8015036:	d8e4      	bhi.n	8015002 <__multiply+0xaa>
 8015038:	9b01      	ldr	r3, [sp, #4]
 801503a:	50e7      	str	r7, [r4, r3]
 801503c:	9b03      	ldr	r3, [sp, #12]
 801503e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015042:	3104      	adds	r1, #4
 8015044:	f1b9 0f00 	cmp.w	r9, #0
 8015048:	d020      	beq.n	801508c <__multiply+0x134>
 801504a:	6823      	ldr	r3, [r4, #0]
 801504c:	4647      	mov	r7, r8
 801504e:	46a4      	mov	ip, r4
 8015050:	f04f 0a00 	mov.w	sl, #0
 8015054:	f8b7 b000 	ldrh.w	fp, [r7]
 8015058:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801505c:	fb09 220b 	mla	r2, r9, fp, r2
 8015060:	4452      	add	r2, sl
 8015062:	b29b      	uxth	r3, r3
 8015064:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015068:	f84c 3b04 	str.w	r3, [ip], #4
 801506c:	f857 3b04 	ldr.w	r3, [r7], #4
 8015070:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015074:	f8bc 3000 	ldrh.w	r3, [ip]
 8015078:	fb09 330a 	mla	r3, r9, sl, r3
 801507c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8015080:	42bd      	cmp	r5, r7
 8015082:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015086:	d8e5      	bhi.n	8015054 <__multiply+0xfc>
 8015088:	9a01      	ldr	r2, [sp, #4]
 801508a:	50a3      	str	r3, [r4, r2]
 801508c:	3404      	adds	r4, #4
 801508e:	e79f      	b.n	8014fd0 <__multiply+0x78>
 8015090:	3e01      	subs	r6, #1
 8015092:	e7a1      	b.n	8014fd8 <__multiply+0x80>
 8015094:	0801619c 	.word	0x0801619c
 8015098:	080161ad 	.word	0x080161ad

0801509c <__pow5mult>:
 801509c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150a0:	4615      	mov	r5, r2
 80150a2:	f012 0203 	ands.w	r2, r2, #3
 80150a6:	4607      	mov	r7, r0
 80150a8:	460e      	mov	r6, r1
 80150aa:	d007      	beq.n	80150bc <__pow5mult+0x20>
 80150ac:	4c25      	ldr	r4, [pc, #148]	@ (8015144 <__pow5mult+0xa8>)
 80150ae:	3a01      	subs	r2, #1
 80150b0:	2300      	movs	r3, #0
 80150b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80150b6:	f7ff fea7 	bl	8014e08 <__multadd>
 80150ba:	4606      	mov	r6, r0
 80150bc:	10ad      	asrs	r5, r5, #2
 80150be:	d03d      	beq.n	801513c <__pow5mult+0xa0>
 80150c0:	69fc      	ldr	r4, [r7, #28]
 80150c2:	b97c      	cbnz	r4, 80150e4 <__pow5mult+0x48>
 80150c4:	2010      	movs	r0, #16
 80150c6:	f7fe f8b9 	bl	801323c <malloc>
 80150ca:	4602      	mov	r2, r0
 80150cc:	61f8      	str	r0, [r7, #28]
 80150ce:	b928      	cbnz	r0, 80150dc <__pow5mult+0x40>
 80150d0:	4b1d      	ldr	r3, [pc, #116]	@ (8015148 <__pow5mult+0xac>)
 80150d2:	481e      	ldr	r0, [pc, #120]	@ (801514c <__pow5mult+0xb0>)
 80150d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80150d8:	f000 fa5a 	bl	8015590 <__assert_func>
 80150dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80150e0:	6004      	str	r4, [r0, #0]
 80150e2:	60c4      	str	r4, [r0, #12]
 80150e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80150e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80150ec:	b94c      	cbnz	r4, 8015102 <__pow5mult+0x66>
 80150ee:	f240 2171 	movw	r1, #625	@ 0x271
 80150f2:	4638      	mov	r0, r7
 80150f4:	f7ff ff1a 	bl	8014f2c <__i2b>
 80150f8:	2300      	movs	r3, #0
 80150fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80150fe:	4604      	mov	r4, r0
 8015100:	6003      	str	r3, [r0, #0]
 8015102:	f04f 0900 	mov.w	r9, #0
 8015106:	07eb      	lsls	r3, r5, #31
 8015108:	d50a      	bpl.n	8015120 <__pow5mult+0x84>
 801510a:	4631      	mov	r1, r6
 801510c:	4622      	mov	r2, r4
 801510e:	4638      	mov	r0, r7
 8015110:	f7ff ff22 	bl	8014f58 <__multiply>
 8015114:	4631      	mov	r1, r6
 8015116:	4680      	mov	r8, r0
 8015118:	4638      	mov	r0, r7
 801511a:	f7ff fe53 	bl	8014dc4 <_Bfree>
 801511e:	4646      	mov	r6, r8
 8015120:	106d      	asrs	r5, r5, #1
 8015122:	d00b      	beq.n	801513c <__pow5mult+0xa0>
 8015124:	6820      	ldr	r0, [r4, #0]
 8015126:	b938      	cbnz	r0, 8015138 <__pow5mult+0x9c>
 8015128:	4622      	mov	r2, r4
 801512a:	4621      	mov	r1, r4
 801512c:	4638      	mov	r0, r7
 801512e:	f7ff ff13 	bl	8014f58 <__multiply>
 8015132:	6020      	str	r0, [r4, #0]
 8015134:	f8c0 9000 	str.w	r9, [r0]
 8015138:	4604      	mov	r4, r0
 801513a:	e7e4      	b.n	8015106 <__pow5mult+0x6a>
 801513c:	4630      	mov	r0, r6
 801513e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015142:	bf00      	nop
 8015144:	08016260 	.word	0x08016260
 8015148:	0801612d 	.word	0x0801612d
 801514c:	080161ad 	.word	0x080161ad

08015150 <__lshift>:
 8015150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015154:	460c      	mov	r4, r1
 8015156:	6849      	ldr	r1, [r1, #4]
 8015158:	6923      	ldr	r3, [r4, #16]
 801515a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801515e:	68a3      	ldr	r3, [r4, #8]
 8015160:	4607      	mov	r7, r0
 8015162:	4691      	mov	r9, r2
 8015164:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015168:	f108 0601 	add.w	r6, r8, #1
 801516c:	42b3      	cmp	r3, r6
 801516e:	db0b      	blt.n	8015188 <__lshift+0x38>
 8015170:	4638      	mov	r0, r7
 8015172:	f7ff fde7 	bl	8014d44 <_Balloc>
 8015176:	4605      	mov	r5, r0
 8015178:	b948      	cbnz	r0, 801518e <__lshift+0x3e>
 801517a:	4602      	mov	r2, r0
 801517c:	4b28      	ldr	r3, [pc, #160]	@ (8015220 <__lshift+0xd0>)
 801517e:	4829      	ldr	r0, [pc, #164]	@ (8015224 <__lshift+0xd4>)
 8015180:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015184:	f000 fa04 	bl	8015590 <__assert_func>
 8015188:	3101      	adds	r1, #1
 801518a:	005b      	lsls	r3, r3, #1
 801518c:	e7ee      	b.n	801516c <__lshift+0x1c>
 801518e:	2300      	movs	r3, #0
 8015190:	f100 0114 	add.w	r1, r0, #20
 8015194:	f100 0210 	add.w	r2, r0, #16
 8015198:	4618      	mov	r0, r3
 801519a:	4553      	cmp	r3, sl
 801519c:	db33      	blt.n	8015206 <__lshift+0xb6>
 801519e:	6920      	ldr	r0, [r4, #16]
 80151a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80151a4:	f104 0314 	add.w	r3, r4, #20
 80151a8:	f019 091f 	ands.w	r9, r9, #31
 80151ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80151b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80151b4:	d02b      	beq.n	801520e <__lshift+0xbe>
 80151b6:	f1c9 0e20 	rsb	lr, r9, #32
 80151ba:	468a      	mov	sl, r1
 80151bc:	2200      	movs	r2, #0
 80151be:	6818      	ldr	r0, [r3, #0]
 80151c0:	fa00 f009 	lsl.w	r0, r0, r9
 80151c4:	4310      	orrs	r0, r2
 80151c6:	f84a 0b04 	str.w	r0, [sl], #4
 80151ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80151ce:	459c      	cmp	ip, r3
 80151d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80151d4:	d8f3      	bhi.n	80151be <__lshift+0x6e>
 80151d6:	ebac 0304 	sub.w	r3, ip, r4
 80151da:	3b15      	subs	r3, #21
 80151dc:	f023 0303 	bic.w	r3, r3, #3
 80151e0:	3304      	adds	r3, #4
 80151e2:	f104 0015 	add.w	r0, r4, #21
 80151e6:	4560      	cmp	r0, ip
 80151e8:	bf88      	it	hi
 80151ea:	2304      	movhi	r3, #4
 80151ec:	50ca      	str	r2, [r1, r3]
 80151ee:	b10a      	cbz	r2, 80151f4 <__lshift+0xa4>
 80151f0:	f108 0602 	add.w	r6, r8, #2
 80151f4:	3e01      	subs	r6, #1
 80151f6:	4638      	mov	r0, r7
 80151f8:	612e      	str	r6, [r5, #16]
 80151fa:	4621      	mov	r1, r4
 80151fc:	f7ff fde2 	bl	8014dc4 <_Bfree>
 8015200:	4628      	mov	r0, r5
 8015202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015206:	f842 0f04 	str.w	r0, [r2, #4]!
 801520a:	3301      	adds	r3, #1
 801520c:	e7c5      	b.n	801519a <__lshift+0x4a>
 801520e:	3904      	subs	r1, #4
 8015210:	f853 2b04 	ldr.w	r2, [r3], #4
 8015214:	f841 2f04 	str.w	r2, [r1, #4]!
 8015218:	459c      	cmp	ip, r3
 801521a:	d8f9      	bhi.n	8015210 <__lshift+0xc0>
 801521c:	e7ea      	b.n	80151f4 <__lshift+0xa4>
 801521e:	bf00      	nop
 8015220:	0801619c 	.word	0x0801619c
 8015224:	080161ad 	.word	0x080161ad

08015228 <__mcmp>:
 8015228:	690a      	ldr	r2, [r1, #16]
 801522a:	4603      	mov	r3, r0
 801522c:	6900      	ldr	r0, [r0, #16]
 801522e:	1a80      	subs	r0, r0, r2
 8015230:	b530      	push	{r4, r5, lr}
 8015232:	d10e      	bne.n	8015252 <__mcmp+0x2a>
 8015234:	3314      	adds	r3, #20
 8015236:	3114      	adds	r1, #20
 8015238:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801523c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015240:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015244:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015248:	4295      	cmp	r5, r2
 801524a:	d003      	beq.n	8015254 <__mcmp+0x2c>
 801524c:	d205      	bcs.n	801525a <__mcmp+0x32>
 801524e:	f04f 30ff 	mov.w	r0, #4294967295
 8015252:	bd30      	pop	{r4, r5, pc}
 8015254:	42a3      	cmp	r3, r4
 8015256:	d3f3      	bcc.n	8015240 <__mcmp+0x18>
 8015258:	e7fb      	b.n	8015252 <__mcmp+0x2a>
 801525a:	2001      	movs	r0, #1
 801525c:	e7f9      	b.n	8015252 <__mcmp+0x2a>
	...

08015260 <__mdiff>:
 8015260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015264:	4689      	mov	r9, r1
 8015266:	4606      	mov	r6, r0
 8015268:	4611      	mov	r1, r2
 801526a:	4648      	mov	r0, r9
 801526c:	4614      	mov	r4, r2
 801526e:	f7ff ffdb 	bl	8015228 <__mcmp>
 8015272:	1e05      	subs	r5, r0, #0
 8015274:	d112      	bne.n	801529c <__mdiff+0x3c>
 8015276:	4629      	mov	r1, r5
 8015278:	4630      	mov	r0, r6
 801527a:	f7ff fd63 	bl	8014d44 <_Balloc>
 801527e:	4602      	mov	r2, r0
 8015280:	b928      	cbnz	r0, 801528e <__mdiff+0x2e>
 8015282:	4b3f      	ldr	r3, [pc, #252]	@ (8015380 <__mdiff+0x120>)
 8015284:	f240 2137 	movw	r1, #567	@ 0x237
 8015288:	483e      	ldr	r0, [pc, #248]	@ (8015384 <__mdiff+0x124>)
 801528a:	f000 f981 	bl	8015590 <__assert_func>
 801528e:	2301      	movs	r3, #1
 8015290:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015294:	4610      	mov	r0, r2
 8015296:	b003      	add	sp, #12
 8015298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801529c:	bfbc      	itt	lt
 801529e:	464b      	movlt	r3, r9
 80152a0:	46a1      	movlt	r9, r4
 80152a2:	4630      	mov	r0, r6
 80152a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80152a8:	bfba      	itte	lt
 80152aa:	461c      	movlt	r4, r3
 80152ac:	2501      	movlt	r5, #1
 80152ae:	2500      	movge	r5, #0
 80152b0:	f7ff fd48 	bl	8014d44 <_Balloc>
 80152b4:	4602      	mov	r2, r0
 80152b6:	b918      	cbnz	r0, 80152c0 <__mdiff+0x60>
 80152b8:	4b31      	ldr	r3, [pc, #196]	@ (8015380 <__mdiff+0x120>)
 80152ba:	f240 2145 	movw	r1, #581	@ 0x245
 80152be:	e7e3      	b.n	8015288 <__mdiff+0x28>
 80152c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80152c4:	6926      	ldr	r6, [r4, #16]
 80152c6:	60c5      	str	r5, [r0, #12]
 80152c8:	f109 0310 	add.w	r3, r9, #16
 80152cc:	f109 0514 	add.w	r5, r9, #20
 80152d0:	f104 0e14 	add.w	lr, r4, #20
 80152d4:	f100 0b14 	add.w	fp, r0, #20
 80152d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80152dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80152e0:	9301      	str	r3, [sp, #4]
 80152e2:	46d9      	mov	r9, fp
 80152e4:	f04f 0c00 	mov.w	ip, #0
 80152e8:	9b01      	ldr	r3, [sp, #4]
 80152ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80152ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80152f2:	9301      	str	r3, [sp, #4]
 80152f4:	fa1f f38a 	uxth.w	r3, sl
 80152f8:	4619      	mov	r1, r3
 80152fa:	b283      	uxth	r3, r0
 80152fc:	1acb      	subs	r3, r1, r3
 80152fe:	0c00      	lsrs	r0, r0, #16
 8015300:	4463      	add	r3, ip
 8015302:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015306:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801530a:	b29b      	uxth	r3, r3
 801530c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015310:	4576      	cmp	r6, lr
 8015312:	f849 3b04 	str.w	r3, [r9], #4
 8015316:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801531a:	d8e5      	bhi.n	80152e8 <__mdiff+0x88>
 801531c:	1b33      	subs	r3, r6, r4
 801531e:	3b15      	subs	r3, #21
 8015320:	f023 0303 	bic.w	r3, r3, #3
 8015324:	3415      	adds	r4, #21
 8015326:	3304      	adds	r3, #4
 8015328:	42a6      	cmp	r6, r4
 801532a:	bf38      	it	cc
 801532c:	2304      	movcc	r3, #4
 801532e:	441d      	add	r5, r3
 8015330:	445b      	add	r3, fp
 8015332:	461e      	mov	r6, r3
 8015334:	462c      	mov	r4, r5
 8015336:	4544      	cmp	r4, r8
 8015338:	d30e      	bcc.n	8015358 <__mdiff+0xf8>
 801533a:	f108 0103 	add.w	r1, r8, #3
 801533e:	1b49      	subs	r1, r1, r5
 8015340:	f021 0103 	bic.w	r1, r1, #3
 8015344:	3d03      	subs	r5, #3
 8015346:	45a8      	cmp	r8, r5
 8015348:	bf38      	it	cc
 801534a:	2100      	movcc	r1, #0
 801534c:	440b      	add	r3, r1
 801534e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015352:	b191      	cbz	r1, 801537a <__mdiff+0x11a>
 8015354:	6117      	str	r7, [r2, #16]
 8015356:	e79d      	b.n	8015294 <__mdiff+0x34>
 8015358:	f854 1b04 	ldr.w	r1, [r4], #4
 801535c:	46e6      	mov	lr, ip
 801535e:	0c08      	lsrs	r0, r1, #16
 8015360:	fa1c fc81 	uxtah	ip, ip, r1
 8015364:	4471      	add	r1, lr
 8015366:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801536a:	b289      	uxth	r1, r1
 801536c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015370:	f846 1b04 	str.w	r1, [r6], #4
 8015374:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015378:	e7dd      	b.n	8015336 <__mdiff+0xd6>
 801537a:	3f01      	subs	r7, #1
 801537c:	e7e7      	b.n	801534e <__mdiff+0xee>
 801537e:	bf00      	nop
 8015380:	0801619c 	.word	0x0801619c
 8015384:	080161ad 	.word	0x080161ad

08015388 <__d2b>:
 8015388:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801538c:	460f      	mov	r7, r1
 801538e:	2101      	movs	r1, #1
 8015390:	ec59 8b10 	vmov	r8, r9, d0
 8015394:	4616      	mov	r6, r2
 8015396:	f7ff fcd5 	bl	8014d44 <_Balloc>
 801539a:	4604      	mov	r4, r0
 801539c:	b930      	cbnz	r0, 80153ac <__d2b+0x24>
 801539e:	4602      	mov	r2, r0
 80153a0:	4b23      	ldr	r3, [pc, #140]	@ (8015430 <__d2b+0xa8>)
 80153a2:	4824      	ldr	r0, [pc, #144]	@ (8015434 <__d2b+0xac>)
 80153a4:	f240 310f 	movw	r1, #783	@ 0x30f
 80153a8:	f000 f8f2 	bl	8015590 <__assert_func>
 80153ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80153b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80153b4:	b10d      	cbz	r5, 80153ba <__d2b+0x32>
 80153b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80153ba:	9301      	str	r3, [sp, #4]
 80153bc:	f1b8 0300 	subs.w	r3, r8, #0
 80153c0:	d023      	beq.n	801540a <__d2b+0x82>
 80153c2:	4668      	mov	r0, sp
 80153c4:	9300      	str	r3, [sp, #0]
 80153c6:	f7ff fd84 	bl	8014ed2 <__lo0bits>
 80153ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 80153ce:	b1d0      	cbz	r0, 8015406 <__d2b+0x7e>
 80153d0:	f1c0 0320 	rsb	r3, r0, #32
 80153d4:	fa02 f303 	lsl.w	r3, r2, r3
 80153d8:	430b      	orrs	r3, r1
 80153da:	40c2      	lsrs	r2, r0
 80153dc:	6163      	str	r3, [r4, #20]
 80153de:	9201      	str	r2, [sp, #4]
 80153e0:	9b01      	ldr	r3, [sp, #4]
 80153e2:	61a3      	str	r3, [r4, #24]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	bf0c      	ite	eq
 80153e8:	2201      	moveq	r2, #1
 80153ea:	2202      	movne	r2, #2
 80153ec:	6122      	str	r2, [r4, #16]
 80153ee:	b1a5      	cbz	r5, 801541a <__d2b+0x92>
 80153f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80153f4:	4405      	add	r5, r0
 80153f6:	603d      	str	r5, [r7, #0]
 80153f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80153fc:	6030      	str	r0, [r6, #0]
 80153fe:	4620      	mov	r0, r4
 8015400:	b003      	add	sp, #12
 8015402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015406:	6161      	str	r1, [r4, #20]
 8015408:	e7ea      	b.n	80153e0 <__d2b+0x58>
 801540a:	a801      	add	r0, sp, #4
 801540c:	f7ff fd61 	bl	8014ed2 <__lo0bits>
 8015410:	9b01      	ldr	r3, [sp, #4]
 8015412:	6163      	str	r3, [r4, #20]
 8015414:	3020      	adds	r0, #32
 8015416:	2201      	movs	r2, #1
 8015418:	e7e8      	b.n	80153ec <__d2b+0x64>
 801541a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801541e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015422:	6038      	str	r0, [r7, #0]
 8015424:	6918      	ldr	r0, [r3, #16]
 8015426:	f7ff fd35 	bl	8014e94 <__hi0bits>
 801542a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801542e:	e7e5      	b.n	80153fc <__d2b+0x74>
 8015430:	0801619c 	.word	0x0801619c
 8015434:	080161ad 	.word	0x080161ad

08015438 <__sflush_r>:
 8015438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801543c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015440:	0716      	lsls	r6, r2, #28
 8015442:	4605      	mov	r5, r0
 8015444:	460c      	mov	r4, r1
 8015446:	d454      	bmi.n	80154f2 <__sflush_r+0xba>
 8015448:	684b      	ldr	r3, [r1, #4]
 801544a:	2b00      	cmp	r3, #0
 801544c:	dc02      	bgt.n	8015454 <__sflush_r+0x1c>
 801544e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015450:	2b00      	cmp	r3, #0
 8015452:	dd48      	ble.n	80154e6 <__sflush_r+0xae>
 8015454:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015456:	2e00      	cmp	r6, #0
 8015458:	d045      	beq.n	80154e6 <__sflush_r+0xae>
 801545a:	2300      	movs	r3, #0
 801545c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015460:	682f      	ldr	r7, [r5, #0]
 8015462:	6a21      	ldr	r1, [r4, #32]
 8015464:	602b      	str	r3, [r5, #0]
 8015466:	d030      	beq.n	80154ca <__sflush_r+0x92>
 8015468:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801546a:	89a3      	ldrh	r3, [r4, #12]
 801546c:	0759      	lsls	r1, r3, #29
 801546e:	d505      	bpl.n	801547c <__sflush_r+0x44>
 8015470:	6863      	ldr	r3, [r4, #4]
 8015472:	1ad2      	subs	r2, r2, r3
 8015474:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015476:	b10b      	cbz	r3, 801547c <__sflush_r+0x44>
 8015478:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801547a:	1ad2      	subs	r2, r2, r3
 801547c:	2300      	movs	r3, #0
 801547e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015480:	6a21      	ldr	r1, [r4, #32]
 8015482:	4628      	mov	r0, r5
 8015484:	47b0      	blx	r6
 8015486:	1c43      	adds	r3, r0, #1
 8015488:	89a3      	ldrh	r3, [r4, #12]
 801548a:	d106      	bne.n	801549a <__sflush_r+0x62>
 801548c:	6829      	ldr	r1, [r5, #0]
 801548e:	291d      	cmp	r1, #29
 8015490:	d82b      	bhi.n	80154ea <__sflush_r+0xb2>
 8015492:	4a2a      	ldr	r2, [pc, #168]	@ (801553c <__sflush_r+0x104>)
 8015494:	40ca      	lsrs	r2, r1
 8015496:	07d6      	lsls	r6, r2, #31
 8015498:	d527      	bpl.n	80154ea <__sflush_r+0xb2>
 801549a:	2200      	movs	r2, #0
 801549c:	6062      	str	r2, [r4, #4]
 801549e:	04d9      	lsls	r1, r3, #19
 80154a0:	6922      	ldr	r2, [r4, #16]
 80154a2:	6022      	str	r2, [r4, #0]
 80154a4:	d504      	bpl.n	80154b0 <__sflush_r+0x78>
 80154a6:	1c42      	adds	r2, r0, #1
 80154a8:	d101      	bne.n	80154ae <__sflush_r+0x76>
 80154aa:	682b      	ldr	r3, [r5, #0]
 80154ac:	b903      	cbnz	r3, 80154b0 <__sflush_r+0x78>
 80154ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80154b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80154b2:	602f      	str	r7, [r5, #0]
 80154b4:	b1b9      	cbz	r1, 80154e6 <__sflush_r+0xae>
 80154b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80154ba:	4299      	cmp	r1, r3
 80154bc:	d002      	beq.n	80154c4 <__sflush_r+0x8c>
 80154be:	4628      	mov	r0, r5
 80154c0:	f7ff fbf6 	bl	8014cb0 <_free_r>
 80154c4:	2300      	movs	r3, #0
 80154c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80154c8:	e00d      	b.n	80154e6 <__sflush_r+0xae>
 80154ca:	2301      	movs	r3, #1
 80154cc:	4628      	mov	r0, r5
 80154ce:	47b0      	blx	r6
 80154d0:	4602      	mov	r2, r0
 80154d2:	1c50      	adds	r0, r2, #1
 80154d4:	d1c9      	bne.n	801546a <__sflush_r+0x32>
 80154d6:	682b      	ldr	r3, [r5, #0]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d0c6      	beq.n	801546a <__sflush_r+0x32>
 80154dc:	2b1d      	cmp	r3, #29
 80154de:	d001      	beq.n	80154e4 <__sflush_r+0xac>
 80154e0:	2b16      	cmp	r3, #22
 80154e2:	d11e      	bne.n	8015522 <__sflush_r+0xea>
 80154e4:	602f      	str	r7, [r5, #0]
 80154e6:	2000      	movs	r0, #0
 80154e8:	e022      	b.n	8015530 <__sflush_r+0xf8>
 80154ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80154ee:	b21b      	sxth	r3, r3
 80154f0:	e01b      	b.n	801552a <__sflush_r+0xf2>
 80154f2:	690f      	ldr	r7, [r1, #16]
 80154f4:	2f00      	cmp	r7, #0
 80154f6:	d0f6      	beq.n	80154e6 <__sflush_r+0xae>
 80154f8:	0793      	lsls	r3, r2, #30
 80154fa:	680e      	ldr	r6, [r1, #0]
 80154fc:	bf08      	it	eq
 80154fe:	694b      	ldreq	r3, [r1, #20]
 8015500:	600f      	str	r7, [r1, #0]
 8015502:	bf18      	it	ne
 8015504:	2300      	movne	r3, #0
 8015506:	eba6 0807 	sub.w	r8, r6, r7
 801550a:	608b      	str	r3, [r1, #8]
 801550c:	f1b8 0f00 	cmp.w	r8, #0
 8015510:	dde9      	ble.n	80154e6 <__sflush_r+0xae>
 8015512:	6a21      	ldr	r1, [r4, #32]
 8015514:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015516:	4643      	mov	r3, r8
 8015518:	463a      	mov	r2, r7
 801551a:	4628      	mov	r0, r5
 801551c:	47b0      	blx	r6
 801551e:	2800      	cmp	r0, #0
 8015520:	dc08      	bgt.n	8015534 <__sflush_r+0xfc>
 8015522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801552a:	81a3      	strh	r3, [r4, #12]
 801552c:	f04f 30ff 	mov.w	r0, #4294967295
 8015530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015534:	4407      	add	r7, r0
 8015536:	eba8 0800 	sub.w	r8, r8, r0
 801553a:	e7e7      	b.n	801550c <__sflush_r+0xd4>
 801553c:	20400001 	.word	0x20400001

08015540 <_fflush_r>:
 8015540:	b538      	push	{r3, r4, r5, lr}
 8015542:	690b      	ldr	r3, [r1, #16]
 8015544:	4605      	mov	r5, r0
 8015546:	460c      	mov	r4, r1
 8015548:	b913      	cbnz	r3, 8015550 <_fflush_r+0x10>
 801554a:	2500      	movs	r5, #0
 801554c:	4628      	mov	r0, r5
 801554e:	bd38      	pop	{r3, r4, r5, pc}
 8015550:	b118      	cbz	r0, 801555a <_fflush_r+0x1a>
 8015552:	6a03      	ldr	r3, [r0, #32]
 8015554:	b90b      	cbnz	r3, 801555a <_fflush_r+0x1a>
 8015556:	f7fe fc11 	bl	8013d7c <__sinit>
 801555a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d0f3      	beq.n	801554a <_fflush_r+0xa>
 8015562:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015564:	07d0      	lsls	r0, r2, #31
 8015566:	d404      	bmi.n	8015572 <_fflush_r+0x32>
 8015568:	0599      	lsls	r1, r3, #22
 801556a:	d402      	bmi.n	8015572 <_fflush_r+0x32>
 801556c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801556e:	f7fe fd34 	bl	8013fda <__retarget_lock_acquire_recursive>
 8015572:	4628      	mov	r0, r5
 8015574:	4621      	mov	r1, r4
 8015576:	f7ff ff5f 	bl	8015438 <__sflush_r>
 801557a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801557c:	07da      	lsls	r2, r3, #31
 801557e:	4605      	mov	r5, r0
 8015580:	d4e4      	bmi.n	801554c <_fflush_r+0xc>
 8015582:	89a3      	ldrh	r3, [r4, #12]
 8015584:	059b      	lsls	r3, r3, #22
 8015586:	d4e1      	bmi.n	801554c <_fflush_r+0xc>
 8015588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801558a:	f7fe fd27 	bl	8013fdc <__retarget_lock_release_recursive>
 801558e:	e7dd      	b.n	801554c <_fflush_r+0xc>

08015590 <__assert_func>:
 8015590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015592:	4614      	mov	r4, r2
 8015594:	461a      	mov	r2, r3
 8015596:	4b09      	ldr	r3, [pc, #36]	@ (80155bc <__assert_func+0x2c>)
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	4605      	mov	r5, r0
 801559c:	68d8      	ldr	r0, [r3, #12]
 801559e:	b14c      	cbz	r4, 80155b4 <__assert_func+0x24>
 80155a0:	4b07      	ldr	r3, [pc, #28]	@ (80155c0 <__assert_func+0x30>)
 80155a2:	9100      	str	r1, [sp, #0]
 80155a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80155a8:	4906      	ldr	r1, [pc, #24]	@ (80155c4 <__assert_func+0x34>)
 80155aa:	462b      	mov	r3, r5
 80155ac:	f000 f842 	bl	8015634 <fiprintf>
 80155b0:	f000 f852 	bl	8015658 <abort>
 80155b4:	4b04      	ldr	r3, [pc, #16]	@ (80155c8 <__assert_func+0x38>)
 80155b6:	461c      	mov	r4, r3
 80155b8:	e7f3      	b.n	80155a2 <__assert_func+0x12>
 80155ba:	bf00      	nop
 80155bc:	20000074 	.word	0x20000074
 80155c0:	08016210 	.word	0x08016210
 80155c4:	0801621d 	.word	0x0801621d
 80155c8:	0801624b 	.word	0x0801624b

080155cc <_calloc_r>:
 80155cc:	b570      	push	{r4, r5, r6, lr}
 80155ce:	fba1 5402 	umull	r5, r4, r1, r2
 80155d2:	b934      	cbnz	r4, 80155e2 <_calloc_r+0x16>
 80155d4:	4629      	mov	r1, r5
 80155d6:	f7fd fe63 	bl	80132a0 <_malloc_r>
 80155da:	4606      	mov	r6, r0
 80155dc:	b928      	cbnz	r0, 80155ea <_calloc_r+0x1e>
 80155de:	4630      	mov	r0, r6
 80155e0:	bd70      	pop	{r4, r5, r6, pc}
 80155e2:	220c      	movs	r2, #12
 80155e4:	6002      	str	r2, [r0, #0]
 80155e6:	2600      	movs	r6, #0
 80155e8:	e7f9      	b.n	80155de <_calloc_r+0x12>
 80155ea:	462a      	mov	r2, r5
 80155ec:	4621      	mov	r1, r4
 80155ee:	f7fe fc3e 	bl	8013e6e <memset>
 80155f2:	e7f4      	b.n	80155de <_calloc_r+0x12>

080155f4 <__ascii_mbtowc>:
 80155f4:	b082      	sub	sp, #8
 80155f6:	b901      	cbnz	r1, 80155fa <__ascii_mbtowc+0x6>
 80155f8:	a901      	add	r1, sp, #4
 80155fa:	b142      	cbz	r2, 801560e <__ascii_mbtowc+0x1a>
 80155fc:	b14b      	cbz	r3, 8015612 <__ascii_mbtowc+0x1e>
 80155fe:	7813      	ldrb	r3, [r2, #0]
 8015600:	600b      	str	r3, [r1, #0]
 8015602:	7812      	ldrb	r2, [r2, #0]
 8015604:	1e10      	subs	r0, r2, #0
 8015606:	bf18      	it	ne
 8015608:	2001      	movne	r0, #1
 801560a:	b002      	add	sp, #8
 801560c:	4770      	bx	lr
 801560e:	4610      	mov	r0, r2
 8015610:	e7fb      	b.n	801560a <__ascii_mbtowc+0x16>
 8015612:	f06f 0001 	mvn.w	r0, #1
 8015616:	e7f8      	b.n	801560a <__ascii_mbtowc+0x16>

08015618 <__ascii_wctomb>:
 8015618:	4603      	mov	r3, r0
 801561a:	4608      	mov	r0, r1
 801561c:	b141      	cbz	r1, 8015630 <__ascii_wctomb+0x18>
 801561e:	2aff      	cmp	r2, #255	@ 0xff
 8015620:	d904      	bls.n	801562c <__ascii_wctomb+0x14>
 8015622:	228a      	movs	r2, #138	@ 0x8a
 8015624:	601a      	str	r2, [r3, #0]
 8015626:	f04f 30ff 	mov.w	r0, #4294967295
 801562a:	4770      	bx	lr
 801562c:	700a      	strb	r2, [r1, #0]
 801562e:	2001      	movs	r0, #1
 8015630:	4770      	bx	lr
	...

08015634 <fiprintf>:
 8015634:	b40e      	push	{r1, r2, r3}
 8015636:	b503      	push	{r0, r1, lr}
 8015638:	4601      	mov	r1, r0
 801563a:	ab03      	add	r3, sp, #12
 801563c:	4805      	ldr	r0, [pc, #20]	@ (8015654 <fiprintf+0x20>)
 801563e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015642:	6800      	ldr	r0, [r0, #0]
 8015644:	9301      	str	r3, [sp, #4]
 8015646:	f000 f837 	bl	80156b8 <_vfiprintf_r>
 801564a:	b002      	add	sp, #8
 801564c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015650:	b003      	add	sp, #12
 8015652:	4770      	bx	lr
 8015654:	20000074 	.word	0x20000074

08015658 <abort>:
 8015658:	b508      	push	{r3, lr}
 801565a:	2006      	movs	r0, #6
 801565c:	f000 fa00 	bl	8015a60 <raise>
 8015660:	2001      	movs	r0, #1
 8015662:	f7ec ffc7 	bl	80025f4 <_exit>

08015666 <__sfputc_r>:
 8015666:	6893      	ldr	r3, [r2, #8]
 8015668:	3b01      	subs	r3, #1
 801566a:	2b00      	cmp	r3, #0
 801566c:	b410      	push	{r4}
 801566e:	6093      	str	r3, [r2, #8]
 8015670:	da08      	bge.n	8015684 <__sfputc_r+0x1e>
 8015672:	6994      	ldr	r4, [r2, #24]
 8015674:	42a3      	cmp	r3, r4
 8015676:	db01      	blt.n	801567c <__sfputc_r+0x16>
 8015678:	290a      	cmp	r1, #10
 801567a:	d103      	bne.n	8015684 <__sfputc_r+0x1e>
 801567c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015680:	f000 b932 	b.w	80158e8 <__swbuf_r>
 8015684:	6813      	ldr	r3, [r2, #0]
 8015686:	1c58      	adds	r0, r3, #1
 8015688:	6010      	str	r0, [r2, #0]
 801568a:	7019      	strb	r1, [r3, #0]
 801568c:	4608      	mov	r0, r1
 801568e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015692:	4770      	bx	lr

08015694 <__sfputs_r>:
 8015694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015696:	4606      	mov	r6, r0
 8015698:	460f      	mov	r7, r1
 801569a:	4614      	mov	r4, r2
 801569c:	18d5      	adds	r5, r2, r3
 801569e:	42ac      	cmp	r4, r5
 80156a0:	d101      	bne.n	80156a6 <__sfputs_r+0x12>
 80156a2:	2000      	movs	r0, #0
 80156a4:	e007      	b.n	80156b6 <__sfputs_r+0x22>
 80156a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156aa:	463a      	mov	r2, r7
 80156ac:	4630      	mov	r0, r6
 80156ae:	f7ff ffda 	bl	8015666 <__sfputc_r>
 80156b2:	1c43      	adds	r3, r0, #1
 80156b4:	d1f3      	bne.n	801569e <__sfputs_r+0xa>
 80156b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080156b8 <_vfiprintf_r>:
 80156b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156bc:	460d      	mov	r5, r1
 80156be:	b09d      	sub	sp, #116	@ 0x74
 80156c0:	4614      	mov	r4, r2
 80156c2:	4698      	mov	r8, r3
 80156c4:	4606      	mov	r6, r0
 80156c6:	b118      	cbz	r0, 80156d0 <_vfiprintf_r+0x18>
 80156c8:	6a03      	ldr	r3, [r0, #32]
 80156ca:	b90b      	cbnz	r3, 80156d0 <_vfiprintf_r+0x18>
 80156cc:	f7fe fb56 	bl	8013d7c <__sinit>
 80156d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80156d2:	07d9      	lsls	r1, r3, #31
 80156d4:	d405      	bmi.n	80156e2 <_vfiprintf_r+0x2a>
 80156d6:	89ab      	ldrh	r3, [r5, #12]
 80156d8:	059a      	lsls	r2, r3, #22
 80156da:	d402      	bmi.n	80156e2 <_vfiprintf_r+0x2a>
 80156dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80156de:	f7fe fc7c 	bl	8013fda <__retarget_lock_acquire_recursive>
 80156e2:	89ab      	ldrh	r3, [r5, #12]
 80156e4:	071b      	lsls	r3, r3, #28
 80156e6:	d501      	bpl.n	80156ec <_vfiprintf_r+0x34>
 80156e8:	692b      	ldr	r3, [r5, #16]
 80156ea:	b99b      	cbnz	r3, 8015714 <_vfiprintf_r+0x5c>
 80156ec:	4629      	mov	r1, r5
 80156ee:	4630      	mov	r0, r6
 80156f0:	f000 f938 	bl	8015964 <__swsetup_r>
 80156f4:	b170      	cbz	r0, 8015714 <_vfiprintf_r+0x5c>
 80156f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80156f8:	07dc      	lsls	r4, r3, #31
 80156fa:	d504      	bpl.n	8015706 <_vfiprintf_r+0x4e>
 80156fc:	f04f 30ff 	mov.w	r0, #4294967295
 8015700:	b01d      	add	sp, #116	@ 0x74
 8015702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015706:	89ab      	ldrh	r3, [r5, #12]
 8015708:	0598      	lsls	r0, r3, #22
 801570a:	d4f7      	bmi.n	80156fc <_vfiprintf_r+0x44>
 801570c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801570e:	f7fe fc65 	bl	8013fdc <__retarget_lock_release_recursive>
 8015712:	e7f3      	b.n	80156fc <_vfiprintf_r+0x44>
 8015714:	2300      	movs	r3, #0
 8015716:	9309      	str	r3, [sp, #36]	@ 0x24
 8015718:	2320      	movs	r3, #32
 801571a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801571e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015722:	2330      	movs	r3, #48	@ 0x30
 8015724:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80158d4 <_vfiprintf_r+0x21c>
 8015728:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801572c:	f04f 0901 	mov.w	r9, #1
 8015730:	4623      	mov	r3, r4
 8015732:	469a      	mov	sl, r3
 8015734:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015738:	b10a      	cbz	r2, 801573e <_vfiprintf_r+0x86>
 801573a:	2a25      	cmp	r2, #37	@ 0x25
 801573c:	d1f9      	bne.n	8015732 <_vfiprintf_r+0x7a>
 801573e:	ebba 0b04 	subs.w	fp, sl, r4
 8015742:	d00b      	beq.n	801575c <_vfiprintf_r+0xa4>
 8015744:	465b      	mov	r3, fp
 8015746:	4622      	mov	r2, r4
 8015748:	4629      	mov	r1, r5
 801574a:	4630      	mov	r0, r6
 801574c:	f7ff ffa2 	bl	8015694 <__sfputs_r>
 8015750:	3001      	adds	r0, #1
 8015752:	f000 80a7 	beq.w	80158a4 <_vfiprintf_r+0x1ec>
 8015756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015758:	445a      	add	r2, fp
 801575a:	9209      	str	r2, [sp, #36]	@ 0x24
 801575c:	f89a 3000 	ldrb.w	r3, [sl]
 8015760:	2b00      	cmp	r3, #0
 8015762:	f000 809f 	beq.w	80158a4 <_vfiprintf_r+0x1ec>
 8015766:	2300      	movs	r3, #0
 8015768:	f04f 32ff 	mov.w	r2, #4294967295
 801576c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015770:	f10a 0a01 	add.w	sl, sl, #1
 8015774:	9304      	str	r3, [sp, #16]
 8015776:	9307      	str	r3, [sp, #28]
 8015778:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801577c:	931a      	str	r3, [sp, #104]	@ 0x68
 801577e:	4654      	mov	r4, sl
 8015780:	2205      	movs	r2, #5
 8015782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015786:	4853      	ldr	r0, [pc, #332]	@ (80158d4 <_vfiprintf_r+0x21c>)
 8015788:	f7ea fd22 	bl	80001d0 <memchr>
 801578c:	9a04      	ldr	r2, [sp, #16]
 801578e:	b9d8      	cbnz	r0, 80157c8 <_vfiprintf_r+0x110>
 8015790:	06d1      	lsls	r1, r2, #27
 8015792:	bf44      	itt	mi
 8015794:	2320      	movmi	r3, #32
 8015796:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801579a:	0713      	lsls	r3, r2, #28
 801579c:	bf44      	itt	mi
 801579e:	232b      	movmi	r3, #43	@ 0x2b
 80157a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80157a4:	f89a 3000 	ldrb.w	r3, [sl]
 80157a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80157aa:	d015      	beq.n	80157d8 <_vfiprintf_r+0x120>
 80157ac:	9a07      	ldr	r2, [sp, #28]
 80157ae:	4654      	mov	r4, sl
 80157b0:	2000      	movs	r0, #0
 80157b2:	f04f 0c0a 	mov.w	ip, #10
 80157b6:	4621      	mov	r1, r4
 80157b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80157bc:	3b30      	subs	r3, #48	@ 0x30
 80157be:	2b09      	cmp	r3, #9
 80157c0:	d94b      	bls.n	801585a <_vfiprintf_r+0x1a2>
 80157c2:	b1b0      	cbz	r0, 80157f2 <_vfiprintf_r+0x13a>
 80157c4:	9207      	str	r2, [sp, #28]
 80157c6:	e014      	b.n	80157f2 <_vfiprintf_r+0x13a>
 80157c8:	eba0 0308 	sub.w	r3, r0, r8
 80157cc:	fa09 f303 	lsl.w	r3, r9, r3
 80157d0:	4313      	orrs	r3, r2
 80157d2:	9304      	str	r3, [sp, #16]
 80157d4:	46a2      	mov	sl, r4
 80157d6:	e7d2      	b.n	801577e <_vfiprintf_r+0xc6>
 80157d8:	9b03      	ldr	r3, [sp, #12]
 80157da:	1d19      	adds	r1, r3, #4
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	9103      	str	r1, [sp, #12]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	bfbb      	ittet	lt
 80157e4:	425b      	neglt	r3, r3
 80157e6:	f042 0202 	orrlt.w	r2, r2, #2
 80157ea:	9307      	strge	r3, [sp, #28]
 80157ec:	9307      	strlt	r3, [sp, #28]
 80157ee:	bfb8      	it	lt
 80157f0:	9204      	strlt	r2, [sp, #16]
 80157f2:	7823      	ldrb	r3, [r4, #0]
 80157f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80157f6:	d10a      	bne.n	801580e <_vfiprintf_r+0x156>
 80157f8:	7863      	ldrb	r3, [r4, #1]
 80157fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80157fc:	d132      	bne.n	8015864 <_vfiprintf_r+0x1ac>
 80157fe:	9b03      	ldr	r3, [sp, #12]
 8015800:	1d1a      	adds	r2, r3, #4
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	9203      	str	r2, [sp, #12]
 8015806:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801580a:	3402      	adds	r4, #2
 801580c:	9305      	str	r3, [sp, #20]
 801580e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80158e4 <_vfiprintf_r+0x22c>
 8015812:	7821      	ldrb	r1, [r4, #0]
 8015814:	2203      	movs	r2, #3
 8015816:	4650      	mov	r0, sl
 8015818:	f7ea fcda 	bl	80001d0 <memchr>
 801581c:	b138      	cbz	r0, 801582e <_vfiprintf_r+0x176>
 801581e:	9b04      	ldr	r3, [sp, #16]
 8015820:	eba0 000a 	sub.w	r0, r0, sl
 8015824:	2240      	movs	r2, #64	@ 0x40
 8015826:	4082      	lsls	r2, r0
 8015828:	4313      	orrs	r3, r2
 801582a:	3401      	adds	r4, #1
 801582c:	9304      	str	r3, [sp, #16]
 801582e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015832:	4829      	ldr	r0, [pc, #164]	@ (80158d8 <_vfiprintf_r+0x220>)
 8015834:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015838:	2206      	movs	r2, #6
 801583a:	f7ea fcc9 	bl	80001d0 <memchr>
 801583e:	2800      	cmp	r0, #0
 8015840:	d03f      	beq.n	80158c2 <_vfiprintf_r+0x20a>
 8015842:	4b26      	ldr	r3, [pc, #152]	@ (80158dc <_vfiprintf_r+0x224>)
 8015844:	bb1b      	cbnz	r3, 801588e <_vfiprintf_r+0x1d6>
 8015846:	9b03      	ldr	r3, [sp, #12]
 8015848:	3307      	adds	r3, #7
 801584a:	f023 0307 	bic.w	r3, r3, #7
 801584e:	3308      	adds	r3, #8
 8015850:	9303      	str	r3, [sp, #12]
 8015852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015854:	443b      	add	r3, r7
 8015856:	9309      	str	r3, [sp, #36]	@ 0x24
 8015858:	e76a      	b.n	8015730 <_vfiprintf_r+0x78>
 801585a:	fb0c 3202 	mla	r2, ip, r2, r3
 801585e:	460c      	mov	r4, r1
 8015860:	2001      	movs	r0, #1
 8015862:	e7a8      	b.n	80157b6 <_vfiprintf_r+0xfe>
 8015864:	2300      	movs	r3, #0
 8015866:	3401      	adds	r4, #1
 8015868:	9305      	str	r3, [sp, #20]
 801586a:	4619      	mov	r1, r3
 801586c:	f04f 0c0a 	mov.w	ip, #10
 8015870:	4620      	mov	r0, r4
 8015872:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015876:	3a30      	subs	r2, #48	@ 0x30
 8015878:	2a09      	cmp	r2, #9
 801587a:	d903      	bls.n	8015884 <_vfiprintf_r+0x1cc>
 801587c:	2b00      	cmp	r3, #0
 801587e:	d0c6      	beq.n	801580e <_vfiprintf_r+0x156>
 8015880:	9105      	str	r1, [sp, #20]
 8015882:	e7c4      	b.n	801580e <_vfiprintf_r+0x156>
 8015884:	fb0c 2101 	mla	r1, ip, r1, r2
 8015888:	4604      	mov	r4, r0
 801588a:	2301      	movs	r3, #1
 801588c:	e7f0      	b.n	8015870 <_vfiprintf_r+0x1b8>
 801588e:	ab03      	add	r3, sp, #12
 8015890:	9300      	str	r3, [sp, #0]
 8015892:	462a      	mov	r2, r5
 8015894:	4b12      	ldr	r3, [pc, #72]	@ (80158e0 <_vfiprintf_r+0x228>)
 8015896:	a904      	add	r1, sp, #16
 8015898:	4630      	mov	r0, r6
 801589a:	f7fd fe2d 	bl	80134f8 <_printf_float>
 801589e:	4607      	mov	r7, r0
 80158a0:	1c78      	adds	r0, r7, #1
 80158a2:	d1d6      	bne.n	8015852 <_vfiprintf_r+0x19a>
 80158a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80158a6:	07d9      	lsls	r1, r3, #31
 80158a8:	d405      	bmi.n	80158b6 <_vfiprintf_r+0x1fe>
 80158aa:	89ab      	ldrh	r3, [r5, #12]
 80158ac:	059a      	lsls	r2, r3, #22
 80158ae:	d402      	bmi.n	80158b6 <_vfiprintf_r+0x1fe>
 80158b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80158b2:	f7fe fb93 	bl	8013fdc <__retarget_lock_release_recursive>
 80158b6:	89ab      	ldrh	r3, [r5, #12]
 80158b8:	065b      	lsls	r3, r3, #25
 80158ba:	f53f af1f 	bmi.w	80156fc <_vfiprintf_r+0x44>
 80158be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80158c0:	e71e      	b.n	8015700 <_vfiprintf_r+0x48>
 80158c2:	ab03      	add	r3, sp, #12
 80158c4:	9300      	str	r3, [sp, #0]
 80158c6:	462a      	mov	r2, r5
 80158c8:	4b05      	ldr	r3, [pc, #20]	@ (80158e0 <_vfiprintf_r+0x228>)
 80158ca:	a904      	add	r1, sp, #16
 80158cc:	4630      	mov	r0, r6
 80158ce:	f7fe f8ab 	bl	8013a28 <_printf_i>
 80158d2:	e7e4      	b.n	801589e <_vfiprintf_r+0x1e6>
 80158d4:	0801624c 	.word	0x0801624c
 80158d8:	08016256 	.word	0x08016256
 80158dc:	080134f9 	.word	0x080134f9
 80158e0:	08015695 	.word	0x08015695
 80158e4:	08016252 	.word	0x08016252

080158e8 <__swbuf_r>:
 80158e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158ea:	460e      	mov	r6, r1
 80158ec:	4614      	mov	r4, r2
 80158ee:	4605      	mov	r5, r0
 80158f0:	b118      	cbz	r0, 80158fa <__swbuf_r+0x12>
 80158f2:	6a03      	ldr	r3, [r0, #32]
 80158f4:	b90b      	cbnz	r3, 80158fa <__swbuf_r+0x12>
 80158f6:	f7fe fa41 	bl	8013d7c <__sinit>
 80158fa:	69a3      	ldr	r3, [r4, #24]
 80158fc:	60a3      	str	r3, [r4, #8]
 80158fe:	89a3      	ldrh	r3, [r4, #12]
 8015900:	071a      	lsls	r2, r3, #28
 8015902:	d501      	bpl.n	8015908 <__swbuf_r+0x20>
 8015904:	6923      	ldr	r3, [r4, #16]
 8015906:	b943      	cbnz	r3, 801591a <__swbuf_r+0x32>
 8015908:	4621      	mov	r1, r4
 801590a:	4628      	mov	r0, r5
 801590c:	f000 f82a 	bl	8015964 <__swsetup_r>
 8015910:	b118      	cbz	r0, 801591a <__swbuf_r+0x32>
 8015912:	f04f 37ff 	mov.w	r7, #4294967295
 8015916:	4638      	mov	r0, r7
 8015918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801591a:	6823      	ldr	r3, [r4, #0]
 801591c:	6922      	ldr	r2, [r4, #16]
 801591e:	1a98      	subs	r0, r3, r2
 8015920:	6963      	ldr	r3, [r4, #20]
 8015922:	b2f6      	uxtb	r6, r6
 8015924:	4283      	cmp	r3, r0
 8015926:	4637      	mov	r7, r6
 8015928:	dc05      	bgt.n	8015936 <__swbuf_r+0x4e>
 801592a:	4621      	mov	r1, r4
 801592c:	4628      	mov	r0, r5
 801592e:	f7ff fe07 	bl	8015540 <_fflush_r>
 8015932:	2800      	cmp	r0, #0
 8015934:	d1ed      	bne.n	8015912 <__swbuf_r+0x2a>
 8015936:	68a3      	ldr	r3, [r4, #8]
 8015938:	3b01      	subs	r3, #1
 801593a:	60a3      	str	r3, [r4, #8]
 801593c:	6823      	ldr	r3, [r4, #0]
 801593e:	1c5a      	adds	r2, r3, #1
 8015940:	6022      	str	r2, [r4, #0]
 8015942:	701e      	strb	r6, [r3, #0]
 8015944:	6962      	ldr	r2, [r4, #20]
 8015946:	1c43      	adds	r3, r0, #1
 8015948:	429a      	cmp	r2, r3
 801594a:	d004      	beq.n	8015956 <__swbuf_r+0x6e>
 801594c:	89a3      	ldrh	r3, [r4, #12]
 801594e:	07db      	lsls	r3, r3, #31
 8015950:	d5e1      	bpl.n	8015916 <__swbuf_r+0x2e>
 8015952:	2e0a      	cmp	r6, #10
 8015954:	d1df      	bne.n	8015916 <__swbuf_r+0x2e>
 8015956:	4621      	mov	r1, r4
 8015958:	4628      	mov	r0, r5
 801595a:	f7ff fdf1 	bl	8015540 <_fflush_r>
 801595e:	2800      	cmp	r0, #0
 8015960:	d0d9      	beq.n	8015916 <__swbuf_r+0x2e>
 8015962:	e7d6      	b.n	8015912 <__swbuf_r+0x2a>

08015964 <__swsetup_r>:
 8015964:	b538      	push	{r3, r4, r5, lr}
 8015966:	4b29      	ldr	r3, [pc, #164]	@ (8015a0c <__swsetup_r+0xa8>)
 8015968:	4605      	mov	r5, r0
 801596a:	6818      	ldr	r0, [r3, #0]
 801596c:	460c      	mov	r4, r1
 801596e:	b118      	cbz	r0, 8015978 <__swsetup_r+0x14>
 8015970:	6a03      	ldr	r3, [r0, #32]
 8015972:	b90b      	cbnz	r3, 8015978 <__swsetup_r+0x14>
 8015974:	f7fe fa02 	bl	8013d7c <__sinit>
 8015978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801597c:	0719      	lsls	r1, r3, #28
 801597e:	d422      	bmi.n	80159c6 <__swsetup_r+0x62>
 8015980:	06da      	lsls	r2, r3, #27
 8015982:	d407      	bmi.n	8015994 <__swsetup_r+0x30>
 8015984:	2209      	movs	r2, #9
 8015986:	602a      	str	r2, [r5, #0]
 8015988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801598c:	81a3      	strh	r3, [r4, #12]
 801598e:	f04f 30ff 	mov.w	r0, #4294967295
 8015992:	e033      	b.n	80159fc <__swsetup_r+0x98>
 8015994:	0758      	lsls	r0, r3, #29
 8015996:	d512      	bpl.n	80159be <__swsetup_r+0x5a>
 8015998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801599a:	b141      	cbz	r1, 80159ae <__swsetup_r+0x4a>
 801599c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80159a0:	4299      	cmp	r1, r3
 80159a2:	d002      	beq.n	80159aa <__swsetup_r+0x46>
 80159a4:	4628      	mov	r0, r5
 80159a6:	f7ff f983 	bl	8014cb0 <_free_r>
 80159aa:	2300      	movs	r3, #0
 80159ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80159ae:	89a3      	ldrh	r3, [r4, #12]
 80159b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80159b4:	81a3      	strh	r3, [r4, #12]
 80159b6:	2300      	movs	r3, #0
 80159b8:	6063      	str	r3, [r4, #4]
 80159ba:	6923      	ldr	r3, [r4, #16]
 80159bc:	6023      	str	r3, [r4, #0]
 80159be:	89a3      	ldrh	r3, [r4, #12]
 80159c0:	f043 0308 	orr.w	r3, r3, #8
 80159c4:	81a3      	strh	r3, [r4, #12]
 80159c6:	6923      	ldr	r3, [r4, #16]
 80159c8:	b94b      	cbnz	r3, 80159de <__swsetup_r+0x7a>
 80159ca:	89a3      	ldrh	r3, [r4, #12]
 80159cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80159d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80159d4:	d003      	beq.n	80159de <__swsetup_r+0x7a>
 80159d6:	4621      	mov	r1, r4
 80159d8:	4628      	mov	r0, r5
 80159da:	f000 f883 	bl	8015ae4 <__smakebuf_r>
 80159de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159e2:	f013 0201 	ands.w	r2, r3, #1
 80159e6:	d00a      	beq.n	80159fe <__swsetup_r+0x9a>
 80159e8:	2200      	movs	r2, #0
 80159ea:	60a2      	str	r2, [r4, #8]
 80159ec:	6962      	ldr	r2, [r4, #20]
 80159ee:	4252      	negs	r2, r2
 80159f0:	61a2      	str	r2, [r4, #24]
 80159f2:	6922      	ldr	r2, [r4, #16]
 80159f4:	b942      	cbnz	r2, 8015a08 <__swsetup_r+0xa4>
 80159f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80159fa:	d1c5      	bne.n	8015988 <__swsetup_r+0x24>
 80159fc:	bd38      	pop	{r3, r4, r5, pc}
 80159fe:	0799      	lsls	r1, r3, #30
 8015a00:	bf58      	it	pl
 8015a02:	6962      	ldrpl	r2, [r4, #20]
 8015a04:	60a2      	str	r2, [r4, #8]
 8015a06:	e7f4      	b.n	80159f2 <__swsetup_r+0x8e>
 8015a08:	2000      	movs	r0, #0
 8015a0a:	e7f7      	b.n	80159fc <__swsetup_r+0x98>
 8015a0c:	20000074 	.word	0x20000074

08015a10 <_raise_r>:
 8015a10:	291f      	cmp	r1, #31
 8015a12:	b538      	push	{r3, r4, r5, lr}
 8015a14:	4605      	mov	r5, r0
 8015a16:	460c      	mov	r4, r1
 8015a18:	d904      	bls.n	8015a24 <_raise_r+0x14>
 8015a1a:	2316      	movs	r3, #22
 8015a1c:	6003      	str	r3, [r0, #0]
 8015a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8015a22:	bd38      	pop	{r3, r4, r5, pc}
 8015a24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015a26:	b112      	cbz	r2, 8015a2e <_raise_r+0x1e>
 8015a28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015a2c:	b94b      	cbnz	r3, 8015a42 <_raise_r+0x32>
 8015a2e:	4628      	mov	r0, r5
 8015a30:	f000 f830 	bl	8015a94 <_getpid_r>
 8015a34:	4622      	mov	r2, r4
 8015a36:	4601      	mov	r1, r0
 8015a38:	4628      	mov	r0, r5
 8015a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a3e:	f000 b817 	b.w	8015a70 <_kill_r>
 8015a42:	2b01      	cmp	r3, #1
 8015a44:	d00a      	beq.n	8015a5c <_raise_r+0x4c>
 8015a46:	1c59      	adds	r1, r3, #1
 8015a48:	d103      	bne.n	8015a52 <_raise_r+0x42>
 8015a4a:	2316      	movs	r3, #22
 8015a4c:	6003      	str	r3, [r0, #0]
 8015a4e:	2001      	movs	r0, #1
 8015a50:	e7e7      	b.n	8015a22 <_raise_r+0x12>
 8015a52:	2100      	movs	r1, #0
 8015a54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015a58:	4620      	mov	r0, r4
 8015a5a:	4798      	blx	r3
 8015a5c:	2000      	movs	r0, #0
 8015a5e:	e7e0      	b.n	8015a22 <_raise_r+0x12>

08015a60 <raise>:
 8015a60:	4b02      	ldr	r3, [pc, #8]	@ (8015a6c <raise+0xc>)
 8015a62:	4601      	mov	r1, r0
 8015a64:	6818      	ldr	r0, [r3, #0]
 8015a66:	f7ff bfd3 	b.w	8015a10 <_raise_r>
 8015a6a:	bf00      	nop
 8015a6c:	20000074 	.word	0x20000074

08015a70 <_kill_r>:
 8015a70:	b538      	push	{r3, r4, r5, lr}
 8015a72:	4d07      	ldr	r5, [pc, #28]	@ (8015a90 <_kill_r+0x20>)
 8015a74:	2300      	movs	r3, #0
 8015a76:	4604      	mov	r4, r0
 8015a78:	4608      	mov	r0, r1
 8015a7a:	4611      	mov	r1, r2
 8015a7c:	602b      	str	r3, [r5, #0]
 8015a7e:	f7ec fda9 	bl	80025d4 <_kill>
 8015a82:	1c43      	adds	r3, r0, #1
 8015a84:	d102      	bne.n	8015a8c <_kill_r+0x1c>
 8015a86:	682b      	ldr	r3, [r5, #0]
 8015a88:	b103      	cbz	r3, 8015a8c <_kill_r+0x1c>
 8015a8a:	6023      	str	r3, [r4, #0]
 8015a8c:	bd38      	pop	{r3, r4, r5, pc}
 8015a8e:	bf00      	nop
 8015a90:	200046ec 	.word	0x200046ec

08015a94 <_getpid_r>:
 8015a94:	f7ec bd96 	b.w	80025c4 <_getpid>

08015a98 <__swhatbuf_r>:
 8015a98:	b570      	push	{r4, r5, r6, lr}
 8015a9a:	460c      	mov	r4, r1
 8015a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015aa0:	2900      	cmp	r1, #0
 8015aa2:	b096      	sub	sp, #88	@ 0x58
 8015aa4:	4615      	mov	r5, r2
 8015aa6:	461e      	mov	r6, r3
 8015aa8:	da0d      	bge.n	8015ac6 <__swhatbuf_r+0x2e>
 8015aaa:	89a3      	ldrh	r3, [r4, #12]
 8015aac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015ab0:	f04f 0100 	mov.w	r1, #0
 8015ab4:	bf14      	ite	ne
 8015ab6:	2340      	movne	r3, #64	@ 0x40
 8015ab8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015abc:	2000      	movs	r0, #0
 8015abe:	6031      	str	r1, [r6, #0]
 8015ac0:	602b      	str	r3, [r5, #0]
 8015ac2:	b016      	add	sp, #88	@ 0x58
 8015ac4:	bd70      	pop	{r4, r5, r6, pc}
 8015ac6:	466a      	mov	r2, sp
 8015ac8:	f000 f848 	bl	8015b5c <_fstat_r>
 8015acc:	2800      	cmp	r0, #0
 8015ace:	dbec      	blt.n	8015aaa <__swhatbuf_r+0x12>
 8015ad0:	9901      	ldr	r1, [sp, #4]
 8015ad2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015ad6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015ada:	4259      	negs	r1, r3
 8015adc:	4159      	adcs	r1, r3
 8015ade:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015ae2:	e7eb      	b.n	8015abc <__swhatbuf_r+0x24>

08015ae4 <__smakebuf_r>:
 8015ae4:	898b      	ldrh	r3, [r1, #12]
 8015ae6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ae8:	079d      	lsls	r5, r3, #30
 8015aea:	4606      	mov	r6, r0
 8015aec:	460c      	mov	r4, r1
 8015aee:	d507      	bpl.n	8015b00 <__smakebuf_r+0x1c>
 8015af0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015af4:	6023      	str	r3, [r4, #0]
 8015af6:	6123      	str	r3, [r4, #16]
 8015af8:	2301      	movs	r3, #1
 8015afa:	6163      	str	r3, [r4, #20]
 8015afc:	b003      	add	sp, #12
 8015afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b00:	ab01      	add	r3, sp, #4
 8015b02:	466a      	mov	r2, sp
 8015b04:	f7ff ffc8 	bl	8015a98 <__swhatbuf_r>
 8015b08:	9f00      	ldr	r7, [sp, #0]
 8015b0a:	4605      	mov	r5, r0
 8015b0c:	4639      	mov	r1, r7
 8015b0e:	4630      	mov	r0, r6
 8015b10:	f7fd fbc6 	bl	80132a0 <_malloc_r>
 8015b14:	b948      	cbnz	r0, 8015b2a <__smakebuf_r+0x46>
 8015b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b1a:	059a      	lsls	r2, r3, #22
 8015b1c:	d4ee      	bmi.n	8015afc <__smakebuf_r+0x18>
 8015b1e:	f023 0303 	bic.w	r3, r3, #3
 8015b22:	f043 0302 	orr.w	r3, r3, #2
 8015b26:	81a3      	strh	r3, [r4, #12]
 8015b28:	e7e2      	b.n	8015af0 <__smakebuf_r+0xc>
 8015b2a:	89a3      	ldrh	r3, [r4, #12]
 8015b2c:	6020      	str	r0, [r4, #0]
 8015b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015b32:	81a3      	strh	r3, [r4, #12]
 8015b34:	9b01      	ldr	r3, [sp, #4]
 8015b36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015b3a:	b15b      	cbz	r3, 8015b54 <__smakebuf_r+0x70>
 8015b3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b40:	4630      	mov	r0, r6
 8015b42:	f000 f81d 	bl	8015b80 <_isatty_r>
 8015b46:	b128      	cbz	r0, 8015b54 <__smakebuf_r+0x70>
 8015b48:	89a3      	ldrh	r3, [r4, #12]
 8015b4a:	f023 0303 	bic.w	r3, r3, #3
 8015b4e:	f043 0301 	orr.w	r3, r3, #1
 8015b52:	81a3      	strh	r3, [r4, #12]
 8015b54:	89a3      	ldrh	r3, [r4, #12]
 8015b56:	431d      	orrs	r5, r3
 8015b58:	81a5      	strh	r5, [r4, #12]
 8015b5a:	e7cf      	b.n	8015afc <__smakebuf_r+0x18>

08015b5c <_fstat_r>:
 8015b5c:	b538      	push	{r3, r4, r5, lr}
 8015b5e:	4d07      	ldr	r5, [pc, #28]	@ (8015b7c <_fstat_r+0x20>)
 8015b60:	2300      	movs	r3, #0
 8015b62:	4604      	mov	r4, r0
 8015b64:	4608      	mov	r0, r1
 8015b66:	4611      	mov	r1, r2
 8015b68:	602b      	str	r3, [r5, #0]
 8015b6a:	f7ec fd93 	bl	8002694 <_fstat>
 8015b6e:	1c43      	adds	r3, r0, #1
 8015b70:	d102      	bne.n	8015b78 <_fstat_r+0x1c>
 8015b72:	682b      	ldr	r3, [r5, #0]
 8015b74:	b103      	cbz	r3, 8015b78 <_fstat_r+0x1c>
 8015b76:	6023      	str	r3, [r4, #0]
 8015b78:	bd38      	pop	{r3, r4, r5, pc}
 8015b7a:	bf00      	nop
 8015b7c:	200046ec 	.word	0x200046ec

08015b80 <_isatty_r>:
 8015b80:	b538      	push	{r3, r4, r5, lr}
 8015b82:	4d06      	ldr	r5, [pc, #24]	@ (8015b9c <_isatty_r+0x1c>)
 8015b84:	2300      	movs	r3, #0
 8015b86:	4604      	mov	r4, r0
 8015b88:	4608      	mov	r0, r1
 8015b8a:	602b      	str	r3, [r5, #0]
 8015b8c:	f7ec fd92 	bl	80026b4 <_isatty>
 8015b90:	1c43      	adds	r3, r0, #1
 8015b92:	d102      	bne.n	8015b9a <_isatty_r+0x1a>
 8015b94:	682b      	ldr	r3, [r5, #0]
 8015b96:	b103      	cbz	r3, 8015b9a <_isatty_r+0x1a>
 8015b98:	6023      	str	r3, [r4, #0]
 8015b9a:	bd38      	pop	{r3, r4, r5, pc}
 8015b9c:	200046ec 	.word	0x200046ec

08015ba0 <_init>:
 8015ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ba2:	bf00      	nop
 8015ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ba6:	bc08      	pop	{r3}
 8015ba8:	469e      	mov	lr, r3
 8015baa:	4770      	bx	lr

08015bac <_fini>:
 8015bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bae:	bf00      	nop
 8015bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015bb2:	bc08      	pop	{r3}
 8015bb4:	469e      	mov	lr, r3
 8015bb6:	4770      	bx	lr
