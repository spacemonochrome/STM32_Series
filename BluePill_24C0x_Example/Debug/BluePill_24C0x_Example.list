
BluePill_24C0x_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a44  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  08005b58  08005b58  00006b58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006084  08006084  000081e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006084  08006084  00007084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800608c  0800608c  000081e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800608c  0800608c  0000708c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006090  08006090  00007090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08006094  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200001e0  08006274  000081e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08006274  000083a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000645c  00000000  00000000  00008209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001496  00000000  00000000  0000e665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0000fb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a6  00000000  00000000  00010270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017858  00000000  00000000  00010816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096e0  00000000  00000000  0002806e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ead  00000000  00000000  0003174e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b55fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e18  00000000  00000000  000b5640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000b8458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b3c 	.word	0x08005b3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08005b3c 	.word	0x08005b3c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <writeEEPROM>:
    I2C_HandleTypeDef* _i2c;
    uint16_t size;
} _24Cx;

HAL_StatusTypeDef writeEEPROM(_24Cx eeprom, uint8_t address, const void* data, uint16_t size)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b08b      	sub	sp, #44	@ 0x2c
 8000a8c:	af04      	add	r7, sp, #16
 8000a8e:	1d3c      	adds	r4, r7, #4
 8000a90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000a94:	70fb      	strb	r3, [r7, #3]
    if (address + size > eeprom.size) {
 8000a96:	78fa      	ldrb	r2, [r7, #3]
 8000a98:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a9a:	4413      	add	r3, r2
 8000a9c:	89ba      	ldrh	r2, [r7, #12]
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	dd01      	ble.n	8000aa6 <writeEEPROM+0x1e>
        return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e018      	b.n	8000ad8 <writeEEPROM+0x50>
    }
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(
 8000aa6:	68b8      	ldr	r0, [r7, #8]
        eeprom._i2c,
        (eeprom.ADDR << 1),
 8000aa8:	793b      	ldrb	r3, [r7, #4]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	b299      	uxth	r1, r3
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	9302      	str	r3, [sp, #8]
 8000ab8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000aba:	9301      	str	r3, [sp, #4]
 8000abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	f001 f81d 	bl	8001b00 <HAL_I2C_Mem_Write>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	75fb      	strb	r3, [r7, #23]
        I2C_MEMADD_SIZE_8BIT,
        (uint8_t*)data,
        size,
        HAL_MAX_DELAY
    );
    if (status == HAL_OK) {
 8000aca:	7dfb      	ldrb	r3, [r7, #23]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <writeEEPROM+0x4e>
        HAL_Delay(5); // EEPROM write cycle time
 8000ad0:	2005      	movs	r0, #5
 8000ad2:	f000 fc2d 	bl	8001330 <HAL_Delay>
    }
    return status;
 8000ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	371c      	adds	r7, #28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd90      	pop	{r4, r7, pc}

08000ae0 <readEEPROM>:

HAL_StatusTypeDef readEEPROM(_24Cx eeprom, uint8_t address, void* data, uint16_t size)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b089      	sub	sp, #36	@ 0x24
 8000ae4:	af04      	add	r7, sp, #16
 8000ae6:	1d3c      	adds	r4, r7, #4
 8000ae8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000aec:	70fb      	strb	r3, [r7, #3]
    if (address + size > eeprom.size) {
 8000aee:	78fa      	ldrb	r2, [r7, #3]
 8000af0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000af2:	4413      	add	r3, r2
 8000af4:	89ba      	ldrh	r2, [r7, #12]
 8000af6:	4293      	cmp	r3, r2
 8000af8:	dd01      	ble.n	8000afe <readEEPROM+0x1e>
        return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e010      	b.n	8000b20 <readEEPROM+0x40>
    }
    return HAL_I2C_Mem_Read(
 8000afe:	68b8      	ldr	r0, [r7, #8]
        eeprom._i2c,
        (eeprom.ADDR << 1),
 8000b00:	793b      	ldrb	r3, [r7, #4]
    return HAL_I2C_Mem_Read(
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	b299      	uxth	r1, r3
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	9302      	str	r3, [sp, #8]
 8000b10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	6a3b      	ldr	r3, [r7, #32]
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	2301      	movs	r3, #1
 8000b1a:	f001 f8eb 	bl	8001cf4 <HAL_I2C_Mem_Read>
 8000b1e:	4603      	mov	r3, r0
        I2C_MEMADD_SIZE_8BIT,
        (uint8_t*)data,
        size,
        HAL_MAX_DELAY
    );
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}

08000b28 <checkEEPROMConnection>:

void checkEEPROMConnection(_24Cx eeprom)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af04      	add	r7, sp, #16
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    HAL_StatusTypeDef result;
    uint8_t readData = 0x00;
 8000b34:	2300      	movs	r3, #0
 8000b36:	75bb      	strb	r3, [r7, #22]

    result = HAL_I2C_Mem_Read(eeprom._i2c, (eeprom.ADDR << 1), 0x00, I2C_MEMADD_SIZE_8BIT, &readData, 1, HAL_MAX_DELAY);
 8000b38:	68b8      	ldr	r0, [r7, #8]
 8000b3a:	793b      	ldrb	r3, [r7, #4]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	b299      	uxth	r1, r3
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	9302      	str	r3, [sp, #8]
 8000b46:	2301      	movs	r3, #1
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	f107 0316 	add.w	r3, r7, #22
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2301      	movs	r3, #1
 8000b52:	2200      	movs	r2, #0
 8000b54:	f001 f8ce 	bl	8001cf4 <HAL_I2C_Mem_Read>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	75fb      	strb	r3, [r7, #23]

    if (result == HAL_OK)
 8000b5c:	7dfb      	ldrb	r3, [r7, #23]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d105      	bne.n	8000b6e <checkEEPROMConnection+0x46>
    {
        printf("EEPROM baglantisi basarili! Okunan veri: 0x%02X\r\n", readData);
 8000b62:	7dbb      	ldrb	r3, [r7, #22]
 8000b64:	4619      	mov	r1, r3
 8000b66:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <checkEEPROMConnection+0x54>)
 8000b68:	f003 f804 	bl	8003b74 <iprintf>
    }
    else
    {
        printf("EEPROM baglantisi basarisiz!\r\n");
    }
}
 8000b6c:	e002      	b.n	8000b74 <checkEEPROMConnection+0x4c>
        printf("EEPROM baglantisi basarisiz!\r\n");
 8000b6e:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <checkEEPROMConnection+0x58>)
 8000b70:	f003 f868 	bl	8003c44 <puts>
}
 8000b74:	bf00      	nop
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	08005b58 	.word	0x08005b58
 8000b80:	08005b8c 	.word	0x08005b8c

08000b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	@ 0x28
 8000b88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8a:	f000 fb6f 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8e:	f000 f911 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b92:	f000 f983 	bl	8000e9c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b96:	f000 f953 	bl	8000e40 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  checkEEPROMConnection(eeprom);
 8000b9a:	4b77      	ldr	r3, [pc, #476]	@ (8000d78 <main+0x1f4>)
 8000b9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ba0:	f7ff ffc2 	bl	8000b28 <checkEEPROMConnection>

  // Örnek veri tipleri
    uint8_t u8_data = 0xAA;
 8000ba4:	23aa      	movs	r3, #170	@ 0xaa
 8000ba6:	777b      	strb	r3, [r7, #29]
    int16_t i16_data = -1234;
 8000ba8:	f64f 332e 	movw	r3, #64302	@ 0xfb2e
 8000bac:	837b      	strh	r3, [r7, #26]
    uint32_t u32_data = 12345678;
 8000bae:	4b73      	ldr	r3, [pc, #460]	@ (8000d7c <main+0x1f8>)
 8000bb0:	617b      	str	r3, [r7, #20]
    float f_data = 3.14159;
 8000bb2:	4b73      	ldr	r3, [pc, #460]	@ (8000d80 <main+0x1fc>)
 8000bb4:	613b      	str	r3, [r7, #16]

    // EEPROM'a yazma
    uint8_t address = 0x00; // Başlangıç adresi
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	77fb      	strb	r3, [r7, #31]
    HAL_StatusTypeDef status;

    // uint8_t yaz
    status = writeEEPROM(eeprom, address, &u8_data, sizeof(u8_data));
 8000bba:	7ff9      	ldrb	r1, [r7, #31]
 8000bbc:	4a6e      	ldr	r2, [pc, #440]	@ (8000d78 <main+0x1f4>)
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	9301      	str	r3, [sp, #4]
 8000bc2:	f107 031d 	add.w	r3, r7, #29
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bcc:	f7ff ff5c 	bl	8000a88 <writeEEPROM>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	77bb      	strb	r3, [r7, #30]
    if (status != HAL_OK) printf("uint8_t yazma hatası: %d\n", status);
 8000bd4:	7fbb      	ldrb	r3, [r7, #30]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d004      	beq.n	8000be4 <main+0x60>
 8000bda:	7fbb      	ldrb	r3, [r7, #30]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4869      	ldr	r0, [pc, #420]	@ (8000d84 <main+0x200>)
 8000be0:	f002 ffc8 	bl	8003b74 <iprintf>
    address += sizeof(u8_data);
 8000be4:	7ffb      	ldrb	r3, [r7, #31]
 8000be6:	3301      	adds	r3, #1
 8000be8:	77fb      	strb	r3, [r7, #31]

    // int16_t yaz
    status = writeEEPROM(eeprom, address, &i16_data, sizeof(i16_data));
 8000bea:	7ff9      	ldrb	r1, [r7, #31]
 8000bec:	4a62      	ldr	r2, [pc, #392]	@ (8000d78 <main+0x1f4>)
 8000bee:	2302      	movs	r3, #2
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	f107 031a 	add.w	r3, r7, #26
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bfc:	f7ff ff44 	bl	8000a88 <writeEEPROM>
 8000c00:	4603      	mov	r3, r0
 8000c02:	77bb      	strb	r3, [r7, #30]
    if (status != HAL_OK) printf("int16_t yazma hatası: %d\n", status);
 8000c04:	7fbb      	ldrb	r3, [r7, #30]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d004      	beq.n	8000c14 <main+0x90>
 8000c0a:	7fbb      	ldrb	r3, [r7, #30]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	485e      	ldr	r0, [pc, #376]	@ (8000d88 <main+0x204>)
 8000c10:	f002 ffb0 	bl	8003b74 <iprintf>
    address += sizeof(i16_data);
 8000c14:	7ffb      	ldrb	r3, [r7, #31]
 8000c16:	3302      	adds	r3, #2
 8000c18:	77fb      	strb	r3, [r7, #31]

    // uint32_t yaz
    status = writeEEPROM(eeprom, address, &u32_data, sizeof(u32_data));
 8000c1a:	7ff9      	ldrb	r1, [r7, #31]
 8000c1c:	4a56      	ldr	r2, [pc, #344]	@ (8000d78 <main+0x1f4>)
 8000c1e:	2304      	movs	r3, #4
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c2c:	f7ff ff2c 	bl	8000a88 <writeEEPROM>
 8000c30:	4603      	mov	r3, r0
 8000c32:	77bb      	strb	r3, [r7, #30]
    if (status != HAL_OK) printf("uint32_t yazma hatası: %d\n", status);
 8000c34:	7fbb      	ldrb	r3, [r7, #30]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d004      	beq.n	8000c44 <main+0xc0>
 8000c3a:	7fbb      	ldrb	r3, [r7, #30]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4853      	ldr	r0, [pc, #332]	@ (8000d8c <main+0x208>)
 8000c40:	f002 ff98 	bl	8003b74 <iprintf>
    address += sizeof(u32_data);
 8000c44:	7ffb      	ldrb	r3, [r7, #31]
 8000c46:	3304      	adds	r3, #4
 8000c48:	77fb      	strb	r3, [r7, #31]

    // float yaz
    status = writeEEPROM(eeprom, address, &f_data, sizeof(f_data));
 8000c4a:	7ff9      	ldrb	r1, [r7, #31]
 8000c4c:	4a4a      	ldr	r2, [pc, #296]	@ (8000d78 <main+0x1f4>)
 8000c4e:	2304      	movs	r3, #4
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c5c:	f7ff ff14 	bl	8000a88 <writeEEPROM>
 8000c60:	4603      	mov	r3, r0
 8000c62:	77bb      	strb	r3, [r7, #30]
    if (status != HAL_OK) printf("float yazma hatası: %d\n", status);
 8000c64:	7fbb      	ldrb	r3, [r7, #30]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d004      	beq.n	8000c74 <main+0xf0>
 8000c6a:	7fbb      	ldrb	r3, [r7, #30]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4848      	ldr	r0, [pc, #288]	@ (8000d90 <main+0x20c>)
 8000c70:	f002 ff80 	bl	8003b74 <iprintf>
    address += sizeof(f_data);
 8000c74:	7ffb      	ldrb	r3, [r7, #31]
 8000c76:	3304      	adds	r3, #4
 8000c78:	77fb      	strb	r3, [r7, #31]

    // EEPROM'dan okuma
    address = 0x00; // Adresi sıfırla
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	77fb      	strb	r3, [r7, #31]
    int16_t i16_read;
    uint32_t u32_read;
    float f_read;

    // uint8_t oku
    status = readEEPROM(eeprom, address, &u8_read, sizeof(u8_read));
 8000c7e:	7ff9      	ldrb	r1, [r7, #31]
 8000c80:	4a3d      	ldr	r2, [pc, #244]	@ (8000d78 <main+0x1f4>)
 8000c82:	2301      	movs	r3, #1
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	f107 030f 	add.w	r3, r7, #15
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c90:	f7ff ff26 	bl	8000ae0 <readEEPROM>
 8000c94:	4603      	mov	r3, r0
 8000c96:	77bb      	strb	r3, [r7, #30]
    if (status == HAL_OK) printf("Okunan uint8_t: 0x%02X\n", u8_read);
 8000c98:	7fbb      	ldrb	r3, [r7, #30]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d105      	bne.n	8000caa <main+0x126>
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	483c      	ldr	r0, [pc, #240]	@ (8000d94 <main+0x210>)
 8000ca4:	f002 ff66 	bl	8003b74 <iprintf>
 8000ca8:	e004      	b.n	8000cb4 <main+0x130>
    else printf("uint8_t okuma hatası: %d\n", status);
 8000caa:	7fbb      	ldrb	r3, [r7, #30]
 8000cac:	4619      	mov	r1, r3
 8000cae:	483a      	ldr	r0, [pc, #232]	@ (8000d98 <main+0x214>)
 8000cb0:	f002 ff60 	bl	8003b74 <iprintf>
    address += sizeof(u8_read);
 8000cb4:	7ffb      	ldrb	r3, [r7, #31]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	77fb      	strb	r3, [r7, #31]

    // int16_t oku
    status = readEEPROM(eeprom, address, &i16_read, sizeof(i16_read));
 8000cba:	7ff9      	ldrb	r1, [r7, #31]
 8000cbc:	4a2e      	ldr	r2, [pc, #184]	@ (8000d78 <main+0x1f4>)
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	9301      	str	r3, [sp, #4]
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ccc:	f7ff ff08 	bl	8000ae0 <readEEPROM>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	77bb      	strb	r3, [r7, #30]
    if (status == HAL_OK) printf("Okunan int16_t: %d\n", i16_read);
 8000cd4:	7fbb      	ldrb	r3, [r7, #30]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d106      	bne.n	8000ce8 <main+0x164>
 8000cda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	482e      	ldr	r0, [pc, #184]	@ (8000d9c <main+0x218>)
 8000ce2:	f002 ff47 	bl	8003b74 <iprintf>
 8000ce6:	e004      	b.n	8000cf2 <main+0x16e>
    else printf("int16_t okuma hatası: %d\n", status);
 8000ce8:	7fbb      	ldrb	r3, [r7, #30]
 8000cea:	4619      	mov	r1, r3
 8000cec:	482c      	ldr	r0, [pc, #176]	@ (8000da0 <main+0x21c>)
 8000cee:	f002 ff41 	bl	8003b74 <iprintf>
    address += sizeof(i16_read);
 8000cf2:	7ffb      	ldrb	r3, [r7, #31]
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	77fb      	strb	r3, [r7, #31]

    // uint32_t oku
    status = readEEPROM(eeprom, address, &u32_read, sizeof(u32_read));
 8000cf8:	7ff9      	ldrb	r1, [r7, #31]
 8000cfa:	4a1f      	ldr	r2, [pc, #124]	@ (8000d78 <main+0x1f4>)
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	460b      	mov	r3, r1
 8000d08:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d0a:	f7ff fee9 	bl	8000ae0 <readEEPROM>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	77bb      	strb	r3, [r7, #30]
    if (status == HAL_OK) printf("Okunan uint32_t: %lu \n", u32_read);
 8000d12:	7fbb      	ldrb	r3, [r7, #30]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d105      	bne.n	8000d24 <main+0x1a0>
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4821      	ldr	r0, [pc, #132]	@ (8000da4 <main+0x220>)
 8000d1e:	f002 ff29 	bl	8003b74 <iprintf>
 8000d22:	e004      	b.n	8000d2e <main+0x1aa>
    else printf("uint32_t okuma hatası: %d\n", status);
 8000d24:	7fbb      	ldrb	r3, [r7, #30]
 8000d26:	4619      	mov	r1, r3
 8000d28:	481f      	ldr	r0, [pc, #124]	@ (8000da8 <main+0x224>)
 8000d2a:	f002 ff23 	bl	8003b74 <iprintf>
    address += sizeof(u32_read);
 8000d2e:	7ffb      	ldrb	r3, [r7, #31]
 8000d30:	3304      	adds	r3, #4
 8000d32:	77fb      	strb	r3, [r7, #31]

    // float oku
    status = readEEPROM(eeprom, address, &f_read, sizeof(f_read));
 8000d34:	7ff9      	ldrb	r1, [r7, #31]
 8000d36:	4a10      	ldr	r2, [pc, #64]	@ (8000d78 <main+0x1f4>)
 8000d38:	2304      	movs	r3, #4
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	460b      	mov	r3, r1
 8000d42:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d44:	f7ff fecc 	bl	8000ae0 <readEEPROM>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	77bb      	strb	r3, [r7, #30]
    if (status == HAL_OK) printf("Okunan float: %.5f\n", f_read);
 8000d4c:	7fbb      	ldrb	r3, [r7, #30]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d109      	bne.n	8000d66 <main+0x1e2>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fb67 	bl	8000428 <__aeabi_f2d>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	4813      	ldr	r0, [pc, #76]	@ (8000dac <main+0x228>)
 8000d60:	f002 ff08 	bl	8003b74 <iprintf>
 8000d64:	e005      	b.n	8000d72 <main+0x1ee>
    else printf("float okuma hatası: %d\n", status);
 8000d66:	7fbb      	ldrb	r3, [r7, #30]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4811      	ldr	r0, [pc, #68]	@ (8000db0 <main+0x22c>)
 8000d6c:	f002 ff02 	bl	8003b74 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	e7fd      	b.n	8000d72 <main+0x1ee>
 8000d76:	bf00      	nop
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	00bc614e 	.word	0x00bc614e
 8000d80:	40490fd0 	.word	0x40490fd0
 8000d84:	08005bac 	.word	0x08005bac
 8000d88:	08005bc8 	.word	0x08005bc8
 8000d8c:	08005be4 	.word	0x08005be4
 8000d90:	08005c00 	.word	0x08005c00
 8000d94:	08005c1c 	.word	0x08005c1c
 8000d98:	08005c34 	.word	0x08005c34
 8000d9c:	08005c50 	.word	0x08005c50
 8000da0:	08005c64 	.word	0x08005c64
 8000da4:	08005c80 	.word	0x08005c80
 8000da8:	08005c98 	.word	0x08005c98
 8000dac:	08005cb4 	.word	0x08005cb4
 8000db0:	08005cc8 	.word	0x08005cc8

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b090      	sub	sp, #64	@ 0x40
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0318 	add.w	r3, r7, #24
 8000dbe:	2228      	movs	r2, #40	@ 0x28
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f003 f81e 	bl	8003e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de8:	2302      	movs	r3, #2
 8000dea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000df2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df8:	f107 0318 	add.w	r3, r7, #24
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 fda1 	bl	8002944 <HAL_RCC_OscConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e08:	f000 f8a0 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e10:	2302      	movs	r3, #2
 8000e12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2102      	movs	r1, #2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 f80e 	bl	8002e48 <HAL_RCC_ClockConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e32:	f000 f88b 	bl	8000f4c <Error_Handler>
  }
}
 8000e36:	bf00      	nop
 8000e38:	3740      	adds	r7, #64	@ 0x40
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e46:	4a13      	ldr	r2, [pc, #76]	@ (8000e94 <MX_I2C1_Init+0x54>)
 8000e48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e4c:	4a12      	ldr	r2, [pc, #72]	@ (8000e98 <MX_I2C1_Init+0x58>)
 8000e4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e6a:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e70:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e7c:	4804      	ldr	r0, [pc, #16]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e7e:	f000 fcfb 	bl	8001878 <HAL_I2C_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e88:	f000 f860 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200001fc 	.word	0x200001fc
 8000e94:	40005400 	.word	0x40005400
 8000e98:	00061a80 	.word	0x00061a80

08000e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb0:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <MX_GPIO_Init+0xa8>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a23      	ldr	r2, [pc, #140]	@ (8000f44 <MX_GPIO_Init+0xa8>)
 8000eb6:	f043 0310 	orr.w	r3, r3, #16
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <MX_GPIO_Init+0xa8>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f003 0310 	and.w	r3, r3, #16
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <MX_GPIO_Init+0xa8>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8000f44 <MX_GPIO_Init+0xa8>)
 8000ece:	f043 0320 	orr.w	r3, r3, #32
 8000ed2:	6193      	str	r3, [r2, #24]
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MX_GPIO_Init+0xa8>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0320 	and.w	r3, r3, #32
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <MX_GPIO_Init+0xa8>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a17      	ldr	r2, [pc, #92]	@ (8000f44 <MX_GPIO_Init+0xa8>)
 8000ee6:	f043 0304 	orr.w	r3, r3, #4
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <MX_GPIO_Init+0xa8>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_GPIO_Init+0xa8>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a11      	ldr	r2, [pc, #68]	@ (8000f44 <MX_GPIO_Init+0xa8>)
 8000efe:	f043 0308 	orr.w	r3, r3, #8
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_GPIO_Init+0xa8>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0308 	and.w	r3, r3, #8
 8000f0c:	603b      	str	r3, [r7, #0]
 8000f0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f16:	480c      	ldr	r0, [pc, #48]	@ (8000f48 <MX_GPIO_Init+0xac>)
 8000f18:	f000 fc96 	bl	8001848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	4619      	mov	r1, r3
 8000f34:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <MX_GPIO_Init+0xac>)
 8000f36:	f000 fb03 	bl	8001540 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40011000 	.word	0x40011000

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <Error_Handler+0x8>

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <HAL_MspInit+0x5c>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <HAL_MspInit+0x5c>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6193      	str	r3, [r2, #24]
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_MspInit+0x5c>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <HAL_MspInit+0x5c>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb4 <HAL_MspInit+0x5c>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <HAL_MspInit+0x5c>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <HAL_MspInit+0x60>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <HAL_MspInit+0x60>)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010000 	.word	0x40010000

08000fbc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a15      	ldr	r2, [pc, #84]	@ (800102c <HAL_I2C_MspInit+0x70>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d123      	bne.n	8001024 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <HAL_I2C_MspInit+0x74>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a13      	ldr	r2, [pc, #76]	@ (8001030 <HAL_I2C_MspInit+0x74>)
 8000fe2:	f043 0308 	orr.w	r3, r3, #8
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <HAL_I2C_MspInit+0x74>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ff4:	23c0      	movs	r3, #192	@ 0xc0
 8000ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff8:	2312      	movs	r3, #18
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	4619      	mov	r1, r3
 8001006:	480b      	ldr	r0, [pc, #44]	@ (8001034 <HAL_I2C_MspInit+0x78>)
 8001008:	f000 fa9a 	bl	8001540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800100c:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <HAL_I2C_MspInit+0x74>)
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	4a07      	ldr	r2, [pc, #28]	@ (8001030 <HAL_I2C_MspInit+0x74>)
 8001012:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001016:	61d3      	str	r3, [r2, #28]
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <HAL_I2C_MspInit+0x74>)
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001024:	bf00      	nop
 8001026:	3720      	adds	r7, #32
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40005400 	.word	0x40005400
 8001030:	40021000 	.word	0x40021000
 8001034:	40010c00 	.word	0x40010c00

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <NMI_Handler+0x4>

08001040 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <HardFault_Handler+0x4>

08001048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <MemManage_Handler+0x4>

08001050 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <BusFault_Handler+0x4>

08001058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <UsageFault_Handler+0x4>

08001060 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001088:	f000 f936 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return 1;
 8001094:	2301      	movs	r3, #1
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <_kill>:

int _kill(int pid, int sig)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010a8:	f002 fefe 	bl	8003ea8 <__errno>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2216      	movs	r2, #22
 80010b0:	601a      	str	r2, [r3, #0]
  return -1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_exit>:

void _exit (int status)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010c6:	f04f 31ff 	mov.w	r1, #4294967295
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffe7 	bl	800109e <_kill>
  while (1) {}    /* Make sure we hang here */
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <_exit+0x12>

080010d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	e00a      	b.n	80010fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010e6:	f3af 8000 	nop.w
 80010ea:	4601      	mov	r1, r0
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	60ba      	str	r2, [r7, #8]
 80010f2:	b2ca      	uxtb	r2, r1
 80010f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	3301      	adds	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	dbf0      	blt.n	80010e6 <_read+0x12>
  }

  return len;
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	e009      	b.n	8001134 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	60ba      	str	r2, [r7, #8]
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3301      	adds	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	429a      	cmp	r2, r3
 800113a:	dbf1      	blt.n	8001120 <_write+0x12>
  }
  return len;
 800113c:	687b      	ldr	r3, [r7, #4]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <_close>:

int _close(int file)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800116c:	605a      	str	r2, [r3, #4]
  return 0;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr

0800117a <_isatty>:

int _isatty(int file)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800118e:	b480      	push	{r7}
 8001190:	b085      	sub	sp, #20
 8001192:	af00      	add	r7, sp, #0
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
	...

080011a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b0:	4a14      	ldr	r2, [pc, #80]	@ (8001204 <_sbrk+0x5c>)
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <_sbrk+0x60>)
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <_sbrk+0x64>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	@ (8001210 <_sbrk+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d207      	bcs.n	80011e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d8:	f002 fe66 	bl	8003ea8 <__errno>
 80011dc:	4603      	mov	r3, r0
 80011de:	220c      	movs	r2, #12
 80011e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	e009      	b.n	80011fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ee:	4b07      	ldr	r3, [pc, #28]	@ (800120c <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a05      	ldr	r2, [pc, #20]	@ (800120c <_sbrk+0x64>)
 80011f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20005000 	.word	0x20005000
 8001208:	00000400 	.word	0x00000400
 800120c:	20000250 	.word	0x20000250
 8001210:	200003a8 	.word	0x200003a8

08001214 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001220:	f7ff fff8 	bl	8001214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001224:	480b      	ldr	r0, [pc, #44]	@ (8001254 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001226:	490c      	ldr	r1, [pc, #48]	@ (8001258 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001228:	4a0c      	ldr	r2, [pc, #48]	@ (800125c <LoopFillZerobss+0x16>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800122c:	e002      	b.n	8001234 <LoopCopyDataInit>

0800122e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001232:	3304      	adds	r3, #4

08001234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001238:	d3f9      	bcc.n	800122e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123a:	4a09      	ldr	r2, [pc, #36]	@ (8001260 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800123c:	4c09      	ldr	r4, [pc, #36]	@ (8001264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001240:	e001      	b.n	8001246 <LoopFillZerobss>

08001242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001244:	3204      	adds	r2, #4

08001246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001248:	d3fb      	bcc.n	8001242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800124a:	f002 fe33 	bl	8003eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800124e:	f7ff fc99 	bl	8000b84 <main>
  bx lr
 8001252:	4770      	bx	lr
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001258:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800125c:	08006094 	.word	0x08006094
  ldr r2, =_sbss
 8001260:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001264:	200003a4 	.word	0x200003a4

08001268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC1_2_IRQHandler>
	...

0800126c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <HAL_Init+0x28>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a07      	ldr	r2, [pc, #28]	@ (8001294 <HAL_Init+0x28>)
 8001276:	f043 0310 	orr.w	r3, r3, #16
 800127a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 f92b 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001282:	200f      	movs	r0, #15
 8001284:	f000 f808 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001288:	f7ff fe66 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40022000 	.word	0x40022000

08001298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_InitTick+0x54>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_InitTick+0x58>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f935 	bl	8001526 <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00e      	b.n	80012e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d80a      	bhi.n	80012e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f000 f90b 	bl	80014ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4a06      	ldr	r2, [pc, #24]	@ (80012f4 <HAL_InitTick+0x5c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000000c 	.word	0x2000000c
 80012f0:	20000014 	.word	0x20000014
 80012f4:	20000010 	.word	0x20000010

080012f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <HAL_IncTick+0x1c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <HAL_IncTick+0x20>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a03      	ldr	r2, [pc, #12]	@ (8001318 <HAL_IncTick+0x20>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	20000014 	.word	0x20000014
 8001318:	20000254 	.word	0x20000254

0800131c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b02      	ldr	r3, [pc, #8]	@ (800132c <HAL_GetTick+0x10>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	20000254 	.word	0x20000254

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff fff0 	bl	800131c <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <HAL_Delay+0x44>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001356:	bf00      	nop
 8001358:	f7ff ffe0 	bl	800131c <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8f7      	bhi.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000014 	.word	0x20000014

08001378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001394:	4013      	ands	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013aa:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	60d3      	str	r3, [r2, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c4:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <__NVIC_GetPriorityGrouping+0x18>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	f003 0307 	and.w	r3, r3, #7
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0a      	blt.n	8001406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	@ (8001428 <__NVIC_SetPriority+0x4c>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	440b      	add	r3, r1
 8001400:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001404:	e00a      	b.n	800141c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4908      	ldr	r1, [pc, #32]	@ (800142c <__NVIC_SetPriority+0x50>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	3b04      	subs	r3, #4
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	440b      	add	r3, r1
 800141a:	761a      	strb	r2, [r3, #24]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	@ 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f1c3 0307 	rsb	r3, r3, #7
 800144a:	2b04      	cmp	r3, #4
 800144c:	bf28      	it	cs
 800144e:	2304      	movcs	r3, #4
 8001450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3304      	adds	r3, #4
 8001456:	2b06      	cmp	r3, #6
 8001458:	d902      	bls.n	8001460 <NVIC_EncodePriority+0x30>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3b03      	subs	r3, #3
 800145e:	e000      	b.n	8001462 <NVIC_EncodePriority+0x32>
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	f04f 32ff 	mov.w	r2, #4294967295
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001478:	f04f 31ff 	mov.w	r1, #4294967295
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43d9      	mvns	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	4313      	orrs	r3, r2
         );
}
 800148a:	4618      	mov	r0, r3
 800148c:	3724      	adds	r7, #36	@ 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014a4:	d301      	bcc.n	80014aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00f      	b.n	80014ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014aa:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <SysTick_Config+0x40>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b2:	210f      	movs	r1, #15
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f7ff ff90 	bl	80013dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <SysTick_Config+0x40>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c2:	4b04      	ldr	r3, [pc, #16]	@ (80014d4 <SysTick_Config+0x40>)
 80014c4:	2207      	movs	r2, #7
 80014c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	e000e010 	.word	0xe000e010

080014d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff49 	bl	8001378 <__NVIC_SetPriorityGrouping>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001500:	f7ff ff5e 	bl	80013c0 <__NVIC_GetPriorityGrouping>
 8001504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	6978      	ldr	r0, [r7, #20]
 800150c:	f7ff ff90 	bl	8001430 <NVIC_EncodePriority>
 8001510:	4602      	mov	r2, r0
 8001512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff5f 	bl	80013dc <__NVIC_SetPriority>
}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffb0 	bl	8001494 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001540:	b480      	push	{r7}
 8001542:	b08b      	sub	sp, #44	@ 0x2c
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001552:	e169      	b.n	8001828 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001554:	2201      	movs	r2, #1
 8001556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	429a      	cmp	r2, r3
 800156e:	f040 8158 	bne.w	8001822 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4a9a      	ldr	r2, [pc, #616]	@ (80017e0 <HAL_GPIO_Init+0x2a0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d05e      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 800157c:	4a98      	ldr	r2, [pc, #608]	@ (80017e0 <HAL_GPIO_Init+0x2a0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d875      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 8001582:	4a98      	ldr	r2, [pc, #608]	@ (80017e4 <HAL_GPIO_Init+0x2a4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d058      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 8001588:	4a96      	ldr	r2, [pc, #600]	@ (80017e4 <HAL_GPIO_Init+0x2a4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d86f      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 800158e:	4a96      	ldr	r2, [pc, #600]	@ (80017e8 <HAL_GPIO_Init+0x2a8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d052      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 8001594:	4a94      	ldr	r2, [pc, #592]	@ (80017e8 <HAL_GPIO_Init+0x2a8>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d869      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 800159a:	4a94      	ldr	r2, [pc, #592]	@ (80017ec <HAL_GPIO_Init+0x2ac>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d04c      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 80015a0:	4a92      	ldr	r2, [pc, #584]	@ (80017ec <HAL_GPIO_Init+0x2ac>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d863      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 80015a6:	4a92      	ldr	r2, [pc, #584]	@ (80017f0 <HAL_GPIO_Init+0x2b0>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d046      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 80015ac:	4a90      	ldr	r2, [pc, #576]	@ (80017f0 <HAL_GPIO_Init+0x2b0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d85d      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 80015b2:	2b12      	cmp	r3, #18
 80015b4:	d82a      	bhi.n	800160c <HAL_GPIO_Init+0xcc>
 80015b6:	2b12      	cmp	r3, #18
 80015b8:	d859      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 80015ba:	a201      	add	r2, pc, #4	@ (adr r2, 80015c0 <HAL_GPIO_Init+0x80>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	0800163b 	.word	0x0800163b
 80015c4:	08001615 	.word	0x08001615
 80015c8:	08001627 	.word	0x08001627
 80015cc:	08001669 	.word	0x08001669
 80015d0:	0800166f 	.word	0x0800166f
 80015d4:	0800166f 	.word	0x0800166f
 80015d8:	0800166f 	.word	0x0800166f
 80015dc:	0800166f 	.word	0x0800166f
 80015e0:	0800166f 	.word	0x0800166f
 80015e4:	0800166f 	.word	0x0800166f
 80015e8:	0800166f 	.word	0x0800166f
 80015ec:	0800166f 	.word	0x0800166f
 80015f0:	0800166f 	.word	0x0800166f
 80015f4:	0800166f 	.word	0x0800166f
 80015f8:	0800166f 	.word	0x0800166f
 80015fc:	0800166f 	.word	0x0800166f
 8001600:	0800166f 	.word	0x0800166f
 8001604:	0800161d 	.word	0x0800161d
 8001608:	08001631 	.word	0x08001631
 800160c:	4a79      	ldr	r2, [pc, #484]	@ (80017f4 <HAL_GPIO_Init+0x2b4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d013      	beq.n	800163a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001612:	e02c      	b.n	800166e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	623b      	str	r3, [r7, #32]
          break;
 800161a:	e029      	b.n	8001670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	3304      	adds	r3, #4
 8001622:	623b      	str	r3, [r7, #32]
          break;
 8001624:	e024      	b.n	8001670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	3308      	adds	r3, #8
 800162c:	623b      	str	r3, [r7, #32]
          break;
 800162e:	e01f      	b.n	8001670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	330c      	adds	r3, #12
 8001636:	623b      	str	r3, [r7, #32]
          break;
 8001638:	e01a      	b.n	8001670 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001642:	2304      	movs	r3, #4
 8001644:	623b      	str	r3, [r7, #32]
          break;
 8001646:	e013      	b.n	8001670 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001650:	2308      	movs	r3, #8
 8001652:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	611a      	str	r2, [r3, #16]
          break;
 800165a:	e009      	b.n	8001670 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800165c:	2308      	movs	r3, #8
 800165e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	615a      	str	r2, [r3, #20]
          break;
 8001666:	e003      	b.n	8001670 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
          break;
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x130>
          break;
 800166e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2bff      	cmp	r3, #255	@ 0xff
 8001674:	d801      	bhi.n	800167a <HAL_GPIO_Init+0x13a>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	e001      	b.n	800167e <HAL_GPIO_Init+0x13e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3304      	adds	r3, #4
 800167e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2bff      	cmp	r3, #255	@ 0xff
 8001684:	d802      	bhi.n	800168c <HAL_GPIO_Init+0x14c>
 8001686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	e002      	b.n	8001692 <HAL_GPIO_Init+0x152>
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168e:	3b08      	subs	r3, #8
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	210f      	movs	r1, #15
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	401a      	ands	r2, r3
 80016a4:	6a39      	ldr	r1, [r7, #32]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	431a      	orrs	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 80b1 	beq.w	8001822 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016c0:	4b4d      	ldr	r3, [pc, #308]	@ (80017f8 <HAL_GPIO_Init+0x2b8>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a4c      	ldr	r2, [pc, #304]	@ (80017f8 <HAL_GPIO_Init+0x2b8>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b4a      	ldr	r3, [pc, #296]	@ (80017f8 <HAL_GPIO_Init+0x2b8>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016d8:	4a48      	ldr	r2, [pc, #288]	@ (80017fc <HAL_GPIO_Init+0x2bc>)
 80016da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016dc:	089b      	lsrs	r3, r3, #2
 80016de:	3302      	adds	r3, #2
 80016e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	220f      	movs	r2, #15
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a40      	ldr	r2, [pc, #256]	@ (8001800 <HAL_GPIO_Init+0x2c0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d013      	beq.n	800172c <HAL_GPIO_Init+0x1ec>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a3f      	ldr	r2, [pc, #252]	@ (8001804 <HAL_GPIO_Init+0x2c4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d00d      	beq.n	8001728 <HAL_GPIO_Init+0x1e8>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a3e      	ldr	r2, [pc, #248]	@ (8001808 <HAL_GPIO_Init+0x2c8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d007      	beq.n	8001724 <HAL_GPIO_Init+0x1e4>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a3d      	ldr	r2, [pc, #244]	@ (800180c <HAL_GPIO_Init+0x2cc>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d101      	bne.n	8001720 <HAL_GPIO_Init+0x1e0>
 800171c:	2303      	movs	r3, #3
 800171e:	e006      	b.n	800172e <HAL_GPIO_Init+0x1ee>
 8001720:	2304      	movs	r3, #4
 8001722:	e004      	b.n	800172e <HAL_GPIO_Init+0x1ee>
 8001724:	2302      	movs	r3, #2
 8001726:	e002      	b.n	800172e <HAL_GPIO_Init+0x1ee>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_GPIO_Init+0x1ee>
 800172c:	2300      	movs	r3, #0
 800172e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001730:	f002 0203 	and.w	r2, r2, #3
 8001734:	0092      	lsls	r2, r2, #2
 8001736:	4093      	lsls	r3, r2
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800173e:	492f      	ldr	r1, [pc, #188]	@ (80017fc <HAL_GPIO_Init+0x2bc>)
 8001740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	3302      	adds	r3, #2
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001758:	4b2d      	ldr	r3, [pc, #180]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	492c      	ldr	r1, [pc, #176]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	608b      	str	r3, [r1, #8]
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001766:	4b2a      	ldr	r3, [pc, #168]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	43db      	mvns	r3, r3
 800176e:	4928      	ldr	r1, [pc, #160]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 8001770:	4013      	ands	r3, r2
 8001772:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d006      	beq.n	800178e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001780:	4b23      	ldr	r3, [pc, #140]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	4922      	ldr	r1, [pc, #136]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	60cb      	str	r3, [r1, #12]
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800178e:	4b20      	ldr	r3, [pc, #128]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	43db      	mvns	r3, r3
 8001796:	491e      	ldr	r1, [pc, #120]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 8001798:	4013      	ands	r3, r2
 800179a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d006      	beq.n	80017b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017a8:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4918      	ldr	r1, [pc, #96]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017b6:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	43db      	mvns	r3, r3
 80017be:	4914      	ldr	r1, [pc, #80]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d021      	beq.n	8001814 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	490e      	ldr	r1, [pc, #56]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]
 80017dc:	e021      	b.n	8001822 <HAL_GPIO_Init+0x2e2>
 80017de:	bf00      	nop
 80017e0:	10320000 	.word	0x10320000
 80017e4:	10310000 	.word	0x10310000
 80017e8:	10220000 	.word	0x10220000
 80017ec:	10210000 	.word	0x10210000
 80017f0:	10120000 	.word	0x10120000
 80017f4:	10110000 	.word	0x10110000
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010000 	.word	0x40010000
 8001800:	40010800 	.word	0x40010800
 8001804:	40010c00 	.word	0x40010c00
 8001808:	40011000 	.word	0x40011000
 800180c:	40011400 	.word	0x40011400
 8001810:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <HAL_GPIO_Init+0x304>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	43db      	mvns	r3, r3
 800181c:	4909      	ldr	r1, [pc, #36]	@ (8001844 <HAL_GPIO_Init+0x304>)
 800181e:	4013      	ands	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	3301      	adds	r3, #1
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182e:	fa22 f303 	lsr.w	r3, r2, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	f47f ae8e 	bne.w	8001554 <HAL_GPIO_Init+0x14>
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	372c      	adds	r7, #44	@ 0x2c
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	40010400 	.word	0x40010400

08001848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
 8001854:	4613      	mov	r3, r2
 8001856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001858:	787b      	ldrb	r3, [r7, #1]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001864:	e003      	b.n	800186e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001866:	887b      	ldrh	r3, [r7, #2]
 8001868:	041a      	lsls	r2, r3, #16
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	611a      	str	r2, [r3, #16]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e12b      	b.n	8001ae2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d106      	bne.n	80018a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fb8c 	bl	8000fbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2224      	movs	r2, #36	@ 0x24
 80018a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0201 	bic.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018dc:	f001 fbfc 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 80018e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4a81      	ldr	r2, [pc, #516]	@ (8001aec <HAL_I2C_Init+0x274>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d807      	bhi.n	80018fc <HAL_I2C_Init+0x84>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4a80      	ldr	r2, [pc, #512]	@ (8001af0 <HAL_I2C_Init+0x278>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	bf94      	ite	ls
 80018f4:	2301      	movls	r3, #1
 80018f6:	2300      	movhi	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	e006      	b.n	800190a <HAL_I2C_Init+0x92>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4a7d      	ldr	r2, [pc, #500]	@ (8001af4 <HAL_I2C_Init+0x27c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	bf94      	ite	ls
 8001904:	2301      	movls	r3, #1
 8001906:	2300      	movhi	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e0e7      	b.n	8001ae2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4a78      	ldr	r2, [pc, #480]	@ (8001af8 <HAL_I2C_Init+0x280>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	0c9b      	lsrs	r3, r3, #18
 800191c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	430a      	orrs	r2, r1
 8001930:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4a6a      	ldr	r2, [pc, #424]	@ (8001aec <HAL_I2C_Init+0x274>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d802      	bhi.n	800194c <HAL_I2C_Init+0xd4>
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	3301      	adds	r3, #1
 800194a:	e009      	b.n	8001960 <HAL_I2C_Init+0xe8>
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	4a69      	ldr	r2, [pc, #420]	@ (8001afc <HAL_I2C_Init+0x284>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	099b      	lsrs	r3, r3, #6
 800195e:	3301      	adds	r3, #1
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	430b      	orrs	r3, r1
 8001966:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001972:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	495c      	ldr	r1, [pc, #368]	@ (8001aec <HAL_I2C_Init+0x274>)
 800197c:	428b      	cmp	r3, r1
 800197e:	d819      	bhi.n	80019b4 <HAL_I2C_Init+0x13c>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1e59      	subs	r1, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fbb1 f3f3 	udiv	r3, r1, r3
 800198e:	1c59      	adds	r1, r3, #1
 8001990:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001994:	400b      	ands	r3, r1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00a      	beq.n	80019b0 <HAL_I2C_Init+0x138>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1e59      	subs	r1, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80019a8:	3301      	adds	r3, #1
 80019aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ae:	e051      	b.n	8001a54 <HAL_I2C_Init+0x1dc>
 80019b0:	2304      	movs	r3, #4
 80019b2:	e04f      	b.n	8001a54 <HAL_I2C_Init+0x1dc>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d111      	bne.n	80019e0 <HAL_I2C_Init+0x168>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	1e58      	subs	r0, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	440b      	add	r3, r1
 80019ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ce:	3301      	adds	r3, #1
 80019d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	bf0c      	ite	eq
 80019d8:	2301      	moveq	r3, #1
 80019da:	2300      	movne	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	e012      	b.n	8001a06 <HAL_I2C_Init+0x18e>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1e58      	subs	r0, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6859      	ldr	r1, [r3, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	0099      	lsls	r1, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019f6:	3301      	adds	r3, #1
 80019f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf0c      	ite	eq
 8001a00:	2301      	moveq	r3, #1
 8001a02:	2300      	movne	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_I2C_Init+0x196>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e022      	b.n	8001a54 <HAL_I2C_Init+0x1dc>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10e      	bne.n	8001a34 <HAL_I2C_Init+0x1bc>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1e58      	subs	r0, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6859      	ldr	r1, [r3, #4]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	440b      	add	r3, r1
 8001a24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a32:	e00f      	b.n	8001a54 <HAL_I2C_Init+0x1dc>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1e58      	subs	r0, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6859      	ldr	r1, [r3, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	0099      	lsls	r1, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	6809      	ldr	r1, [r1, #0]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69da      	ldr	r2, [r3, #28]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6911      	ldr	r1, [r2, #16]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68d2      	ldr	r2, [r2, #12]
 8001a8e:	4311      	orrs	r1, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	430b      	orrs	r3, r1
 8001a96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2220      	movs	r2, #32
 8001ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	000186a0 	.word	0x000186a0
 8001af0:	001e847f 	.word	0x001e847f
 8001af4:	003d08ff 	.word	0x003d08ff
 8001af8:	431bde83 	.word	0x431bde83
 8001afc:	10624dd3 	.word	0x10624dd3

08001b00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	4608      	mov	r0, r1
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	817b      	strh	r3, [r7, #10]
 8001b12:	460b      	mov	r3, r1
 8001b14:	813b      	strh	r3, [r7, #8]
 8001b16:	4613      	mov	r3, r2
 8001b18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b1a:	f7ff fbff 	bl	800131c <HAL_GetTick>
 8001b1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b20      	cmp	r3, #32
 8001b2a:	f040 80d9 	bne.w	8001ce0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2319      	movs	r3, #25
 8001b34:	2201      	movs	r2, #1
 8001b36:	496d      	ldr	r1, [pc, #436]	@ (8001cec <HAL_I2C_Mem_Write+0x1ec>)
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 fccd 	bl	80024d8 <I2C_WaitOnFlagUntilTimeout>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b44:	2302      	movs	r3, #2
 8001b46:	e0cc      	b.n	8001ce2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_I2C_Mem_Write+0x56>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e0c5      	b.n	8001ce2 <HAL_I2C_Mem_Write+0x1e2>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d007      	beq.n	8001b7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2221      	movs	r2, #33	@ 0x21
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2240      	movs	r2, #64	@ 0x40
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a3a      	ldr	r2, [r7, #32]
 8001ba6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf0 <HAL_I2C_Mem_Write+0x1f0>)
 8001bbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bbe:	88f8      	ldrh	r0, [r7, #6]
 8001bc0:	893a      	ldrh	r2, [r7, #8]
 8001bc2:	8979      	ldrh	r1, [r7, #10]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4603      	mov	r3, r0
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 fb04 	bl	80021dc <I2C_RequestMemoryWrite>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d052      	beq.n	8001c80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e081      	b.n	8001ce2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 fd92 	bl	800270c <I2C_WaitOnTXEFlagUntilTimeout>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00d      	beq.n	8001c0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d107      	bne.n	8001c06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e06b      	b.n	8001ce2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	781a      	ldrb	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	3b01      	subs	r3, #1
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d11b      	bne.n	8001c80 <HAL_I2C_Mem_Write+0x180>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d017      	beq.n	8001c80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1aa      	bne.n	8001bde <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 fd85 	bl	800279c <I2C_WaitOnBTFFlagUntilTimeout>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00d      	beq.n	8001cb4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d107      	bne.n	8001cb0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e016      	b.n	8001ce2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e000      	b.n	8001ce2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ce0:	2302      	movs	r3, #2
  }
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	00100002 	.word	0x00100002
 8001cf0:	ffff0000 	.word	0xffff0000

08001cf4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	@ 0x30
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	4608      	mov	r0, r1
 8001cfe:	4611      	mov	r1, r2
 8001d00:	461a      	mov	r2, r3
 8001d02:	4603      	mov	r3, r0
 8001d04:	817b      	strh	r3, [r7, #10]
 8001d06:	460b      	mov	r3, r1
 8001d08:	813b      	strh	r3, [r7, #8]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d12:	f7ff fb03 	bl	800131c <HAL_GetTick>
 8001d16:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b20      	cmp	r3, #32
 8001d22:	f040 8250 	bne.w	80021c6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2319      	movs	r3, #25
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	4982      	ldr	r1, [pc, #520]	@ (8001f38 <HAL_I2C_Mem_Read+0x244>)
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 fbd1 	bl	80024d8 <I2C_WaitOnFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e243      	b.n	80021c8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_I2C_Mem_Read+0x5a>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e23c      	b.n	80021c8 <HAL_I2C_Mem_Read+0x4d4>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d007      	beq.n	8001d74 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2222      	movs	r2, #34	@ 0x22
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2240      	movs	r2, #64	@ 0x40
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4a62      	ldr	r2, [pc, #392]	@ (8001f3c <HAL_I2C_Mem_Read+0x248>)
 8001db4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001db6:	88f8      	ldrh	r0, [r7, #6]
 8001db8:	893a      	ldrh	r2, [r7, #8]
 8001dba:	8979      	ldrh	r1, [r7, #10]
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 fa9e 	bl	8002308 <I2C_RequestMemoryRead>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e1f8      	b.n	80021c8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d113      	bne.n	8001e06 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e1cc      	b.n	80021a0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d11e      	bne.n	8001e4c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e1e:	b672      	cpsid	i
}
 8001e20:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e48:	b662      	cpsie	i
}
 8001e4a:	e035      	b.n	8001eb8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d11e      	bne.n	8001e92 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e64:	b672      	cpsid	i
}
 8001e66:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e8e:	b662      	cpsie	i
}
 8001e90:	e012      	b.n	8001eb8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ea0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001eb8:	e172      	b.n	80021a0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	f200 811f 	bhi.w	8002102 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d123      	bne.n	8001f14 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ece:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 fcab 	bl	800282c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e173      	b.n	80021c8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f12:	e145      	b.n	80021a0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d152      	bne.n	8001fc2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f22:	2200      	movs	r2, #0
 8001f24:	4906      	ldr	r1, [pc, #24]	@ (8001f40 <HAL_I2C_Mem_Read+0x24c>)
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 fad6 	bl	80024d8 <I2C_WaitOnFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d008      	beq.n	8001f44 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e148      	b.n	80021c8 <HAL_I2C_Mem_Read+0x4d4>
 8001f36:	bf00      	nop
 8001f38:	00100002 	.word	0x00100002
 8001f3c:	ffff0000 	.word	0xffff0000
 8001f40:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001f44:	b672      	cpsid	i
}
 8001f46:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f8a:	b662      	cpsie	i
}
 8001f8c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001fc0:	e0ee      	b.n	80021a0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc8:	2200      	movs	r2, #0
 8001fca:	4981      	ldr	r1, [pc, #516]	@ (80021d0 <HAL_I2C_Mem_Read+0x4dc>)
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 fa83 	bl	80024d8 <I2C_WaitOnFlagUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0f5      	b.n	80021c8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fec:	b672      	cpsid	i
}
 8001fee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002022:	4b6c      	ldr	r3, [pc, #432]	@ (80021d4 <HAL_I2C_Mem_Read+0x4e0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	08db      	lsrs	r3, r3, #3
 8002028:	4a6b      	ldr	r2, [pc, #428]	@ (80021d8 <HAL_I2C_Mem_Read+0x4e4>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0a1a      	lsrs	r2, r3, #8
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00da      	lsls	r2, r3, #3
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	3b01      	subs	r3, #1
 8002040:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d118      	bne.n	800207a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	f043 0220 	orr.w	r2, r3, #32
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800206a:	b662      	cpsie	i
}
 800206c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0a6      	b.n	80021c8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b04      	cmp	r3, #4
 8002086:	d1d9      	bne.n	800203c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002096:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80020ca:	b662      	cpsie	i
}
 80020cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002100:	e04e      	b.n	80021a0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002104:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 fb90 	bl	800282c <I2C_WaitOnRXNEFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e058      	b.n	80021c8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002132:	3b01      	subs	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b04      	cmp	r3, #4
 8002154:	d124      	bne.n	80021a0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800215a:	2b03      	cmp	r3, #3
 800215c:	d107      	bne.n	800216e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800216c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f47f ae88 	bne.w	8001eba <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e000      	b.n	80021c8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
  }
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3728      	adds	r7, #40	@ 0x28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	00010004 	.word	0x00010004
 80021d4:	2000000c 	.word	0x2000000c
 80021d8:	14f8b589 	.word	0x14f8b589

080021dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	4608      	mov	r0, r1
 80021e6:	4611      	mov	r1, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	4603      	mov	r3, r0
 80021ec:	817b      	strh	r3, [r7, #10]
 80021ee:	460b      	mov	r3, r1
 80021f0:	813b      	strh	r3, [r7, #8]
 80021f2:	4613      	mov	r3, r2
 80021f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002204:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	2200      	movs	r2, #0
 800220e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f960 	bl	80024d8 <I2C_WaitOnFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00d      	beq.n	800223a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800222c:	d103      	bne.n	8002236 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002234:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e05f      	b.n	80022fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800223a:	897b      	ldrh	r3, [r7, #10]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002248:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	6a3a      	ldr	r2, [r7, #32]
 800224e:	492d      	ldr	r1, [pc, #180]	@ (8002304 <I2C_RequestMemoryWrite+0x128>)
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f9bb 	bl	80025cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e04c      	b.n	80022fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002278:	6a39      	ldr	r1, [r7, #32]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fa46 	bl	800270c <I2C_WaitOnTXEFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00d      	beq.n	80022a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	2b04      	cmp	r3, #4
 800228c:	d107      	bne.n	800229e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800229c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e02b      	b.n	80022fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d105      	bne.n	80022b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022a8:	893b      	ldrh	r3, [r7, #8]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	e021      	b.n	80022f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022b4:	893b      	ldrh	r3, [r7, #8]
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022c4:	6a39      	ldr	r1, [r7, #32]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fa20 	bl	800270c <I2C_WaitOnTXEFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00d      	beq.n	80022ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d107      	bne.n	80022ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e005      	b.n	80022fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022ee:	893b      	ldrh	r3, [r7, #8]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	00010002 	.word	0x00010002

08002308 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	4608      	mov	r0, r1
 8002312:	4611      	mov	r1, r2
 8002314:	461a      	mov	r2, r3
 8002316:	4603      	mov	r3, r0
 8002318:	817b      	strh	r3, [r7, #10]
 800231a:	460b      	mov	r3, r1
 800231c:	813b      	strh	r3, [r7, #8]
 800231e:	4613      	mov	r3, r2
 8002320:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002330:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002340:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	2200      	movs	r2, #0
 800234a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f8c2 	bl	80024d8 <I2C_WaitOnFlagUntilTimeout>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00d      	beq.n	8002376 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002368:	d103      	bne.n	8002372 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002370:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e0aa      	b.n	80024cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002376:	897b      	ldrh	r3, [r7, #10]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002384:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	6a3a      	ldr	r2, [r7, #32]
 800238a:	4952      	ldr	r1, [pc, #328]	@ (80024d4 <I2C_RequestMemoryRead+0x1cc>)
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f91d 	bl	80025cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e097      	b.n	80024cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b4:	6a39      	ldr	r1, [r7, #32]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f9a8 	bl	800270c <I2C_WaitOnTXEFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00d      	beq.n	80023de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d107      	bne.n	80023da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e076      	b.n	80024cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d105      	bne.n	80023f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023e4:	893b      	ldrh	r3, [r7, #8]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	611a      	str	r2, [r3, #16]
 80023ee:	e021      	b.n	8002434 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023f0:	893b      	ldrh	r3, [r7, #8]
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002400:	6a39      	ldr	r1, [r7, #32]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f982 	bl	800270c <I2C_WaitOnTXEFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00d      	beq.n	800242a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	2b04      	cmp	r3, #4
 8002414:	d107      	bne.n	8002426 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002424:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e050      	b.n	80024cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800242a:	893b      	ldrh	r3, [r7, #8]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002436:	6a39      	ldr	r1, [r7, #32]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f967 	bl	800270c <I2C_WaitOnTXEFlagUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00d      	beq.n	8002460 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	2b04      	cmp	r3, #4
 800244a:	d107      	bne.n	800245c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800245a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e035      	b.n	80024cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800246e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	2200      	movs	r2, #0
 8002478:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f82b 	bl	80024d8 <I2C_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002496:	d103      	bne.n	80024a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800249e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e013      	b.n	80024cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024a4:	897b      	ldrh	r3, [r7, #10]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b6:	6a3a      	ldr	r2, [r7, #32]
 80024b8:	4906      	ldr	r1, [pc, #24]	@ (80024d4 <I2C_RequestMemoryRead+0x1cc>)
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f886 	bl	80025cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	00010002 	.word	0x00010002

080024d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	4613      	mov	r3, r2
 80024e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024e8:	e048      	b.n	800257c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d044      	beq.n	800257c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f2:	f7fe ff13 	bl	800131c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d302      	bcc.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d139      	bne.n	800257c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	0c1b      	lsrs	r3, r3, #16
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d10d      	bne.n	800252e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	43da      	mvns	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	4013      	ands	r3, r2
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf0c      	ite	eq
 8002524:	2301      	moveq	r3, #1
 8002526:	2300      	movne	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	e00c      	b.n	8002548 <I2C_WaitOnFlagUntilTimeout+0x70>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	43da      	mvns	r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	4013      	ands	r3, r2
 800253a:	b29b      	uxth	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	bf0c      	ite	eq
 8002540:	2301      	moveq	r3, #1
 8002542:	2300      	movne	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	429a      	cmp	r2, r3
 800254c:	d116      	bne.n	800257c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	f043 0220 	orr.w	r2, r3, #32
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e023      	b.n	80025c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	0c1b      	lsrs	r3, r3, #16
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d10d      	bne.n	80025a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	43da      	mvns	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	4013      	ands	r3, r2
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	bf0c      	ite	eq
 8002598:	2301      	moveq	r3, #1
 800259a:	2300      	movne	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	e00c      	b.n	80025bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	43da      	mvns	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4013      	ands	r3, r2
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d093      	beq.n	80024ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025da:	e071      	b.n	80026c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ea:	d123      	bne.n	8002634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002604:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002620:	f043 0204 	orr.w	r2, r3, #4
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e067      	b.n	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263a:	d041      	beq.n	80026c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800263c:	f7fe fe6e 	bl	800131c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	429a      	cmp	r2, r3
 800264a:	d302      	bcc.n	8002652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d136      	bne.n	80026c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	0c1b      	lsrs	r3, r3, #16
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b01      	cmp	r3, #1
 800265a:	d10c      	bne.n	8002676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	43da      	mvns	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4013      	ands	r3, r2
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	bf14      	ite	ne
 800266e:	2301      	movne	r3, #1
 8002670:	2300      	moveq	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	e00b      	b.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	43da      	mvns	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	4013      	ands	r3, r2
 8002682:	b29b      	uxth	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	bf14      	ite	ne
 8002688:	2301      	movne	r3, #1
 800268a:	2300      	moveq	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d016      	beq.n	80026c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	f043 0220 	orr.w	r2, r3, #32
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e021      	b.n	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	0c1b      	lsrs	r3, r3, #16
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d10c      	bne.n	80026e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	43da      	mvns	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	4013      	ands	r3, r2
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	bf14      	ite	ne
 80026dc:	2301      	movne	r3, #1
 80026de:	2300      	moveq	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	e00b      	b.n	80026fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	43da      	mvns	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4013      	ands	r3, r2
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bf14      	ite	ne
 80026f6:	2301      	movne	r3, #1
 80026f8:	2300      	moveq	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f47f af6d 	bne.w	80025dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002718:	e034      	b.n	8002784 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f8e3 	bl	80028e6 <I2C_IsAcknowledgeFailed>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e034      	b.n	8002794 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d028      	beq.n	8002784 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002732:	f7fe fdf3 	bl	800131c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	429a      	cmp	r2, r3
 8002740:	d302      	bcc.n	8002748 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d11d      	bne.n	8002784 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002752:	2b80      	cmp	r3, #128	@ 0x80
 8002754:	d016      	beq.n	8002784 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	f043 0220 	orr.w	r2, r3, #32
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e007      	b.n	8002794 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800278e:	2b80      	cmp	r3, #128	@ 0x80
 8002790:	d1c3      	bne.n	800271a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027a8:	e034      	b.n	8002814 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f89b 	bl	80028e6 <I2C_IsAcknowledgeFailed>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e034      	b.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c0:	d028      	beq.n	8002814 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c2:	f7fe fdab 	bl	800131c <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d302      	bcc.n	80027d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d11d      	bne.n	8002814 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d016      	beq.n	8002814 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	f043 0220 	orr.w	r2, r3, #32
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e007      	b.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b04      	cmp	r3, #4
 8002820:	d1c3      	bne.n	80027aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002838:	e049      	b.n	80028ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b10      	cmp	r3, #16
 8002846:	d119      	bne.n	800287c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0210 	mvn.w	r2, #16
 8002850:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e030      	b.n	80028de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287c:	f7fe fd4e 	bl	800131c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	429a      	cmp	r2, r3
 800288a:	d302      	bcc.n	8002892 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d11d      	bne.n	80028ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800289c:	2b40      	cmp	r3, #64	@ 0x40
 800289e:	d016      	beq.n	80028ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	f043 0220 	orr.w	r2, r3, #32
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e007      	b.n	80028de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d8:	2b40      	cmp	r3, #64	@ 0x40
 80028da:	d1ae      	bne.n	800283a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028fc:	d11b      	bne.n	8002936 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002906:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002922:	f043 0204 	orr.w	r2, r3, #4
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
	...

08002944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e272      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 8087 	beq.w	8002a72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002964:	4b92      	ldr	r3, [pc, #584]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	2b04      	cmp	r3, #4
 800296e:	d00c      	beq.n	800298a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002970:	4b8f      	ldr	r3, [pc, #572]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 030c 	and.w	r3, r3, #12
 8002978:	2b08      	cmp	r3, #8
 800297a:	d112      	bne.n	80029a2 <HAL_RCC_OscConfig+0x5e>
 800297c:	4b8c      	ldr	r3, [pc, #560]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002988:	d10b      	bne.n	80029a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298a:	4b89      	ldr	r3, [pc, #548]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d06c      	beq.n	8002a70 <HAL_RCC_OscConfig+0x12c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d168      	bne.n	8002a70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e24c      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029aa:	d106      	bne.n	80029ba <HAL_RCC_OscConfig+0x76>
 80029ac:	4b80      	ldr	r3, [pc, #512]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a7f      	ldr	r2, [pc, #508]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	e02e      	b.n	8002a18 <HAL_RCC_OscConfig+0xd4>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10c      	bne.n	80029dc <HAL_RCC_OscConfig+0x98>
 80029c2:	4b7b      	ldr	r3, [pc, #492]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a7a      	ldr	r2, [pc, #488]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	4b78      	ldr	r3, [pc, #480]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a77      	ldr	r2, [pc, #476]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e01d      	b.n	8002a18 <HAL_RCC_OscConfig+0xd4>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0xbc>
 80029e6:	4b72      	ldr	r3, [pc, #456]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a71      	ldr	r2, [pc, #452]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b6f      	ldr	r3, [pc, #444]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a6e      	ldr	r2, [pc, #440]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e00b      	b.n	8002a18 <HAL_RCC_OscConfig+0xd4>
 8002a00:	4b6b      	ldr	r3, [pc, #428]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a6a      	ldr	r2, [pc, #424]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b68      	ldr	r3, [pc, #416]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a67      	ldr	r2, [pc, #412]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7fe fc7c 	bl	800131c <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a28:	f7fe fc78 	bl	800131c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	@ 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e200      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0xe4>
 8002a46:	e014      	b.n	8002a72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7fe fc68 	bl	800131c <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a50:	f7fe fc64 	bl	800131c <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	@ 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e1ec      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a62:	4b53      	ldr	r3, [pc, #332]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x10c>
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d063      	beq.n	8002b46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a7e:	4b4c      	ldr	r3, [pc, #304]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a8a:	4b49      	ldr	r3, [pc, #292]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d11c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x18c>
 8002a96:	4b46      	ldr	r3, [pc, #280]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d116      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa2:	4b43      	ldr	r3, [pc, #268]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_RCC_OscConfig+0x176>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d001      	beq.n	8002aba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e1c0      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aba:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4939      	ldr	r1, [pc, #228]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ace:	e03a      	b.n	8002b46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d020      	beq.n	8002b1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad8:	4b36      	ldr	r3, [pc, #216]	@ (8002bb4 <HAL_RCC_OscConfig+0x270>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7fe fc1d 	bl	800131c <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae6:	f7fe fc19 	bl	800131c <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e1a1      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af8:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b04:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4927      	ldr	r1, [pc, #156]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	600b      	str	r3, [r1, #0]
 8002b18:	e015      	b.n	8002b46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1a:	4b26      	ldr	r3, [pc, #152]	@ (8002bb4 <HAL_RCC_OscConfig+0x270>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7fe fbfc 	bl	800131c <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b28:	f7fe fbf8 	bl	800131c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e180      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d03a      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d019      	beq.n	8002b8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5a:	4b17      	ldr	r3, [pc, #92]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b60:	f7fe fbdc 	bl	800131c <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b68:	f7fe fbd8 	bl	800131c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e160      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b86:	2001      	movs	r0, #1
 8002b88:	f000 faba 	bl	8003100 <RCC_Delay>
 8002b8c:	e01c      	b.n	8002bc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b94:	f7fe fbc2 	bl	800131c <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9a:	e00f      	b.n	8002bbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9c:	f7fe fbbe 	bl	800131c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d908      	bls.n	8002bbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e146      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	42420000 	.word	0x42420000
 8002bb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bbc:	4b92      	ldr	r3, [pc, #584]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1e9      	bne.n	8002b9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80a6 	beq.w	8002d22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bda:	4b8b      	ldr	r3, [pc, #556]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10d      	bne.n	8002c02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	4b88      	ldr	r3, [pc, #544]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	4a87      	ldr	r2, [pc, #540]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf0:	61d3      	str	r3, [r2, #28]
 8002bf2:	4b85      	ldr	r3, [pc, #532]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c02:	4b82      	ldr	r3, [pc, #520]	@ (8002e0c <HAL_RCC_OscConfig+0x4c8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d118      	bne.n	8002c40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e0c <HAL_RCC_OscConfig+0x4c8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a7e      	ldr	r2, [pc, #504]	@ (8002e0c <HAL_RCC_OscConfig+0x4c8>)
 8002c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1a:	f7fe fb7f 	bl	800131c <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c22:	f7fe fb7b 	bl	800131c <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b64      	cmp	r3, #100	@ 0x64
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e103      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	4b75      	ldr	r3, [pc, #468]	@ (8002e0c <HAL_RCC_OscConfig+0x4c8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x312>
 8002c48:	4b6f      	ldr	r3, [pc, #444]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	4a6e      	ldr	r2, [pc, #440]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6213      	str	r3, [r2, #32]
 8002c54:	e02d      	b.n	8002cb2 <HAL_RCC_OscConfig+0x36e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x334>
 8002c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	4a69      	ldr	r2, [pc, #420]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6213      	str	r3, [r2, #32]
 8002c6a:	4b67      	ldr	r3, [pc, #412]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	4a66      	ldr	r2, [pc, #408]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	f023 0304 	bic.w	r3, r3, #4
 8002c74:	6213      	str	r3, [r2, #32]
 8002c76:	e01c      	b.n	8002cb2 <HAL_RCC_OscConfig+0x36e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2b05      	cmp	r3, #5
 8002c7e:	d10c      	bne.n	8002c9a <HAL_RCC_OscConfig+0x356>
 8002c80:	4b61      	ldr	r3, [pc, #388]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	4a60      	ldr	r2, [pc, #384]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	f043 0304 	orr.w	r3, r3, #4
 8002c8a:	6213      	str	r3, [r2, #32]
 8002c8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	4a5d      	ldr	r2, [pc, #372]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6213      	str	r3, [r2, #32]
 8002c98:	e00b      	b.n	8002cb2 <HAL_RCC_OscConfig+0x36e>
 8002c9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4a5a      	ldr	r2, [pc, #360]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
 8002ca4:	6213      	str	r3, [r2, #32]
 8002ca6:	4b58      	ldr	r3, [pc, #352]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	4a57      	ldr	r2, [pc, #348]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	f023 0304 	bic.w	r3, r3, #4
 8002cb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d015      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cba:	f7fe fb2f 	bl	800131c <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f7fe fb2b 	bl	800131c <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e0b1      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd8:	4b4b      	ldr	r3, [pc, #300]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ee      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x37e>
 8002ce4:	e014      	b.n	8002d10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce6:	f7fe fb19 	bl	800131c <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cec:	e00a      	b.n	8002d04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7fe fb15 	bl	800131c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e09b      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d04:	4b40      	ldr	r3, [pc, #256]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1ee      	bne.n	8002cee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d105      	bne.n	8002d22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d16:	4b3c      	ldr	r3, [pc, #240]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	4a3b      	ldr	r2, [pc, #236]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8087 	beq.w	8002e3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d2c:	4b36      	ldr	r3, [pc, #216]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d061      	beq.n	8002dfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d146      	bne.n	8002dce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d40:	4b33      	ldr	r3, [pc, #204]	@ (8002e10 <HAL_RCC_OscConfig+0x4cc>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7fe fae9 	bl	800131c <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7fe fae5 	bl	800131c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e06d      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d60:	4b29      	ldr	r3, [pc, #164]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f0      	bne.n	8002d4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d74:	d108      	bne.n	8002d88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d76:	4b24      	ldr	r3, [pc, #144]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	4921      	ldr	r1, [pc, #132]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d88:	4b1f      	ldr	r3, [pc, #124]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a19      	ldr	r1, [r3, #32]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	491b      	ldr	r1, [pc, #108]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <HAL_RCC_OscConfig+0x4cc>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7fe fab9 	bl	800131c <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dae:	f7fe fab5 	bl	800131c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e03d      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc0:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x46a>
 8002dcc:	e035      	b.n	8002e3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dce:	4b10      	ldr	r3, [pc, #64]	@ (8002e10 <HAL_RCC_OscConfig+0x4cc>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7fe faa2 	bl	800131c <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7fe fa9e 	bl	800131c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e026      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dee:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x498>
 8002dfa:	e01e      	b.n	8002e3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e019      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40007000 	.word	0x40007000
 8002e10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e14:	4b0b      	ldr	r3, [pc, #44]	@ (8002e44 <HAL_RCC_OscConfig+0x500>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d106      	bne.n	8002e36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d001      	beq.n	8002e3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000

08002e48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0d0      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d910      	bls.n	8002e8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	4b67      	ldr	r3, [pc, #412]	@ (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 0207 	bic.w	r2, r3, #7
 8002e72:	4965      	ldr	r1, [pc, #404]	@ (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b63      	ldr	r3, [pc, #396]	@ (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0b8      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d020      	beq.n	8002eda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea4:	4b59      	ldr	r3, [pc, #356]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4a58      	ldr	r2, [pc, #352]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002eae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ebc:	4b53      	ldr	r3, [pc, #332]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4a52      	ldr	r2, [pc, #328]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002ec6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec8:	4b50      	ldr	r3, [pc, #320]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	494d      	ldr	r1, [pc, #308]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d040      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b47      	ldr	r3, [pc, #284]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d115      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e07f      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	4b41      	ldr	r3, [pc, #260]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e073      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f16:	4b3d      	ldr	r3, [pc, #244]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e06b      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f26:	4b39      	ldr	r3, [pc, #228]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f023 0203 	bic.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4936      	ldr	r1, [pc, #216]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f38:	f7fe f9f0 	bl	800131c <HAL_GetTick>
 8002f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f40:	f7fe f9ec 	bl	800131c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e053      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	4b2d      	ldr	r3, [pc, #180]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 020c 	and.w	r2, r3, #12
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d1eb      	bne.n	8002f40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f68:	4b27      	ldr	r3, [pc, #156]	@ (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d210      	bcs.n	8002f98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b24      	ldr	r3, [pc, #144]	@ (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 0207 	bic.w	r2, r3, #7
 8002f7e:	4922      	ldr	r1, [pc, #136]	@ (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b20      	ldr	r3, [pc, #128]	@ (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e032      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa4:	4b19      	ldr	r3, [pc, #100]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4916      	ldr	r1, [pc, #88]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fc2:	4b12      	ldr	r3, [pc, #72]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	490e      	ldr	r1, [pc, #56]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fd6:	f000 f821 	bl	800301c <HAL_RCC_GetSysClockFreq>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	490a      	ldr	r1, [pc, #40]	@ (8003010 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe8:	5ccb      	ldrb	r3, [r1, r3]
 8002fea:	fa22 f303 	lsr.w	r3, r2, r3
 8002fee:	4a09      	ldr	r2, [pc, #36]	@ (8003014 <HAL_RCC_ClockConfig+0x1cc>)
 8002ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ff2:	4b09      	ldr	r3, [pc, #36]	@ (8003018 <HAL_RCC_ClockConfig+0x1d0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe f94e 	bl	8001298 <HAL_InitTick>

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40022000 	.word	0x40022000
 800300c:	40021000 	.word	0x40021000
 8003010:	08005ce4 	.word	0x08005ce4
 8003014:	2000000c 	.word	0x2000000c
 8003018:	20000010 	.word	0x20000010

0800301c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003036:	4b1e      	ldr	r3, [pc, #120]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b04      	cmp	r3, #4
 8003044:	d002      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0x30>
 8003046:	2b08      	cmp	r3, #8
 8003048:	d003      	beq.n	8003052 <HAL_RCC_GetSysClockFreq+0x36>
 800304a:	e027      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800304c:	4b19      	ldr	r3, [pc, #100]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800304e:	613b      	str	r3, [r7, #16]
      break;
 8003050:	e027      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	0c9b      	lsrs	r3, r3, #18
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	4a17      	ldr	r2, [pc, #92]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800305c:	5cd3      	ldrb	r3, [r2, r3]
 800305e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d010      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800306a:	4b11      	ldr	r3, [pc, #68]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	0c5b      	lsrs	r3, r3, #17
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	4a11      	ldr	r2, [pc, #68]	@ (80030bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003076:	5cd3      	ldrb	r3, [r2, r3]
 8003078:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a0d      	ldr	r2, [pc, #52]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800307e:	fb03 f202 	mul.w	r2, r3, r2
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e004      	b.n	8003096 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a0c      	ldr	r2, [pc, #48]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003090:	fb02 f303 	mul.w	r3, r2, r3
 8003094:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	613b      	str	r3, [r7, #16]
      break;
 800309a:	e002      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800309c:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800309e:	613b      	str	r3, [r7, #16]
      break;
 80030a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a2:	693b      	ldr	r3, [r7, #16]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	007a1200 	.word	0x007a1200
 80030b8:	08005cfc 	.word	0x08005cfc
 80030bc:	08005d0c 	.word	0x08005d0c
 80030c0:	003d0900 	.word	0x003d0900

080030c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c8:	4b02      	ldr	r3, [pc, #8]	@ (80030d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	2000000c 	.word	0x2000000c

080030d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030dc:	f7ff fff2 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b05      	ldr	r3, [pc, #20]	@ (80030f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	0a1b      	lsrs	r3, r3, #8
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4903      	ldr	r1, [pc, #12]	@ (80030fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000
 80030fc:	08005cf4 	.word	0x08005cf4

08003100 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003108:	4b0a      	ldr	r3, [pc, #40]	@ (8003134 <RCC_Delay+0x34>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0a      	ldr	r2, [pc, #40]	@ (8003138 <RCC_Delay+0x38>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	0a5b      	lsrs	r3, r3, #9
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	fb02 f303 	mul.w	r3, r2, r3
 800311a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800311c:	bf00      	nop
  }
  while (Delay --);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1e5a      	subs	r2, r3, #1
 8003122:	60fa      	str	r2, [r7, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f9      	bne.n	800311c <RCC_Delay+0x1c>
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr
 8003134:	2000000c 	.word	0x2000000c
 8003138:	10624dd3 	.word	0x10624dd3

0800313c <__cvt>:
 800313c:	2b00      	cmp	r3, #0
 800313e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003142:	461d      	mov	r5, r3
 8003144:	bfbb      	ittet	lt
 8003146:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800314a:	461d      	movlt	r5, r3
 800314c:	2300      	movge	r3, #0
 800314e:	232d      	movlt	r3, #45	@ 0x2d
 8003150:	b088      	sub	sp, #32
 8003152:	4614      	mov	r4, r2
 8003154:	bfb8      	it	lt
 8003156:	4614      	movlt	r4, r2
 8003158:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800315a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800315c:	7013      	strb	r3, [r2, #0]
 800315e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003160:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003164:	f023 0820 	bic.w	r8, r3, #32
 8003168:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800316c:	d005      	beq.n	800317a <__cvt+0x3e>
 800316e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003172:	d100      	bne.n	8003176 <__cvt+0x3a>
 8003174:	3601      	adds	r6, #1
 8003176:	2302      	movs	r3, #2
 8003178:	e000      	b.n	800317c <__cvt+0x40>
 800317a:	2303      	movs	r3, #3
 800317c:	aa07      	add	r2, sp, #28
 800317e:	9204      	str	r2, [sp, #16]
 8003180:	aa06      	add	r2, sp, #24
 8003182:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003186:	e9cd 3600 	strd	r3, r6, [sp]
 800318a:	4622      	mov	r2, r4
 800318c:	462b      	mov	r3, r5
 800318e:	f000 ff4f 	bl	8004030 <_dtoa_r>
 8003192:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003196:	4607      	mov	r7, r0
 8003198:	d119      	bne.n	80031ce <__cvt+0x92>
 800319a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800319c:	07db      	lsls	r3, r3, #31
 800319e:	d50e      	bpl.n	80031be <__cvt+0x82>
 80031a0:	eb00 0906 	add.w	r9, r0, r6
 80031a4:	2200      	movs	r2, #0
 80031a6:	2300      	movs	r3, #0
 80031a8:	4620      	mov	r0, r4
 80031aa:	4629      	mov	r1, r5
 80031ac:	f7fd fbfc 	bl	80009a8 <__aeabi_dcmpeq>
 80031b0:	b108      	cbz	r0, 80031b6 <__cvt+0x7a>
 80031b2:	f8cd 901c 	str.w	r9, [sp, #28]
 80031b6:	2230      	movs	r2, #48	@ 0x30
 80031b8:	9b07      	ldr	r3, [sp, #28]
 80031ba:	454b      	cmp	r3, r9
 80031bc:	d31e      	bcc.n	80031fc <__cvt+0xc0>
 80031be:	4638      	mov	r0, r7
 80031c0:	9b07      	ldr	r3, [sp, #28]
 80031c2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80031c4:	1bdb      	subs	r3, r3, r7
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	b008      	add	sp, #32
 80031ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80031d2:	eb00 0906 	add.w	r9, r0, r6
 80031d6:	d1e5      	bne.n	80031a4 <__cvt+0x68>
 80031d8:	7803      	ldrb	r3, [r0, #0]
 80031da:	2b30      	cmp	r3, #48	@ 0x30
 80031dc:	d10a      	bne.n	80031f4 <__cvt+0xb8>
 80031de:	2200      	movs	r2, #0
 80031e0:	2300      	movs	r3, #0
 80031e2:	4620      	mov	r0, r4
 80031e4:	4629      	mov	r1, r5
 80031e6:	f7fd fbdf 	bl	80009a8 <__aeabi_dcmpeq>
 80031ea:	b918      	cbnz	r0, 80031f4 <__cvt+0xb8>
 80031ec:	f1c6 0601 	rsb	r6, r6, #1
 80031f0:	f8ca 6000 	str.w	r6, [sl]
 80031f4:	f8da 3000 	ldr.w	r3, [sl]
 80031f8:	4499      	add	r9, r3
 80031fa:	e7d3      	b.n	80031a4 <__cvt+0x68>
 80031fc:	1c59      	adds	r1, r3, #1
 80031fe:	9107      	str	r1, [sp, #28]
 8003200:	701a      	strb	r2, [r3, #0]
 8003202:	e7d9      	b.n	80031b8 <__cvt+0x7c>

08003204 <__exponent>:
 8003204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003206:	2900      	cmp	r1, #0
 8003208:	bfb6      	itet	lt
 800320a:	232d      	movlt	r3, #45	@ 0x2d
 800320c:	232b      	movge	r3, #43	@ 0x2b
 800320e:	4249      	neglt	r1, r1
 8003210:	2909      	cmp	r1, #9
 8003212:	7002      	strb	r2, [r0, #0]
 8003214:	7043      	strb	r3, [r0, #1]
 8003216:	dd29      	ble.n	800326c <__exponent+0x68>
 8003218:	f10d 0307 	add.w	r3, sp, #7
 800321c:	461d      	mov	r5, r3
 800321e:	270a      	movs	r7, #10
 8003220:	fbb1 f6f7 	udiv	r6, r1, r7
 8003224:	461a      	mov	r2, r3
 8003226:	fb07 1416 	mls	r4, r7, r6, r1
 800322a:	3430      	adds	r4, #48	@ 0x30
 800322c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003230:	460c      	mov	r4, r1
 8003232:	2c63      	cmp	r4, #99	@ 0x63
 8003234:	4631      	mov	r1, r6
 8003236:	f103 33ff 	add.w	r3, r3, #4294967295
 800323a:	dcf1      	bgt.n	8003220 <__exponent+0x1c>
 800323c:	3130      	adds	r1, #48	@ 0x30
 800323e:	1e94      	subs	r4, r2, #2
 8003240:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003244:	4623      	mov	r3, r4
 8003246:	1c41      	adds	r1, r0, #1
 8003248:	42ab      	cmp	r3, r5
 800324a:	d30a      	bcc.n	8003262 <__exponent+0x5e>
 800324c:	f10d 0309 	add.w	r3, sp, #9
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	42ac      	cmp	r4, r5
 8003254:	bf88      	it	hi
 8003256:	2300      	movhi	r3, #0
 8003258:	3302      	adds	r3, #2
 800325a:	4403      	add	r3, r0
 800325c:	1a18      	subs	r0, r3, r0
 800325e:	b003      	add	sp, #12
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003266:	f801 6f01 	strb.w	r6, [r1, #1]!
 800326a:	e7ed      	b.n	8003248 <__exponent+0x44>
 800326c:	2330      	movs	r3, #48	@ 0x30
 800326e:	3130      	adds	r1, #48	@ 0x30
 8003270:	7083      	strb	r3, [r0, #2]
 8003272:	70c1      	strb	r1, [r0, #3]
 8003274:	1d03      	adds	r3, r0, #4
 8003276:	e7f1      	b.n	800325c <__exponent+0x58>

08003278 <_printf_float>:
 8003278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800327c:	b091      	sub	sp, #68	@ 0x44
 800327e:	460c      	mov	r4, r1
 8003280:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003284:	4616      	mov	r6, r2
 8003286:	461f      	mov	r7, r3
 8003288:	4605      	mov	r5, r0
 800328a:	f000 fdc3 	bl	8003e14 <_localeconv_r>
 800328e:	6803      	ldr	r3, [r0, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	9308      	str	r3, [sp, #32]
 8003294:	f7fc ff5c 	bl	8000150 <strlen>
 8003298:	2300      	movs	r3, #0
 800329a:	930e      	str	r3, [sp, #56]	@ 0x38
 800329c:	f8d8 3000 	ldr.w	r3, [r8]
 80032a0:	9009      	str	r0, [sp, #36]	@ 0x24
 80032a2:	3307      	adds	r3, #7
 80032a4:	f023 0307 	bic.w	r3, r3, #7
 80032a8:	f103 0208 	add.w	r2, r3, #8
 80032ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80032b0:	f8d4 b000 	ldr.w	fp, [r4]
 80032b4:	f8c8 2000 	str.w	r2, [r8]
 80032b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80032bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80032c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80032c2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80032c6:	f04f 32ff 	mov.w	r2, #4294967295
 80032ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80032ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80032d2:	4b9c      	ldr	r3, [pc, #624]	@ (8003544 <_printf_float+0x2cc>)
 80032d4:	f7fd fb9a 	bl	8000a0c <__aeabi_dcmpun>
 80032d8:	bb70      	cbnz	r0, 8003338 <_printf_float+0xc0>
 80032da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80032de:	f04f 32ff 	mov.w	r2, #4294967295
 80032e2:	4b98      	ldr	r3, [pc, #608]	@ (8003544 <_printf_float+0x2cc>)
 80032e4:	f7fd fb74 	bl	80009d0 <__aeabi_dcmple>
 80032e8:	bb30      	cbnz	r0, 8003338 <_printf_float+0xc0>
 80032ea:	2200      	movs	r2, #0
 80032ec:	2300      	movs	r3, #0
 80032ee:	4640      	mov	r0, r8
 80032f0:	4649      	mov	r1, r9
 80032f2:	f7fd fb63 	bl	80009bc <__aeabi_dcmplt>
 80032f6:	b110      	cbz	r0, 80032fe <_printf_float+0x86>
 80032f8:	232d      	movs	r3, #45	@ 0x2d
 80032fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032fe:	4a92      	ldr	r2, [pc, #584]	@ (8003548 <_printf_float+0x2d0>)
 8003300:	4b92      	ldr	r3, [pc, #584]	@ (800354c <_printf_float+0x2d4>)
 8003302:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003306:	bf8c      	ite	hi
 8003308:	4690      	movhi	r8, r2
 800330a:	4698      	movls	r8, r3
 800330c:	2303      	movs	r3, #3
 800330e:	f04f 0900 	mov.w	r9, #0
 8003312:	6123      	str	r3, [r4, #16]
 8003314:	f02b 0304 	bic.w	r3, fp, #4
 8003318:	6023      	str	r3, [r4, #0]
 800331a:	4633      	mov	r3, r6
 800331c:	4621      	mov	r1, r4
 800331e:	4628      	mov	r0, r5
 8003320:	9700      	str	r7, [sp, #0]
 8003322:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003324:	f000 f9d4 	bl	80036d0 <_printf_common>
 8003328:	3001      	adds	r0, #1
 800332a:	f040 8090 	bne.w	800344e <_printf_float+0x1d6>
 800332e:	f04f 30ff 	mov.w	r0, #4294967295
 8003332:	b011      	add	sp, #68	@ 0x44
 8003334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003338:	4642      	mov	r2, r8
 800333a:	464b      	mov	r3, r9
 800333c:	4640      	mov	r0, r8
 800333e:	4649      	mov	r1, r9
 8003340:	f7fd fb64 	bl	8000a0c <__aeabi_dcmpun>
 8003344:	b148      	cbz	r0, 800335a <_printf_float+0xe2>
 8003346:	464b      	mov	r3, r9
 8003348:	2b00      	cmp	r3, #0
 800334a:	bfb8      	it	lt
 800334c:	232d      	movlt	r3, #45	@ 0x2d
 800334e:	4a80      	ldr	r2, [pc, #512]	@ (8003550 <_printf_float+0x2d8>)
 8003350:	bfb8      	it	lt
 8003352:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003356:	4b7f      	ldr	r3, [pc, #508]	@ (8003554 <_printf_float+0x2dc>)
 8003358:	e7d3      	b.n	8003302 <_printf_float+0x8a>
 800335a:	6863      	ldr	r3, [r4, #4]
 800335c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	d13f      	bne.n	80033e4 <_printf_float+0x16c>
 8003364:	2306      	movs	r3, #6
 8003366:	6063      	str	r3, [r4, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800336e:	6023      	str	r3, [r4, #0]
 8003370:	9206      	str	r2, [sp, #24]
 8003372:	aa0e      	add	r2, sp, #56	@ 0x38
 8003374:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003378:	aa0d      	add	r2, sp, #52	@ 0x34
 800337a:	9203      	str	r2, [sp, #12]
 800337c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003380:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003384:	6863      	ldr	r3, [r4, #4]
 8003386:	4642      	mov	r2, r8
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	4628      	mov	r0, r5
 800338c:	464b      	mov	r3, r9
 800338e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003390:	f7ff fed4 	bl	800313c <__cvt>
 8003394:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003396:	4680      	mov	r8, r0
 8003398:	2947      	cmp	r1, #71	@ 0x47
 800339a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800339c:	d128      	bne.n	80033f0 <_printf_float+0x178>
 800339e:	1cc8      	adds	r0, r1, #3
 80033a0:	db02      	blt.n	80033a8 <_printf_float+0x130>
 80033a2:	6863      	ldr	r3, [r4, #4]
 80033a4:	4299      	cmp	r1, r3
 80033a6:	dd40      	ble.n	800342a <_printf_float+0x1b2>
 80033a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80033ac:	fa5f fa8a 	uxtb.w	sl, sl
 80033b0:	4652      	mov	r2, sl
 80033b2:	3901      	subs	r1, #1
 80033b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80033b8:	910d      	str	r1, [sp, #52]	@ 0x34
 80033ba:	f7ff ff23 	bl	8003204 <__exponent>
 80033be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80033c0:	4681      	mov	r9, r0
 80033c2:	1813      	adds	r3, r2, r0
 80033c4:	2a01      	cmp	r2, #1
 80033c6:	6123      	str	r3, [r4, #16]
 80033c8:	dc02      	bgt.n	80033d0 <_printf_float+0x158>
 80033ca:	6822      	ldr	r2, [r4, #0]
 80033cc:	07d2      	lsls	r2, r2, #31
 80033ce:	d501      	bpl.n	80033d4 <_printf_float+0x15c>
 80033d0:	3301      	adds	r3, #1
 80033d2:	6123      	str	r3, [r4, #16]
 80033d4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d09e      	beq.n	800331a <_printf_float+0xa2>
 80033dc:	232d      	movs	r3, #45	@ 0x2d
 80033de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033e2:	e79a      	b.n	800331a <_printf_float+0xa2>
 80033e4:	2947      	cmp	r1, #71	@ 0x47
 80033e6:	d1bf      	bne.n	8003368 <_printf_float+0xf0>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1bd      	bne.n	8003368 <_printf_float+0xf0>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e7ba      	b.n	8003366 <_printf_float+0xee>
 80033f0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80033f4:	d9dc      	bls.n	80033b0 <_printf_float+0x138>
 80033f6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80033fa:	d118      	bne.n	800342e <_printf_float+0x1b6>
 80033fc:	2900      	cmp	r1, #0
 80033fe:	6863      	ldr	r3, [r4, #4]
 8003400:	dd0b      	ble.n	800341a <_printf_float+0x1a2>
 8003402:	6121      	str	r1, [r4, #16]
 8003404:	b913      	cbnz	r3, 800340c <_printf_float+0x194>
 8003406:	6822      	ldr	r2, [r4, #0]
 8003408:	07d0      	lsls	r0, r2, #31
 800340a:	d502      	bpl.n	8003412 <_printf_float+0x19a>
 800340c:	3301      	adds	r3, #1
 800340e:	440b      	add	r3, r1
 8003410:	6123      	str	r3, [r4, #16]
 8003412:	f04f 0900 	mov.w	r9, #0
 8003416:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003418:	e7dc      	b.n	80033d4 <_printf_float+0x15c>
 800341a:	b913      	cbnz	r3, 8003422 <_printf_float+0x1aa>
 800341c:	6822      	ldr	r2, [r4, #0]
 800341e:	07d2      	lsls	r2, r2, #31
 8003420:	d501      	bpl.n	8003426 <_printf_float+0x1ae>
 8003422:	3302      	adds	r3, #2
 8003424:	e7f4      	b.n	8003410 <_printf_float+0x198>
 8003426:	2301      	movs	r3, #1
 8003428:	e7f2      	b.n	8003410 <_printf_float+0x198>
 800342a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800342e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003430:	4299      	cmp	r1, r3
 8003432:	db05      	blt.n	8003440 <_printf_float+0x1c8>
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	6121      	str	r1, [r4, #16]
 8003438:	07d8      	lsls	r0, r3, #31
 800343a:	d5ea      	bpl.n	8003412 <_printf_float+0x19a>
 800343c:	1c4b      	adds	r3, r1, #1
 800343e:	e7e7      	b.n	8003410 <_printf_float+0x198>
 8003440:	2900      	cmp	r1, #0
 8003442:	bfcc      	ite	gt
 8003444:	2201      	movgt	r2, #1
 8003446:	f1c1 0202 	rsble	r2, r1, #2
 800344a:	4413      	add	r3, r2
 800344c:	e7e0      	b.n	8003410 <_printf_float+0x198>
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	055a      	lsls	r2, r3, #21
 8003452:	d407      	bmi.n	8003464 <_printf_float+0x1ec>
 8003454:	6923      	ldr	r3, [r4, #16]
 8003456:	4642      	mov	r2, r8
 8003458:	4631      	mov	r1, r6
 800345a:	4628      	mov	r0, r5
 800345c:	47b8      	blx	r7
 800345e:	3001      	adds	r0, #1
 8003460:	d12b      	bne.n	80034ba <_printf_float+0x242>
 8003462:	e764      	b.n	800332e <_printf_float+0xb6>
 8003464:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003468:	f240 80dc 	bls.w	8003624 <_printf_float+0x3ac>
 800346c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003470:	2200      	movs	r2, #0
 8003472:	2300      	movs	r3, #0
 8003474:	f7fd fa98 	bl	80009a8 <__aeabi_dcmpeq>
 8003478:	2800      	cmp	r0, #0
 800347a:	d033      	beq.n	80034e4 <_printf_float+0x26c>
 800347c:	2301      	movs	r3, #1
 800347e:	4631      	mov	r1, r6
 8003480:	4628      	mov	r0, r5
 8003482:	4a35      	ldr	r2, [pc, #212]	@ (8003558 <_printf_float+0x2e0>)
 8003484:	47b8      	blx	r7
 8003486:	3001      	adds	r0, #1
 8003488:	f43f af51 	beq.w	800332e <_printf_float+0xb6>
 800348c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003490:	4543      	cmp	r3, r8
 8003492:	db02      	blt.n	800349a <_printf_float+0x222>
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	07d8      	lsls	r0, r3, #31
 8003498:	d50f      	bpl.n	80034ba <_printf_float+0x242>
 800349a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800349e:	4631      	mov	r1, r6
 80034a0:	4628      	mov	r0, r5
 80034a2:	47b8      	blx	r7
 80034a4:	3001      	adds	r0, #1
 80034a6:	f43f af42 	beq.w	800332e <_printf_float+0xb6>
 80034aa:	f04f 0900 	mov.w	r9, #0
 80034ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80034b2:	f104 0a1a 	add.w	sl, r4, #26
 80034b6:	45c8      	cmp	r8, r9
 80034b8:	dc09      	bgt.n	80034ce <_printf_float+0x256>
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	079b      	lsls	r3, r3, #30
 80034be:	f100 8102 	bmi.w	80036c6 <_printf_float+0x44e>
 80034c2:	68e0      	ldr	r0, [r4, #12]
 80034c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80034c6:	4298      	cmp	r0, r3
 80034c8:	bfb8      	it	lt
 80034ca:	4618      	movlt	r0, r3
 80034cc:	e731      	b.n	8003332 <_printf_float+0xba>
 80034ce:	2301      	movs	r3, #1
 80034d0:	4652      	mov	r2, sl
 80034d2:	4631      	mov	r1, r6
 80034d4:	4628      	mov	r0, r5
 80034d6:	47b8      	blx	r7
 80034d8:	3001      	adds	r0, #1
 80034da:	f43f af28 	beq.w	800332e <_printf_float+0xb6>
 80034de:	f109 0901 	add.w	r9, r9, #1
 80034e2:	e7e8      	b.n	80034b6 <_printf_float+0x23e>
 80034e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	dc38      	bgt.n	800355c <_printf_float+0x2e4>
 80034ea:	2301      	movs	r3, #1
 80034ec:	4631      	mov	r1, r6
 80034ee:	4628      	mov	r0, r5
 80034f0:	4a19      	ldr	r2, [pc, #100]	@ (8003558 <_printf_float+0x2e0>)
 80034f2:	47b8      	blx	r7
 80034f4:	3001      	adds	r0, #1
 80034f6:	f43f af1a 	beq.w	800332e <_printf_float+0xb6>
 80034fa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80034fe:	ea59 0303 	orrs.w	r3, r9, r3
 8003502:	d102      	bne.n	800350a <_printf_float+0x292>
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	07d9      	lsls	r1, r3, #31
 8003508:	d5d7      	bpl.n	80034ba <_printf_float+0x242>
 800350a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800350e:	4631      	mov	r1, r6
 8003510:	4628      	mov	r0, r5
 8003512:	47b8      	blx	r7
 8003514:	3001      	adds	r0, #1
 8003516:	f43f af0a 	beq.w	800332e <_printf_float+0xb6>
 800351a:	f04f 0a00 	mov.w	sl, #0
 800351e:	f104 0b1a 	add.w	fp, r4, #26
 8003522:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003524:	425b      	negs	r3, r3
 8003526:	4553      	cmp	r3, sl
 8003528:	dc01      	bgt.n	800352e <_printf_float+0x2b6>
 800352a:	464b      	mov	r3, r9
 800352c:	e793      	b.n	8003456 <_printf_float+0x1de>
 800352e:	2301      	movs	r3, #1
 8003530:	465a      	mov	r2, fp
 8003532:	4631      	mov	r1, r6
 8003534:	4628      	mov	r0, r5
 8003536:	47b8      	blx	r7
 8003538:	3001      	adds	r0, #1
 800353a:	f43f aef8 	beq.w	800332e <_printf_float+0xb6>
 800353e:	f10a 0a01 	add.w	sl, sl, #1
 8003542:	e7ee      	b.n	8003522 <_printf_float+0x2aa>
 8003544:	7fefffff 	.word	0x7fefffff
 8003548:	08005d12 	.word	0x08005d12
 800354c:	08005d0e 	.word	0x08005d0e
 8003550:	08005d1a 	.word	0x08005d1a
 8003554:	08005d16 	.word	0x08005d16
 8003558:	08005d1e 	.word	0x08005d1e
 800355c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800355e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003562:	4553      	cmp	r3, sl
 8003564:	bfa8      	it	ge
 8003566:	4653      	movge	r3, sl
 8003568:	2b00      	cmp	r3, #0
 800356a:	4699      	mov	r9, r3
 800356c:	dc36      	bgt.n	80035dc <_printf_float+0x364>
 800356e:	f04f 0b00 	mov.w	fp, #0
 8003572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003576:	f104 021a 	add.w	r2, r4, #26
 800357a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800357c:	930a      	str	r3, [sp, #40]	@ 0x28
 800357e:	eba3 0309 	sub.w	r3, r3, r9
 8003582:	455b      	cmp	r3, fp
 8003584:	dc31      	bgt.n	80035ea <_printf_float+0x372>
 8003586:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003588:	459a      	cmp	sl, r3
 800358a:	dc3a      	bgt.n	8003602 <_printf_float+0x38a>
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	07da      	lsls	r2, r3, #31
 8003590:	d437      	bmi.n	8003602 <_printf_float+0x38a>
 8003592:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003594:	ebaa 0903 	sub.w	r9, sl, r3
 8003598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800359a:	ebaa 0303 	sub.w	r3, sl, r3
 800359e:	4599      	cmp	r9, r3
 80035a0:	bfa8      	it	ge
 80035a2:	4699      	movge	r9, r3
 80035a4:	f1b9 0f00 	cmp.w	r9, #0
 80035a8:	dc33      	bgt.n	8003612 <_printf_float+0x39a>
 80035aa:	f04f 0800 	mov.w	r8, #0
 80035ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035b2:	f104 0b1a 	add.w	fp, r4, #26
 80035b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80035b8:	ebaa 0303 	sub.w	r3, sl, r3
 80035bc:	eba3 0309 	sub.w	r3, r3, r9
 80035c0:	4543      	cmp	r3, r8
 80035c2:	f77f af7a 	ble.w	80034ba <_printf_float+0x242>
 80035c6:	2301      	movs	r3, #1
 80035c8:	465a      	mov	r2, fp
 80035ca:	4631      	mov	r1, r6
 80035cc:	4628      	mov	r0, r5
 80035ce:	47b8      	blx	r7
 80035d0:	3001      	adds	r0, #1
 80035d2:	f43f aeac 	beq.w	800332e <_printf_float+0xb6>
 80035d6:	f108 0801 	add.w	r8, r8, #1
 80035da:	e7ec      	b.n	80035b6 <_printf_float+0x33e>
 80035dc:	4642      	mov	r2, r8
 80035de:	4631      	mov	r1, r6
 80035e0:	4628      	mov	r0, r5
 80035e2:	47b8      	blx	r7
 80035e4:	3001      	adds	r0, #1
 80035e6:	d1c2      	bne.n	800356e <_printf_float+0x2f6>
 80035e8:	e6a1      	b.n	800332e <_printf_float+0xb6>
 80035ea:	2301      	movs	r3, #1
 80035ec:	4631      	mov	r1, r6
 80035ee:	4628      	mov	r0, r5
 80035f0:	920a      	str	r2, [sp, #40]	@ 0x28
 80035f2:	47b8      	blx	r7
 80035f4:	3001      	adds	r0, #1
 80035f6:	f43f ae9a 	beq.w	800332e <_printf_float+0xb6>
 80035fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80035fc:	f10b 0b01 	add.w	fp, fp, #1
 8003600:	e7bb      	b.n	800357a <_printf_float+0x302>
 8003602:	4631      	mov	r1, r6
 8003604:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003608:	4628      	mov	r0, r5
 800360a:	47b8      	blx	r7
 800360c:	3001      	adds	r0, #1
 800360e:	d1c0      	bne.n	8003592 <_printf_float+0x31a>
 8003610:	e68d      	b.n	800332e <_printf_float+0xb6>
 8003612:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003614:	464b      	mov	r3, r9
 8003616:	4631      	mov	r1, r6
 8003618:	4628      	mov	r0, r5
 800361a:	4442      	add	r2, r8
 800361c:	47b8      	blx	r7
 800361e:	3001      	adds	r0, #1
 8003620:	d1c3      	bne.n	80035aa <_printf_float+0x332>
 8003622:	e684      	b.n	800332e <_printf_float+0xb6>
 8003624:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003628:	f1ba 0f01 	cmp.w	sl, #1
 800362c:	dc01      	bgt.n	8003632 <_printf_float+0x3ba>
 800362e:	07db      	lsls	r3, r3, #31
 8003630:	d536      	bpl.n	80036a0 <_printf_float+0x428>
 8003632:	2301      	movs	r3, #1
 8003634:	4642      	mov	r2, r8
 8003636:	4631      	mov	r1, r6
 8003638:	4628      	mov	r0, r5
 800363a:	47b8      	blx	r7
 800363c:	3001      	adds	r0, #1
 800363e:	f43f ae76 	beq.w	800332e <_printf_float+0xb6>
 8003642:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003646:	4631      	mov	r1, r6
 8003648:	4628      	mov	r0, r5
 800364a:	47b8      	blx	r7
 800364c:	3001      	adds	r0, #1
 800364e:	f43f ae6e 	beq.w	800332e <_printf_float+0xb6>
 8003652:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003656:	2200      	movs	r2, #0
 8003658:	2300      	movs	r3, #0
 800365a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800365e:	f7fd f9a3 	bl	80009a8 <__aeabi_dcmpeq>
 8003662:	b9c0      	cbnz	r0, 8003696 <_printf_float+0x41e>
 8003664:	4653      	mov	r3, sl
 8003666:	f108 0201 	add.w	r2, r8, #1
 800366a:	4631      	mov	r1, r6
 800366c:	4628      	mov	r0, r5
 800366e:	47b8      	blx	r7
 8003670:	3001      	adds	r0, #1
 8003672:	d10c      	bne.n	800368e <_printf_float+0x416>
 8003674:	e65b      	b.n	800332e <_printf_float+0xb6>
 8003676:	2301      	movs	r3, #1
 8003678:	465a      	mov	r2, fp
 800367a:	4631      	mov	r1, r6
 800367c:	4628      	mov	r0, r5
 800367e:	47b8      	blx	r7
 8003680:	3001      	adds	r0, #1
 8003682:	f43f ae54 	beq.w	800332e <_printf_float+0xb6>
 8003686:	f108 0801 	add.w	r8, r8, #1
 800368a:	45d0      	cmp	r8, sl
 800368c:	dbf3      	blt.n	8003676 <_printf_float+0x3fe>
 800368e:	464b      	mov	r3, r9
 8003690:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003694:	e6e0      	b.n	8003458 <_printf_float+0x1e0>
 8003696:	f04f 0800 	mov.w	r8, #0
 800369a:	f104 0b1a 	add.w	fp, r4, #26
 800369e:	e7f4      	b.n	800368a <_printf_float+0x412>
 80036a0:	2301      	movs	r3, #1
 80036a2:	4642      	mov	r2, r8
 80036a4:	e7e1      	b.n	800366a <_printf_float+0x3f2>
 80036a6:	2301      	movs	r3, #1
 80036a8:	464a      	mov	r2, r9
 80036aa:	4631      	mov	r1, r6
 80036ac:	4628      	mov	r0, r5
 80036ae:	47b8      	blx	r7
 80036b0:	3001      	adds	r0, #1
 80036b2:	f43f ae3c 	beq.w	800332e <_printf_float+0xb6>
 80036b6:	f108 0801 	add.w	r8, r8, #1
 80036ba:	68e3      	ldr	r3, [r4, #12]
 80036bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80036be:	1a5b      	subs	r3, r3, r1
 80036c0:	4543      	cmp	r3, r8
 80036c2:	dcf0      	bgt.n	80036a6 <_printf_float+0x42e>
 80036c4:	e6fd      	b.n	80034c2 <_printf_float+0x24a>
 80036c6:	f04f 0800 	mov.w	r8, #0
 80036ca:	f104 0919 	add.w	r9, r4, #25
 80036ce:	e7f4      	b.n	80036ba <_printf_float+0x442>

080036d0 <_printf_common>:
 80036d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036d4:	4616      	mov	r6, r2
 80036d6:	4698      	mov	r8, r3
 80036d8:	688a      	ldr	r2, [r1, #8]
 80036da:	690b      	ldr	r3, [r1, #16]
 80036dc:	4607      	mov	r7, r0
 80036de:	4293      	cmp	r3, r2
 80036e0:	bfb8      	it	lt
 80036e2:	4613      	movlt	r3, r2
 80036e4:	6033      	str	r3, [r6, #0]
 80036e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036ea:	460c      	mov	r4, r1
 80036ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036f0:	b10a      	cbz	r2, 80036f6 <_printf_common+0x26>
 80036f2:	3301      	adds	r3, #1
 80036f4:	6033      	str	r3, [r6, #0]
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	0699      	lsls	r1, r3, #26
 80036fa:	bf42      	ittt	mi
 80036fc:	6833      	ldrmi	r3, [r6, #0]
 80036fe:	3302      	addmi	r3, #2
 8003700:	6033      	strmi	r3, [r6, #0]
 8003702:	6825      	ldr	r5, [r4, #0]
 8003704:	f015 0506 	ands.w	r5, r5, #6
 8003708:	d106      	bne.n	8003718 <_printf_common+0x48>
 800370a:	f104 0a19 	add.w	sl, r4, #25
 800370e:	68e3      	ldr	r3, [r4, #12]
 8003710:	6832      	ldr	r2, [r6, #0]
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	42ab      	cmp	r3, r5
 8003716:	dc2b      	bgt.n	8003770 <_printf_common+0xa0>
 8003718:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800371c:	6822      	ldr	r2, [r4, #0]
 800371e:	3b00      	subs	r3, #0
 8003720:	bf18      	it	ne
 8003722:	2301      	movne	r3, #1
 8003724:	0692      	lsls	r2, r2, #26
 8003726:	d430      	bmi.n	800378a <_printf_common+0xba>
 8003728:	4641      	mov	r1, r8
 800372a:	4638      	mov	r0, r7
 800372c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003730:	47c8      	blx	r9
 8003732:	3001      	adds	r0, #1
 8003734:	d023      	beq.n	800377e <_printf_common+0xae>
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	6922      	ldr	r2, [r4, #16]
 800373a:	f003 0306 	and.w	r3, r3, #6
 800373e:	2b04      	cmp	r3, #4
 8003740:	bf14      	ite	ne
 8003742:	2500      	movne	r5, #0
 8003744:	6833      	ldreq	r3, [r6, #0]
 8003746:	f04f 0600 	mov.w	r6, #0
 800374a:	bf08      	it	eq
 800374c:	68e5      	ldreq	r5, [r4, #12]
 800374e:	f104 041a 	add.w	r4, r4, #26
 8003752:	bf08      	it	eq
 8003754:	1aed      	subeq	r5, r5, r3
 8003756:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800375a:	bf08      	it	eq
 800375c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003760:	4293      	cmp	r3, r2
 8003762:	bfc4      	itt	gt
 8003764:	1a9b      	subgt	r3, r3, r2
 8003766:	18ed      	addgt	r5, r5, r3
 8003768:	42b5      	cmp	r5, r6
 800376a:	d11a      	bne.n	80037a2 <_printf_common+0xd2>
 800376c:	2000      	movs	r0, #0
 800376e:	e008      	b.n	8003782 <_printf_common+0xb2>
 8003770:	2301      	movs	r3, #1
 8003772:	4652      	mov	r2, sl
 8003774:	4641      	mov	r1, r8
 8003776:	4638      	mov	r0, r7
 8003778:	47c8      	blx	r9
 800377a:	3001      	adds	r0, #1
 800377c:	d103      	bne.n	8003786 <_printf_common+0xb6>
 800377e:	f04f 30ff 	mov.w	r0, #4294967295
 8003782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003786:	3501      	adds	r5, #1
 8003788:	e7c1      	b.n	800370e <_printf_common+0x3e>
 800378a:	2030      	movs	r0, #48	@ 0x30
 800378c:	18e1      	adds	r1, r4, r3
 800378e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003798:	4422      	add	r2, r4
 800379a:	3302      	adds	r3, #2
 800379c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80037a0:	e7c2      	b.n	8003728 <_printf_common+0x58>
 80037a2:	2301      	movs	r3, #1
 80037a4:	4622      	mov	r2, r4
 80037a6:	4641      	mov	r1, r8
 80037a8:	4638      	mov	r0, r7
 80037aa:	47c8      	blx	r9
 80037ac:	3001      	adds	r0, #1
 80037ae:	d0e6      	beq.n	800377e <_printf_common+0xae>
 80037b0:	3601      	adds	r6, #1
 80037b2:	e7d9      	b.n	8003768 <_printf_common+0x98>

080037b4 <_printf_i>:
 80037b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037b8:	7e0f      	ldrb	r7, [r1, #24]
 80037ba:	4691      	mov	r9, r2
 80037bc:	2f78      	cmp	r7, #120	@ 0x78
 80037be:	4680      	mov	r8, r0
 80037c0:	460c      	mov	r4, r1
 80037c2:	469a      	mov	sl, r3
 80037c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037ca:	d807      	bhi.n	80037dc <_printf_i+0x28>
 80037cc:	2f62      	cmp	r7, #98	@ 0x62
 80037ce:	d80a      	bhi.n	80037e6 <_printf_i+0x32>
 80037d0:	2f00      	cmp	r7, #0
 80037d2:	f000 80d1 	beq.w	8003978 <_printf_i+0x1c4>
 80037d6:	2f58      	cmp	r7, #88	@ 0x58
 80037d8:	f000 80b8 	beq.w	800394c <_printf_i+0x198>
 80037dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037e4:	e03a      	b.n	800385c <_printf_i+0xa8>
 80037e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037ea:	2b15      	cmp	r3, #21
 80037ec:	d8f6      	bhi.n	80037dc <_printf_i+0x28>
 80037ee:	a101      	add	r1, pc, #4	@ (adr r1, 80037f4 <_printf_i+0x40>)
 80037f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037f4:	0800384d 	.word	0x0800384d
 80037f8:	08003861 	.word	0x08003861
 80037fc:	080037dd 	.word	0x080037dd
 8003800:	080037dd 	.word	0x080037dd
 8003804:	080037dd 	.word	0x080037dd
 8003808:	080037dd 	.word	0x080037dd
 800380c:	08003861 	.word	0x08003861
 8003810:	080037dd 	.word	0x080037dd
 8003814:	080037dd 	.word	0x080037dd
 8003818:	080037dd 	.word	0x080037dd
 800381c:	080037dd 	.word	0x080037dd
 8003820:	0800395f 	.word	0x0800395f
 8003824:	0800388b 	.word	0x0800388b
 8003828:	08003919 	.word	0x08003919
 800382c:	080037dd 	.word	0x080037dd
 8003830:	080037dd 	.word	0x080037dd
 8003834:	08003981 	.word	0x08003981
 8003838:	080037dd 	.word	0x080037dd
 800383c:	0800388b 	.word	0x0800388b
 8003840:	080037dd 	.word	0x080037dd
 8003844:	080037dd 	.word	0x080037dd
 8003848:	08003921 	.word	0x08003921
 800384c:	6833      	ldr	r3, [r6, #0]
 800384e:	1d1a      	adds	r2, r3, #4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6032      	str	r2, [r6, #0]
 8003854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003858:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800385c:	2301      	movs	r3, #1
 800385e:	e09c      	b.n	800399a <_printf_i+0x1e6>
 8003860:	6833      	ldr	r3, [r6, #0]
 8003862:	6820      	ldr	r0, [r4, #0]
 8003864:	1d19      	adds	r1, r3, #4
 8003866:	6031      	str	r1, [r6, #0]
 8003868:	0606      	lsls	r6, r0, #24
 800386a:	d501      	bpl.n	8003870 <_printf_i+0xbc>
 800386c:	681d      	ldr	r5, [r3, #0]
 800386e:	e003      	b.n	8003878 <_printf_i+0xc4>
 8003870:	0645      	lsls	r5, r0, #25
 8003872:	d5fb      	bpl.n	800386c <_printf_i+0xb8>
 8003874:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003878:	2d00      	cmp	r5, #0
 800387a:	da03      	bge.n	8003884 <_printf_i+0xd0>
 800387c:	232d      	movs	r3, #45	@ 0x2d
 800387e:	426d      	negs	r5, r5
 8003880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003884:	230a      	movs	r3, #10
 8003886:	4858      	ldr	r0, [pc, #352]	@ (80039e8 <_printf_i+0x234>)
 8003888:	e011      	b.n	80038ae <_printf_i+0xfa>
 800388a:	6821      	ldr	r1, [r4, #0]
 800388c:	6833      	ldr	r3, [r6, #0]
 800388e:	0608      	lsls	r0, r1, #24
 8003890:	f853 5b04 	ldr.w	r5, [r3], #4
 8003894:	d402      	bmi.n	800389c <_printf_i+0xe8>
 8003896:	0649      	lsls	r1, r1, #25
 8003898:	bf48      	it	mi
 800389a:	b2ad      	uxthmi	r5, r5
 800389c:	2f6f      	cmp	r7, #111	@ 0x6f
 800389e:	6033      	str	r3, [r6, #0]
 80038a0:	bf14      	ite	ne
 80038a2:	230a      	movne	r3, #10
 80038a4:	2308      	moveq	r3, #8
 80038a6:	4850      	ldr	r0, [pc, #320]	@ (80039e8 <_printf_i+0x234>)
 80038a8:	2100      	movs	r1, #0
 80038aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80038ae:	6866      	ldr	r6, [r4, #4]
 80038b0:	2e00      	cmp	r6, #0
 80038b2:	60a6      	str	r6, [r4, #8]
 80038b4:	db05      	blt.n	80038c2 <_printf_i+0x10e>
 80038b6:	6821      	ldr	r1, [r4, #0]
 80038b8:	432e      	orrs	r6, r5
 80038ba:	f021 0104 	bic.w	r1, r1, #4
 80038be:	6021      	str	r1, [r4, #0]
 80038c0:	d04b      	beq.n	800395a <_printf_i+0x1a6>
 80038c2:	4616      	mov	r6, r2
 80038c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80038c8:	fb03 5711 	mls	r7, r3, r1, r5
 80038cc:	5dc7      	ldrb	r7, [r0, r7]
 80038ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038d2:	462f      	mov	r7, r5
 80038d4:	42bb      	cmp	r3, r7
 80038d6:	460d      	mov	r5, r1
 80038d8:	d9f4      	bls.n	80038c4 <_printf_i+0x110>
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d10b      	bne.n	80038f6 <_printf_i+0x142>
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	07df      	lsls	r7, r3, #31
 80038e2:	d508      	bpl.n	80038f6 <_printf_i+0x142>
 80038e4:	6923      	ldr	r3, [r4, #16]
 80038e6:	6861      	ldr	r1, [r4, #4]
 80038e8:	4299      	cmp	r1, r3
 80038ea:	bfde      	ittt	le
 80038ec:	2330      	movle	r3, #48	@ 0x30
 80038ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038f6:	1b92      	subs	r2, r2, r6
 80038f8:	6122      	str	r2, [r4, #16]
 80038fa:	464b      	mov	r3, r9
 80038fc:	4621      	mov	r1, r4
 80038fe:	4640      	mov	r0, r8
 8003900:	f8cd a000 	str.w	sl, [sp]
 8003904:	aa03      	add	r2, sp, #12
 8003906:	f7ff fee3 	bl	80036d0 <_printf_common>
 800390a:	3001      	adds	r0, #1
 800390c:	d14a      	bne.n	80039a4 <_printf_i+0x1f0>
 800390e:	f04f 30ff 	mov.w	r0, #4294967295
 8003912:	b004      	add	sp, #16
 8003914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	f043 0320 	orr.w	r3, r3, #32
 800391e:	6023      	str	r3, [r4, #0]
 8003920:	2778      	movs	r7, #120	@ 0x78
 8003922:	4832      	ldr	r0, [pc, #200]	@ (80039ec <_printf_i+0x238>)
 8003924:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	6831      	ldr	r1, [r6, #0]
 800392c:	061f      	lsls	r7, r3, #24
 800392e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003932:	d402      	bmi.n	800393a <_printf_i+0x186>
 8003934:	065f      	lsls	r7, r3, #25
 8003936:	bf48      	it	mi
 8003938:	b2ad      	uxthmi	r5, r5
 800393a:	6031      	str	r1, [r6, #0]
 800393c:	07d9      	lsls	r1, r3, #31
 800393e:	bf44      	itt	mi
 8003940:	f043 0320 	orrmi.w	r3, r3, #32
 8003944:	6023      	strmi	r3, [r4, #0]
 8003946:	b11d      	cbz	r5, 8003950 <_printf_i+0x19c>
 8003948:	2310      	movs	r3, #16
 800394a:	e7ad      	b.n	80038a8 <_printf_i+0xf4>
 800394c:	4826      	ldr	r0, [pc, #152]	@ (80039e8 <_printf_i+0x234>)
 800394e:	e7e9      	b.n	8003924 <_printf_i+0x170>
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	f023 0320 	bic.w	r3, r3, #32
 8003956:	6023      	str	r3, [r4, #0]
 8003958:	e7f6      	b.n	8003948 <_printf_i+0x194>
 800395a:	4616      	mov	r6, r2
 800395c:	e7bd      	b.n	80038da <_printf_i+0x126>
 800395e:	6833      	ldr	r3, [r6, #0]
 8003960:	6825      	ldr	r5, [r4, #0]
 8003962:	1d18      	adds	r0, r3, #4
 8003964:	6961      	ldr	r1, [r4, #20]
 8003966:	6030      	str	r0, [r6, #0]
 8003968:	062e      	lsls	r6, r5, #24
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	d501      	bpl.n	8003972 <_printf_i+0x1be>
 800396e:	6019      	str	r1, [r3, #0]
 8003970:	e002      	b.n	8003978 <_printf_i+0x1c4>
 8003972:	0668      	lsls	r0, r5, #25
 8003974:	d5fb      	bpl.n	800396e <_printf_i+0x1ba>
 8003976:	8019      	strh	r1, [r3, #0]
 8003978:	2300      	movs	r3, #0
 800397a:	4616      	mov	r6, r2
 800397c:	6123      	str	r3, [r4, #16]
 800397e:	e7bc      	b.n	80038fa <_printf_i+0x146>
 8003980:	6833      	ldr	r3, [r6, #0]
 8003982:	2100      	movs	r1, #0
 8003984:	1d1a      	adds	r2, r3, #4
 8003986:	6032      	str	r2, [r6, #0]
 8003988:	681e      	ldr	r6, [r3, #0]
 800398a:	6862      	ldr	r2, [r4, #4]
 800398c:	4630      	mov	r0, r6
 800398e:	f000 fab8 	bl	8003f02 <memchr>
 8003992:	b108      	cbz	r0, 8003998 <_printf_i+0x1e4>
 8003994:	1b80      	subs	r0, r0, r6
 8003996:	6060      	str	r0, [r4, #4]
 8003998:	6863      	ldr	r3, [r4, #4]
 800399a:	6123      	str	r3, [r4, #16]
 800399c:	2300      	movs	r3, #0
 800399e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039a2:	e7aa      	b.n	80038fa <_printf_i+0x146>
 80039a4:	4632      	mov	r2, r6
 80039a6:	4649      	mov	r1, r9
 80039a8:	4640      	mov	r0, r8
 80039aa:	6923      	ldr	r3, [r4, #16]
 80039ac:	47d0      	blx	sl
 80039ae:	3001      	adds	r0, #1
 80039b0:	d0ad      	beq.n	800390e <_printf_i+0x15a>
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	079b      	lsls	r3, r3, #30
 80039b6:	d413      	bmi.n	80039e0 <_printf_i+0x22c>
 80039b8:	68e0      	ldr	r0, [r4, #12]
 80039ba:	9b03      	ldr	r3, [sp, #12]
 80039bc:	4298      	cmp	r0, r3
 80039be:	bfb8      	it	lt
 80039c0:	4618      	movlt	r0, r3
 80039c2:	e7a6      	b.n	8003912 <_printf_i+0x15e>
 80039c4:	2301      	movs	r3, #1
 80039c6:	4632      	mov	r2, r6
 80039c8:	4649      	mov	r1, r9
 80039ca:	4640      	mov	r0, r8
 80039cc:	47d0      	blx	sl
 80039ce:	3001      	adds	r0, #1
 80039d0:	d09d      	beq.n	800390e <_printf_i+0x15a>
 80039d2:	3501      	adds	r5, #1
 80039d4:	68e3      	ldr	r3, [r4, #12]
 80039d6:	9903      	ldr	r1, [sp, #12]
 80039d8:	1a5b      	subs	r3, r3, r1
 80039da:	42ab      	cmp	r3, r5
 80039dc:	dcf2      	bgt.n	80039c4 <_printf_i+0x210>
 80039de:	e7eb      	b.n	80039b8 <_printf_i+0x204>
 80039e0:	2500      	movs	r5, #0
 80039e2:	f104 0619 	add.w	r6, r4, #25
 80039e6:	e7f5      	b.n	80039d4 <_printf_i+0x220>
 80039e8:	08005d20 	.word	0x08005d20
 80039ec:	08005d31 	.word	0x08005d31

080039f0 <std>:
 80039f0:	2300      	movs	r3, #0
 80039f2:	b510      	push	{r4, lr}
 80039f4:	4604      	mov	r4, r0
 80039f6:	e9c0 3300 	strd	r3, r3, [r0]
 80039fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039fe:	6083      	str	r3, [r0, #8]
 8003a00:	8181      	strh	r1, [r0, #12]
 8003a02:	6643      	str	r3, [r0, #100]	@ 0x64
 8003a04:	81c2      	strh	r2, [r0, #14]
 8003a06:	6183      	str	r3, [r0, #24]
 8003a08:	4619      	mov	r1, r3
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	305c      	adds	r0, #92	@ 0x5c
 8003a0e:	f000 f9f9 	bl	8003e04 <memset>
 8003a12:	4b0d      	ldr	r3, [pc, #52]	@ (8003a48 <std+0x58>)
 8003a14:	6224      	str	r4, [r4, #32]
 8003a16:	6263      	str	r3, [r4, #36]	@ 0x24
 8003a18:	4b0c      	ldr	r3, [pc, #48]	@ (8003a4c <std+0x5c>)
 8003a1a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a50 <std+0x60>)
 8003a1e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003a20:	4b0c      	ldr	r3, [pc, #48]	@ (8003a54 <std+0x64>)
 8003a22:	6323      	str	r3, [r4, #48]	@ 0x30
 8003a24:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <std+0x68>)
 8003a26:	429c      	cmp	r4, r3
 8003a28:	d006      	beq.n	8003a38 <std+0x48>
 8003a2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003a2e:	4294      	cmp	r4, r2
 8003a30:	d002      	beq.n	8003a38 <std+0x48>
 8003a32:	33d0      	adds	r3, #208	@ 0xd0
 8003a34:	429c      	cmp	r4, r3
 8003a36:	d105      	bne.n	8003a44 <std+0x54>
 8003a38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a40:	f000 ba5c 	b.w	8003efc <__retarget_lock_init_recursive>
 8003a44:	bd10      	pop	{r4, pc}
 8003a46:	bf00      	nop
 8003a48:	08003c55 	.word	0x08003c55
 8003a4c:	08003c77 	.word	0x08003c77
 8003a50:	08003caf 	.word	0x08003caf
 8003a54:	08003cd3 	.word	0x08003cd3
 8003a58:	20000258 	.word	0x20000258

08003a5c <stdio_exit_handler>:
 8003a5c:	4a02      	ldr	r2, [pc, #8]	@ (8003a68 <stdio_exit_handler+0xc>)
 8003a5e:	4903      	ldr	r1, [pc, #12]	@ (8003a6c <stdio_exit_handler+0x10>)
 8003a60:	4803      	ldr	r0, [pc, #12]	@ (8003a70 <stdio_exit_handler+0x14>)
 8003a62:	f000 b869 	b.w	8003b38 <_fwalk_sglue>
 8003a66:	bf00      	nop
 8003a68:	20000018 	.word	0x20000018
 8003a6c:	08005849 	.word	0x08005849
 8003a70:	20000028 	.word	0x20000028

08003a74 <cleanup_stdio>:
 8003a74:	6841      	ldr	r1, [r0, #4]
 8003a76:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa8 <cleanup_stdio+0x34>)
 8003a78:	b510      	push	{r4, lr}
 8003a7a:	4299      	cmp	r1, r3
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	d001      	beq.n	8003a84 <cleanup_stdio+0x10>
 8003a80:	f001 fee2 	bl	8005848 <_fflush_r>
 8003a84:	68a1      	ldr	r1, [r4, #8]
 8003a86:	4b09      	ldr	r3, [pc, #36]	@ (8003aac <cleanup_stdio+0x38>)
 8003a88:	4299      	cmp	r1, r3
 8003a8a:	d002      	beq.n	8003a92 <cleanup_stdio+0x1e>
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f001 fedb 	bl	8005848 <_fflush_r>
 8003a92:	68e1      	ldr	r1, [r4, #12]
 8003a94:	4b06      	ldr	r3, [pc, #24]	@ (8003ab0 <cleanup_stdio+0x3c>)
 8003a96:	4299      	cmp	r1, r3
 8003a98:	d004      	beq.n	8003aa4 <cleanup_stdio+0x30>
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aa0:	f001 bed2 	b.w	8005848 <_fflush_r>
 8003aa4:	bd10      	pop	{r4, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000258 	.word	0x20000258
 8003aac:	200002c0 	.word	0x200002c0
 8003ab0:	20000328 	.word	0x20000328

08003ab4 <global_stdio_init.part.0>:
 8003ab4:	b510      	push	{r4, lr}
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <global_stdio_init.part.0+0x30>)
 8003ab8:	4c0b      	ldr	r4, [pc, #44]	@ (8003ae8 <global_stdio_init.part.0+0x34>)
 8003aba:	4a0c      	ldr	r2, [pc, #48]	@ (8003aec <global_stdio_init.part.0+0x38>)
 8003abc:	4620      	mov	r0, r4
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	2104      	movs	r1, #4
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f7ff ff94 	bl	80039f0 <std>
 8003ac8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003acc:	2201      	movs	r2, #1
 8003ace:	2109      	movs	r1, #9
 8003ad0:	f7ff ff8e 	bl	80039f0 <std>
 8003ad4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ad8:	2202      	movs	r2, #2
 8003ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ade:	2112      	movs	r1, #18
 8003ae0:	f7ff bf86 	b.w	80039f0 <std>
 8003ae4:	20000390 	.word	0x20000390
 8003ae8:	20000258 	.word	0x20000258
 8003aec:	08003a5d 	.word	0x08003a5d

08003af0 <__sfp_lock_acquire>:
 8003af0:	4801      	ldr	r0, [pc, #4]	@ (8003af8 <__sfp_lock_acquire+0x8>)
 8003af2:	f000 ba04 	b.w	8003efe <__retarget_lock_acquire_recursive>
 8003af6:	bf00      	nop
 8003af8:	20000399 	.word	0x20000399

08003afc <__sfp_lock_release>:
 8003afc:	4801      	ldr	r0, [pc, #4]	@ (8003b04 <__sfp_lock_release+0x8>)
 8003afe:	f000 b9ff 	b.w	8003f00 <__retarget_lock_release_recursive>
 8003b02:	bf00      	nop
 8003b04:	20000399 	.word	0x20000399

08003b08 <__sinit>:
 8003b08:	b510      	push	{r4, lr}
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	f7ff fff0 	bl	8003af0 <__sfp_lock_acquire>
 8003b10:	6a23      	ldr	r3, [r4, #32]
 8003b12:	b11b      	cbz	r3, 8003b1c <__sinit+0x14>
 8003b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b18:	f7ff bff0 	b.w	8003afc <__sfp_lock_release>
 8003b1c:	4b04      	ldr	r3, [pc, #16]	@ (8003b30 <__sinit+0x28>)
 8003b1e:	6223      	str	r3, [r4, #32]
 8003b20:	4b04      	ldr	r3, [pc, #16]	@ (8003b34 <__sinit+0x2c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f5      	bne.n	8003b14 <__sinit+0xc>
 8003b28:	f7ff ffc4 	bl	8003ab4 <global_stdio_init.part.0>
 8003b2c:	e7f2      	b.n	8003b14 <__sinit+0xc>
 8003b2e:	bf00      	nop
 8003b30:	08003a75 	.word	0x08003a75
 8003b34:	20000390 	.word	0x20000390

08003b38 <_fwalk_sglue>:
 8003b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b3c:	4607      	mov	r7, r0
 8003b3e:	4688      	mov	r8, r1
 8003b40:	4614      	mov	r4, r2
 8003b42:	2600      	movs	r6, #0
 8003b44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b48:	f1b9 0901 	subs.w	r9, r9, #1
 8003b4c:	d505      	bpl.n	8003b5a <_fwalk_sglue+0x22>
 8003b4e:	6824      	ldr	r4, [r4, #0]
 8003b50:	2c00      	cmp	r4, #0
 8003b52:	d1f7      	bne.n	8003b44 <_fwalk_sglue+0xc>
 8003b54:	4630      	mov	r0, r6
 8003b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b5a:	89ab      	ldrh	r3, [r5, #12]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d907      	bls.n	8003b70 <_fwalk_sglue+0x38>
 8003b60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b64:	3301      	adds	r3, #1
 8003b66:	d003      	beq.n	8003b70 <_fwalk_sglue+0x38>
 8003b68:	4629      	mov	r1, r5
 8003b6a:	4638      	mov	r0, r7
 8003b6c:	47c0      	blx	r8
 8003b6e:	4306      	orrs	r6, r0
 8003b70:	3568      	adds	r5, #104	@ 0x68
 8003b72:	e7e9      	b.n	8003b48 <_fwalk_sglue+0x10>

08003b74 <iprintf>:
 8003b74:	b40f      	push	{r0, r1, r2, r3}
 8003b76:	b507      	push	{r0, r1, r2, lr}
 8003b78:	4906      	ldr	r1, [pc, #24]	@ (8003b94 <iprintf+0x20>)
 8003b7a:	ab04      	add	r3, sp, #16
 8003b7c:	6808      	ldr	r0, [r1, #0]
 8003b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b82:	6881      	ldr	r1, [r0, #8]
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	f001 fcc7 	bl	8005518 <_vfiprintf_r>
 8003b8a:	b003      	add	sp, #12
 8003b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b90:	b004      	add	sp, #16
 8003b92:	4770      	bx	lr
 8003b94:	20000024 	.word	0x20000024

08003b98 <_puts_r>:
 8003b98:	6a03      	ldr	r3, [r0, #32]
 8003b9a:	b570      	push	{r4, r5, r6, lr}
 8003b9c:	4605      	mov	r5, r0
 8003b9e:	460e      	mov	r6, r1
 8003ba0:	6884      	ldr	r4, [r0, #8]
 8003ba2:	b90b      	cbnz	r3, 8003ba8 <_puts_r+0x10>
 8003ba4:	f7ff ffb0 	bl	8003b08 <__sinit>
 8003ba8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003baa:	07db      	lsls	r3, r3, #31
 8003bac:	d405      	bmi.n	8003bba <_puts_r+0x22>
 8003bae:	89a3      	ldrh	r3, [r4, #12]
 8003bb0:	0598      	lsls	r0, r3, #22
 8003bb2:	d402      	bmi.n	8003bba <_puts_r+0x22>
 8003bb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bb6:	f000 f9a2 	bl	8003efe <__retarget_lock_acquire_recursive>
 8003bba:	89a3      	ldrh	r3, [r4, #12]
 8003bbc:	0719      	lsls	r1, r3, #28
 8003bbe:	d502      	bpl.n	8003bc6 <_puts_r+0x2e>
 8003bc0:	6923      	ldr	r3, [r4, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d135      	bne.n	8003c32 <_puts_r+0x9a>
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f000 f8c5 	bl	8003d58 <__swsetup_r>
 8003bce:	b380      	cbz	r0, 8003c32 <_puts_r+0x9a>
 8003bd0:	f04f 35ff 	mov.w	r5, #4294967295
 8003bd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003bd6:	07da      	lsls	r2, r3, #31
 8003bd8:	d405      	bmi.n	8003be6 <_puts_r+0x4e>
 8003bda:	89a3      	ldrh	r3, [r4, #12]
 8003bdc:	059b      	lsls	r3, r3, #22
 8003bde:	d402      	bmi.n	8003be6 <_puts_r+0x4e>
 8003be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003be2:	f000 f98d 	bl	8003f00 <__retarget_lock_release_recursive>
 8003be6:	4628      	mov	r0, r5
 8003be8:	bd70      	pop	{r4, r5, r6, pc}
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	da04      	bge.n	8003bf8 <_puts_r+0x60>
 8003bee:	69a2      	ldr	r2, [r4, #24]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	dc17      	bgt.n	8003c24 <_puts_r+0x8c>
 8003bf4:	290a      	cmp	r1, #10
 8003bf6:	d015      	beq.n	8003c24 <_puts_r+0x8c>
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	6022      	str	r2, [r4, #0]
 8003bfe:	7019      	strb	r1, [r3, #0]
 8003c00:	68a3      	ldr	r3, [r4, #8]
 8003c02:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c06:	3b01      	subs	r3, #1
 8003c08:	60a3      	str	r3, [r4, #8]
 8003c0a:	2900      	cmp	r1, #0
 8003c0c:	d1ed      	bne.n	8003bea <_puts_r+0x52>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	da11      	bge.n	8003c36 <_puts_r+0x9e>
 8003c12:	4622      	mov	r2, r4
 8003c14:	210a      	movs	r1, #10
 8003c16:	4628      	mov	r0, r5
 8003c18:	f000 f85f 	bl	8003cda <__swbuf_r>
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d0d7      	beq.n	8003bd0 <_puts_r+0x38>
 8003c20:	250a      	movs	r5, #10
 8003c22:	e7d7      	b.n	8003bd4 <_puts_r+0x3c>
 8003c24:	4622      	mov	r2, r4
 8003c26:	4628      	mov	r0, r5
 8003c28:	f000 f857 	bl	8003cda <__swbuf_r>
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	d1e7      	bne.n	8003c00 <_puts_r+0x68>
 8003c30:	e7ce      	b.n	8003bd0 <_puts_r+0x38>
 8003c32:	3e01      	subs	r6, #1
 8003c34:	e7e4      	b.n	8003c00 <_puts_r+0x68>
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	6022      	str	r2, [r4, #0]
 8003c3c:	220a      	movs	r2, #10
 8003c3e:	701a      	strb	r2, [r3, #0]
 8003c40:	e7ee      	b.n	8003c20 <_puts_r+0x88>
	...

08003c44 <puts>:
 8003c44:	4b02      	ldr	r3, [pc, #8]	@ (8003c50 <puts+0xc>)
 8003c46:	4601      	mov	r1, r0
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	f7ff bfa5 	b.w	8003b98 <_puts_r>
 8003c4e:	bf00      	nop
 8003c50:	20000024 	.word	0x20000024

08003c54 <__sread>:
 8003c54:	b510      	push	{r4, lr}
 8003c56:	460c      	mov	r4, r1
 8003c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c5c:	f000 f900 	bl	8003e60 <_read_r>
 8003c60:	2800      	cmp	r0, #0
 8003c62:	bfab      	itete	ge
 8003c64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003c66:	89a3      	ldrhlt	r3, [r4, #12]
 8003c68:	181b      	addge	r3, r3, r0
 8003c6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003c6e:	bfac      	ite	ge
 8003c70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003c72:	81a3      	strhlt	r3, [r4, #12]
 8003c74:	bd10      	pop	{r4, pc}

08003c76 <__swrite>:
 8003c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c7a:	461f      	mov	r7, r3
 8003c7c:	898b      	ldrh	r3, [r1, #12]
 8003c7e:	4605      	mov	r5, r0
 8003c80:	05db      	lsls	r3, r3, #23
 8003c82:	460c      	mov	r4, r1
 8003c84:	4616      	mov	r6, r2
 8003c86:	d505      	bpl.n	8003c94 <__swrite+0x1e>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c90:	f000 f8d4 	bl	8003e3c <_lseek_r>
 8003c94:	89a3      	ldrh	r3, [r4, #12]
 8003c96:	4632      	mov	r2, r6
 8003c98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c9c:	81a3      	strh	r3, [r4, #12]
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	463b      	mov	r3, r7
 8003ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003caa:	f000 b8eb 	b.w	8003e84 <_write_r>

08003cae <__sseek>:
 8003cae:	b510      	push	{r4, lr}
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb6:	f000 f8c1 	bl	8003e3c <_lseek_r>
 8003cba:	1c43      	adds	r3, r0, #1
 8003cbc:	89a3      	ldrh	r3, [r4, #12]
 8003cbe:	bf15      	itete	ne
 8003cc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003cc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003cc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003cca:	81a3      	strheq	r3, [r4, #12]
 8003ccc:	bf18      	it	ne
 8003cce:	81a3      	strhne	r3, [r4, #12]
 8003cd0:	bd10      	pop	{r4, pc}

08003cd2 <__sclose>:
 8003cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd6:	f000 b8a1 	b.w	8003e1c <_close_r>

08003cda <__swbuf_r>:
 8003cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cdc:	460e      	mov	r6, r1
 8003cde:	4614      	mov	r4, r2
 8003ce0:	4605      	mov	r5, r0
 8003ce2:	b118      	cbz	r0, 8003cec <__swbuf_r+0x12>
 8003ce4:	6a03      	ldr	r3, [r0, #32]
 8003ce6:	b90b      	cbnz	r3, 8003cec <__swbuf_r+0x12>
 8003ce8:	f7ff ff0e 	bl	8003b08 <__sinit>
 8003cec:	69a3      	ldr	r3, [r4, #24]
 8003cee:	60a3      	str	r3, [r4, #8]
 8003cf0:	89a3      	ldrh	r3, [r4, #12]
 8003cf2:	071a      	lsls	r2, r3, #28
 8003cf4:	d501      	bpl.n	8003cfa <__swbuf_r+0x20>
 8003cf6:	6923      	ldr	r3, [r4, #16]
 8003cf8:	b943      	cbnz	r3, 8003d0c <__swbuf_r+0x32>
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	f000 f82b 	bl	8003d58 <__swsetup_r>
 8003d02:	b118      	cbz	r0, 8003d0c <__swbuf_r+0x32>
 8003d04:	f04f 37ff 	mov.w	r7, #4294967295
 8003d08:	4638      	mov	r0, r7
 8003d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	6922      	ldr	r2, [r4, #16]
 8003d10:	b2f6      	uxtb	r6, r6
 8003d12:	1a98      	subs	r0, r3, r2
 8003d14:	6963      	ldr	r3, [r4, #20]
 8003d16:	4637      	mov	r7, r6
 8003d18:	4283      	cmp	r3, r0
 8003d1a:	dc05      	bgt.n	8003d28 <__swbuf_r+0x4e>
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f001 fd92 	bl	8005848 <_fflush_r>
 8003d24:	2800      	cmp	r0, #0
 8003d26:	d1ed      	bne.n	8003d04 <__swbuf_r+0x2a>
 8003d28:	68a3      	ldr	r3, [r4, #8]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	60a3      	str	r3, [r4, #8]
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	6022      	str	r2, [r4, #0]
 8003d34:	701e      	strb	r6, [r3, #0]
 8003d36:	6962      	ldr	r2, [r4, #20]
 8003d38:	1c43      	adds	r3, r0, #1
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d004      	beq.n	8003d48 <__swbuf_r+0x6e>
 8003d3e:	89a3      	ldrh	r3, [r4, #12]
 8003d40:	07db      	lsls	r3, r3, #31
 8003d42:	d5e1      	bpl.n	8003d08 <__swbuf_r+0x2e>
 8003d44:	2e0a      	cmp	r6, #10
 8003d46:	d1df      	bne.n	8003d08 <__swbuf_r+0x2e>
 8003d48:	4621      	mov	r1, r4
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f001 fd7c 	bl	8005848 <_fflush_r>
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d0d9      	beq.n	8003d08 <__swbuf_r+0x2e>
 8003d54:	e7d6      	b.n	8003d04 <__swbuf_r+0x2a>
	...

08003d58 <__swsetup_r>:
 8003d58:	b538      	push	{r3, r4, r5, lr}
 8003d5a:	4b29      	ldr	r3, [pc, #164]	@ (8003e00 <__swsetup_r+0xa8>)
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	460c      	mov	r4, r1
 8003d62:	b118      	cbz	r0, 8003d6c <__swsetup_r+0x14>
 8003d64:	6a03      	ldr	r3, [r0, #32]
 8003d66:	b90b      	cbnz	r3, 8003d6c <__swsetup_r+0x14>
 8003d68:	f7ff fece 	bl	8003b08 <__sinit>
 8003d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d70:	0719      	lsls	r1, r3, #28
 8003d72:	d422      	bmi.n	8003dba <__swsetup_r+0x62>
 8003d74:	06da      	lsls	r2, r3, #27
 8003d76:	d407      	bmi.n	8003d88 <__swsetup_r+0x30>
 8003d78:	2209      	movs	r2, #9
 8003d7a:	602a      	str	r2, [r5, #0]
 8003d7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d80:	f04f 30ff 	mov.w	r0, #4294967295
 8003d84:	81a3      	strh	r3, [r4, #12]
 8003d86:	e033      	b.n	8003df0 <__swsetup_r+0x98>
 8003d88:	0758      	lsls	r0, r3, #29
 8003d8a:	d512      	bpl.n	8003db2 <__swsetup_r+0x5a>
 8003d8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d8e:	b141      	cbz	r1, 8003da2 <__swsetup_r+0x4a>
 8003d90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d94:	4299      	cmp	r1, r3
 8003d96:	d002      	beq.n	8003d9e <__swsetup_r+0x46>
 8003d98:	4628      	mov	r0, r5
 8003d9a:	f000 ff1d 	bl	8004bd8 <_free_r>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003da2:	89a3      	ldrh	r3, [r4, #12]
 8003da4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003da8:	81a3      	strh	r3, [r4, #12]
 8003daa:	2300      	movs	r3, #0
 8003dac:	6063      	str	r3, [r4, #4]
 8003dae:	6923      	ldr	r3, [r4, #16]
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	89a3      	ldrh	r3, [r4, #12]
 8003db4:	f043 0308 	orr.w	r3, r3, #8
 8003db8:	81a3      	strh	r3, [r4, #12]
 8003dba:	6923      	ldr	r3, [r4, #16]
 8003dbc:	b94b      	cbnz	r3, 8003dd2 <__swsetup_r+0x7a>
 8003dbe:	89a3      	ldrh	r3, [r4, #12]
 8003dc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dc8:	d003      	beq.n	8003dd2 <__swsetup_r+0x7a>
 8003dca:	4621      	mov	r1, r4
 8003dcc:	4628      	mov	r0, r5
 8003dce:	f001 fd88 	bl	80058e2 <__smakebuf_r>
 8003dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dd6:	f013 0201 	ands.w	r2, r3, #1
 8003dda:	d00a      	beq.n	8003df2 <__swsetup_r+0x9a>
 8003ddc:	2200      	movs	r2, #0
 8003dde:	60a2      	str	r2, [r4, #8]
 8003de0:	6962      	ldr	r2, [r4, #20]
 8003de2:	4252      	negs	r2, r2
 8003de4:	61a2      	str	r2, [r4, #24]
 8003de6:	6922      	ldr	r2, [r4, #16]
 8003de8:	b942      	cbnz	r2, 8003dfc <__swsetup_r+0xa4>
 8003dea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003dee:	d1c5      	bne.n	8003d7c <__swsetup_r+0x24>
 8003df0:	bd38      	pop	{r3, r4, r5, pc}
 8003df2:	0799      	lsls	r1, r3, #30
 8003df4:	bf58      	it	pl
 8003df6:	6962      	ldrpl	r2, [r4, #20]
 8003df8:	60a2      	str	r2, [r4, #8]
 8003dfa:	e7f4      	b.n	8003de6 <__swsetup_r+0x8e>
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	e7f7      	b.n	8003df0 <__swsetup_r+0x98>
 8003e00:	20000024 	.word	0x20000024

08003e04 <memset>:
 8003e04:	4603      	mov	r3, r0
 8003e06:	4402      	add	r2, r0
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d100      	bne.n	8003e0e <memset+0xa>
 8003e0c:	4770      	bx	lr
 8003e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e12:	e7f9      	b.n	8003e08 <memset+0x4>

08003e14 <_localeconv_r>:
 8003e14:	4800      	ldr	r0, [pc, #0]	@ (8003e18 <_localeconv_r+0x4>)
 8003e16:	4770      	bx	lr
 8003e18:	20000164 	.word	0x20000164

08003e1c <_close_r>:
 8003e1c:	b538      	push	{r3, r4, r5, lr}
 8003e1e:	2300      	movs	r3, #0
 8003e20:	4d05      	ldr	r5, [pc, #20]	@ (8003e38 <_close_r+0x1c>)
 8003e22:	4604      	mov	r4, r0
 8003e24:	4608      	mov	r0, r1
 8003e26:	602b      	str	r3, [r5, #0]
 8003e28:	f7fd f98d 	bl	8001146 <_close>
 8003e2c:	1c43      	adds	r3, r0, #1
 8003e2e:	d102      	bne.n	8003e36 <_close_r+0x1a>
 8003e30:	682b      	ldr	r3, [r5, #0]
 8003e32:	b103      	cbz	r3, 8003e36 <_close_r+0x1a>
 8003e34:	6023      	str	r3, [r4, #0]
 8003e36:	bd38      	pop	{r3, r4, r5, pc}
 8003e38:	20000394 	.word	0x20000394

08003e3c <_lseek_r>:
 8003e3c:	b538      	push	{r3, r4, r5, lr}
 8003e3e:	4604      	mov	r4, r0
 8003e40:	4608      	mov	r0, r1
 8003e42:	4611      	mov	r1, r2
 8003e44:	2200      	movs	r2, #0
 8003e46:	4d05      	ldr	r5, [pc, #20]	@ (8003e5c <_lseek_r+0x20>)
 8003e48:	602a      	str	r2, [r5, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f7fd f99f 	bl	800118e <_lseek>
 8003e50:	1c43      	adds	r3, r0, #1
 8003e52:	d102      	bne.n	8003e5a <_lseek_r+0x1e>
 8003e54:	682b      	ldr	r3, [r5, #0]
 8003e56:	b103      	cbz	r3, 8003e5a <_lseek_r+0x1e>
 8003e58:	6023      	str	r3, [r4, #0]
 8003e5a:	bd38      	pop	{r3, r4, r5, pc}
 8003e5c:	20000394 	.word	0x20000394

08003e60 <_read_r>:
 8003e60:	b538      	push	{r3, r4, r5, lr}
 8003e62:	4604      	mov	r4, r0
 8003e64:	4608      	mov	r0, r1
 8003e66:	4611      	mov	r1, r2
 8003e68:	2200      	movs	r2, #0
 8003e6a:	4d05      	ldr	r5, [pc, #20]	@ (8003e80 <_read_r+0x20>)
 8003e6c:	602a      	str	r2, [r5, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f7fd f930 	bl	80010d4 <_read>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d102      	bne.n	8003e7e <_read_r+0x1e>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	b103      	cbz	r3, 8003e7e <_read_r+0x1e>
 8003e7c:	6023      	str	r3, [r4, #0]
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	20000394 	.word	0x20000394

08003e84 <_write_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	4604      	mov	r4, r0
 8003e88:	4608      	mov	r0, r1
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	4d05      	ldr	r5, [pc, #20]	@ (8003ea4 <_write_r+0x20>)
 8003e90:	602a      	str	r2, [r5, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f7fd f93b 	bl	800110e <_write>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	d102      	bne.n	8003ea2 <_write_r+0x1e>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	b103      	cbz	r3, 8003ea2 <_write_r+0x1e>
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
 8003ea4:	20000394 	.word	0x20000394

08003ea8 <__errno>:
 8003ea8:	4b01      	ldr	r3, [pc, #4]	@ (8003eb0 <__errno+0x8>)
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20000024 	.word	0x20000024

08003eb4 <__libc_init_array>:
 8003eb4:	b570      	push	{r4, r5, r6, lr}
 8003eb6:	2600      	movs	r6, #0
 8003eb8:	4d0c      	ldr	r5, [pc, #48]	@ (8003eec <__libc_init_array+0x38>)
 8003eba:	4c0d      	ldr	r4, [pc, #52]	@ (8003ef0 <__libc_init_array+0x3c>)
 8003ebc:	1b64      	subs	r4, r4, r5
 8003ebe:	10a4      	asrs	r4, r4, #2
 8003ec0:	42a6      	cmp	r6, r4
 8003ec2:	d109      	bne.n	8003ed8 <__libc_init_array+0x24>
 8003ec4:	f001 fe3a 	bl	8005b3c <_init>
 8003ec8:	2600      	movs	r6, #0
 8003eca:	4d0a      	ldr	r5, [pc, #40]	@ (8003ef4 <__libc_init_array+0x40>)
 8003ecc:	4c0a      	ldr	r4, [pc, #40]	@ (8003ef8 <__libc_init_array+0x44>)
 8003ece:	1b64      	subs	r4, r4, r5
 8003ed0:	10a4      	asrs	r4, r4, #2
 8003ed2:	42a6      	cmp	r6, r4
 8003ed4:	d105      	bne.n	8003ee2 <__libc_init_array+0x2e>
 8003ed6:	bd70      	pop	{r4, r5, r6, pc}
 8003ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003edc:	4798      	blx	r3
 8003ede:	3601      	adds	r6, #1
 8003ee0:	e7ee      	b.n	8003ec0 <__libc_init_array+0xc>
 8003ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee6:	4798      	blx	r3
 8003ee8:	3601      	adds	r6, #1
 8003eea:	e7f2      	b.n	8003ed2 <__libc_init_array+0x1e>
 8003eec:	0800608c 	.word	0x0800608c
 8003ef0:	0800608c 	.word	0x0800608c
 8003ef4:	0800608c 	.word	0x0800608c
 8003ef8:	08006090 	.word	0x08006090

08003efc <__retarget_lock_init_recursive>:
 8003efc:	4770      	bx	lr

08003efe <__retarget_lock_acquire_recursive>:
 8003efe:	4770      	bx	lr

08003f00 <__retarget_lock_release_recursive>:
 8003f00:	4770      	bx	lr

08003f02 <memchr>:
 8003f02:	4603      	mov	r3, r0
 8003f04:	b510      	push	{r4, lr}
 8003f06:	b2c9      	uxtb	r1, r1
 8003f08:	4402      	add	r2, r0
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	d101      	bne.n	8003f14 <memchr+0x12>
 8003f10:	2000      	movs	r0, #0
 8003f12:	e003      	b.n	8003f1c <memchr+0x1a>
 8003f14:	7804      	ldrb	r4, [r0, #0]
 8003f16:	3301      	adds	r3, #1
 8003f18:	428c      	cmp	r4, r1
 8003f1a:	d1f6      	bne.n	8003f0a <memchr+0x8>
 8003f1c:	bd10      	pop	{r4, pc}

08003f1e <quorem>:
 8003f1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f22:	6903      	ldr	r3, [r0, #16]
 8003f24:	690c      	ldr	r4, [r1, #16]
 8003f26:	4607      	mov	r7, r0
 8003f28:	42a3      	cmp	r3, r4
 8003f2a:	db7e      	blt.n	800402a <quorem+0x10c>
 8003f2c:	3c01      	subs	r4, #1
 8003f2e:	00a3      	lsls	r3, r4, #2
 8003f30:	f100 0514 	add.w	r5, r0, #20
 8003f34:	f101 0814 	add.w	r8, r1, #20
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003f44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003f54:	d32e      	bcc.n	8003fb4 <quorem+0x96>
 8003f56:	f04f 0a00 	mov.w	sl, #0
 8003f5a:	46c4      	mov	ip, r8
 8003f5c:	46ae      	mov	lr, r5
 8003f5e:	46d3      	mov	fp, sl
 8003f60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003f64:	b298      	uxth	r0, r3
 8003f66:	fb06 a000 	mla	r0, r6, r0, sl
 8003f6a:	0c1b      	lsrs	r3, r3, #16
 8003f6c:	0c02      	lsrs	r2, r0, #16
 8003f6e:	fb06 2303 	mla	r3, r6, r3, r2
 8003f72:	f8de 2000 	ldr.w	r2, [lr]
 8003f76:	b280      	uxth	r0, r0
 8003f78:	b292      	uxth	r2, r2
 8003f7a:	1a12      	subs	r2, r2, r0
 8003f7c:	445a      	add	r2, fp
 8003f7e:	f8de 0000 	ldr.w	r0, [lr]
 8003f82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003f8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003f90:	b292      	uxth	r2, r2
 8003f92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003f96:	45e1      	cmp	r9, ip
 8003f98:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003f9c:	f84e 2b04 	str.w	r2, [lr], #4
 8003fa0:	d2de      	bcs.n	8003f60 <quorem+0x42>
 8003fa2:	9b00      	ldr	r3, [sp, #0]
 8003fa4:	58eb      	ldr	r3, [r5, r3]
 8003fa6:	b92b      	cbnz	r3, 8003fb4 <quorem+0x96>
 8003fa8:	9b01      	ldr	r3, [sp, #4]
 8003faa:	3b04      	subs	r3, #4
 8003fac:	429d      	cmp	r5, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	d32f      	bcc.n	8004012 <quorem+0xf4>
 8003fb2:	613c      	str	r4, [r7, #16]
 8003fb4:	4638      	mov	r0, r7
 8003fb6:	f001 f97f 	bl	80052b8 <__mcmp>
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	db25      	blt.n	800400a <quorem+0xec>
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8003fc6:	f8d1 c000 	ldr.w	ip, [r1]
 8003fca:	fa1f fe82 	uxth.w	lr, r2
 8003fce:	fa1f f38c 	uxth.w	r3, ip
 8003fd2:	eba3 030e 	sub.w	r3, r3, lr
 8003fd6:	4403      	add	r3, r0
 8003fd8:	0c12      	lsrs	r2, r2, #16
 8003fda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003fde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fe8:	45c1      	cmp	r9, r8
 8003fea:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003fee:	f841 3b04 	str.w	r3, [r1], #4
 8003ff2:	d2e6      	bcs.n	8003fc2 <quorem+0xa4>
 8003ff4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ff8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ffc:	b922      	cbnz	r2, 8004008 <quorem+0xea>
 8003ffe:	3b04      	subs	r3, #4
 8004000:	429d      	cmp	r5, r3
 8004002:	461a      	mov	r2, r3
 8004004:	d30b      	bcc.n	800401e <quorem+0x100>
 8004006:	613c      	str	r4, [r7, #16]
 8004008:	3601      	adds	r6, #1
 800400a:	4630      	mov	r0, r6
 800400c:	b003      	add	sp, #12
 800400e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	3b04      	subs	r3, #4
 8004016:	2a00      	cmp	r2, #0
 8004018:	d1cb      	bne.n	8003fb2 <quorem+0x94>
 800401a:	3c01      	subs	r4, #1
 800401c:	e7c6      	b.n	8003fac <quorem+0x8e>
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	3b04      	subs	r3, #4
 8004022:	2a00      	cmp	r2, #0
 8004024:	d1ef      	bne.n	8004006 <quorem+0xe8>
 8004026:	3c01      	subs	r4, #1
 8004028:	e7ea      	b.n	8004000 <quorem+0xe2>
 800402a:	2000      	movs	r0, #0
 800402c:	e7ee      	b.n	800400c <quorem+0xee>
	...

08004030 <_dtoa_r>:
 8004030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004034:	4614      	mov	r4, r2
 8004036:	461d      	mov	r5, r3
 8004038:	69c7      	ldr	r7, [r0, #28]
 800403a:	b097      	sub	sp, #92	@ 0x5c
 800403c:	4681      	mov	r9, r0
 800403e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004042:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004044:	b97f      	cbnz	r7, 8004066 <_dtoa_r+0x36>
 8004046:	2010      	movs	r0, #16
 8004048:	f000 fe0e 	bl	8004c68 <malloc>
 800404c:	4602      	mov	r2, r0
 800404e:	f8c9 001c 	str.w	r0, [r9, #28]
 8004052:	b920      	cbnz	r0, 800405e <_dtoa_r+0x2e>
 8004054:	21ef      	movs	r1, #239	@ 0xef
 8004056:	4bac      	ldr	r3, [pc, #688]	@ (8004308 <_dtoa_r+0x2d8>)
 8004058:	48ac      	ldr	r0, [pc, #688]	@ (800430c <_dtoa_r+0x2dc>)
 800405a:	f001 fcbf 	bl	80059dc <__assert_func>
 800405e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004062:	6007      	str	r7, [r0, #0]
 8004064:	60c7      	str	r7, [r0, #12]
 8004066:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800406a:	6819      	ldr	r1, [r3, #0]
 800406c:	b159      	cbz	r1, 8004086 <_dtoa_r+0x56>
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	2301      	movs	r3, #1
 8004072:	4093      	lsls	r3, r2
 8004074:	604a      	str	r2, [r1, #4]
 8004076:	608b      	str	r3, [r1, #8]
 8004078:	4648      	mov	r0, r9
 800407a:	f000 feeb 	bl	8004e54 <_Bfree>
 800407e:	2200      	movs	r2, #0
 8004080:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	1e2b      	subs	r3, r5, #0
 8004088:	bfaf      	iteee	ge
 800408a:	2300      	movge	r3, #0
 800408c:	2201      	movlt	r2, #1
 800408e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004092:	9307      	strlt	r3, [sp, #28]
 8004094:	bfa8      	it	ge
 8004096:	6033      	strge	r3, [r6, #0]
 8004098:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800409c:	4b9c      	ldr	r3, [pc, #624]	@ (8004310 <_dtoa_r+0x2e0>)
 800409e:	bfb8      	it	lt
 80040a0:	6032      	strlt	r2, [r6, #0]
 80040a2:	ea33 0308 	bics.w	r3, r3, r8
 80040a6:	d112      	bne.n	80040ce <_dtoa_r+0x9e>
 80040a8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80040ac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80040b4:	4323      	orrs	r3, r4
 80040b6:	f000 855e 	beq.w	8004b76 <_dtoa_r+0xb46>
 80040ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80040bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004314 <_dtoa_r+0x2e4>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8560 	beq.w	8004b86 <_dtoa_r+0xb56>
 80040c6:	f10a 0303 	add.w	r3, sl, #3
 80040ca:	f000 bd5a 	b.w	8004b82 <_dtoa_r+0xb52>
 80040ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80040d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80040da:	2200      	movs	r2, #0
 80040dc:	2300      	movs	r3, #0
 80040de:	f7fc fc63 	bl	80009a8 <__aeabi_dcmpeq>
 80040e2:	4607      	mov	r7, r0
 80040e4:	b158      	cbz	r0, 80040fe <_dtoa_r+0xce>
 80040e6:	2301      	movs	r3, #1
 80040e8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80040ee:	b113      	cbz	r3, 80040f6 <_dtoa_r+0xc6>
 80040f0:	4b89      	ldr	r3, [pc, #548]	@ (8004318 <_dtoa_r+0x2e8>)
 80040f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800431c <_dtoa_r+0x2ec>
 80040fa:	f000 bd44 	b.w	8004b86 <_dtoa_r+0xb56>
 80040fe:	ab14      	add	r3, sp, #80	@ 0x50
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	ab15      	add	r3, sp, #84	@ 0x54
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	4648      	mov	r0, r9
 8004108:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800410c:	f001 f984 	bl	8005418 <__d2b>
 8004110:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004114:	9003      	str	r0, [sp, #12]
 8004116:	2e00      	cmp	r6, #0
 8004118:	d078      	beq.n	800420c <_dtoa_r+0x1dc>
 800411a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800411e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004120:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004128:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800412c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004130:	9712      	str	r7, [sp, #72]	@ 0x48
 8004132:	4619      	mov	r1, r3
 8004134:	2200      	movs	r2, #0
 8004136:	4b7a      	ldr	r3, [pc, #488]	@ (8004320 <_dtoa_r+0x2f0>)
 8004138:	f7fc f816 	bl	8000168 <__aeabi_dsub>
 800413c:	a36c      	add	r3, pc, #432	@ (adr r3, 80042f0 <_dtoa_r+0x2c0>)
 800413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004142:	f7fc f9c9 	bl	80004d8 <__aeabi_dmul>
 8004146:	a36c      	add	r3, pc, #432	@ (adr r3, 80042f8 <_dtoa_r+0x2c8>)
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	f7fc f80e 	bl	800016c <__adddf3>
 8004150:	4604      	mov	r4, r0
 8004152:	4630      	mov	r0, r6
 8004154:	460d      	mov	r5, r1
 8004156:	f7fc f955 	bl	8000404 <__aeabi_i2d>
 800415a:	a369      	add	r3, pc, #420	@ (adr r3, 8004300 <_dtoa_r+0x2d0>)
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f7fc f9ba 	bl	80004d8 <__aeabi_dmul>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4620      	mov	r0, r4
 800416a:	4629      	mov	r1, r5
 800416c:	f7fb fffe 	bl	800016c <__adddf3>
 8004170:	4604      	mov	r4, r0
 8004172:	460d      	mov	r5, r1
 8004174:	f7fc fc60 	bl	8000a38 <__aeabi_d2iz>
 8004178:	2200      	movs	r2, #0
 800417a:	4607      	mov	r7, r0
 800417c:	2300      	movs	r3, #0
 800417e:	4620      	mov	r0, r4
 8004180:	4629      	mov	r1, r5
 8004182:	f7fc fc1b 	bl	80009bc <__aeabi_dcmplt>
 8004186:	b140      	cbz	r0, 800419a <_dtoa_r+0x16a>
 8004188:	4638      	mov	r0, r7
 800418a:	f7fc f93b 	bl	8000404 <__aeabi_i2d>
 800418e:	4622      	mov	r2, r4
 8004190:	462b      	mov	r3, r5
 8004192:	f7fc fc09 	bl	80009a8 <__aeabi_dcmpeq>
 8004196:	b900      	cbnz	r0, 800419a <_dtoa_r+0x16a>
 8004198:	3f01      	subs	r7, #1
 800419a:	2f16      	cmp	r7, #22
 800419c:	d854      	bhi.n	8004248 <_dtoa_r+0x218>
 800419e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80041a2:	4b60      	ldr	r3, [pc, #384]	@ (8004324 <_dtoa_r+0x2f4>)
 80041a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	f7fc fc06 	bl	80009bc <__aeabi_dcmplt>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d04b      	beq.n	800424c <_dtoa_r+0x21c>
 80041b4:	2300      	movs	r3, #0
 80041b6:	3f01      	subs	r7, #1
 80041b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80041ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80041bc:	1b9b      	subs	r3, r3, r6
 80041be:	1e5a      	subs	r2, r3, #1
 80041c0:	bf49      	itett	mi
 80041c2:	f1c3 0301 	rsbmi	r3, r3, #1
 80041c6:	2300      	movpl	r3, #0
 80041c8:	9304      	strmi	r3, [sp, #16]
 80041ca:	2300      	movmi	r3, #0
 80041cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80041ce:	bf54      	ite	pl
 80041d0:	9304      	strpl	r3, [sp, #16]
 80041d2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80041d4:	2f00      	cmp	r7, #0
 80041d6:	db3b      	blt.n	8004250 <_dtoa_r+0x220>
 80041d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041da:	970e      	str	r7, [sp, #56]	@ 0x38
 80041dc:	443b      	add	r3, r7
 80041de:	9309      	str	r3, [sp, #36]	@ 0x24
 80041e0:	2300      	movs	r3, #0
 80041e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80041e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80041e6:	2b09      	cmp	r3, #9
 80041e8:	d865      	bhi.n	80042b6 <_dtoa_r+0x286>
 80041ea:	2b05      	cmp	r3, #5
 80041ec:	bfc4      	itt	gt
 80041ee:	3b04      	subgt	r3, #4
 80041f0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80041f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80041f4:	bfc8      	it	gt
 80041f6:	2400      	movgt	r4, #0
 80041f8:	f1a3 0302 	sub.w	r3, r3, #2
 80041fc:	bfd8      	it	le
 80041fe:	2401      	movle	r4, #1
 8004200:	2b03      	cmp	r3, #3
 8004202:	d864      	bhi.n	80042ce <_dtoa_r+0x29e>
 8004204:	e8df f003 	tbb	[pc, r3]
 8004208:	2c385553 	.word	0x2c385553
 800420c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004210:	441e      	add	r6, r3
 8004212:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004216:	2b20      	cmp	r3, #32
 8004218:	bfc1      	itttt	gt
 800421a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800421e:	fa08 f803 	lslgt.w	r8, r8, r3
 8004222:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004226:	fa24 f303 	lsrgt.w	r3, r4, r3
 800422a:	bfd6      	itet	le
 800422c:	f1c3 0320 	rsble	r3, r3, #32
 8004230:	ea48 0003 	orrgt.w	r0, r8, r3
 8004234:	fa04 f003 	lslle.w	r0, r4, r3
 8004238:	f7fc f8d4 	bl	80003e4 <__aeabi_ui2d>
 800423c:	2201      	movs	r2, #1
 800423e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004242:	3e01      	subs	r6, #1
 8004244:	9212      	str	r2, [sp, #72]	@ 0x48
 8004246:	e774      	b.n	8004132 <_dtoa_r+0x102>
 8004248:	2301      	movs	r3, #1
 800424a:	e7b5      	b.n	80041b8 <_dtoa_r+0x188>
 800424c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800424e:	e7b4      	b.n	80041ba <_dtoa_r+0x18a>
 8004250:	9b04      	ldr	r3, [sp, #16]
 8004252:	1bdb      	subs	r3, r3, r7
 8004254:	9304      	str	r3, [sp, #16]
 8004256:	427b      	negs	r3, r7
 8004258:	930a      	str	r3, [sp, #40]	@ 0x28
 800425a:	2300      	movs	r3, #0
 800425c:	930e      	str	r3, [sp, #56]	@ 0x38
 800425e:	e7c1      	b.n	80041e4 <_dtoa_r+0x1b4>
 8004260:	2301      	movs	r3, #1
 8004262:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004264:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004266:	eb07 0b03 	add.w	fp, r7, r3
 800426a:	f10b 0301 	add.w	r3, fp, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	9308      	str	r3, [sp, #32]
 8004272:	bfb8      	it	lt
 8004274:	2301      	movlt	r3, #1
 8004276:	e006      	b.n	8004286 <_dtoa_r+0x256>
 8004278:	2301      	movs	r3, #1
 800427a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800427c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800427e:	2b00      	cmp	r3, #0
 8004280:	dd28      	ble.n	80042d4 <_dtoa_r+0x2a4>
 8004282:	469b      	mov	fp, r3
 8004284:	9308      	str	r3, [sp, #32]
 8004286:	2100      	movs	r1, #0
 8004288:	2204      	movs	r2, #4
 800428a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800428e:	f102 0514 	add.w	r5, r2, #20
 8004292:	429d      	cmp	r5, r3
 8004294:	d926      	bls.n	80042e4 <_dtoa_r+0x2b4>
 8004296:	6041      	str	r1, [r0, #4]
 8004298:	4648      	mov	r0, r9
 800429a:	f000 fd9b 	bl	8004dd4 <_Balloc>
 800429e:	4682      	mov	sl, r0
 80042a0:	2800      	cmp	r0, #0
 80042a2:	d143      	bne.n	800432c <_dtoa_r+0x2fc>
 80042a4:	4602      	mov	r2, r0
 80042a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80042aa:	4b1f      	ldr	r3, [pc, #124]	@ (8004328 <_dtoa_r+0x2f8>)
 80042ac:	e6d4      	b.n	8004058 <_dtoa_r+0x28>
 80042ae:	2300      	movs	r3, #0
 80042b0:	e7e3      	b.n	800427a <_dtoa_r+0x24a>
 80042b2:	2300      	movs	r3, #0
 80042b4:	e7d5      	b.n	8004262 <_dtoa_r+0x232>
 80042b6:	2401      	movs	r4, #1
 80042b8:	2300      	movs	r3, #0
 80042ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80042bc:	9320      	str	r3, [sp, #128]	@ 0x80
 80042be:	f04f 3bff 	mov.w	fp, #4294967295
 80042c2:	2200      	movs	r2, #0
 80042c4:	2312      	movs	r3, #18
 80042c6:	f8cd b020 	str.w	fp, [sp, #32]
 80042ca:	9221      	str	r2, [sp, #132]	@ 0x84
 80042cc:	e7db      	b.n	8004286 <_dtoa_r+0x256>
 80042ce:	2301      	movs	r3, #1
 80042d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042d2:	e7f4      	b.n	80042be <_dtoa_r+0x28e>
 80042d4:	f04f 0b01 	mov.w	fp, #1
 80042d8:	465b      	mov	r3, fp
 80042da:	f8cd b020 	str.w	fp, [sp, #32]
 80042de:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80042e2:	e7d0      	b.n	8004286 <_dtoa_r+0x256>
 80042e4:	3101      	adds	r1, #1
 80042e6:	0052      	lsls	r2, r2, #1
 80042e8:	e7d1      	b.n	800428e <_dtoa_r+0x25e>
 80042ea:	bf00      	nop
 80042ec:	f3af 8000 	nop.w
 80042f0:	636f4361 	.word	0x636f4361
 80042f4:	3fd287a7 	.word	0x3fd287a7
 80042f8:	8b60c8b3 	.word	0x8b60c8b3
 80042fc:	3fc68a28 	.word	0x3fc68a28
 8004300:	509f79fb 	.word	0x509f79fb
 8004304:	3fd34413 	.word	0x3fd34413
 8004308:	08005d4f 	.word	0x08005d4f
 800430c:	08005d66 	.word	0x08005d66
 8004310:	7ff00000 	.word	0x7ff00000
 8004314:	08005d4b 	.word	0x08005d4b
 8004318:	08005d1f 	.word	0x08005d1f
 800431c:	08005d1e 	.word	0x08005d1e
 8004320:	3ff80000 	.word	0x3ff80000
 8004324:	08005eb8 	.word	0x08005eb8
 8004328:	08005dbe 	.word	0x08005dbe
 800432c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004330:	6018      	str	r0, [r3, #0]
 8004332:	9b08      	ldr	r3, [sp, #32]
 8004334:	2b0e      	cmp	r3, #14
 8004336:	f200 80a1 	bhi.w	800447c <_dtoa_r+0x44c>
 800433a:	2c00      	cmp	r4, #0
 800433c:	f000 809e 	beq.w	800447c <_dtoa_r+0x44c>
 8004340:	2f00      	cmp	r7, #0
 8004342:	dd33      	ble.n	80043ac <_dtoa_r+0x37c>
 8004344:	4b9c      	ldr	r3, [pc, #624]	@ (80045b8 <_dtoa_r+0x588>)
 8004346:	f007 020f 	and.w	r2, r7, #15
 800434a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800434e:	05f8      	lsls	r0, r7, #23
 8004350:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004354:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004358:	ea4f 1427 	mov.w	r4, r7, asr #4
 800435c:	d516      	bpl.n	800438c <_dtoa_r+0x35c>
 800435e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004362:	4b96      	ldr	r3, [pc, #600]	@ (80045bc <_dtoa_r+0x58c>)
 8004364:	2603      	movs	r6, #3
 8004366:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800436a:	f7fc f9df 	bl	800072c <__aeabi_ddiv>
 800436e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004372:	f004 040f 	and.w	r4, r4, #15
 8004376:	4d91      	ldr	r5, [pc, #580]	@ (80045bc <_dtoa_r+0x58c>)
 8004378:	b954      	cbnz	r4, 8004390 <_dtoa_r+0x360>
 800437a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800437e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004382:	f7fc f9d3 	bl	800072c <__aeabi_ddiv>
 8004386:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800438a:	e028      	b.n	80043de <_dtoa_r+0x3ae>
 800438c:	2602      	movs	r6, #2
 800438e:	e7f2      	b.n	8004376 <_dtoa_r+0x346>
 8004390:	07e1      	lsls	r1, r4, #31
 8004392:	d508      	bpl.n	80043a6 <_dtoa_r+0x376>
 8004394:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004398:	e9d5 2300 	ldrd	r2, r3, [r5]
 800439c:	f7fc f89c 	bl	80004d8 <__aeabi_dmul>
 80043a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80043a4:	3601      	adds	r6, #1
 80043a6:	1064      	asrs	r4, r4, #1
 80043a8:	3508      	adds	r5, #8
 80043aa:	e7e5      	b.n	8004378 <_dtoa_r+0x348>
 80043ac:	f000 80af 	beq.w	800450e <_dtoa_r+0x4de>
 80043b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80043b4:	427c      	negs	r4, r7
 80043b6:	4b80      	ldr	r3, [pc, #512]	@ (80045b8 <_dtoa_r+0x588>)
 80043b8:	f004 020f 	and.w	r2, r4, #15
 80043bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c4:	f7fc f888 	bl	80004d8 <__aeabi_dmul>
 80043c8:	2602      	movs	r6, #2
 80043ca:	2300      	movs	r3, #0
 80043cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80043d0:	4d7a      	ldr	r5, [pc, #488]	@ (80045bc <_dtoa_r+0x58c>)
 80043d2:	1124      	asrs	r4, r4, #4
 80043d4:	2c00      	cmp	r4, #0
 80043d6:	f040 808f 	bne.w	80044f8 <_dtoa_r+0x4c8>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1d3      	bne.n	8004386 <_dtoa_r+0x356>
 80043de:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80043e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8094 	beq.w	8004512 <_dtoa_r+0x4e2>
 80043ea:	2200      	movs	r2, #0
 80043ec:	4620      	mov	r0, r4
 80043ee:	4629      	mov	r1, r5
 80043f0:	4b73      	ldr	r3, [pc, #460]	@ (80045c0 <_dtoa_r+0x590>)
 80043f2:	f7fc fae3 	bl	80009bc <__aeabi_dcmplt>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	f000 808b 	beq.w	8004512 <_dtoa_r+0x4e2>
 80043fc:	9b08      	ldr	r3, [sp, #32]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 8087 	beq.w	8004512 <_dtoa_r+0x4e2>
 8004404:	f1bb 0f00 	cmp.w	fp, #0
 8004408:	dd34      	ble.n	8004474 <_dtoa_r+0x444>
 800440a:	4620      	mov	r0, r4
 800440c:	2200      	movs	r2, #0
 800440e:	4629      	mov	r1, r5
 8004410:	4b6c      	ldr	r3, [pc, #432]	@ (80045c4 <_dtoa_r+0x594>)
 8004412:	f7fc f861 	bl	80004d8 <__aeabi_dmul>
 8004416:	465c      	mov	r4, fp
 8004418:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800441c:	f107 38ff 	add.w	r8, r7, #4294967295
 8004420:	3601      	adds	r6, #1
 8004422:	4630      	mov	r0, r6
 8004424:	f7fb ffee 	bl	8000404 <__aeabi_i2d>
 8004428:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800442c:	f7fc f854 	bl	80004d8 <__aeabi_dmul>
 8004430:	2200      	movs	r2, #0
 8004432:	4b65      	ldr	r3, [pc, #404]	@ (80045c8 <_dtoa_r+0x598>)
 8004434:	f7fb fe9a 	bl	800016c <__adddf3>
 8004438:	4605      	mov	r5, r0
 800443a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800443e:	2c00      	cmp	r4, #0
 8004440:	d16a      	bne.n	8004518 <_dtoa_r+0x4e8>
 8004442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004446:	2200      	movs	r2, #0
 8004448:	4b60      	ldr	r3, [pc, #384]	@ (80045cc <_dtoa_r+0x59c>)
 800444a:	f7fb fe8d 	bl	8000168 <__aeabi_dsub>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004456:	462a      	mov	r2, r5
 8004458:	4633      	mov	r3, r6
 800445a:	f7fc facd 	bl	80009f8 <__aeabi_dcmpgt>
 800445e:	2800      	cmp	r0, #0
 8004460:	f040 8298 	bne.w	8004994 <_dtoa_r+0x964>
 8004464:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004468:	462a      	mov	r2, r5
 800446a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800446e:	f7fc faa5 	bl	80009bc <__aeabi_dcmplt>
 8004472:	bb38      	cbnz	r0, 80044c4 <_dtoa_r+0x494>
 8004474:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004478:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800447c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800447e:	2b00      	cmp	r3, #0
 8004480:	f2c0 8157 	blt.w	8004732 <_dtoa_r+0x702>
 8004484:	2f0e      	cmp	r7, #14
 8004486:	f300 8154 	bgt.w	8004732 <_dtoa_r+0x702>
 800448a:	4b4b      	ldr	r3, [pc, #300]	@ (80045b8 <_dtoa_r+0x588>)
 800448c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004490:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004494:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004498:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800449a:	2b00      	cmp	r3, #0
 800449c:	f280 80e5 	bge.w	800466a <_dtoa_r+0x63a>
 80044a0:	9b08      	ldr	r3, [sp, #32]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f300 80e1 	bgt.w	800466a <_dtoa_r+0x63a>
 80044a8:	d10c      	bne.n	80044c4 <_dtoa_r+0x494>
 80044aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044ae:	2200      	movs	r2, #0
 80044b0:	4b46      	ldr	r3, [pc, #280]	@ (80045cc <_dtoa_r+0x59c>)
 80044b2:	f7fc f811 	bl	80004d8 <__aeabi_dmul>
 80044b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80044ba:	f7fc fa93 	bl	80009e4 <__aeabi_dcmpge>
 80044be:	2800      	cmp	r0, #0
 80044c0:	f000 8266 	beq.w	8004990 <_dtoa_r+0x960>
 80044c4:	2400      	movs	r4, #0
 80044c6:	4625      	mov	r5, r4
 80044c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80044ca:	4656      	mov	r6, sl
 80044cc:	ea6f 0803 	mvn.w	r8, r3
 80044d0:	2700      	movs	r7, #0
 80044d2:	4621      	mov	r1, r4
 80044d4:	4648      	mov	r0, r9
 80044d6:	f000 fcbd 	bl	8004e54 <_Bfree>
 80044da:	2d00      	cmp	r5, #0
 80044dc:	f000 80bd 	beq.w	800465a <_dtoa_r+0x62a>
 80044e0:	b12f      	cbz	r7, 80044ee <_dtoa_r+0x4be>
 80044e2:	42af      	cmp	r7, r5
 80044e4:	d003      	beq.n	80044ee <_dtoa_r+0x4be>
 80044e6:	4639      	mov	r1, r7
 80044e8:	4648      	mov	r0, r9
 80044ea:	f000 fcb3 	bl	8004e54 <_Bfree>
 80044ee:	4629      	mov	r1, r5
 80044f0:	4648      	mov	r0, r9
 80044f2:	f000 fcaf 	bl	8004e54 <_Bfree>
 80044f6:	e0b0      	b.n	800465a <_dtoa_r+0x62a>
 80044f8:	07e2      	lsls	r2, r4, #31
 80044fa:	d505      	bpl.n	8004508 <_dtoa_r+0x4d8>
 80044fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004500:	f7fb ffea 	bl	80004d8 <__aeabi_dmul>
 8004504:	2301      	movs	r3, #1
 8004506:	3601      	adds	r6, #1
 8004508:	1064      	asrs	r4, r4, #1
 800450a:	3508      	adds	r5, #8
 800450c:	e762      	b.n	80043d4 <_dtoa_r+0x3a4>
 800450e:	2602      	movs	r6, #2
 8004510:	e765      	b.n	80043de <_dtoa_r+0x3ae>
 8004512:	46b8      	mov	r8, r7
 8004514:	9c08      	ldr	r4, [sp, #32]
 8004516:	e784      	b.n	8004422 <_dtoa_r+0x3f2>
 8004518:	4b27      	ldr	r3, [pc, #156]	@ (80045b8 <_dtoa_r+0x588>)
 800451a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800451c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004520:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004524:	4454      	add	r4, sl
 8004526:	2900      	cmp	r1, #0
 8004528:	d054      	beq.n	80045d4 <_dtoa_r+0x5a4>
 800452a:	2000      	movs	r0, #0
 800452c:	4928      	ldr	r1, [pc, #160]	@ (80045d0 <_dtoa_r+0x5a0>)
 800452e:	f7fc f8fd 	bl	800072c <__aeabi_ddiv>
 8004532:	4633      	mov	r3, r6
 8004534:	462a      	mov	r2, r5
 8004536:	f7fb fe17 	bl	8000168 <__aeabi_dsub>
 800453a:	4656      	mov	r6, sl
 800453c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004540:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004544:	f7fc fa78 	bl	8000a38 <__aeabi_d2iz>
 8004548:	4605      	mov	r5, r0
 800454a:	f7fb ff5b 	bl	8000404 <__aeabi_i2d>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004556:	f7fb fe07 	bl	8000168 <__aeabi_dsub>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	3530      	adds	r5, #48	@ 0x30
 8004560:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004564:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004568:	f806 5b01 	strb.w	r5, [r6], #1
 800456c:	f7fc fa26 	bl	80009bc <__aeabi_dcmplt>
 8004570:	2800      	cmp	r0, #0
 8004572:	d172      	bne.n	800465a <_dtoa_r+0x62a>
 8004574:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004578:	2000      	movs	r0, #0
 800457a:	4911      	ldr	r1, [pc, #68]	@ (80045c0 <_dtoa_r+0x590>)
 800457c:	f7fb fdf4 	bl	8000168 <__aeabi_dsub>
 8004580:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004584:	f7fc fa1a 	bl	80009bc <__aeabi_dcmplt>
 8004588:	2800      	cmp	r0, #0
 800458a:	f040 80b4 	bne.w	80046f6 <_dtoa_r+0x6c6>
 800458e:	42a6      	cmp	r6, r4
 8004590:	f43f af70 	beq.w	8004474 <_dtoa_r+0x444>
 8004594:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004598:	2200      	movs	r2, #0
 800459a:	4b0a      	ldr	r3, [pc, #40]	@ (80045c4 <_dtoa_r+0x594>)
 800459c:	f7fb ff9c 	bl	80004d8 <__aeabi_dmul>
 80045a0:	2200      	movs	r2, #0
 80045a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80045a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045aa:	4b06      	ldr	r3, [pc, #24]	@ (80045c4 <_dtoa_r+0x594>)
 80045ac:	f7fb ff94 	bl	80004d8 <__aeabi_dmul>
 80045b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80045b4:	e7c4      	b.n	8004540 <_dtoa_r+0x510>
 80045b6:	bf00      	nop
 80045b8:	08005eb8 	.word	0x08005eb8
 80045bc:	08005e90 	.word	0x08005e90
 80045c0:	3ff00000 	.word	0x3ff00000
 80045c4:	40240000 	.word	0x40240000
 80045c8:	401c0000 	.word	0x401c0000
 80045cc:	40140000 	.word	0x40140000
 80045d0:	3fe00000 	.word	0x3fe00000
 80045d4:	4631      	mov	r1, r6
 80045d6:	4628      	mov	r0, r5
 80045d8:	f7fb ff7e 	bl	80004d8 <__aeabi_dmul>
 80045dc:	4656      	mov	r6, sl
 80045de:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80045e2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80045e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045e8:	f7fc fa26 	bl	8000a38 <__aeabi_d2iz>
 80045ec:	4605      	mov	r5, r0
 80045ee:	f7fb ff09 	bl	8000404 <__aeabi_i2d>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045fa:	f7fb fdb5 	bl	8000168 <__aeabi_dsub>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	3530      	adds	r5, #48	@ 0x30
 8004604:	f806 5b01 	strb.w	r5, [r6], #1
 8004608:	42a6      	cmp	r6, r4
 800460a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	d124      	bne.n	800465e <_dtoa_r+0x62e>
 8004614:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004618:	4bae      	ldr	r3, [pc, #696]	@ (80048d4 <_dtoa_r+0x8a4>)
 800461a:	f7fb fda7 	bl	800016c <__adddf3>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004626:	f7fc f9e7 	bl	80009f8 <__aeabi_dcmpgt>
 800462a:	2800      	cmp	r0, #0
 800462c:	d163      	bne.n	80046f6 <_dtoa_r+0x6c6>
 800462e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004632:	2000      	movs	r0, #0
 8004634:	49a7      	ldr	r1, [pc, #668]	@ (80048d4 <_dtoa_r+0x8a4>)
 8004636:	f7fb fd97 	bl	8000168 <__aeabi_dsub>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004642:	f7fc f9bb 	bl	80009bc <__aeabi_dcmplt>
 8004646:	2800      	cmp	r0, #0
 8004648:	f43f af14 	beq.w	8004474 <_dtoa_r+0x444>
 800464c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800464e:	1e73      	subs	r3, r6, #1
 8004650:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004652:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004656:	2b30      	cmp	r3, #48	@ 0x30
 8004658:	d0f8      	beq.n	800464c <_dtoa_r+0x61c>
 800465a:	4647      	mov	r7, r8
 800465c:	e03b      	b.n	80046d6 <_dtoa_r+0x6a6>
 800465e:	4b9e      	ldr	r3, [pc, #632]	@ (80048d8 <_dtoa_r+0x8a8>)
 8004660:	f7fb ff3a 	bl	80004d8 <__aeabi_dmul>
 8004664:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004668:	e7bc      	b.n	80045e4 <_dtoa_r+0x5b4>
 800466a:	4656      	mov	r6, sl
 800466c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004674:	4620      	mov	r0, r4
 8004676:	4629      	mov	r1, r5
 8004678:	f7fc f858 	bl	800072c <__aeabi_ddiv>
 800467c:	f7fc f9dc 	bl	8000a38 <__aeabi_d2iz>
 8004680:	4680      	mov	r8, r0
 8004682:	f7fb febf 	bl	8000404 <__aeabi_i2d>
 8004686:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800468a:	f7fb ff25 	bl	80004d8 <__aeabi_dmul>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4620      	mov	r0, r4
 8004694:	4629      	mov	r1, r5
 8004696:	f7fb fd67 	bl	8000168 <__aeabi_dsub>
 800469a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800469e:	9d08      	ldr	r5, [sp, #32]
 80046a0:	f806 4b01 	strb.w	r4, [r6], #1
 80046a4:	eba6 040a 	sub.w	r4, r6, sl
 80046a8:	42a5      	cmp	r5, r4
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	d133      	bne.n	8004718 <_dtoa_r+0x6e8>
 80046b0:	f7fb fd5c 	bl	800016c <__adddf3>
 80046b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046b8:	4604      	mov	r4, r0
 80046ba:	460d      	mov	r5, r1
 80046bc:	f7fc f99c 	bl	80009f8 <__aeabi_dcmpgt>
 80046c0:	b9c0      	cbnz	r0, 80046f4 <_dtoa_r+0x6c4>
 80046c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046c6:	4620      	mov	r0, r4
 80046c8:	4629      	mov	r1, r5
 80046ca:	f7fc f96d 	bl	80009a8 <__aeabi_dcmpeq>
 80046ce:	b110      	cbz	r0, 80046d6 <_dtoa_r+0x6a6>
 80046d0:	f018 0f01 	tst.w	r8, #1
 80046d4:	d10e      	bne.n	80046f4 <_dtoa_r+0x6c4>
 80046d6:	4648      	mov	r0, r9
 80046d8:	9903      	ldr	r1, [sp, #12]
 80046da:	f000 fbbb 	bl	8004e54 <_Bfree>
 80046de:	2300      	movs	r3, #0
 80046e0:	7033      	strb	r3, [r6, #0]
 80046e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80046e4:	3701      	adds	r7, #1
 80046e6:	601f      	str	r7, [r3, #0]
 80046e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 824b 	beq.w	8004b86 <_dtoa_r+0xb56>
 80046f0:	601e      	str	r6, [r3, #0]
 80046f2:	e248      	b.n	8004b86 <_dtoa_r+0xb56>
 80046f4:	46b8      	mov	r8, r7
 80046f6:	4633      	mov	r3, r6
 80046f8:	461e      	mov	r6, r3
 80046fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046fe:	2a39      	cmp	r2, #57	@ 0x39
 8004700:	d106      	bne.n	8004710 <_dtoa_r+0x6e0>
 8004702:	459a      	cmp	sl, r3
 8004704:	d1f8      	bne.n	80046f8 <_dtoa_r+0x6c8>
 8004706:	2230      	movs	r2, #48	@ 0x30
 8004708:	f108 0801 	add.w	r8, r8, #1
 800470c:	f88a 2000 	strb.w	r2, [sl]
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	3201      	adds	r2, #1
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	e7a0      	b.n	800465a <_dtoa_r+0x62a>
 8004718:	2200      	movs	r2, #0
 800471a:	4b6f      	ldr	r3, [pc, #444]	@ (80048d8 <_dtoa_r+0x8a8>)
 800471c:	f7fb fedc 	bl	80004d8 <__aeabi_dmul>
 8004720:	2200      	movs	r2, #0
 8004722:	2300      	movs	r3, #0
 8004724:	4604      	mov	r4, r0
 8004726:	460d      	mov	r5, r1
 8004728:	f7fc f93e 	bl	80009a8 <__aeabi_dcmpeq>
 800472c:	2800      	cmp	r0, #0
 800472e:	d09f      	beq.n	8004670 <_dtoa_r+0x640>
 8004730:	e7d1      	b.n	80046d6 <_dtoa_r+0x6a6>
 8004732:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004734:	2a00      	cmp	r2, #0
 8004736:	f000 80ea 	beq.w	800490e <_dtoa_r+0x8de>
 800473a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800473c:	2a01      	cmp	r2, #1
 800473e:	f300 80cd 	bgt.w	80048dc <_dtoa_r+0x8ac>
 8004742:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004744:	2a00      	cmp	r2, #0
 8004746:	f000 80c1 	beq.w	80048cc <_dtoa_r+0x89c>
 800474a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800474e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004750:	9e04      	ldr	r6, [sp, #16]
 8004752:	9a04      	ldr	r2, [sp, #16]
 8004754:	2101      	movs	r1, #1
 8004756:	441a      	add	r2, r3
 8004758:	9204      	str	r2, [sp, #16]
 800475a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800475c:	4648      	mov	r0, r9
 800475e:	441a      	add	r2, r3
 8004760:	9209      	str	r2, [sp, #36]	@ 0x24
 8004762:	f000 fc2b 	bl	8004fbc <__i2b>
 8004766:	4605      	mov	r5, r0
 8004768:	b166      	cbz	r6, 8004784 <_dtoa_r+0x754>
 800476a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800476c:	2b00      	cmp	r3, #0
 800476e:	dd09      	ble.n	8004784 <_dtoa_r+0x754>
 8004770:	42b3      	cmp	r3, r6
 8004772:	bfa8      	it	ge
 8004774:	4633      	movge	r3, r6
 8004776:	9a04      	ldr	r2, [sp, #16]
 8004778:	1af6      	subs	r6, r6, r3
 800477a:	1ad2      	subs	r2, r2, r3
 800477c:	9204      	str	r2, [sp, #16]
 800477e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	9309      	str	r3, [sp, #36]	@ 0x24
 8004784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004786:	b30b      	cbz	r3, 80047cc <_dtoa_r+0x79c>
 8004788:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 80c6 	beq.w	800491c <_dtoa_r+0x8ec>
 8004790:	2c00      	cmp	r4, #0
 8004792:	f000 80c0 	beq.w	8004916 <_dtoa_r+0x8e6>
 8004796:	4629      	mov	r1, r5
 8004798:	4622      	mov	r2, r4
 800479a:	4648      	mov	r0, r9
 800479c:	f000 fcc6 	bl	800512c <__pow5mult>
 80047a0:	9a03      	ldr	r2, [sp, #12]
 80047a2:	4601      	mov	r1, r0
 80047a4:	4605      	mov	r5, r0
 80047a6:	4648      	mov	r0, r9
 80047a8:	f000 fc1e 	bl	8004fe8 <__multiply>
 80047ac:	9903      	ldr	r1, [sp, #12]
 80047ae:	4680      	mov	r8, r0
 80047b0:	4648      	mov	r0, r9
 80047b2:	f000 fb4f 	bl	8004e54 <_Bfree>
 80047b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80047b8:	1b1b      	subs	r3, r3, r4
 80047ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80047bc:	f000 80b1 	beq.w	8004922 <_dtoa_r+0x8f2>
 80047c0:	4641      	mov	r1, r8
 80047c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80047c4:	4648      	mov	r0, r9
 80047c6:	f000 fcb1 	bl	800512c <__pow5mult>
 80047ca:	9003      	str	r0, [sp, #12]
 80047cc:	2101      	movs	r1, #1
 80047ce:	4648      	mov	r0, r9
 80047d0:	f000 fbf4 	bl	8004fbc <__i2b>
 80047d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80047d6:	4604      	mov	r4, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 81d8 	beq.w	8004b8e <_dtoa_r+0xb5e>
 80047de:	461a      	mov	r2, r3
 80047e0:	4601      	mov	r1, r0
 80047e2:	4648      	mov	r0, r9
 80047e4:	f000 fca2 	bl	800512c <__pow5mult>
 80047e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80047ea:	4604      	mov	r4, r0
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	f300 809f 	bgt.w	8004930 <_dtoa_r+0x900>
 80047f2:	9b06      	ldr	r3, [sp, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f040 8097 	bne.w	8004928 <_dtoa_r+0x8f8>
 80047fa:	9b07      	ldr	r3, [sp, #28]
 80047fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004800:	2b00      	cmp	r3, #0
 8004802:	f040 8093 	bne.w	800492c <_dtoa_r+0x8fc>
 8004806:	9b07      	ldr	r3, [sp, #28]
 8004808:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800480c:	0d1b      	lsrs	r3, r3, #20
 800480e:	051b      	lsls	r3, r3, #20
 8004810:	b133      	cbz	r3, 8004820 <_dtoa_r+0x7f0>
 8004812:	9b04      	ldr	r3, [sp, #16]
 8004814:	3301      	adds	r3, #1
 8004816:	9304      	str	r3, [sp, #16]
 8004818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800481a:	3301      	adds	r3, #1
 800481c:	9309      	str	r3, [sp, #36]	@ 0x24
 800481e:	2301      	movs	r3, #1
 8004820:	930a      	str	r3, [sp, #40]	@ 0x28
 8004822:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 81b8 	beq.w	8004b9a <_dtoa_r+0xb6a>
 800482a:	6923      	ldr	r3, [r4, #16]
 800482c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004830:	6918      	ldr	r0, [r3, #16]
 8004832:	f000 fb77 	bl	8004f24 <__hi0bits>
 8004836:	f1c0 0020 	rsb	r0, r0, #32
 800483a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800483c:	4418      	add	r0, r3
 800483e:	f010 001f 	ands.w	r0, r0, #31
 8004842:	f000 8082 	beq.w	800494a <_dtoa_r+0x91a>
 8004846:	f1c0 0320 	rsb	r3, r0, #32
 800484a:	2b04      	cmp	r3, #4
 800484c:	dd73      	ble.n	8004936 <_dtoa_r+0x906>
 800484e:	9b04      	ldr	r3, [sp, #16]
 8004850:	f1c0 001c 	rsb	r0, r0, #28
 8004854:	4403      	add	r3, r0
 8004856:	9304      	str	r3, [sp, #16]
 8004858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800485a:	4406      	add	r6, r0
 800485c:	4403      	add	r3, r0
 800485e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004860:	9b04      	ldr	r3, [sp, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	dd05      	ble.n	8004872 <_dtoa_r+0x842>
 8004866:	461a      	mov	r2, r3
 8004868:	4648      	mov	r0, r9
 800486a:	9903      	ldr	r1, [sp, #12]
 800486c:	f000 fcb8 	bl	80051e0 <__lshift>
 8004870:	9003      	str	r0, [sp, #12]
 8004872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004874:	2b00      	cmp	r3, #0
 8004876:	dd05      	ble.n	8004884 <_dtoa_r+0x854>
 8004878:	4621      	mov	r1, r4
 800487a:	461a      	mov	r2, r3
 800487c:	4648      	mov	r0, r9
 800487e:	f000 fcaf 	bl	80051e0 <__lshift>
 8004882:	4604      	mov	r4, r0
 8004884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d061      	beq.n	800494e <_dtoa_r+0x91e>
 800488a:	4621      	mov	r1, r4
 800488c:	9803      	ldr	r0, [sp, #12]
 800488e:	f000 fd13 	bl	80052b8 <__mcmp>
 8004892:	2800      	cmp	r0, #0
 8004894:	da5b      	bge.n	800494e <_dtoa_r+0x91e>
 8004896:	2300      	movs	r3, #0
 8004898:	220a      	movs	r2, #10
 800489a:	4648      	mov	r0, r9
 800489c:	9903      	ldr	r1, [sp, #12]
 800489e:	f000 fafb 	bl	8004e98 <__multadd>
 80048a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80048a4:	f107 38ff 	add.w	r8, r7, #4294967295
 80048a8:	9003      	str	r0, [sp, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 8177 	beq.w	8004b9e <_dtoa_r+0xb6e>
 80048b0:	4629      	mov	r1, r5
 80048b2:	2300      	movs	r3, #0
 80048b4:	220a      	movs	r2, #10
 80048b6:	4648      	mov	r0, r9
 80048b8:	f000 faee 	bl	8004e98 <__multadd>
 80048bc:	f1bb 0f00 	cmp.w	fp, #0
 80048c0:	4605      	mov	r5, r0
 80048c2:	dc6f      	bgt.n	80049a4 <_dtoa_r+0x974>
 80048c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	dc49      	bgt.n	800495e <_dtoa_r+0x92e>
 80048ca:	e06b      	b.n	80049a4 <_dtoa_r+0x974>
 80048cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80048ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80048d2:	e73c      	b.n	800474e <_dtoa_r+0x71e>
 80048d4:	3fe00000 	.word	0x3fe00000
 80048d8:	40240000 	.word	0x40240000
 80048dc:	9b08      	ldr	r3, [sp, #32]
 80048de:	1e5c      	subs	r4, r3, #1
 80048e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048e2:	42a3      	cmp	r3, r4
 80048e4:	db09      	blt.n	80048fa <_dtoa_r+0x8ca>
 80048e6:	1b1c      	subs	r4, r3, r4
 80048e8:	9b08      	ldr	r3, [sp, #32]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f6bf af30 	bge.w	8004750 <_dtoa_r+0x720>
 80048f0:	9b04      	ldr	r3, [sp, #16]
 80048f2:	9a08      	ldr	r2, [sp, #32]
 80048f4:	1a9e      	subs	r6, r3, r2
 80048f6:	2300      	movs	r3, #0
 80048f8:	e72b      	b.n	8004752 <_dtoa_r+0x722>
 80048fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80048fe:	1ae3      	subs	r3, r4, r3
 8004900:	441a      	add	r2, r3
 8004902:	940a      	str	r4, [sp, #40]	@ 0x28
 8004904:	9e04      	ldr	r6, [sp, #16]
 8004906:	2400      	movs	r4, #0
 8004908:	9b08      	ldr	r3, [sp, #32]
 800490a:	920e      	str	r2, [sp, #56]	@ 0x38
 800490c:	e721      	b.n	8004752 <_dtoa_r+0x722>
 800490e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004910:	9e04      	ldr	r6, [sp, #16]
 8004912:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004914:	e728      	b.n	8004768 <_dtoa_r+0x738>
 8004916:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800491a:	e751      	b.n	80047c0 <_dtoa_r+0x790>
 800491c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800491e:	9903      	ldr	r1, [sp, #12]
 8004920:	e750      	b.n	80047c4 <_dtoa_r+0x794>
 8004922:	f8cd 800c 	str.w	r8, [sp, #12]
 8004926:	e751      	b.n	80047cc <_dtoa_r+0x79c>
 8004928:	2300      	movs	r3, #0
 800492a:	e779      	b.n	8004820 <_dtoa_r+0x7f0>
 800492c:	9b06      	ldr	r3, [sp, #24]
 800492e:	e777      	b.n	8004820 <_dtoa_r+0x7f0>
 8004930:	2300      	movs	r3, #0
 8004932:	930a      	str	r3, [sp, #40]	@ 0x28
 8004934:	e779      	b.n	800482a <_dtoa_r+0x7fa>
 8004936:	d093      	beq.n	8004860 <_dtoa_r+0x830>
 8004938:	9a04      	ldr	r2, [sp, #16]
 800493a:	331c      	adds	r3, #28
 800493c:	441a      	add	r2, r3
 800493e:	9204      	str	r2, [sp, #16]
 8004940:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004942:	441e      	add	r6, r3
 8004944:	441a      	add	r2, r3
 8004946:	9209      	str	r2, [sp, #36]	@ 0x24
 8004948:	e78a      	b.n	8004860 <_dtoa_r+0x830>
 800494a:	4603      	mov	r3, r0
 800494c:	e7f4      	b.n	8004938 <_dtoa_r+0x908>
 800494e:	9b08      	ldr	r3, [sp, #32]
 8004950:	46b8      	mov	r8, r7
 8004952:	2b00      	cmp	r3, #0
 8004954:	dc20      	bgt.n	8004998 <_dtoa_r+0x968>
 8004956:	469b      	mov	fp, r3
 8004958:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800495a:	2b02      	cmp	r3, #2
 800495c:	dd1e      	ble.n	800499c <_dtoa_r+0x96c>
 800495e:	f1bb 0f00 	cmp.w	fp, #0
 8004962:	f47f adb1 	bne.w	80044c8 <_dtoa_r+0x498>
 8004966:	4621      	mov	r1, r4
 8004968:	465b      	mov	r3, fp
 800496a:	2205      	movs	r2, #5
 800496c:	4648      	mov	r0, r9
 800496e:	f000 fa93 	bl	8004e98 <__multadd>
 8004972:	4601      	mov	r1, r0
 8004974:	4604      	mov	r4, r0
 8004976:	9803      	ldr	r0, [sp, #12]
 8004978:	f000 fc9e 	bl	80052b8 <__mcmp>
 800497c:	2800      	cmp	r0, #0
 800497e:	f77f ada3 	ble.w	80044c8 <_dtoa_r+0x498>
 8004982:	4656      	mov	r6, sl
 8004984:	2331      	movs	r3, #49	@ 0x31
 8004986:	f108 0801 	add.w	r8, r8, #1
 800498a:	f806 3b01 	strb.w	r3, [r6], #1
 800498e:	e59f      	b.n	80044d0 <_dtoa_r+0x4a0>
 8004990:	46b8      	mov	r8, r7
 8004992:	9c08      	ldr	r4, [sp, #32]
 8004994:	4625      	mov	r5, r4
 8004996:	e7f4      	b.n	8004982 <_dtoa_r+0x952>
 8004998:	f8dd b020 	ldr.w	fp, [sp, #32]
 800499c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 8101 	beq.w	8004ba6 <_dtoa_r+0xb76>
 80049a4:	2e00      	cmp	r6, #0
 80049a6:	dd05      	ble.n	80049b4 <_dtoa_r+0x984>
 80049a8:	4629      	mov	r1, r5
 80049aa:	4632      	mov	r2, r6
 80049ac:	4648      	mov	r0, r9
 80049ae:	f000 fc17 	bl	80051e0 <__lshift>
 80049b2:	4605      	mov	r5, r0
 80049b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d05c      	beq.n	8004a74 <_dtoa_r+0xa44>
 80049ba:	4648      	mov	r0, r9
 80049bc:	6869      	ldr	r1, [r5, #4]
 80049be:	f000 fa09 	bl	8004dd4 <_Balloc>
 80049c2:	4606      	mov	r6, r0
 80049c4:	b928      	cbnz	r0, 80049d2 <_dtoa_r+0x9a2>
 80049c6:	4602      	mov	r2, r0
 80049c8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80049cc:	4b80      	ldr	r3, [pc, #512]	@ (8004bd0 <_dtoa_r+0xba0>)
 80049ce:	f7ff bb43 	b.w	8004058 <_dtoa_r+0x28>
 80049d2:	692a      	ldr	r2, [r5, #16]
 80049d4:	f105 010c 	add.w	r1, r5, #12
 80049d8:	3202      	adds	r2, #2
 80049da:	0092      	lsls	r2, r2, #2
 80049dc:	300c      	adds	r0, #12
 80049de:	f000 ffef 	bl	80059c0 <memcpy>
 80049e2:	2201      	movs	r2, #1
 80049e4:	4631      	mov	r1, r6
 80049e6:	4648      	mov	r0, r9
 80049e8:	f000 fbfa 	bl	80051e0 <__lshift>
 80049ec:	462f      	mov	r7, r5
 80049ee:	4605      	mov	r5, r0
 80049f0:	f10a 0301 	add.w	r3, sl, #1
 80049f4:	9304      	str	r3, [sp, #16]
 80049f6:	eb0a 030b 	add.w	r3, sl, fp
 80049fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80049fc:	9b06      	ldr	r3, [sp, #24]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a04:	9b04      	ldr	r3, [sp, #16]
 8004a06:	4621      	mov	r1, r4
 8004a08:	9803      	ldr	r0, [sp, #12]
 8004a0a:	f103 3bff 	add.w	fp, r3, #4294967295
 8004a0e:	f7ff fa86 	bl	8003f1e <quorem>
 8004a12:	4603      	mov	r3, r0
 8004a14:	4639      	mov	r1, r7
 8004a16:	3330      	adds	r3, #48	@ 0x30
 8004a18:	9006      	str	r0, [sp, #24]
 8004a1a:	9803      	ldr	r0, [sp, #12]
 8004a1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a1e:	f000 fc4b 	bl	80052b8 <__mcmp>
 8004a22:	462a      	mov	r2, r5
 8004a24:	9008      	str	r0, [sp, #32]
 8004a26:	4621      	mov	r1, r4
 8004a28:	4648      	mov	r0, r9
 8004a2a:	f000 fc61 	bl	80052f0 <__mdiff>
 8004a2e:	68c2      	ldr	r2, [r0, #12]
 8004a30:	4606      	mov	r6, r0
 8004a32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a34:	bb02      	cbnz	r2, 8004a78 <_dtoa_r+0xa48>
 8004a36:	4601      	mov	r1, r0
 8004a38:	9803      	ldr	r0, [sp, #12]
 8004a3a:	f000 fc3d 	bl	80052b8 <__mcmp>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a42:	4631      	mov	r1, r6
 8004a44:	4648      	mov	r0, r9
 8004a46:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004a4a:	f000 fa03 	bl	8004e54 <_Bfree>
 8004a4e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004a52:	9e04      	ldr	r6, [sp, #16]
 8004a54:	ea42 0103 	orr.w	r1, r2, r3
 8004a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a5a:	4319      	orrs	r1, r3
 8004a5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a5e:	d10d      	bne.n	8004a7c <_dtoa_r+0xa4c>
 8004a60:	2b39      	cmp	r3, #57	@ 0x39
 8004a62:	d027      	beq.n	8004ab4 <_dtoa_r+0xa84>
 8004a64:	9a08      	ldr	r2, [sp, #32]
 8004a66:	2a00      	cmp	r2, #0
 8004a68:	dd01      	ble.n	8004a6e <_dtoa_r+0xa3e>
 8004a6a:	9b06      	ldr	r3, [sp, #24]
 8004a6c:	3331      	adds	r3, #49	@ 0x31
 8004a6e:	f88b 3000 	strb.w	r3, [fp]
 8004a72:	e52e      	b.n	80044d2 <_dtoa_r+0x4a2>
 8004a74:	4628      	mov	r0, r5
 8004a76:	e7b9      	b.n	80049ec <_dtoa_r+0x9bc>
 8004a78:	2201      	movs	r2, #1
 8004a7a:	e7e2      	b.n	8004a42 <_dtoa_r+0xa12>
 8004a7c:	9908      	ldr	r1, [sp, #32]
 8004a7e:	2900      	cmp	r1, #0
 8004a80:	db04      	blt.n	8004a8c <_dtoa_r+0xa5c>
 8004a82:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004a84:	4301      	orrs	r1, r0
 8004a86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a88:	4301      	orrs	r1, r0
 8004a8a:	d120      	bne.n	8004ace <_dtoa_r+0xa9e>
 8004a8c:	2a00      	cmp	r2, #0
 8004a8e:	ddee      	ble.n	8004a6e <_dtoa_r+0xa3e>
 8004a90:	2201      	movs	r2, #1
 8004a92:	9903      	ldr	r1, [sp, #12]
 8004a94:	4648      	mov	r0, r9
 8004a96:	9304      	str	r3, [sp, #16]
 8004a98:	f000 fba2 	bl	80051e0 <__lshift>
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	9003      	str	r0, [sp, #12]
 8004aa0:	f000 fc0a 	bl	80052b8 <__mcmp>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	9b04      	ldr	r3, [sp, #16]
 8004aa8:	dc02      	bgt.n	8004ab0 <_dtoa_r+0xa80>
 8004aaa:	d1e0      	bne.n	8004a6e <_dtoa_r+0xa3e>
 8004aac:	07da      	lsls	r2, r3, #31
 8004aae:	d5de      	bpl.n	8004a6e <_dtoa_r+0xa3e>
 8004ab0:	2b39      	cmp	r3, #57	@ 0x39
 8004ab2:	d1da      	bne.n	8004a6a <_dtoa_r+0xa3a>
 8004ab4:	2339      	movs	r3, #57	@ 0x39
 8004ab6:	f88b 3000 	strb.w	r3, [fp]
 8004aba:	4633      	mov	r3, r6
 8004abc:	461e      	mov	r6, r3
 8004abe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	2a39      	cmp	r2, #57	@ 0x39
 8004ac6:	d04e      	beq.n	8004b66 <_dtoa_r+0xb36>
 8004ac8:	3201      	adds	r2, #1
 8004aca:	701a      	strb	r2, [r3, #0]
 8004acc:	e501      	b.n	80044d2 <_dtoa_r+0x4a2>
 8004ace:	2a00      	cmp	r2, #0
 8004ad0:	dd03      	ble.n	8004ada <_dtoa_r+0xaaa>
 8004ad2:	2b39      	cmp	r3, #57	@ 0x39
 8004ad4:	d0ee      	beq.n	8004ab4 <_dtoa_r+0xa84>
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	e7c9      	b.n	8004a6e <_dtoa_r+0xa3e>
 8004ada:	9a04      	ldr	r2, [sp, #16]
 8004adc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004ade:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004ae2:	428a      	cmp	r2, r1
 8004ae4:	d028      	beq.n	8004b38 <_dtoa_r+0xb08>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	220a      	movs	r2, #10
 8004aea:	9903      	ldr	r1, [sp, #12]
 8004aec:	4648      	mov	r0, r9
 8004aee:	f000 f9d3 	bl	8004e98 <__multadd>
 8004af2:	42af      	cmp	r7, r5
 8004af4:	9003      	str	r0, [sp, #12]
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	f04f 020a 	mov.w	r2, #10
 8004afe:	4639      	mov	r1, r7
 8004b00:	4648      	mov	r0, r9
 8004b02:	d107      	bne.n	8004b14 <_dtoa_r+0xae4>
 8004b04:	f000 f9c8 	bl	8004e98 <__multadd>
 8004b08:	4607      	mov	r7, r0
 8004b0a:	4605      	mov	r5, r0
 8004b0c:	9b04      	ldr	r3, [sp, #16]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	9304      	str	r3, [sp, #16]
 8004b12:	e777      	b.n	8004a04 <_dtoa_r+0x9d4>
 8004b14:	f000 f9c0 	bl	8004e98 <__multadd>
 8004b18:	4629      	mov	r1, r5
 8004b1a:	4607      	mov	r7, r0
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	220a      	movs	r2, #10
 8004b20:	4648      	mov	r0, r9
 8004b22:	f000 f9b9 	bl	8004e98 <__multadd>
 8004b26:	4605      	mov	r5, r0
 8004b28:	e7f0      	b.n	8004b0c <_dtoa_r+0xadc>
 8004b2a:	f1bb 0f00 	cmp.w	fp, #0
 8004b2e:	bfcc      	ite	gt
 8004b30:	465e      	movgt	r6, fp
 8004b32:	2601      	movle	r6, #1
 8004b34:	2700      	movs	r7, #0
 8004b36:	4456      	add	r6, sl
 8004b38:	2201      	movs	r2, #1
 8004b3a:	9903      	ldr	r1, [sp, #12]
 8004b3c:	4648      	mov	r0, r9
 8004b3e:	9304      	str	r3, [sp, #16]
 8004b40:	f000 fb4e 	bl	80051e0 <__lshift>
 8004b44:	4621      	mov	r1, r4
 8004b46:	9003      	str	r0, [sp, #12]
 8004b48:	f000 fbb6 	bl	80052b8 <__mcmp>
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	dcb4      	bgt.n	8004aba <_dtoa_r+0xa8a>
 8004b50:	d102      	bne.n	8004b58 <_dtoa_r+0xb28>
 8004b52:	9b04      	ldr	r3, [sp, #16]
 8004b54:	07db      	lsls	r3, r3, #31
 8004b56:	d4b0      	bmi.n	8004aba <_dtoa_r+0xa8a>
 8004b58:	4633      	mov	r3, r6
 8004b5a:	461e      	mov	r6, r3
 8004b5c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b60:	2a30      	cmp	r2, #48	@ 0x30
 8004b62:	d0fa      	beq.n	8004b5a <_dtoa_r+0xb2a>
 8004b64:	e4b5      	b.n	80044d2 <_dtoa_r+0x4a2>
 8004b66:	459a      	cmp	sl, r3
 8004b68:	d1a8      	bne.n	8004abc <_dtoa_r+0xa8c>
 8004b6a:	2331      	movs	r3, #49	@ 0x31
 8004b6c:	f108 0801 	add.w	r8, r8, #1
 8004b70:	f88a 3000 	strb.w	r3, [sl]
 8004b74:	e4ad      	b.n	80044d2 <_dtoa_r+0x4a2>
 8004b76:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004b78:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004bd4 <_dtoa_r+0xba4>
 8004b7c:	b11b      	cbz	r3, 8004b86 <_dtoa_r+0xb56>
 8004b7e:	f10a 0308 	add.w	r3, sl, #8
 8004b82:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	4650      	mov	r0, sl
 8004b88:	b017      	add	sp, #92	@ 0x5c
 8004b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	f77f ae2e 	ble.w	80047f2 <_dtoa_r+0x7c2>
 8004b96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b98:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b9a:	2001      	movs	r0, #1
 8004b9c:	e64d      	b.n	800483a <_dtoa_r+0x80a>
 8004b9e:	f1bb 0f00 	cmp.w	fp, #0
 8004ba2:	f77f aed9 	ble.w	8004958 <_dtoa_r+0x928>
 8004ba6:	4656      	mov	r6, sl
 8004ba8:	4621      	mov	r1, r4
 8004baa:	9803      	ldr	r0, [sp, #12]
 8004bac:	f7ff f9b7 	bl	8003f1e <quorem>
 8004bb0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004bb4:	f806 3b01 	strb.w	r3, [r6], #1
 8004bb8:	eba6 020a 	sub.w	r2, r6, sl
 8004bbc:	4593      	cmp	fp, r2
 8004bbe:	ddb4      	ble.n	8004b2a <_dtoa_r+0xafa>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	220a      	movs	r2, #10
 8004bc4:	4648      	mov	r0, r9
 8004bc6:	9903      	ldr	r1, [sp, #12]
 8004bc8:	f000 f966 	bl	8004e98 <__multadd>
 8004bcc:	9003      	str	r0, [sp, #12]
 8004bce:	e7eb      	b.n	8004ba8 <_dtoa_r+0xb78>
 8004bd0:	08005dbe 	.word	0x08005dbe
 8004bd4:	08005d42 	.word	0x08005d42

08004bd8 <_free_r>:
 8004bd8:	b538      	push	{r3, r4, r5, lr}
 8004bda:	4605      	mov	r5, r0
 8004bdc:	2900      	cmp	r1, #0
 8004bde:	d040      	beq.n	8004c62 <_free_r+0x8a>
 8004be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004be4:	1f0c      	subs	r4, r1, #4
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	bfb8      	it	lt
 8004bea:	18e4      	addlt	r4, r4, r3
 8004bec:	f000 f8e6 	bl	8004dbc <__malloc_lock>
 8004bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c64 <_free_r+0x8c>)
 8004bf2:	6813      	ldr	r3, [r2, #0]
 8004bf4:	b933      	cbnz	r3, 8004c04 <_free_r+0x2c>
 8004bf6:	6063      	str	r3, [r4, #4]
 8004bf8:	6014      	str	r4, [r2, #0]
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c00:	f000 b8e2 	b.w	8004dc8 <__malloc_unlock>
 8004c04:	42a3      	cmp	r3, r4
 8004c06:	d908      	bls.n	8004c1a <_free_r+0x42>
 8004c08:	6820      	ldr	r0, [r4, #0]
 8004c0a:	1821      	adds	r1, r4, r0
 8004c0c:	428b      	cmp	r3, r1
 8004c0e:	bf01      	itttt	eq
 8004c10:	6819      	ldreq	r1, [r3, #0]
 8004c12:	685b      	ldreq	r3, [r3, #4]
 8004c14:	1809      	addeq	r1, r1, r0
 8004c16:	6021      	streq	r1, [r4, #0]
 8004c18:	e7ed      	b.n	8004bf6 <_free_r+0x1e>
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	b10b      	cbz	r3, 8004c24 <_free_r+0x4c>
 8004c20:	42a3      	cmp	r3, r4
 8004c22:	d9fa      	bls.n	8004c1a <_free_r+0x42>
 8004c24:	6811      	ldr	r1, [r2, #0]
 8004c26:	1850      	adds	r0, r2, r1
 8004c28:	42a0      	cmp	r0, r4
 8004c2a:	d10b      	bne.n	8004c44 <_free_r+0x6c>
 8004c2c:	6820      	ldr	r0, [r4, #0]
 8004c2e:	4401      	add	r1, r0
 8004c30:	1850      	adds	r0, r2, r1
 8004c32:	4283      	cmp	r3, r0
 8004c34:	6011      	str	r1, [r2, #0]
 8004c36:	d1e0      	bne.n	8004bfa <_free_r+0x22>
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	4408      	add	r0, r1
 8004c3e:	6010      	str	r0, [r2, #0]
 8004c40:	6053      	str	r3, [r2, #4]
 8004c42:	e7da      	b.n	8004bfa <_free_r+0x22>
 8004c44:	d902      	bls.n	8004c4c <_free_r+0x74>
 8004c46:	230c      	movs	r3, #12
 8004c48:	602b      	str	r3, [r5, #0]
 8004c4a:	e7d6      	b.n	8004bfa <_free_r+0x22>
 8004c4c:	6820      	ldr	r0, [r4, #0]
 8004c4e:	1821      	adds	r1, r4, r0
 8004c50:	428b      	cmp	r3, r1
 8004c52:	bf01      	itttt	eq
 8004c54:	6819      	ldreq	r1, [r3, #0]
 8004c56:	685b      	ldreq	r3, [r3, #4]
 8004c58:	1809      	addeq	r1, r1, r0
 8004c5a:	6021      	streq	r1, [r4, #0]
 8004c5c:	6063      	str	r3, [r4, #4]
 8004c5e:	6054      	str	r4, [r2, #4]
 8004c60:	e7cb      	b.n	8004bfa <_free_r+0x22>
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	200003a0 	.word	0x200003a0

08004c68 <malloc>:
 8004c68:	4b02      	ldr	r3, [pc, #8]	@ (8004c74 <malloc+0xc>)
 8004c6a:	4601      	mov	r1, r0
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	f000 b825 	b.w	8004cbc <_malloc_r>
 8004c72:	bf00      	nop
 8004c74:	20000024 	.word	0x20000024

08004c78 <sbrk_aligned>:
 8004c78:	b570      	push	{r4, r5, r6, lr}
 8004c7a:	4e0f      	ldr	r6, [pc, #60]	@ (8004cb8 <sbrk_aligned+0x40>)
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	6831      	ldr	r1, [r6, #0]
 8004c80:	4605      	mov	r5, r0
 8004c82:	b911      	cbnz	r1, 8004c8a <sbrk_aligned+0x12>
 8004c84:	f000 fe8c 	bl	80059a0 <_sbrk_r>
 8004c88:	6030      	str	r0, [r6, #0]
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f000 fe87 	bl	80059a0 <_sbrk_r>
 8004c92:	1c43      	adds	r3, r0, #1
 8004c94:	d103      	bne.n	8004c9e <sbrk_aligned+0x26>
 8004c96:	f04f 34ff 	mov.w	r4, #4294967295
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	bd70      	pop	{r4, r5, r6, pc}
 8004c9e:	1cc4      	adds	r4, r0, #3
 8004ca0:	f024 0403 	bic.w	r4, r4, #3
 8004ca4:	42a0      	cmp	r0, r4
 8004ca6:	d0f8      	beq.n	8004c9a <sbrk_aligned+0x22>
 8004ca8:	1a21      	subs	r1, r4, r0
 8004caa:	4628      	mov	r0, r5
 8004cac:	f000 fe78 	bl	80059a0 <_sbrk_r>
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	d1f2      	bne.n	8004c9a <sbrk_aligned+0x22>
 8004cb4:	e7ef      	b.n	8004c96 <sbrk_aligned+0x1e>
 8004cb6:	bf00      	nop
 8004cb8:	2000039c 	.word	0x2000039c

08004cbc <_malloc_r>:
 8004cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cc0:	1ccd      	adds	r5, r1, #3
 8004cc2:	f025 0503 	bic.w	r5, r5, #3
 8004cc6:	3508      	adds	r5, #8
 8004cc8:	2d0c      	cmp	r5, #12
 8004cca:	bf38      	it	cc
 8004ccc:	250c      	movcc	r5, #12
 8004cce:	2d00      	cmp	r5, #0
 8004cd0:	4606      	mov	r6, r0
 8004cd2:	db01      	blt.n	8004cd8 <_malloc_r+0x1c>
 8004cd4:	42a9      	cmp	r1, r5
 8004cd6:	d904      	bls.n	8004ce2 <_malloc_r+0x26>
 8004cd8:	230c      	movs	r3, #12
 8004cda:	6033      	str	r3, [r6, #0]
 8004cdc:	2000      	movs	r0, #0
 8004cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ce2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004db8 <_malloc_r+0xfc>
 8004ce6:	f000 f869 	bl	8004dbc <__malloc_lock>
 8004cea:	f8d8 3000 	ldr.w	r3, [r8]
 8004cee:	461c      	mov	r4, r3
 8004cf0:	bb44      	cbnz	r4, 8004d44 <_malloc_r+0x88>
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	f7ff ffbf 	bl	8004c78 <sbrk_aligned>
 8004cfa:	1c43      	adds	r3, r0, #1
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	d158      	bne.n	8004db2 <_malloc_r+0xf6>
 8004d00:	f8d8 4000 	ldr.w	r4, [r8]
 8004d04:	4627      	mov	r7, r4
 8004d06:	2f00      	cmp	r7, #0
 8004d08:	d143      	bne.n	8004d92 <_malloc_r+0xd6>
 8004d0a:	2c00      	cmp	r4, #0
 8004d0c:	d04b      	beq.n	8004da6 <_malloc_r+0xea>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	4639      	mov	r1, r7
 8004d12:	4630      	mov	r0, r6
 8004d14:	eb04 0903 	add.w	r9, r4, r3
 8004d18:	f000 fe42 	bl	80059a0 <_sbrk_r>
 8004d1c:	4581      	cmp	r9, r0
 8004d1e:	d142      	bne.n	8004da6 <_malloc_r+0xea>
 8004d20:	6821      	ldr	r1, [r4, #0]
 8004d22:	4630      	mov	r0, r6
 8004d24:	1a6d      	subs	r5, r5, r1
 8004d26:	4629      	mov	r1, r5
 8004d28:	f7ff ffa6 	bl	8004c78 <sbrk_aligned>
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d03a      	beq.n	8004da6 <_malloc_r+0xea>
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	442b      	add	r3, r5
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	f8d8 3000 	ldr.w	r3, [r8]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	bb62      	cbnz	r2, 8004d98 <_malloc_r+0xdc>
 8004d3e:	f8c8 7000 	str.w	r7, [r8]
 8004d42:	e00f      	b.n	8004d64 <_malloc_r+0xa8>
 8004d44:	6822      	ldr	r2, [r4, #0]
 8004d46:	1b52      	subs	r2, r2, r5
 8004d48:	d420      	bmi.n	8004d8c <_malloc_r+0xd0>
 8004d4a:	2a0b      	cmp	r2, #11
 8004d4c:	d917      	bls.n	8004d7e <_malloc_r+0xc2>
 8004d4e:	1961      	adds	r1, r4, r5
 8004d50:	42a3      	cmp	r3, r4
 8004d52:	6025      	str	r5, [r4, #0]
 8004d54:	bf18      	it	ne
 8004d56:	6059      	strne	r1, [r3, #4]
 8004d58:	6863      	ldr	r3, [r4, #4]
 8004d5a:	bf08      	it	eq
 8004d5c:	f8c8 1000 	streq.w	r1, [r8]
 8004d60:	5162      	str	r2, [r4, r5]
 8004d62:	604b      	str	r3, [r1, #4]
 8004d64:	4630      	mov	r0, r6
 8004d66:	f000 f82f 	bl	8004dc8 <__malloc_unlock>
 8004d6a:	f104 000b 	add.w	r0, r4, #11
 8004d6e:	1d23      	adds	r3, r4, #4
 8004d70:	f020 0007 	bic.w	r0, r0, #7
 8004d74:	1ac2      	subs	r2, r0, r3
 8004d76:	bf1c      	itt	ne
 8004d78:	1a1b      	subne	r3, r3, r0
 8004d7a:	50a3      	strne	r3, [r4, r2]
 8004d7c:	e7af      	b.n	8004cde <_malloc_r+0x22>
 8004d7e:	6862      	ldr	r2, [r4, #4]
 8004d80:	42a3      	cmp	r3, r4
 8004d82:	bf0c      	ite	eq
 8004d84:	f8c8 2000 	streq.w	r2, [r8]
 8004d88:	605a      	strne	r2, [r3, #4]
 8004d8a:	e7eb      	b.n	8004d64 <_malloc_r+0xa8>
 8004d8c:	4623      	mov	r3, r4
 8004d8e:	6864      	ldr	r4, [r4, #4]
 8004d90:	e7ae      	b.n	8004cf0 <_malloc_r+0x34>
 8004d92:	463c      	mov	r4, r7
 8004d94:	687f      	ldr	r7, [r7, #4]
 8004d96:	e7b6      	b.n	8004d06 <_malloc_r+0x4a>
 8004d98:	461a      	mov	r2, r3
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	42a3      	cmp	r3, r4
 8004d9e:	d1fb      	bne.n	8004d98 <_malloc_r+0xdc>
 8004da0:	2300      	movs	r3, #0
 8004da2:	6053      	str	r3, [r2, #4]
 8004da4:	e7de      	b.n	8004d64 <_malloc_r+0xa8>
 8004da6:	230c      	movs	r3, #12
 8004da8:	4630      	mov	r0, r6
 8004daa:	6033      	str	r3, [r6, #0]
 8004dac:	f000 f80c 	bl	8004dc8 <__malloc_unlock>
 8004db0:	e794      	b.n	8004cdc <_malloc_r+0x20>
 8004db2:	6005      	str	r5, [r0, #0]
 8004db4:	e7d6      	b.n	8004d64 <_malloc_r+0xa8>
 8004db6:	bf00      	nop
 8004db8:	200003a0 	.word	0x200003a0

08004dbc <__malloc_lock>:
 8004dbc:	4801      	ldr	r0, [pc, #4]	@ (8004dc4 <__malloc_lock+0x8>)
 8004dbe:	f7ff b89e 	b.w	8003efe <__retarget_lock_acquire_recursive>
 8004dc2:	bf00      	nop
 8004dc4:	20000398 	.word	0x20000398

08004dc8 <__malloc_unlock>:
 8004dc8:	4801      	ldr	r0, [pc, #4]	@ (8004dd0 <__malloc_unlock+0x8>)
 8004dca:	f7ff b899 	b.w	8003f00 <__retarget_lock_release_recursive>
 8004dce:	bf00      	nop
 8004dd0:	20000398 	.word	0x20000398

08004dd4 <_Balloc>:
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	69c6      	ldr	r6, [r0, #28]
 8004dd8:	4604      	mov	r4, r0
 8004dda:	460d      	mov	r5, r1
 8004ddc:	b976      	cbnz	r6, 8004dfc <_Balloc+0x28>
 8004dde:	2010      	movs	r0, #16
 8004de0:	f7ff ff42 	bl	8004c68 <malloc>
 8004de4:	4602      	mov	r2, r0
 8004de6:	61e0      	str	r0, [r4, #28]
 8004de8:	b920      	cbnz	r0, 8004df4 <_Balloc+0x20>
 8004dea:	216b      	movs	r1, #107	@ 0x6b
 8004dec:	4b17      	ldr	r3, [pc, #92]	@ (8004e4c <_Balloc+0x78>)
 8004dee:	4818      	ldr	r0, [pc, #96]	@ (8004e50 <_Balloc+0x7c>)
 8004df0:	f000 fdf4 	bl	80059dc <__assert_func>
 8004df4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004df8:	6006      	str	r6, [r0, #0]
 8004dfa:	60c6      	str	r6, [r0, #12]
 8004dfc:	69e6      	ldr	r6, [r4, #28]
 8004dfe:	68f3      	ldr	r3, [r6, #12]
 8004e00:	b183      	cbz	r3, 8004e24 <_Balloc+0x50>
 8004e02:	69e3      	ldr	r3, [r4, #28]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004e0a:	b9b8      	cbnz	r0, 8004e3c <_Balloc+0x68>
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	fa01 f605 	lsl.w	r6, r1, r5
 8004e12:	1d72      	adds	r2, r6, #5
 8004e14:	4620      	mov	r0, r4
 8004e16:	0092      	lsls	r2, r2, #2
 8004e18:	f000 fdfe 	bl	8005a18 <_calloc_r>
 8004e1c:	b160      	cbz	r0, 8004e38 <_Balloc+0x64>
 8004e1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004e22:	e00e      	b.n	8004e42 <_Balloc+0x6e>
 8004e24:	2221      	movs	r2, #33	@ 0x21
 8004e26:	2104      	movs	r1, #4
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f000 fdf5 	bl	8005a18 <_calloc_r>
 8004e2e:	69e3      	ldr	r3, [r4, #28]
 8004e30:	60f0      	str	r0, [r6, #12]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e4      	bne.n	8004e02 <_Balloc+0x2e>
 8004e38:	2000      	movs	r0, #0
 8004e3a:	bd70      	pop	{r4, r5, r6, pc}
 8004e3c:	6802      	ldr	r2, [r0, #0]
 8004e3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e42:	2300      	movs	r3, #0
 8004e44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e48:	e7f7      	b.n	8004e3a <_Balloc+0x66>
 8004e4a:	bf00      	nop
 8004e4c:	08005d4f 	.word	0x08005d4f
 8004e50:	08005dcf 	.word	0x08005dcf

08004e54 <_Bfree>:
 8004e54:	b570      	push	{r4, r5, r6, lr}
 8004e56:	69c6      	ldr	r6, [r0, #28]
 8004e58:	4605      	mov	r5, r0
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	b976      	cbnz	r6, 8004e7c <_Bfree+0x28>
 8004e5e:	2010      	movs	r0, #16
 8004e60:	f7ff ff02 	bl	8004c68 <malloc>
 8004e64:	4602      	mov	r2, r0
 8004e66:	61e8      	str	r0, [r5, #28]
 8004e68:	b920      	cbnz	r0, 8004e74 <_Bfree+0x20>
 8004e6a:	218f      	movs	r1, #143	@ 0x8f
 8004e6c:	4b08      	ldr	r3, [pc, #32]	@ (8004e90 <_Bfree+0x3c>)
 8004e6e:	4809      	ldr	r0, [pc, #36]	@ (8004e94 <_Bfree+0x40>)
 8004e70:	f000 fdb4 	bl	80059dc <__assert_func>
 8004e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e78:	6006      	str	r6, [r0, #0]
 8004e7a:	60c6      	str	r6, [r0, #12]
 8004e7c:	b13c      	cbz	r4, 8004e8e <_Bfree+0x3a>
 8004e7e:	69eb      	ldr	r3, [r5, #28]
 8004e80:	6862      	ldr	r2, [r4, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e88:	6021      	str	r1, [r4, #0]
 8004e8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e8e:	bd70      	pop	{r4, r5, r6, pc}
 8004e90:	08005d4f 	.word	0x08005d4f
 8004e94:	08005dcf 	.word	0x08005dcf

08004e98 <__multadd>:
 8004e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	461e      	mov	r6, r3
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	690d      	ldr	r5, [r1, #16]
 8004ea6:	f101 0c14 	add.w	ip, r1, #20
 8004eaa:	f8dc 3000 	ldr.w	r3, [ip]
 8004eae:	3001      	adds	r0, #1
 8004eb0:	b299      	uxth	r1, r3
 8004eb2:	fb02 6101 	mla	r1, r2, r1, r6
 8004eb6:	0c1e      	lsrs	r6, r3, #16
 8004eb8:	0c0b      	lsrs	r3, r1, #16
 8004eba:	fb02 3306 	mla	r3, r2, r6, r3
 8004ebe:	b289      	uxth	r1, r1
 8004ec0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004ec4:	4285      	cmp	r5, r0
 8004ec6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004eca:	f84c 1b04 	str.w	r1, [ip], #4
 8004ece:	dcec      	bgt.n	8004eaa <__multadd+0x12>
 8004ed0:	b30e      	cbz	r6, 8004f16 <__multadd+0x7e>
 8004ed2:	68a3      	ldr	r3, [r4, #8]
 8004ed4:	42ab      	cmp	r3, r5
 8004ed6:	dc19      	bgt.n	8004f0c <__multadd+0x74>
 8004ed8:	6861      	ldr	r1, [r4, #4]
 8004eda:	4638      	mov	r0, r7
 8004edc:	3101      	adds	r1, #1
 8004ede:	f7ff ff79 	bl	8004dd4 <_Balloc>
 8004ee2:	4680      	mov	r8, r0
 8004ee4:	b928      	cbnz	r0, 8004ef2 <__multadd+0x5a>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	21ba      	movs	r1, #186	@ 0xba
 8004eea:	4b0c      	ldr	r3, [pc, #48]	@ (8004f1c <__multadd+0x84>)
 8004eec:	480c      	ldr	r0, [pc, #48]	@ (8004f20 <__multadd+0x88>)
 8004eee:	f000 fd75 	bl	80059dc <__assert_func>
 8004ef2:	6922      	ldr	r2, [r4, #16]
 8004ef4:	f104 010c 	add.w	r1, r4, #12
 8004ef8:	3202      	adds	r2, #2
 8004efa:	0092      	lsls	r2, r2, #2
 8004efc:	300c      	adds	r0, #12
 8004efe:	f000 fd5f 	bl	80059c0 <memcpy>
 8004f02:	4621      	mov	r1, r4
 8004f04:	4638      	mov	r0, r7
 8004f06:	f7ff ffa5 	bl	8004e54 <_Bfree>
 8004f0a:	4644      	mov	r4, r8
 8004f0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f10:	3501      	adds	r5, #1
 8004f12:	615e      	str	r6, [r3, #20]
 8004f14:	6125      	str	r5, [r4, #16]
 8004f16:	4620      	mov	r0, r4
 8004f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f1c:	08005dbe 	.word	0x08005dbe
 8004f20:	08005dcf 	.word	0x08005dcf

08004f24 <__hi0bits>:
 8004f24:	4603      	mov	r3, r0
 8004f26:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004f2a:	bf3a      	itte	cc
 8004f2c:	0403      	lslcc	r3, r0, #16
 8004f2e:	2010      	movcc	r0, #16
 8004f30:	2000      	movcs	r0, #0
 8004f32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f36:	bf3c      	itt	cc
 8004f38:	021b      	lslcc	r3, r3, #8
 8004f3a:	3008      	addcc	r0, #8
 8004f3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f40:	bf3c      	itt	cc
 8004f42:	011b      	lslcc	r3, r3, #4
 8004f44:	3004      	addcc	r0, #4
 8004f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f4a:	bf3c      	itt	cc
 8004f4c:	009b      	lslcc	r3, r3, #2
 8004f4e:	3002      	addcc	r0, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	db05      	blt.n	8004f60 <__hi0bits+0x3c>
 8004f54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004f58:	f100 0001 	add.w	r0, r0, #1
 8004f5c:	bf08      	it	eq
 8004f5e:	2020      	moveq	r0, #32
 8004f60:	4770      	bx	lr

08004f62 <__lo0bits>:
 8004f62:	6803      	ldr	r3, [r0, #0]
 8004f64:	4602      	mov	r2, r0
 8004f66:	f013 0007 	ands.w	r0, r3, #7
 8004f6a:	d00b      	beq.n	8004f84 <__lo0bits+0x22>
 8004f6c:	07d9      	lsls	r1, r3, #31
 8004f6e:	d421      	bmi.n	8004fb4 <__lo0bits+0x52>
 8004f70:	0798      	lsls	r0, r3, #30
 8004f72:	bf49      	itett	mi
 8004f74:	085b      	lsrmi	r3, r3, #1
 8004f76:	089b      	lsrpl	r3, r3, #2
 8004f78:	2001      	movmi	r0, #1
 8004f7a:	6013      	strmi	r3, [r2, #0]
 8004f7c:	bf5c      	itt	pl
 8004f7e:	2002      	movpl	r0, #2
 8004f80:	6013      	strpl	r3, [r2, #0]
 8004f82:	4770      	bx	lr
 8004f84:	b299      	uxth	r1, r3
 8004f86:	b909      	cbnz	r1, 8004f8c <__lo0bits+0x2a>
 8004f88:	2010      	movs	r0, #16
 8004f8a:	0c1b      	lsrs	r3, r3, #16
 8004f8c:	b2d9      	uxtb	r1, r3
 8004f8e:	b909      	cbnz	r1, 8004f94 <__lo0bits+0x32>
 8004f90:	3008      	adds	r0, #8
 8004f92:	0a1b      	lsrs	r3, r3, #8
 8004f94:	0719      	lsls	r1, r3, #28
 8004f96:	bf04      	itt	eq
 8004f98:	091b      	lsreq	r3, r3, #4
 8004f9a:	3004      	addeq	r0, #4
 8004f9c:	0799      	lsls	r1, r3, #30
 8004f9e:	bf04      	itt	eq
 8004fa0:	089b      	lsreq	r3, r3, #2
 8004fa2:	3002      	addeq	r0, #2
 8004fa4:	07d9      	lsls	r1, r3, #31
 8004fa6:	d403      	bmi.n	8004fb0 <__lo0bits+0x4e>
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	f100 0001 	add.w	r0, r0, #1
 8004fae:	d003      	beq.n	8004fb8 <__lo0bits+0x56>
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	4770      	bx	lr
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	4770      	bx	lr
 8004fb8:	2020      	movs	r0, #32
 8004fba:	4770      	bx	lr

08004fbc <__i2b>:
 8004fbc:	b510      	push	{r4, lr}
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	f7ff ff07 	bl	8004dd4 <_Balloc>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	b928      	cbnz	r0, 8004fd6 <__i2b+0x1a>
 8004fca:	f240 1145 	movw	r1, #325	@ 0x145
 8004fce:	4b04      	ldr	r3, [pc, #16]	@ (8004fe0 <__i2b+0x24>)
 8004fd0:	4804      	ldr	r0, [pc, #16]	@ (8004fe4 <__i2b+0x28>)
 8004fd2:	f000 fd03 	bl	80059dc <__assert_func>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	6144      	str	r4, [r0, #20]
 8004fda:	6103      	str	r3, [r0, #16]
 8004fdc:	bd10      	pop	{r4, pc}
 8004fde:	bf00      	nop
 8004fe0:	08005dbe 	.word	0x08005dbe
 8004fe4:	08005dcf 	.word	0x08005dcf

08004fe8 <__multiply>:
 8004fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fec:	4617      	mov	r7, r2
 8004fee:	690a      	ldr	r2, [r1, #16]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4689      	mov	r9, r1
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	bfa2      	ittt	ge
 8004ff8:	463b      	movge	r3, r7
 8004ffa:	460f      	movge	r7, r1
 8004ffc:	4699      	movge	r9, r3
 8004ffe:	693d      	ldr	r5, [r7, #16]
 8005000:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	eb05 060a 	add.w	r6, r5, sl
 800500c:	42b3      	cmp	r3, r6
 800500e:	b085      	sub	sp, #20
 8005010:	bfb8      	it	lt
 8005012:	3101      	addlt	r1, #1
 8005014:	f7ff fede 	bl	8004dd4 <_Balloc>
 8005018:	b930      	cbnz	r0, 8005028 <__multiply+0x40>
 800501a:	4602      	mov	r2, r0
 800501c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005020:	4b40      	ldr	r3, [pc, #256]	@ (8005124 <__multiply+0x13c>)
 8005022:	4841      	ldr	r0, [pc, #260]	@ (8005128 <__multiply+0x140>)
 8005024:	f000 fcda 	bl	80059dc <__assert_func>
 8005028:	f100 0414 	add.w	r4, r0, #20
 800502c:	4623      	mov	r3, r4
 800502e:	2200      	movs	r2, #0
 8005030:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005034:	4573      	cmp	r3, lr
 8005036:	d320      	bcc.n	800507a <__multiply+0x92>
 8005038:	f107 0814 	add.w	r8, r7, #20
 800503c:	f109 0114 	add.w	r1, r9, #20
 8005040:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005044:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005048:	9302      	str	r3, [sp, #8]
 800504a:	1beb      	subs	r3, r5, r7
 800504c:	3b15      	subs	r3, #21
 800504e:	f023 0303 	bic.w	r3, r3, #3
 8005052:	3304      	adds	r3, #4
 8005054:	3715      	adds	r7, #21
 8005056:	42bd      	cmp	r5, r7
 8005058:	bf38      	it	cc
 800505a:	2304      	movcc	r3, #4
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	9b02      	ldr	r3, [sp, #8]
 8005060:	9103      	str	r1, [sp, #12]
 8005062:	428b      	cmp	r3, r1
 8005064:	d80c      	bhi.n	8005080 <__multiply+0x98>
 8005066:	2e00      	cmp	r6, #0
 8005068:	dd03      	ble.n	8005072 <__multiply+0x8a>
 800506a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800506e:	2b00      	cmp	r3, #0
 8005070:	d055      	beq.n	800511e <__multiply+0x136>
 8005072:	6106      	str	r6, [r0, #16]
 8005074:	b005      	add	sp, #20
 8005076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800507a:	f843 2b04 	str.w	r2, [r3], #4
 800507e:	e7d9      	b.n	8005034 <__multiply+0x4c>
 8005080:	f8b1 a000 	ldrh.w	sl, [r1]
 8005084:	f1ba 0f00 	cmp.w	sl, #0
 8005088:	d01f      	beq.n	80050ca <__multiply+0xe2>
 800508a:	46c4      	mov	ip, r8
 800508c:	46a1      	mov	r9, r4
 800508e:	2700      	movs	r7, #0
 8005090:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005094:	f8d9 3000 	ldr.w	r3, [r9]
 8005098:	fa1f fb82 	uxth.w	fp, r2
 800509c:	b29b      	uxth	r3, r3
 800509e:	fb0a 330b 	mla	r3, sl, fp, r3
 80050a2:	443b      	add	r3, r7
 80050a4:	f8d9 7000 	ldr.w	r7, [r9]
 80050a8:	0c12      	lsrs	r2, r2, #16
 80050aa:	0c3f      	lsrs	r7, r7, #16
 80050ac:	fb0a 7202 	mla	r2, sl, r2, r7
 80050b0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050ba:	4565      	cmp	r5, ip
 80050bc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80050c0:	f849 3b04 	str.w	r3, [r9], #4
 80050c4:	d8e4      	bhi.n	8005090 <__multiply+0xa8>
 80050c6:	9b01      	ldr	r3, [sp, #4]
 80050c8:	50e7      	str	r7, [r4, r3]
 80050ca:	9b03      	ldr	r3, [sp, #12]
 80050cc:	3104      	adds	r1, #4
 80050ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80050d2:	f1b9 0f00 	cmp.w	r9, #0
 80050d6:	d020      	beq.n	800511a <__multiply+0x132>
 80050d8:	4647      	mov	r7, r8
 80050da:	46a4      	mov	ip, r4
 80050dc:	f04f 0a00 	mov.w	sl, #0
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	f8b7 b000 	ldrh.w	fp, [r7]
 80050e6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	fb09 220b 	mla	r2, r9, fp, r2
 80050f0:	4452      	add	r2, sl
 80050f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050f6:	f84c 3b04 	str.w	r3, [ip], #4
 80050fa:	f857 3b04 	ldr.w	r3, [r7], #4
 80050fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005102:	f8bc 3000 	ldrh.w	r3, [ip]
 8005106:	42bd      	cmp	r5, r7
 8005108:	fb09 330a 	mla	r3, r9, sl, r3
 800510c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005110:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005114:	d8e5      	bhi.n	80050e2 <__multiply+0xfa>
 8005116:	9a01      	ldr	r2, [sp, #4]
 8005118:	50a3      	str	r3, [r4, r2]
 800511a:	3404      	adds	r4, #4
 800511c:	e79f      	b.n	800505e <__multiply+0x76>
 800511e:	3e01      	subs	r6, #1
 8005120:	e7a1      	b.n	8005066 <__multiply+0x7e>
 8005122:	bf00      	nop
 8005124:	08005dbe 	.word	0x08005dbe
 8005128:	08005dcf 	.word	0x08005dcf

0800512c <__pow5mult>:
 800512c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005130:	4615      	mov	r5, r2
 8005132:	f012 0203 	ands.w	r2, r2, #3
 8005136:	4607      	mov	r7, r0
 8005138:	460e      	mov	r6, r1
 800513a:	d007      	beq.n	800514c <__pow5mult+0x20>
 800513c:	4c25      	ldr	r4, [pc, #148]	@ (80051d4 <__pow5mult+0xa8>)
 800513e:	3a01      	subs	r2, #1
 8005140:	2300      	movs	r3, #0
 8005142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005146:	f7ff fea7 	bl	8004e98 <__multadd>
 800514a:	4606      	mov	r6, r0
 800514c:	10ad      	asrs	r5, r5, #2
 800514e:	d03d      	beq.n	80051cc <__pow5mult+0xa0>
 8005150:	69fc      	ldr	r4, [r7, #28]
 8005152:	b97c      	cbnz	r4, 8005174 <__pow5mult+0x48>
 8005154:	2010      	movs	r0, #16
 8005156:	f7ff fd87 	bl	8004c68 <malloc>
 800515a:	4602      	mov	r2, r0
 800515c:	61f8      	str	r0, [r7, #28]
 800515e:	b928      	cbnz	r0, 800516c <__pow5mult+0x40>
 8005160:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005164:	4b1c      	ldr	r3, [pc, #112]	@ (80051d8 <__pow5mult+0xac>)
 8005166:	481d      	ldr	r0, [pc, #116]	@ (80051dc <__pow5mult+0xb0>)
 8005168:	f000 fc38 	bl	80059dc <__assert_func>
 800516c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005170:	6004      	str	r4, [r0, #0]
 8005172:	60c4      	str	r4, [r0, #12]
 8005174:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800517c:	b94c      	cbnz	r4, 8005192 <__pow5mult+0x66>
 800517e:	f240 2171 	movw	r1, #625	@ 0x271
 8005182:	4638      	mov	r0, r7
 8005184:	f7ff ff1a 	bl	8004fbc <__i2b>
 8005188:	2300      	movs	r3, #0
 800518a:	4604      	mov	r4, r0
 800518c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005190:	6003      	str	r3, [r0, #0]
 8005192:	f04f 0900 	mov.w	r9, #0
 8005196:	07eb      	lsls	r3, r5, #31
 8005198:	d50a      	bpl.n	80051b0 <__pow5mult+0x84>
 800519a:	4631      	mov	r1, r6
 800519c:	4622      	mov	r2, r4
 800519e:	4638      	mov	r0, r7
 80051a0:	f7ff ff22 	bl	8004fe8 <__multiply>
 80051a4:	4680      	mov	r8, r0
 80051a6:	4631      	mov	r1, r6
 80051a8:	4638      	mov	r0, r7
 80051aa:	f7ff fe53 	bl	8004e54 <_Bfree>
 80051ae:	4646      	mov	r6, r8
 80051b0:	106d      	asrs	r5, r5, #1
 80051b2:	d00b      	beq.n	80051cc <__pow5mult+0xa0>
 80051b4:	6820      	ldr	r0, [r4, #0]
 80051b6:	b938      	cbnz	r0, 80051c8 <__pow5mult+0x9c>
 80051b8:	4622      	mov	r2, r4
 80051ba:	4621      	mov	r1, r4
 80051bc:	4638      	mov	r0, r7
 80051be:	f7ff ff13 	bl	8004fe8 <__multiply>
 80051c2:	6020      	str	r0, [r4, #0]
 80051c4:	f8c0 9000 	str.w	r9, [r0]
 80051c8:	4604      	mov	r4, r0
 80051ca:	e7e4      	b.n	8005196 <__pow5mult+0x6a>
 80051cc:	4630      	mov	r0, r6
 80051ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051d2:	bf00      	nop
 80051d4:	08005e80 	.word	0x08005e80
 80051d8:	08005d4f 	.word	0x08005d4f
 80051dc:	08005dcf 	.word	0x08005dcf

080051e0 <__lshift>:
 80051e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e4:	460c      	mov	r4, r1
 80051e6:	4607      	mov	r7, r0
 80051e8:	4691      	mov	r9, r2
 80051ea:	6923      	ldr	r3, [r4, #16]
 80051ec:	6849      	ldr	r1, [r1, #4]
 80051ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80051f2:	68a3      	ldr	r3, [r4, #8]
 80051f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051f8:	f108 0601 	add.w	r6, r8, #1
 80051fc:	42b3      	cmp	r3, r6
 80051fe:	db0b      	blt.n	8005218 <__lshift+0x38>
 8005200:	4638      	mov	r0, r7
 8005202:	f7ff fde7 	bl	8004dd4 <_Balloc>
 8005206:	4605      	mov	r5, r0
 8005208:	b948      	cbnz	r0, 800521e <__lshift+0x3e>
 800520a:	4602      	mov	r2, r0
 800520c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005210:	4b27      	ldr	r3, [pc, #156]	@ (80052b0 <__lshift+0xd0>)
 8005212:	4828      	ldr	r0, [pc, #160]	@ (80052b4 <__lshift+0xd4>)
 8005214:	f000 fbe2 	bl	80059dc <__assert_func>
 8005218:	3101      	adds	r1, #1
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	e7ee      	b.n	80051fc <__lshift+0x1c>
 800521e:	2300      	movs	r3, #0
 8005220:	f100 0114 	add.w	r1, r0, #20
 8005224:	f100 0210 	add.w	r2, r0, #16
 8005228:	4618      	mov	r0, r3
 800522a:	4553      	cmp	r3, sl
 800522c:	db33      	blt.n	8005296 <__lshift+0xb6>
 800522e:	6920      	ldr	r0, [r4, #16]
 8005230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005234:	f104 0314 	add.w	r3, r4, #20
 8005238:	f019 091f 	ands.w	r9, r9, #31
 800523c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005240:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005244:	d02b      	beq.n	800529e <__lshift+0xbe>
 8005246:	468a      	mov	sl, r1
 8005248:	2200      	movs	r2, #0
 800524a:	f1c9 0e20 	rsb	lr, r9, #32
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	fa00 f009 	lsl.w	r0, r0, r9
 8005254:	4310      	orrs	r0, r2
 8005256:	f84a 0b04 	str.w	r0, [sl], #4
 800525a:	f853 2b04 	ldr.w	r2, [r3], #4
 800525e:	459c      	cmp	ip, r3
 8005260:	fa22 f20e 	lsr.w	r2, r2, lr
 8005264:	d8f3      	bhi.n	800524e <__lshift+0x6e>
 8005266:	ebac 0304 	sub.w	r3, ip, r4
 800526a:	3b15      	subs	r3, #21
 800526c:	f023 0303 	bic.w	r3, r3, #3
 8005270:	3304      	adds	r3, #4
 8005272:	f104 0015 	add.w	r0, r4, #21
 8005276:	4560      	cmp	r0, ip
 8005278:	bf88      	it	hi
 800527a:	2304      	movhi	r3, #4
 800527c:	50ca      	str	r2, [r1, r3]
 800527e:	b10a      	cbz	r2, 8005284 <__lshift+0xa4>
 8005280:	f108 0602 	add.w	r6, r8, #2
 8005284:	3e01      	subs	r6, #1
 8005286:	4638      	mov	r0, r7
 8005288:	4621      	mov	r1, r4
 800528a:	612e      	str	r6, [r5, #16]
 800528c:	f7ff fde2 	bl	8004e54 <_Bfree>
 8005290:	4628      	mov	r0, r5
 8005292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005296:	f842 0f04 	str.w	r0, [r2, #4]!
 800529a:	3301      	adds	r3, #1
 800529c:	e7c5      	b.n	800522a <__lshift+0x4a>
 800529e:	3904      	subs	r1, #4
 80052a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80052a4:	459c      	cmp	ip, r3
 80052a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80052aa:	d8f9      	bhi.n	80052a0 <__lshift+0xc0>
 80052ac:	e7ea      	b.n	8005284 <__lshift+0xa4>
 80052ae:	bf00      	nop
 80052b0:	08005dbe 	.word	0x08005dbe
 80052b4:	08005dcf 	.word	0x08005dcf

080052b8 <__mcmp>:
 80052b8:	4603      	mov	r3, r0
 80052ba:	690a      	ldr	r2, [r1, #16]
 80052bc:	6900      	ldr	r0, [r0, #16]
 80052be:	b530      	push	{r4, r5, lr}
 80052c0:	1a80      	subs	r0, r0, r2
 80052c2:	d10e      	bne.n	80052e2 <__mcmp+0x2a>
 80052c4:	3314      	adds	r3, #20
 80052c6:	3114      	adds	r1, #20
 80052c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80052cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80052d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80052d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80052d8:	4295      	cmp	r5, r2
 80052da:	d003      	beq.n	80052e4 <__mcmp+0x2c>
 80052dc:	d205      	bcs.n	80052ea <__mcmp+0x32>
 80052de:	f04f 30ff 	mov.w	r0, #4294967295
 80052e2:	bd30      	pop	{r4, r5, pc}
 80052e4:	42a3      	cmp	r3, r4
 80052e6:	d3f3      	bcc.n	80052d0 <__mcmp+0x18>
 80052e8:	e7fb      	b.n	80052e2 <__mcmp+0x2a>
 80052ea:	2001      	movs	r0, #1
 80052ec:	e7f9      	b.n	80052e2 <__mcmp+0x2a>
	...

080052f0 <__mdiff>:
 80052f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f4:	4689      	mov	r9, r1
 80052f6:	4606      	mov	r6, r0
 80052f8:	4611      	mov	r1, r2
 80052fa:	4648      	mov	r0, r9
 80052fc:	4614      	mov	r4, r2
 80052fe:	f7ff ffdb 	bl	80052b8 <__mcmp>
 8005302:	1e05      	subs	r5, r0, #0
 8005304:	d112      	bne.n	800532c <__mdiff+0x3c>
 8005306:	4629      	mov	r1, r5
 8005308:	4630      	mov	r0, r6
 800530a:	f7ff fd63 	bl	8004dd4 <_Balloc>
 800530e:	4602      	mov	r2, r0
 8005310:	b928      	cbnz	r0, 800531e <__mdiff+0x2e>
 8005312:	f240 2137 	movw	r1, #567	@ 0x237
 8005316:	4b3e      	ldr	r3, [pc, #248]	@ (8005410 <__mdiff+0x120>)
 8005318:	483e      	ldr	r0, [pc, #248]	@ (8005414 <__mdiff+0x124>)
 800531a:	f000 fb5f 	bl	80059dc <__assert_func>
 800531e:	2301      	movs	r3, #1
 8005320:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005324:	4610      	mov	r0, r2
 8005326:	b003      	add	sp, #12
 8005328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532c:	bfbc      	itt	lt
 800532e:	464b      	movlt	r3, r9
 8005330:	46a1      	movlt	r9, r4
 8005332:	4630      	mov	r0, r6
 8005334:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005338:	bfba      	itte	lt
 800533a:	461c      	movlt	r4, r3
 800533c:	2501      	movlt	r5, #1
 800533e:	2500      	movge	r5, #0
 8005340:	f7ff fd48 	bl	8004dd4 <_Balloc>
 8005344:	4602      	mov	r2, r0
 8005346:	b918      	cbnz	r0, 8005350 <__mdiff+0x60>
 8005348:	f240 2145 	movw	r1, #581	@ 0x245
 800534c:	4b30      	ldr	r3, [pc, #192]	@ (8005410 <__mdiff+0x120>)
 800534e:	e7e3      	b.n	8005318 <__mdiff+0x28>
 8005350:	f100 0b14 	add.w	fp, r0, #20
 8005354:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005358:	f109 0310 	add.w	r3, r9, #16
 800535c:	60c5      	str	r5, [r0, #12]
 800535e:	f04f 0c00 	mov.w	ip, #0
 8005362:	f109 0514 	add.w	r5, r9, #20
 8005366:	46d9      	mov	r9, fp
 8005368:	6926      	ldr	r6, [r4, #16]
 800536a:	f104 0e14 	add.w	lr, r4, #20
 800536e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005372:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	9b01      	ldr	r3, [sp, #4]
 800537a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800537e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005382:	b281      	uxth	r1, r0
 8005384:	9301      	str	r3, [sp, #4]
 8005386:	fa1f f38a 	uxth.w	r3, sl
 800538a:	1a5b      	subs	r3, r3, r1
 800538c:	0c00      	lsrs	r0, r0, #16
 800538e:	4463      	add	r3, ip
 8005390:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005394:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005398:	b29b      	uxth	r3, r3
 800539a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800539e:	4576      	cmp	r6, lr
 80053a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80053a4:	f849 3b04 	str.w	r3, [r9], #4
 80053a8:	d8e6      	bhi.n	8005378 <__mdiff+0x88>
 80053aa:	1b33      	subs	r3, r6, r4
 80053ac:	3b15      	subs	r3, #21
 80053ae:	f023 0303 	bic.w	r3, r3, #3
 80053b2:	3415      	adds	r4, #21
 80053b4:	3304      	adds	r3, #4
 80053b6:	42a6      	cmp	r6, r4
 80053b8:	bf38      	it	cc
 80053ba:	2304      	movcc	r3, #4
 80053bc:	441d      	add	r5, r3
 80053be:	445b      	add	r3, fp
 80053c0:	461e      	mov	r6, r3
 80053c2:	462c      	mov	r4, r5
 80053c4:	4544      	cmp	r4, r8
 80053c6:	d30e      	bcc.n	80053e6 <__mdiff+0xf6>
 80053c8:	f108 0103 	add.w	r1, r8, #3
 80053cc:	1b49      	subs	r1, r1, r5
 80053ce:	f021 0103 	bic.w	r1, r1, #3
 80053d2:	3d03      	subs	r5, #3
 80053d4:	45a8      	cmp	r8, r5
 80053d6:	bf38      	it	cc
 80053d8:	2100      	movcc	r1, #0
 80053da:	440b      	add	r3, r1
 80053dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80053e0:	b199      	cbz	r1, 800540a <__mdiff+0x11a>
 80053e2:	6117      	str	r7, [r2, #16]
 80053e4:	e79e      	b.n	8005324 <__mdiff+0x34>
 80053e6:	46e6      	mov	lr, ip
 80053e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80053ec:	fa1f fc81 	uxth.w	ip, r1
 80053f0:	44f4      	add	ip, lr
 80053f2:	0c08      	lsrs	r0, r1, #16
 80053f4:	4471      	add	r1, lr
 80053f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80053fa:	b289      	uxth	r1, r1
 80053fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005400:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005404:	f846 1b04 	str.w	r1, [r6], #4
 8005408:	e7dc      	b.n	80053c4 <__mdiff+0xd4>
 800540a:	3f01      	subs	r7, #1
 800540c:	e7e6      	b.n	80053dc <__mdiff+0xec>
 800540e:	bf00      	nop
 8005410:	08005dbe 	.word	0x08005dbe
 8005414:	08005dcf 	.word	0x08005dcf

08005418 <__d2b>:
 8005418:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800541c:	2101      	movs	r1, #1
 800541e:	4690      	mov	r8, r2
 8005420:	4699      	mov	r9, r3
 8005422:	9e08      	ldr	r6, [sp, #32]
 8005424:	f7ff fcd6 	bl	8004dd4 <_Balloc>
 8005428:	4604      	mov	r4, r0
 800542a:	b930      	cbnz	r0, 800543a <__d2b+0x22>
 800542c:	4602      	mov	r2, r0
 800542e:	f240 310f 	movw	r1, #783	@ 0x30f
 8005432:	4b23      	ldr	r3, [pc, #140]	@ (80054c0 <__d2b+0xa8>)
 8005434:	4823      	ldr	r0, [pc, #140]	@ (80054c4 <__d2b+0xac>)
 8005436:	f000 fad1 	bl	80059dc <__assert_func>
 800543a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800543e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005442:	b10d      	cbz	r5, 8005448 <__d2b+0x30>
 8005444:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	f1b8 0300 	subs.w	r3, r8, #0
 800544e:	d024      	beq.n	800549a <__d2b+0x82>
 8005450:	4668      	mov	r0, sp
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	f7ff fd85 	bl	8004f62 <__lo0bits>
 8005458:	e9dd 1200 	ldrd	r1, r2, [sp]
 800545c:	b1d8      	cbz	r0, 8005496 <__d2b+0x7e>
 800545e:	f1c0 0320 	rsb	r3, r0, #32
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	430b      	orrs	r3, r1
 8005468:	40c2      	lsrs	r2, r0
 800546a:	6163      	str	r3, [r4, #20]
 800546c:	9201      	str	r2, [sp, #4]
 800546e:	9b01      	ldr	r3, [sp, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	bf0c      	ite	eq
 8005474:	2201      	moveq	r2, #1
 8005476:	2202      	movne	r2, #2
 8005478:	61a3      	str	r3, [r4, #24]
 800547a:	6122      	str	r2, [r4, #16]
 800547c:	b1ad      	cbz	r5, 80054aa <__d2b+0x92>
 800547e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005482:	4405      	add	r5, r0
 8005484:	6035      	str	r5, [r6, #0]
 8005486:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800548a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800548c:	6018      	str	r0, [r3, #0]
 800548e:	4620      	mov	r0, r4
 8005490:	b002      	add	sp, #8
 8005492:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005496:	6161      	str	r1, [r4, #20]
 8005498:	e7e9      	b.n	800546e <__d2b+0x56>
 800549a:	a801      	add	r0, sp, #4
 800549c:	f7ff fd61 	bl	8004f62 <__lo0bits>
 80054a0:	9b01      	ldr	r3, [sp, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	6163      	str	r3, [r4, #20]
 80054a6:	3020      	adds	r0, #32
 80054a8:	e7e7      	b.n	800547a <__d2b+0x62>
 80054aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80054ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80054b2:	6030      	str	r0, [r6, #0]
 80054b4:	6918      	ldr	r0, [r3, #16]
 80054b6:	f7ff fd35 	bl	8004f24 <__hi0bits>
 80054ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80054be:	e7e4      	b.n	800548a <__d2b+0x72>
 80054c0:	08005dbe 	.word	0x08005dbe
 80054c4:	08005dcf 	.word	0x08005dcf

080054c8 <__sfputc_r>:
 80054c8:	6893      	ldr	r3, [r2, #8]
 80054ca:	b410      	push	{r4}
 80054cc:	3b01      	subs	r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	6093      	str	r3, [r2, #8]
 80054d2:	da07      	bge.n	80054e4 <__sfputc_r+0x1c>
 80054d4:	6994      	ldr	r4, [r2, #24]
 80054d6:	42a3      	cmp	r3, r4
 80054d8:	db01      	blt.n	80054de <__sfputc_r+0x16>
 80054da:	290a      	cmp	r1, #10
 80054dc:	d102      	bne.n	80054e4 <__sfputc_r+0x1c>
 80054de:	bc10      	pop	{r4}
 80054e0:	f7fe bbfb 	b.w	8003cda <__swbuf_r>
 80054e4:	6813      	ldr	r3, [r2, #0]
 80054e6:	1c58      	adds	r0, r3, #1
 80054e8:	6010      	str	r0, [r2, #0]
 80054ea:	7019      	strb	r1, [r3, #0]
 80054ec:	4608      	mov	r0, r1
 80054ee:	bc10      	pop	{r4}
 80054f0:	4770      	bx	lr

080054f2 <__sfputs_r>:
 80054f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f4:	4606      	mov	r6, r0
 80054f6:	460f      	mov	r7, r1
 80054f8:	4614      	mov	r4, r2
 80054fa:	18d5      	adds	r5, r2, r3
 80054fc:	42ac      	cmp	r4, r5
 80054fe:	d101      	bne.n	8005504 <__sfputs_r+0x12>
 8005500:	2000      	movs	r0, #0
 8005502:	e007      	b.n	8005514 <__sfputs_r+0x22>
 8005504:	463a      	mov	r2, r7
 8005506:	4630      	mov	r0, r6
 8005508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800550c:	f7ff ffdc 	bl	80054c8 <__sfputc_r>
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	d1f3      	bne.n	80054fc <__sfputs_r+0xa>
 8005514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005518 <_vfiprintf_r>:
 8005518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551c:	460d      	mov	r5, r1
 800551e:	4614      	mov	r4, r2
 8005520:	4698      	mov	r8, r3
 8005522:	4606      	mov	r6, r0
 8005524:	b09d      	sub	sp, #116	@ 0x74
 8005526:	b118      	cbz	r0, 8005530 <_vfiprintf_r+0x18>
 8005528:	6a03      	ldr	r3, [r0, #32]
 800552a:	b90b      	cbnz	r3, 8005530 <_vfiprintf_r+0x18>
 800552c:	f7fe faec 	bl	8003b08 <__sinit>
 8005530:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005532:	07d9      	lsls	r1, r3, #31
 8005534:	d405      	bmi.n	8005542 <_vfiprintf_r+0x2a>
 8005536:	89ab      	ldrh	r3, [r5, #12]
 8005538:	059a      	lsls	r2, r3, #22
 800553a:	d402      	bmi.n	8005542 <_vfiprintf_r+0x2a>
 800553c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800553e:	f7fe fcde 	bl	8003efe <__retarget_lock_acquire_recursive>
 8005542:	89ab      	ldrh	r3, [r5, #12]
 8005544:	071b      	lsls	r3, r3, #28
 8005546:	d501      	bpl.n	800554c <_vfiprintf_r+0x34>
 8005548:	692b      	ldr	r3, [r5, #16]
 800554a:	b99b      	cbnz	r3, 8005574 <_vfiprintf_r+0x5c>
 800554c:	4629      	mov	r1, r5
 800554e:	4630      	mov	r0, r6
 8005550:	f7fe fc02 	bl	8003d58 <__swsetup_r>
 8005554:	b170      	cbz	r0, 8005574 <_vfiprintf_r+0x5c>
 8005556:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005558:	07dc      	lsls	r4, r3, #31
 800555a:	d504      	bpl.n	8005566 <_vfiprintf_r+0x4e>
 800555c:	f04f 30ff 	mov.w	r0, #4294967295
 8005560:	b01d      	add	sp, #116	@ 0x74
 8005562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005566:	89ab      	ldrh	r3, [r5, #12]
 8005568:	0598      	lsls	r0, r3, #22
 800556a:	d4f7      	bmi.n	800555c <_vfiprintf_r+0x44>
 800556c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800556e:	f7fe fcc7 	bl	8003f00 <__retarget_lock_release_recursive>
 8005572:	e7f3      	b.n	800555c <_vfiprintf_r+0x44>
 8005574:	2300      	movs	r3, #0
 8005576:	9309      	str	r3, [sp, #36]	@ 0x24
 8005578:	2320      	movs	r3, #32
 800557a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800557e:	2330      	movs	r3, #48	@ 0x30
 8005580:	f04f 0901 	mov.w	r9, #1
 8005584:	f8cd 800c 	str.w	r8, [sp, #12]
 8005588:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005734 <_vfiprintf_r+0x21c>
 800558c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005590:	4623      	mov	r3, r4
 8005592:	469a      	mov	sl, r3
 8005594:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005598:	b10a      	cbz	r2, 800559e <_vfiprintf_r+0x86>
 800559a:	2a25      	cmp	r2, #37	@ 0x25
 800559c:	d1f9      	bne.n	8005592 <_vfiprintf_r+0x7a>
 800559e:	ebba 0b04 	subs.w	fp, sl, r4
 80055a2:	d00b      	beq.n	80055bc <_vfiprintf_r+0xa4>
 80055a4:	465b      	mov	r3, fp
 80055a6:	4622      	mov	r2, r4
 80055a8:	4629      	mov	r1, r5
 80055aa:	4630      	mov	r0, r6
 80055ac:	f7ff ffa1 	bl	80054f2 <__sfputs_r>
 80055b0:	3001      	adds	r0, #1
 80055b2:	f000 80a7 	beq.w	8005704 <_vfiprintf_r+0x1ec>
 80055b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055b8:	445a      	add	r2, fp
 80055ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80055bc:	f89a 3000 	ldrb.w	r3, [sl]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 809f 	beq.w	8005704 <_vfiprintf_r+0x1ec>
 80055c6:	2300      	movs	r3, #0
 80055c8:	f04f 32ff 	mov.w	r2, #4294967295
 80055cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055d0:	f10a 0a01 	add.w	sl, sl, #1
 80055d4:	9304      	str	r3, [sp, #16]
 80055d6:	9307      	str	r3, [sp, #28]
 80055d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80055de:	4654      	mov	r4, sl
 80055e0:	2205      	movs	r2, #5
 80055e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055e6:	4853      	ldr	r0, [pc, #332]	@ (8005734 <_vfiprintf_r+0x21c>)
 80055e8:	f7fe fc8b 	bl	8003f02 <memchr>
 80055ec:	9a04      	ldr	r2, [sp, #16]
 80055ee:	b9d8      	cbnz	r0, 8005628 <_vfiprintf_r+0x110>
 80055f0:	06d1      	lsls	r1, r2, #27
 80055f2:	bf44      	itt	mi
 80055f4:	2320      	movmi	r3, #32
 80055f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055fa:	0713      	lsls	r3, r2, #28
 80055fc:	bf44      	itt	mi
 80055fe:	232b      	movmi	r3, #43	@ 0x2b
 8005600:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005604:	f89a 3000 	ldrb.w	r3, [sl]
 8005608:	2b2a      	cmp	r3, #42	@ 0x2a
 800560a:	d015      	beq.n	8005638 <_vfiprintf_r+0x120>
 800560c:	4654      	mov	r4, sl
 800560e:	2000      	movs	r0, #0
 8005610:	f04f 0c0a 	mov.w	ip, #10
 8005614:	9a07      	ldr	r2, [sp, #28]
 8005616:	4621      	mov	r1, r4
 8005618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800561c:	3b30      	subs	r3, #48	@ 0x30
 800561e:	2b09      	cmp	r3, #9
 8005620:	d94b      	bls.n	80056ba <_vfiprintf_r+0x1a2>
 8005622:	b1b0      	cbz	r0, 8005652 <_vfiprintf_r+0x13a>
 8005624:	9207      	str	r2, [sp, #28]
 8005626:	e014      	b.n	8005652 <_vfiprintf_r+0x13a>
 8005628:	eba0 0308 	sub.w	r3, r0, r8
 800562c:	fa09 f303 	lsl.w	r3, r9, r3
 8005630:	4313      	orrs	r3, r2
 8005632:	46a2      	mov	sl, r4
 8005634:	9304      	str	r3, [sp, #16]
 8005636:	e7d2      	b.n	80055de <_vfiprintf_r+0xc6>
 8005638:	9b03      	ldr	r3, [sp, #12]
 800563a:	1d19      	adds	r1, r3, #4
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	9103      	str	r1, [sp, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	bfbb      	ittet	lt
 8005644:	425b      	neglt	r3, r3
 8005646:	f042 0202 	orrlt.w	r2, r2, #2
 800564a:	9307      	strge	r3, [sp, #28]
 800564c:	9307      	strlt	r3, [sp, #28]
 800564e:	bfb8      	it	lt
 8005650:	9204      	strlt	r2, [sp, #16]
 8005652:	7823      	ldrb	r3, [r4, #0]
 8005654:	2b2e      	cmp	r3, #46	@ 0x2e
 8005656:	d10a      	bne.n	800566e <_vfiprintf_r+0x156>
 8005658:	7863      	ldrb	r3, [r4, #1]
 800565a:	2b2a      	cmp	r3, #42	@ 0x2a
 800565c:	d132      	bne.n	80056c4 <_vfiprintf_r+0x1ac>
 800565e:	9b03      	ldr	r3, [sp, #12]
 8005660:	3402      	adds	r4, #2
 8005662:	1d1a      	adds	r2, r3, #4
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	9203      	str	r2, [sp, #12]
 8005668:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800566c:	9305      	str	r3, [sp, #20]
 800566e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005738 <_vfiprintf_r+0x220>
 8005672:	2203      	movs	r2, #3
 8005674:	4650      	mov	r0, sl
 8005676:	7821      	ldrb	r1, [r4, #0]
 8005678:	f7fe fc43 	bl	8003f02 <memchr>
 800567c:	b138      	cbz	r0, 800568e <_vfiprintf_r+0x176>
 800567e:	2240      	movs	r2, #64	@ 0x40
 8005680:	9b04      	ldr	r3, [sp, #16]
 8005682:	eba0 000a 	sub.w	r0, r0, sl
 8005686:	4082      	lsls	r2, r0
 8005688:	4313      	orrs	r3, r2
 800568a:	3401      	adds	r4, #1
 800568c:	9304      	str	r3, [sp, #16]
 800568e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005692:	2206      	movs	r2, #6
 8005694:	4829      	ldr	r0, [pc, #164]	@ (800573c <_vfiprintf_r+0x224>)
 8005696:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800569a:	f7fe fc32 	bl	8003f02 <memchr>
 800569e:	2800      	cmp	r0, #0
 80056a0:	d03f      	beq.n	8005722 <_vfiprintf_r+0x20a>
 80056a2:	4b27      	ldr	r3, [pc, #156]	@ (8005740 <_vfiprintf_r+0x228>)
 80056a4:	bb1b      	cbnz	r3, 80056ee <_vfiprintf_r+0x1d6>
 80056a6:	9b03      	ldr	r3, [sp, #12]
 80056a8:	3307      	adds	r3, #7
 80056aa:	f023 0307 	bic.w	r3, r3, #7
 80056ae:	3308      	adds	r3, #8
 80056b0:	9303      	str	r3, [sp, #12]
 80056b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056b4:	443b      	add	r3, r7
 80056b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80056b8:	e76a      	b.n	8005590 <_vfiprintf_r+0x78>
 80056ba:	460c      	mov	r4, r1
 80056bc:	2001      	movs	r0, #1
 80056be:	fb0c 3202 	mla	r2, ip, r2, r3
 80056c2:	e7a8      	b.n	8005616 <_vfiprintf_r+0xfe>
 80056c4:	2300      	movs	r3, #0
 80056c6:	f04f 0c0a 	mov.w	ip, #10
 80056ca:	4619      	mov	r1, r3
 80056cc:	3401      	adds	r4, #1
 80056ce:	9305      	str	r3, [sp, #20]
 80056d0:	4620      	mov	r0, r4
 80056d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056d6:	3a30      	subs	r2, #48	@ 0x30
 80056d8:	2a09      	cmp	r2, #9
 80056da:	d903      	bls.n	80056e4 <_vfiprintf_r+0x1cc>
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0c6      	beq.n	800566e <_vfiprintf_r+0x156>
 80056e0:	9105      	str	r1, [sp, #20]
 80056e2:	e7c4      	b.n	800566e <_vfiprintf_r+0x156>
 80056e4:	4604      	mov	r4, r0
 80056e6:	2301      	movs	r3, #1
 80056e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80056ec:	e7f0      	b.n	80056d0 <_vfiprintf_r+0x1b8>
 80056ee:	ab03      	add	r3, sp, #12
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	462a      	mov	r2, r5
 80056f4:	4630      	mov	r0, r6
 80056f6:	4b13      	ldr	r3, [pc, #76]	@ (8005744 <_vfiprintf_r+0x22c>)
 80056f8:	a904      	add	r1, sp, #16
 80056fa:	f7fd fdbd 	bl	8003278 <_printf_float>
 80056fe:	4607      	mov	r7, r0
 8005700:	1c78      	adds	r0, r7, #1
 8005702:	d1d6      	bne.n	80056b2 <_vfiprintf_r+0x19a>
 8005704:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005706:	07d9      	lsls	r1, r3, #31
 8005708:	d405      	bmi.n	8005716 <_vfiprintf_r+0x1fe>
 800570a:	89ab      	ldrh	r3, [r5, #12]
 800570c:	059a      	lsls	r2, r3, #22
 800570e:	d402      	bmi.n	8005716 <_vfiprintf_r+0x1fe>
 8005710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005712:	f7fe fbf5 	bl	8003f00 <__retarget_lock_release_recursive>
 8005716:	89ab      	ldrh	r3, [r5, #12]
 8005718:	065b      	lsls	r3, r3, #25
 800571a:	f53f af1f 	bmi.w	800555c <_vfiprintf_r+0x44>
 800571e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005720:	e71e      	b.n	8005560 <_vfiprintf_r+0x48>
 8005722:	ab03      	add	r3, sp, #12
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	462a      	mov	r2, r5
 8005728:	4630      	mov	r0, r6
 800572a:	4b06      	ldr	r3, [pc, #24]	@ (8005744 <_vfiprintf_r+0x22c>)
 800572c:	a904      	add	r1, sp, #16
 800572e:	f7fe f841 	bl	80037b4 <_printf_i>
 8005732:	e7e4      	b.n	80056fe <_vfiprintf_r+0x1e6>
 8005734:	08005e28 	.word	0x08005e28
 8005738:	08005e2e 	.word	0x08005e2e
 800573c:	08005e32 	.word	0x08005e32
 8005740:	08003279 	.word	0x08003279
 8005744:	080054f3 	.word	0x080054f3

08005748 <__sflush_r>:
 8005748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574e:	0716      	lsls	r6, r2, #28
 8005750:	4605      	mov	r5, r0
 8005752:	460c      	mov	r4, r1
 8005754:	d454      	bmi.n	8005800 <__sflush_r+0xb8>
 8005756:	684b      	ldr	r3, [r1, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	dc02      	bgt.n	8005762 <__sflush_r+0x1a>
 800575c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	dd48      	ble.n	80057f4 <__sflush_r+0xac>
 8005762:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005764:	2e00      	cmp	r6, #0
 8005766:	d045      	beq.n	80057f4 <__sflush_r+0xac>
 8005768:	2300      	movs	r3, #0
 800576a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800576e:	682f      	ldr	r7, [r5, #0]
 8005770:	6a21      	ldr	r1, [r4, #32]
 8005772:	602b      	str	r3, [r5, #0]
 8005774:	d030      	beq.n	80057d8 <__sflush_r+0x90>
 8005776:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005778:	89a3      	ldrh	r3, [r4, #12]
 800577a:	0759      	lsls	r1, r3, #29
 800577c:	d505      	bpl.n	800578a <__sflush_r+0x42>
 800577e:	6863      	ldr	r3, [r4, #4]
 8005780:	1ad2      	subs	r2, r2, r3
 8005782:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005784:	b10b      	cbz	r3, 800578a <__sflush_r+0x42>
 8005786:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005788:	1ad2      	subs	r2, r2, r3
 800578a:	2300      	movs	r3, #0
 800578c:	4628      	mov	r0, r5
 800578e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005790:	6a21      	ldr	r1, [r4, #32]
 8005792:	47b0      	blx	r6
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	89a3      	ldrh	r3, [r4, #12]
 8005798:	d106      	bne.n	80057a8 <__sflush_r+0x60>
 800579a:	6829      	ldr	r1, [r5, #0]
 800579c:	291d      	cmp	r1, #29
 800579e:	d82b      	bhi.n	80057f8 <__sflush_r+0xb0>
 80057a0:	4a28      	ldr	r2, [pc, #160]	@ (8005844 <__sflush_r+0xfc>)
 80057a2:	40ca      	lsrs	r2, r1
 80057a4:	07d6      	lsls	r6, r2, #31
 80057a6:	d527      	bpl.n	80057f8 <__sflush_r+0xb0>
 80057a8:	2200      	movs	r2, #0
 80057aa:	6062      	str	r2, [r4, #4]
 80057ac:	6922      	ldr	r2, [r4, #16]
 80057ae:	04d9      	lsls	r1, r3, #19
 80057b0:	6022      	str	r2, [r4, #0]
 80057b2:	d504      	bpl.n	80057be <__sflush_r+0x76>
 80057b4:	1c42      	adds	r2, r0, #1
 80057b6:	d101      	bne.n	80057bc <__sflush_r+0x74>
 80057b8:	682b      	ldr	r3, [r5, #0]
 80057ba:	b903      	cbnz	r3, 80057be <__sflush_r+0x76>
 80057bc:	6560      	str	r0, [r4, #84]	@ 0x54
 80057be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057c0:	602f      	str	r7, [r5, #0]
 80057c2:	b1b9      	cbz	r1, 80057f4 <__sflush_r+0xac>
 80057c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057c8:	4299      	cmp	r1, r3
 80057ca:	d002      	beq.n	80057d2 <__sflush_r+0x8a>
 80057cc:	4628      	mov	r0, r5
 80057ce:	f7ff fa03 	bl	8004bd8 <_free_r>
 80057d2:	2300      	movs	r3, #0
 80057d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80057d6:	e00d      	b.n	80057f4 <__sflush_r+0xac>
 80057d8:	2301      	movs	r3, #1
 80057da:	4628      	mov	r0, r5
 80057dc:	47b0      	blx	r6
 80057de:	4602      	mov	r2, r0
 80057e0:	1c50      	adds	r0, r2, #1
 80057e2:	d1c9      	bne.n	8005778 <__sflush_r+0x30>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0c6      	beq.n	8005778 <__sflush_r+0x30>
 80057ea:	2b1d      	cmp	r3, #29
 80057ec:	d001      	beq.n	80057f2 <__sflush_r+0xaa>
 80057ee:	2b16      	cmp	r3, #22
 80057f0:	d11d      	bne.n	800582e <__sflush_r+0xe6>
 80057f2:	602f      	str	r7, [r5, #0]
 80057f4:	2000      	movs	r0, #0
 80057f6:	e021      	b.n	800583c <__sflush_r+0xf4>
 80057f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057fc:	b21b      	sxth	r3, r3
 80057fe:	e01a      	b.n	8005836 <__sflush_r+0xee>
 8005800:	690f      	ldr	r7, [r1, #16]
 8005802:	2f00      	cmp	r7, #0
 8005804:	d0f6      	beq.n	80057f4 <__sflush_r+0xac>
 8005806:	0793      	lsls	r3, r2, #30
 8005808:	bf18      	it	ne
 800580a:	2300      	movne	r3, #0
 800580c:	680e      	ldr	r6, [r1, #0]
 800580e:	bf08      	it	eq
 8005810:	694b      	ldreq	r3, [r1, #20]
 8005812:	1bf6      	subs	r6, r6, r7
 8005814:	600f      	str	r7, [r1, #0]
 8005816:	608b      	str	r3, [r1, #8]
 8005818:	2e00      	cmp	r6, #0
 800581a:	ddeb      	ble.n	80057f4 <__sflush_r+0xac>
 800581c:	4633      	mov	r3, r6
 800581e:	463a      	mov	r2, r7
 8005820:	4628      	mov	r0, r5
 8005822:	6a21      	ldr	r1, [r4, #32]
 8005824:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005828:	47e0      	blx	ip
 800582a:	2800      	cmp	r0, #0
 800582c:	dc07      	bgt.n	800583e <__sflush_r+0xf6>
 800582e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005836:	f04f 30ff 	mov.w	r0, #4294967295
 800583a:	81a3      	strh	r3, [r4, #12]
 800583c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800583e:	4407      	add	r7, r0
 8005840:	1a36      	subs	r6, r6, r0
 8005842:	e7e9      	b.n	8005818 <__sflush_r+0xd0>
 8005844:	20400001 	.word	0x20400001

08005848 <_fflush_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	690b      	ldr	r3, [r1, #16]
 800584c:	4605      	mov	r5, r0
 800584e:	460c      	mov	r4, r1
 8005850:	b913      	cbnz	r3, 8005858 <_fflush_r+0x10>
 8005852:	2500      	movs	r5, #0
 8005854:	4628      	mov	r0, r5
 8005856:	bd38      	pop	{r3, r4, r5, pc}
 8005858:	b118      	cbz	r0, 8005862 <_fflush_r+0x1a>
 800585a:	6a03      	ldr	r3, [r0, #32]
 800585c:	b90b      	cbnz	r3, 8005862 <_fflush_r+0x1a>
 800585e:	f7fe f953 	bl	8003b08 <__sinit>
 8005862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0f3      	beq.n	8005852 <_fflush_r+0xa>
 800586a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800586c:	07d0      	lsls	r0, r2, #31
 800586e:	d404      	bmi.n	800587a <_fflush_r+0x32>
 8005870:	0599      	lsls	r1, r3, #22
 8005872:	d402      	bmi.n	800587a <_fflush_r+0x32>
 8005874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005876:	f7fe fb42 	bl	8003efe <__retarget_lock_acquire_recursive>
 800587a:	4628      	mov	r0, r5
 800587c:	4621      	mov	r1, r4
 800587e:	f7ff ff63 	bl	8005748 <__sflush_r>
 8005882:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005884:	4605      	mov	r5, r0
 8005886:	07da      	lsls	r2, r3, #31
 8005888:	d4e4      	bmi.n	8005854 <_fflush_r+0xc>
 800588a:	89a3      	ldrh	r3, [r4, #12]
 800588c:	059b      	lsls	r3, r3, #22
 800588e:	d4e1      	bmi.n	8005854 <_fflush_r+0xc>
 8005890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005892:	f7fe fb35 	bl	8003f00 <__retarget_lock_release_recursive>
 8005896:	e7dd      	b.n	8005854 <_fflush_r+0xc>

08005898 <__swhatbuf_r>:
 8005898:	b570      	push	{r4, r5, r6, lr}
 800589a:	460c      	mov	r4, r1
 800589c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a0:	4615      	mov	r5, r2
 80058a2:	2900      	cmp	r1, #0
 80058a4:	461e      	mov	r6, r3
 80058a6:	b096      	sub	sp, #88	@ 0x58
 80058a8:	da0c      	bge.n	80058c4 <__swhatbuf_r+0x2c>
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	2100      	movs	r1, #0
 80058ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80058b2:	bf14      	ite	ne
 80058b4:	2340      	movne	r3, #64	@ 0x40
 80058b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80058ba:	2000      	movs	r0, #0
 80058bc:	6031      	str	r1, [r6, #0]
 80058be:	602b      	str	r3, [r5, #0]
 80058c0:	b016      	add	sp, #88	@ 0x58
 80058c2:	bd70      	pop	{r4, r5, r6, pc}
 80058c4:	466a      	mov	r2, sp
 80058c6:	f000 f849 	bl	800595c <_fstat_r>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	dbed      	blt.n	80058aa <__swhatbuf_r+0x12>
 80058ce:	9901      	ldr	r1, [sp, #4]
 80058d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80058d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80058d8:	4259      	negs	r1, r3
 80058da:	4159      	adcs	r1, r3
 80058dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058e0:	e7eb      	b.n	80058ba <__swhatbuf_r+0x22>

080058e2 <__smakebuf_r>:
 80058e2:	898b      	ldrh	r3, [r1, #12]
 80058e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058e6:	079d      	lsls	r5, r3, #30
 80058e8:	4606      	mov	r6, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	d507      	bpl.n	80058fe <__smakebuf_r+0x1c>
 80058ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80058f2:	6023      	str	r3, [r4, #0]
 80058f4:	6123      	str	r3, [r4, #16]
 80058f6:	2301      	movs	r3, #1
 80058f8:	6163      	str	r3, [r4, #20]
 80058fa:	b003      	add	sp, #12
 80058fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058fe:	466a      	mov	r2, sp
 8005900:	ab01      	add	r3, sp, #4
 8005902:	f7ff ffc9 	bl	8005898 <__swhatbuf_r>
 8005906:	9f00      	ldr	r7, [sp, #0]
 8005908:	4605      	mov	r5, r0
 800590a:	4639      	mov	r1, r7
 800590c:	4630      	mov	r0, r6
 800590e:	f7ff f9d5 	bl	8004cbc <_malloc_r>
 8005912:	b948      	cbnz	r0, 8005928 <__smakebuf_r+0x46>
 8005914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005918:	059a      	lsls	r2, r3, #22
 800591a:	d4ee      	bmi.n	80058fa <__smakebuf_r+0x18>
 800591c:	f023 0303 	bic.w	r3, r3, #3
 8005920:	f043 0302 	orr.w	r3, r3, #2
 8005924:	81a3      	strh	r3, [r4, #12]
 8005926:	e7e2      	b.n	80058ee <__smakebuf_r+0xc>
 8005928:	89a3      	ldrh	r3, [r4, #12]
 800592a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800592e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005932:	81a3      	strh	r3, [r4, #12]
 8005934:	9b01      	ldr	r3, [sp, #4]
 8005936:	6020      	str	r0, [r4, #0]
 8005938:	b15b      	cbz	r3, 8005952 <__smakebuf_r+0x70>
 800593a:	4630      	mov	r0, r6
 800593c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005940:	f000 f81e 	bl	8005980 <_isatty_r>
 8005944:	b128      	cbz	r0, 8005952 <__smakebuf_r+0x70>
 8005946:	89a3      	ldrh	r3, [r4, #12]
 8005948:	f023 0303 	bic.w	r3, r3, #3
 800594c:	f043 0301 	orr.w	r3, r3, #1
 8005950:	81a3      	strh	r3, [r4, #12]
 8005952:	89a3      	ldrh	r3, [r4, #12]
 8005954:	431d      	orrs	r5, r3
 8005956:	81a5      	strh	r5, [r4, #12]
 8005958:	e7cf      	b.n	80058fa <__smakebuf_r+0x18>
	...

0800595c <_fstat_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	2300      	movs	r3, #0
 8005960:	4d06      	ldr	r5, [pc, #24]	@ (800597c <_fstat_r+0x20>)
 8005962:	4604      	mov	r4, r0
 8005964:	4608      	mov	r0, r1
 8005966:	4611      	mov	r1, r2
 8005968:	602b      	str	r3, [r5, #0]
 800596a:	f7fb fbf7 	bl	800115c <_fstat>
 800596e:	1c43      	adds	r3, r0, #1
 8005970:	d102      	bne.n	8005978 <_fstat_r+0x1c>
 8005972:	682b      	ldr	r3, [r5, #0]
 8005974:	b103      	cbz	r3, 8005978 <_fstat_r+0x1c>
 8005976:	6023      	str	r3, [r4, #0]
 8005978:	bd38      	pop	{r3, r4, r5, pc}
 800597a:	bf00      	nop
 800597c:	20000394 	.word	0x20000394

08005980 <_isatty_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	2300      	movs	r3, #0
 8005984:	4d05      	ldr	r5, [pc, #20]	@ (800599c <_isatty_r+0x1c>)
 8005986:	4604      	mov	r4, r0
 8005988:	4608      	mov	r0, r1
 800598a:	602b      	str	r3, [r5, #0]
 800598c:	f7fb fbf5 	bl	800117a <_isatty>
 8005990:	1c43      	adds	r3, r0, #1
 8005992:	d102      	bne.n	800599a <_isatty_r+0x1a>
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	b103      	cbz	r3, 800599a <_isatty_r+0x1a>
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	20000394 	.word	0x20000394

080059a0 <_sbrk_r>:
 80059a0:	b538      	push	{r3, r4, r5, lr}
 80059a2:	2300      	movs	r3, #0
 80059a4:	4d05      	ldr	r5, [pc, #20]	@ (80059bc <_sbrk_r+0x1c>)
 80059a6:	4604      	mov	r4, r0
 80059a8:	4608      	mov	r0, r1
 80059aa:	602b      	str	r3, [r5, #0]
 80059ac:	f7fb fbfc 	bl	80011a8 <_sbrk>
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	d102      	bne.n	80059ba <_sbrk_r+0x1a>
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	b103      	cbz	r3, 80059ba <_sbrk_r+0x1a>
 80059b8:	6023      	str	r3, [r4, #0]
 80059ba:	bd38      	pop	{r3, r4, r5, pc}
 80059bc:	20000394 	.word	0x20000394

080059c0 <memcpy>:
 80059c0:	440a      	add	r2, r1
 80059c2:	4291      	cmp	r1, r2
 80059c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80059c8:	d100      	bne.n	80059cc <memcpy+0xc>
 80059ca:	4770      	bx	lr
 80059cc:	b510      	push	{r4, lr}
 80059ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059d2:	4291      	cmp	r1, r2
 80059d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059d8:	d1f9      	bne.n	80059ce <memcpy+0xe>
 80059da:	bd10      	pop	{r4, pc}

080059dc <__assert_func>:
 80059dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059de:	4614      	mov	r4, r2
 80059e0:	461a      	mov	r2, r3
 80059e2:	4b09      	ldr	r3, [pc, #36]	@ (8005a08 <__assert_func+0x2c>)
 80059e4:	4605      	mov	r5, r0
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68d8      	ldr	r0, [r3, #12]
 80059ea:	b14c      	cbz	r4, 8005a00 <__assert_func+0x24>
 80059ec:	4b07      	ldr	r3, [pc, #28]	@ (8005a0c <__assert_func+0x30>)
 80059ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80059f2:	9100      	str	r1, [sp, #0]
 80059f4:	462b      	mov	r3, r5
 80059f6:	4906      	ldr	r1, [pc, #24]	@ (8005a10 <__assert_func+0x34>)
 80059f8:	f000 f842 	bl	8005a80 <fiprintf>
 80059fc:	f000 f852 	bl	8005aa4 <abort>
 8005a00:	4b04      	ldr	r3, [pc, #16]	@ (8005a14 <__assert_func+0x38>)
 8005a02:	461c      	mov	r4, r3
 8005a04:	e7f3      	b.n	80059ee <__assert_func+0x12>
 8005a06:	bf00      	nop
 8005a08:	20000024 	.word	0x20000024
 8005a0c:	08005e43 	.word	0x08005e43
 8005a10:	08005e50 	.word	0x08005e50
 8005a14:	08005e7e 	.word	0x08005e7e

08005a18 <_calloc_r>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	fba1 5402 	umull	r5, r4, r1, r2
 8005a1e:	b934      	cbnz	r4, 8005a2e <_calloc_r+0x16>
 8005a20:	4629      	mov	r1, r5
 8005a22:	f7ff f94b 	bl	8004cbc <_malloc_r>
 8005a26:	4606      	mov	r6, r0
 8005a28:	b928      	cbnz	r0, 8005a36 <_calloc_r+0x1e>
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	bd70      	pop	{r4, r5, r6, pc}
 8005a2e:	220c      	movs	r2, #12
 8005a30:	2600      	movs	r6, #0
 8005a32:	6002      	str	r2, [r0, #0]
 8005a34:	e7f9      	b.n	8005a2a <_calloc_r+0x12>
 8005a36:	462a      	mov	r2, r5
 8005a38:	4621      	mov	r1, r4
 8005a3a:	f7fe f9e3 	bl	8003e04 <memset>
 8005a3e:	e7f4      	b.n	8005a2a <_calloc_r+0x12>

08005a40 <__ascii_mbtowc>:
 8005a40:	b082      	sub	sp, #8
 8005a42:	b901      	cbnz	r1, 8005a46 <__ascii_mbtowc+0x6>
 8005a44:	a901      	add	r1, sp, #4
 8005a46:	b142      	cbz	r2, 8005a5a <__ascii_mbtowc+0x1a>
 8005a48:	b14b      	cbz	r3, 8005a5e <__ascii_mbtowc+0x1e>
 8005a4a:	7813      	ldrb	r3, [r2, #0]
 8005a4c:	600b      	str	r3, [r1, #0]
 8005a4e:	7812      	ldrb	r2, [r2, #0]
 8005a50:	1e10      	subs	r0, r2, #0
 8005a52:	bf18      	it	ne
 8005a54:	2001      	movne	r0, #1
 8005a56:	b002      	add	sp, #8
 8005a58:	4770      	bx	lr
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	e7fb      	b.n	8005a56 <__ascii_mbtowc+0x16>
 8005a5e:	f06f 0001 	mvn.w	r0, #1
 8005a62:	e7f8      	b.n	8005a56 <__ascii_mbtowc+0x16>

08005a64 <__ascii_wctomb>:
 8005a64:	4603      	mov	r3, r0
 8005a66:	4608      	mov	r0, r1
 8005a68:	b141      	cbz	r1, 8005a7c <__ascii_wctomb+0x18>
 8005a6a:	2aff      	cmp	r2, #255	@ 0xff
 8005a6c:	d904      	bls.n	8005a78 <__ascii_wctomb+0x14>
 8005a6e:	228a      	movs	r2, #138	@ 0x8a
 8005a70:	f04f 30ff 	mov.w	r0, #4294967295
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	4770      	bx	lr
 8005a78:	2001      	movs	r0, #1
 8005a7a:	700a      	strb	r2, [r1, #0]
 8005a7c:	4770      	bx	lr
	...

08005a80 <fiprintf>:
 8005a80:	b40e      	push	{r1, r2, r3}
 8005a82:	b503      	push	{r0, r1, lr}
 8005a84:	4601      	mov	r1, r0
 8005a86:	ab03      	add	r3, sp, #12
 8005a88:	4805      	ldr	r0, [pc, #20]	@ (8005aa0 <fiprintf+0x20>)
 8005a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a8e:	6800      	ldr	r0, [r0, #0]
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	f7ff fd41 	bl	8005518 <_vfiprintf_r>
 8005a96:	b002      	add	sp, #8
 8005a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a9c:	b003      	add	sp, #12
 8005a9e:	4770      	bx	lr
 8005aa0:	20000024 	.word	0x20000024

08005aa4 <abort>:
 8005aa4:	2006      	movs	r0, #6
 8005aa6:	b508      	push	{r3, lr}
 8005aa8:	f000 f82c 	bl	8005b04 <raise>
 8005aac:	2001      	movs	r0, #1
 8005aae:	f7fb fb06 	bl	80010be <_exit>

08005ab2 <_raise_r>:
 8005ab2:	291f      	cmp	r1, #31
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	460c      	mov	r4, r1
 8005aba:	d904      	bls.n	8005ac6 <_raise_r+0x14>
 8005abc:	2316      	movs	r3, #22
 8005abe:	6003      	str	r3, [r0, #0]
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac4:	bd38      	pop	{r3, r4, r5, pc}
 8005ac6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005ac8:	b112      	cbz	r2, 8005ad0 <_raise_r+0x1e>
 8005aca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ace:	b94b      	cbnz	r3, 8005ae4 <_raise_r+0x32>
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	f000 f831 	bl	8005b38 <_getpid_r>
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	4601      	mov	r1, r0
 8005ada:	4628      	mov	r0, r5
 8005adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ae0:	f000 b818 	b.w	8005b14 <_kill_r>
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d00a      	beq.n	8005afe <_raise_r+0x4c>
 8005ae8:	1c59      	adds	r1, r3, #1
 8005aea:	d103      	bne.n	8005af4 <_raise_r+0x42>
 8005aec:	2316      	movs	r3, #22
 8005aee:	6003      	str	r3, [r0, #0]
 8005af0:	2001      	movs	r0, #1
 8005af2:	e7e7      	b.n	8005ac4 <_raise_r+0x12>
 8005af4:	2100      	movs	r1, #0
 8005af6:	4620      	mov	r0, r4
 8005af8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005afc:	4798      	blx	r3
 8005afe:	2000      	movs	r0, #0
 8005b00:	e7e0      	b.n	8005ac4 <_raise_r+0x12>
	...

08005b04 <raise>:
 8005b04:	4b02      	ldr	r3, [pc, #8]	@ (8005b10 <raise+0xc>)
 8005b06:	4601      	mov	r1, r0
 8005b08:	6818      	ldr	r0, [r3, #0]
 8005b0a:	f7ff bfd2 	b.w	8005ab2 <_raise_r>
 8005b0e:	bf00      	nop
 8005b10:	20000024 	.word	0x20000024

08005b14 <_kill_r>:
 8005b14:	b538      	push	{r3, r4, r5, lr}
 8005b16:	2300      	movs	r3, #0
 8005b18:	4d06      	ldr	r5, [pc, #24]	@ (8005b34 <_kill_r+0x20>)
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	4611      	mov	r1, r2
 8005b20:	602b      	str	r3, [r5, #0]
 8005b22:	f7fb fabc 	bl	800109e <_kill>
 8005b26:	1c43      	adds	r3, r0, #1
 8005b28:	d102      	bne.n	8005b30 <_kill_r+0x1c>
 8005b2a:	682b      	ldr	r3, [r5, #0]
 8005b2c:	b103      	cbz	r3, 8005b30 <_kill_r+0x1c>
 8005b2e:	6023      	str	r3, [r4, #0]
 8005b30:	bd38      	pop	{r3, r4, r5, pc}
 8005b32:	bf00      	nop
 8005b34:	20000394 	.word	0x20000394

08005b38 <_getpid_r>:
 8005b38:	f7fb baaa 	b.w	8001090 <_getpid>

08005b3c <_init>:
 8005b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3e:	bf00      	nop
 8005b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b42:	bc08      	pop	{r3}
 8005b44:	469e      	mov	lr, r3
 8005b46:	4770      	bx	lr

08005b48 <_fini>:
 8005b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4a:	bf00      	nop
 8005b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4e:	bc08      	pop	{r3}
 8005b50:	469e      	mov	lr, r3
 8005b52:	4770      	bx	lr
