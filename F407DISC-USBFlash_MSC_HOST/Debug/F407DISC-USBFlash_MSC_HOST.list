
F407DISC-USBFlash_MSC_HOST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011fd0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e34  08012160  08012160  00013160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f94  08012f94  000141f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012f94  08012f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f9c  08012f9c  000141f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f9c  08012f9c  00013f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012fa0  08012fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08012fa4  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000141f4  2**0
                  CONTENTS
 10 .bss          00002fe4  200001f8  200001f8  000141f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200031dc  200031dc  000141f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000141f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019e4d  00000000  00000000  00014224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000449a  00000000  00000000  0002e071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  00032510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd6  00000000  00000000  00033718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026092  00000000  00000000  000344ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d8db  00000000  00000000  0005a580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb3c2  00000000  00000000  00077e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014321d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ab4  00000000  00000000  00143260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00148d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012148 	.word	0x08012148

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08012148 	.word	0x08012148

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b988 	b.w	8000f30 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	468e      	mov	lr, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	4688      	mov	r8, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d962      	bls.n	8000d14 <__udivmoddi4+0xdc>
 8000c4e:	fab2 f682 	clz	r6, r2
 8000c52:	b14e      	cbz	r6, 8000c68 <__udivmoddi4+0x30>
 8000c54:	f1c6 0320 	rsb	r3, r6, #32
 8000c58:	fa01 f806 	lsl.w	r8, r1, r6
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	40b7      	lsls	r7, r6
 8000c62:	ea43 0808 	orr.w	r8, r3, r8
 8000c66:	40b4      	lsls	r4, r6
 8000c68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c6c:	fa1f fc87 	uxth.w	ip, r7
 8000c70:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c74:	0c23      	lsrs	r3, r4, #16
 8000c76:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c7a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c8c:	f080 80ea 	bcs.w	8000e64 <__udivmoddi4+0x22c>
 8000c90:	429a      	cmp	r2, r3
 8000c92:	f240 80e7 	bls.w	8000e64 <__udivmoddi4+0x22c>
 8000c96:	3902      	subs	r1, #2
 8000c98:	443b      	add	r3, r7
 8000c9a:	1a9a      	subs	r2, r3, r2
 8000c9c:	b2a3      	uxth	r3, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000caa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cae:	459c      	cmp	ip, r3
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0x8e>
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb8:	f080 80d6 	bcs.w	8000e68 <__udivmoddi4+0x230>
 8000cbc:	459c      	cmp	ip, r3
 8000cbe:	f240 80d3 	bls.w	8000e68 <__udivmoddi4+0x230>
 8000cc2:	443b      	add	r3, r7
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cca:	eba3 030c 	sub.w	r3, r3, ip
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11d      	cbz	r5, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40f3      	lsrs	r3, r6
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d905      	bls.n	8000cee <__udivmoddi4+0xb6>
 8000ce2:	b10d      	cbz	r5, 8000ce8 <__udivmoddi4+0xb0>
 8000ce4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4608      	mov	r0, r1
 8000cec:	e7f5      	b.n	8000cda <__udivmoddi4+0xa2>
 8000cee:	fab3 f183 	clz	r1, r3
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	d146      	bne.n	8000d84 <__udivmoddi4+0x14c>
 8000cf6:	4573      	cmp	r3, lr
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0xc8>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 8105 	bhi.w	8000f0a <__udivmoddi4+0x2d2>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	4690      	mov	r8, r2
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0e5      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d0e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d12:	e7e2      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f000 8090 	beq.w	8000e3a <__udivmoddi4+0x202>
 8000d1a:	fab2 f682 	clz	r6, r2
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	f040 80a4 	bne.w	8000e6c <__udivmoddi4+0x234>
 8000d24:	1a8a      	subs	r2, r1, r2
 8000d26:	0c03      	lsrs	r3, r0, #16
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	b280      	uxth	r0, r0
 8000d2e:	b2bc      	uxth	r4, r7
 8000d30:	2101      	movs	r1, #1
 8000d32:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d36:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x11e>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x11c>
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	f200 80e0 	bhi.w	8000f14 <__udivmoddi4+0x2dc>
 8000d54:	46c4      	mov	ip, r8
 8000d56:	1a9b      	subs	r3, r3, r2
 8000d58:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d5c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d60:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d64:	fb02 f404 	mul.w	r4, r2, r4
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x144>
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x142>
 8000d74:	429c      	cmp	r4, r3
 8000d76:	f200 80ca 	bhi.w	8000f0e <__udivmoddi4+0x2d6>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	1b1b      	subs	r3, r3, r4
 8000d7e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d82:	e7a5      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d84:	f1c1 0620 	rsb	r6, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d8e:	431f      	orrs	r7, r3
 8000d90:	fa0e f401 	lsl.w	r4, lr, r1
 8000d94:	fa20 f306 	lsr.w	r3, r0, r6
 8000d98:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d9c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	fa1f fc87 	uxth.w	ip, r7
 8000daa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000db4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000db8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x1a0>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dca:	f080 809c 	bcs.w	8000f06 <__udivmoddi4+0x2ce>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f240 8099 	bls.w	8000f06 <__udivmoddi4+0x2ce>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	443c      	add	r4, r7
 8000dd8:	eba4 040e 	sub.w	r4, r4, lr
 8000ddc:	fa1f fe83 	uxth.w	lr, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dec:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df0:	45a4      	cmp	ip, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1ce>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dfa:	f080 8082 	bcs.w	8000f02 <__udivmoddi4+0x2ca>
 8000dfe:	45a4      	cmp	ip, r4
 8000e00:	d97f      	bls.n	8000f02 <__udivmoddi4+0x2ca>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	443c      	add	r4, r7
 8000e06:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e0a:	eba4 040c 	sub.w	r4, r4, ip
 8000e0e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e12:	4564      	cmp	r4, ip
 8000e14:	4673      	mov	r3, lr
 8000e16:	46e1      	mov	r9, ip
 8000e18:	d362      	bcc.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e1a:	d05f      	beq.n	8000edc <__udivmoddi4+0x2a4>
 8000e1c:	b15d      	cbz	r5, 8000e36 <__udivmoddi4+0x1fe>
 8000e1e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e22:	eb64 0409 	sbc.w	r4, r4, r9
 8000e26:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e2e:	431e      	orrs	r6, r3
 8000e30:	40cc      	lsrs	r4, r1
 8000e32:	e9c5 6400 	strd	r6, r4, [r5]
 8000e36:	2100      	movs	r1, #0
 8000e38:	e74f      	b.n	8000cda <__udivmoddi4+0xa2>
 8000e3a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e3e:	0c01      	lsrs	r1, r0, #16
 8000e40:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e44:	b280      	uxth	r0, r0
 8000e46:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	463c      	mov	r4, r7
 8000e50:	46b8      	mov	r8, r7
 8000e52:	46be      	mov	lr, r7
 8000e54:	2620      	movs	r6, #32
 8000e56:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e5a:	eba2 0208 	sub.w	r2, r2, r8
 8000e5e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e62:	e766      	b.n	8000d32 <__udivmoddi4+0xfa>
 8000e64:	4601      	mov	r1, r0
 8000e66:	e718      	b.n	8000c9a <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e72c      	b.n	8000cc6 <__udivmoddi4+0x8e>
 8000e6c:	f1c6 0220 	rsb	r2, r6, #32
 8000e70:	fa2e f302 	lsr.w	r3, lr, r2
 8000e74:	40b7      	lsls	r7, r6
 8000e76:	40b1      	lsls	r1, r6
 8000e78:	fa20 f202 	lsr.w	r2, r0, r2
 8000e7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e80:	430a      	orrs	r2, r1
 8000e82:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e86:	b2bc      	uxth	r4, r7
 8000e88:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb08 f904 	mul.w	r9, r8, r4
 8000e96:	40b0      	lsls	r0, r6
 8000e98:	4589      	cmp	r9, r1
 8000e9a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e9e:	b280      	uxth	r0, r0
 8000ea0:	d93e      	bls.n	8000f20 <__udivmoddi4+0x2e8>
 8000ea2:	1879      	adds	r1, r7, r1
 8000ea4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ea8:	d201      	bcs.n	8000eae <__udivmoddi4+0x276>
 8000eaa:	4589      	cmp	r9, r1
 8000eac:	d81f      	bhi.n	8000eee <__udivmoddi4+0x2b6>
 8000eae:	eba1 0109 	sub.w	r1, r1, r9
 8000eb2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eb6:	fb09 f804 	mul.w	r8, r9, r4
 8000eba:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec4:	4542      	cmp	r2, r8
 8000ec6:	d229      	bcs.n	8000f1c <__udivmoddi4+0x2e4>
 8000ec8:	18ba      	adds	r2, r7, r2
 8000eca:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ece:	d2c4      	bcs.n	8000e5a <__udivmoddi4+0x222>
 8000ed0:	4542      	cmp	r2, r8
 8000ed2:	d2c2      	bcs.n	8000e5a <__udivmoddi4+0x222>
 8000ed4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ed8:	443a      	add	r2, r7
 8000eda:	e7be      	b.n	8000e5a <__udivmoddi4+0x222>
 8000edc:	45f0      	cmp	r8, lr
 8000ede:	d29d      	bcs.n	8000e1c <__udivmoddi4+0x1e4>
 8000ee0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ee4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ee8:	3801      	subs	r0, #1
 8000eea:	46e1      	mov	r9, ip
 8000eec:	e796      	b.n	8000e1c <__udivmoddi4+0x1e4>
 8000eee:	eba7 0909 	sub.w	r9, r7, r9
 8000ef2:	4449      	add	r1, r9
 8000ef4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ef8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efc:	fb09 f804 	mul.w	r8, r9, r4
 8000f00:	e7db      	b.n	8000eba <__udivmoddi4+0x282>
 8000f02:	4673      	mov	r3, lr
 8000f04:	e77f      	b.n	8000e06 <__udivmoddi4+0x1ce>
 8000f06:	4650      	mov	r0, sl
 8000f08:	e766      	b.n	8000dd8 <__udivmoddi4+0x1a0>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e6fd      	b.n	8000d0a <__udivmoddi4+0xd2>
 8000f0e:	443b      	add	r3, r7
 8000f10:	3a02      	subs	r2, #2
 8000f12:	e733      	b.n	8000d7c <__udivmoddi4+0x144>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	443b      	add	r3, r7
 8000f1a:	e71c      	b.n	8000d56 <__udivmoddi4+0x11e>
 8000f1c:	4649      	mov	r1, r9
 8000f1e:	e79c      	b.n	8000e5a <__udivmoddi4+0x222>
 8000f20:	eba1 0109 	sub.w	r1, r1, r9
 8000f24:	46c4      	mov	ip, r8
 8000f26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2a:	fb09 f804 	mul.w	r8, r9, r4
 8000f2e:	e7c4      	b.n	8000eba <__udivmoddi4+0x282>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff f9a7 	bl	8000290 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	4803      	ldr	r0, [pc, #12]	@ (8000f5c <Send_Uart+0x28>)
 8000f4e:	f004 f80b 	bl	8004f68 <HAL_UART_Transmit>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000350 	.word	0x20000350

08000f60 <Mount_USB>:



void Mount_USB (void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000f64:	2201      	movs	r2, #1
 8000f66:	490a      	ldr	r1, [pc, #40]	@ (8000f90 <Mount_USB+0x30>)
 8000f68:	480a      	ldr	r0, [pc, #40]	@ (8000f94 <Mount_USB+0x34>)
 8000f6a:	f00c fc73 	bl	800d854 <f_mount>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <Mount_USB+0x38>)
 8000f74:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 8000f76:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <Mount_USB+0x38>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <Mount_USB+0x26>
 8000f7e:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <Mount_USB+0x3c>)
 8000f80:	f7ff ffd8 	bl	8000f34 <Send_Uart>
	else Send_Uart("USB mounted successfully...\n");
}
 8000f84:	e002      	b.n	8000f8c <Mount_USB+0x2c>
	else Send_Uart("USB mounted successfully...\n");
 8000f86:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <Mount_USB+0x40>)
 8000f88:	f7ff ffd4 	bl	8000f34 <Send_Uart>
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200003a8 	.word	0x200003a8
 8000f94:	200003ac 	.word	0x200003ac
 8000f98:	20000338 	.word	0x20000338
 8000f9c:	08012160 	.word	0x08012160
 8000fa0:	08012180 	.word	0x08012180

08000fa4 <Scan_USB>:
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (const char* pat)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b09a      	sub	sp, #104	@ 0x68
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8000fac:	2014      	movs	r0, #20
 8000fae:	f00e fa77 	bl	800f4a0 <malloc>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	667b      	str	r3, [r7, #100]	@ 0x64
    sprintf (path, "%s",pat);
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	4944      	ldr	r1, [pc, #272]	@ (80010cc <Scan_USB+0x128>)
 8000fba:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000fbc:	f00f f846 	bl	801004c <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f00d fa78 	bl	800e4bc <f_opendir>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b3f      	ldr	r3, [pc, #252]	@ (80010d0 <Scan_USB+0x12c>)
 8000fd2:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80010d0 <Scan_USB+0x12c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d16e      	bne.n	80010ba <Scan_USB+0x116>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000fdc:	f107 0308 	add.w	r3, r7, #8
 8000fe0:	493c      	ldr	r1, [pc, #240]	@ (80010d4 <Scan_USB+0x130>)
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f00d fb39 	bl	800e65a <f_readdir>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b38      	ldr	r3, [pc, #224]	@ (80010d0 <Scan_USB+0x12c>)
 8000fee:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000ff0:	4b37      	ldr	r3, [pc, #220]	@ (80010d0 <Scan_USB+0x12c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d15b      	bne.n	80010b0 <Scan_USB+0x10c>
 8000ff8:	4b36      	ldr	r3, [pc, #216]	@ (80010d4 <Scan_USB+0x130>)
 8000ffa:	7e9b      	ldrb	r3, [r3, #26]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d057      	beq.n	80010b0 <Scan_USB+0x10c>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8001000:	4b34      	ldr	r3, [pc, #208]	@ (80010d4 <Scan_USB+0x130>)
 8001002:	7b1b      	ldrb	r3, [r3, #12]
 8001004:	f003 0310 	and.w	r3, r3, #16
 8001008:	2b00      	cmp	r3, #0
 800100a:	d03a      	beq.n	8001082 <Scan_USB+0xde>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 800100c:	4932      	ldr	r1, [pc, #200]	@ (80010d8 <Scan_USB+0x134>)
 800100e:	4833      	ldr	r0, [pc, #204]	@ (80010dc <Scan_USB+0x138>)
 8001010:	f7ff f8de 	bl	80001d0 <strcmp>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d045      	beq.n	80010a6 <Scan_USB+0x102>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 800101a:	492f      	ldr	r1, [pc, #188]	@ (80010d8 <Scan_USB+0x134>)
 800101c:	4830      	ldr	r0, [pc, #192]	@ (80010e0 <Scan_USB+0x13c>)
 800101e:	f7ff f8d7 	bl	80001d0 <strcmp>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d040      	beq.n	80010aa <Scan_USB+0x106>
            	char *buf = malloc(30*sizeof(char));
 8001028:	201e      	movs	r0, #30
 800102a:	f00e fa39 	bl	800f4a0 <malloc>
 800102e:	4603      	mov	r3, r0
 8001030:	65fb      	str	r3, [r7, #92]	@ 0x5c
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8001032:	4a29      	ldr	r2, [pc, #164]	@ (80010d8 <Scan_USB+0x134>)
 8001034:	492b      	ldr	r1, [pc, #172]	@ (80010e4 <Scan_USB+0x140>)
 8001036:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001038:	f00f f808 	bl	801004c <siprintf>
            	Send_Uart(buf);
 800103c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800103e:	f7ff ff79 	bl	8000f34 <Send_Uart>
            	free(buf);
 8001042:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001044:	f00e fa34 	bl	800f4b0 <free>
                i = strlen(path);
 8001048:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800104a:	f7ff f921 	bl	8000290 <strlen>
 800104e:	65b8      	str	r0, [r7, #88]	@ 0x58
                sprintf(&path[i], "/%s", USBHfno.fname);
 8001050:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001052:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001054:	4413      	add	r3, r2
 8001056:	4a20      	ldr	r2, [pc, #128]	@ (80010d8 <Scan_USB+0x134>)
 8001058:	4923      	ldr	r1, [pc, #140]	@ (80010e8 <Scan_USB+0x144>)
 800105a:	4618      	mov	r0, r3
 800105c:	f00e fff6 	bl	801004c <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 8001060:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001062:	f7ff ff9f 	bl	8000fa4 <Scan_USB>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <Scan_USB+0x12c>)
 800106c:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 800106e:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <Scan_USB+0x12c>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d11b      	bne.n	80010ae <Scan_USB+0x10a>
                path[i] = 0;
 8001076:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001078:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800107a:	4413      	add	r3, r2
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	e7ac      	b.n	8000fdc <Scan_USB+0x38>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 8001082:	201e      	movs	r0, #30
 8001084:	f00e fa0c 	bl	800f4a0 <malloc>
 8001088:	4603      	mov	r3, r0
 800108a:	663b      	str	r3, [r7, #96]	@ 0x60
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <Scan_USB+0x134>)
 800108e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001090:	4916      	ldr	r1, [pc, #88]	@ (80010ec <Scan_USB+0x148>)
 8001092:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001094:	f00e ffda 	bl	801004c <siprintf>
               Send_Uart(buf);
 8001098:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800109a:	f7ff ff4b 	bl	8000f34 <Send_Uart>
               free(buf);
 800109e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80010a0:	f00e fa06 	bl	800f4b0 <free>
 80010a4:	e79a      	b.n	8000fdc <Scan_USB+0x38>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 80010a6:	bf00      	nop
 80010a8:	e798      	b.n	8000fdc <Scan_USB+0x38>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 80010aa:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 80010ac:	e796      	b.n	8000fdc <Scan_USB+0x38>
                if (fresult != FR_OK) break;
 80010ae:	bf00      	nop
            }
        }
        f_closedir(&dir);
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	4618      	mov	r0, r3
 80010b6:	f00d faaa 	bl	800e60e <f_closedir>
    }
    free(path);
 80010ba:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80010bc:	f00e f9f8 	bl	800f4b0 <free>
    return fresult;
 80010c0:	4b03      	ldr	r3, [pc, #12]	@ (80010d0 <Scan_USB+0x12c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3768      	adds	r7, #104	@ 0x68
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	080121e4 	.word	0x080121e4
 80010d0:	20000338 	.word	0x20000338
 80010d4:	20000218 	.word	0x20000218
 80010d8:	20000232 	.word	0x20000232
 80010dc:	080121e8 	.word	0x080121e8
 80010e0:	080121f4 	.word	0x080121f4
 80010e4:	08012210 	.word	0x08012210
 80010e8:	0801221c 	.word	0x0801221c
 80010ec:	08012220 	.word	0x08012220

080010f0 <Write_File>:




FRESULT Write_File (const char *name, const char *data)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 80010fa:	4955      	ldr	r1, [pc, #340]	@ (8001250 <Write_File+0x160>)
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f00d fae9 	bl	800e6d4 <f_stat>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	4b53      	ldr	r3, [pc, #332]	@ (8001254 <Write_File+0x164>)
 8001108:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800110a:	4b52      	ldr	r3, [pc, #328]	@ (8001254 <Write_File+0x164>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d012      	beq.n	8001138 <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8001112:	2064      	movs	r0, #100	@ 0x64
 8001114:	f00e f9c4 	bl	800f4a0 <malloc>
 8001118:	4603      	mov	r3, r0
 800111a:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	494e      	ldr	r1, [pc, #312]	@ (8001258 <Write_File+0x168>)
 8001120:	68b8      	ldr	r0, [r7, #8]
 8001122:	f00e ff93 	bl	801004c <siprintf>
		Send_Uart (buf);
 8001126:	68b8      	ldr	r0, [r7, #8]
 8001128:	f7ff ff04 	bl	8000f34 <Send_Uart>
	    free(buf);
 800112c:	68b8      	ldr	r0, [r7, #8]
 800112e:	f00e f9bf 	bl	800f4b0 <free>
	    return fresult;
 8001132:	4b48      	ldr	r3, [pc, #288]	@ (8001254 <Write_File+0x164>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	e087      	b.n	8001248 <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8001138:	2202      	movs	r2, #2
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4847      	ldr	r0, [pc, #284]	@ (800125c <Write_File+0x16c>)
 800113e:	f00c fbcf 	bl	800d8e0 <f_open>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	4b43      	ldr	r3, [pc, #268]	@ (8001254 <Write_File+0x164>)
 8001148:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800114a:	4b42      	ldr	r3, [pc, #264]	@ (8001254 <Write_File+0x164>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d015      	beq.n	800117e <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001152:	2064      	movs	r0, #100	@ 0x64
 8001154:	f00e f9a4 	bl	800f4a0 <malloc>
 8001158:	4603      	mov	r3, r0
 800115a:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 800115c:	4b3d      	ldr	r3, [pc, #244]	@ (8001254 <Write_File+0x164>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	493e      	ldr	r1, [pc, #248]	@ (8001260 <Write_File+0x170>)
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f00e ff70 	bl	801004c <siprintf>
	    	Send_Uart(buf);
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f7ff fee1 	bl	8000f34 <Send_Uart>
	        free(buf);
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f00e f99c 	bl	800f4b0 <free>
	        return fresult;
 8001178:	4b36      	ldr	r3, [pc, #216]	@ (8001254 <Write_File+0x164>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	e064      	b.n	8001248 <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800117e:	2064      	movs	r0, #100	@ 0x64
 8001180:	f00e f98e 	bl	800f4a0 <malloc>
 8001184:	4603      	mov	r3, r0
 8001186:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	4936      	ldr	r1, [pc, #216]	@ (8001264 <Write_File+0x174>)
 800118c:	69f8      	ldr	r0, [r7, #28]
 800118e:	f00e ff5d 	bl	801004c <siprintf>
	    	Send_Uart(buf);
 8001192:	69f8      	ldr	r0, [r7, #28]
 8001194:	f7ff fece 	bl	8000f34 <Send_Uart>
	        free(buf);
 8001198:	69f8      	ldr	r0, [r7, #28]
 800119a:	f00e f989 	bl	800f4b0 <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 800119e:	6838      	ldr	r0, [r7, #0]
 80011a0:	f7ff f876 	bl	8000290 <strlen>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b30      	ldr	r3, [pc, #192]	@ (8001268 <Write_File+0x178>)
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	482c      	ldr	r0, [pc, #176]	@ (800125c <Write_File+0x16c>)
 80011ac:	f00c fe67 	bl	800de7e <f_write>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b27      	ldr	r3, [pc, #156]	@ (8001254 <Write_File+0x164>)
 80011b6:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 80011b8:	4b26      	ldr	r3, [pc, #152]	@ (8001254 <Write_File+0x164>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d012      	beq.n	80011e6 <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 80011c0:	2064      	movs	r0, #100	@ 0x64
 80011c2:	f00e f96d 	bl	800f4a0 <malloc>
 80011c6:	4603      	mov	r3, r0
 80011c8:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 80011ca:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <Write_File+0x164>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4926      	ldr	r1, [pc, #152]	@ (800126c <Write_File+0x17c>)
 80011d4:	69b8      	ldr	r0, [r7, #24]
 80011d6:	f00e ff39 	bl	801004c <siprintf>
	    		Send_Uart(buf);
 80011da:	69b8      	ldr	r0, [r7, #24]
 80011dc:	f7ff feaa 	bl	8000f34 <Send_Uart>
	    		free(buf);
 80011e0:	69b8      	ldr	r0, [r7, #24]
 80011e2:	f00e f965 	bl	800f4b0 <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 80011e6:	481d      	ldr	r0, [pc, #116]	@ (800125c <Write_File+0x16c>)
 80011e8:	f00d f93e 	bl	800e468 <f_close>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <Write_File+0x164>)
 80011f2:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 80011f4:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <Write_File+0x164>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d013      	beq.n	8001224 <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 80011fc:	2064      	movs	r0, #100	@ 0x64
 80011fe:	f00e f94f 	bl	800f4a0 <malloc>
 8001202:	4603      	mov	r3, r0
 8001204:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 8001206:	4b13      	ldr	r3, [pc, #76]	@ (8001254 <Write_File+0x164>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4918      	ldr	r1, [pc, #96]	@ (8001270 <Write_File+0x180>)
 8001210:	6938      	ldr	r0, [r7, #16]
 8001212:	f00e ff1b 	bl	801004c <siprintf>
	    		Send_Uart(buf);
 8001216:	6938      	ldr	r0, [r7, #16]
 8001218:	f7ff fe8c 	bl	8000f34 <Send_Uart>
	    		free(buf);
 800121c:	6938      	ldr	r0, [r7, #16]
 800121e:	f00e f947 	bl	800f4b0 <free>
 8001222:	e00f      	b.n	8001244 <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8001224:	2064      	movs	r0, #100	@ 0x64
 8001226:	f00e f93b 	bl	800f4a0 <malloc>
 800122a:	4603      	mov	r3, r0
 800122c:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	4910      	ldr	r1, [pc, #64]	@ (8001274 <Write_File+0x184>)
 8001232:	6978      	ldr	r0, [r7, #20]
 8001234:	f00e ff0a 	bl	801004c <siprintf>
	    		Send_Uart(buf);
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f7ff fe7b 	bl	8000f34 <Send_Uart>
	    		free(buf);
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f00e f936 	bl	800f4b0 <free>
	    	}
	    }
	    return fresult;
 8001244:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <Write_File+0x164>)
 8001246:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001248:	4618      	mov	r0, r3
 800124a:	3720      	adds	r7, #32
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000218 	.word	0x20000218
 8001254:	20000338 	.word	0x20000338
 8001258:	08012234 	.word	0x08012234
 800125c:	200013e8 	.word	0x200013e8
 8001260:	08012254 	.word	0x08012254
 8001264:	0801227c 	.word	0x0801227c
 8001268:	2000033c 	.word	0x2000033c
 800126c:	080122a8 	.word	0x080122a8
 8001270:	080122dc 	.word	0x080122dc
 8001274:	08012314 	.word	0x08012314

08001278 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (const char *name)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8001280:	4943      	ldr	r1, [pc, #268]	@ (8001390 <Create_File+0x118>)
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f00d fa26 	bl	800e6d4 <f_stat>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b41      	ldr	r3, [pc, #260]	@ (8001394 <Create_File+0x11c>)
 800128e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001290:	4b40      	ldr	r3, [pc, #256]	@ (8001394 <Create_File+0x11c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d112      	bne.n	80012be <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8001298:	2064      	movs	r0, #100	@ 0x64
 800129a:	f00e f901 	bl	800f4a0 <malloc>
 800129e:	4603      	mov	r3, r0
 80012a0:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	493c      	ldr	r1, [pc, #240]	@ (8001398 <Create_File+0x120>)
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f00e fed0 	bl	801004c <siprintf>
		Send_Uart(buf);
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f7ff fe41 	bl	8000f34 <Send_Uart>
		free(buf);
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f00e f8fc 	bl	800f4b0 <free>
	    return fresult;
 80012b8:	4b36      	ldr	r3, [pc, #216]	@ (8001394 <Create_File+0x11c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	e063      	b.n	8001386 <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80012be:	220b      	movs	r2, #11
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	4836      	ldr	r0, [pc, #216]	@ (800139c <Create_File+0x124>)
 80012c4:	f00c fb0c 	bl	800d8e0 <f_open>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b31      	ldr	r3, [pc, #196]	@ (8001394 <Create_File+0x11c>)
 80012ce:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80012d0:	4b30      	ldr	r3, [pc, #192]	@ (8001394 <Create_File+0x11c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d015      	beq.n	8001304 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 80012d8:	2064      	movs	r0, #100	@ 0x64
 80012da:	f00e f8e1 	bl	800f4a0 <malloc>
 80012de:	4603      	mov	r3, r0
 80012e0:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80012e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001394 <Create_File+0x11c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	492d      	ldr	r1, [pc, #180]	@ (80013a0 <Create_File+0x128>)
 80012ec:	6938      	ldr	r0, [r7, #16]
 80012ee:	f00e fead 	bl	801004c <siprintf>
			Send_Uart(buf);
 80012f2:	6938      	ldr	r0, [r7, #16]
 80012f4:	f7ff fe1e 	bl	8000f34 <Send_Uart>
			free(buf);
 80012f8:	6938      	ldr	r0, [r7, #16]
 80012fa:	f00e f8d9 	bl	800f4b0 <free>
		    return fresult;
 80012fe:	4b25      	ldr	r3, [pc, #148]	@ (8001394 <Create_File+0x11c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	e040      	b.n	8001386 <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001304:	2064      	movs	r0, #100	@ 0x64
 8001306:	f00e f8cb 	bl	800f4a0 <malloc>
 800130a:	4603      	mov	r3, r0
 800130c:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	4924      	ldr	r1, [pc, #144]	@ (80013a4 <Create_File+0x12c>)
 8001312:	69f8      	ldr	r0, [r7, #28]
 8001314:	f00e fe9a 	bl	801004c <siprintf>
			Send_Uart(buf);
 8001318:	69f8      	ldr	r0, [r7, #28]
 800131a:	f7ff fe0b 	bl	8000f34 <Send_Uart>
			free(buf);
 800131e:	69f8      	ldr	r0, [r7, #28]
 8001320:	f00e f8c6 	bl	800f4b0 <free>
		}

		fresult = f_close(&USBHFile);
 8001324:	481d      	ldr	r0, [pc, #116]	@ (800139c <Create_File+0x124>)
 8001326:	f00d f89f 	bl	800e468 <f_close>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <Create_File+0x11c>)
 8001330:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001332:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <Create_File+0x11c>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d013      	beq.n	8001362 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 800133a:	2064      	movs	r0, #100	@ 0x64
 800133c:	f00e f8b0 	bl	800f4a0 <malloc>
 8001340:	4603      	mov	r3, r0
 8001342:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <Create_File+0x11c>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4916      	ldr	r1, [pc, #88]	@ (80013a8 <Create_File+0x130>)
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f00e fe7c 	bl	801004c <siprintf>
			Send_Uart(buf);
 8001354:	6978      	ldr	r0, [r7, #20]
 8001356:	f7ff fded 	bl	8000f34 <Send_Uart>
			free(buf);
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f00e f8a8 	bl	800f4b0 <free>
 8001360:	e00f      	b.n	8001382 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001362:	2064      	movs	r0, #100	@ 0x64
 8001364:	f00e f89c 	bl	800f4a0 <malloc>
 8001368:	4603      	mov	r3, r0
 800136a:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	490f      	ldr	r1, [pc, #60]	@ (80013ac <Create_File+0x134>)
 8001370:	69b8      	ldr	r0, [r7, #24]
 8001372:	f00e fe6b 	bl	801004c <siprintf>
			Send_Uart(buf);
 8001376:	69b8      	ldr	r0, [r7, #24]
 8001378:	f7ff fddc 	bl	8000f34 <Send_Uart>
			free(buf);
 800137c:	69b8      	ldr	r0, [r7, #24]
 800137e:	f00e f897 	bl	800f4b0 <free>
		}
	}
    return fresult;
 8001382:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <Create_File+0x11c>)
 8001384:	781b      	ldrb	r3, [r3, #0]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000218 	.word	0x20000218
 8001394:	20000338 	.word	0x20000338
 8001398:	08012408 	.word	0x08012408
 800139c:	200013e8 	.word	0x200013e8
 80013a0:	08012440 	.word	0x08012440
 80013a4:	08012468 	.word	0x08012468
 80013a8:	080124a8 	.word	0x080124a8
 80013ac:	080123e8 	.word	0x080123e8

080013b0 <Update_File>:

FRESULT Update_File (const char *name, const char *data)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	@ 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 80013ba:	495e      	ldr	r1, [pc, #376]	@ (8001534 <Update_File+0x184>)
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f00d f989 	bl	800e6d4 <f_stat>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001538 <Update_File+0x188>)
 80013c8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80013ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001538 <Update_File+0x188>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d012      	beq.n	80013f8 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 80013d2:	2064      	movs	r0, #100	@ 0x64
 80013d4:	f00e f864 	bl	800f4a0 <malloc>
 80013d8:	4603      	mov	r3, r0
 80013da:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	4957      	ldr	r1, [pc, #348]	@ (800153c <Update_File+0x18c>)
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f00e fe33 	bl	801004c <siprintf>
		Send_Uart (buf);
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f7ff fda4 	bl	8000f34 <Send_Uart>
		free(buf);
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f00e f85f 	bl	800f4b0 <free>
	    return fresult;
 80013f2:	4b51      	ldr	r3, [pc, #324]	@ (8001538 <Update_File+0x188>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	e098      	b.n	800152a <Update_File+0x17a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_APPEND | FA_WRITE);
 80013f8:	2232      	movs	r2, #50	@ 0x32
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4850      	ldr	r0, [pc, #320]	@ (8001540 <Update_File+0x190>)
 80013fe:	f00c fa6f 	bl	800d8e0 <f_open>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4b4c      	ldr	r3, [pc, #304]	@ (8001538 <Update_File+0x188>)
 8001408:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800140a:	4b4b      	ldr	r3, [pc, #300]	@ (8001538 <Update_File+0x188>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d015      	beq.n	800143e <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001412:	2064      	movs	r0, #100	@ 0x64
 8001414:	f00e f844 	bl	800f4a0 <malloc>
 8001418:	4603      	mov	r3, r0
 800141a:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 800141c:	4b46      	ldr	r3, [pc, #280]	@ (8001538 <Update_File+0x188>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4947      	ldr	r1, [pc, #284]	@ (8001544 <Update_File+0x194>)
 8001426:	6938      	ldr	r0, [r7, #16]
 8001428:	f00e fe10 	bl	801004c <siprintf>
	    	Send_Uart(buf);
 800142c:	6938      	ldr	r0, [r7, #16]
 800142e:	f7ff fd81 	bl	8000f34 <Send_Uart>
	        free(buf);
 8001432:	6938      	ldr	r0, [r7, #16]
 8001434:	f00e f83c 	bl	800f4b0 <free>
	        return fresult;
 8001438:	4b3f      	ldr	r3, [pc, #252]	@ (8001538 <Update_File+0x188>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	e075      	b.n	800152a <Update_File+0x17a>
	    }

    	char *buf = malloc(100*sizeof(char));
 800143e:	2064      	movs	r0, #100	@ 0x64
 8001440:	f00e f82e 	bl	800f4a0 <malloc>
 8001444:	4603      	mov	r3, r0
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
    	sprintf (buf, "Opening file-->  *%s*  To UPDATE data in it\n", name);
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	493f      	ldr	r1, [pc, #252]	@ (8001548 <Update_File+0x198>)
 800144c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800144e:	f00e fdfd 	bl	801004c <siprintf>
    	Send_Uart(buf);
 8001452:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001454:	f7ff fd6e 	bl	8000f34 <Send_Uart>
        free(buf);
 8001458:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800145a:	f00e f829 	bl	800f4b0 <free>

	    /* Writing text */
	    fresult = f_write(&USBHFile, data, strlen (data), &bw);
 800145e:	6838      	ldr	r0, [r7, #0]
 8001460:	f7fe ff16 	bl	8000290 <strlen>
 8001464:	4602      	mov	r2, r0
 8001466:	4b39      	ldr	r3, [pc, #228]	@ (800154c <Update_File+0x19c>)
 8001468:	6839      	ldr	r1, [r7, #0]
 800146a:	4835      	ldr	r0, [pc, #212]	@ (8001540 <Update_File+0x190>)
 800146c:	f00c fd07 	bl	800de7e <f_write>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	4b30      	ldr	r3, [pc, #192]	@ (8001538 <Update_File+0x188>)
 8001476:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001478:	4b2f      	ldr	r3, [pc, #188]	@ (8001538 <Update_File+0x188>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d013      	beq.n	80014a8 <Update_File+0xf8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001480:	2064      	movs	r0, #100	@ 0x64
 8001482:	f00e f80d 	bl	800f4a0 <malloc>
 8001486:	4603      	mov	r3, r0
 8001488:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 800148a:	4b2b      	ldr	r3, [pc, #172]	@ (8001538 <Update_File+0x188>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	492f      	ldr	r1, [pc, #188]	@ (8001550 <Update_File+0x1a0>)
 8001494:	69f8      	ldr	r0, [r7, #28]
 8001496:	f00e fdd9 	bl	801004c <siprintf>
	    	Send_Uart(buf);
 800149a:	69f8      	ldr	r0, [r7, #28]
 800149c:	f7ff fd4a 	bl	8000f34 <Send_Uart>
	    	free(buf);
 80014a0:	69f8      	ldr	r0, [r7, #28]
 80014a2:	f00e f805 	bl	800f4b0 <free>
 80014a6:	e00f      	b.n	80014c8 <Update_File+0x118>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80014a8:	2064      	movs	r0, #100	@ 0x64
 80014aa:	f00d fff9 	bl	800f4a0 <malloc>
 80014ae:	4603      	mov	r3, r0
 80014b0:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4927      	ldr	r1, [pc, #156]	@ (8001554 <Update_File+0x1a4>)
 80014b6:	6a38      	ldr	r0, [r7, #32]
 80014b8:	f00e fdc8 	bl	801004c <siprintf>
	    	Send_Uart(buf);
 80014bc:	6a38      	ldr	r0, [r7, #32]
 80014be:	f7ff fd39 	bl	8000f34 <Send_Uart>
	    	free(buf);
 80014c2:	6a38      	ldr	r0, [r7, #32]
 80014c4:	f00d fff4 	bl	800f4b0 <free>
	    }

	    /* Close file */
	    fresult = f_close(&USBHFile);
 80014c8:	481d      	ldr	r0, [pc, #116]	@ (8001540 <Update_File+0x190>)
 80014ca:	f00c ffcd 	bl	800e468 <f_close>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <Update_File+0x188>)
 80014d4:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80014d6:	4b18      	ldr	r3, [pc, #96]	@ (8001538 <Update_File+0x188>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d013      	beq.n	8001506 <Update_File+0x156>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80014de:	2064      	movs	r0, #100	@ 0x64
 80014e0:	f00d ffde 	bl	800f4a0 <malloc>
 80014e4:	4603      	mov	r3, r0
 80014e6:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 80014e8:	4b13      	ldr	r3, [pc, #76]	@ (8001538 <Update_File+0x188>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4919      	ldr	r1, [pc, #100]	@ (8001558 <Update_File+0x1a8>)
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f00e fdaa 	bl	801004c <siprintf>
	    	Send_Uart(buf);
 80014f8:	6978      	ldr	r0, [r7, #20]
 80014fa:	f7ff fd1b 	bl	8000f34 <Send_Uart>
	    	free(buf);
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f00d ffd6 	bl	800f4b0 <free>
 8001504:	e00f      	b.n	8001526 <Update_File+0x176>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001506:	2064      	movs	r0, #100	@ 0x64
 8001508:	f00d ffca 	bl	800f4a0 <malloc>
 800150c:	4603      	mov	r3, r0
 800150e:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4912      	ldr	r1, [pc, #72]	@ (800155c <Update_File+0x1ac>)
 8001514:	69b8      	ldr	r0, [r7, #24]
 8001516:	f00e fd99 	bl	801004c <siprintf>
	    	Send_Uart(buf);
 800151a:	69b8      	ldr	r0, [r7, #24]
 800151c:	f7ff fd0a 	bl	8000f34 <Send_Uart>
	    	free(buf);
 8001520:	69b8      	ldr	r0, [r7, #24]
 8001522:	f00d ffc5 	bl	800f4b0 <free>
	     }
	}
    return fresult;
 8001526:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <Update_File+0x188>)
 8001528:	781b      	ldrb	r3, [r3, #0]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3728      	adds	r7, #40	@ 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000218 	.word	0x20000218
 8001538:	20000338 	.word	0x20000338
 800153c:	08012234 	.word	0x08012234
 8001540:	200013e8 	.word	0x200013e8
 8001544:	08012254 	.word	0x08012254
 8001548:	080124cc 	.word	0x080124cc
 800154c:	2000033c 	.word	0x2000033c
 8001550:	080124fc 	.word	0x080124fc
 8001554:	08012524 	.word	0x08012524
 8001558:	080123c0 	.word	0x080123c0
 800155c:	080123e8 	.word	0x080123e8

08001560 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (const char *name)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f00d f9f3 	bl	800e954 <f_mkdir>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <Create_Dir+0x74>)
 8001574:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001576:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <Create_Dir+0x74>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d110      	bne.n	80015a0 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 800157e:	2064      	movs	r0, #100	@ 0x64
 8001580:	f00d ff8e 	bl	800f4a0 <malloc>
 8001584:	4603      	mov	r3, r0
 8001586:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	4913      	ldr	r1, [pc, #76]	@ (80015d8 <Create_Dir+0x78>)
 800158c:	68b8      	ldr	r0, [r7, #8]
 800158e:	f00e fd5d 	bl	801004c <siprintf>
    	Send_Uart (buf);
 8001592:	68b8      	ldr	r0, [r7, #8]
 8001594:	f7ff fcce 	bl	8000f34 <Send_Uart>
    	free(buf);
 8001598:	68b8      	ldr	r0, [r7, #8]
 800159a:	f00d ff89 	bl	800f4b0 <free>
 800159e:	e012      	b.n	80015c6 <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 80015a0:	2064      	movs	r0, #100	@ 0x64
 80015a2:	f00d ff7d 	bl	800f4a0 <malloc>
 80015a6:	4603      	mov	r3, r0
 80015a8:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 80015aa:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <Create_Dir+0x74>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	490a      	ldr	r1, [pc, #40]	@ (80015dc <Create_Dir+0x7c>)
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f00e fd49 	bl	801004c <siprintf>
    	Send_Uart(buf);
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f7ff fcba 	bl	8000f34 <Send_Uart>
    	free(buf);
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f00d ff75 	bl	800f4b0 <free>
    }
    return fresult;
 80015c6:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <Create_Dir+0x74>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000338 	.word	0x20000338
 80015d8:	08012588 	.word	0x08012588
 80015dc:	080125b0 	.word	0x080125b0

080015e0 <Check_USB_Details>:

void Check_USB_Details (void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 80015e6:	4a30      	ldr	r2, [pc, #192]	@ (80016a8 <Check_USB_Details+0xc8>)
 80015e8:	4930      	ldr	r1, [pc, #192]	@ (80016ac <Check_USB_Details+0xcc>)
 80015ea:	4831      	ldr	r0, [pc, #196]	@ (80016b0 <Check_USB_Details+0xd0>)
 80015ec:	f00d f8ab 	bl	800e746 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 80015f0:	4b2d      	ldr	r3, [pc, #180]	@ (80016a8 <Check_USB_Details+0xc8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	3b02      	subs	r3, #2
 80015f8:	4a2b      	ldr	r2, [pc, #172]	@ (80016a8 <Check_USB_Details+0xc8>)
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	8952      	ldrh	r2, [r2, #10]
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ff8e 	bl	8000524 <__aeabi_ui2d>
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b29      	ldr	r3, [pc, #164]	@ (80016b4 <Check_USB_Details+0xd4>)
 800160e:	f7ff f803 	bl	8000618 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fad5 	bl	8000bc8 <__aeabi_d2uiz>
 800161e:	4603      	mov	r3, r0
 8001620:	4a25      	ldr	r2, [pc, #148]	@ (80016b8 <Check_USB_Details+0xd8>)
 8001622:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 8001624:	201e      	movs	r0, #30
 8001626:	f00d ff3b 	bl	800f4a0 <malloc>
 800162a:	4603      	mov	r3, r0
 800162c:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 800162e:	4b22      	ldr	r3, [pc, #136]	@ (80016b8 <Check_USB_Details+0xd8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	4921      	ldr	r1, [pc, #132]	@ (80016bc <Check_USB_Details+0xdc>)
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f00e fd08 	bl	801004c <siprintf>
    Send_Uart(buf);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff fc79 	bl	8000f34 <Send_Uart>
    free(buf);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f00d ff34 	bl	800f4b0 <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 8001648:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <Check_USB_Details+0xc8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	895b      	ldrh	r3, [r3, #10]
 800164e:	461a      	mov	r2, r3
 8001650:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <Check_USB_Details+0xcc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	fb02 f303 	mul.w	r3, r2, r3
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff63 	bl	8000524 <__aeabi_ui2d>
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <Check_USB_Details+0xd4>)
 8001664:	f7fe ffd8 	bl	8000618 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f7ff faaa 	bl	8000bc8 <__aeabi_d2uiz>
 8001674:	4603      	mov	r3, r0
 8001676:	4a12      	ldr	r2, [pc, #72]	@ (80016c0 <Check_USB_Details+0xe0>)
 8001678:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 800167a:	201e      	movs	r0, #30
 800167c:	f00d ff10 	bl	800f4a0 <malloc>
 8001680:	4603      	mov	r3, r0
 8001682:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <Check_USB_Details+0xe0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	490e      	ldr	r1, [pc, #56]	@ (80016c4 <Check_USB_Details+0xe4>)
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f00e fcdd 	bl	801004c <siprintf>
    Send_Uart(buf);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fc4e 	bl	8000f34 <Send_Uart>
    free(buf);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f00d ff09 	bl	800f4b0 <free>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000340 	.word	0x20000340
 80016ac:	20000344 	.word	0x20000344
 80016b0:	080125dc 	.word	0x080125dc
 80016b4:	3fe00000 	.word	0x3fe00000
 80016b8:	20000348 	.word	0x20000348
 80016bc:	080125e0 	.word	0x080125e0
 80016c0:	2000034c 	.word	0x2000034c
 80016c4:	080125f8 	.word	0x080125f8

080016c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016cc:	f000 faf6 	bl	8001cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d0:	f000 f85e 	bl	8001790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d4:	f000 f8f0 	bl	80018b8 <MX_GPIO_Init>
  MX_FATFS_Init();
 80016d8:	f005 f976 	bl	80069c8 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 80016dc:	f00d fbaa 	bl	800ee34 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80016e0:	f000 f8c0 	bl	8001864 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  u_can_application = 0;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	@ (800175c <main+0x94>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
  //HAL_Delay(100);
  while(1)
  {
	  MX_USB_HOST_Process();
 80016ea:	f00d fbc9 	bl	800ee80 <MX_USB_HOST_Process>
	  if (Appli_state == APPLICATION_READY)
 80016ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <main+0x98>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d000      	beq.n	80016f8 <main+0x30>
	  MX_USB_HOST_Process();
 80016f6:	e7f8      	b.n	80016ea <main+0x22>
	  {
		  break;
 80016f8:	bf00      	nop
	  }
  }

  if (Appli_state == APPLICATION_READY) // ana is parcacigi
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <main+0x98>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d129      	bne.n	8001756 <main+0x8e>
  {
	  Mount_USB();
 8001702:	f7ff fc2d 	bl	8000f60 <Mount_USB>

	  Check_USB_Details();   // check space details
 8001706:	f7ff ff6b 	bl	80015e0 <Check_USB_Details>

	  Scan_USB("/");   // scan for files and directories
 800170a:	4816      	ldr	r0, [pc, #88]	@ (8001764 <main+0x9c>)
 800170c:	f7ff fc4a 	bl	8000fa4 <Scan_USB>

	  Create_File("/ROOTFILE.txt");
 8001710:	4815      	ldr	r0, [pc, #84]	@ (8001768 <main+0xa0>)
 8001712:	f7ff fdb1 	bl	8001278 <Create_File>
	  Write_File("/ROOTFILE.txt", "This data should be in root file\n");
 8001716:	4915      	ldr	r1, [pc, #84]	@ (800176c <main+0xa4>)
 8001718:	4813      	ldr	r0, [pc, #76]	@ (8001768 <main+0xa0>)
 800171a:	f7ff fce9 	bl	80010f0 <Write_File>

	  Create_Dir("/DIR1");
 800171e:	4814      	ldr	r0, [pc, #80]	@ (8001770 <main+0xa8>)
 8001720:	f7ff ff1e 	bl	8001560 <Create_Dir>
	  Create_File("/DIR1/DIR1FILE.txt");
 8001724:	4813      	ldr	r0, [pc, #76]	@ (8001774 <main+0xac>)
 8001726:	f7ff fda7 	bl	8001278 <Create_File>
	  Write_File("/DIR1/DIR1FILE.txt", "This data should be in DIR1 file\n");
 800172a:	4913      	ldr	r1, [pc, #76]	@ (8001778 <main+0xb0>)
 800172c:	4811      	ldr	r0, [pc, #68]	@ (8001774 <main+0xac>)
 800172e:	f7ff fcdf 	bl	80010f0 <Write_File>

	  Create_Dir("/DIR2");
 8001732:	4812      	ldr	r0, [pc, #72]	@ (800177c <main+0xb4>)
 8001734:	f7ff ff14 	bl	8001560 <Create_Dir>
	  Create_Dir("/DIR2/SUBDIR1");
 8001738:	4811      	ldr	r0, [pc, #68]	@ (8001780 <main+0xb8>)
 800173a:	f7ff ff11 	bl	8001560 <Create_Dir>
	  Create_File("/DIR2/SUBDIR1/DIR2FILE.txt");
 800173e:	4811      	ldr	r0, [pc, #68]	@ (8001784 <main+0xbc>)
 8001740:	f7ff fd9a 	bl	8001278 <Create_File>
	  Write_File("/DIR2/SUBDIR1/DIR2FILE.txt", "This data should be in DIR2/SUBDIR1 file\n as i have nothing better to write/n so i just wrote this\n");
 8001744:	4910      	ldr	r1, [pc, #64]	@ (8001788 <main+0xc0>)
 8001746:	480f      	ldr	r0, [pc, #60]	@ (8001784 <main+0xbc>)
 8001748:	f7ff fcd2 	bl	80010f0 <Write_File>

	  Update_File("/ROOTFILE.txt", "This updated data must be in second line of Root File\n");
 800174c:	490f      	ldr	r1, [pc, #60]	@ (800178c <main+0xc4>)
 800174e:	4806      	ldr	r0, [pc, #24]	@ (8001768 <main+0xa0>)
 8001750:	f7ff fe2e 	bl	80013b0 <Update_File>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	e7fd      	b.n	8001756 <main+0x8e>
 800175a:	bf00      	nop
 800175c:	20000398 	.word	0x20000398
 8001760:	20002cac 	.word	0x20002cac
 8001764:	08012610 	.word	0x08012610
 8001768:	08012614 	.word	0x08012614
 800176c:	08012624 	.word	0x08012624
 8001770:	08012648 	.word	0x08012648
 8001774:	08012650 	.word	0x08012650
 8001778:	08012664 	.word	0x08012664
 800177c:	08012688 	.word	0x08012688
 8001780:	08012690 	.word	0x08012690
 8001784:	080126a0 	.word	0x080126a0
 8001788:	080126bc 	.word	0x080126bc
 800178c:	08012720 	.word	0x08012720

08001790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b094      	sub	sp, #80	@ 0x50
 8001794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	2230      	movs	r2, #48	@ 0x30
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f00e fcb9 	bl	8010116 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	4b28      	ldr	r3, [pc, #160]	@ (800185c <SystemClock_Config+0xcc>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017bc:	4a27      	ldr	r2, [pc, #156]	@ (800185c <SystemClock_Config+0xcc>)
 80017be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c4:	4b25      	ldr	r3, [pc, #148]	@ (800185c <SystemClock_Config+0xcc>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <SystemClock_Config+0xd0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a21      	ldr	r2, [pc, #132]	@ (8001860 <SystemClock_Config+0xd0>)
 80017da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <SystemClock_Config+0xd0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017ec:	2301      	movs	r3, #1
 80017ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f6:	2302      	movs	r3, #2
 80017f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001800:	2304      	movs	r3, #4
 8001802:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001804:	23a8      	movs	r3, #168	@ 0xa8
 8001806:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001808:	2302      	movs	r3, #2
 800180a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800180c:	2307      	movs	r3, #7
 800180e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001810:	f107 0320 	add.w	r3, r7, #32
 8001814:	4618      	mov	r0, r3
 8001816:	f002 febf 	bl	8004598 <HAL_RCC_OscConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001820:	f000 f89a 	bl	8001958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001824:	230f      	movs	r3, #15
 8001826:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001828:	2302      	movs	r3, #2
 800182a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001830:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001834:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800183a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	2105      	movs	r1, #5
 8001842:	4618      	mov	r0, r3
 8001844:	f003 f920 	bl	8004a88 <HAL_RCC_ClockConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800184e:	f000 f883 	bl	8001958 <Error_Handler>
  }
}
 8001852:	bf00      	nop
 8001854:	3750      	adds	r7, #80	@ 0x50
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40007000 	.word	0x40007000

08001864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001868:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 800186a:	4a12      	ldr	r2, [pc, #72]	@ (80018b4 <MX_USART2_UART_Init+0x50>)
 800186c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 8001870:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001876:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800187c:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001882:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001888:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 800188a:	220c      	movs	r2, #12
 800188c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188e:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <MX_USART2_UART_Init+0x4c>)
 800189c:	f003 fb14 	bl	8004ec8 <HAL_UART_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018a6:	f000 f857 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000350 	.word	0x20000350
 80018b4:	40004400 	.word	0x40004400

080018b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001950 <MX_GPIO_Init+0x98>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001950 <MX_GPIO_Init+0x98>)
 80018d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <MX_GPIO_Init+0x98>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <MX_GPIO_Init+0x98>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a17      	ldr	r2, [pc, #92]	@ (8001950 <MX_GPIO_Init+0x98>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <MX_GPIO_Init+0x98>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <MX_GPIO_Init+0x98>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a10      	ldr	r2, [pc, #64]	@ (8001950 <MX_GPIO_Init+0x98>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <MX_GPIO_Init+0x98>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	2101      	movs	r1, #1
 8001926:	480b      	ldr	r0, [pc, #44]	@ (8001954 <MX_GPIO_Init+0x9c>)
 8001928:	f000 fd0c 	bl	8002344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800192c:	2301      	movs	r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	4619      	mov	r1, r3
 8001942:	4804      	ldr	r0, [pc, #16]	@ (8001954 <MX_GPIO_Init+0x9c>)
 8001944:	f000 fb62 	bl	800200c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	40020800 	.word	0x40020800

08001958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800195c:	b672      	cpsid	i
}
 800195e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <Error_Handler+0x8>

08001964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <HAL_MspInit+0x4c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	4a0f      	ldr	r2, [pc, #60]	@ (80019b0 <HAL_MspInit+0x4c>)
 8001974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001978:	6453      	str	r3, [r2, #68]	@ 0x44
 800197a:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <HAL_MspInit+0x4c>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <HAL_MspInit+0x4c>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	4a08      	ldr	r2, [pc, #32]	@ (80019b0 <HAL_MspInit+0x4c>)
 8001990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001994:	6413      	str	r3, [r2, #64]	@ 0x40
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_MspInit+0x4c>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800

080019b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	@ 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a19      	ldr	r2, [pc, #100]	@ (8001a38 <HAL_UART_MspInit+0x84>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d12b      	bne.n	8001a2e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	4b18      	ldr	r3, [pc, #96]	@ (8001a3c <HAL_UART_MspInit+0x88>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	4a17      	ldr	r2, [pc, #92]	@ (8001a3c <HAL_UART_MspInit+0x88>)
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <HAL_UART_MspInit+0x88>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HAL_UART_MspInit+0x88>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	4a10      	ldr	r2, [pc, #64]	@ (8001a3c <HAL_UART_MspInit+0x88>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a02:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <HAL_UART_MspInit+0x88>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a0e:	230c      	movs	r3, #12
 8001a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a1e:	2307      	movs	r3, #7
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	4805      	ldr	r0, [pc, #20]	@ (8001a40 <HAL_UART_MspInit+0x8c>)
 8001a2a:	f000 faef 	bl	800200c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a2e:	bf00      	nop
 8001a30:	3728      	adds	r7, #40	@ 0x28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40004400 	.word	0x40004400
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020000 	.word	0x40020000

08001a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <NMI_Handler+0x4>

08001a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <BusFault_Handler+0x4>

08001a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <UsageFault_Handler+0x4>

08001a6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9a:	f000 f961 	bl	8001d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001aa8:	4802      	ldr	r0, [pc, #8]	@ (8001ab4 <OTG_FS_IRQHandler+0x10>)
 8001aaa:	f000 ff21 	bl	80028f0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20002cb0 	.word	0x20002cb0

08001ab8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return 1;
 8001abc:	2301      	movs	r3, #1
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <_kill>:

int _kill(int pid, int sig)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ad2:	f00e fb83 	bl	80101dc <__errno>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2216      	movs	r2, #22
 8001ada:	601a      	str	r2, [r3, #0]
  return -1;
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_exit>:

void _exit (int status)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ffe7 	bl	8001ac8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001afa:	bf00      	nop
 8001afc:	e7fd      	b.n	8001afa <_exit+0x12>

08001afe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e00a      	b.n	8001b26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b10:	f3af 8000 	nop.w
 8001b14:	4601      	mov	r1, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	60ba      	str	r2, [r7, #8]
 8001b1c:	b2ca      	uxtb	r2, r1
 8001b1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3301      	adds	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	dbf0      	blt.n	8001b10 <_read+0x12>
  }

  return len;
 8001b2e:	687b      	ldr	r3, [r7, #4]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	e009      	b.n	8001b5e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	60ba      	str	r2, [r7, #8]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	dbf1      	blt.n	8001b4a <_write+0x12>
  }
  return len;
 8001b66:	687b      	ldr	r3, [r7, #4]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_close>:

int _close(int file)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b98:	605a      	str	r2, [r3, #4]
  return 0;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <_isatty>:

int _isatty(int file)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb0:	2301      	movs	r3, #1
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be0:	4a14      	ldr	r2, [pc, #80]	@ (8001c34 <_sbrk+0x5c>)
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <_sbrk+0x60>)
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bec:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <_sbrk+0x64>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	@ (8001c40 <_sbrk+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d207      	bcs.n	8001c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c08:	f00e fae8 	bl	80101dc <__errno>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	220c      	movs	r2, #12
 8001c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	e009      	b.n	8001c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a05      	ldr	r2, [pc, #20]	@ (8001c3c <_sbrk+0x64>)
 8001c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20020000 	.word	0x20020000
 8001c38:	00000400 	.word	0x00000400
 8001c3c:	2000039c 	.word	0x2000039c
 8001c40:	200031e0 	.word	0x200031e0

08001c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <SystemInit+0x20>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c4e:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <SystemInit+0x20>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ca0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c6c:	f7ff ffea 	bl	8001c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c70:	480c      	ldr	r0, [pc, #48]	@ (8001ca4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c72:	490d      	ldr	r1, [pc, #52]	@ (8001ca8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c74:	4a0d      	ldr	r2, [pc, #52]	@ (8001cac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c78:	e002      	b.n	8001c80 <LoopCopyDataInit>

08001c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7e:	3304      	adds	r3, #4

08001c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c84:	d3f9      	bcc.n	8001c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c88:	4c0a      	ldr	r4, [pc, #40]	@ (8001cb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c8c:	e001      	b.n	8001c92 <LoopFillZerobss>

08001c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c90:	3204      	adds	r2, #4

08001c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c94:	d3fb      	bcc.n	8001c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c96:	f00e faa7 	bl	80101e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c9a:	f7ff fd15 	bl	80016c8 <main>
  bx  lr    
 8001c9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001cac:	08012fa4 	.word	0x08012fa4
  ldr r2, =_sbss
 8001cb0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001cb4:	200031dc 	.word	0x200031dc

08001cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC_IRQHandler>
	...

08001cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <HAL_Init+0x40>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cfc <HAL_Init+0x40>)
 8001cc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <HAL_Init+0x40>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <HAL_Init+0x40>)
 8001cd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd8:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <HAL_Init+0x40>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a07      	ldr	r2, [pc, #28]	@ (8001cfc <HAL_Init+0x40>)
 8001cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce4:	2003      	movs	r0, #3
 8001ce6:	f000 f94f 	bl	8001f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cea:	200f      	movs	r0, #15
 8001cec:	f000 f808 	bl	8001d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf0:	f7ff fe38 	bl	8001964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023c00 	.word	0x40023c00

08001d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d08:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <HAL_InitTick+0x54>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <HAL_InitTick+0x58>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f967 	bl	8001ff2 <HAL_SYSTICK_Config>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00e      	b.n	8001d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b0f      	cmp	r3, #15
 8001d32:	d80a      	bhi.n	8001d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d34:	2200      	movs	r2, #0
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f000 f92f 	bl	8001f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d40:	4a06      	ldr	r2, [pc, #24]	@ (8001d5c <HAL_InitTick+0x5c>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e000      	b.n	8001d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	20000004 	.word	0x20000004

08001d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d64:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_IncTick+0x20>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_IncTick+0x24>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	4a04      	ldr	r2, [pc, #16]	@ (8001d84 <HAL_IncTick+0x24>)
 8001d72:	6013      	str	r3, [r2, #0]
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000008 	.word	0x20000008
 8001d84:	200003a0 	.word	0x200003a0

08001d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	@ (8001d9c <HAL_GetTick+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	200003a0 	.word	0x200003a0

08001da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da8:	f7ff ffee 	bl	8001d88 <HAL_GetTick>
 8001dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db8:	d005      	beq.n	8001dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dba:	4b0a      	ldr	r3, [pc, #40]	@ (8001de4 <HAL_Delay+0x44>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dc6:	bf00      	nop
 8001dc8:	f7ff ffde 	bl	8001d88 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d8f7      	bhi.n	8001dc8 <HAL_Delay+0x28>
  {
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000008 	.word	0x20000008

08001de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e04:	4013      	ands	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1a:	4a04      	ldr	r2, [pc, #16]	@ (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	60d3      	str	r3, [r2, #12]
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e34:	4b04      	ldr	r3, [pc, #16]	@ (8001e48 <__NVIC_GetPriorityGrouping+0x18>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	f003 0307 	and.w	r3, r3, #7
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	db0b      	blt.n	8001e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	f003 021f 	and.w	r2, r3, #31
 8001e64:	4907      	ldr	r1, [pc, #28]	@ (8001e84 <__NVIC_EnableIRQ+0x38>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000e100 	.word	0xe000e100

08001e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	db0a      	blt.n	8001eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	490c      	ldr	r1, [pc, #48]	@ (8001ed4 <__NVIC_SetPriority+0x4c>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb0:	e00a      	b.n	8001ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4908      	ldr	r1, [pc, #32]	@ (8001ed8 <__NVIC_SetPriority+0x50>)
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	3b04      	subs	r3, #4
 8001ec0:	0112      	lsls	r2, r2, #4
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	761a      	strb	r2, [r3, #24]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000e100 	.word	0xe000e100
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	@ 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f1c3 0307 	rsb	r3, r3, #7
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	bf28      	it	cs
 8001efa:	2304      	movcs	r3, #4
 8001efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3304      	adds	r3, #4
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d902      	bls.n	8001f0c <NVIC_EncodePriority+0x30>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3b03      	subs	r3, #3
 8001f0a:	e000      	b.n	8001f0e <NVIC_EncodePriority+0x32>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	f04f 32ff 	mov.w	r2, #4294967295
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	401a      	ands	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f24:	f04f 31ff 	mov.w	r1, #4294967295
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	43d9      	mvns	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	4313      	orrs	r3, r2
         );
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3724      	adds	r7, #36	@ 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f54:	d301      	bcc.n	8001f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00f      	b.n	8001f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <SysTick_Config+0x40>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f62:	210f      	movs	r1, #15
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f7ff ff8e 	bl	8001e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <SysTick_Config+0x40>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f72:	4b04      	ldr	r3, [pc, #16]	@ (8001f84 <SysTick_Config+0x40>)
 8001f74:	2207      	movs	r2, #7
 8001f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	e000e010 	.word	0xe000e010

08001f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ff29 	bl	8001de8 <__NVIC_SetPriorityGrouping>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb0:	f7ff ff3e 	bl	8001e30 <__NVIC_GetPriorityGrouping>
 8001fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	6978      	ldr	r0, [r7, #20]
 8001fbc:	f7ff ff8e 	bl	8001edc <NVIC_EncodePriority>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff5d 	bl	8001e88 <__NVIC_SetPriority>
}
 8001fce:	bf00      	nop
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff31 	bl	8001e4c <__NVIC_EnableIRQ>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ffa2 	bl	8001f44 <SysTick_Config>
 8002000:	4603      	mov	r3, r0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	e16b      	b.n	8002300 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002028:	2201      	movs	r2, #1
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	429a      	cmp	r2, r3
 8002042:	f040 815a 	bne.w	80022fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b01      	cmp	r3, #1
 8002050:	d005      	beq.n	800205e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800205a:	2b02      	cmp	r3, #2
 800205c:	d130      	bne.n	80020c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002094:	2201      	movs	r2, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 0201 	and.w	r2, r3, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d017      	beq.n	80020fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	2203      	movs	r2, #3
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d123      	bne.n	8002150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	08da      	lsrs	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3208      	adds	r2, #8
 8002110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	220f      	movs	r2, #15
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	08da      	lsrs	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3208      	adds	r2, #8
 800214a:	69b9      	ldr	r1, [r7, #24]
 800214c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0203 	and.w	r2, r3, #3
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80b4 	beq.w	80022fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	4b60      	ldr	r3, [pc, #384]	@ (8002318 <HAL_GPIO_Init+0x30c>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219a:	4a5f      	ldr	r2, [pc, #380]	@ (8002318 <HAL_GPIO_Init+0x30c>)
 800219c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002318 <HAL_GPIO_Init+0x30c>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ae:	4a5b      	ldr	r2, [pc, #364]	@ (800231c <HAL_GPIO_Init+0x310>)
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3302      	adds	r3, #2
 80021b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	220f      	movs	r2, #15
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a52      	ldr	r2, [pc, #328]	@ (8002320 <HAL_GPIO_Init+0x314>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d02b      	beq.n	8002232 <HAL_GPIO_Init+0x226>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a51      	ldr	r2, [pc, #324]	@ (8002324 <HAL_GPIO_Init+0x318>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d025      	beq.n	800222e <HAL_GPIO_Init+0x222>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a50      	ldr	r2, [pc, #320]	@ (8002328 <HAL_GPIO_Init+0x31c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01f      	beq.n	800222a <HAL_GPIO_Init+0x21e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4f      	ldr	r2, [pc, #316]	@ (800232c <HAL_GPIO_Init+0x320>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d019      	beq.n	8002226 <HAL_GPIO_Init+0x21a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002330 <HAL_GPIO_Init+0x324>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_GPIO_Init+0x216>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002334 <HAL_GPIO_Init+0x328>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00d      	beq.n	800221e <HAL_GPIO_Init+0x212>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4c      	ldr	r2, [pc, #304]	@ (8002338 <HAL_GPIO_Init+0x32c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d007      	beq.n	800221a <HAL_GPIO_Init+0x20e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4b      	ldr	r2, [pc, #300]	@ (800233c <HAL_GPIO_Init+0x330>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d101      	bne.n	8002216 <HAL_GPIO_Init+0x20a>
 8002212:	2307      	movs	r3, #7
 8002214:	e00e      	b.n	8002234 <HAL_GPIO_Init+0x228>
 8002216:	2308      	movs	r3, #8
 8002218:	e00c      	b.n	8002234 <HAL_GPIO_Init+0x228>
 800221a:	2306      	movs	r3, #6
 800221c:	e00a      	b.n	8002234 <HAL_GPIO_Init+0x228>
 800221e:	2305      	movs	r3, #5
 8002220:	e008      	b.n	8002234 <HAL_GPIO_Init+0x228>
 8002222:	2304      	movs	r3, #4
 8002224:	e006      	b.n	8002234 <HAL_GPIO_Init+0x228>
 8002226:	2303      	movs	r3, #3
 8002228:	e004      	b.n	8002234 <HAL_GPIO_Init+0x228>
 800222a:	2302      	movs	r3, #2
 800222c:	e002      	b.n	8002234 <HAL_GPIO_Init+0x228>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_GPIO_Init+0x228>
 8002232:	2300      	movs	r3, #0
 8002234:	69fa      	ldr	r2, [r7, #28]
 8002236:	f002 0203 	and.w	r2, r2, #3
 800223a:	0092      	lsls	r2, r2, #2
 800223c:	4093      	lsls	r3, r2
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002244:	4935      	ldr	r1, [pc, #212]	@ (800231c <HAL_GPIO_Init+0x310>)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	3302      	adds	r3, #2
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002252:	4b3b      	ldr	r3, [pc, #236]	@ (8002340 <HAL_GPIO_Init+0x334>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002276:	4a32      	ldr	r2, [pc, #200]	@ (8002340 <HAL_GPIO_Init+0x334>)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800227c:	4b30      	ldr	r3, [pc, #192]	@ (8002340 <HAL_GPIO_Init+0x334>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022a0:	4a27      	ldr	r2, [pc, #156]	@ (8002340 <HAL_GPIO_Init+0x334>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022a6:	4b26      	ldr	r3, [pc, #152]	@ (8002340 <HAL_GPIO_Init+0x334>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002340 <HAL_GPIO_Init+0x334>)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <HAL_GPIO_Init+0x334>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022f4:	4a12      	ldr	r2, [pc, #72]	@ (8002340 <HAL_GPIO_Init+0x334>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3301      	adds	r3, #1
 80022fe:	61fb      	str	r3, [r7, #28]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	2b0f      	cmp	r3, #15
 8002304:	f67f ae90 	bls.w	8002028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3724      	adds	r7, #36	@ 0x24
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800
 800231c:	40013800 	.word	0x40013800
 8002320:	40020000 	.word	0x40020000
 8002324:	40020400 	.word	0x40020400
 8002328:	40020800 	.word	0x40020800
 800232c:	40020c00 	.word	0x40020c00
 8002330:	40021000 	.word	0x40021000
 8002334:	40021400 	.word	0x40021400
 8002338:	40021800 	.word	0x40021800
 800233c:	40021c00 	.word	0x40021c00
 8002340:	40013c00 	.word	0x40013c00

08002344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	807b      	strh	r3, [r7, #2]
 8002350:	4613      	mov	r3, r2
 8002352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002354:	787b      	ldrb	r3, [r7, #1]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800235a:	887a      	ldrh	r2, [r7, #2]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002360:	e003      	b.n	800236a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002362:	887b      	ldrh	r3, [r7, #2]
 8002364:	041a      	lsls	r2, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	619a      	str	r2, [r3, #24]
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af02      	add	r7, sp, #8
 800237c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e059      	b.n	800243c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f00c fdae 	bl	800ef04 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2203      	movs	r2, #3
 80023ac:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023b6:	d102      	bne.n	80023be <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 fa01 	bl	80057ca <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	7c1a      	ldrb	r2, [r3, #16]
 80023d0:	f88d 2000 	strb.w	r2, [sp]
 80023d4:	3304      	adds	r3, #4
 80023d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d8:	f003 f982 	bl	80056e0 <USB_CoreInit>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2202      	movs	r2, #2
 80023e6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e026      	b.n	800243c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2101      	movs	r1, #1
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 f9f9 	bl	80057ec <USB_SetCurrentMode>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e017      	b.n	800243c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7c1a      	ldrb	r2, [r3, #16]
 8002414:	f88d 2000 	strb.w	r2, [sp]
 8002418:	3304      	adds	r3, #4
 800241a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800241c:	f003 fba2 	bl	8005b64 <USB_HostInit>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2202      	movs	r2, #2
 800242a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e004      	b.n	800243c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b08b      	sub	sp, #44	@ 0x2c
 8002448:	af04      	add	r7, sp, #16
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	4608      	mov	r0, r1
 800244e:	4611      	mov	r1, r2
 8002450:	461a      	mov	r2, r3
 8002452:	4603      	mov	r3, r0
 8002454:	70fb      	strb	r3, [r7, #3]
 8002456:	460b      	mov	r3, r1
 8002458:	70bb      	strb	r3, [r7, #2]
 800245a:	4613      	mov	r3, r2
 800245c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800245e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002460:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_HCD_HC_Init+0x2c>
 800246c:	2302      	movs	r3, #2
 800246e:	e09d      	b.n	80025ac <HAL_HCD_HC_Init+0x168>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	3319      	adds	r3, #25
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	3314      	adds	r3, #20
 800249c:	787a      	ldrb	r2, [r7, #1]
 800249e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	3315      	adds	r3, #21
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	3326      	adds	r3, #38	@ 0x26
 80024c4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80024c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80024ca:	78fa      	ldrb	r2, [r7, #3]
 80024cc:	78bb      	ldrb	r3, [r7, #2]
 80024ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024d2:	b2d8      	uxtb	r0, r3
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	3316      	adds	r3, #22
 80024e2:	4602      	mov	r2, r0
 80024e4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	4619      	mov	r1, r3
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fba4 	bl	8002c38 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80024f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	da0a      	bge.n	800250e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	3317      	adds	r3, #23
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e009      	b.n	8002522 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	3317      	adds	r3, #23
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f003 fc80 	bl	8005e2c <USB_GetHostSpeed>
 800252c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800252e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002532:	2b01      	cmp	r3, #1
 8002534:	d10b      	bne.n	800254e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002536:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800253a:	2b01      	cmp	r3, #1
 800253c:	d107      	bne.n	800254e <HAL_HCD_HC_Init+0x10a>
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d104      	bne.n	800254e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2bbc      	cmp	r3, #188	@ 0xbc
 8002548:	d901      	bls.n	800254e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800254a:	23bc      	movs	r3, #188	@ 0xbc
 800254c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800254e:	78fa      	ldrb	r2, [r7, #3]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	3318      	adds	r3, #24
 800255e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002562:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	b298      	uxth	r0, r3
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	3328      	adds	r3, #40	@ 0x28
 8002578:	4602      	mov	r2, r0
 800257a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	b29b      	uxth	r3, r3
 8002584:	787c      	ldrb	r4, [r7, #1]
 8002586:	78ba      	ldrb	r2, [r7, #2]
 8002588:	78f9      	ldrb	r1, [r7, #3]
 800258a:	9302      	str	r3, [sp, #8]
 800258c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	4623      	mov	r3, r4
 800259a:	f003 fc6f 	bl	8005e7c <USB_HC_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd90      	pop	{r4, r7, pc}

080025b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	4608      	mov	r0, r1
 80025be:	4611      	mov	r1, r2
 80025c0:	461a      	mov	r2, r3
 80025c2:	4603      	mov	r3, r0
 80025c4:	70fb      	strb	r3, [r7, #3]
 80025c6:	460b      	mov	r3, r1
 80025c8:	70bb      	strb	r3, [r7, #2]
 80025ca:	4613      	mov	r3, r2
 80025cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	3317      	adds	r3, #23
 80025de:	78ba      	ldrb	r2, [r7, #2]
 80025e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	3326      	adds	r3, #38	@ 0x26
 80025f2:	787a      	ldrb	r2, [r7, #1]
 80025f4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80025f6:	7c3b      	ldrb	r3, [r7, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d114      	bne.n	8002626 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	332a      	adds	r3, #42	@ 0x2a
 800260c:	2203      	movs	r2, #3
 800260e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	3319      	adds	r3, #25
 8002620:	7f3a      	ldrb	r2, [r7, #28]
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e009      	b.n	800263a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002626:	78fa      	ldrb	r2, [r7, #3]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	332a      	adds	r3, #42	@ 0x2a
 8002636:	2202      	movs	r2, #2
 8002638:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800263a:	787b      	ldrb	r3, [r7, #1]
 800263c:	2b03      	cmp	r3, #3
 800263e:	f200 8102 	bhi.w	8002846 <HAL_HCD_HC_SubmitRequest+0x292>
 8002642:	a201      	add	r2, pc, #4	@ (adr r2, 8002648 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002648:	08002659 	.word	0x08002659
 800264c:	08002831 	.word	0x08002831
 8002650:	0800271d 	.word	0x0800271d
 8002654:	080027a7 	.word	0x080027a7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002658:	7c3b      	ldrb	r3, [r7, #16]
 800265a:	2b01      	cmp	r3, #1
 800265c:	f040 80f5 	bne.w	800284a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002660:	78bb      	ldrb	r3, [r7, #2]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d12d      	bne.n	80026c2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002666:	8b3b      	ldrh	r3, [r7, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	333d      	adds	r3, #61	@ 0x3d
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	333d      	adds	r3, #61	@ 0x3d
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10a      	bne.n	80026ac <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	332a      	adds	r3, #42	@ 0x2a
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80026aa:	e0ce      	b.n	800284a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	332a      	adds	r3, #42	@ 0x2a
 80026bc:	2202      	movs	r2, #2
 80026be:	701a      	strb	r2, [r3, #0]
      break;
 80026c0:	e0c3      	b.n	800284a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80026c2:	78fa      	ldrb	r2, [r7, #3]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	331a      	adds	r3, #26
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	f040 80b8 	bne.w	800284a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	333c      	adds	r3, #60	@ 0x3c
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10a      	bne.n	8002706 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	332a      	adds	r3, #42	@ 0x2a
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
      break;
 8002704:	e0a1      	b.n	800284a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002706:	78fa      	ldrb	r2, [r7, #3]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	332a      	adds	r3, #42	@ 0x2a
 8002716:	2202      	movs	r2, #2
 8002718:	701a      	strb	r2, [r3, #0]
      break;
 800271a:	e096      	b.n	800284a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800271c:	78bb      	ldrb	r3, [r7, #2]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d120      	bne.n	8002764 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	333d      	adds	r3, #61	@ 0x3d
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10a      	bne.n	800274e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	332a      	adds	r3, #42	@ 0x2a
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800274c:	e07e      	b.n	800284c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	332a      	adds	r3, #42	@ 0x2a
 800275e:	2202      	movs	r2, #2
 8002760:	701a      	strb	r2, [r3, #0]
      break;
 8002762:	e073      	b.n	800284c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	333c      	adds	r3, #60	@ 0x3c
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	332a      	adds	r3, #42	@ 0x2a
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
      break;
 800278e:	e05d      	b.n	800284c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	332a      	adds	r3, #42	@ 0x2a
 80027a0:	2202      	movs	r2, #2
 80027a2:	701a      	strb	r2, [r3, #0]
      break;
 80027a4:	e052      	b.n	800284c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80027a6:	78bb      	ldrb	r3, [r7, #2]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d120      	bne.n	80027ee <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	333d      	adds	r3, #61	@ 0x3d
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10a      	bne.n	80027d8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	332a      	adds	r3, #42	@ 0x2a
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80027d6:	e039      	b.n	800284c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	332a      	adds	r3, #42	@ 0x2a
 80027e8:	2202      	movs	r2, #2
 80027ea:	701a      	strb	r2, [r3, #0]
      break;
 80027ec:	e02e      	b.n	800284c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	333c      	adds	r3, #60	@ 0x3c
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10a      	bne.n	800281a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	332a      	adds	r3, #42	@ 0x2a
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
      break;
 8002818:	e018      	b.n	800284c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	332a      	adds	r3, #42	@ 0x2a
 800282a:	2202      	movs	r2, #2
 800282c:	701a      	strb	r2, [r3, #0]
      break;
 800282e:	e00d      	b.n	800284c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	332a      	adds	r3, #42	@ 0x2a
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
      break;
 8002844:	e002      	b.n	800284c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002846:	bf00      	nop
 8002848:	e000      	b.n	800284c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800284a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	332c      	adds	r3, #44	@ 0x2c
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	8b39      	ldrh	r1, [r7, #24]
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4403      	add	r3, r0
 8002870:	3334      	adds	r3, #52	@ 0x34
 8002872:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	334c      	adds	r3, #76	@ 0x4c
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	3338      	adds	r3, #56	@ 0x38
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	3315      	adds	r3, #21
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	334d      	adds	r3, #77	@ 0x4d
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	4613      	mov	r3, r2
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	3310      	adds	r3, #16
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4413      	add	r3, r2
 80028d8:	1d19      	adds	r1, r3, #4
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	799b      	ldrb	r3, [r3, #6]
 80028de:	461a      	mov	r2, r3
 80028e0:	f003 fbf8 	bl	80060d4 <USB_HC_StartXfer>
 80028e4:	4603      	mov	r3, r0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop

080028f0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f003 f8e6 	bl	8005ad8 <USB_GetMode>
 800290c:	4603      	mov	r3, r0
 800290e:	2b01      	cmp	r3, #1
 8002910:	f040 80fb 	bne.w	8002b0a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f003 f8a9 	bl	8005a70 <USB_ReadInterrupts>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80f1 	beq.w	8002b08 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f003 f8a0 	bl	8005a70 <USB_ReadInterrupts>
 8002930:	4603      	mov	r3, r0
 8002932:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002936:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800293a:	d104      	bne.n	8002946 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002944:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f003 f890 	bl	8005a70 <USB_ReadInterrupts>
 8002950:	4603      	mov	r3, r0
 8002952:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002956:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800295a:	d104      	bne.n	8002966 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002964:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f003 f880 	bl	8005a70 <USB_ReadInterrupts>
 8002970:	4603      	mov	r3, r0
 8002972:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002976:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800297a:	d104      	bne.n	8002986 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002984:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f003 f870 	bl	8005a70 <USB_ReadInterrupts>
 8002990:	4603      	mov	r3, r0
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b02      	cmp	r3, #2
 8002998:	d103      	bne.n	80029a2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2202      	movs	r2, #2
 80029a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f003 f862 	bl	8005a70 <USB_ReadInterrupts>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029b6:	d120      	bne.n	80029fa <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80029c0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d113      	bne.n	80029fa <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80029d2:	2110      	movs	r1, #16
 80029d4:	6938      	ldr	r0, [r7, #16]
 80029d6:	f002 ff55 	bl	8005884 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80029da:	6938      	ldr	r0, [r7, #16]
 80029dc:	f002 ff84 	bl	80058e8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7a5b      	ldrb	r3, [r3, #9]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d105      	bne.n	80029f4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2101      	movs	r1, #1
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 f97c 	bl	8005cec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f00c fb03 	bl	800f000 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f003 f836 	bl	8005a70 <USB_ReadInterrupts>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a0e:	d102      	bne.n	8002a16 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f001 fd4d 	bl	80044b0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 f828 	bl	8005a70 <USB_ReadInterrupts>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d106      	bne.n	8002a38 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f00c facc 	bl	800efc8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2208      	movs	r2, #8
 8002a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f003 f817 	bl	8005a70 <USB_ReadInterrupts>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a4c:	d139      	bne.n	8002ac2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f003 fdb8 	bl	80065c8 <USB_HC_ReadInterrupt>
 8002a58:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e025      	b.n	8002aac <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d018      	beq.n	8002aa6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a8a:	d106      	bne.n	8002a9a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	4619      	mov	r1, r3
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f905 	bl	8002ca2 <HCD_HC_IN_IRQHandler>
 8002a98:	e005      	b.n	8002aa6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 ff67 	bl	8003974 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	795b      	ldrb	r3, [r3, #5]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d3d3      	bcc.n	8002a60 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ac0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f002 ffd2 	bl	8005a70 <USB_ReadInterrupts>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d101      	bne.n	8002ada <HAL_HCD_IRQHandler+0x1ea>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <HAL_HCD_IRQHandler+0x1ec>
 8002ada:	2300      	movs	r3, #0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d014      	beq.n	8002b0a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0210 	bic.w	r2, r2, #16
 8002aee:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f001 fbfe 	bl	80042f2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0210 	orr.w	r2, r2, #16
 8002b04:	619a      	str	r2, [r3, #24]
 8002b06:	e000      	b.n	8002b0a <HAL_HCD_IRQHandler+0x21a>
      return;
 8002b08:	bf00      	nop
    }
  }
}
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_HCD_Start+0x16>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e013      	b.n	8002b4e <HAL_HCD_Start+0x3e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2101      	movs	r1, #1
 8002b34:	4618      	mov	r0, r3
 8002b36:	f003 f940 	bl	8005dba <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f002 fe32 	bl	80057a8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_HCD_Stop+0x16>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e00d      	b.n	8002b88 <HAL_HCD_Stop+0x32>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f003 fe93 	bl	80068a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f003 f8e2 	bl	8005d66 <USB_ResetPort>
 8002ba2:	4603      	mov	r3, r0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	334c      	adds	r3, #76	@ 0x4c
 8002bc8:	781b      	ldrb	r3, [r3, #0]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	460b      	mov	r3, r1
 8002be0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	3338      	adds	r3, #56	@ 0x38
 8002bf2:	681b      	ldr	r3, [r3, #0]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 f924 	bl	8005e5a <USB_GetCurrentFrame>
 8002c12:	4603      	mov	r3, r0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f003 f8ff 	bl	8005e2c <USB_GetHostSpeed>
 8002c2e:	4603      	mov	r3, r0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	331a      	adds	r3, #26
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	331b      	adds	r3, #27
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	3325      	adds	r3, #37	@ 0x25
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3324      	adds	r3, #36	@ 0x24
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f002 fee8 	bl	8005a96 <USB_ReadChInterrupts>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d11a      	bne.n	8002d06 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2304      	movs	r3, #4
 8002ce0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	334d      	adds	r3, #77	@ 0x4d
 8002cf2:	2207      	movs	r2, #7
 8002cf4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 fc73 	bl	80065ea <USB_HC_Halt>
 8002d04:	e09e      	b.n	8002e44 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f002 fec1 	bl	8005a96 <USB_ReadChInterrupts>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d1e:	d11b      	bne.n	8002d58 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d32:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	334d      	adds	r3, #77	@ 0x4d
 8002d44:	2208      	movs	r2, #8
 8002d46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f003 fc4a 	bl	80065ea <USB_HC_Halt>
 8002d56:	e075      	b.n	8002e44 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f002 fe98 	bl	8005a96 <USB_ReadChInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d11a      	bne.n	8002da6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	2308      	movs	r3, #8
 8002d80:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	334d      	adds	r3, #77	@ 0x4d
 8002d92:	2206      	movs	r2, #6
 8002d94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f003 fc23 	bl	80065ea <USB_HC_Halt>
 8002da4:	e04e      	b.n	8002e44 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f002 fe71 	bl	8005a96 <USB_ReadChInterrupts>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dbe:	d11b      	bne.n	8002df8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	334d      	adds	r3, #77	@ 0x4d
 8002de4:	2209      	movs	r2, #9
 8002de6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f003 fbfa 	bl	80065ea <USB_HC_Halt>
 8002df6:	e025      	b.n	8002e44 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f002 fe48 	bl	8005a96 <USB_ReadChInterrupts>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0c:	2b80      	cmp	r3, #128	@ 0x80
 8002e0e:	d119      	bne.n	8002e44 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2380      	movs	r3, #128	@ 0x80
 8002e20:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	334d      	adds	r3, #77	@ 0x4d
 8002e32:	2207      	movs	r2, #7
 8002e34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f003 fbd3 	bl	80065ea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 fe22 	bl	8005a96 <USB_ReadChInterrupts>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e5c:	d112      	bne.n	8002e84 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f003 fbbf 	bl	80065ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e78:	461a      	mov	r2, r3
 8002e7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e7e:	6093      	str	r3, [r2, #8]
 8002e80:	f000 bd75 	b.w	800396e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f002 fe02 	bl	8005a96 <USB_ReadChInterrupts>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	f040 8128 	bne.w	80030ee <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2320      	movs	r3, #32
 8002eae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	331b      	adds	r3, #27
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d119      	bne.n	8002efa <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	331b      	adds	r3, #27
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	0151      	lsls	r1, r2, #5
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	440a      	add	r2, r1
 8002ef0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ef8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	799b      	ldrb	r3, [r3, #6]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d01b      	beq.n	8002f3a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	3330      	adds	r3, #48	@ 0x30
 8002f12:	6819      	ldr	r1, [r3, #0]
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	1ac9      	subs	r1, r1, r3
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4403      	add	r3, r0
 8002f36:	3338      	adds	r3, #56	@ 0x38
 8002f38:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	334d      	adds	r3, #77	@ 0x4d
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3344      	adds	r3, #68	@ 0x44
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2301      	movs	r3, #1
 8002f72:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	3326      	adds	r3, #38	@ 0x26
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	3326      	adds	r3, #38	@ 0x26
 8002f9a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d110      	bne.n	8002fc2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f003 fb1e 	bl	80065ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fba:	461a      	mov	r2, r3
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	6093      	str	r3, [r2, #8]
 8002fc0:	e03d      	b.n	800303e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	3326      	adds	r3, #38	@ 0x26
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d00a      	beq.n	8002fee <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3326      	adds	r3, #38	@ 0x26
 8002fe8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d127      	bne.n	800303e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	0151      	lsls	r1, r2, #5
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	440a      	add	r2, r1
 8003004:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003008:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800300c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	334c      	adds	r3, #76	@ 0x4c
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	334c      	adds	r3, #76	@ 0x4c
 8003032:	781a      	ldrb	r2, [r3, #0]
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	4619      	mov	r1, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f00b ffef 	bl	800f01c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	799b      	ldrb	r3, [r3, #6]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d13b      	bne.n	80030be <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	3338      	adds	r3, #56	@ 0x38
 8003056:	6819      	ldr	r1, [r3, #0]
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4403      	add	r3, r0
 8003066:	3328      	adds	r3, #40	@ 0x28
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	440b      	add	r3, r1
 800306c:	1e59      	subs	r1, r3, #1
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4403      	add	r3, r0
 800307c:	3328      	adds	r3, #40	@ 0x28
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	fbb1 f3f3 	udiv	r3, r1, r3
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8470 	beq.w	800396e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	333c      	adds	r3, #60	@ 0x3c
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	f083 0301 	eor.w	r3, r3, #1
 80030a6:	b2d8      	uxtb	r0, r3
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	333c      	adds	r3, #60	@ 0x3c
 80030b6:	4602      	mov	r2, r0
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	f000 bc58 	b.w	800396e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	333c      	adds	r3, #60	@ 0x3c
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	f083 0301 	eor.w	r3, r3, #1
 80030d6:	b2d8      	uxtb	r0, r3
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	333c      	adds	r3, #60	@ 0x3c
 80030e6:	4602      	mov	r2, r0
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	f000 bc40 	b.w	800396e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	4611      	mov	r1, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f002 fccd 	bl	8005a96 <USB_ReadChInterrupts>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b20      	cmp	r3, #32
 8003104:	d131      	bne.n	800316a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4413      	add	r3, r2
 800310e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003112:	461a      	mov	r2, r3
 8003114:	2320      	movs	r3, #32
 8003116:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	331a      	adds	r3, #26
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	f040 841f 	bne.w	800396e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	331b      	adds	r3, #27
 8003140:	2201      	movs	r2, #1
 8003142:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	334d      	adds	r3, #77	@ 0x4d
 8003154:	2203      	movs	r2, #3
 8003156:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f003 fa42 	bl	80065ea <USB_HC_Halt>
 8003166:	f000 bc02 	b.w	800396e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f002 fc8f 	bl	8005a96 <USB_ReadChInterrupts>
 8003178:	4603      	mov	r3, r0
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b02      	cmp	r3, #2
 8003180:	f040 8305 	bne.w	800378e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4413      	add	r3, r2
 800318c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003190:	461a      	mov	r2, r3
 8003192:	2302      	movs	r3, #2
 8003194:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	334d      	adds	r3, #77	@ 0x4d
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d114      	bne.n	80031d6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	334d      	adds	r3, #77	@ 0x4d
 80031bc:	2202      	movs	r2, #2
 80031be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	334c      	adds	r3, #76	@ 0x4c
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	e2cc      	b.n	8003770 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	334d      	adds	r3, #77	@ 0x4d
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b06      	cmp	r3, #6
 80031ea:	d114      	bne.n	8003216 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	334d      	adds	r3, #77	@ 0x4d
 80031fc:	2202      	movs	r2, #2
 80031fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	334c      	adds	r3, #76	@ 0x4c
 8003210:	2205      	movs	r2, #5
 8003212:	701a      	strb	r2, [r3, #0]
 8003214:	e2ac      	b.n	8003770 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	334d      	adds	r3, #77	@ 0x4d
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b07      	cmp	r3, #7
 800322a:	d00b      	beq.n	8003244 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	334d      	adds	r3, #77	@ 0x4d
 800323c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800323e:	2b09      	cmp	r3, #9
 8003240:	f040 80a6 	bne.w	8003390 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	334d      	adds	r3, #77	@ 0x4d
 8003254:	2202      	movs	r2, #2
 8003256:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	3344      	adds	r3, #68	@ 0x44
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	1c59      	adds	r1, r3, #1
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4403      	add	r3, r0
 8003278:	3344      	adds	r3, #68	@ 0x44
 800327a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	3344      	adds	r3, #68	@ 0x44
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d943      	bls.n	800331a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	3344      	adds	r3, #68	@ 0x44
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	331a      	adds	r3, #26
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d123      	bne.n	8003304 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	331b      	adds	r3, #27
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	331c      	adds	r3, #28
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	0151      	lsls	r1, r2, #5
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	440a      	add	r2, r1
 80032fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003302:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	334c      	adds	r3, #76	@ 0x4c
 8003314:	2204      	movs	r2, #4
 8003316:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003318:	e229      	b.n	800376e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	334c      	adds	r3, #76	@ 0x4c
 800332a:	2202      	movs	r2, #2
 800332c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	3326      	adds	r3, #38	@ 0x26
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00b      	beq.n	800335c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	3326      	adds	r3, #38	@ 0x26
 8003354:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003356:	2b02      	cmp	r3, #2
 8003358:	f040 8209 	bne.w	800376e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003372:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800337a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4413      	add	r3, r2
 8003384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003388:	461a      	mov	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800338e:	e1ee      	b.n	800376e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	334d      	adds	r3, #77	@ 0x4d
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	f040 80c8 	bne.w	8003538 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	334d      	adds	r3, #77	@ 0x4d
 80033b8:	2202      	movs	r2, #2
 80033ba:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	331b      	adds	r3, #27
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	f040 81ce 	bne.w	8003770 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	3326      	adds	r3, #38	@ 0x26
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d16b      	bne.n	80034c2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	3348      	adds	r3, #72	@ 0x48
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	1c59      	adds	r1, r3, #1
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4403      	add	r3, r0
 800340a:	3348      	adds	r3, #72	@ 0x48
 800340c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	3348      	adds	r3, #72	@ 0x48
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d943      	bls.n	80034ac <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	3348      	adds	r3, #72	@ 0x48
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	331b      	adds	r3, #27
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	3344      	adds	r3, #68	@ 0x44
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d809      	bhi.n	8003476 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	331c      	adds	r3, #28
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4413      	add	r3, r2
 800347e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	0151      	lsls	r1, r2, #5
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	440a      	add	r2, r1
 800348c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003494:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	334c      	adds	r3, #76	@ 0x4c
 80034a6:	2204      	movs	r2, #4
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e014      	b.n	80034d6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	334c      	adds	r3, #76	@ 0x4c
 80034bc:	2202      	movs	r2, #2
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	e009      	b.n	80034d6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	334c      	adds	r3, #76	@ 0x4c
 80034d2:	2202      	movs	r2, #2
 80034d4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3326      	adds	r3, #38	@ 0x26
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00b      	beq.n	8003504 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	3326      	adds	r3, #38	@ 0x26
 80034fc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034fe:	2b02      	cmp	r3, #2
 8003500:	f040 8136 	bne.w	8003770 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4413      	add	r3, r2
 800350c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800351a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003522:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4413      	add	r3, r2
 800352c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003530:	461a      	mov	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e11b      	b.n	8003770 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	334d      	adds	r3, #77	@ 0x4d
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b03      	cmp	r3, #3
 800354c:	f040 8081 	bne.w	8003652 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	334d      	adds	r3, #77	@ 0x4d
 8003560:	2202      	movs	r2, #2
 8003562:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	331b      	adds	r3, #27
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b01      	cmp	r3, #1
 8003578:	f040 80fa 	bne.w	8003770 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	334c      	adds	r3, #76	@ 0x4c
 800358c:	2202      	movs	r2, #2
 800358e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	78fa      	ldrb	r2, [r7, #3]
 80035a0:	0151      	lsls	r1, r2, #5
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	440a      	add	r2, r1
 80035a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ae:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	0151      	lsls	r1, r2, #5
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	440a      	add	r2, r1
 80035c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035ce:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	0151      	lsls	r1, r2, #5
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	440a      	add	r2, r1
 80035e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035ea:	f023 0320 	bic.w	r3, r3, #32
 80035ee:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	3326      	adds	r3, #38	@ 0x26
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003606:	78fa      	ldrb	r2, [r7, #3]
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	3326      	adds	r3, #38	@ 0x26
 8003616:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003618:	2b02      	cmp	r3, #2
 800361a:	f040 80a9 	bne.w	8003770 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4413      	add	r3, r2
 8003626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003634:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800363c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4413      	add	r3, r2
 8003646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800364a:	461a      	mov	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	e08e      	b.n	8003770 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	334d      	adds	r3, #77	@ 0x4d
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b04      	cmp	r3, #4
 8003666:	d143      	bne.n	80036f0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	334d      	adds	r3, #77	@ 0x4d
 8003678:	2202      	movs	r2, #2
 800367a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	334c      	adds	r3, #76	@ 0x4c
 800368c:	2202      	movs	r2, #2
 800368e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	3326      	adds	r3, #38	@ 0x26
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	3326      	adds	r3, #38	@ 0x26
 80036b6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d159      	bne.n	8003770 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e8:	461a      	mov	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e03f      	b.n	8003770 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	334d      	adds	r3, #77	@ 0x4d
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b08      	cmp	r3, #8
 8003704:	d126      	bne.n	8003754 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	334d      	adds	r3, #77	@ 0x4d
 8003716:	2202      	movs	r2, #2
 8003718:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	3344      	adds	r3, #68	@ 0x44
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	1c59      	adds	r1, r3, #1
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4403      	add	r3, r0
 800373a:	3344      	adds	r3, #68	@ 0x44
 800373c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	334c      	adds	r3, #76	@ 0x4c
 800374e:	2204      	movs	r2, #4
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	e00d      	b.n	8003770 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	334d      	adds	r3, #77	@ 0x4d
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b02      	cmp	r3, #2
 8003768:	f000 8100 	beq.w	800396c <HCD_HC_IN_IRQHandler+0xcca>
 800376c:	e000      	b.n	8003770 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800376e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003770:	78fa      	ldrb	r2, [r7, #3]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	1a9b      	subs	r3, r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	334c      	adds	r3, #76	@ 0x4c
 8003780:	781a      	ldrb	r2, [r3, #0]
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	4619      	mov	r1, r3
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f00b fc48 	bl	800f01c <HAL_HCD_HC_NotifyURBChange_Callback>
 800378c:	e0ef      	b.n	800396e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f002 f97d 	bl	8005a96 <USB_ReadChInterrupts>
 800379c:	4603      	mov	r3, r0
 800379e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a2:	2b40      	cmp	r3, #64	@ 0x40
 80037a4:	d12f      	bne.n	8003806 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037b2:	461a      	mov	r2, r3
 80037b4:	2340      	movs	r3, #64	@ 0x40
 80037b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	334d      	adds	r3, #77	@ 0x4d
 80037c8:	2205      	movs	r2, #5
 80037ca:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	331a      	adds	r3, #26
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	3344      	adds	r3, #68	@ 0x44
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	4611      	mov	r1, r2
 80037fe:	4618      	mov	r0, r3
 8003800:	f002 fef3 	bl	80065ea <USB_HC_Halt>
 8003804:	e0b3      	b.n	800396e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	78fa      	ldrb	r2, [r7, #3]
 800380c:	4611      	mov	r1, r2
 800380e:	4618      	mov	r0, r3
 8003810:	f002 f941 	bl	8005a96 <USB_ReadChInterrupts>
 8003814:	4603      	mov	r3, r0
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b10      	cmp	r3, #16
 800381c:	f040 80a7 	bne.w	800396e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	3326      	adds	r3, #38	@ 0x26
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b03      	cmp	r3, #3
 8003834:	d11b      	bne.n	800386e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	3344      	adds	r3, #68	@ 0x44
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	334d      	adds	r3, #77	@ 0x4d
 800385a:	2204      	movs	r2, #4
 800385c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	78fa      	ldrb	r2, [r7, #3]
 8003864:	4611      	mov	r1, r2
 8003866:	4618      	mov	r0, r3
 8003868:	f002 febf 	bl	80065ea <USB_HC_Halt>
 800386c:	e03f      	b.n	80038ee <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	3326      	adds	r3, #38	@ 0x26
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	3326      	adds	r3, #38	@ 0x26
 8003894:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003896:	2b02      	cmp	r3, #2
 8003898:	d129      	bne.n	80038ee <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	3344      	adds	r3, #68	@ 0x44
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	799b      	ldrb	r3, [r3, #6]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HCD_HC_IN_IRQHandler+0xc2a>
 80038b6:	78fa      	ldrb	r2, [r7, #3]
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	331b      	adds	r3, #27
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d110      	bne.n	80038ee <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	334d      	adds	r3, #77	@ 0x4d
 80038dc:	2204      	movs	r2, #4
 80038de:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f002 fe7e 	bl	80065ea <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	331b      	adds	r3, #27
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d129      	bne.n	8003958 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	331b      	adds	r3, #27
 8003914:	2200      	movs	r2, #0
 8003916:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	0151      	lsls	r1, r2, #5
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	440a      	add	r2, r1
 800392e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003936:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	0151      	lsls	r1, r2, #5
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	440a      	add	r2, r1
 800394e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003952:	f043 0320 	orr.w	r3, r3, #32
 8003956:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4413      	add	r3, r2
 8003960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003964:	461a      	mov	r2, r3
 8003966:	2310      	movs	r3, #16
 8003968:	6093      	str	r3, [r2, #8]
 800396a:	e000      	b.n	800396e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800396c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	4611      	mov	r1, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f002 f87f 	bl	8005a96 <USB_ReadChInterrupts>
 8003998:	4603      	mov	r3, r0
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d11b      	bne.n	80039da <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ae:	461a      	mov	r2, r3
 80039b0:	2304      	movs	r3, #4
 80039b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	334d      	adds	r3, #77	@ 0x4d
 80039c4:	2207      	movs	r2, #7
 80039c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f002 fe0a 	bl	80065ea <USB_HC_Halt>
 80039d6:	f000 bc89 	b.w	80042ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f002 f857 	bl	8005a96 <USB_ReadChInterrupts>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	f040 8082 	bne.w	8003af8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a00:	461a      	mov	r2, r3
 8003a02:	2320      	movs	r3, #32
 8003a04:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	1a9b      	subs	r3, r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	3319      	adds	r3, #25
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d124      	bne.n	8003a66 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	3319      	adds	r3, #25
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	334c      	adds	r3, #76	@ 0x4c
 8003a40:	2202      	movs	r2, #2
 8003a42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	334d      	adds	r3, #77	@ 0x4d
 8003a54:	2203      	movs	r2, #3
 8003a56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	78fa      	ldrb	r2, [r7, #3]
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f002 fdc2 	bl	80065ea <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003a66:	78fa      	ldrb	r2, [r7, #3]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	1a9b      	subs	r3, r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	331a      	adds	r3, #26
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	f040 8437 	bne.w	80042ec <HCD_HC_OUT_IRQHandler+0x978>
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	331b      	adds	r3, #27
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f040 842b 	bne.w	80042ec <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3326      	adds	r3, #38	@ 0x26
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d009      	beq.n	8003ac0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	331b      	adds	r3, #27
 8003abc:	2201      	movs	r2, #1
 8003abe:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	334d      	adds	r3, #77	@ 0x4d
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	78fa      	ldrb	r2, [r7, #3]
 8003ada:	4611      	mov	r1, r2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f002 fd84 	bl	80065ea <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ae2:	78fa      	ldrb	r2, [r7, #3]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	3344      	adds	r3, #68	@ 0x44
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e3f9      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f001 ffc8 	bl	8005a96 <USB_ReadChInterrupts>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b10:	d111      	bne.n	8003b36 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003b12:	78fb      	ldrb	r3, [r7, #3]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b24:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	78fa      	ldrb	r2, [r7, #3]
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f002 fd5b 	bl	80065ea <USB_HC_Halt>
 8003b34:	e3da      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f001 ffa9 	bl	8005a96 <USB_ReadChInterrupts>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d168      	bne.n	8003c20 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	3344      	adds	r3, #68	@ 0x44
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	4611      	mov	r1, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f001 ff93 	bl	8005a96 <USB_ReadChInterrupts>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b76:	2b40      	cmp	r3, #64	@ 0x40
 8003b78:	d112      	bne.n	8003ba0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	3319      	adds	r3, #25
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003b8e:	78fb      	ldrb	r3, [r7, #3]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	2340      	movs	r3, #64	@ 0x40
 8003b9e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003ba0:	78fa      	ldrb	r2, [r7, #3]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	331b      	adds	r3, #27
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d019      	beq.n	8003bea <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003bb6:	78fa      	ldrb	r2, [r7, #3]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	1a9b      	subs	r3, r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	331b      	adds	r3, #27
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	78fa      	ldrb	r2, [r7, #3]
 8003bda:	0151      	lsls	r1, r2, #5
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	440a      	add	r2, r1
 8003be0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003be4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	334d      	adds	r3, #77	@ 0x4d
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	4611      	mov	r1, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f002 fce6 	bl	80065ea <USB_HC_Halt>
 8003c1e:	e365      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f001 ff34 	bl	8005a96 <USB_ReadChInterrupts>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c34:	2b40      	cmp	r3, #64	@ 0x40
 8003c36:	d139      	bne.n	8003cac <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003c38:	78fa      	ldrb	r2, [r7, #3]
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	334d      	adds	r3, #77	@ 0x4d
 8003c48:	2205      	movs	r2, #5
 8003c4a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	331a      	adds	r3, #26
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	3319      	adds	r3, #25
 8003c72:	2201      	movs	r2, #1
 8003c74:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	3344      	adds	r3, #68	@ 0x44
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f002 fca9 	bl	80065ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	2340      	movs	r3, #64	@ 0x40
 8003ca8:	6093      	str	r3, [r2, #8]
 8003caa:	e31f      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f001 feee 	bl	8005a96 <USB_ReadChInterrupts>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d11a      	bne.n	8003cfa <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003cd6:	78fa      	ldrb	r2, [r7, #3]
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	334d      	adds	r3, #77	@ 0x4d
 8003ce6:	2206      	movs	r2, #6
 8003ce8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f002 fc79 	bl	80065ea <USB_HC_Halt>
 8003cf8:	e2f8      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	4611      	mov	r1, r2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 fec7 	bl	8005a96 <USB_ReadChInterrupts>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f003 0310 	and.w	r3, r3, #16
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d144      	bne.n	8003d9c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d12:	78fa      	ldrb	r2, [r7, #3]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	3344      	adds	r3, #68	@ 0x44
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	334d      	adds	r3, #77	@ 0x4d
 8003d36:	2204      	movs	r2, #4
 8003d38:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003d3a:	78fa      	ldrb	r2, [r7, #3]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	3319      	adds	r3, #25
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d114      	bne.n	8003d7a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003d50:	78fa      	ldrb	r2, [r7, #3]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	3318      	adds	r3, #24
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	3319      	adds	r3, #25
 8003d76:	2201      	movs	r2, #1
 8003d78:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f002 fc31 	bl	80065ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d94:	461a      	mov	r2, r3
 8003d96:	2310      	movs	r3, #16
 8003d98:	6093      	str	r3, [r2, #8]
 8003d9a:	e2a7      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	4611      	mov	r1, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f001 fe76 	bl	8005a96 <USB_ReadChInterrupts>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db0:	2b80      	cmp	r3, #128	@ 0x80
 8003db2:	f040 8083 	bne.w	8003ebc <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	799b      	ldrb	r3, [r3, #6]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d111      	bne.n	8003de2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	334d      	adds	r3, #77	@ 0x4d
 8003dce:	2207      	movs	r2, #7
 8003dd0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f002 fc05 	bl	80065ea <USB_HC_Halt>
 8003de0:	e062      	b.n	8003ea8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	3344      	adds	r3, #68	@ 0x44
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	1c59      	adds	r1, r3, #1
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4403      	add	r3, r0
 8003e02:	3344      	adds	r3, #68	@ 0x44
 8003e04:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	3344      	adds	r3, #68	@ 0x44
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d922      	bls.n	8003e62 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	3344      	adds	r3, #68	@ 0x44
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	334c      	adds	r3, #76	@ 0x4c
 8003e40:	2204      	movs	r2, #4
 8003e42:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003e44:	78fa      	ldrb	r2, [r7, #3]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	334c      	adds	r3, #76	@ 0x4c
 8003e54:	781a      	ldrb	r2, [r3, #0]
 8003e56:	78fb      	ldrb	r3, [r7, #3]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f00b f8de 	bl	800f01c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e60:	e022      	b.n	8003ea8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	1a9b      	subs	r3, r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	334c      	adds	r3, #76	@ 0x4c
 8003e72:	2202      	movs	r2, #2
 8003e74:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e76:	78fb      	ldrb	r3, [r7, #3]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e8c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e94:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e96:	78fb      	ldrb	r3, [r7, #3]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2380      	movs	r3, #128	@ 0x80
 8003eb8:	6093      	str	r3, [r2, #8]
 8003eba:	e217      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	78fa      	ldrb	r2, [r7, #3]
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f001 fde6 	bl	8005a96 <USB_ReadChInterrupts>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed4:	d11b      	bne.n	8003f0e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003ed6:	78fa      	ldrb	r2, [r7, #3]
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	334d      	adds	r3, #77	@ 0x4d
 8003ee6:	2209      	movs	r2, #9
 8003ee8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f002 fb79 	bl	80065ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f04:	461a      	mov	r2, r3
 8003f06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f0a:	6093      	str	r3, [r2, #8]
 8003f0c:	e1ee      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	4611      	mov	r1, r2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 fdbd 	bl	8005a96 <USB_ReadChInterrupts>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	f040 81df 	bne.w	80042e6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f34:	461a      	mov	r2, r3
 8003f36:	2302      	movs	r3, #2
 8003f38:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003f3a:	78fa      	ldrb	r2, [r7, #3]
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	334d      	adds	r3, #77	@ 0x4d
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	f040 8093 	bne.w	8004078 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	334d      	adds	r3, #77	@ 0x4d
 8003f62:	2202      	movs	r2, #2
 8003f64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f66:	78fa      	ldrb	r2, [r7, #3]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	1a9b      	subs	r3, r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	334c      	adds	r3, #76	@ 0x4c
 8003f76:	2201      	movs	r2, #1
 8003f78:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003f7a:	78fa      	ldrb	r2, [r7, #3]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	3326      	adds	r3, #38	@ 0x26
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d00b      	beq.n	8003fa8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003f90:	78fa      	ldrb	r2, [r7, #3]
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	4613      	mov	r3, r2
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	3326      	adds	r3, #38	@ 0x26
 8003fa0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	f040 8190 	bne.w	80042c8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	799b      	ldrb	r3, [r3, #6]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d115      	bne.n	8003fdc <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	333d      	adds	r3, #61	@ 0x3d
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	f083 0301 	eor.w	r3, r3, #1
 8003fc8:	b2d8      	uxtb	r0, r3
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	333d      	adds	r3, #61	@ 0x3d
 8003fd8:	4602      	mov	r2, r0
 8003fda:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	799b      	ldrb	r3, [r3, #6]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	f040 8171 	bne.w	80042c8 <HCD_HC_OUT_IRQHandler+0x954>
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	3334      	adds	r3, #52	@ 0x34
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 8165 	beq.w	80042c8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	3334      	adds	r3, #52	@ 0x34
 800400e:	6819      	ldr	r1, [r3, #0]
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4403      	add	r3, r0
 800401e:	3328      	adds	r3, #40	@ 0x28
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	440b      	add	r3, r1
 8004024:	1e59      	subs	r1, r3, #1
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4403      	add	r3, r0
 8004034:	3328      	adds	r3, #40	@ 0x28
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	fbb1 f3f3 	udiv	r3, r1, r3
 800403c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 813f 	beq.w	80042c8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	333d      	adds	r3, #61	@ 0x3d
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	f083 0301 	eor.w	r3, r3, #1
 8004062:	b2d8      	uxtb	r0, r3
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	333d      	adds	r3, #61	@ 0x3d
 8004072:	4602      	mov	r2, r0
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	e127      	b.n	80042c8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	334d      	adds	r3, #77	@ 0x4d
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b03      	cmp	r3, #3
 800408c:	d120      	bne.n	80040d0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800408e:	78fa      	ldrb	r2, [r7, #3]
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	1a9b      	subs	r3, r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	334d      	adds	r3, #77	@ 0x4d
 800409e:	2202      	movs	r2, #2
 80040a0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80040a2:	78fa      	ldrb	r2, [r7, #3]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	331b      	adds	r3, #27
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	f040 8107 	bne.w	80042c8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040ba:	78fa      	ldrb	r2, [r7, #3]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	334c      	adds	r3, #76	@ 0x4c
 80040ca:	2202      	movs	r2, #2
 80040cc:	701a      	strb	r2, [r3, #0]
 80040ce:	e0fb      	b.n	80042c8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	334d      	adds	r3, #77	@ 0x4d
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d13a      	bne.n	800415c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040e6:	78fa      	ldrb	r2, [r7, #3]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	334d      	adds	r3, #77	@ 0x4d
 80040f6:	2202      	movs	r2, #2
 80040f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040fa:	78fa      	ldrb	r2, [r7, #3]
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	4613      	mov	r3, r2
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	1a9b      	subs	r3, r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	334c      	adds	r3, #76	@ 0x4c
 800410a:	2202      	movs	r2, #2
 800410c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800410e:	78fa      	ldrb	r2, [r7, #3]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	331b      	adds	r3, #27
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b01      	cmp	r3, #1
 8004122:	f040 80d1 	bne.w	80042c8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	331b      	adds	r3, #27
 8004136:	2200      	movs	r2, #0
 8004138:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4413      	add	r3, r2
 8004142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	0151      	lsls	r1, r2, #5
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	440a      	add	r2, r1
 8004150:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004158:	6053      	str	r3, [r2, #4]
 800415a:	e0b5      	b.n	80042c8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	334d      	adds	r3, #77	@ 0x4d
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b05      	cmp	r3, #5
 8004170:	d114      	bne.n	800419c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004172:	78fa      	ldrb	r2, [r7, #3]
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	334d      	adds	r3, #77	@ 0x4d
 8004182:	2202      	movs	r2, #2
 8004184:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004186:	78fa      	ldrb	r2, [r7, #3]
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	334c      	adds	r3, #76	@ 0x4c
 8004196:	2202      	movs	r2, #2
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	e095      	b.n	80042c8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	4613      	mov	r3, r2
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	1a9b      	subs	r3, r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	334d      	adds	r3, #77	@ 0x4d
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b06      	cmp	r3, #6
 80041b0:	d114      	bne.n	80041dc <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041b2:	78fa      	ldrb	r2, [r7, #3]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	334d      	adds	r3, #77	@ 0x4d
 80041c2:	2202      	movs	r2, #2
 80041c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	334c      	adds	r3, #76	@ 0x4c
 80041d6:	2205      	movs	r2, #5
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	e075      	b.n	80042c8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80041dc:	78fa      	ldrb	r2, [r7, #3]
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	4613      	mov	r3, r2
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	1a9b      	subs	r3, r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	334d      	adds	r3, #77	@ 0x4d
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b07      	cmp	r3, #7
 80041f0:	d00a      	beq.n	8004208 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80041f2:	78fa      	ldrb	r2, [r7, #3]
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	334d      	adds	r3, #77	@ 0x4d
 8004202:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004204:	2b09      	cmp	r3, #9
 8004206:	d170      	bne.n	80042ea <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004208:	78fa      	ldrb	r2, [r7, #3]
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	4613      	mov	r3, r2
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	334d      	adds	r3, #77	@ 0x4d
 8004218:	2202      	movs	r2, #2
 800421a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	3344      	adds	r3, #68	@ 0x44
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	1c59      	adds	r1, r3, #1
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4403      	add	r3, r0
 800423c:	3344      	adds	r3, #68	@ 0x44
 800423e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004240:	78fa      	ldrb	r2, [r7, #3]
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	3344      	adds	r3, #68	@ 0x44
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d914      	bls.n	8004280 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004256:	78fa      	ldrb	r2, [r7, #3]
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	440b      	add	r3, r1
 8004264:	3344      	adds	r3, #68	@ 0x44
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	334c      	adds	r3, #76	@ 0x4c
 800427a:	2204      	movs	r2, #4
 800427c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800427e:	e022      	b.n	80042c6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004280:	78fa      	ldrb	r2, [r7, #3]
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	4613      	mov	r3, r2
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	1a9b      	subs	r3, r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	334c      	adds	r3, #76	@ 0x4c
 8004290:	2202      	movs	r2, #2
 8004292:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4413      	add	r3, r2
 800429c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042aa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042b2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042c0:	461a      	mov	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042c6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80042c8:	78fa      	ldrb	r2, [r7, #3]
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	334c      	adds	r3, #76	@ 0x4c
 80042d8:	781a      	ldrb	r2, [r3, #0]
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	4619      	mov	r1, r3
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f00a fe9c 	bl	800f01c <HAL_HCD_HC_NotifyURBChange_Callback>
 80042e4:	e002      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80042e6:	bf00      	nop
 80042e8:	e000      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80042ea:	bf00      	nop
  }
}
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b08a      	sub	sp, #40	@ 0x28
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004302:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	0c5b      	lsrs	r3, r3, #17
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004326:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d004      	beq.n	8004338 <HCD_RXQLVL_IRQHandler+0x46>
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b05      	cmp	r3, #5
 8004332:	f000 80b6 	beq.w	80044a2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004336:	e0b7      	b.n	80044a8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80b3 	beq.w	80044a6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4613      	mov	r3, r2
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	1a9b      	subs	r3, r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	332c      	adds	r3, #44	@ 0x2c
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 80a7 	beq.w	80044a6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4613      	mov	r3, r2
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	3338      	adds	r3, #56	@ 0x38
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	18d1      	adds	r1, r2, r3
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4613      	mov	r3, r2
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4403      	add	r3, r0
 800437c:	3334      	adds	r3, #52	@ 0x34
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4299      	cmp	r1, r3
 8004382:	f200 8083 	bhi.w	800448c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4613      	mov	r3, r2
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	332c      	adds	r3, #44	@ 0x2c
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	b292      	uxth	r2, r2
 80043a0:	4619      	mov	r1, r3
 80043a2:	f001 fb0d 	bl	80059c0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4613      	mov	r3, r2
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	332c      	adds	r3, #44	@ 0x2c
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	18d1      	adds	r1, r2, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4613      	mov	r3, r2
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4403      	add	r3, r0
 80043ca:	332c      	adds	r3, #44	@ 0x2c
 80043cc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4613      	mov	r3, r2
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	3338      	adds	r3, #56	@ 0x38
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	18d1      	adds	r1, r2, r3
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4613      	mov	r3, r2
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4403      	add	r3, r0
 80043f2:	3338      	adds	r3, #56	@ 0x38
 80043f4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	0cdb      	lsrs	r3, r3, #19
 8004406:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800440a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4613      	mov	r3, r2
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	3328      	adds	r3, #40	@ 0x28
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4293      	cmp	r3, r2
 8004424:	d13f      	bne.n	80044a6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d03c      	beq.n	80044a6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	4413      	add	r3, r2
 8004434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004442:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800444a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	4413      	add	r3, r2
 8004454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004458:	461a      	mov	r2, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4613      	mov	r3, r2
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	333c      	adds	r3, #60	@ 0x3c
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	f083 0301 	eor.w	r3, r3, #1
 8004474:	b2d8      	uxtb	r0, r3
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4613      	mov	r3, r2
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	1a9b      	subs	r3, r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	333c      	adds	r3, #60	@ 0x3c
 8004486:	4602      	mov	r2, r0
 8004488:	701a      	strb	r2, [r3, #0]
      break;
 800448a:	e00c      	b.n	80044a6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4613      	mov	r3, r2
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	1a9b      	subs	r3, r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	334c      	adds	r3, #76	@ 0x4c
 800449c:	2204      	movs	r2, #4
 800449e:	701a      	strb	r2, [r3, #0]
      break;
 80044a0:	e001      	b.n	80044a6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80044a2:	bf00      	nop
 80044a4:	e000      	b.n	80044a8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80044a6:	bf00      	nop
  }
}
 80044a8:	bf00      	nop
 80044aa:	3728      	adds	r7, #40	@ 0x28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80044dc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d10b      	bne.n	8004500 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d102      	bne.n	80044f8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f00a fd76 	bl	800efe4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f043 0302 	orr.w	r3, r3, #2
 80044fe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b08      	cmp	r3, #8
 8004508:	d132      	bne.n	8004570 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f043 0308 	orr.w	r3, r3, #8
 8004510:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b04      	cmp	r3, #4
 800451a:	d126      	bne.n	800456a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	7a5b      	ldrb	r3, [r3, #9]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d113      	bne.n	800454c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800452a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800452e:	d106      	bne.n	800453e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2102      	movs	r1, #2
 8004536:	4618      	mov	r0, r3
 8004538:	f001 fbd8 	bl	8005cec <USB_InitFSLSPClkSel>
 800453c:	e011      	b.n	8004562 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2101      	movs	r1, #1
 8004544:	4618      	mov	r0, r3
 8004546:	f001 fbd1 	bl	8005cec <USB_InitFSLSPClkSel>
 800454a:	e00a      	b.n	8004562 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	79db      	ldrb	r3, [r3, #7]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d106      	bne.n	8004562 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800455a:	461a      	mov	r2, r3
 800455c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004560:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f00a fd68 	bl	800f038 <HAL_HCD_PortEnabled_Callback>
 8004568:	e002      	b.n	8004570 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f00a fd72 	bl	800f054 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b20      	cmp	r3, #32
 8004578:	d103      	bne.n	8004582 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f043 0320 	orr.w	r3, r3, #32
 8004580:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004588:	461a      	mov	r2, r3
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	6013      	str	r3, [r2, #0]
}
 800458e:	bf00      	nop
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e267      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d075      	beq.n	80046a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045b6:	4b88      	ldr	r3, [pc, #544]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d00c      	beq.n	80045dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045c2:	4b85      	ldr	r3, [pc, #532]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d112      	bne.n	80045f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ce:	4b82      	ldr	r3, [pc, #520]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045da:	d10b      	bne.n	80045f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045dc:	4b7e      	ldr	r3, [pc, #504]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d05b      	beq.n	80046a0 <HAL_RCC_OscConfig+0x108>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d157      	bne.n	80046a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e242      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045fc:	d106      	bne.n	800460c <HAL_RCC_OscConfig+0x74>
 80045fe:	4b76      	ldr	r3, [pc, #472]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a75      	ldr	r2, [pc, #468]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e01d      	b.n	8004648 <HAL_RCC_OscConfig+0xb0>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0x98>
 8004616:	4b70      	ldr	r3, [pc, #448]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a6f      	ldr	r2, [pc, #444]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 800461c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	4b6d      	ldr	r3, [pc, #436]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a6c      	ldr	r2, [pc, #432]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	e00b      	b.n	8004648 <HAL_RCC_OscConfig+0xb0>
 8004630:	4b69      	ldr	r3, [pc, #420]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a68      	ldr	r2, [pc, #416]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4b66      	ldr	r3, [pc, #408]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a65      	ldr	r2, [pc, #404]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d013      	beq.n	8004678 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004650:	f7fd fb9a 	bl	8001d88 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004658:	f7fd fb96 	bl	8001d88 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	@ 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e207      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466a:	4b5b      	ldr	r3, [pc, #364]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0xc0>
 8004676:	e014      	b.n	80046a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7fd fb86 	bl	8001d88 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004680:	f7fd fb82 	bl	8001d88 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	@ 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e1f3      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004692:	4b51      	ldr	r3, [pc, #324]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0xe8>
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d063      	beq.n	8004776 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046ae:	4b4a      	ldr	r3, [pc, #296]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00b      	beq.n	80046d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ba:	4b47      	ldr	r3, [pc, #284]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d11c      	bne.n	8004700 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046c6:	4b44      	ldr	r3, [pc, #272]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d116      	bne.n	8004700 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d2:	4b41      	ldr	r3, [pc, #260]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <HAL_RCC_OscConfig+0x152>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d001      	beq.n	80046ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e1c7      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ea:	4b3b      	ldr	r3, [pc, #236]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	4937      	ldr	r1, [pc, #220]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046fe:	e03a      	b.n	8004776 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d020      	beq.n	800474a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004708:	4b34      	ldr	r3, [pc, #208]	@ (80047dc <HAL_RCC_OscConfig+0x244>)
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470e:	f7fd fb3b 	bl	8001d88 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004716:	f7fd fb37 	bl	8001d88 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e1a8      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004728:	4b2b      	ldr	r3, [pc, #172]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004734:	4b28      	ldr	r3, [pc, #160]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4925      	ldr	r1, [pc, #148]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004744:	4313      	orrs	r3, r2
 8004746:	600b      	str	r3, [r1, #0]
 8004748:	e015      	b.n	8004776 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800474a:	4b24      	ldr	r3, [pc, #144]	@ (80047dc <HAL_RCC_OscConfig+0x244>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fd fb1a 	bl	8001d88 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004758:	f7fd fb16 	bl	8001d88 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e187      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476a:	4b1b      	ldr	r3, [pc, #108]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d036      	beq.n	80047f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d016      	beq.n	80047b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800478a:	4b15      	ldr	r3, [pc, #84]	@ (80047e0 <HAL_RCC_OscConfig+0x248>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004790:	f7fd fafa 	bl	8001d88 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004798:	f7fd faf6 	bl	8001d88 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e167      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047aa:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80047ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f0      	beq.n	8004798 <HAL_RCC_OscConfig+0x200>
 80047b6:	e01b      	b.n	80047f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047b8:	4b09      	ldr	r3, [pc, #36]	@ (80047e0 <HAL_RCC_OscConfig+0x248>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047be:	f7fd fae3 	bl	8001d88 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047c4:	e00e      	b.n	80047e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047c6:	f7fd fadf 	bl	8001d88 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d907      	bls.n	80047e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e150      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
 80047d8:	40023800 	.word	0x40023800
 80047dc:	42470000 	.word	0x42470000
 80047e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e4:	4b88      	ldr	r3, [pc, #544]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80047e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1ea      	bne.n	80047c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8097 	beq.w	800492c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047fe:	2300      	movs	r3, #0
 8004800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004802:	4b81      	ldr	r3, [pc, #516]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10f      	bne.n	800482e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800480e:	2300      	movs	r3, #0
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	4b7d      	ldr	r3, [pc, #500]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004816:	4a7c      	ldr	r2, [pc, #496]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800481c:	6413      	str	r3, [r2, #64]	@ 0x40
 800481e:	4b7a      	ldr	r3, [pc, #488]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004826:	60bb      	str	r3, [r7, #8]
 8004828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800482a:	2301      	movs	r3, #1
 800482c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482e:	4b77      	ldr	r3, [pc, #476]	@ (8004a0c <HAL_RCC_OscConfig+0x474>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d118      	bne.n	800486c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800483a:	4b74      	ldr	r3, [pc, #464]	@ (8004a0c <HAL_RCC_OscConfig+0x474>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a73      	ldr	r2, [pc, #460]	@ (8004a0c <HAL_RCC_OscConfig+0x474>)
 8004840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004846:	f7fd fa9f 	bl	8001d88 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800484e:	f7fd fa9b 	bl	8001d88 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e10c      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004860:	4b6a      	ldr	r3, [pc, #424]	@ (8004a0c <HAL_RCC_OscConfig+0x474>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f0      	beq.n	800484e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d106      	bne.n	8004882 <HAL_RCC_OscConfig+0x2ea>
 8004874:	4b64      	ldr	r3, [pc, #400]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004878:	4a63      	ldr	r2, [pc, #396]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 800487a:	f043 0301 	orr.w	r3, r3, #1
 800487e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004880:	e01c      	b.n	80048bc <HAL_RCC_OscConfig+0x324>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b05      	cmp	r3, #5
 8004888:	d10c      	bne.n	80048a4 <HAL_RCC_OscConfig+0x30c>
 800488a:	4b5f      	ldr	r3, [pc, #380]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488e:	4a5e      	ldr	r2, [pc, #376]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004890:	f043 0304 	orr.w	r3, r3, #4
 8004894:	6713      	str	r3, [r2, #112]	@ 0x70
 8004896:	4b5c      	ldr	r3, [pc, #368]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489a:	4a5b      	ldr	r2, [pc, #364]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048a2:	e00b      	b.n	80048bc <HAL_RCC_OscConfig+0x324>
 80048a4:	4b58      	ldr	r3, [pc, #352]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80048a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a8:	4a57      	ldr	r2, [pc, #348]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80048b0:	4b55      	ldr	r3, [pc, #340]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80048b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b4:	4a54      	ldr	r2, [pc, #336]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80048b6:	f023 0304 	bic.w	r3, r3, #4
 80048ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d015      	beq.n	80048f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c4:	f7fd fa60 	bl	8001d88 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ca:	e00a      	b.n	80048e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048cc:	f7fd fa5c 	bl	8001d88 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e0cb      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e2:	4b49      	ldr	r3, [pc, #292]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0ee      	beq.n	80048cc <HAL_RCC_OscConfig+0x334>
 80048ee:	e014      	b.n	800491a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f0:	f7fd fa4a 	bl	8001d88 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f6:	e00a      	b.n	800490e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f8:	f7fd fa46 	bl	8001d88 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e0b5      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800490e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1ee      	bne.n	80048f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800491a:	7dfb      	ldrb	r3, [r7, #23]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d105      	bne.n	800492c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004920:	4b39      	ldr	r3, [pc, #228]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004924:	4a38      	ldr	r2, [pc, #224]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004926:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800492a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80a1 	beq.w	8004a78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004936:	4b34      	ldr	r3, [pc, #208]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
 800493e:	2b08      	cmp	r3, #8
 8004940:	d05c      	beq.n	80049fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d141      	bne.n	80049ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494a:	4b31      	ldr	r3, [pc, #196]	@ (8004a10 <HAL_RCC_OscConfig+0x478>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fd fa1a 	bl	8001d88 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004958:	f7fd fa16 	bl	8001d88 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e087      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	4b27      	ldr	r3, [pc, #156]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69da      	ldr	r2, [r3, #28]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004984:	019b      	lsls	r3, r3, #6
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	3b01      	subs	r3, #1
 8004990:	041b      	lsls	r3, r3, #16
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004998:	061b      	lsls	r3, r3, #24
 800499a:	491b      	ldr	r1, [pc, #108]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 800499c:	4313      	orrs	r3, r2
 800499e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a10 <HAL_RCC_OscConfig+0x478>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a6:	f7fd f9ef 	bl	8001d88 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ae:	f7fd f9eb 	bl	8001d88 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e05c      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c0:	4b11      	ldr	r3, [pc, #68]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCC_OscConfig+0x416>
 80049cc:	e054      	b.n	8004a78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ce:	4b10      	ldr	r3, [pc, #64]	@ (8004a10 <HAL_RCC_OscConfig+0x478>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d4:	f7fd f9d8 	bl	8001d88 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049dc:	f7fd f9d4 	bl	8001d88 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e045      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ee:	4b06      	ldr	r3, [pc, #24]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x444>
 80049fa:	e03d      	b.n	8004a78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d107      	bne.n	8004a14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e038      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	40007000 	.word	0x40007000
 8004a10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a14:	4b1b      	ldr	r3, [pc, #108]	@ (8004a84 <HAL_RCC_OscConfig+0x4ec>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d028      	beq.n	8004a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d121      	bne.n	8004a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d11a      	bne.n	8004a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a44:	4013      	ands	r3, r2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d111      	bne.n	8004a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5a:	085b      	lsrs	r3, r3, #1
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d107      	bne.n	8004a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40023800 	.word	0x40023800

08004a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0cc      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a9c:	4b68      	ldr	r3, [pc, #416]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d90c      	bls.n	8004ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aaa:	4b65      	ldr	r3, [pc, #404]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab2:	4b63      	ldr	r3, [pc, #396]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d001      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0b8      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d020      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004adc:	4b59      	ldr	r3, [pc, #356]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	4a58      	ldr	r2, [pc, #352]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ae6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004af4:	4b53      	ldr	r3, [pc, #332]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4a52      	ldr	r2, [pc, #328]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b00:	4b50      	ldr	r3, [pc, #320]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	494d      	ldr	r1, [pc, #308]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d044      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d107      	bne.n	8004b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b26:	4b47      	ldr	r3, [pc, #284]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d119      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e07f      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d003      	beq.n	8004b46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d107      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b46:	4b3f      	ldr	r3, [pc, #252]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d109      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e06f      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b56:	4b3b      	ldr	r3, [pc, #236]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e067      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b66:	4b37      	ldr	r3, [pc, #220]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f023 0203 	bic.w	r2, r3, #3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	4934      	ldr	r1, [pc, #208]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b78:	f7fd f906 	bl	8001d88 <HAL_GetTick>
 8004b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7e:	e00a      	b.n	8004b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b80:	f7fd f902 	bl	8001d88 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e04f      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b96:	4b2b      	ldr	r3, [pc, #172]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 020c 	and.w	r2, r3, #12
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d1eb      	bne.n	8004b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ba8:	4b25      	ldr	r3, [pc, #148]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d20c      	bcs.n	8004bd0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb6:	4b22      	ldr	r3, [pc, #136]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bbe:	4b20      	ldr	r3, [pc, #128]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e032      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bdc:	4b19      	ldr	r3, [pc, #100]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	4916      	ldr	r1, [pc, #88]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d009      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bfa:	4b12      	ldr	r3, [pc, #72]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	490e      	ldr	r1, [pc, #56]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c0e:	f000 f821 	bl	8004c54 <HAL_RCC_GetSysClockFreq>
 8004c12:	4602      	mov	r2, r0
 8004c14:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	091b      	lsrs	r3, r3, #4
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	490a      	ldr	r1, [pc, #40]	@ (8004c48 <HAL_RCC_ClockConfig+0x1c0>)
 8004c20:	5ccb      	ldrb	r3, [r1, r3]
 8004c22:	fa22 f303 	lsr.w	r3, r2, r3
 8004c26:	4a09      	ldr	r2, [pc, #36]	@ (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c2a:	4b09      	ldr	r3, [pc, #36]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fd f866 	bl	8001d00 <HAL_InitTick>

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40023c00 	.word	0x40023c00
 8004c44:	40023800 	.word	0x40023800
 8004c48:	080127b0 	.word	0x080127b0
 8004c4c:	20000000 	.word	0x20000000
 8004c50:	20000004 	.word	0x20000004

08004c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c58:	b094      	sub	sp, #80	@ 0x50
 8004c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c6c:	4b79      	ldr	r3, [pc, #484]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 030c 	and.w	r3, r3, #12
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d00d      	beq.n	8004c94 <HAL_RCC_GetSysClockFreq+0x40>
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	f200 80e1 	bhi.w	8004e40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x34>
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d003      	beq.n	8004c8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c86:	e0db      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c88:	4b73      	ldr	r3, [pc, #460]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c8c:	e0db      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c8e:	4b73      	ldr	r3, [pc, #460]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x208>)
 8004c90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c92:	e0d8      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c94:	4b6f      	ldr	r3, [pc, #444]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d063      	beq.n	8004d72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004caa:	4b6a      	ldr	r3, [pc, #424]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	099b      	lsrs	r3, r3, #6
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	462b      	mov	r3, r5
 8004cca:	f04f 0000 	mov.w	r0, #0
 8004cce:	f04f 0100 	mov.w	r1, #0
 8004cd2:	0159      	lsls	r1, r3, #5
 8004cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cd8:	0150      	lsls	r0, r2, #5
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4621      	mov	r1, r4
 8004ce0:	1a51      	subs	r1, r2, r1
 8004ce2:	6139      	str	r1, [r7, #16]
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cf8:	4659      	mov	r1, fp
 8004cfa:	018b      	lsls	r3, r1, #6
 8004cfc:	4651      	mov	r1, sl
 8004cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d02:	4651      	mov	r1, sl
 8004d04:	018a      	lsls	r2, r1, #6
 8004d06:	4651      	mov	r1, sl
 8004d08:	ebb2 0801 	subs.w	r8, r2, r1
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	eb63 0901 	sbc.w	r9, r3, r1
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d26:	4690      	mov	r8, r2
 8004d28:	4699      	mov	r9, r3
 8004d2a:	4623      	mov	r3, r4
 8004d2c:	eb18 0303 	adds.w	r3, r8, r3
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	462b      	mov	r3, r5
 8004d34:	eb49 0303 	adc.w	r3, r9, r3
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d46:	4629      	mov	r1, r5
 8004d48:	024b      	lsls	r3, r1, #9
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d50:	4621      	mov	r1, r4
 8004d52:	024a      	lsls	r2, r1, #9
 8004d54:	4610      	mov	r0, r2
 8004d56:	4619      	mov	r1, r3
 8004d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d64:	f7fb ff50 	bl	8000c08 <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d70:	e058      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d72:	4b38      	ldr	r3, [pc, #224]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	099b      	lsrs	r3, r3, #6
 8004d78:	2200      	movs	r2, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	4611      	mov	r1, r2
 8004d7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d82:	623b      	str	r3, [r7, #32]
 8004d84:	2300      	movs	r3, #0
 8004d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	464b      	mov	r3, r9
 8004d90:	f04f 0000 	mov.w	r0, #0
 8004d94:	f04f 0100 	mov.w	r1, #0
 8004d98:	0159      	lsls	r1, r3, #5
 8004d9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d9e:	0150      	lsls	r0, r2, #5
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4641      	mov	r1, r8
 8004da6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004daa:	4649      	mov	r1, r9
 8004dac:	eb63 0b01 	sbc.w	fp, r3, r1
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004dc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dc4:	ebb2 040a 	subs.w	r4, r2, sl
 8004dc8:	eb63 050b 	sbc.w	r5, r3, fp
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	00eb      	lsls	r3, r5, #3
 8004dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dda:	00e2      	lsls	r2, r4, #3
 8004ddc:	4614      	mov	r4, r2
 8004dde:	461d      	mov	r5, r3
 8004de0:	4643      	mov	r3, r8
 8004de2:	18e3      	adds	r3, r4, r3
 8004de4:	603b      	str	r3, [r7, #0]
 8004de6:	464b      	mov	r3, r9
 8004de8:	eb45 0303 	adc.w	r3, r5, r3
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	028b      	lsls	r3, r1, #10
 8004dfe:	4621      	mov	r1, r4
 8004e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e04:	4621      	mov	r1, r4
 8004e06:	028a      	lsls	r2, r1, #10
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e0e:	2200      	movs	r2, #0
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	61fa      	str	r2, [r7, #28]
 8004e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e18:	f7fb fef6 	bl	8000c08 <__aeabi_uldivmod>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4613      	mov	r3, r2
 8004e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e24:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	0c1b      	lsrs	r3, r3, #16
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e3e:	e002      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e40:	4b05      	ldr	r3, [pc, #20]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3750      	adds	r7, #80	@ 0x50
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e52:	bf00      	nop
 8004e54:	40023800 	.word	0x40023800
 8004e58:	00f42400 	.word	0x00f42400
 8004e5c:	007a1200 	.word	0x007a1200

08004e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e64:	4b03      	ldr	r3, [pc, #12]	@ (8004e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e66:	681b      	ldr	r3, [r3, #0]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000000 	.word	0x20000000

08004e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e7c:	f7ff fff0 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004e80:	4602      	mov	r2, r0
 8004e82:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	0a9b      	lsrs	r3, r3, #10
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	4903      	ldr	r1, [pc, #12]	@ (8004e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e8e:	5ccb      	ldrb	r3, [r1, r3]
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	080127c0 	.word	0x080127c0

08004ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ea4:	f7ff ffdc 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	4b05      	ldr	r3, [pc, #20]	@ (8004ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	0b5b      	lsrs	r3, r3, #13
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	4903      	ldr	r1, [pc, #12]	@ (8004ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eb6:	5ccb      	ldrb	r3, [r1, r3]
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	080127c0 	.word	0x080127c0

08004ec8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e042      	b.n	8004f60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fc fd60 	bl	80019b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2224      	movs	r2, #36	@ 0x24
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f973 	bl	80051f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695a      	ldr	r2, [r3, #20]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08a      	sub	sp, #40	@ 0x28
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	d175      	bne.n	8005074 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <HAL_UART_Transmit+0x2c>
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e06e      	b.n	8005076 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2221      	movs	r2, #33	@ 0x21
 8004fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fa6:	f7fc feef 	bl	8001d88 <HAL_GetTick>
 8004faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	88fa      	ldrh	r2, [r7, #6]
 8004fb0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	88fa      	ldrh	r2, [r7, #6]
 8004fb6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fc0:	d108      	bne.n	8004fd4 <HAL_UART_Transmit+0x6c>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d104      	bne.n	8004fd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	61bb      	str	r3, [r7, #24]
 8004fd2:	e003      	b.n	8004fdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fdc:	e02e      	b.n	800503c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2180      	movs	r1, #128	@ 0x80
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f848 	bl	800507e <UART_WaitOnFlagUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e03a      	b.n	8005076 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10b      	bne.n	800501e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005014:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	3302      	adds	r3, #2
 800501a:	61bb      	str	r3, [r7, #24]
 800501c:	e007      	b.n	800502e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	781a      	ldrb	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	3301      	adds	r3, #1
 800502c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005032:	b29b      	uxth	r3, r3
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1cb      	bne.n	8004fde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2200      	movs	r2, #0
 800504e:	2140      	movs	r1, #64	@ 0x40
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 f814 	bl	800507e <UART_WaitOnFlagUntilTimeout>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e006      	b.n	8005076 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	e000      	b.n	8005076 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005074:	2302      	movs	r3, #2
  }
}
 8005076:	4618      	mov	r0, r3
 8005078:	3720      	adds	r7, #32
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b086      	sub	sp, #24
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	603b      	str	r3, [r7, #0]
 800508a:	4613      	mov	r3, r2
 800508c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800508e:	e03b      	b.n	8005108 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	d037      	beq.n	8005108 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005098:	f7fc fe76 	bl	8001d88 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	6a3a      	ldr	r2, [r7, #32]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d302      	bcc.n	80050ae <UART_WaitOnFlagUntilTimeout+0x30>
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e03a      	b.n	8005128 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d023      	beq.n	8005108 <UART_WaitOnFlagUntilTimeout+0x8a>
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b80      	cmp	r3, #128	@ 0x80
 80050c4:	d020      	beq.n	8005108 <UART_WaitOnFlagUntilTimeout+0x8a>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b40      	cmp	r3, #64	@ 0x40
 80050ca:	d01d      	beq.n	8005108 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d116      	bne.n	8005108 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 f81d 	bl	8005130 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2208      	movs	r2, #8
 80050fa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e00f      	b.n	8005128 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	4013      	ands	r3, r2
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	429a      	cmp	r2, r3
 8005116:	bf0c      	ite	eq
 8005118:	2301      	moveq	r3, #1
 800511a:	2300      	movne	r3, #0
 800511c:	b2db      	uxtb	r3, r3
 800511e:	461a      	mov	r2, r3
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	429a      	cmp	r2, r3
 8005124:	d0b4      	beq.n	8005090 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005130:	b480      	push	{r7}
 8005132:	b095      	sub	sp, #84	@ 0x54
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	330c      	adds	r3, #12
 800513e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005142:	e853 3f00 	ldrex	r3, [r3]
 8005146:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800514e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	330c      	adds	r3, #12
 8005156:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005158:	643a      	str	r2, [r7, #64]	@ 0x40
 800515a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800515e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005160:	e841 2300 	strex	r3, r2, [r1]
 8005164:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1e5      	bne.n	8005138 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3314      	adds	r3, #20
 8005172:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	e853 3f00 	ldrex	r3, [r3]
 800517a:	61fb      	str	r3, [r7, #28]
   return(result);
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f023 0301 	bic.w	r3, r3, #1
 8005182:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3314      	adds	r3, #20
 800518a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800518c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800518e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005190:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005192:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005194:	e841 2300 	strex	r3, r2, [r1]
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1e5      	bne.n	800516c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d119      	bne.n	80051dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	330c      	adds	r3, #12
 80051ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	f023 0310 	bic.w	r3, r3, #16
 80051be:	647b      	str	r3, [r7, #68]	@ 0x44
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	330c      	adds	r3, #12
 80051c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051c8:	61ba      	str	r2, [r7, #24]
 80051ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	6979      	ldr	r1, [r7, #20]
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	613b      	str	r3, [r7, #16]
   return(result);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e5      	bne.n	80051a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80051ea:	bf00      	nop
 80051ec:	3754      	adds	r7, #84	@ 0x54
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
	...

080051f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051fc:	b0c0      	sub	sp, #256	@ 0x100
 80051fe:	af00      	add	r7, sp, #0
 8005200:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005214:	68d9      	ldr	r1, [r3, #12]
 8005216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	ea40 0301 	orr.w	r3, r0, r1
 8005220:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	431a      	orrs	r2, r3
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	431a      	orrs	r2, r3
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005250:	f021 010c 	bic.w	r1, r1, #12
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800525e:	430b      	orrs	r3, r1
 8005260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800526e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005272:	6999      	ldr	r1, [r3, #24]
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	ea40 0301 	orr.w	r3, r0, r1
 800527e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	4b8f      	ldr	r3, [pc, #572]	@ (80054c4 <UART_SetConfig+0x2cc>)
 8005288:	429a      	cmp	r2, r3
 800528a:	d005      	beq.n	8005298 <UART_SetConfig+0xa0>
 800528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	4b8d      	ldr	r3, [pc, #564]	@ (80054c8 <UART_SetConfig+0x2d0>)
 8005294:	429a      	cmp	r2, r3
 8005296:	d104      	bne.n	80052a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005298:	f7ff fe02 	bl	8004ea0 <HAL_RCC_GetPCLK2Freq>
 800529c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80052a0:	e003      	b.n	80052aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052a2:	f7ff fde9 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 80052a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052b4:	f040 810c 	bne.w	80054d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052bc:	2200      	movs	r2, #0
 80052be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80052c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80052ca:	4622      	mov	r2, r4
 80052cc:	462b      	mov	r3, r5
 80052ce:	1891      	adds	r1, r2, r2
 80052d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80052d2:	415b      	adcs	r3, r3
 80052d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80052da:	4621      	mov	r1, r4
 80052dc:	eb12 0801 	adds.w	r8, r2, r1
 80052e0:	4629      	mov	r1, r5
 80052e2:	eb43 0901 	adc.w	r9, r3, r1
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	f04f 0300 	mov.w	r3, #0
 80052ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052fa:	4690      	mov	r8, r2
 80052fc:	4699      	mov	r9, r3
 80052fe:	4623      	mov	r3, r4
 8005300:	eb18 0303 	adds.w	r3, r8, r3
 8005304:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005308:	462b      	mov	r3, r5
 800530a:	eb49 0303 	adc.w	r3, r9, r3
 800530e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800531e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005322:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005326:	460b      	mov	r3, r1
 8005328:	18db      	adds	r3, r3, r3
 800532a:	653b      	str	r3, [r7, #80]	@ 0x50
 800532c:	4613      	mov	r3, r2
 800532e:	eb42 0303 	adc.w	r3, r2, r3
 8005332:	657b      	str	r3, [r7, #84]	@ 0x54
 8005334:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005338:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800533c:	f7fb fc64 	bl	8000c08 <__aeabi_uldivmod>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4b61      	ldr	r3, [pc, #388]	@ (80054cc <UART_SetConfig+0x2d4>)
 8005346:	fba3 2302 	umull	r2, r3, r3, r2
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	011c      	lsls	r4, r3, #4
 800534e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005352:	2200      	movs	r2, #0
 8005354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005358:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800535c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005360:	4642      	mov	r2, r8
 8005362:	464b      	mov	r3, r9
 8005364:	1891      	adds	r1, r2, r2
 8005366:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005368:	415b      	adcs	r3, r3
 800536a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800536c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005370:	4641      	mov	r1, r8
 8005372:	eb12 0a01 	adds.w	sl, r2, r1
 8005376:	4649      	mov	r1, r9
 8005378:	eb43 0b01 	adc.w	fp, r3, r1
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005388:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800538c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005390:	4692      	mov	sl, r2
 8005392:	469b      	mov	fp, r3
 8005394:	4643      	mov	r3, r8
 8005396:	eb1a 0303 	adds.w	r3, sl, r3
 800539a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800539e:	464b      	mov	r3, r9
 80053a0:	eb4b 0303 	adc.w	r3, fp, r3
 80053a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80053b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053bc:	460b      	mov	r3, r1
 80053be:	18db      	adds	r3, r3, r3
 80053c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80053c2:	4613      	mov	r3, r2
 80053c4:	eb42 0303 	adc.w	r3, r2, r3
 80053c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80053ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80053d2:	f7fb fc19 	bl	8000c08 <__aeabi_uldivmod>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4611      	mov	r1, r2
 80053dc:	4b3b      	ldr	r3, [pc, #236]	@ (80054cc <UART_SetConfig+0x2d4>)
 80053de:	fba3 2301 	umull	r2, r3, r3, r1
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	2264      	movs	r2, #100	@ 0x64
 80053e6:	fb02 f303 	mul.w	r3, r2, r3
 80053ea:	1acb      	subs	r3, r1, r3
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80053f2:	4b36      	ldr	r3, [pc, #216]	@ (80054cc <UART_SetConfig+0x2d4>)
 80053f4:	fba3 2302 	umull	r2, r3, r3, r2
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005400:	441c      	add	r4, r3
 8005402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005406:	2200      	movs	r2, #0
 8005408:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800540c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005410:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005414:	4642      	mov	r2, r8
 8005416:	464b      	mov	r3, r9
 8005418:	1891      	adds	r1, r2, r2
 800541a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800541c:	415b      	adcs	r3, r3
 800541e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005420:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005424:	4641      	mov	r1, r8
 8005426:	1851      	adds	r1, r2, r1
 8005428:	6339      	str	r1, [r7, #48]	@ 0x30
 800542a:	4649      	mov	r1, r9
 800542c:	414b      	adcs	r3, r1
 800542e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800543c:	4659      	mov	r1, fp
 800543e:	00cb      	lsls	r3, r1, #3
 8005440:	4651      	mov	r1, sl
 8005442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005446:	4651      	mov	r1, sl
 8005448:	00ca      	lsls	r2, r1, #3
 800544a:	4610      	mov	r0, r2
 800544c:	4619      	mov	r1, r3
 800544e:	4603      	mov	r3, r0
 8005450:	4642      	mov	r2, r8
 8005452:	189b      	adds	r3, r3, r2
 8005454:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005458:	464b      	mov	r3, r9
 800545a:	460a      	mov	r2, r1
 800545c:	eb42 0303 	adc.w	r3, r2, r3
 8005460:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005470:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005474:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005478:	460b      	mov	r3, r1
 800547a:	18db      	adds	r3, r3, r3
 800547c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800547e:	4613      	mov	r3, r2
 8005480:	eb42 0303 	adc.w	r3, r2, r3
 8005484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005486:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800548a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800548e:	f7fb fbbb 	bl	8000c08 <__aeabi_uldivmod>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4b0d      	ldr	r3, [pc, #52]	@ (80054cc <UART_SetConfig+0x2d4>)
 8005498:	fba3 1302 	umull	r1, r3, r3, r2
 800549c:	095b      	lsrs	r3, r3, #5
 800549e:	2164      	movs	r1, #100	@ 0x64
 80054a0:	fb01 f303 	mul.w	r3, r1, r3
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	3332      	adds	r3, #50	@ 0x32
 80054aa:	4a08      	ldr	r2, [pc, #32]	@ (80054cc <UART_SetConfig+0x2d4>)
 80054ac:	fba2 2303 	umull	r2, r3, r2, r3
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	f003 0207 	and.w	r2, r3, #7
 80054b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4422      	add	r2, r4
 80054be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054c0:	e106      	b.n	80056d0 <UART_SetConfig+0x4d8>
 80054c2:	bf00      	nop
 80054c4:	40011000 	.word	0x40011000
 80054c8:	40011400 	.word	0x40011400
 80054cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054d4:	2200      	movs	r2, #0
 80054d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80054de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80054e2:	4642      	mov	r2, r8
 80054e4:	464b      	mov	r3, r9
 80054e6:	1891      	adds	r1, r2, r2
 80054e8:	6239      	str	r1, [r7, #32]
 80054ea:	415b      	adcs	r3, r3
 80054ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054f2:	4641      	mov	r1, r8
 80054f4:	1854      	adds	r4, r2, r1
 80054f6:	4649      	mov	r1, r9
 80054f8:	eb43 0501 	adc.w	r5, r3, r1
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	00eb      	lsls	r3, r5, #3
 8005506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800550a:	00e2      	lsls	r2, r4, #3
 800550c:	4614      	mov	r4, r2
 800550e:	461d      	mov	r5, r3
 8005510:	4643      	mov	r3, r8
 8005512:	18e3      	adds	r3, r4, r3
 8005514:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005518:	464b      	mov	r3, r9
 800551a:	eb45 0303 	adc.w	r3, r5, r3
 800551e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800552e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	f04f 0300 	mov.w	r3, #0
 800553a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800553e:	4629      	mov	r1, r5
 8005540:	008b      	lsls	r3, r1, #2
 8005542:	4621      	mov	r1, r4
 8005544:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005548:	4621      	mov	r1, r4
 800554a:	008a      	lsls	r2, r1, #2
 800554c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005550:	f7fb fb5a 	bl	8000c08 <__aeabi_uldivmod>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4b60      	ldr	r3, [pc, #384]	@ (80056dc <UART_SetConfig+0x4e4>)
 800555a:	fba3 2302 	umull	r2, r3, r3, r2
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	011c      	lsls	r4, r3, #4
 8005562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005566:	2200      	movs	r2, #0
 8005568:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800556c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005570:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005574:	4642      	mov	r2, r8
 8005576:	464b      	mov	r3, r9
 8005578:	1891      	adds	r1, r2, r2
 800557a:	61b9      	str	r1, [r7, #24]
 800557c:	415b      	adcs	r3, r3
 800557e:	61fb      	str	r3, [r7, #28]
 8005580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005584:	4641      	mov	r1, r8
 8005586:	1851      	adds	r1, r2, r1
 8005588:	6139      	str	r1, [r7, #16]
 800558a:	4649      	mov	r1, r9
 800558c:	414b      	adcs	r3, r1
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	f04f 0300 	mov.w	r3, #0
 8005598:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800559c:	4659      	mov	r1, fp
 800559e:	00cb      	lsls	r3, r1, #3
 80055a0:	4651      	mov	r1, sl
 80055a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055a6:	4651      	mov	r1, sl
 80055a8:	00ca      	lsls	r2, r1, #3
 80055aa:	4610      	mov	r0, r2
 80055ac:	4619      	mov	r1, r3
 80055ae:	4603      	mov	r3, r0
 80055b0:	4642      	mov	r2, r8
 80055b2:	189b      	adds	r3, r3, r2
 80055b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055b8:	464b      	mov	r3, r9
 80055ba:	460a      	mov	r2, r1
 80055bc:	eb42 0303 	adc.w	r3, r2, r3
 80055c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80055dc:	4649      	mov	r1, r9
 80055de:	008b      	lsls	r3, r1, #2
 80055e0:	4641      	mov	r1, r8
 80055e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055e6:	4641      	mov	r1, r8
 80055e8:	008a      	lsls	r2, r1, #2
 80055ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80055ee:	f7fb fb0b 	bl	8000c08 <__aeabi_uldivmod>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	4611      	mov	r1, r2
 80055f8:	4b38      	ldr	r3, [pc, #224]	@ (80056dc <UART_SetConfig+0x4e4>)
 80055fa:	fba3 2301 	umull	r2, r3, r3, r1
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	2264      	movs	r2, #100	@ 0x64
 8005602:	fb02 f303 	mul.w	r3, r2, r3
 8005606:	1acb      	subs	r3, r1, r3
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	3332      	adds	r3, #50	@ 0x32
 800560c:	4a33      	ldr	r2, [pc, #204]	@ (80056dc <UART_SetConfig+0x4e4>)
 800560e:	fba2 2303 	umull	r2, r3, r2, r3
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005618:	441c      	add	r4, r3
 800561a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800561e:	2200      	movs	r2, #0
 8005620:	673b      	str	r3, [r7, #112]	@ 0x70
 8005622:	677a      	str	r2, [r7, #116]	@ 0x74
 8005624:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005628:	4642      	mov	r2, r8
 800562a:	464b      	mov	r3, r9
 800562c:	1891      	adds	r1, r2, r2
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	415b      	adcs	r3, r3
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005638:	4641      	mov	r1, r8
 800563a:	1851      	adds	r1, r2, r1
 800563c:	6039      	str	r1, [r7, #0]
 800563e:	4649      	mov	r1, r9
 8005640:	414b      	adcs	r3, r1
 8005642:	607b      	str	r3, [r7, #4]
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005650:	4659      	mov	r1, fp
 8005652:	00cb      	lsls	r3, r1, #3
 8005654:	4651      	mov	r1, sl
 8005656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800565a:	4651      	mov	r1, sl
 800565c:	00ca      	lsls	r2, r1, #3
 800565e:	4610      	mov	r0, r2
 8005660:	4619      	mov	r1, r3
 8005662:	4603      	mov	r3, r0
 8005664:	4642      	mov	r2, r8
 8005666:	189b      	adds	r3, r3, r2
 8005668:	66bb      	str	r3, [r7, #104]	@ 0x68
 800566a:	464b      	mov	r3, r9
 800566c:	460a      	mov	r2, r1
 800566e:	eb42 0303 	adc.w	r3, r2, r3
 8005672:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	663b      	str	r3, [r7, #96]	@ 0x60
 800567e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800568c:	4649      	mov	r1, r9
 800568e:	008b      	lsls	r3, r1, #2
 8005690:	4641      	mov	r1, r8
 8005692:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005696:	4641      	mov	r1, r8
 8005698:	008a      	lsls	r2, r1, #2
 800569a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800569e:	f7fb fab3 	bl	8000c08 <__aeabi_uldivmod>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4b0d      	ldr	r3, [pc, #52]	@ (80056dc <UART_SetConfig+0x4e4>)
 80056a8:	fba3 1302 	umull	r1, r3, r3, r2
 80056ac:	095b      	lsrs	r3, r3, #5
 80056ae:	2164      	movs	r1, #100	@ 0x64
 80056b0:	fb01 f303 	mul.w	r3, r1, r3
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	3332      	adds	r3, #50	@ 0x32
 80056ba:	4a08      	ldr	r2, [pc, #32]	@ (80056dc <UART_SetConfig+0x4e4>)
 80056bc:	fba2 2303 	umull	r2, r3, r2, r3
 80056c0:	095b      	lsrs	r3, r3, #5
 80056c2:	f003 020f 	and.w	r2, r3, #15
 80056c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4422      	add	r2, r4
 80056ce:	609a      	str	r2, [r3, #8]
}
 80056d0:	bf00      	nop
 80056d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80056d6:	46bd      	mov	sp, r7
 80056d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056dc:	51eb851f 	.word	0x51eb851f

080056e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056e0:	b084      	sub	sp, #16
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	f107 001c 	add.w	r0, r7, #28
 80056ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d123      	bne.n	8005742 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800570e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005722:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005726:	2b01      	cmp	r3, #1
 8005728:	d105      	bne.n	8005736 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f9dc 	bl	8005af4 <USB_CoreReset>
 800573c:	4603      	mov	r3, r0
 800573e:	73fb      	strb	r3, [r7, #15]
 8005740:	e01b      	b.n	800577a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f9d0 	bl	8005af4 <USB_CoreReset>
 8005754:	4603      	mov	r3, r0
 8005756:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005758:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800575c:	2b00      	cmp	r3, #0
 800575e:	d106      	bne.n	800576e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005764:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	639a      	str	r2, [r3, #56]	@ 0x38
 800576c:	e005      	b.n	800577a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005772:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800577a:	7fbb      	ldrb	r3, [r7, #30]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d10b      	bne.n	8005798 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f043 0206 	orr.w	r2, r3, #6
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f043 0220 	orr.w	r2, r3, #32
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005798:	7bfb      	ldrb	r3, [r7, #15]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057a4:	b004      	add	sp, #16
 80057a6:	4770      	bx	lr

080057a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f043 0201 	orr.w	r2, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f023 0201 	bic.w	r2, r3, #1
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005808:	78fb      	ldrb	r3, [r7, #3]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d115      	bne.n	800583a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800581a:	200a      	movs	r0, #10
 800581c:	f7fc fac0 	bl	8001da0 <HAL_Delay>
      ms += 10U;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	330a      	adds	r3, #10
 8005824:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f956 	bl	8005ad8 <USB_GetMode>
 800582c:	4603      	mov	r3, r0
 800582e:	2b01      	cmp	r3, #1
 8005830:	d01e      	beq.n	8005870 <USB_SetCurrentMode+0x84>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2bc7      	cmp	r3, #199	@ 0xc7
 8005836:	d9f0      	bls.n	800581a <USB_SetCurrentMode+0x2e>
 8005838:	e01a      	b.n	8005870 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800583a:	78fb      	ldrb	r3, [r7, #3]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d115      	bne.n	800586c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800584c:	200a      	movs	r0, #10
 800584e:	f7fc faa7 	bl	8001da0 <HAL_Delay>
      ms += 10U;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	330a      	adds	r3, #10
 8005856:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f93d 	bl	8005ad8 <USB_GetMode>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <USB_SetCurrentMode+0x84>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2bc7      	cmp	r3, #199	@ 0xc7
 8005868:	d9f0      	bls.n	800584c <USB_SetCurrentMode+0x60>
 800586a:	e001      	b.n	8005870 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e005      	b.n	800587c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2bc8      	cmp	r3, #200	@ 0xc8
 8005874:	d101      	bne.n	800587a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3301      	adds	r3, #1
 8005896:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800589e:	d901      	bls.n	80058a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e01b      	b.n	80058dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	daf2      	bge.n	8005892 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	019b      	lsls	r3, r3, #6
 80058b4:	f043 0220 	orr.w	r2, r3, #32
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058c8:	d901      	bls.n	80058ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e006      	b.n	80058dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d0f0      	beq.n	80058bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3301      	adds	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005900:	d901      	bls.n	8005906 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e018      	b.n	8005938 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	daf2      	bge.n	80058f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2210      	movs	r2, #16
 8005916:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3301      	adds	r3, #1
 800591c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005924:	d901      	bls.n	800592a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e006      	b.n	8005938 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b10      	cmp	r3, #16
 8005934:	d0f0      	beq.n	8005918 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005944:	b480      	push	{r7}
 8005946:	b089      	sub	sp, #36	@ 0x24
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	4611      	mov	r1, r2
 8005950:	461a      	mov	r2, r3
 8005952:	460b      	mov	r3, r1
 8005954:	71fb      	strb	r3, [r7, #7]
 8005956:	4613      	mov	r3, r2
 8005958:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005962:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005966:	2b00      	cmp	r3, #0
 8005968:	d123      	bne.n	80059b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800596a:	88bb      	ldrh	r3, [r7, #4]
 800596c:	3303      	adds	r3, #3
 800596e:	089b      	lsrs	r3, r3, #2
 8005970:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005972:	2300      	movs	r3, #0
 8005974:	61bb      	str	r3, [r7, #24]
 8005976:	e018      	b.n	80059aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	031a      	lsls	r2, r3, #12
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	4413      	add	r3, r2
 8005980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005984:	461a      	mov	r2, r3
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	3301      	adds	r3, #1
 8005990:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	3301      	adds	r3, #1
 8005996:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	3301      	adds	r3, #1
 800599c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	3301      	adds	r3, #1
 80059a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	3301      	adds	r3, #1
 80059a8:	61bb      	str	r3, [r7, #24]
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d3e2      	bcc.n	8005978 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3724      	adds	r7, #36	@ 0x24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b08b      	sub	sp, #44	@ 0x2c
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	4613      	mov	r3, r2
 80059cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80059d6:	88fb      	ldrh	r3, [r7, #6]
 80059d8:	089b      	lsrs	r3, r3, #2
 80059da:	b29b      	uxth	r3, r3
 80059dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80059de:	88fb      	ldrh	r3, [r7, #6]
 80059e0:	f003 0303 	and.w	r3, r3, #3
 80059e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80059e6:	2300      	movs	r3, #0
 80059e8:	623b      	str	r3, [r7, #32]
 80059ea:	e014      	b.n	8005a16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	3301      	adds	r3, #1
 80059fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	3301      	adds	r3, #1
 8005a02:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a06:	3301      	adds	r3, #1
 8005a08:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	3301      	adds	r3, #1
 8005a14:	623b      	str	r3, [r7, #32]
 8005a16:	6a3a      	ldr	r2, [r7, #32]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d3e6      	bcc.n	80059ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a1e:	8bfb      	ldrh	r3, [r7, #30]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01e      	beq.n	8005a62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f107 0310 	add.w	r3, r7, #16
 8005a34:	6812      	ldr	r2, [r2, #0]
 8005a36:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	fa22 f303 	lsr.w	r3, r2, r3
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a48:	701a      	strb	r2, [r3, #0]
      i++;
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	3301      	adds	r3, #1
 8005a54:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005a56:	8bfb      	ldrh	r3, [r7, #30]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a5c:	8bfb      	ldrh	r3, [r7, #30]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1ea      	bne.n	8005a38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	372c      	adds	r7, #44	@ 0x2c
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4013      	ands	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a88:	68fb      	ldr	r3, [r7, #12]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b085      	sub	sp, #20
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005aa6:	78fb      	ldrb	r3, [r7, #3]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005ab6:	78fb      	ldrb	r3, [r7, #3]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005aca:	68bb      	ldr	r3, [r7, #8]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3301      	adds	r3, #1
 8005b04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b0c:	d901      	bls.n	8005b12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e022      	b.n	8005b58 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	daf2      	bge.n	8005b00 <USB_CoreReset+0xc>

  count = 10U;
 8005b1a:	230a      	movs	r3, #10
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005b1e:	e002      	b.n	8005b26 <USB_CoreReset+0x32>
  {
    count--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1f9      	bne.n	8005b20 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f043 0201 	orr.w	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b44:	d901      	bls.n	8005b4a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e006      	b.n	8005b58 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d0f0      	beq.n	8005b38 <USB_CoreReset+0x44>

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b64:	b084      	sub	sp, #16
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b086      	sub	sp, #24
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b84:	461a      	mov	r2, r3
 8005b86:	2300      	movs	r3, #0
 8005b88:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d119      	bne.n	8005bee <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005bba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d10a      	bne.n	8005bd8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005bd0:	f043 0304 	orr.w	r3, r3, #4
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	e014      	b.n	8005c02 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005be6:	f023 0304 	bic.w	r3, r3, #4
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	e009      	b.n	8005c02 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005bfc:	f023 0304 	bic.w	r3, r3, #4
 8005c00:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c02:	2110      	movs	r1, #16
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff fe3d 	bl	8005884 <USB_FlushTxFifo>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff fe67 	bl	80058e8 <USB_FlushRxFifo>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c24:	2300      	movs	r3, #0
 8005c26:	613b      	str	r3, [r7, #16]
 8005c28:	e015      	b.n	8005c56 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c36:	461a      	mov	r2, r3
 8005c38:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	3301      	adds	r3, #1
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d3e3      	bcc.n	8005c2a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a18      	ldr	r2, [pc, #96]	@ (8005cd4 <USB_HostInit+0x170>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d10b      	bne.n	8005c90 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c7e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a15      	ldr	r2, [pc, #84]	@ (8005cd8 <USB_HostInit+0x174>)
 8005c84:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a14      	ldr	r2, [pc, #80]	@ (8005cdc <USB_HostInit+0x178>)
 8005c8a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005c8e:	e009      	b.n	8005ca4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2280      	movs	r2, #128	@ 0x80
 8005c94:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a11      	ldr	r2, [pc, #68]	@ (8005ce0 <USB_HostInit+0x17c>)
 8005c9a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a11      	ldr	r2, [pc, #68]	@ (8005ce4 <USB_HostInit+0x180>)
 8005ca0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ca4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d105      	bne.n	8005cb8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	f043 0210 	orr.w	r2, r3, #16
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	699a      	ldr	r2, [r3, #24]
 8005cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce8 <USB_HostInit+0x184>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cd0:	b004      	add	sp, #16
 8005cd2:	4770      	bx	lr
 8005cd4:	40040000 	.word	0x40040000
 8005cd8:	01000200 	.word	0x01000200
 8005cdc:	00e00300 	.word	0x00e00300
 8005ce0:	00600080 	.word	0x00600080
 8005ce4:	004000e0 	.word	0x004000e0
 8005ce8:	a3200008 	.word	0xa3200008

08005cec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005d0a:	f023 0303 	bic.w	r3, r3, #3
 8005d0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	68f9      	ldr	r1, [r7, #12]
 8005d20:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005d24:	4313      	orrs	r3, r2
 8005d26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d107      	bne.n	8005d3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d34:	461a      	mov	r2, r3
 8005d36:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005d3a:	6053      	str	r3, [r2, #4]
 8005d3c:	e00c      	b.n	8005d58 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d107      	bne.n	8005d54 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005d50:	6053      	str	r3, [r2, #4]
 8005d52:	e001      	b.n	8005d58 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005d86:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d94:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005d96:	2064      	movs	r0, #100	@ 0x64
 8005d98:	f7fc f802 	bl	8001da0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005da8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005daa:	200a      	movs	r0, #10
 8005dac:	f7fb fff8 	bl	8001da0 <HAL_Delay>

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b085      	sub	sp, #20
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005dde:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d109      	bne.n	8005dfe <USB_DriveVbus+0x44>
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d106      	bne.n	8005dfe <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005df8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005dfc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e08:	d109      	bne.n	8005e1e <USB_DriveVbus+0x64>
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005e18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e1c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	0c5b      	lsrs	r3, r3, #17
 8005e4a:	f003 0303 	and.w	r3, r3, #3
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	b29b      	uxth	r3, r3
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	4608      	mov	r0, r1
 8005e86:	4611      	mov	r1, r2
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	70fb      	strb	r3, [r7, #3]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	70bb      	strb	r3, [r7, #2]
 8005e92:	4613      	mov	r3, r2
 8005e94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005e9e:	78fb      	ldrb	r3, [r7, #3]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005eb2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005eb6:	2b03      	cmp	r3, #3
 8005eb8:	d87c      	bhi.n	8005fb4 <USB_HC_Init+0x138>
 8005eba:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec0 <USB_HC_Init+0x44>)
 8005ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec0:	08005ed1 	.word	0x08005ed1
 8005ec4:	08005f77 	.word	0x08005f77
 8005ec8:	08005ed1 	.word	0x08005ed1
 8005ecc:	08005f39 	.word	0x08005f39
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005edc:	461a      	mov	r2, r3
 8005ede:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005ee2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ee4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	da10      	bge.n	8005f0e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	78fa      	ldrb	r2, [r7, #3]
 8005efc:	0151      	lsls	r1, r2, #5
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	440a      	add	r2, r1
 8005f02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f0a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005f0c:	e055      	b.n	8005fba <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a6f      	ldr	r2, [pc, #444]	@ (80060d0 <USB_HC_Init+0x254>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d151      	bne.n	8005fba <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	78fa      	ldrb	r2, [r7, #3]
 8005f26:	0151      	lsls	r1, r2, #5
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	440a      	add	r2, r1
 8005f2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f30:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005f34:	60d3      	str	r3, [r2, #12]
      break;
 8005f36:	e040      	b.n	8005fba <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f44:	461a      	mov	r2, r3
 8005f46:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005f4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	da34      	bge.n	8005fbe <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	78fa      	ldrb	r2, [r7, #3]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f72:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f74:	e023      	b.n	8005fbe <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f82:	461a      	mov	r2, r3
 8005f84:	f240 2325 	movw	r3, #549	@ 0x225
 8005f88:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	da17      	bge.n	8005fc2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	78fa      	ldrb	r2, [r7, #3]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fac:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005fb0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005fb2:	e006      	b.n	8005fc2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	77fb      	strb	r3, [r7, #31]
      break;
 8005fb8:	e004      	b.n	8005fc4 <USB_HC_Init+0x148>
      break;
 8005fba:	bf00      	nop
 8005fbc:	e002      	b.n	8005fc4 <USB_HC_Init+0x148>
      break;
 8005fbe:	bf00      	nop
 8005fc0:	e000      	b.n	8005fc4 <USB_HC_Init+0x148>
      break;
 8005fc2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005fd6:	78fb      	ldrb	r3, [r7, #3]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	78fa      	ldrb	r2, [r7, #3]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ff0:	f043 0302 	orr.w	r3, r3, #2
 8005ff4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	78fb      	ldrb	r3, [r7, #3]
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	2101      	movs	r1, #1
 8006006:	fa01 f303 	lsl.w	r3, r1, r3
 800600a:	6939      	ldr	r1, [r7, #16]
 800600c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006010:	4313      	orrs	r3, r2
 8006012:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006020:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006024:	2b00      	cmp	r3, #0
 8006026:	da03      	bge.n	8006030 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006028:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800602c:	61bb      	str	r3, [r7, #24]
 800602e:	e001      	b.n	8006034 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff fef9 	bl	8005e2c <USB_GetHostSpeed>
 800603a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800603c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006040:	2b02      	cmp	r3, #2
 8006042:	d106      	bne.n	8006052 <USB_HC_Init+0x1d6>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d003      	beq.n	8006052 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800604a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e001      	b.n	8006056 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006056:	787b      	ldrb	r3, [r7, #1]
 8006058:	059b      	lsls	r3, r3, #22
 800605a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800605e:	78bb      	ldrb	r3, [r7, #2]
 8006060:	02db      	lsls	r3, r3, #11
 8006062:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006066:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006068:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800606c:	049b      	lsls	r3, r3, #18
 800606e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006072:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006074:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006076:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800607a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	431a      	orrs	r2, r3
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006084:	78fa      	ldrb	r2, [r7, #3]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	440a      	add	r2, r1
 800608c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006090:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006094:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006096:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800609a:	2b03      	cmp	r3, #3
 800609c:	d003      	beq.n	80060a6 <USB_HC_Init+0x22a>
 800609e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d10f      	bne.n	80060c6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80060a6:	78fb      	ldrb	r3, [r7, #3]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	78fa      	ldrb	r2, [r7, #3]
 80060b6:	0151      	lsls	r1, r2, #5
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	440a      	add	r2, r1
 80060bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060c4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80060c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3720      	adds	r7, #32
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	40040000 	.word	0x40040000

080060d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08c      	sub	sp, #48	@ 0x30
 80060d8:	af02      	add	r7, sp, #8
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	4613      	mov	r3, r2
 80060e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80060ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060f0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4a5d      	ldr	r2, [pc, #372]	@ (800626c <USB_HC_StartXfer+0x198>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d12f      	bne.n	800615a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d11c      	bne.n	800613a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	7c9b      	ldrb	r3, [r3, #18]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d003      	beq.n	8006110 <USB_HC_StartXfer+0x3c>
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	7c9b      	ldrb	r3, [r3, #18]
 800610c:	2b02      	cmp	r3, #2
 800610e:	d124      	bne.n	800615a <USB_HC_StartXfer+0x86>
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	799b      	ldrb	r3, [r3, #6]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d120      	bne.n	800615a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	4413      	add	r3, r2
 8006120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	69fa      	ldr	r2, [r7, #28]
 8006128:	0151      	lsls	r1, r2, #5
 800612a:	6a3a      	ldr	r2, [r7, #32]
 800612c:	440a      	add	r2, r1
 800612e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006136:	60d3      	str	r3, [r2, #12]
 8006138:	e00f      	b.n	800615a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	791b      	ldrb	r3, [r3, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10b      	bne.n	800615a <USB_HC_StartXfer+0x86>
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	795b      	ldrb	r3, [r3, #5]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d107      	bne.n	800615a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	785b      	ldrb	r3, [r3, #1]
 800614e:	4619      	mov	r1, r3
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 fb6b 	bl	800682c <USB_DoPing>
        return HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	e232      	b.n	80065c0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	799b      	ldrb	r3, [r3, #6]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d158      	bne.n	8006214 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006162:	2301      	movs	r3, #1
 8006164:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	78db      	ldrb	r3, [r3, #3]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800616e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	8a92      	ldrh	r2, [r2, #20]
 8006174:	fb03 f202 	mul.w	r2, r3, r2
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	61da      	str	r2, [r3, #28]
 800617c:	e07c      	b.n	8006278 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	7c9b      	ldrb	r3, [r3, #18]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d130      	bne.n	80061e8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	2bbc      	cmp	r3, #188	@ 0xbc
 800618c:	d918      	bls.n	80061c0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	8a9b      	ldrh	r3, [r3, #20]
 8006192:	461a      	mov	r2, r3
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	69da      	ldr	r2, [r3, #28]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d003      	beq.n	80061b0 <USB_HC_StartXfer+0xdc>
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d103      	bne.n	80061b8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2202      	movs	r2, #2
 80061b4:	60da      	str	r2, [r3, #12]
 80061b6:	e05f      	b.n	8006278 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2201      	movs	r2, #1
 80061bc:	60da      	str	r2, [r3, #12]
 80061be:	e05b      	b.n	8006278 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	6a1a      	ldr	r2, [r3, #32]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d007      	beq.n	80061e0 <USB_HC_StartXfer+0x10c>
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d003      	beq.n	80061e0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2204      	movs	r2, #4
 80061dc:	60da      	str	r2, [r3, #12]
 80061de:	e04b      	b.n	8006278 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2203      	movs	r2, #3
 80061e4:	60da      	str	r2, [r3, #12]
 80061e6:	e047      	b.n	8006278 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80061e8:	79fb      	ldrb	r3, [r7, #7]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d10d      	bne.n	800620a <USB_HC_StartXfer+0x136>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	8a92      	ldrh	r2, [r2, #20]
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d907      	bls.n	800620a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	8a92      	ldrh	r2, [r2, #20]
 8006200:	fb03 f202 	mul.w	r2, r3, r2
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	61da      	str	r2, [r3, #28]
 8006208:	e036      	b.n	8006278 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	6a1a      	ldr	r2, [r3, #32]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	61da      	str	r2, [r3, #28]
 8006212:	e031      	b.n	8006278 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d018      	beq.n	800624e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	8a92      	ldrh	r2, [r2, #20]
 8006224:	4413      	add	r3, r2
 8006226:	3b01      	subs	r3, #1
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	8a92      	ldrh	r2, [r2, #20]
 800622c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006230:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006232:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006234:	8b7b      	ldrh	r3, [r7, #26]
 8006236:	429a      	cmp	r2, r3
 8006238:	d90b      	bls.n	8006252 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800623a:	8b7b      	ldrh	r3, [r7, #26]
 800623c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800623e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	8a92      	ldrh	r2, [r2, #20]
 8006244:	fb03 f202 	mul.w	r2, r3, r2
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	61da      	str	r2, [r3, #28]
 800624c:	e001      	b.n	8006252 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800624e:	2301      	movs	r3, #1
 8006250:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	78db      	ldrb	r3, [r3, #3]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800625a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	8a92      	ldrh	r2, [r2, #20]
 8006260:	fb03 f202 	mul.w	r2, r3, r2
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	61da      	str	r2, [r3, #28]
 8006268:	e006      	b.n	8006278 <USB_HC_StartXfer+0x1a4>
 800626a:	bf00      	nop
 800626c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	6a1a      	ldr	r2, [r3, #32]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006280:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006282:	04d9      	lsls	r1, r3, #19
 8006284:	4ba3      	ldr	r3, [pc, #652]	@ (8006514 <USB_HC_StartXfer+0x440>)
 8006286:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006288:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	7d9b      	ldrb	r3, [r3, #22]
 800628e:	075b      	lsls	r3, r3, #29
 8006290:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006294:	69f9      	ldr	r1, [r7, #28]
 8006296:	0148      	lsls	r0, r1, #5
 8006298:	6a39      	ldr	r1, [r7, #32]
 800629a:	4401      	add	r1, r0
 800629c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062a0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062a2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	6999      	ldr	r1, [r3, #24]
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ba:	460a      	mov	r2, r1
 80062bc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	bf0c      	ite	eq
 80062ce:	2301      	moveq	r3, #1
 80062d0:	2300      	movne	r3, #0
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	6a3a      	ldr	r2, [r7, #32]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062f4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	7e7b      	ldrb	r3, [r7, #25]
 8006306:	075b      	lsls	r3, r3, #29
 8006308:	69f9      	ldr	r1, [r7, #28]
 800630a:	0148      	lsls	r0, r1, #5
 800630c:	6a39      	ldr	r1, [r7, #32]
 800630e:	4401      	add	r1, r0
 8006310:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006314:	4313      	orrs	r3, r2
 8006316:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	799b      	ldrb	r3, [r3, #6]
 800631c:	2b01      	cmp	r3, #1
 800631e:	f040 80c3 	bne.w	80064a8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	7c5b      	ldrb	r3, [r3, #17]
 8006326:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800632c:	4313      	orrs	r3, r2
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	0151      	lsls	r1, r2, #5
 8006332:	6a3a      	ldr	r2, [r7, #32]
 8006334:	440a      	add	r2, r1
 8006336:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800633a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800633e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	4413      	add	r3, r2
 8006348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	6a3a      	ldr	r2, [r7, #32]
 8006354:	440a      	add	r2, r1
 8006356:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800635a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800635e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	79db      	ldrb	r3, [r3, #7]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d123      	bne.n	80063b0 <USB_HC_StartXfer+0x2dc>
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	78db      	ldrb	r3, [r3, #3]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d11f      	bne.n	80063b0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	4413      	add	r3, r2
 8006378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	0151      	lsls	r1, r2, #5
 8006382:	6a3a      	ldr	r2, [r7, #32]
 8006384:	440a      	add	r2, r1
 8006386:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800638a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800638e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	4413      	add	r3, r2
 8006398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	69fa      	ldr	r2, [r7, #28]
 80063a0:	0151      	lsls	r1, r2, #5
 80063a2:	6a3a      	ldr	r2, [r7, #32]
 80063a4:	440a      	add	r2, r1
 80063a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063ae:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	7c9b      	ldrb	r3, [r3, #18]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d003      	beq.n	80063c0 <USB_HC_StartXfer+0x2ec>
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	7c9b      	ldrb	r3, [r3, #18]
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d117      	bne.n	80063f0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d113      	bne.n	80063f0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	78db      	ldrb	r3, [r3, #3]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d10f      	bne.n	80063f0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	0151      	lsls	r1, r2, #5
 80063e2:	6a3a      	ldr	r2, [r7, #32]
 80063e4:	440a      	add	r2, r1
 80063e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ee:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	7c9b      	ldrb	r3, [r3, #18]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d162      	bne.n	80064be <USB_HC_StartXfer+0x3ea>
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	78db      	ldrb	r3, [r3, #3]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d15e      	bne.n	80064be <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	3b01      	subs	r3, #1
 8006406:	2b03      	cmp	r3, #3
 8006408:	d858      	bhi.n	80064bc <USB_HC_StartXfer+0x3e8>
 800640a:	a201      	add	r2, pc, #4	@ (adr r2, 8006410 <USB_HC_StartXfer+0x33c>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006421 	.word	0x08006421
 8006414:	08006443 	.word	0x08006443
 8006418:	08006465 	.word	0x08006465
 800641c:	08006487 	.word	0x08006487
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	4413      	add	r3, r2
 8006428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	0151      	lsls	r1, r2, #5
 8006432:	6a3a      	ldr	r2, [r7, #32]
 8006434:	440a      	add	r2, r1
 8006436:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800643a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800643e:	6053      	str	r3, [r2, #4]
          break;
 8006440:	e03d      	b.n	80064be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	4413      	add	r3, r2
 800644a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	69fa      	ldr	r2, [r7, #28]
 8006452:	0151      	lsls	r1, r2, #5
 8006454:	6a3a      	ldr	r2, [r7, #32]
 8006456:	440a      	add	r2, r1
 8006458:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800645c:	f043 030e 	orr.w	r3, r3, #14
 8006460:	6053      	str	r3, [r2, #4]
          break;
 8006462:	e02c      	b.n	80064be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	4413      	add	r3, r2
 800646c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	69fa      	ldr	r2, [r7, #28]
 8006474:	0151      	lsls	r1, r2, #5
 8006476:	6a3a      	ldr	r2, [r7, #32]
 8006478:	440a      	add	r2, r1
 800647a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800647e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006482:	6053      	str	r3, [r2, #4]
          break;
 8006484:	e01b      	b.n	80064be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	4413      	add	r3, r2
 800648e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	69fa      	ldr	r2, [r7, #28]
 8006496:	0151      	lsls	r1, r2, #5
 8006498:	6a3a      	ldr	r2, [r7, #32]
 800649a:	440a      	add	r2, r1
 800649c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064a4:	6053      	str	r3, [r2, #4]
          break;
 80064a6:	e00a      	b.n	80064be <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064b4:	461a      	mov	r2, r3
 80064b6:	2300      	movs	r3, #0
 80064b8:	6053      	str	r3, [r2, #4]
 80064ba:	e000      	b.n	80064be <USB_HC_StartXfer+0x3ea>
          break;
 80064bc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80064d4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	78db      	ldrb	r3, [r3, #3]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d004      	beq.n	80064e8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064e4:	613b      	str	r3, [r7, #16]
 80064e6:	e003      	b.n	80064f0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064ee:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064f6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006504:	461a      	mov	r2, r3
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	e055      	b.n	80065c0 <USB_HC_StartXfer+0x4ec>
 8006514:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	78db      	ldrb	r3, [r3, #3]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d14e      	bne.n	80065be <USB_HC_StartXfer+0x4ea>
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d04a      	beq.n	80065be <USB_HC_StartXfer+0x4ea>
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	79db      	ldrb	r3, [r3, #7]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d146      	bne.n	80065be <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	7c9b      	ldrb	r3, [r3, #18]
 8006534:	2b03      	cmp	r3, #3
 8006536:	d831      	bhi.n	800659c <USB_HC_StartXfer+0x4c8>
 8006538:	a201      	add	r2, pc, #4	@ (adr r2, 8006540 <USB_HC_StartXfer+0x46c>)
 800653a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653e:	bf00      	nop
 8006540:	08006551 	.word	0x08006551
 8006544:	08006575 	.word	0x08006575
 8006548:	08006551 	.word	0x08006551
 800654c:	08006575 	.word	0x08006575
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	3303      	adds	r3, #3
 8006556:	089b      	lsrs	r3, r3, #2
 8006558:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800655a:	8afa      	ldrh	r2, [r7, #22]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006560:	b29b      	uxth	r3, r3
 8006562:	429a      	cmp	r2, r3
 8006564:	d91c      	bls.n	80065a0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	f043 0220 	orr.w	r2, r3, #32
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	619a      	str	r2, [r3, #24]
        }
        break;
 8006572:	e015      	b.n	80065a0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	3303      	adds	r3, #3
 800657a:	089b      	lsrs	r3, r3, #2
 800657c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800657e:	8afa      	ldrh	r2, [r7, #22]
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	b29b      	uxth	r3, r3
 800658a:	429a      	cmp	r2, r3
 800658c:	d90a      	bls.n	80065a4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	619a      	str	r2, [r3, #24]
        }
        break;
 800659a:	e003      	b.n	80065a4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800659c:	bf00      	nop
 800659e:	e002      	b.n	80065a6 <USB_HC_StartXfer+0x4d2>
        break;
 80065a0:	bf00      	nop
 80065a2:	e000      	b.n	80065a6 <USB_HC_StartXfer+0x4d2>
        break;
 80065a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	6999      	ldr	r1, [r3, #24]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	785a      	ldrb	r2, [r3, #1]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	2000      	movs	r0, #0
 80065b6:	9000      	str	r0, [sp, #0]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f7ff f9c3 	bl	8005944 <USB_WritePacket>
  }

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3728      	adds	r7, #40	@ 0x28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	b29b      	uxth	r3, r3
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b089      	sub	sp, #36	@ 0x24
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	460b      	mov	r3, r1
 80065f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	4413      	add	r3, r2
 800660a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	0c9b      	lsrs	r3, r3, #18
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	4413      	add	r3, r2
 8006620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	0fdb      	lsrs	r3, r3, #31
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	4413      	add	r3, r2
 8006636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	0fdb      	lsrs	r3, r3, #31
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f003 0320 	and.w	r3, r3, #32
 800664c:	2b20      	cmp	r3, #32
 800664e:	d10d      	bne.n	800666c <USB_HC_Halt+0x82>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10a      	bne.n	800666c <USB_HC_Halt+0x82>
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d005      	beq.n	8006668 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d002      	beq.n	8006668 <USB_HC_Halt+0x7e>
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2b03      	cmp	r3, #3
 8006666:	d101      	bne.n	800666c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006668:	2300      	movs	r3, #0
 800666a:	e0d8      	b.n	800681e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <USB_HC_Halt+0x8e>
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d173      	bne.n	8006760 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	4413      	add	r3, r2
 8006680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	0151      	lsls	r1, r2, #5
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	440a      	add	r2, r1
 800668e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006692:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006696:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d14a      	bne.n	800673a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d133      	bne.n	8006718 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	0151      	lsls	r1, r2, #5
 80066c2:	69fa      	ldr	r2, [r7, #28]
 80066c4:	440a      	add	r2, r1
 80066c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066ce:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	0151      	lsls	r1, r2, #5
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	440a      	add	r2, r1
 80066e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066ee:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	3301      	adds	r3, #1
 80066f4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066fc:	d82e      	bhi.n	800675c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	4413      	add	r3, r2
 8006706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006710:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006714:	d0ec      	beq.n	80066f0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006716:	e081      	b.n	800681c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	4413      	add	r3, r2
 8006720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	0151      	lsls	r1, r2, #5
 800672a:	69fa      	ldr	r2, [r7, #28]
 800672c:	440a      	add	r2, r1
 800672e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006732:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006736:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006738:	e070      	b.n	800681c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	4413      	add	r3, r2
 8006742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	440a      	add	r2, r1
 8006750:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006754:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006758:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800675a:	e05f      	b.n	800681c <USB_HC_Halt+0x232>
            break;
 800675c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800675e:	e05d      	b.n	800681c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	4413      	add	r3, r2
 8006768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	0151      	lsls	r1, r2, #5
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	440a      	add	r2, r1
 8006776:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800677a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800677e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d133      	bne.n	80067f8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	4413      	add	r3, r2
 8006798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	0151      	lsls	r1, r2, #5
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	440a      	add	r2, r1
 80067a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	0151      	lsls	r1, r2, #5
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	440a      	add	r2, r1
 80067c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067ce:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	3301      	adds	r3, #1
 80067d4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067dc:	d81d      	bhi.n	800681a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067f4:	d0ec      	beq.n	80067d0 <USB_HC_Halt+0x1e6>
 80067f6:	e011      	b.n	800681c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69ba      	ldr	r2, [r7, #24]
 8006808:	0151      	lsls	r1, r2, #5
 800680a:	69fa      	ldr	r2, [r7, #28]
 800680c:	440a      	add	r2, r1
 800680e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006812:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	e000      	b.n	800681c <USB_HC_Halt+0x232>
          break;
 800681a:	bf00      	nop
    }
  }

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3724      	adds	r7, #36	@ 0x24
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
	...

0800682c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006840:	2301      	movs	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	04da      	lsls	r2, r3, #19
 8006848:	4b15      	ldr	r3, [pc, #84]	@ (80068a0 <USB_DoPing+0x74>)
 800684a:	4013      	ands	r3, r2
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	0151      	lsls	r1, r2, #5
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	440a      	add	r2, r1
 8006854:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006858:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800685c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	4413      	add	r3, r2
 8006866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006874:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800687c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	4413      	add	r3, r2
 8006886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800688a:	461a      	mov	r2, r3
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	1ff80000 	.word	0x1ff80000

080068a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7fe ff86 	bl	80057ca <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068be:	2110      	movs	r1, #16
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7fe ffdf 	bl	8005884 <USB_FlushTxFifo>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7ff f809 	bl	80058e8 <USB_FlushRxFifo>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80068e0:	2300      	movs	r3, #0
 80068e2:	61bb      	str	r3, [r7, #24]
 80068e4:	e01f      	b.n	8006926 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006904:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800690c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	4413      	add	r3, r2
 8006916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800691a:	461a      	mov	r2, r3
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	3301      	adds	r3, #1
 8006924:	61bb      	str	r3, [r7, #24]
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	2b0f      	cmp	r3, #15
 800692a:	d9dc      	bls.n	80068e6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800692c:	2300      	movs	r3, #0
 800692e:	61bb      	str	r3, [r7, #24]
 8006930:	e034      	b.n	800699c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	4413      	add	r3, r2
 800693a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006948:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006950:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006958:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	4413      	add	r3, r2
 8006962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006966:	461a      	mov	r2, r3
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3301      	adds	r3, #1
 8006970:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006978:	d80c      	bhi.n	8006994 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	4413      	add	r3, r2
 8006982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800698c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006990:	d0ec      	beq.n	800696c <USB_StopHost+0xc8>
 8006992:	e000      	b.n	8006996 <USB_StopHost+0xf2>
        break;
 8006994:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	3301      	adds	r3, #1
 800699a:	61bb      	str	r3, [r7, #24]
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	2b0f      	cmp	r3, #15
 80069a0:	d9c7      	bls.n	8006932 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069a8:	461a      	mov	r2, r3
 80069aa:	f04f 33ff 	mov.w	r3, #4294967295
 80069ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f04f 32ff 	mov.w	r2, #4294967295
 80069b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7fe fef5 	bl	80057a8 <USB_EnableGlobalInt>

  return ret;
 80069be:	7ffb      	ldrb	r3, [r7, #31]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3720      	adds	r7, #32
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80069cc:	4904      	ldr	r1, [pc, #16]	@ (80069e0 <MX_FATFS_Init+0x18>)
 80069ce:	4805      	ldr	r0, [pc, #20]	@ (80069e4 <MX_FATFS_Init+0x1c>)
 80069d0:	f008 f95a 	bl	800ec88 <FATFS_LinkDriver>
 80069d4:	4603      	mov	r3, r0
 80069d6:	461a      	mov	r2, r3
 80069d8:	4b03      	ldr	r3, [pc, #12]	@ (80069e8 <MX_FATFS_Init+0x20>)
 80069da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80069dc:	bf00      	nop
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	200003a8 	.word	0x200003a8
 80069e4:	080127c8 	.word	0x080127c8
 80069e8:	200003a4 	.word	0x200003a4

080069ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80069f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	4603      	mov	r3, r0
 8006a04:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	4619      	mov	r1, r3
 8006a26:	4808      	ldr	r0, [pc, #32]	@ (8006a48 <USBH_status+0x34>)
 8006a28:	f000 fe79 	bl	800771e <USBH_MSC_UnitIsReady>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <USBH_status+0x24>
  {
    res = RES_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	73fb      	strb	r3, [r7, #15]
 8006a36:	e001      	b.n	8006a3c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	200028d4 	.word	0x200028d4

08006a4c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b094      	sub	sp, #80	@ 0x50
 8006a50:	af02      	add	r7, sp, #8
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	4603      	mov	r3, r0
 8006a5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8006a62:	7bf9      	ldrb	r1, [r7, #15]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	4813      	ldr	r0, [pc, #76]	@ (8006abc <USBH_read+0x70>)
 8006a6e:	f000 feaa 	bl	80077c6 <USBH_MSC_Read>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d103      	bne.n	8006a80 <USBH_read+0x34>
  {
    res = RES_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006a7e:	e017      	b.n	8006ab0 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006a80:	f107 0210 	add.w	r2, r7, #16
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	4619      	mov	r1, r3
 8006a88:	480c      	ldr	r0, [pc, #48]	@ (8006abc <USBH_read+0x70>)
 8006a8a:	f000 fe73 	bl	8007774 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006a8e:	7f7b      	ldrb	r3, [r7, #29]
 8006a90:	2b3a      	cmp	r3, #58	@ 0x3a
 8006a92:	d005      	beq.n	8006aa0 <USBH_read+0x54>
 8006a94:	2b3a      	cmp	r3, #58	@ 0x3a
 8006a96:	dc07      	bgt.n	8006aa8 <USBH_read+0x5c>
 8006a98:	2b04      	cmp	r3, #4
 8006a9a:	d001      	beq.n	8006aa0 <USBH_read+0x54>
 8006a9c:	2b28      	cmp	r3, #40	@ 0x28
 8006a9e:	d103      	bne.n	8006aa8 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8006aa6:	e003      	b.n	8006ab0 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8006aae:	bf00      	nop
    }
  }

  return res;
 8006ab0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3748      	adds	r7, #72	@ 0x48
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	200028d4 	.word	0x200028d4

08006ac0 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b094      	sub	sp, #80	@ 0x50
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	607a      	str	r2, [r7, #4]
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	4603      	mov	r3, r0
 8006ace:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8006ad6:	7bf9      	ldrb	r1, [r7, #15]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	4817      	ldr	r0, [pc, #92]	@ (8006b40 <USBH_write+0x80>)
 8006ae2:	f000 fed0 	bl	8007886 <USBH_MSC_Write>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d103      	bne.n	8006af4 <USBH_write+0x34>
  {
    res = RES_OK;
 8006aec:	2300      	movs	r3, #0
 8006aee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006af2:	e01f      	b.n	8006b34 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006af4:	f107 0210 	add.w	r2, r7, #16
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	4619      	mov	r1, r3
 8006afc:	4810      	ldr	r0, [pc, #64]	@ (8006b40 <USBH_write+0x80>)
 8006afe:	f000 fe39 	bl	8007774 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006b02:	7f7b      	ldrb	r3, [r7, #29]
 8006b04:	2b3a      	cmp	r3, #58	@ 0x3a
 8006b06:	d00d      	beq.n	8006b24 <USBH_write+0x64>
 8006b08:	2b3a      	cmp	r3, #58	@ 0x3a
 8006b0a:	dc0f      	bgt.n	8006b2c <USBH_write+0x6c>
 8006b0c:	2b28      	cmp	r3, #40	@ 0x28
 8006b0e:	d009      	beq.n	8006b24 <USBH_write+0x64>
 8006b10:	2b28      	cmp	r3, #40	@ 0x28
 8006b12:	dc0b      	bgt.n	8006b2c <USBH_write+0x6c>
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d005      	beq.n	8006b24 <USBH_write+0x64>
 8006b18:	2b27      	cmp	r3, #39	@ 0x27
 8006b1a:	d107      	bne.n	8006b2c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8006b22:	e007      	b.n	8006b34 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006b24:	2303      	movs	r3, #3
 8006b26:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8006b2a:	e003      	b.n	8006b34 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8006b32:	bf00      	nop
    }
  }

  return res;
 8006b34:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3748      	adds	r7, #72	@ 0x48
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	200028d4 	.word	0x200028d4

08006b44 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b090      	sub	sp, #64	@ 0x40
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	603a      	str	r2, [r7, #0]
 8006b4e:	71fb      	strb	r3, [r7, #7]
 8006b50:	460b      	mov	r3, r1
 8006b52:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8006b5a:	79bb      	ldrb	r3, [r7, #6]
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d852      	bhi.n	8006c06 <USBH_ioctl+0xc2>
 8006b60:	a201      	add	r2, pc, #4	@ (adr r2, 8006b68 <USBH_ioctl+0x24>)
 8006b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b66:	bf00      	nop
 8006b68:	08006b79 	.word	0x08006b79
 8006b6c:	08006b81 	.word	0x08006b81
 8006b70:	08006bab 	.word	0x08006bab
 8006b74:	08006bd7 	.word	0x08006bd7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8006b7e:	e045      	b.n	8006c0c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006b80:	f107 0208 	add.w	r2, r7, #8
 8006b84:	79fb      	ldrb	r3, [r7, #7]
 8006b86:	4619      	mov	r1, r3
 8006b88:	4823      	ldr	r0, [pc, #140]	@ (8006c18 <USBH_ioctl+0xd4>)
 8006b8a:	f000 fdf3 	bl	8007774 <USBH_MSC_GetLUNInfo>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d106      	bne.n	8006ba2 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006ba0:	e034      	b.n	8006c0c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8006ba8:	e030      	b.n	8006c0c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006baa:	f107 0208 	add.w	r2, r7, #8
 8006bae:	79fb      	ldrb	r3, [r7, #7]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4819      	ldr	r0, [pc, #100]	@ (8006c18 <USBH_ioctl+0xd4>)
 8006bb4:	f000 fdde 	bl	8007774 <USBH_MSC_GetLUNInfo>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d107      	bne.n	8006bce <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8006bbe:	8a3b      	ldrh	r3, [r7, #16]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006bcc:	e01e      	b.n	8006c0c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8006bd4:	e01a      	b.n	8006c0c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006bd6:	f107 0208 	add.w	r2, r7, #8
 8006bda:	79fb      	ldrb	r3, [r7, #7]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	480e      	ldr	r0, [pc, #56]	@ (8006c18 <USBH_ioctl+0xd4>)
 8006be0:	f000 fdc8 	bl	8007774 <USBH_MSC_GetLUNInfo>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d109      	bne.n	8006bfe <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8006bea:	8a3b      	ldrh	r3, [r7, #16]
 8006bec:	0a5b      	lsrs	r3, r3, #9
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006bfc:	e006      	b.n	8006c0c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8006c04:	e002      	b.n	8006c0c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8006c06:	2304      	movs	r3, #4
 8006c08:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 8006c0c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3740      	adds	r7, #64	@ 0x40
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	200028d4 	.word	0x200028d4

08006c1c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006c1c:	b590      	push	{r4, r7, lr}
 8006c1e:	b089      	sub	sp, #36	@ 0x24
 8006c20:	af04      	add	r7, sp, #16
 8006c22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c2a:	7919      	ldrb	r1, [r3, #4]
 8006c2c:	2350      	movs	r3, #80	@ 0x50
 8006c2e:	2206      	movs	r2, #6
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 fcd5 	bl	80085e0 <USBH_FindInterface>
 8006c36:	4603      	mov	r3, r0
 8006c38:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	2bff      	cmp	r3, #255	@ 0xff
 8006c3e:	d002      	beq.n	8006c46 <USBH_MSC_InterfaceInit+0x2a>
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d901      	bls.n	8006c4a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c46:	2302      	movs	r3, #2
 8006c48:	e106      	b.n	8006e58 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 fcaa 	bl	80085a8 <USBH_SelectInterface>
 8006c54:	4603      	mov	r3, r0
 8006c56:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8006c5e:	2302      	movs	r3, #2
 8006c60:	e0fa      	b.n	8006e58 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006c68:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8006c6c:	f008 fc18 	bl	800f4a0 <malloc>
 8006c70:	4603      	mov	r3, r0
 8006c72:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c7a:	69db      	ldr	r3, [r3, #28]
 8006c7c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8006c84:	2302      	movs	r3, #2
 8006c86:	e0e7      	b.n	8006e58 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006c88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	68b8      	ldr	r0, [r7, #8]
 8006c90:	f009 fa41 	bl	8010116 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	211a      	movs	r1, #26
 8006c9a:	fb01 f303 	mul.w	r3, r1, r3
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	b25b      	sxtb	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	da16      	bge.n	8006cda <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	211a      	movs	r1, #26
 8006cb2:	fb01 f303 	mul.w	r3, r1, r3
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006cbc:	781a      	ldrb	r2, [r3, #0]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	211a      	movs	r1, #26
 8006cc8:	fb01 f303 	mul.w	r3, r1, r3
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006cd2:	881a      	ldrh	r2, [r3, #0]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	815a      	strh	r2, [r3, #10]
 8006cd8:	e015      	b.n	8006d06 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	211a      	movs	r1, #26
 8006ce0:	fb01 f303 	mul.w	r3, r1, r3
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006cea:	781a      	ldrb	r2, [r3, #0]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	211a      	movs	r1, #26
 8006cf6:	fb01 f303 	mul.w	r3, r1, r3
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d00:	881a      	ldrh	r2, [r3, #0]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	211a      	movs	r1, #26
 8006d0c:	fb01 f303 	mul.w	r3, r1, r3
 8006d10:	4413      	add	r3, r2
 8006d12:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	b25b      	sxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	da16      	bge.n	8006d4c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	211a      	movs	r1, #26
 8006d24:	fb01 f303 	mul.w	r3, r1, r3
 8006d28:	4413      	add	r3, r2
 8006d2a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d2e:	781a      	ldrb	r2, [r3, #0]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	211a      	movs	r1, #26
 8006d3a:	fb01 f303 	mul.w	r3, r1, r3
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006d44:	881a      	ldrh	r2, [r3, #0]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	815a      	strh	r2, [r3, #10]
 8006d4a:	e015      	b.n	8006d78 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	211a      	movs	r1, #26
 8006d52:	fb01 f303 	mul.w	r3, r1, r3
 8006d56:	4413      	add	r3, r2
 8006d58:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d5c:	781a      	ldrb	r2, [r3, #0]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	211a      	movs	r1, #26
 8006d68:	fb01 f303 	mul.w	r3, r1, r3
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006d72:	881a      	ldrh	r2, [r3, #0]
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2200      	movs	r2, #0
 8006d82:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2200      	movs	r2, #0
 8006d88:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	799b      	ldrb	r3, [r3, #6]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f002 ffba 	bl	8009d0a <USBH_AllocPipe>
 8006d96:	4603      	mov	r3, r0
 8006d98:	461a      	mov	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	79db      	ldrb	r3, [r3, #7]
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f002 ffb0 	bl	8009d0a <USBH_AllocPipe>
 8006daa:	4603      	mov	r3, r0
 8006dac:	461a      	mov	r2, r3
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fe02 	bl	80079bc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	799b      	ldrb	r3, [r3, #6]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d01e      	beq.n	8006dfe <USBH_MSC_InterfaceInit+0x1e2>
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	891b      	ldrh	r3, [r3, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01a      	beq.n	8006dfe <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	7959      	ldrb	r1, [r3, #5]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	7998      	ldrb	r0, [r3, #6]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	8912      	ldrh	r2, [r2, #8]
 8006de0:	9202      	str	r2, [sp, #8]
 8006de2:	2202      	movs	r2, #2
 8006de4:	9201      	str	r2, [sp, #4]
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	4623      	mov	r3, r4
 8006dea:	4602      	mov	r2, r0
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f002 ff5d 	bl	8009cac <USBH_OpenPipe>
 8006df2:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	79db      	ldrb	r3, [r3, #7]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d02c      	beq.n	8006e56 <USBH_MSC_InterfaceInit+0x23a>
 8006dfc:	e001      	b.n	8006e02 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e02a      	b.n	8006e58 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	895b      	ldrh	r3, [r3, #10]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d025      	beq.n	8006e56 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	7919      	ldrb	r1, [r3, #4]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	79d8      	ldrb	r0, [r3, #7]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	8952      	ldrh	r2, [r2, #10]
 8006e22:	9202      	str	r2, [sp, #8]
 8006e24:	2202      	movs	r2, #2
 8006e26:	9201      	str	r2, [sp, #4]
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	4623      	mov	r3, r4
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f002 ff3c 	bl	8009cac <USBH_OpenPipe>
 8006e34:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	791b      	ldrb	r3, [r3, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f008 fa74 	bl	800f32c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	795b      	ldrb	r3, [r3, #5]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f008 fa6d 	bl	800f32c <USBH_LL_SetToggle>

  return USBH_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	e000      	b.n	8006e58 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8006e56:	2303      	movs	r3, #3
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd90      	pop	{r4, r7, pc}

08006e60 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	795b      	ldrb	r3, [r3, #5]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00e      	beq.n	8006e98 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	795b      	ldrb	r3, [r3, #5]
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f002 ff32 	bl	8009cea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	795b      	ldrb	r3, [r3, #5]
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f002 ff5d 	bl	8009d4c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	791b      	ldrb	r3, [r3, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00e      	beq.n	8006ebe <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	791b      	ldrb	r3, [r3, #4]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f002 ff1f 	bl	8009cea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	791b      	ldrb	r3, [r3, #4]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f002 ff4a 	bl	8009d4c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00b      	beq.n	8006ee2 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f008 faec 	bl	800f4b0 <free>
    phost->pActiveClass->pData = 0U;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ede:	2200      	movs	r2, #0
 8006ee0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006efa:	69db      	ldr	r3, [r3, #28]
 8006efc:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006efe:	2301      	movs	r3, #1
 8006f00:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	7b9b      	ldrb	r3, [r3, #14]
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d041      	beq.n	8006f8e <USBH_MSC_ClassRequest+0xa2>
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	dc4b      	bgt.n	8006fa6 <USBH_MSC_ClassRequest+0xba>
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <USBH_MSC_ClassRequest+0x2a>
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d147      	bne.n	8006fa6 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fd30 	bl	8007980 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d104      	bne.n	8006f34 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d137      	bne.n	8006faa <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d804      	bhi.n	8006f4c <USBH_MSC_ClassRequest+0x60>
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	3301      	adds	r3, #1
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	e000      	b.n	8006f4e <USBH_MSC_ClassRequest+0x62>
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8006f52:	2300      	movs	r3, #0
 8006f54:	73bb      	strb	r3, [r7, #14]
 8006f56:	e014      	b.n	8006f82 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	2134      	movs	r1, #52	@ 0x34
 8006f5e:	fb01 f303 	mul.w	r3, r1, r3
 8006f62:	4413      	add	r3, r2
 8006f64:	3392      	adds	r3, #146	@ 0x92
 8006f66:	2202      	movs	r2, #2
 8006f68:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 8006f6a:	7bbb      	ldrb	r3, [r7, #14]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	2134      	movs	r1, #52	@ 0x34
 8006f70:	fb01 f303 	mul.w	r3, r1, r3
 8006f74:	4413      	add	r3, r2
 8006f76:	33c1      	adds	r3, #193	@ 0xc1
 8006f78:	2200      	movs	r2, #0
 8006f7a:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	73bb      	strb	r3, [r7, #14]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	7bba      	ldrb	r2, [r7, #14]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d3e5      	bcc.n	8006f58 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8006f8c:	e00d      	b.n	8006faa <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8006f8e:	2100      	movs	r1, #0
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f002 f903 	bl	800919c <USBH_ClrFeature>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d108      	bne.n	8006fae <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	7bda      	ldrb	r2, [r3, #15]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	739a      	strb	r2, [r3, #14]
      }
      break;
 8006fa4:	e003      	b.n	8006fae <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8006fa6:	bf00      	nop
 8006fa8:	e002      	b.n	8006fb0 <USBH_MSC_ClassRequest+0xc4>
      break;
 8006faa:	bf00      	nop
 8006fac:	e000      	b.n	8006fb0 <USBH_MSC_ClassRequest+0xc4>
      break;
 8006fae:	bf00      	nop
  }

  return status;
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	7b1b      	ldrb	r3, [r3, #12]
 8006fde:	2b0a      	cmp	r3, #10
 8006fe0:	f000 8280 	beq.w	80074e4 <USBH_MSC_Process+0x528>
 8006fe4:	2b0a      	cmp	r3, #10
 8006fe6:	f300 82b8 	bgt.w	800755a <USBH_MSC_Process+0x59e>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <USBH_MSC_Process+0x3a>
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	f000 82b0 	beq.w	8007554 <USBH_MSC_Process+0x598>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8006ff4:	e2b1      	b.n	800755a <USBH_MSC_Process+0x59e>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	7812      	ldrb	r2, [r2, #0]
 8007000:	4293      	cmp	r3, r2
 8007002:	f080 825d 	bcs.w	80074c0 <USBH_MSC_Process+0x504>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800700c:	4619      	mov	r1, r3
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	2334      	movs	r3, #52	@ 0x34
 8007012:	fb01 f303 	mul.w	r3, r1, r3
 8007016:	4413      	add	r3, r2
 8007018:	3391      	adds	r3, #145	@ 0x91
 800701a:	2201      	movs	r2, #1
 800701c:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007024:	4619      	mov	r1, r3
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	2334      	movs	r3, #52	@ 0x34
 800702a:	fb01 f303 	mul.w	r3, r1, r3
 800702e:	4413      	add	r3, r2
 8007030:	3390      	adds	r3, #144	@ 0x90
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	2b08      	cmp	r3, #8
 8007036:	f200 824b 	bhi.w	80074d0 <USBH_MSC_Process+0x514>
 800703a:	a201      	add	r2, pc, #4	@ (adr r2, 8007040 <USBH_MSC_Process+0x84>)
 800703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007040:	08007065 	.word	0x08007065
 8007044:	080074d1 	.word	0x080074d1
 8007048:	0800712f 	.word	0x0800712f
 800704c:	080072b5 	.word	0x080072b5
 8007050:	0800708b 	.word	0x0800708b
 8007054:	08007381 	.word	0x08007381
 8007058:	080074d1 	.word	0x080074d1
 800705c:	080074d1 	.word	0x080074d1
 8007060:	080074af 	.word	0x080074af
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800706a:	4619      	mov	r1, r3
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	2334      	movs	r3, #52	@ 0x34
 8007070:	fb01 f303 	mul.w	r3, r1, r3
 8007074:	4413      	add	r3, r2
 8007076:	3390      	adds	r3, #144	@ 0x90
 8007078:	2204      	movs	r2, #4
 800707a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            break;
 8007088:	e22b      	b.n	80074e2 <USBH_MSC_Process+0x526>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007090:	b2d9      	uxtb	r1, r3
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007098:	461a      	mov	r2, r3
 800709a:	2334      	movs	r3, #52	@ 0x34
 800709c:	fb02 f303 	mul.w	r3, r2, r3
 80070a0:	3398      	adds	r3, #152	@ 0x98
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4413      	add	r3, r2
 80070a6:	3307      	adds	r3, #7
 80070a8:	461a      	mov	r2, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 ffa3 	bl	8007ff6 <USBH_MSC_SCSI_Inquiry>
 80070b0:	4603      	mov	r3, r0
 80070b2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10c      	bne.n	80070d4 <USBH_MSC_Process+0x118>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80070c0:	4619      	mov	r1, r3
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	2334      	movs	r3, #52	@ 0x34
 80070c6:	fb01 f303 	mul.w	r3, r1, r3
 80070ca:	4413      	add	r3, r2
 80070cc:	3390      	adds	r3, #144	@ 0x90
 80070ce:	2202      	movs	r2, #2
 80070d0:	701a      	strb	r2, [r3, #0]
            break;
 80070d2:	e1ff      	b.n	80074d4 <USBH_MSC_Process+0x518>
            else if (scsi_status == USBH_FAIL)
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d10c      	bne.n	80070f4 <USBH_MSC_Process+0x138>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80070e0:	4619      	mov	r1, r3
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	2334      	movs	r3, #52	@ 0x34
 80070e6:	fb01 f303 	mul.w	r3, r1, r3
 80070ea:	4413      	add	r3, r2
 80070ec:	3390      	adds	r3, #144	@ 0x90
 80070ee:	2205      	movs	r2, #5
 80070f0:	701a      	strb	r2, [r3, #0]
            break;
 80070f2:	e1ef      	b.n	80074d4 <USBH_MSC_Process+0x518>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	2b04      	cmp	r3, #4
 80070f8:	f040 81ec 	bne.w	80074d4 <USBH_MSC_Process+0x518>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007102:	4619      	mov	r1, r3
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	2334      	movs	r3, #52	@ 0x34
 8007108:	fb01 f303 	mul.w	r3, r1, r3
 800710c:	4413      	add	r3, r2
 800710e:	3390      	adds	r3, #144	@ 0x90
 8007110:	2208      	movs	r2, #8
 8007112:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800711a:	4619      	mov	r1, r3
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	2334      	movs	r3, #52	@ 0x34
 8007120:	fb01 f303 	mul.w	r3, r1, r3
 8007124:	4413      	add	r3, r2
 8007126:	3391      	adds	r3, #145	@ 0x91
 8007128:	2202      	movs	r2, #2
 800712a:	701a      	strb	r2, [r3, #0]
            break;
 800712c:	e1d2      	b.n	80074d4 <USBH_MSC_Process+0x518>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007134:	b2db      	uxtb	r3, r3
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fe9f 	bl	8007e7c <USBH_MSC_SCSI_TestUnitReady>
 800713e:	4603      	mov	r3, r0
 8007140:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8007142:	7bbb      	ldrb	r3, [r7, #14]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d14a      	bne.n	80071de <USBH_MSC_Process+0x222>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800714e:	4619      	mov	r1, r3
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	2334      	movs	r3, #52	@ 0x34
 8007154:	fb01 f303 	mul.w	r3, r1, r3
 8007158:	4413      	add	r3, r2
 800715a:	3392      	adds	r3, #146	@ 0x92
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00c      	beq.n	800717c <USBH_MSC_Process+0x1c0>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007168:	4619      	mov	r1, r3
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	2334      	movs	r3, #52	@ 0x34
 800716e:	fb01 f303 	mul.w	r3, r1, r3
 8007172:	4413      	add	r3, r2
 8007174:	33c1      	adds	r3, #193	@ 0xc1
 8007176:	2201      	movs	r2, #1
 8007178:	701a      	strb	r2, [r3, #0]
 800717a:	e00b      	b.n	8007194 <USBH_MSC_Process+0x1d8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007182:	4619      	mov	r1, r3
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	2334      	movs	r3, #52	@ 0x34
 8007188:	fb01 f303 	mul.w	r3, r1, r3
 800718c:	4413      	add	r3, r2
 800718e:	33c1      	adds	r3, #193	@ 0xc1
 8007190:	2200      	movs	r2, #0
 8007192:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800719a:	4619      	mov	r1, r3
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	2334      	movs	r3, #52	@ 0x34
 80071a0:	fb01 f303 	mul.w	r3, r1, r3
 80071a4:	4413      	add	r3, r2
 80071a6:	3390      	adds	r3, #144	@ 0x90
 80071a8:	2203      	movs	r2, #3
 80071aa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80071b2:	4619      	mov	r1, r3
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	2334      	movs	r3, #52	@ 0x34
 80071b8:	fb01 f303 	mul.w	r3, r1, r3
 80071bc:	4413      	add	r3, r2
 80071be:	3391      	adds	r3, #145	@ 0x91
 80071c0:	2200      	movs	r2, #0
 80071c2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80071ca:	4619      	mov	r1, r3
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	2334      	movs	r3, #52	@ 0x34
 80071d0:	fb01 f303 	mul.w	r3, r1, r3
 80071d4:	4413      	add	r3, r2
 80071d6:	3392      	adds	r3, #146	@ 0x92
 80071d8:	2200      	movs	r2, #0
 80071da:	701a      	strb	r2, [r3, #0]
            break;
 80071dc:	e17c      	b.n	80074d8 <USBH_MSC_Process+0x51c>
            else if (ready_status == USBH_FAIL)
 80071de:	7bbb      	ldrb	r3, [r7, #14]
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d14a      	bne.n	800727a <USBH_MSC_Process+0x2be>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80071ea:	4619      	mov	r1, r3
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	2334      	movs	r3, #52	@ 0x34
 80071f0:	fb01 f303 	mul.w	r3, r1, r3
 80071f4:	4413      	add	r3, r2
 80071f6:	3392      	adds	r3, #146	@ 0x92
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d00c      	beq.n	8007218 <USBH_MSC_Process+0x25c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007204:	4619      	mov	r1, r3
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	2334      	movs	r3, #52	@ 0x34
 800720a:	fb01 f303 	mul.w	r3, r1, r3
 800720e:	4413      	add	r3, r2
 8007210:	33c1      	adds	r3, #193	@ 0xc1
 8007212:	2201      	movs	r2, #1
 8007214:	701a      	strb	r2, [r3, #0]
 8007216:	e00b      	b.n	8007230 <USBH_MSC_Process+0x274>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800721e:	4619      	mov	r1, r3
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	2334      	movs	r3, #52	@ 0x34
 8007224:	fb01 f303 	mul.w	r3, r1, r3
 8007228:	4413      	add	r3, r2
 800722a:	33c1      	adds	r3, #193	@ 0xc1
 800722c:	2200      	movs	r2, #0
 800722e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007236:	4619      	mov	r1, r3
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	2334      	movs	r3, #52	@ 0x34
 800723c:	fb01 f303 	mul.w	r3, r1, r3
 8007240:	4413      	add	r3, r2
 8007242:	3390      	adds	r3, #144	@ 0x90
 8007244:	2205      	movs	r2, #5
 8007246:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800724e:	4619      	mov	r1, r3
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	2334      	movs	r3, #52	@ 0x34
 8007254:	fb01 f303 	mul.w	r3, r1, r3
 8007258:	4413      	add	r3, r2
 800725a:	3391      	adds	r3, #145	@ 0x91
 800725c:	2201      	movs	r2, #1
 800725e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007266:	4619      	mov	r1, r3
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	2334      	movs	r3, #52	@ 0x34
 800726c:	fb01 f303 	mul.w	r3, r1, r3
 8007270:	4413      	add	r3, r2
 8007272:	3392      	adds	r3, #146	@ 0x92
 8007274:	2202      	movs	r2, #2
 8007276:	701a      	strb	r2, [r3, #0]
            break;
 8007278:	e12e      	b.n	80074d8 <USBH_MSC_Process+0x51c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	2b04      	cmp	r3, #4
 800727e:	f040 812b 	bne.w	80074d8 <USBH_MSC_Process+0x51c>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007288:	4619      	mov	r1, r3
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	2334      	movs	r3, #52	@ 0x34
 800728e:	fb01 f303 	mul.w	r3, r1, r3
 8007292:	4413      	add	r3, r2
 8007294:	3390      	adds	r3, #144	@ 0x90
 8007296:	2208      	movs	r2, #8
 8007298:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80072a0:	4619      	mov	r1, r3
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	2334      	movs	r3, #52	@ 0x34
 80072a6:	fb01 f303 	mul.w	r3, r1, r3
 80072aa:	4413      	add	r3, r2
 80072ac:	3391      	adds	r3, #145	@ 0x91
 80072ae:	2202      	movs	r2, #2
 80072b0:	701a      	strb	r2, [r3, #0]
            break;
 80072b2:	e111      	b.n	80074d8 <USBH_MSC_Process+0x51c>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80072ba:	b2d9      	uxtb	r1, r3
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80072c2:	461a      	mov	r2, r3
 80072c4:	2334      	movs	r3, #52	@ 0x34
 80072c6:	fb02 f303 	mul.w	r3, r2, r3
 80072ca:	3390      	adds	r3, #144	@ 0x90
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	4413      	add	r3, r2
 80072d0:	3304      	adds	r3, #4
 80072d2:	461a      	mov	r2, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fe14 	bl	8007f02 <USBH_MSC_SCSI_ReadCapacity>
 80072da:	4603      	mov	r3, r0
 80072dc:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80072de:	7bfb      	ldrb	r3, [r7, #15]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d120      	bne.n	8007326 <USBH_MSC_Process+0x36a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80072ea:	4619      	mov	r1, r3
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	2334      	movs	r3, #52	@ 0x34
 80072f0:	fb01 f303 	mul.w	r3, r1, r3
 80072f4:	4413      	add	r3, r2
 80072f6:	3390      	adds	r3, #144	@ 0x90
 80072f8:	2201      	movs	r2, #1
 80072fa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007302:	4619      	mov	r1, r3
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	2334      	movs	r3, #52	@ 0x34
 8007308:	fb01 f303 	mul.w	r3, r1, r3
 800730c:	4413      	add	r3, r2
 800730e:	3391      	adds	r3, #145	@ 0x91
 8007310:	2200      	movs	r2, #0
 8007312:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800731a:	3301      	adds	r3, #1
 800731c:	b29a      	uxth	r2, r3
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8007324:	e0da      	b.n	80074dc <USBH_MSC_Process+0x520>
            else if (scsi_status == USBH_FAIL)
 8007326:	7bfb      	ldrb	r3, [r7, #15]
 8007328:	2b02      	cmp	r3, #2
 800732a:	d10c      	bne.n	8007346 <USBH_MSC_Process+0x38a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007332:	4619      	mov	r1, r3
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	2334      	movs	r3, #52	@ 0x34
 8007338:	fb01 f303 	mul.w	r3, r1, r3
 800733c:	4413      	add	r3, r2
 800733e:	3390      	adds	r3, #144	@ 0x90
 8007340:	2205      	movs	r2, #5
 8007342:	701a      	strb	r2, [r3, #0]
            break;
 8007344:	e0ca      	b.n	80074dc <USBH_MSC_Process+0x520>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007346:	7bfb      	ldrb	r3, [r7, #15]
 8007348:	2b04      	cmp	r3, #4
 800734a:	f040 80c7 	bne.w	80074dc <USBH_MSC_Process+0x520>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007354:	4619      	mov	r1, r3
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	2334      	movs	r3, #52	@ 0x34
 800735a:	fb01 f303 	mul.w	r3, r1, r3
 800735e:	4413      	add	r3, r2
 8007360:	3390      	adds	r3, #144	@ 0x90
 8007362:	2208      	movs	r2, #8
 8007364:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800736c:	4619      	mov	r1, r3
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	2334      	movs	r3, #52	@ 0x34
 8007372:	fb01 f303 	mul.w	r3, r1, r3
 8007376:	4413      	add	r3, r2
 8007378:	3391      	adds	r3, #145	@ 0x91
 800737a:	2202      	movs	r2, #2
 800737c:	701a      	strb	r2, [r3, #0]
            break;
 800737e:	e0ad      	b.n	80074dc <USBH_MSC_Process+0x520>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007386:	b2d9      	uxtb	r1, r3
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800738e:	461a      	mov	r2, r3
 8007390:	2334      	movs	r3, #52	@ 0x34
 8007392:	fb02 f303 	mul.w	r3, r2, r3
 8007396:	3398      	adds	r3, #152	@ 0x98
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	4413      	add	r3, r2
 800739c:	3304      	adds	r3, #4
 800739e:	461a      	mov	r2, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fecd 	bl	8008140 <USBH_MSC_SCSI_RequestSense>
 80073a6:	4603      	mov	r3, r0
 80073a8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d146      	bne.n	800743e <USBH_MSC_Process+0x482>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80073b6:	4619      	mov	r1, r3
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	2334      	movs	r3, #52	@ 0x34
 80073bc:	fb01 f303 	mul.w	r3, r1, r3
 80073c0:	4413      	add	r3, r2
 80073c2:	339c      	adds	r3, #156	@ 0x9c
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	2b06      	cmp	r3, #6
 80073c8:	d00c      	beq.n	80073e4 <USBH_MSC_Process+0x428>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80073d0:	4619      	mov	r1, r3
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	2334      	movs	r3, #52	@ 0x34
 80073d6:	fb01 f303 	mul.w	r3, r1, r3
 80073da:	4413      	add	r3, r2
 80073dc:	339c      	adds	r3, #156	@ 0x9c
 80073de:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d117      	bne.n	8007414 <USBH_MSC_Process+0x458>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d80c      	bhi.n	8007414 <USBH_MSC_Process+0x458>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007400:	4619      	mov	r1, r3
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	2334      	movs	r3, #52	@ 0x34
 8007406:	fb01 f303 	mul.w	r3, r1, r3
 800740a:	4413      	add	r3, r2
 800740c:	3390      	adds	r3, #144	@ 0x90
 800740e:	2202      	movs	r2, #2
 8007410:	701a      	strb	r2, [r3, #0]
                  break;
 8007412:	e066      	b.n	80074e2 <USBH_MSC_Process+0x526>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800741a:	4619      	mov	r1, r3
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	2334      	movs	r3, #52	@ 0x34
 8007420:	fb01 f303 	mul.w	r3, r1, r3
 8007424:	4413      	add	r3, r2
 8007426:	3390      	adds	r3, #144	@ 0x90
 8007428:	2201      	movs	r2, #1
 800742a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007432:	3301      	adds	r3, #1
 8007434:	b29a      	uxth	r2, r3
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800743c:	e050      	b.n	80074e0 <USBH_MSC_Process+0x524>
            else if (scsi_status == USBH_FAIL)
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	2b02      	cmp	r3, #2
 8007442:	d118      	bne.n	8007476 <USBH_MSC_Process+0x4ba>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800744a:	4619      	mov	r1, r3
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	2334      	movs	r3, #52	@ 0x34
 8007450:	fb01 f303 	mul.w	r3, r1, r3
 8007454:	4413      	add	r3, r2
 8007456:	3390      	adds	r3, #144	@ 0x90
 8007458:	2208      	movs	r2, #8
 800745a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007462:	4619      	mov	r1, r3
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	2334      	movs	r3, #52	@ 0x34
 8007468:	fb01 f303 	mul.w	r3, r1, r3
 800746c:	4413      	add	r3, r2
 800746e:	3391      	adds	r3, #145	@ 0x91
 8007470:	2202      	movs	r2, #2
 8007472:	701a      	strb	r2, [r3, #0]
            break;
 8007474:	e034      	b.n	80074e0 <USBH_MSC_Process+0x524>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	2b04      	cmp	r3, #4
 800747a:	d131      	bne.n	80074e0 <USBH_MSC_Process+0x524>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007482:	4619      	mov	r1, r3
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	2334      	movs	r3, #52	@ 0x34
 8007488:	fb01 f303 	mul.w	r3, r1, r3
 800748c:	4413      	add	r3, r2
 800748e:	3390      	adds	r3, #144	@ 0x90
 8007490:	2208      	movs	r2, #8
 8007492:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800749a:	4619      	mov	r1, r3
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	2334      	movs	r3, #52	@ 0x34
 80074a0:	fb01 f303 	mul.w	r3, r1, r3
 80074a4:	4413      	add	r3, r2
 80074a6:	3391      	adds	r3, #145	@ 0x91
 80074a8:	2202      	movs	r2, #2
 80074aa:	701a      	strb	r2, [r3, #0]
            break;
 80074ac:	e018      	b.n	80074e0 <USBH_MSC_Process+0x524>
            MSC_Handle->current_lun++;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80074b4:	3301      	adds	r3, #1
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 80074be:	e010      	b.n	80074e2 <USBH_MSC_Process+0x526>
        MSC_Handle->current_lun = 0U;
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	220a      	movs	r2, #10
 80074cc:	731a      	strb	r2, [r3, #12]
      break;
 80074ce:	e045      	b.n	800755c <USBH_MSC_Process+0x5a0>
            break;
 80074d0:	bf00      	nop
 80074d2:	e043      	b.n	800755c <USBH_MSC_Process+0x5a0>
            break;
 80074d4:	bf00      	nop
 80074d6:	e041      	b.n	800755c <USBH_MSC_Process+0x5a0>
            break;
 80074d8:	bf00      	nop
 80074da:	e03f      	b.n	800755c <USBH_MSC_Process+0x5a0>
            break;
 80074dc:	bf00      	nop
 80074de:	e03d      	b.n	800755c <USBH_MSC_Process+0x5a0>
            break;
 80074e0:	bf00      	nop
      break;
 80074e2:	e03b      	b.n	800755c <USBH_MSC_Process+0x5a0>
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	7812      	ldrb	r2, [r2, #0]
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d228      	bcs.n	8007544 <USBH_MSC_Process+0x588>
        MSC_Handle->current_lun = MSC_Handle->lun;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007504:	4619      	mov	r1, r3
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	2334      	movs	r3, #52	@ 0x34
 800750a:	fb01 f303 	mul.w	r3, r1, r3
 800750e:	4413      	add	r3, r2
 8007510:	3391      	adds	r3, #145	@ 0x91
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d106      	bne.n	8007526 <USBH_MSC_Process+0x56a>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800751e:	2102      	movs	r1, #2
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	4798      	blx	r3
 8007524:	e005      	b.n	8007532 <USBH_MSC_Process+0x576>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800752c:	2106      	movs	r1, #6
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	4798      	blx	r3
        MSC_Handle->lun++;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8007538:	3301      	adds	r3, #1
 800753a:	b29a      	uxth	r2, r3
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
      break;
 8007542:	e00b      	b.n	800755c <USBH_MSC_Process+0x5a0>
        MSC_Handle->lun = 0U;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	2200      	movs	r2, #0
 8007548:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	2201      	movs	r2, #1
 8007550:	731a      	strb	r2, [r3, #12]
      break;
 8007552:	e003      	b.n	800755c <USBH_MSC_Process+0x5a0>
      error = USBH_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	75fb      	strb	r3, [r7, #23]
      break;
 8007558:	e000      	b.n	800755c <USBH_MSC_Process+0x5a0>
      break;
 800755a:	bf00      	nop
  }
  return error;
 800755c:	7dfb      	ldrb	r3, [r7, #23]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop

08007568 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b088      	sub	sp, #32
 8007582:	af02      	add	r7, sp, #8
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	460b      	mov	r3, r1
 8007588:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8007594:	2301      	movs	r3, #1
 8007596:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8007598:	2301      	movs	r3, #1
 800759a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800759c:	78fb      	ldrb	r3, [r7, #3]
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	2134      	movs	r1, #52	@ 0x34
 80075a2:	fb01 f303 	mul.w	r3, r1, r3
 80075a6:	4413      	add	r3, r2
 80075a8:	3390      	adds	r3, #144	@ 0x90
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	2b07      	cmp	r3, #7
 80075ae:	d03c      	beq.n	800762a <USBH_MSC_RdWrProcess+0xac>
 80075b0:	2b07      	cmp	r3, #7
 80075b2:	f300 80a8 	bgt.w	8007706 <USBH_MSC_RdWrProcess+0x188>
 80075b6:	2b05      	cmp	r3, #5
 80075b8:	d06c      	beq.n	8007694 <USBH_MSC_RdWrProcess+0x116>
 80075ba:	2b06      	cmp	r3, #6
 80075bc:	f040 80a3 	bne.w	8007706 <USBH_MSC_RdWrProcess+0x188>
  {
    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80075c0:	78f9      	ldrb	r1, [r7, #3]
 80075c2:	2300      	movs	r3, #0
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	2300      	movs	r3, #0
 80075c8:	2200      	movs	r2, #0
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fea7 	bl	800831e <USBH_MSC_SCSI_Read>
 80075d0:	4603      	mov	r3, r0
 80075d2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10b      	bne.n	80075f2 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80075da:	78fb      	ldrb	r3, [r7, #3]
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	2134      	movs	r1, #52	@ 0x34
 80075e0:	fb01 f303 	mul.w	r3, r1, r3
 80075e4:	4413      	add	r3, r2
 80075e6:	3390      	adds	r3, #144	@ 0x90
 80075e8:	2201      	movs	r2, #1
 80075ea:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	75fb      	strb	r3, [r7, #23]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80075f0:	e08b      	b.n	800770a <USBH_MSC_RdWrProcess+0x18c>
      else if (scsi_status == USBH_FAIL)
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d109      	bne.n	800760c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80075f8:	78fb      	ldrb	r3, [r7, #3]
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	2134      	movs	r1, #52	@ 0x34
 80075fe:	fb01 f303 	mul.w	r3, r1, r3
 8007602:	4413      	add	r3, r2
 8007604:	3390      	adds	r3, #144	@ 0x90
 8007606:	2205      	movs	r2, #5
 8007608:	701a      	strb	r2, [r3, #0]
      break;
 800760a:	e07e      	b.n	800770a <USBH_MSC_RdWrProcess+0x18c>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800760c:	7bfb      	ldrb	r3, [r7, #15]
 800760e:	2b04      	cmp	r3, #4
 8007610:	d17b      	bne.n	800770a <USBH_MSC_RdWrProcess+0x18c>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007612:	78fb      	ldrb	r3, [r7, #3]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	2134      	movs	r1, #52	@ 0x34
 8007618:	fb01 f303 	mul.w	r3, r1, r3
 800761c:	4413      	add	r3, r2
 800761e:	3390      	adds	r3, #144	@ 0x90
 8007620:	2208      	movs	r2, #8
 8007622:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007624:	2302      	movs	r3, #2
 8007626:	75fb      	strb	r3, [r7, #23]
      break;
 8007628:	e06f      	b.n	800770a <USBH_MSC_RdWrProcess+0x18c>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800762a:	78f9      	ldrb	r1, [r7, #3]
 800762c:	2300      	movs	r3, #0
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	2300      	movs	r3, #0
 8007632:	2200      	movs	r2, #0
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fe02 	bl	800823e <USBH_MSC_SCSI_Write>
 800763a:	4603      	mov	r3, r0
 800763c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10b      	bne.n	800765c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007644:	78fb      	ldrb	r3, [r7, #3]
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	2134      	movs	r1, #52	@ 0x34
 800764a:	fb01 f303 	mul.w	r3, r1, r3
 800764e:	4413      	add	r3, r2
 8007650:	3390      	adds	r3, #144	@ 0x90
 8007652:	2201      	movs	r2, #1
 8007654:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	75fb      	strb	r3, [r7, #23]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800765a:	e058      	b.n	800770e <USBH_MSC_RdWrProcess+0x190>
      else if (scsi_status == USBH_FAIL)
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	2b02      	cmp	r3, #2
 8007660:	d109      	bne.n	8007676 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	2134      	movs	r1, #52	@ 0x34
 8007668:	fb01 f303 	mul.w	r3, r1, r3
 800766c:	4413      	add	r3, r2
 800766e:	3390      	adds	r3, #144	@ 0x90
 8007670:	2205      	movs	r2, #5
 8007672:	701a      	strb	r2, [r3, #0]
      break;
 8007674:	e04b      	b.n	800770e <USBH_MSC_RdWrProcess+0x190>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	2b04      	cmp	r3, #4
 800767a:	d148      	bne.n	800770e <USBH_MSC_RdWrProcess+0x190>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800767c:	78fb      	ldrb	r3, [r7, #3]
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	2134      	movs	r1, #52	@ 0x34
 8007682:	fb01 f303 	mul.w	r3, r1, r3
 8007686:	4413      	add	r3, r2
 8007688:	3390      	adds	r3, #144	@ 0x90
 800768a:	2208      	movs	r2, #8
 800768c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800768e:	2302      	movs	r3, #2
 8007690:	75fb      	strb	r3, [r7, #23]
      break;
 8007692:	e03c      	b.n	800770e <USBH_MSC_RdWrProcess+0x190>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007694:	78fb      	ldrb	r3, [r7, #3]
 8007696:	2234      	movs	r2, #52	@ 0x34
 8007698:	fb02 f303 	mul.w	r3, r2, r3
 800769c:	3398      	adds	r3, #152	@ 0x98
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	4413      	add	r3, r2
 80076a2:	1d1a      	adds	r2, r3, #4
 80076a4:	78fb      	ldrb	r3, [r7, #3]
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fd49 	bl	8008140 <USBH_MSC_SCSI_RequestSense>
 80076ae:	4603      	mov	r3, r0
 80076b0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d114      	bne.n	80076e2 <USBH_MSC_RdWrProcess+0x164>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80076b8:	78fb      	ldrb	r3, [r7, #3]
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	2134      	movs	r1, #52	@ 0x34
 80076be:	fb01 f303 	mul.w	r3, r1, r3
 80076c2:	4413      	add	r3, r2
 80076c4:	3390      	adds	r3, #144	@ 0x90
 80076c6:	2201      	movs	r2, #1
 80076c8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80076ca:	78fb      	ldrb	r3, [r7, #3]
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	2134      	movs	r1, #52	@ 0x34
 80076d0:	fb01 f303 	mul.w	r3, r1, r3
 80076d4:	4413      	add	r3, r2
 80076d6:	3391      	adds	r3, #145	@ 0x91
 80076d8:	2202      	movs	r2, #2
 80076da:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80076dc:	2302      	movs	r3, #2
 80076de:	75fb      	strb	r3, [r7, #23]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80076e0:	e017      	b.n	8007712 <USBH_MSC_RdWrProcess+0x194>
      else if (scsi_status == USBH_FAIL)
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d014      	beq.n	8007712 <USBH_MSC_RdWrProcess+0x194>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	d111      	bne.n	8007712 <USBH_MSC_RdWrProcess+0x194>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80076ee:	78fb      	ldrb	r3, [r7, #3]
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	2134      	movs	r1, #52	@ 0x34
 80076f4:	fb01 f303 	mul.w	r3, r1, r3
 80076f8:	4413      	add	r3, r2
 80076fa:	3390      	adds	r3, #144	@ 0x90
 80076fc:	2208      	movs	r2, #8
 80076fe:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007700:	2302      	movs	r3, #2
 8007702:	75fb      	strb	r3, [r7, #23]
      break;
 8007704:	e005      	b.n	8007712 <USBH_MSC_RdWrProcess+0x194>

    default:
      break;
 8007706:	bf00      	nop
 8007708:	e004      	b.n	8007714 <USBH_MSC_RdWrProcess+0x196>
      break;
 800770a:	bf00      	nop
 800770c:	e002      	b.n	8007714 <USBH_MSC_RdWrProcess+0x196>
      break;
 800770e:	bf00      	nop
 8007710:	e000      	b.n	8007714 <USBH_MSC_RdWrProcess+0x196>
      break;
 8007712:	bf00      	nop

  }
  return error;
 8007714:	7dfb      	ldrb	r3, [r7, #23]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800771e:	b480      	push	{r7}
 8007720:	b085      	sub	sp, #20
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	460b      	mov	r3, r1
 8007728:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8007734:	78fb      	ldrb	r3, [r7, #3]
 8007736:	b29a      	uxth	r2, r3
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b0b      	cmp	r3, #11
 8007746:	d10c      	bne.n	8007762 <USBH_MSC_UnitIsReady+0x44>
 8007748:	78fb      	ldrb	r3, [r7, #3]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	2134      	movs	r1, #52	@ 0x34
 800774e:	fb01 f303 	mul.w	r3, r1, r3
 8007752:	4413      	add	r3, r2
 8007754:	3391      	adds	r3, #145	@ 0x91
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d102      	bne.n	8007762 <USBH_MSC_UnitIsReady+0x44>
  {
    res = 1U;
 800775c:	2301      	movs	r3, #1
 800775e:	73fb      	strb	r3, [r7, #15]
 8007760:	e001      	b.n	8007766 <USBH_MSC_UnitIsReady+0x48>
  }
  else
  {
    res = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007766:	7bfb      	ldrb	r3, [r7, #15]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	460b      	mov	r3, r1
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800778c:	7afb      	ldrb	r3, [r7, #11]
 800778e:	b29a      	uxth	r2, r3
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if (phost->gState == HOST_CLASS)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b0b      	cmp	r3, #11
 800779e:	d10d      	bne.n	80077bc <USBH_MSC_GetLUNInfo+0x48>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80077a0:	7afb      	ldrb	r3, [r7, #11]
 80077a2:	2234      	movs	r2, #52	@ 0x34
 80077a4:	fb02 f303 	mul.w	r3, r2, r3
 80077a8:	3390      	adds	r3, #144	@ 0x90
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	4413      	add	r3, r2
 80077ae:	2234      	movs	r2, #52	@ 0x34
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f008 fd3f 	bl	8010236 <memcpy>
    return USBH_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	e000      	b.n	80077be <USBH_MSC_GetLUNInfo+0x4a>
  }
  else
  {
    return USBH_FAIL;
 80077bc:	2302      	movs	r3, #2
  }
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b088      	sub	sp, #32
 80077ca:	af02      	add	r7, sp, #8
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	603b      	str	r3, [r7, #0]
 80077d2:	460b      	mov	r3, r1
 80077d4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 80077e0:	7afb      	ldrb	r3, [r7, #11]
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.PortEnabled == 0U) ||
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00e      	beq.n	8007814 <USBH_MSC_Read+0x4e>
      (phost->gState != HOST_CLASS) ||
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	b2db      	uxtb	r3, r3
  if ((phost->device.PortEnabled == 0U) ||
 80077fc:	2b0b      	cmp	r3, #11
 80077fe:	d109      	bne.n	8007814 <USBH_MSC_Read+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007800:	7afb      	ldrb	r3, [r7, #11]
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	2134      	movs	r1, #52	@ 0x34
 8007806:	fb01 f303 	mul.w	r3, r1, r3
 800780a:	4413      	add	r3, r2
 800780c:	3390      	adds	r3, #144	@ 0x90
 800780e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007810:	2b01      	cmp	r3, #1
 8007812:	d001      	beq.n	8007818 <USBH_MSC_Read+0x52>
  {
    return  USBH_FAIL;
 8007814:	2302      	movs	r3, #2
 8007816:	e032      	b.n	800787e <USBH_MSC_Read+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_READ;
 8007818:	7afb      	ldrb	r3, [r7, #11]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	2134      	movs	r1, #52	@ 0x34
 800781e:	fb01 f303 	mul.w	r3, r1, r3
 8007822:	4413      	add	r3, r2
 8007824:	3390      	adds	r3, #144	@ 0x90
 8007826:	2206      	movs	r2, #6
 8007828:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800782a:	7af9      	ldrb	r1, [r7, #11]
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 fd72 	bl	800831e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007840:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007842:	e013      	b.n	800786c <USBH_MSC_Read+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.PortEnabled == 0U))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	1ad2      	subs	r2, r2, r3
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	f242 7110 	movw	r1, #10000	@ 0x2710
 8007854:	fb01 f303 	mul.w	r3, r1, r3
 8007858:	429a      	cmp	r2, r3
 800785a:	d805      	bhi.n	8007868 <USBH_MSC_Read+0xa2>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <USBH_MSC_Read+0xa6>
    {
      return USBH_FAIL;
 8007868:	2302      	movs	r3, #2
 800786a:	e008      	b.n	800787e <USBH_MSC_Read+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800786c:	7afb      	ldrb	r3, [r7, #11]
 800786e:	4619      	mov	r1, r3
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f7ff fe84 	bl	800757e <USBH_MSC_RdWrProcess>
 8007876:	4603      	mov	r3, r0
 8007878:	2b01      	cmp	r3, #1
 800787a:	d0e3      	beq.n	8007844 <USBH_MSC_Read+0x7e>
    }
  }

  return USBH_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b088      	sub	sp, #32
 800788a:	af02      	add	r7, sp, #8
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	607a      	str	r2, [r7, #4]
 8007890:	603b      	str	r3, [r7, #0]
 8007892:	460b      	mov	r3, r1
 8007894:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 80078a0:	7afb      	ldrb	r3, [r7, #11]
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.PortEnabled == 0U) ||
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00e      	beq.n	80078d4 <USBH_MSC_Write+0x4e>
      (phost->gState != HOST_CLASS) ||
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	b2db      	uxtb	r3, r3
  if ((phost->device.PortEnabled == 0U) ||
 80078bc:	2b0b      	cmp	r3, #11
 80078be:	d109      	bne.n	80078d4 <USBH_MSC_Write+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80078c0:	7afb      	ldrb	r3, [r7, #11]
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	2134      	movs	r1, #52	@ 0x34
 80078c6:	fb01 f303 	mul.w	r3, r1, r3
 80078ca:	4413      	add	r3, r2
 80078cc:	3390      	adds	r3, #144	@ 0x90
 80078ce:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d001      	beq.n	80078d8 <USBH_MSC_Write+0x52>
  {
    return  USBH_FAIL;
 80078d4:	2302      	movs	r3, #2
 80078d6:	e032      	b.n	800793e <USBH_MSC_Write+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_WRITE;
 80078d8:	7afb      	ldrb	r3, [r7, #11]
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	2134      	movs	r1, #52	@ 0x34
 80078de:	fb01 f303 	mul.w	r3, r1, r3
 80078e2:	4413      	add	r3, r2
 80078e4:	3390      	adds	r3, #144	@ 0x90
 80078e6:	2207      	movs	r2, #7
 80078e8:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80078ea:	7af9      	ldrb	r1, [r7, #11]
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 fca2 	bl	800823e <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007900:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007902:	e013      	b.n	800792c <USBH_MSC_Write+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.PortEnabled == 0U))
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	1ad2      	subs	r2, r2, r3
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	f242 7110 	movw	r1, #10000	@ 0x2710
 8007914:	fb01 f303 	mul.w	r3, r1, r3
 8007918:	429a      	cmp	r2, r3
 800791a:	d805      	bhi.n	8007928 <USBH_MSC_Write+0xa2>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <USBH_MSC_Write+0xa6>
    {
      return USBH_FAIL;
 8007928:	2302      	movs	r3, #2
 800792a:	e008      	b.n	800793e <USBH_MSC_Write+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800792c:	7afb      	ldrb	r3, [r7, #11]
 800792e:	4619      	mov	r1, r3
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f7ff fe24 	bl	800757e <USBH_MSC_RdWrProcess>
 8007936:	4603      	mov	r3, r0
 8007938:	2b01      	cmp	r3, #1
 800793a:	d0e3      	beq.n	8007904 <USBH_MSC_Write+0x7e>
    }
  }

  return USBH_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b082      	sub	sp, #8
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2221      	movs	r2, #33	@ 0x21
 8007952:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	22ff      	movs	r2, #255	@ 0xff
 8007958:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800796c:	2200      	movs	r2, #0
 800796e:	2100      	movs	r1, #0
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 ff47 	bl	8009804 <USBH_CtlReq>
 8007976:	4603      	mov	r3, r0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	22a1      	movs	r2, #161	@ 0xa1
 800798e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	22fe      	movs	r2, #254	@ 0xfe
 8007994:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80079a8:	2201      	movs	r2, #1
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 ff29 	bl	8009804 <USBH_CtlReq>
 80079b2:	4603      	mov	r3, r0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079ca:	69db      	ldr	r3, [r3, #28]
 80079cc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4a09      	ldr	r2, [pc, #36]	@ (80079f8 <USBH_MSC_BOT_Init+0x3c>)
 80079d2:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4a09      	ldr	r2, [pc, #36]	@ (80079fc <USBH_MSC_BOT_Init+0x40>)
 80079d8:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3714      	adds	r7, #20
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	43425355 	.word	0x43425355
 80079fc:	20304050 	.word	0x20304050

08007a00 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b088      	sub	sp, #32
 8007a04:	af02      	add	r7, sp, #8
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007a10:	2301      	movs	r3, #1
 8007a12:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8007a14:	2301      	movs	r3, #1
 8007a16:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a22:	69db      	ldr	r3, [r3, #28]
 8007a24:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a30:	3b01      	subs	r3, #1
 8007a32:	2b0a      	cmp	r3, #10
 8007a34:	f200 819e 	bhi.w	8007d74 <USBH_MSC_BOT_Process+0x374>
 8007a38:	a201      	add	r2, pc, #4	@ (adr r2, 8007a40 <USBH_MSC_BOT_Process+0x40>)
 8007a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3e:	bf00      	nop
 8007a40:	08007a6d 	.word	0x08007a6d
 8007a44:	08007a95 	.word	0x08007a95
 8007a48:	08007aff 	.word	0x08007aff
 8007a4c:	08007b1d 	.word	0x08007b1d
 8007a50:	08007ba1 	.word	0x08007ba1
 8007a54:	08007bc3 	.word	0x08007bc3
 8007a58:	08007c5b 	.word	0x08007c5b
 8007a5c:	08007c77 	.word	0x08007c77
 8007a60:	08007cc9 	.word	0x08007cc9
 8007a64:	08007cf9 	.word	0x08007cf9
 8007a68:	08007d5b 	.word	0x08007d5b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	78fa      	ldrb	r2, [r7, #3]
 8007a70:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	795b      	ldrb	r3, [r3, #5]
 8007a86:	2201      	movs	r2, #1
 8007a88:	9200      	str	r2, [sp, #0]
 8007a8a:	221f      	movs	r2, #31
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f002 f8ca 	bl	8009c26 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007a92:	e17e      	b.n	8007d92 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	795b      	ldrb	r3, [r3, #5]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f007 fc1c 	bl	800f2d8 <USBH_LL_GetURBState>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007aa4:	7d3b      	ldrb	r3, [r7, #20]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d118      	bne.n	8007adc <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00f      	beq.n	8007ad2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8007ab8:	b25b      	sxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	da04      	bge.n	8007ac8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	2203      	movs	r2, #3
 8007ac2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007ac6:	e157      	b.n	8007d78 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	2205      	movs	r2, #5
 8007acc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007ad0:	e152      	b.n	8007d78 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	2207      	movs	r2, #7
 8007ad6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007ada:	e14d      	b.n	8007d78 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007adc:	7d3b      	ldrb	r3, [r7, #20]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d104      	bne.n	8007aec <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007aea:	e145      	b.n	8007d78 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8007aec:	7d3b      	ldrb	r3, [r7, #20]
 8007aee:	2b05      	cmp	r3, #5
 8007af0:	f040 8142 	bne.w	8007d78 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	220a      	movs	r2, #10
 8007af8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007afc:	e13c      	b.n	8007d78 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:

      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	895a      	ldrh	r2, [r3, #10]
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	791b      	ldrb	r3, [r3, #4]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f002 f8af 	bl	8009c70 <USBH_BulkReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	2204      	movs	r2, #4
 8007b16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 8007b1a:	e13a      	b.n	8007d92 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	791b      	ldrb	r3, [r3, #4]
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f007 fbd8 	bl	800f2d8 <USBH_LL_GetURBState>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007b2c:	7d3b      	ldrb	r3, [r7, #20]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d12d      	bne.n	8007b8e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	8952      	ldrh	r2, [r2, #10]
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d910      	bls.n	8007b60 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	8952      	ldrh	r2, [r2, #10]
 8007b48:	441a      	add	r2, r3
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	8952      	ldrh	r2, [r2, #10]
 8007b58:	1a9a      	subs	r2, r3, r2
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007b5e:	e002      	b.n	8007b66 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	2200      	movs	r2, #0
 8007b64:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00a      	beq.n	8007b84 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	895a      	ldrh	r2, [r3, #10]
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	791b      	ldrb	r3, [r3, #4]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f002 f877 	bl	8009c70 <USBH_BulkReceiveData>
#endif /* (USBH_USE_OS == 1U) */
      }
      else
      {
      }
      break;
 8007b82:	e0fb      	b.n	8007d7c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	2207      	movs	r2, #7
 8007b88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007b8c:	e0f6      	b.n	8007d7c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8007b8e:	7d3b      	ldrb	r3, [r7, #20]
 8007b90:	2b05      	cmp	r3, #5
 8007b92:	f040 80f3 	bne.w	8007d7c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	2209      	movs	r2, #9
 8007b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007b9e:	e0ed      	b.n	8007d7c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	891a      	ldrh	r2, [r3, #8]
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	795b      	ldrb	r3, [r3, #5]
 8007bae:	2001      	movs	r0, #1
 8007bb0:	9000      	str	r0, [sp, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f002 f837 	bl	8009c26 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	2206      	movs	r2, #6
 8007bbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007bc0:	e0e7      	b.n	8007d92 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	795b      	ldrb	r3, [r3, #5]
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f007 fb85 	bl	800f2d8 <USBH_LL_GetURBState>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007bd2:	7d3b      	ldrb	r3, [r7, #20]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d12f      	bne.n	8007c38 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	8912      	ldrh	r2, [r2, #8]
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d910      	bls.n	8007c06 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	8912      	ldrh	r2, [r2, #8]
 8007bee:	441a      	add	r2, r3
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	8912      	ldrh	r2, [r2, #8]
 8007bfe:	1a9a      	subs	r2, r3, r2
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007c04:	e002      	b.n	8007c0c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00c      	beq.n	8007c2e <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	891a      	ldrh	r2, [r3, #8]
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	795b      	ldrb	r3, [r3, #5]
 8007c22:	2001      	movs	r0, #1
 8007c24:	9000      	str	r0, [sp, #0]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f001 fffd 	bl	8009c26 <USBH_BulkSendData>
#endif /* (USBH_USE_OS == 1U) */
      }
      else
      {
      }
      break;
 8007c2c:	e0a8      	b.n	8007d80 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	2207      	movs	r2, #7
 8007c32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007c36:	e0a3      	b.n	8007d80 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c38:	7d3b      	ldrb	r3, [r7, #20]
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d104      	bne.n	8007c48 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	2205      	movs	r2, #5
 8007c42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007c46:	e09b      	b.n	8007d80 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8007c48:	7d3b      	ldrb	r3, [r7, #20]
 8007c4a:	2b05      	cmp	r3, #5
 8007c4c:	f040 8098 	bne.w	8007d80 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	220a      	movs	r2, #10
 8007c54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007c58:	e092      	b.n	8007d80 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	791b      	ldrb	r3, [r3, #4]
 8007c64:	220d      	movs	r2, #13
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f002 f802 	bl	8009c70 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	2208      	movs	r2, #8
 8007c70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */
      break;
 8007c74:	e08d      	b.n	8007d92 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	791b      	ldrb	r3, [r3, #4]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f007 fb2b 	bl	800f2d8 <USBH_LL_GetURBState>
 8007c82:	4603      	mov	r3, r0
 8007c84:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8007c86:	7d3b      	ldrb	r3, [r7, #20]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d115      	bne.n	8007cb8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f8a9 	bl	8007df4 <USBH_MSC_DecodeCSW>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8007ca6:	7d7b      	ldrb	r3, [r7, #21]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d102      	bne.n	8007cb2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	75fb      	strb	r3, [r7, #23]
#endif /* (USBH_USE_OS == 1U) */
      }
      else
      {
      }
      break;
 8007cb0:	e068      	b.n	8007d84 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb6:	e065      	b.n	8007d84 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8007cb8:	7d3b      	ldrb	r3, [r7, #20]
 8007cba:	2b05      	cmp	r3, #5
 8007cbc:	d162      	bne.n	8007d84 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2209      	movs	r2, #9
 8007cc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007cc6:	e05d      	b.n	8007d84 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f864 	bl	8007d9c <USBH_MSC_BOT_Abort>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007cd8:	7dbb      	ldrb	r3, [r7, #22]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d104      	bne.n	8007ce8 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2207      	movs	r2, #7
 8007ce2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8007ce6:	e04f      	b.n	8007d88 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8007ce8:	7dbb      	ldrb	r3, [r7, #22]
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d14c      	bne.n	8007d88 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	220b      	movs	r2, #11
 8007cf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007cf6:	e047      	b.n	8007d88 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8007cf8:	78fb      	ldrb	r3, [r7, #3]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f84c 	bl	8007d9c <USBH_MSC_BOT_Abort>
 8007d04:	4603      	mov	r3, r0
 8007d06:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007d08:	7dbb      	ldrb	r3, [r7, #22]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d11d      	bne.n	8007d4a <USBH_MSC_BOT_Process+0x34a>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	795b      	ldrb	r3, [r3, #5]
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f007 fb3c 	bl	800f392 <USBH_LL_GetToggle>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	7959      	ldrb	r1, [r3, #5]
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	f1c3 0301 	rsb	r3, r3, #1
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f007 fafd 	bl	800f32c <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	791b      	ldrb	r3, [r3, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f007 faf6 	bl	800f32c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	2209      	movs	r2, #9
 8007d44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8007d48:	e020      	b.n	8007d8c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8007d4a:	7dbb      	ldrb	r3, [r7, #22]
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d11d      	bne.n	8007d8c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	220b      	movs	r2, #11
 8007d54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007d58:	e018      	b.n	8007d8c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7ff fdf3 	bl	8007946 <USBH_MSC_BOT_REQ_Reset>
 8007d60:	4603      	mov	r3, r0
 8007d62:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d112      	bne.n	8007d90 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 8007d72:	e00d      	b.n	8007d90 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8007d74:	bf00      	nop
 8007d76:	e00c      	b.n	8007d92 <USBH_MSC_BOT_Process+0x392>
      break;
 8007d78:	bf00      	nop
 8007d7a:	e00a      	b.n	8007d92 <USBH_MSC_BOT_Process+0x392>
      break;
 8007d7c:	bf00      	nop
 8007d7e:	e008      	b.n	8007d92 <USBH_MSC_BOT_Process+0x392>
      break;
 8007d80:	bf00      	nop
 8007d82:	e006      	b.n	8007d92 <USBH_MSC_BOT_Process+0x392>
      break;
 8007d84:	bf00      	nop
 8007d86:	e004      	b.n	8007d92 <USBH_MSC_BOT_Process+0x392>
      break;
 8007d88:	bf00      	nop
 8007d8a:	e002      	b.n	8007d92 <USBH_MSC_BOT_Process+0x392>
      break;
 8007d8c:	bf00      	nop
 8007d8e:	e000      	b.n	8007d92 <USBH_MSC_BOT_Process+0x392>
      break;
 8007d90:	bf00      	nop
  }
  return status;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3718      	adds	r7, #24
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	70fb      	strb	r3, [r7, #3]
 8007da8:	4613      	mov	r3, r2
 8007daa:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8007dac:	2302      	movs	r3, #2
 8007dae:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8007dba:	78bb      	ldrb	r3, [r7, #2]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <USBH_MSC_BOT_Abort+0x2a>
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d009      	beq.n	8007dd8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8007dc4:	e011      	b.n	8007dea <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	79db      	ldrb	r3, [r3, #7]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f001 f9e5 	bl	800919c <USBH_ClrFeature>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd6:	e008      	b.n	8007dea <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	799b      	ldrb	r3, [r3, #6]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f001 f9dc 	bl	800919c <USBH_ClrFeature>
 8007de4:	4603      	mov	r3, r0
 8007de6:	73fb      	strb	r3, [r7, #15]
      break;
 8007de8:	bf00      	nop
  }
  return status;
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e02:	69db      	ldr	r3, [r3, #28]
 8007e04:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8007e06:	2301      	movs	r3, #1
 8007e08:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	791b      	ldrb	r3, [r3, #4]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f007 f9e1 	bl	800f1d8 <USBH_LL_GetLastXferSize>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b0d      	cmp	r3, #13
 8007e1a:	d002      	beq.n	8007e22 <USBH_MSC_DecodeCSW+0x2e>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	73fb      	strb	r3, [r7, #15]
 8007e20:	e024      	b.n	8007e6c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e26:	4a14      	ldr	r2, [pc, #80]	@ (8007e78 <USBH_MSC_DecodeCSW+0x84>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d11d      	bne.n	8007e68 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d119      	bne.n	8007e6c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d102      	bne.n	8007e48 <USBH_MSC_DecodeCSW+0x54>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
 8007e42:	2300      	movs	r3, #0
 8007e44:	73fb      	strb	r3, [r7, #15]
 8007e46:	e011      	b.n	8007e6c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d102      	bne.n	8007e58 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8007e52:	2301      	movs	r3, #1
 8007e54:	73fb      	strb	r3, [r7, #15]
 8007e56:	e009      	b.n	8007e6c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d104      	bne.n	8007e6c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8007e62:	2302      	movs	r3, #2
 8007e64:	73fb      	strb	r3, [r7, #15]
 8007e66:	e001      	b.n	8007e6c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8007e68:	2302      	movs	r3, #2
 8007e6a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	53425355 	.word	0x53425355

08007e7c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	460b      	mov	r3, r1
 8007e86:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
 8007e88:	2302      	movs	r3, #2
 8007e8a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e92:	69db      	ldr	r3, [r3, #28]
 8007e94:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d002      	beq.n	8007ea6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d021      	beq.n	8007ee8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007ea4:	e028      	b.n	8007ef8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	220a      	movs	r2, #10
 8007eb8:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	3363      	adds	r3, #99	@ 0x63
 8007ec0:	2210      	movs	r2, #16
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f008 f926 	bl	8010116 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2202      	movs	r2, #2
 8007ede:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ee6:	e007      	b.n	8007ef8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007ee8:	78fb      	ldrb	r3, [r7, #3]
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7ff fd87 	bl	8007a00 <USBH_MSC_BOT_Process>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ef6:	bf00      	nop
  }

  return error;
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b086      	sub	sp, #24
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	607a      	str	r2, [r7, #4]
 8007f0e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
 8007f10:	2301      	movs	r3, #1
 8007f12:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f1a:	69db      	ldr	r3, [r3, #28]
 8007f1c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d002      	beq.n	8007f2e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d027      	beq.n	8007f7c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8007f2c:	e05e      	b.n	8007fec <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2208      	movs	r2, #8
 8007f32:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	2280      	movs	r2, #128	@ 0x80
 8007f38:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	220a      	movs	r2, #10
 8007f40:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	3363      	adds	r3, #99	@ 0x63
 8007f48:	2210      	movs	r2, #16
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f008 f8e2 	bl	8010116 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	2225      	movs	r2, #37	@ 0x25
 8007f56:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	2202      	movs	r2, #2
 8007f66:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f103 0210 	add.w	r2, r3, #16
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8007f76:	2301      	movs	r3, #1
 8007f78:	75fb      	strb	r3, [r7, #23]
      break;
 8007f7a:	e037      	b.n	8007fec <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007f7c:	7afb      	ldrb	r3, [r7, #11]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f7ff fd3d 	bl	8007a00 <USBH_MSC_BOT_Process>
 8007f86:	4603      	mov	r3, r0
 8007f88:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d12c      	bne.n	8007fea <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f96:	3303      	adds	r3, #3
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fa2:	3302      	adds	r3, #2
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	021b      	lsls	r3, r3, #8
 8007fa8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007fb6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	061b      	lsls	r3, r3, #24
 8007fc2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fce:	3307      	adds	r3, #7
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fda:	3306      	adds	r3, #6
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	021b      	lsls	r3, r3, #8
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	809a      	strh	r2, [r3, #4]
      break;
 8007fea:	bf00      	nop
  }

  return error;
 8007fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b086      	sub	sp, #24
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	460b      	mov	r3, r1
 8008000:	607a      	str	r2, [r7, #4]
 8008002:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008004:	2302      	movs	r3, #2
 8008006:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008018:	2b01      	cmp	r3, #1
 800801a:	d002      	beq.n	8008022 <USBH_MSC_SCSI_Inquiry+0x2c>
 800801c:	2b02      	cmp	r3, #2
 800801e:	d03d      	beq.n	800809c <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8008020:	e089      	b.n	8008136 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	2224      	movs	r2, #36	@ 0x24
 8008026:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	2280      	movs	r2, #128	@ 0x80
 800802c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	220a      	movs	r2, #10
 8008034:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	3363      	adds	r3, #99	@ 0x63
 800803c:	220a      	movs	r2, #10
 800803e:	2100      	movs	r1, #0
 8008040:	4618      	mov	r0, r3
 8008042:	f008 f868 	bl	8010116 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	2212      	movs	r2, #18
 800804a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 800804e:	7afb      	ldrb	r3, [r7, #11]
 8008050:	015b      	lsls	r3, r3, #5
 8008052:	b2da      	uxtb	r2, r3
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	2224      	movs	r2, #36	@ 0x24
 800806e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	2202      	movs	r2, #2
 8008086:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f103 0210 	add.w	r2, r3, #16
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8008096:	2301      	movs	r3, #1
 8008098:	75fb      	strb	r3, [r7, #23]
      break;
 800809a:	e04c      	b.n	8008136 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800809c:	7afb      	ldrb	r3, [r7, #11]
 800809e:	4619      	mov	r1, r3
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7ff fcad 	bl	8007a00 <USBH_MSC_BOT_Process>
 80080a6:	4603      	mov	r3, r0
 80080a8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d141      	bne.n	8008134 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80080b0:	2222      	movs	r2, #34	@ 0x22
 80080b2:	2100      	movs	r1, #0
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f008 f82e 	bl	8010116 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	f003 031f 	and.w	r3, r3, #31
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	095b      	lsrs	r3, r3, #5
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080e2:	3301      	adds	r3, #1
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	b25b      	sxtb	r3, r3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	da03      	bge.n	80080f4 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	709a      	strb	r2, [r3, #2]
 80080f2:	e002      	b.n	80080fa <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	1cd8      	adds	r0, r3, #3
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008104:	3308      	adds	r3, #8
 8008106:	2208      	movs	r2, #8
 8008108:	4619      	mov	r1, r3
 800810a:	f008 f894 	bl	8010236 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f103 000c 	add.w	r0, r3, #12
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800811a:	3310      	adds	r3, #16
 800811c:	2210      	movs	r2, #16
 800811e:	4619      	mov	r1, r3
 8008120:	f008 f889 	bl	8010236 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	331d      	adds	r3, #29
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800812e:	3220      	adds	r2, #32
 8008130:	6812      	ldr	r2, [r2, #0]
 8008132:	601a      	str	r2, [r3, #0]
      break;
 8008134:	bf00      	nop
  }

  return error;
 8008136:	7dfb      	ldrb	r3, [r7, #23]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	460b      	mov	r3, r1
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800814e:	2302      	movs	r3, #2
 8008150:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008162:	2b01      	cmp	r3, #1
 8008164:	d002      	beq.n	800816c <USBH_MSC_SCSI_RequestSense+0x2c>
 8008166:	2b02      	cmp	r3, #2
 8008168:	d03d      	beq.n	80081e6 <USBH_MSC_SCSI_RequestSense+0xa6>
        }
      }
      break;

    default:
      break;
 800816a:	e063      	b.n	8008234 <USBH_MSC_SCSI_RequestSense+0xf4>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	220e      	movs	r2, #14
 8008170:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	2280      	movs	r2, #128	@ 0x80
 8008176:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	220a      	movs	r2, #10
 800817e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	3363      	adds	r3, #99	@ 0x63
 8008186:	2210      	movs	r2, #16
 8008188:	2100      	movs	r1, #0
 800818a:	4618      	mov	r0, r3
 800818c:	f007 ffc3 	bl	8010116 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	2203      	movs	r2, #3
 8008194:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8008198:	7afb      	ldrb	r3, [r7, #11]
 800819a:	015b      	lsls	r3, r3, #5
 800819c:	b2da      	uxtb	r2, r3
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	220e      	movs	r2, #14
 80081b8:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2202      	movs	r2, #2
 80081d0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	f103 0210 	add.w	r2, r3, #16
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80081e0:	2301      	movs	r3, #1
 80081e2:	75fb      	strb	r3, [r7, #23]
      break;
 80081e4:	e026      	b.n	8008234 <USBH_MSC_SCSI_RequestSense+0xf4>
      error = USBH_MSC_BOT_Process(phost, lun);
 80081e6:	7afb      	ldrb	r3, [r7, #11]
 80081e8:	4619      	mov	r1, r3
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f7ff fc08 	bl	8007a00 <USBH_MSC_BOT_Process>
 80081f0:	4603      	mov	r3, r0
 80081f2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d11b      	bne.n	8008232 <USBH_MSC_SCSI_RequestSense+0xf2>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008200:	3302      	adds	r3, #2
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	f003 030f 	and.w	r3, r3, #15
 8008208:	b2da      	uxtb	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008214:	7b1a      	ldrb	r2, [r3, #12]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008220:	7b5a      	ldrb	r2, [r3, #13]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	785b      	ldrb	r3, [r3, #1]
 800822a:	2b3a      	cmp	r3, #58	@ 0x3a
 800822c:	d101      	bne.n	8008232 <USBH_MSC_SCSI_RequestSense+0xf2>
          error = USBH_UNRECOVERED_ERROR;
 800822e:	2304      	movs	r3, #4
 8008230:	75fb      	strb	r3, [r7, #23]
      break;
 8008232:	bf00      	nop
  }

  return error;
 8008234:	7dfb      	ldrb	r3, [r7, #23]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b086      	sub	sp, #24
 8008242:	af00      	add	r7, sp, #0
 8008244:	60f8      	str	r0, [r7, #12]
 8008246:	607a      	str	r2, [r7, #4]
 8008248:	603b      	str	r3, [r7, #0]
 800824a:	460b      	mov	r3, r1
 800824c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800824e:	2302      	movs	r3, #2
 8008250:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008262:	2b01      	cmp	r3, #1
 8008264:	d002      	beq.n	800826c <USBH_MSC_SCSI_Write+0x2e>
 8008266:	2b02      	cmp	r3, #2
 8008268:	d04c      	beq.n	8008304 <USBH_MSC_SCSI_Write+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800826a:	e053      	b.n	8008314 <USBH_MSC_SCSI_Write+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 800826c:	7afb      	ldrb	r3, [r7, #11]
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	2134      	movs	r1, #52	@ 0x34
 8008272:	fb01 f303 	mul.w	r3, r1, r3
 8008276:	4413      	add	r3, r2
 8008278:	3398      	adds	r3, #152	@ 0x98
 800827a:	881b      	ldrh	r3, [r3, #0]
 800827c:	461a      	mov	r2, r3
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	fb03 f202 	mul.w	r2, r3, r2
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	220a      	movs	r2, #10
 8008294:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	3363      	adds	r3, #99	@ 0x63
 800829c:	2210      	movs	r2, #16
 800829e:	2100      	movs	r1, #0
 80082a0:	4618      	mov	r0, r3
 80082a2:	f007 ff38 	bl	8010116 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_WRITE10;
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	222a      	movs	r2, #42	@ 0x2a
 80082aa:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 80082ae:	79fa      	ldrb	r2, [r7, #7]
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 80082b6:	79ba      	ldrb	r2, [r7, #6]
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 80082be:	797a      	ldrb	r2, [r7, #5]
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 80082c6:	1d3b      	adds	r3, r7, #4
 80082c8:	781a      	ldrb	r2, [r3, #0]
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 80082d0:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 80082da:	f107 0320 	add.w	r3, r7, #32
 80082de:	781a      	ldrb	r2, [r3, #0]
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	2202      	movs	r2, #2
 80082f2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80082fe:	2301      	movs	r3, #1
 8008300:	75fb      	strb	r3, [r7, #23]
      break;
 8008302:	e007      	b.n	8008314 <USBH_MSC_SCSI_Write+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008304:	7afb      	ldrb	r3, [r7, #11]
 8008306:	4619      	mov	r1, r3
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f7ff fb79 	bl	8007a00 <USBH_MSC_BOT_Process>
 800830e:	4603      	mov	r3, r0
 8008310:	75fb      	strb	r3, [r7, #23]
      break;
 8008312:	bf00      	nop
  }

  return error;
 8008314:	7dfb      	ldrb	r3, [r7, #23]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b086      	sub	sp, #24
 8008322:	af00      	add	r7, sp, #0
 8008324:	60f8      	str	r0, [r7, #12]
 8008326:	607a      	str	r2, [r7, #4]
 8008328:	603b      	str	r3, [r7, #0]
 800832a:	460b      	mov	r3, r1
 800832c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800832e:	2302      	movs	r3, #2
 8008330:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008342:	2b01      	cmp	r3, #1
 8008344:	d002      	beq.n	800834c <USBH_MSC_SCSI_Read+0x2e>
 8008346:	2b02      	cmp	r3, #2
 8008348:	d04c      	beq.n	80083e4 <USBH_MSC_SCSI_Read+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800834a:	e053      	b.n	80083f4 <USBH_MSC_SCSI_Read+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 800834c:	7afb      	ldrb	r3, [r7, #11]
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	2134      	movs	r1, #52	@ 0x34
 8008352:	fb01 f303 	mul.w	r3, r1, r3
 8008356:	4413      	add	r3, r2
 8008358:	3398      	adds	r3, #152	@ 0x98
 800835a:	881b      	ldrh	r3, [r3, #0]
 800835c:	461a      	mov	r2, r3
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	fb03 f202 	mul.w	r2, r3, r2
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	2280      	movs	r2, #128	@ 0x80
 800836c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	220a      	movs	r2, #10
 8008374:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	3363      	adds	r3, #99	@ 0x63
 800837c:	2210      	movs	r2, #16
 800837e:	2100      	movs	r1, #0
 8008380:	4618      	mov	r0, r3
 8008382:	f007 fec8 	bl	8010116 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_READ10;
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	2228      	movs	r2, #40	@ 0x28
 800838a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 800838e:	79fa      	ldrb	r2, [r7, #7]
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 8008396:	79ba      	ldrb	r2, [r7, #6]
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 800839e:	797a      	ldrb	r2, [r7, #5]
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 80083a6:	1d3b      	adds	r3, r7, #4
 80083a8:	781a      	ldrb	r2, [r3, #0]
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 80083b0:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 80083ba:	f107 0320 	add.w	r3, r7, #32
 80083be:	781a      	ldrb	r2, [r3, #0]
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	2202      	movs	r2, #2
 80083d2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80083de:	2301      	movs	r3, #1
 80083e0:	75fb      	strb	r3, [r7, #23]
      break;
 80083e2:	e007      	b.n	80083f4 <USBH_MSC_SCSI_Read+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 80083e4:	7afb      	ldrb	r3, [r7, #11]
 80083e6:	4619      	mov	r1, r3
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f7ff fb09 	bl	8007a00 <USBH_MSC_BOT_Process>
 80083ee:	4603      	mov	r3, r0
 80083f0:	75fb      	strb	r3, [r7, #23]
      break;
 80083f2:	bf00      	nop
  }

  return error;
 80083f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b084      	sub	sp, #16
 8008402:	af00      	add	r7, sp, #0
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	4613      	mov	r3, r2
 800840a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d101      	bne.n	8008416 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008412:	2302      	movs	r3, #2
 8008414:	e029      	b.n	800846a <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	79fa      	ldrb	r2, [r7, #7]
 800841a:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f000 f81f 	bl	8008472 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f006 fe04 	bl	800f070 <USBH_LL_Init>

  return USBH_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]
 800847e:	e009      	b.n	8008494 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	33e0      	adds	r3, #224	@ 0xe0
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	2200      	movs	r2, #0
 800848c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	3301      	adds	r3, #1
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b0f      	cmp	r3, #15
 8008498:	d9f2      	bls.n	8008480 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800849a:	2300      	movs	r3, #0
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	e009      	b.n	80084b4 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80084aa:	2200      	movs	r2, #0
 80084ac:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3301      	adds	r3, #1
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084ba:	d3f1      	bcc.n	80084a0 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2240      	movs	r2, #64	@ 0x40
 80084e0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	331c      	adds	r3, #28
 800850c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008510:	2100      	movs	r1, #0
 8008512:	4618      	mov	r0, r3
 8008514:	f007 fdff 	bl	8010116 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800851e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008522:	2100      	movs	r1, #0
 8008524:	4618      	mov	r0, r3
 8008526:	f007 fdf6 	bl	8010116 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008530:	2212      	movs	r2, #18
 8008532:	2100      	movs	r1, #0
 8008534:	4618      	mov	r0, r3
 8008536:	f007 fdee 	bl	8010116 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008540:	223e      	movs	r2, #62	@ 0x3e
 8008542:	2100      	movs	r1, #0
 8008544:	4618      	mov	r0, r3
 8008546:	f007 fde6 	bl	8010116 <memset>

  return USBH_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d016      	beq.n	8008596 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10e      	bne.n	8008590 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008578:	1c59      	adds	r1, r3, #1
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	33de      	adds	r3, #222	@ 0xde
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	73fb      	strb	r3, [r7, #15]
 800858e:	e004      	b.n	800859a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008590:	2302      	movs	r3, #2
 8008592:	73fb      	strb	r3, [r7, #15]
 8008594:	e001      	b.n	800859a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008596:	2302      	movs	r3, #2
 8008598:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800859a:	7bfb      	ldrb	r3, [r7, #15]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80085be:	78fa      	ldrb	r2, [r7, #3]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d204      	bcs.n	80085ce <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	78fa      	ldrb	r2, [r7, #3]
 80085c8:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80085cc:	e001      	b.n	80085d2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80085ce:	2302      	movs	r3, #2
 80085d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	4608      	mov	r0, r1
 80085ea:	4611      	mov	r1, r2
 80085ec:	461a      	mov	r2, r3
 80085ee:	4603      	mov	r3, r0
 80085f0:	70fb      	strb	r3, [r7, #3]
 80085f2:	460b      	mov	r3, r1
 80085f4:	70bb      	strb	r3, [r7, #2]
 80085f6:	4613      	mov	r3, r2
 80085f8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80085fa:	2300      	movs	r3, #0
 80085fc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80085fe:	2300      	movs	r3, #0
 8008600:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008608:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800860a:	e025      	b.n	8008658 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800860c:	7dfb      	ldrb	r3, [r7, #23]
 800860e:	221a      	movs	r2, #26
 8008610:	fb02 f303 	mul.w	r3, r2, r3
 8008614:	3308      	adds	r3, #8
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	4413      	add	r3, r2
 800861a:	3302      	adds	r3, #2
 800861c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	795b      	ldrb	r3, [r3, #5]
 8008622:	78fa      	ldrb	r2, [r7, #3]
 8008624:	429a      	cmp	r2, r3
 8008626:	d002      	beq.n	800862e <USBH_FindInterface+0x4e>
 8008628:	78fb      	ldrb	r3, [r7, #3]
 800862a:	2bff      	cmp	r3, #255	@ 0xff
 800862c:	d111      	bne.n	8008652 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008632:	78ba      	ldrb	r2, [r7, #2]
 8008634:	429a      	cmp	r2, r3
 8008636:	d002      	beq.n	800863e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008638:	78bb      	ldrb	r3, [r7, #2]
 800863a:	2bff      	cmp	r3, #255	@ 0xff
 800863c:	d109      	bne.n	8008652 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008642:	787a      	ldrb	r2, [r7, #1]
 8008644:	429a      	cmp	r2, r3
 8008646:	d002      	beq.n	800864e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008648:	787b      	ldrb	r3, [r7, #1]
 800864a:	2bff      	cmp	r3, #255	@ 0xff
 800864c:	d101      	bne.n	8008652 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800864e:	7dfb      	ldrb	r3, [r7, #23]
 8008650:	e006      	b.n	8008660 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	3301      	adds	r3, #1
 8008656:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d9d6      	bls.n	800860c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800865e:	23ff      	movs	r3, #255	@ 0xff
}
 8008660:	4618      	mov	r0, r3
 8008662:	371c      	adds	r7, #28
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f006 fd37 	bl	800f0e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800867a:	2101      	movs	r1, #1
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f006 fe3e 	bl	800f2fe <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af04      	add	r7, sp, #16
 8008692:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008694:	2302      	movs	r3, #2
 8008696:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008698:	2300      	movs	r3, #0
 800869a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d102      	bne.n	80086ae <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2203      	movs	r2, #3
 80086ac:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b0b      	cmp	r3, #11
 80086b6:	f200 81bc 	bhi.w	8008a32 <USBH_Process+0x3a6>
 80086ba:	a201      	add	r2, pc, #4	@ (adr r2, 80086c0 <USBH_Process+0x34>)
 80086bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c0:	080086f1 	.word	0x080086f1
 80086c4:	08008723 	.word	0x08008723
 80086c8:	0800878d 	.word	0x0800878d
 80086cc:	080089cd 	.word	0x080089cd
 80086d0:	08008a33 	.word	0x08008a33
 80086d4:	0800882d 	.word	0x0800882d
 80086d8:	08008973 	.word	0x08008973
 80086dc:	08008863 	.word	0x08008863
 80086e0:	08008883 	.word	0x08008883
 80086e4:	080088a1 	.word	0x080088a1
 80086e8:	080088e5 	.word	0x080088e5
 80086ec:	080089b5 	.word	0x080089b5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 819c 	beq.w	8008a36 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008704:	20c8      	movs	r0, #200	@ 0xc8
 8008706:	f006 fe77 	bl	800f3f8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f006 fd49 	bl	800f1a2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008720:	e189      	b.n	8008a36 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b01      	cmp	r3, #1
 800872c:	d107      	bne.n	800873e <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2202      	movs	r2, #2
 800873a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800873c:	e18a      	b.n	8008a54 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008744:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008748:	d914      	bls.n	8008774 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008750:	3301      	adds	r3, #1
 8008752:	b2da      	uxtb	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008760:	2b03      	cmp	r3, #3
 8008762:	d903      	bls.n	800876c <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	220d      	movs	r2, #13
 8008768:	701a      	strb	r2, [r3, #0]
      break;
 800876a:	e173      	b.n	8008a54 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	701a      	strb	r2, [r3, #0]
      break;
 8008772:	e16f      	b.n	8008a54 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800877a:	f103 020a 	add.w	r2, r3, #10
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008784:	200a      	movs	r0, #10
 8008786:	f006 fe37 	bl	800f3f8 <USBH_Delay>
      break;
 800878a:	e163      	b.n	8008a54 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008792:	2b00      	cmp	r3, #0
 8008794:	d005      	beq.n	80087a2 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800879c:	2104      	movs	r1, #4
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80087a2:	2064      	movs	r0, #100	@ 0x64
 80087a4:	f006 fe28 	bl	800f3f8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f006 fcd3 	bl	800f154 <USBH_LL_GetSpeed>
 80087ae:	4603      	mov	r3, r0
 80087b0:	461a      	mov	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2205      	movs	r2, #5
 80087bc:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80087be:	2100      	movs	r1, #0
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f001 faa2 	bl	8009d0a <USBH_AllocPipe>
 80087c6:	4603      	mov	r3, r0
 80087c8:	461a      	mov	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80087ce:	2180      	movs	r1, #128	@ 0x80
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f001 fa9a 	bl	8009d0a <USBH_AllocPipe>
 80087d6:	4603      	mov	r3, r0
 80087d8:	461a      	mov	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	7919      	ldrb	r1, [r3, #4]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80087f2:	9202      	str	r2, [sp, #8]
 80087f4:	2200      	movs	r2, #0
 80087f6:	9201      	str	r2, [sp, #4]
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	4603      	mov	r3, r0
 80087fc:	2280      	movs	r2, #128	@ 0x80
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f001 fa54 	bl	8009cac <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	7959      	ldrb	r1, [r3, #5]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008818:	9202      	str	r2, [sp, #8]
 800881a:	2200      	movs	r2, #0
 800881c:	9201      	str	r2, [sp, #4]
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	4603      	mov	r3, r0
 8008822:	2200      	movs	r2, #0
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f001 fa41 	bl	8009cac <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800882a:	e113      	b.n	8008a54 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f917 	bl	8008a60 <USBH_HandleEnum>
 8008832:	4603      	mov	r3, r0
 8008834:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008836:	7bbb      	ldrb	r3, [r7, #14]
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	f040 80fd 	bne.w	8008a3a <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800884e:	2b01      	cmp	r3, #1
 8008850:	d103      	bne.n	800885a <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2208      	movs	r2, #8
 8008856:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008858:	e0ef      	b.n	8008a3a <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2207      	movs	r2, #7
 800885e:	701a      	strb	r2, [r3, #0]
      break;
 8008860:	e0eb      	b.n	8008a3a <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 80e8 	beq.w	8008a3e <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008874:	2101      	movs	r1, #1
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2208      	movs	r2, #8
 800887e:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8008880:	e0dd      	b.n	8008a3e <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fc3f 	bl	800910e <USBH_SetCfg>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	f040 80d5 	bne.w	8008a42 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2209      	movs	r2, #9
 800889c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800889e:	e0d0      	b.n	8008a42 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80088a6:	f003 0320 	and.w	r3, r3, #32
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d016      	beq.n	80088dc <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80088ae:	2101      	movs	r1, #1
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fc4f 	bl	8009154 <USBH_SetFeature>
 80088b6:	4603      	mov	r3, r0
 80088b8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d103      	bne.n	80088ca <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	220a      	movs	r2, #10
 80088c6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80088c8:	e0bd      	b.n	8008a46 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 80088ca:	7bbb      	ldrb	r3, [r7, #14]
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	f040 80b9 	bne.w	8008a46 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	220a      	movs	r2, #10
 80088d8:	701a      	strb	r2, [r3, #0]
      break;
 80088da:	e0b4      	b.n	8008a46 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	220a      	movs	r2, #10
 80088e0:	701a      	strb	r2, [r3, #0]
      break;
 80088e2:	e0b0      	b.n	8008a46 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 80ad 	beq.w	8008a4a <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80088f8:	2300      	movs	r3, #0
 80088fa:	73fb      	strb	r3, [r7, #15]
 80088fc:	e016      	b.n	800892c <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80088fe:	7bfa      	ldrb	r2, [r7, #15]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	32de      	adds	r2, #222	@ 0xde
 8008904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008908:	791a      	ldrb	r2, [r3, #4]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008910:	429a      	cmp	r2, r3
 8008912:	d108      	bne.n	8008926 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008914:	7bfa      	ldrb	r2, [r7, #15]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	32de      	adds	r2, #222	@ 0xde
 800891a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008924:	e005      	b.n	8008932 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	3301      	adds	r3, #1
 800892a:	73fb      	strb	r3, [r7, #15]
 800892c:	7bfb      	ldrb	r3, [r7, #15]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d0e5      	beq.n	80088fe <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008938:	2b00      	cmp	r3, #0
 800893a:	d016      	beq.n	800896a <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	4798      	blx	r3
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d109      	bne.n	8008962 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2206      	movs	r2, #6
 8008952:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800895a:	2103      	movs	r1, #3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008960:	e073      	b.n	8008a4a <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	220d      	movs	r2, #13
 8008966:	701a      	strb	r2, [r3, #0]
      break;
 8008968:	e06f      	b.n	8008a4a <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	220d      	movs	r2, #13
 800896e:	701a      	strb	r2, [r3, #0]
      break;
 8008970:	e06b      	b.n	8008a4a <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008978:	2b00      	cmp	r3, #0
 800897a:	d017      	beq.n	80089ac <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	4798      	blx	r3
 8008988:	4603      	mov	r3, r0
 800898a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d103      	bne.n	800899c <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	220b      	movs	r2, #11
 8008998:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800899a:	e058      	b.n	8008a4e <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d154      	bne.n	8008a4e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	220d      	movs	r2, #13
 80089a8:	701a      	strb	r2, [r3, #0]
      break;
 80089aa:	e050      	b.n	8008a4e <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	220d      	movs	r2, #13
 80089b0:	701a      	strb	r2, [r3, #0]
      break;
 80089b2:	e04c      	b.n	8008a4e <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d049      	beq.n	8008a52 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	4798      	blx	r3
      }
      break;
 80089ca:	e042      	b.n	8008a52 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f7ff fd4c 	bl	8008472 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d009      	beq.n	80089f8 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d005      	beq.n	8008a0e <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a08:	2105      	movs	r1, #5
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d107      	bne.n	8008a2a <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f7ff fe22 	bl	800866c <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008a28:	e014      	b.n	8008a54 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f006 fb5c 	bl	800f0e8 <USBH_LL_Start>
      break;
 8008a30:	e010      	b.n	8008a54 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8008a32:	bf00      	nop
 8008a34:	e00e      	b.n	8008a54 <USBH_Process+0x3c8>
      break;
 8008a36:	bf00      	nop
 8008a38:	e00c      	b.n	8008a54 <USBH_Process+0x3c8>
      break;
 8008a3a:	bf00      	nop
 8008a3c:	e00a      	b.n	8008a54 <USBH_Process+0x3c8>
    break;
 8008a3e:	bf00      	nop
 8008a40:	e008      	b.n	8008a54 <USBH_Process+0x3c8>
      break;
 8008a42:	bf00      	nop
 8008a44:	e006      	b.n	8008a54 <USBH_Process+0x3c8>
      break;
 8008a46:	bf00      	nop
 8008a48:	e004      	b.n	8008a54 <USBH_Process+0x3c8>
      break;
 8008a4a:	bf00      	nop
 8008a4c:	e002      	b.n	8008a54 <USBH_Process+0x3c8>
      break;
 8008a4e:	bf00      	nop
 8008a50:	e000      	b.n	8008a54 <USBH_Process+0x3c8>
      break;
 8008a52:	bf00      	nop
  }
  return USBH_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop

08008a60 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b088      	sub	sp, #32
 8008a64:	af04      	add	r7, sp, #16
 8008a66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	785b      	ldrb	r3, [r3, #1]
 8008a74:	2b07      	cmp	r3, #7
 8008a76:	f200 81bd 	bhi.w	8008df4 <USBH_HandleEnum+0x394>
 8008a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a80 <USBH_HandleEnum+0x20>)
 8008a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a80:	08008aa1 	.word	0x08008aa1
 8008a84:	08008b5b 	.word	0x08008b5b
 8008a88:	08008bc5 	.word	0x08008bc5
 8008a8c:	08008c4f 	.word	0x08008c4f
 8008a90:	08008cb9 	.word	0x08008cb9
 8008a94:	08008d29 	.word	0x08008d29
 8008a98:	08008d6f 	.word	0x08008d6f
 8008a9c:	08008db5 	.word	0x08008db5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008aa0:	2108      	movs	r1, #8
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fa50 	bl	8008f48 <USBH_Get_DevDesc>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008aac:	7bbb      	ldrb	r3, [r7, #14]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d12e      	bne.n	8008b10 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	7919      	ldrb	r1, [r3, #4]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ad6:	9202      	str	r2, [sp, #8]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	9201      	str	r2, [sp, #4]
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2280      	movs	r2, #128	@ 0x80
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f001 f8e2 	bl	8009cac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	7959      	ldrb	r1, [r3, #5]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008afc:	9202      	str	r2, [sp, #8]
 8008afe:	2200      	movs	r2, #0
 8008b00:	9201      	str	r2, [sp, #4]
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	4603      	mov	r3, r0
 8008b06:	2200      	movs	r2, #0
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 f8cf 	bl	8009cac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008b0e:	e173      	b.n	8008df8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	f040 8170 	bne.w	8008df8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b1e:	3301      	adds	r3, #1
 8008b20:	b2da      	uxtb	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d903      	bls.n	8008b3a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	220d      	movs	r2, #13
 8008b36:	701a      	strb	r2, [r3, #0]
      break;
 8008b38:	e15e      	b.n	8008df8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	795b      	ldrb	r3, [r3, #5]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f001 f903 	bl	8009d4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	791b      	ldrb	r3, [r3, #4]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f001 f8fd 	bl	8009d4c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	701a      	strb	r2, [r3, #0]
      break;
 8008b58:	e14e      	b.n	8008df8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008b5a:	2112      	movs	r1, #18
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f9f3 	bl	8008f48 <USBH_Get_DevDesc>
 8008b62:	4603      	mov	r3, r0
 8008b64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b66:	7bbb      	ldrb	r3, [r7, #14]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d103      	bne.n	8008b74 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b72:	e143      	b.n	8008dfc <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	f040 8140 	bne.w	8008dfc <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b82:	3301      	adds	r3, #1
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	d903      	bls.n	8008b9e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	220d      	movs	r2, #13
 8008b9a:	701a      	strb	r2, [r3, #0]
      break;
 8008b9c:	e12e      	b.n	8008dfc <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	795b      	ldrb	r3, [r3, #5]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f001 f8d1 	bl	8009d4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	791b      	ldrb	r3, [r3, #4]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f001 f8cb 	bl	8009d4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	701a      	strb	r2, [r3, #0]
      break;
 8008bc2:	e11b      	b.n	8008dfc <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fa7d 	bl	80090c6 <USBH_SetAddress>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008bd0:	7bbb      	ldrb	r3, [r7, #14]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d130      	bne.n	8008c38 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008bd6:	2002      	movs	r0, #2
 8008bd8:	f006 fc0e 	bl	800f3f8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2203      	movs	r2, #3
 8008be8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	7919      	ldrb	r1, [r3, #4]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008bfe:	9202      	str	r2, [sp, #8]
 8008c00:	2200      	movs	r2, #0
 8008c02:	9201      	str	r2, [sp, #4]
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	4603      	mov	r3, r0
 8008c08:	2280      	movs	r2, #128	@ 0x80
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f001 f84e 	bl	8009cac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	7959      	ldrb	r1, [r3, #5]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c24:	9202      	str	r2, [sp, #8]
 8008c26:	2200      	movs	r2, #0
 8008c28:	9201      	str	r2, [sp, #4]
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2200      	movs	r2, #0
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f001 f83b 	bl	8009cac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008c36:	e0e3      	b.n	8008e00 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c38:	7bbb      	ldrb	r3, [r7, #14]
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	f040 80e0 	bne.w	8008e00 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	220d      	movs	r2, #13
 8008c44:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	705a      	strb	r2, [r3, #1]
      break;
 8008c4c:	e0d8      	b.n	8008e00 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008c4e:	2109      	movs	r1, #9
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f9a5 	bl	8008fa0 <USBH_Get_CfgDesc>
 8008c56:	4603      	mov	r3, r0
 8008c58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c5a:	7bbb      	ldrb	r3, [r7, #14]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d103      	bne.n	8008c68 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2204      	movs	r2, #4
 8008c64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008c66:	e0cd      	b.n	8008e04 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	2b03      	cmp	r3, #3
 8008c6c:	f040 80ca 	bne.w	8008e04 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008c76:	3301      	adds	r3, #1
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008c86:	2b03      	cmp	r3, #3
 8008c88:	d903      	bls.n	8008c92 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	220d      	movs	r2, #13
 8008c8e:	701a      	strb	r2, [r3, #0]
      break;
 8008c90:	e0b8      	b.n	8008e04 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	795b      	ldrb	r3, [r3, #5]
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 f857 	bl	8009d4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	791b      	ldrb	r3, [r3, #4]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f001 f851 	bl	8009d4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	701a      	strb	r2, [r3, #0]
      break;
 8008cb6:	e0a5      	b.n	8008e04 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f96d 	bl	8008fa0 <USBH_Get_CfgDesc>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008cca:	7bbb      	ldrb	r3, [r7, #14]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d103      	bne.n	8008cd8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2205      	movs	r2, #5
 8008cd4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008cd6:	e097      	b.n	8008e08 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	f040 8094 	bne.w	8008e08 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	d903      	bls.n	8008d02 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	220d      	movs	r2, #13
 8008cfe:	701a      	strb	r2, [r3, #0]
      break;
 8008d00:	e082      	b.n	8008e08 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	795b      	ldrb	r3, [r3, #5]
 8008d06:	4619      	mov	r1, r3
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f001 f81f 	bl	8009d4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	791b      	ldrb	r3, [r3, #4]
 8008d12:	4619      	mov	r1, r3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f001 f819 	bl	8009d4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	701a      	strb	r2, [r3, #0]
      break;
 8008d26:	e06f      	b.n	8008e08 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d019      	beq.n	8008d66 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008d3e:	23ff      	movs	r3, #255	@ 0xff
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f957 	bl	8008ff4 <USBH_Get_StringDesc>
 8008d46:	4603      	mov	r3, r0
 8008d48:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d4a:	7bbb      	ldrb	r3, [r7, #14]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d103      	bne.n	8008d58 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2206      	movs	r2, #6
 8008d54:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008d56:	e059      	b.n	8008e0c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d156      	bne.n	8008e0c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2206      	movs	r2, #6
 8008d62:	705a      	strb	r2, [r3, #1]
      break;
 8008d64:	e052      	b.n	8008e0c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2206      	movs	r2, #6
 8008d6a:	705a      	strb	r2, [r3, #1]
      break;
 8008d6c:	e04e      	b.n	8008e0c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d019      	beq.n	8008dac <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008d84:	23ff      	movs	r3, #255	@ 0xff
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f934 	bl	8008ff4 <USBH_Get_StringDesc>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d90:	7bbb      	ldrb	r3, [r7, #14]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d103      	bne.n	8008d9e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2207      	movs	r2, #7
 8008d9a:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008d9c:	e038      	b.n	8008e10 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d9e:	7bbb      	ldrb	r3, [r7, #14]
 8008da0:	2b03      	cmp	r3, #3
 8008da2:	d135      	bne.n	8008e10 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2207      	movs	r2, #7
 8008da8:	705a      	strb	r2, [r3, #1]
      break;
 8008daa:	e031      	b.n	8008e10 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2207      	movs	r2, #7
 8008db0:	705a      	strb	r2, [r3, #1]
      break;
 8008db2:	e02d      	b.n	8008e10 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d017      	beq.n	8008dee <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008dca:	23ff      	movs	r3, #255	@ 0xff
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f911 	bl	8008ff4 <USBH_Get_StringDesc>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008dd6:	7bbb      	ldrb	r3, [r7, #14]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d102      	bne.n	8008de2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008de0:	e018      	b.n	8008e14 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	d115      	bne.n	8008e14 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	73fb      	strb	r3, [r7, #15]
      break;
 8008dec:	e012      	b.n	8008e14 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008dee:	2300      	movs	r3, #0
 8008df0:	73fb      	strb	r3, [r7, #15]
      break;
 8008df2:	e00f      	b.n	8008e14 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008df4:	bf00      	nop
 8008df6:	e00e      	b.n	8008e16 <USBH_HandleEnum+0x3b6>
      break;
 8008df8:	bf00      	nop
 8008dfa:	e00c      	b.n	8008e16 <USBH_HandleEnum+0x3b6>
      break;
 8008dfc:	bf00      	nop
 8008dfe:	e00a      	b.n	8008e16 <USBH_HandleEnum+0x3b6>
      break;
 8008e00:	bf00      	nop
 8008e02:	e008      	b.n	8008e16 <USBH_HandleEnum+0x3b6>
      break;
 8008e04:	bf00      	nop
 8008e06:	e006      	b.n	8008e16 <USBH_HandleEnum+0x3b6>
      break;
 8008e08:	bf00      	nop
 8008e0a:	e004      	b.n	8008e16 <USBH_HandleEnum+0x3b6>
      break;
 8008e0c:	bf00      	nop
 8008e0e:	e002      	b.n	8008e16 <USBH_HandleEnum+0x3b6>
      break;
 8008e10:	bf00      	nop
 8008e12:	e000      	b.n	8008e16 <USBH_HandleEnum+0x3b6>
      break;
 8008e14:	bf00      	nop
  }
  return Status;
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008e32:	bf00      	nop
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b082      	sub	sp, #8
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f804 	bl	8008e62 <USBH_HandleSof>
}
 8008e5a:	bf00      	nop
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b0b      	cmp	r3, #11
 8008e72:	d10a      	bne.n	8008e8a <USBH_HandleSof+0x28>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d005      	beq.n	8008e8a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	4798      	blx	r3
  }
}
 8008e8a:	bf00      	nop
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b083      	sub	sp, #12
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8008ea2:	bf00      	nop
}
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b083      	sub	sp, #12
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8008ec6:	bf00      	nop
}
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b083      	sub	sp, #12
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f006 f8fc 	bl	800f11e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	791b      	ldrb	r3, [r3, #4]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 ff0d 	bl	8009d4c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	795b      	ldrb	r3, [r3, #5]
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 ff07 	bl	8009d4c <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af02      	add	r7, sp, #8
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008f54:	887b      	ldrh	r3, [r7, #2]
 8008f56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f5a:	d901      	bls.n	8008f60 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e01b      	b.n	8008f98 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008f66:	887b      	ldrh	r3, [r7, #2]
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f70:	2100      	movs	r1, #0
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f872 	bl	800905c <USBH_GetDescriptor>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d109      	bne.n	8008f96 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008f88:	887a      	ldrh	r2, [r7, #2]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f929 	bl	80091e4 <USBH_ParseDevDesc>
 8008f92:	4603      	mov	r3, r0
 8008f94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af02      	add	r7, sp, #8
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	331c      	adds	r3, #28
 8008fb0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008fb2:	887b      	ldrh	r3, [r7, #2]
 8008fb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fb8:	d901      	bls.n	8008fbe <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e016      	b.n	8008fec <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008fbe:	887b      	ldrh	r3, [r7, #2]
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008fc8:	2100      	movs	r1, #0
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f846 	bl	800905c <USBH_GetDescriptor>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d107      	bne.n	8008fea <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008fda:	887b      	ldrh	r3, [r7, #2]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	68b9      	ldr	r1, [r7, #8]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 f9af 	bl	8009344 <USBH_ParseCfgDesc>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af02      	add	r7, sp, #8
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	607a      	str	r2, [r7, #4]
 8008ffe:	461a      	mov	r2, r3
 8009000:	460b      	mov	r3, r1
 8009002:	72fb      	strb	r3, [r7, #11]
 8009004:	4613      	mov	r3, r2
 8009006:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009008:	893b      	ldrh	r3, [r7, #8]
 800900a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800900e:	d802      	bhi.n	8009016 <USBH_Get_StringDesc+0x22>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009016:	2303      	movs	r3, #3
 8009018:	e01c      	b.n	8009054 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800901a:	7afb      	ldrb	r3, [r7, #11]
 800901c:	b29b      	uxth	r3, r3
 800901e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009022:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800902a:	893b      	ldrh	r3, [r7, #8]
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	460b      	mov	r3, r1
 8009030:	2100      	movs	r1, #0
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f000 f812 	bl	800905c <USBH_GetDescriptor>
 8009038:	4603      	mov	r3, r0
 800903a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800903c:	7dfb      	ldrb	r3, [r7, #23]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d107      	bne.n	8009052 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009048:	893a      	ldrh	r2, [r7, #8]
 800904a:	6879      	ldr	r1, [r7, #4]
 800904c:	4618      	mov	r0, r3
 800904e:	f000 fb8c 	bl	800976a <USBH_ParseStringDesc>
  }

  return status;
 8009052:	7dfb      	ldrb	r3, [r7, #23]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3718      	adds	r7, #24
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	607b      	str	r3, [r7, #4]
 8009066:	460b      	mov	r3, r1
 8009068:	72fb      	strb	r3, [r7, #11]
 800906a:	4613      	mov	r3, r2
 800906c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	789b      	ldrb	r3, [r3, #2]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d11c      	bne.n	80090b0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009076:	7afb      	ldrb	r3, [r7, #11]
 8009078:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800907c:	b2da      	uxtb	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2206      	movs	r2, #6
 8009086:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	893a      	ldrh	r2, [r7, #8]
 800908c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800908e:	893b      	ldrh	r3, [r7, #8]
 8009090:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009094:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009098:	d104      	bne.n	80090a4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f240 4209 	movw	r2, #1033	@ 0x409
 80090a0:	829a      	strh	r2, [r3, #20]
 80090a2:	e002      	b.n	80090aa <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	8b3a      	ldrh	r2, [r7, #24]
 80090ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80090b0:	8b3b      	ldrh	r3, [r7, #24]
 80090b2:	461a      	mov	r2, r3
 80090b4:	6879      	ldr	r1, [r7, #4]
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f000 fba4 	bl	8009804 <USBH_CtlReq>
 80090bc:	4603      	mov	r3, r0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	460b      	mov	r3, r1
 80090d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	789b      	ldrb	r3, [r3, #2]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d10f      	bne.n	80090fa <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2205      	movs	r2, #5
 80090e4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80090e6:	78fb      	ldrb	r3, [r7, #3]
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80090fa:	2200      	movs	r2, #0
 80090fc:	2100      	movs	r1, #0
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fb80 	bl	8009804 <USBH_CtlReq>
 8009104:	4603      	mov	r3, r0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b082      	sub	sp, #8
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	460b      	mov	r3, r1
 8009118:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	789b      	ldrb	r3, [r3, #2]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d10e      	bne.n	8009140 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2209      	movs	r2, #9
 800912c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	887a      	ldrh	r2, [r7, #2]
 8009132:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009140:	2200      	movs	r2, #0
 8009142:	2100      	movs	r1, #0
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fb5d 	bl	8009804 <USBH_CtlReq>
 800914a:	4603      	mov	r3, r0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	460b      	mov	r3, r1
 800915e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	789b      	ldrb	r3, [r3, #2]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d10f      	bne.n	8009188 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2203      	movs	r2, #3
 8009172:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009174:	78fb      	ldrb	r3, [r7, #3]
 8009176:	b29a      	uxth	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009188:	2200      	movs	r2, #0
 800918a:	2100      	movs	r1, #0
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fb39 	bl	8009804 <USBH_CtlReq>
 8009192:	4603      	mov	r3, r0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	789b      	ldrb	r3, [r3, #2]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d10f      	bne.n	80091d0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2202      	movs	r2, #2
 80091b4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2201      	movs	r2, #1
 80091ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80091c2:	78fb      	ldrb	r3, [r7, #3]
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80091d0:	2200      	movs	r2, #0
 80091d2:	2100      	movs	r1, #0
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fb15 	bl	8009804 <USBH_CtlReq>
 80091da:	4603      	mov	r3, r0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b087      	sub	sp, #28
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	4613      	mov	r3, r2
 80091f0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80091f8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d101      	bne.n	8009208 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009204:	2302      	movs	r3, #2
 8009206:	e094      	b.n	8009332 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	781a      	ldrb	r2, [r3, #0]
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	785a      	ldrb	r2, [r3, #1]
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	3302      	adds	r3, #2
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	3303      	adds	r3, #3
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	021b      	lsls	r3, r3, #8
 8009228:	b29b      	uxth	r3, r3
 800922a:	4313      	orrs	r3, r2
 800922c:	b29a      	uxth	r2, r3
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	791a      	ldrb	r2, [r3, #4]
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	795a      	ldrb	r2, [r3, #5]
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	799a      	ldrb	r2, [r3, #6]
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	79da      	ldrb	r2, [r3, #7]
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009258:	2b00      	cmp	r3, #0
 800925a:	d004      	beq.n	8009266 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009262:	2b01      	cmp	r3, #1
 8009264:	d11b      	bne.n	800929e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	79db      	ldrb	r3, [r3, #7]
 800926a:	2b20      	cmp	r3, #32
 800926c:	dc0f      	bgt.n	800928e <USBH_ParseDevDesc+0xaa>
 800926e:	2b08      	cmp	r3, #8
 8009270:	db0f      	blt.n	8009292 <USBH_ParseDevDesc+0xae>
 8009272:	3b08      	subs	r3, #8
 8009274:	4a32      	ldr	r2, [pc, #200]	@ (8009340 <USBH_ParseDevDesc+0x15c>)
 8009276:	fa22 f303 	lsr.w	r3, r2, r3
 800927a:	f003 0301 	and.w	r3, r3, #1
 800927e:	2b00      	cmp	r3, #0
 8009280:	bf14      	ite	ne
 8009282:	2301      	movne	r3, #1
 8009284:	2300      	moveq	r3, #0
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	d106      	bne.n	800929a <USBH_ParseDevDesc+0xb6>
 800928c:	e001      	b.n	8009292 <USBH_ParseDevDesc+0xae>
 800928e:	2b40      	cmp	r3, #64	@ 0x40
 8009290:	d003      	beq.n	800929a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	2208      	movs	r2, #8
 8009296:	71da      	strb	r2, [r3, #7]
        break;
 8009298:	e000      	b.n	800929c <USBH_ParseDevDesc+0xb8>
        break;
 800929a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800929c:	e00e      	b.n	80092bc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d107      	bne.n	80092b8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	79db      	ldrb	r3, [r3, #7]
 80092ac:	2b08      	cmp	r3, #8
 80092ae:	d005      	beq.n	80092bc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	2208      	movs	r2, #8
 80092b4:	71da      	strb	r2, [r3, #7]
 80092b6:	e001      	b.n	80092bc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80092b8:	2303      	movs	r3, #3
 80092ba:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80092bc:	88fb      	ldrh	r3, [r7, #6]
 80092be:	2b08      	cmp	r3, #8
 80092c0:	d936      	bls.n	8009330 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	3308      	adds	r3, #8
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	461a      	mov	r2, r3
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	3309      	adds	r3, #9
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	021b      	lsls	r3, r3, #8
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	4313      	orrs	r3, r2
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	330a      	adds	r3, #10
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	330b      	adds	r3, #11
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	021b      	lsls	r3, r3, #8
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	4313      	orrs	r3, r2
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	330c      	adds	r3, #12
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	461a      	mov	r2, r3
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	330d      	adds	r3, #13
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	021b      	lsls	r3, r3, #8
 8009306:	b29b      	uxth	r3, r3
 8009308:	4313      	orrs	r3, r2
 800930a:	b29a      	uxth	r2, r3
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	7b9a      	ldrb	r2, [r3, #14]
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	7bda      	ldrb	r2, [r3, #15]
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	7c1a      	ldrb	r2, [r3, #16]
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	7c5a      	ldrb	r2, [r3, #17]
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009330:	7dfb      	ldrb	r3, [r7, #23]
}
 8009332:	4618      	mov	r0, r3
 8009334:	371c      	adds	r7, #28
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	01000101 	.word	0x01000101

08009344 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b08c      	sub	sp, #48	@ 0x30
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	4613      	mov	r3, r2
 8009350:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009358:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009360:	2300      	movs	r3, #0
 8009362:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009366:	2300      	movs	r3, #0
 8009368:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d101      	bne.n	8009376 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009372:	2302      	movs	r3, #2
 8009374:	e0de      	b.n	8009534 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800937a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	2b09      	cmp	r3, #9
 8009380:	d002      	beq.n	8009388 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009384:	2209      	movs	r2, #9
 8009386:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	781a      	ldrb	r2, [r3, #0]
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	785a      	ldrb	r2, [r3, #1]
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	3302      	adds	r3, #2
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	3303      	adds	r3, #3
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	021b      	lsls	r3, r3, #8
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	4313      	orrs	r3, r2
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093b2:	bf28      	it	cs
 80093b4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	6a3b      	ldr	r3, [r7, #32]
 80093bc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	791a      	ldrb	r2, [r3, #4]
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	795a      	ldrb	r2, [r3, #5]
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	799a      	ldrb	r2, [r3, #6]
 80093d2:	6a3b      	ldr	r3, [r7, #32]
 80093d4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	79da      	ldrb	r2, [r3, #7]
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	7a1a      	ldrb	r2, [r3, #8]
 80093e2:	6a3b      	ldr	r3, [r7, #32]
 80093e4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80093e6:	88fb      	ldrh	r3, [r7, #6]
 80093e8:	2b09      	cmp	r3, #9
 80093ea:	f240 80a1 	bls.w	8009530 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 80093ee:	2309      	movs	r3, #9
 80093f0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80093f2:	2300      	movs	r3, #0
 80093f4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80093f6:	e085      	b.n	8009504 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80093f8:	f107 0316 	add.w	r3, r7, #22
 80093fc:	4619      	mov	r1, r3
 80093fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009400:	f000 f9e6 	bl	80097d0 <USBH_GetNextDesc>
 8009404:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009408:	785b      	ldrb	r3, [r3, #1]
 800940a:	2b04      	cmp	r3, #4
 800940c:	d17a      	bne.n	8009504 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800940e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	2b09      	cmp	r3, #9
 8009414:	d002      	beq.n	800941c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009418:	2209      	movs	r2, #9
 800941a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800941c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009420:	221a      	movs	r2, #26
 8009422:	fb02 f303 	mul.w	r3, r2, r3
 8009426:	3308      	adds	r3, #8
 8009428:	6a3a      	ldr	r2, [r7, #32]
 800942a:	4413      	add	r3, r2
 800942c:	3302      	adds	r3, #2
 800942e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009430:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009432:	69f8      	ldr	r0, [r7, #28]
 8009434:	f000 f882 	bl	800953c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009438:	2300      	movs	r3, #0
 800943a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800943e:	2300      	movs	r3, #0
 8009440:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009442:	e043      	b.n	80094cc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009444:	f107 0316 	add.w	r3, r7, #22
 8009448:	4619      	mov	r1, r3
 800944a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800944c:	f000 f9c0 	bl	80097d0 <USBH_GetNextDesc>
 8009450:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009454:	785b      	ldrb	r3, [r3, #1]
 8009456:	2b05      	cmp	r3, #5
 8009458:	d138      	bne.n	80094cc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	795b      	ldrb	r3, [r3, #5]
 800945e:	2b01      	cmp	r3, #1
 8009460:	d113      	bne.n	800948a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009466:	2b02      	cmp	r3, #2
 8009468:	d003      	beq.n	8009472 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	799b      	ldrb	r3, [r3, #6]
 800946e:	2b03      	cmp	r3, #3
 8009470:	d10b      	bne.n	800948a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	79db      	ldrb	r3, [r3, #7]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10b      	bne.n	8009492 <USBH_ParseCfgDesc+0x14e>
 800947a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	2b09      	cmp	r3, #9
 8009480:	d007      	beq.n	8009492 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009484:	2209      	movs	r2, #9
 8009486:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009488:	e003      	b.n	8009492 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800948a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948c:	2207      	movs	r2, #7
 800948e:	701a      	strb	r2, [r3, #0]
 8009490:	e000      	b.n	8009494 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009492:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009498:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800949c:	3201      	adds	r2, #1
 800949e:	00d2      	lsls	r2, r2, #3
 80094a0:	211a      	movs	r1, #26
 80094a2:	fb01 f303 	mul.w	r3, r1, r3
 80094a6:	4413      	add	r3, r2
 80094a8:	3308      	adds	r3, #8
 80094aa:	6a3a      	ldr	r2, [r7, #32]
 80094ac:	4413      	add	r3, r2
 80094ae:	3304      	adds	r3, #4
 80094b0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80094b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094b4:	69b9      	ldr	r1, [r7, #24]
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f000 f86f 	bl	800959a <USBH_ParseEPDesc>
 80094bc:	4603      	mov	r3, r0
 80094be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80094c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80094c6:	3301      	adds	r3, #1
 80094c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80094cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d80a      	bhi.n	80094ea <USBH_ParseCfgDesc+0x1a6>
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	791b      	ldrb	r3, [r3, #4]
 80094d8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80094dc:	429a      	cmp	r2, r3
 80094de:	d204      	bcs.n	80094ea <USBH_ParseCfgDesc+0x1a6>
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	885a      	ldrh	r2, [r3, #2]
 80094e4:	8afb      	ldrh	r3, [r7, #22]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d8ac      	bhi.n	8009444 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	791b      	ldrb	r3, [r3, #4]
 80094ee:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d201      	bcs.n	80094fa <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 80094f6:	2303      	movs	r3, #3
 80094f8:	e01c      	b.n	8009534 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 80094fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094fe:	3301      	adds	r3, #1
 8009500:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009508:	2b01      	cmp	r3, #1
 800950a:	d805      	bhi.n	8009518 <USBH_ParseCfgDesc+0x1d4>
 800950c:	6a3b      	ldr	r3, [r7, #32]
 800950e:	885a      	ldrh	r2, [r3, #2]
 8009510:	8afb      	ldrh	r3, [r7, #22]
 8009512:	429a      	cmp	r2, r3
 8009514:	f63f af70 	bhi.w	80093f8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009518:	6a3b      	ldr	r3, [r7, #32]
 800951a:	791b      	ldrb	r3, [r3, #4]
 800951c:	2b02      	cmp	r3, #2
 800951e:	bf28      	it	cs
 8009520:	2302      	movcs	r3, #2
 8009522:	b2db      	uxtb	r3, r3
 8009524:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009528:	429a      	cmp	r2, r3
 800952a:	d201      	bcs.n	8009530 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800952c:	2303      	movs	r3, #3
 800952e:	e001      	b.n	8009534 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8009530:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009534:	4618      	mov	r0, r3
 8009536:	3730      	adds	r7, #48	@ 0x30
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	781a      	ldrb	r2, [r3, #0]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	785a      	ldrb	r2, [r3, #1]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	789a      	ldrb	r2, [r3, #2]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	78da      	ldrb	r2, [r3, #3]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	791a      	ldrb	r2, [r3, #4]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	795a      	ldrb	r2, [r3, #5]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	799a      	ldrb	r2, [r3, #6]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	79da      	ldrb	r2, [r3, #7]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	7a1a      	ldrb	r2, [r3, #8]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	721a      	strb	r2, [r3, #8]
}
 800958e:	bf00      	nop
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800959a:	b480      	push	{r7}
 800959c:	b087      	sub	sp, #28
 800959e:	af00      	add	r7, sp, #0
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	60b9      	str	r1, [r7, #8]
 80095a4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	781a      	ldrb	r2, [r3, #0]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	785a      	ldrb	r2, [r3, #1]
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	789a      	ldrb	r2, [r3, #2]
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	78da      	ldrb	r2, [r3, #3]
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	3304      	adds	r3, #4
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	461a      	mov	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	3305      	adds	r3, #5
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	021b      	lsls	r3, r3, #8
 80095da:	b29b      	uxth	r3, r3
 80095dc:	4313      	orrs	r3, r2
 80095de:	b29a      	uxth	r2, r3
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	799a      	ldrb	r2, [r3, #6]
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	889b      	ldrh	r3, [r3, #4]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d009      	beq.n	8009608 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80095f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095fc:	d804      	bhi.n	8009608 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009602:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009606:	d901      	bls.n	800960c <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009608:	2303      	movs	r3, #3
 800960a:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009612:	2b00      	cmp	r3, #0
 8009614:	d136      	bne.n	8009684 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	78db      	ldrb	r3, [r3, #3]
 800961a:	f003 0303 	and.w	r3, r3, #3
 800961e:	2b02      	cmp	r3, #2
 8009620:	d108      	bne.n	8009634 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	889b      	ldrh	r3, [r3, #4]
 8009626:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800962a:	f240 8097 	bls.w	800975c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800962e:	2303      	movs	r3, #3
 8009630:	75fb      	strb	r3, [r7, #23]
 8009632:	e093      	b.n	800975c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	78db      	ldrb	r3, [r3, #3]
 8009638:	f003 0303 	and.w	r3, r3, #3
 800963c:	2b00      	cmp	r3, #0
 800963e:	d107      	bne.n	8009650 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	889b      	ldrh	r3, [r3, #4]
 8009644:	2b40      	cmp	r3, #64	@ 0x40
 8009646:	f240 8089 	bls.w	800975c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800964a:	2303      	movs	r3, #3
 800964c:	75fb      	strb	r3, [r7, #23]
 800964e:	e085      	b.n	800975c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	78db      	ldrb	r3, [r3, #3]
 8009654:	f003 0303 	and.w	r3, r3, #3
 8009658:	2b01      	cmp	r3, #1
 800965a:	d005      	beq.n	8009668 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	78db      	ldrb	r3, [r3, #3]
 8009660:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009664:	2b03      	cmp	r3, #3
 8009666:	d10a      	bne.n	800967e <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	799b      	ldrb	r3, [r3, #6]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d003      	beq.n	8009678 <USBH_ParseEPDesc+0xde>
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	799b      	ldrb	r3, [r3, #6]
 8009674:	2b10      	cmp	r3, #16
 8009676:	d970      	bls.n	800975a <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009678:	2303      	movs	r3, #3
 800967a:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800967c:	e06d      	b.n	800975a <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800967e:	2303      	movs	r3, #3
 8009680:	75fb      	strb	r3, [r7, #23]
 8009682:	e06b      	b.n	800975c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800968a:	2b01      	cmp	r3, #1
 800968c:	d13c      	bne.n	8009708 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	78db      	ldrb	r3, [r3, #3]
 8009692:	f003 0303 	and.w	r3, r3, #3
 8009696:	2b02      	cmp	r3, #2
 8009698:	d005      	beq.n	80096a6 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	78db      	ldrb	r3, [r3, #3]
 800969e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d106      	bne.n	80096b4 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	889b      	ldrh	r3, [r3, #4]
 80096aa:	2b40      	cmp	r3, #64	@ 0x40
 80096ac:	d956      	bls.n	800975c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80096ae:	2303      	movs	r3, #3
 80096b0:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80096b2:	e053      	b.n	800975c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	78db      	ldrb	r3, [r3, #3]
 80096b8:	f003 0303 	and.w	r3, r3, #3
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d10e      	bne.n	80096de <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	799b      	ldrb	r3, [r3, #6]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d007      	beq.n	80096d8 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80096cc:	2b10      	cmp	r3, #16
 80096ce:	d803      	bhi.n	80096d8 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80096d4:	2b40      	cmp	r3, #64	@ 0x40
 80096d6:	d941      	bls.n	800975c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80096d8:	2303      	movs	r3, #3
 80096da:	75fb      	strb	r3, [r7, #23]
 80096dc:	e03e      	b.n	800975c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	78db      	ldrb	r3, [r3, #3]
 80096e2:	f003 0303 	and.w	r3, r3, #3
 80096e6:	2b03      	cmp	r3, #3
 80096e8:	d10b      	bne.n	8009702 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	799b      	ldrb	r3, [r3, #6]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d004      	beq.n	80096fc <USBH_ParseEPDesc+0x162>
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	889b      	ldrh	r3, [r3, #4]
 80096f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096fa:	d32f      	bcc.n	800975c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80096fc:	2303      	movs	r3, #3
 80096fe:	75fb      	strb	r3, [r7, #23]
 8009700:	e02c      	b.n	800975c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009702:	2303      	movs	r3, #3
 8009704:	75fb      	strb	r3, [r7, #23]
 8009706:	e029      	b.n	800975c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800970e:	2b02      	cmp	r3, #2
 8009710:	d120      	bne.n	8009754 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	78db      	ldrb	r3, [r3, #3]
 8009716:	f003 0303 	and.w	r3, r3, #3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d106      	bne.n	800972c <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	889b      	ldrh	r3, [r3, #4]
 8009722:	2b08      	cmp	r3, #8
 8009724:	d01a      	beq.n	800975c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009726:	2303      	movs	r3, #3
 8009728:	75fb      	strb	r3, [r7, #23]
 800972a:	e017      	b.n	800975c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	78db      	ldrb	r3, [r3, #3]
 8009730:	f003 0303 	and.w	r3, r3, #3
 8009734:	2b03      	cmp	r3, #3
 8009736:	d10a      	bne.n	800974e <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	799b      	ldrb	r3, [r3, #6]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d003      	beq.n	8009748 <USBH_ParseEPDesc+0x1ae>
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	889b      	ldrh	r3, [r3, #4]
 8009744:	2b08      	cmp	r3, #8
 8009746:	d909      	bls.n	800975c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009748:	2303      	movs	r3, #3
 800974a:	75fb      	strb	r3, [r7, #23]
 800974c:	e006      	b.n	800975c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800974e:	2303      	movs	r3, #3
 8009750:	75fb      	strb	r3, [r7, #23]
 8009752:	e003      	b.n	800975c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009754:	2303      	movs	r3, #3
 8009756:	75fb      	strb	r3, [r7, #23]
 8009758:	e000      	b.n	800975c <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800975a:	bf00      	nop
  }

  return status;
 800975c:	7dfb      	ldrb	r3, [r7, #23]
}
 800975e:	4618      	mov	r0, r3
 8009760:	371c      	adds	r7, #28
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800976a:	b480      	push	{r7}
 800976c:	b087      	sub	sp, #28
 800976e:	af00      	add	r7, sp, #0
 8009770:	60f8      	str	r0, [r7, #12]
 8009772:	60b9      	str	r1, [r7, #8]
 8009774:	4613      	mov	r3, r2
 8009776:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	3301      	adds	r3, #1
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b03      	cmp	r3, #3
 8009780:	d120      	bne.n	80097c4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	1e9a      	subs	r2, r3, #2
 8009788:	88fb      	ldrh	r3, [r7, #6]
 800978a:	4293      	cmp	r3, r2
 800978c:	bf28      	it	cs
 800978e:	4613      	movcs	r3, r2
 8009790:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	3302      	adds	r3, #2
 8009796:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009798:	2300      	movs	r3, #0
 800979a:	82fb      	strh	r3, [r7, #22]
 800979c:	e00b      	b.n	80097b6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800979e:	8afb      	ldrh	r3, [r7, #22]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	4413      	add	r3, r2
 80097a4:	781a      	ldrb	r2, [r3, #0]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	701a      	strb	r2, [r3, #0]
      pdest++;
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	3301      	adds	r3, #1
 80097ae:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80097b0:	8afb      	ldrh	r3, [r7, #22]
 80097b2:	3302      	adds	r3, #2
 80097b4:	82fb      	strh	r3, [r7, #22]
 80097b6:	8afa      	ldrh	r2, [r7, #22]
 80097b8:	8abb      	ldrh	r3, [r7, #20]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d3ef      	bcc.n	800979e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2200      	movs	r2, #0
 80097c2:	701a      	strb	r2, [r3, #0]
  }
}
 80097c4:	bf00      	nop
 80097c6:	371c      	adds	r7, #28
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	881b      	ldrh	r3, [r3, #0]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	7812      	ldrb	r2, [r2, #0]
 80097e2:	4413      	add	r3, r2
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4413      	add	r3, r2
 80097f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80097f6:	68fb      	ldr	r3, [r7, #12]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3714      	adds	r7, #20
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	4613      	mov	r3, r2
 8009810:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009812:	2301      	movs	r3, #1
 8009814:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	789b      	ldrb	r3, [r3, #2]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d002      	beq.n	8009824 <USBH_CtlReq+0x20>
 800981e:	2b02      	cmp	r3, #2
 8009820:	d00f      	beq.n	8009842 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8009822:	e027      	b.n	8009874 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	88fa      	ldrh	r2, [r7, #6]
 800982e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2201      	movs	r2, #1
 8009834:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2202      	movs	r2, #2
 800983a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800983c:	2301      	movs	r3, #1
 800983e:	75fb      	strb	r3, [r7, #23]
      break;
 8009840:	e018      	b.n	8009874 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	f000 f81c 	bl	8009880 <USBH_HandleControl>
 8009848:	4603      	mov	r3, r0
 800984a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800984c:	7dfb      	ldrb	r3, [r7, #23]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d002      	beq.n	8009858 <USBH_CtlReq+0x54>
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	2b03      	cmp	r3, #3
 8009856:	d106      	bne.n	8009866 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2201      	movs	r2, #1
 800985c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	761a      	strb	r2, [r3, #24]
      break;
 8009864:	e005      	b.n	8009872 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009866:	7dfb      	ldrb	r3, [r7, #23]
 8009868:	2b02      	cmp	r3, #2
 800986a:	d102      	bne.n	8009872 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2201      	movs	r2, #1
 8009870:	709a      	strb	r2, [r3, #2]
      break;
 8009872:	bf00      	nop
  }
  return status;
 8009874:	7dfb      	ldrb	r3, [r7, #23]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af02      	add	r7, sp, #8
 8009886:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009888:	2301      	movs	r3, #1
 800988a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800988c:	2300      	movs	r3, #0
 800988e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	7e1b      	ldrb	r3, [r3, #24]
 8009894:	3b01      	subs	r3, #1
 8009896:	2b0a      	cmp	r3, #10
 8009898:	f200 8157 	bhi.w	8009b4a <USBH_HandleControl+0x2ca>
 800989c:	a201      	add	r2, pc, #4	@ (adr r2, 80098a4 <USBH_HandleControl+0x24>)
 800989e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a2:	bf00      	nop
 80098a4:	080098d1 	.word	0x080098d1
 80098a8:	080098eb 	.word	0x080098eb
 80098ac:	08009955 	.word	0x08009955
 80098b0:	0800997b 	.word	0x0800997b
 80098b4:	080099b5 	.word	0x080099b5
 80098b8:	080099df 	.word	0x080099df
 80098bc:	08009a31 	.word	0x08009a31
 80098c0:	08009a53 	.word	0x08009a53
 80098c4:	08009a8f 	.word	0x08009a8f
 80098c8:	08009ab5 	.word	0x08009ab5
 80098cc:	08009af3 	.word	0x08009af3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f103 0110 	add.w	r1, r3, #16
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	795b      	ldrb	r3, [r3, #5]
 80098da:	461a      	mov	r2, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f945 	bl	8009b6c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2202      	movs	r2, #2
 80098e6:	761a      	strb	r2, [r3, #24]
      break;
 80098e8:	e13a      	b.n	8009b60 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	795b      	ldrb	r3, [r3, #5]
 80098ee:	4619      	mov	r1, r3
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f005 fcf1 	bl	800f2d8 <USBH_LL_GetURBState>
 80098f6:	4603      	mov	r3, r0
 80098f8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80098fa:	7bbb      	ldrb	r3, [r7, #14]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d11e      	bne.n	800993e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	7c1b      	ldrb	r3, [r3, #16]
 8009904:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009908:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	8adb      	ldrh	r3, [r3, #22]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00a      	beq.n	8009928 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009912:	7b7b      	ldrb	r3, [r7, #13]
 8009914:	2b80      	cmp	r3, #128	@ 0x80
 8009916:	d103      	bne.n	8009920 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2203      	movs	r2, #3
 800991c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800991e:	e116      	b.n	8009b4e <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2205      	movs	r2, #5
 8009924:	761a      	strb	r2, [r3, #24]
      break;
 8009926:	e112      	b.n	8009b4e <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8009928:	7b7b      	ldrb	r3, [r7, #13]
 800992a:	2b80      	cmp	r3, #128	@ 0x80
 800992c:	d103      	bne.n	8009936 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2209      	movs	r2, #9
 8009932:	761a      	strb	r2, [r3, #24]
      break;
 8009934:	e10b      	b.n	8009b4e <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2207      	movs	r2, #7
 800993a:	761a      	strb	r2, [r3, #24]
      break;
 800993c:	e107      	b.n	8009b4e <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800993e:	7bbb      	ldrb	r3, [r7, #14]
 8009940:	2b04      	cmp	r3, #4
 8009942:	d003      	beq.n	800994c <USBH_HandleControl+0xcc>
 8009944:	7bbb      	ldrb	r3, [r7, #14]
 8009946:	2b02      	cmp	r3, #2
 8009948:	f040 8101 	bne.w	8009b4e <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	220b      	movs	r2, #11
 8009950:	761a      	strb	r2, [r3, #24]
      break;
 8009952:	e0fc      	b.n	8009b4e <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800995a:	b29a      	uxth	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6899      	ldr	r1, [r3, #8]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	899a      	ldrh	r2, [r3, #12]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	791b      	ldrb	r3, [r3, #4]
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 f93c 	bl	8009bea <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2204      	movs	r2, #4
 8009976:	761a      	strb	r2, [r3, #24]
      break;
 8009978:	e0f2      	b.n	8009b60 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	791b      	ldrb	r3, [r3, #4]
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f005 fca9 	bl	800f2d8 <USBH_LL_GetURBState>
 8009986:	4603      	mov	r3, r0
 8009988:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d103      	bne.n	8009998 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2209      	movs	r2, #9
 8009994:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009996:	e0dc      	b.n	8009b52 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8009998:	7bbb      	ldrb	r3, [r7, #14]
 800999a:	2b05      	cmp	r3, #5
 800999c:	d102      	bne.n	80099a4 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800999e:	2303      	movs	r3, #3
 80099a0:	73fb      	strb	r3, [r7, #15]
      break;
 80099a2:	e0d6      	b.n	8009b52 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 80099a4:	7bbb      	ldrb	r3, [r7, #14]
 80099a6:	2b04      	cmp	r3, #4
 80099a8:	f040 80d3 	bne.w	8009b52 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	220b      	movs	r2, #11
 80099b0:	761a      	strb	r2, [r3, #24]
      break;
 80099b2:	e0ce      	b.n	8009b52 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6899      	ldr	r1, [r3, #8]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	899a      	ldrh	r2, [r3, #12]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	795b      	ldrb	r3, [r3, #5]
 80099c0:	2001      	movs	r0, #1
 80099c2:	9000      	str	r0, [sp, #0]
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f8eb 	bl	8009ba0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2206      	movs	r2, #6
 80099da:	761a      	strb	r2, [r3, #24]
      break;
 80099dc:	e0c0      	b.n	8009b60 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	795b      	ldrb	r3, [r3, #5]
 80099e2:	4619      	mov	r1, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f005 fc77 	bl	800f2d8 <USBH_LL_GetURBState>
 80099ea:	4603      	mov	r3, r0
 80099ec:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80099ee:	7bbb      	ldrb	r3, [r7, #14]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d103      	bne.n	80099fc <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2207      	movs	r2, #7
 80099f8:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80099fa:	e0ac      	b.n	8009b56 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 80099fc:	7bbb      	ldrb	r3, [r7, #14]
 80099fe:	2b05      	cmp	r3, #5
 8009a00:	d105      	bne.n	8009a0e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	220c      	movs	r2, #12
 8009a06:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a0c:	e0a3      	b.n	8009b56 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d103      	bne.n	8009a1c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2205      	movs	r2, #5
 8009a18:	761a      	strb	r2, [r3, #24]
      break;
 8009a1a:	e09c      	b.n	8009b56 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8009a1c:	7bbb      	ldrb	r3, [r7, #14]
 8009a1e:	2b04      	cmp	r3, #4
 8009a20:	f040 8099 	bne.w	8009b56 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	220b      	movs	r2, #11
 8009a28:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a2e:	e092      	b.n	8009b56 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	791b      	ldrb	r3, [r3, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	2100      	movs	r1, #0
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f8d6 	bl	8009bea <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2208      	movs	r2, #8
 8009a4e:	761a      	strb	r2, [r3, #24]

      break;
 8009a50:	e086      	b.n	8009b60 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	791b      	ldrb	r3, [r3, #4]
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f005 fc3d 	bl	800f2d8 <USBH_LL_GetURBState>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009a62:	7bbb      	ldrb	r3, [r7, #14]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d105      	bne.n	8009a74 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	220d      	movs	r2, #13
 8009a6c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009a72:	e072      	b.n	8009b5a <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 8009a74:	7bbb      	ldrb	r3, [r7, #14]
 8009a76:	2b04      	cmp	r3, #4
 8009a78:	d103      	bne.n	8009a82 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	220b      	movs	r2, #11
 8009a7e:	761a      	strb	r2, [r3, #24]
      break;
 8009a80:	e06b      	b.n	8009b5a <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
 8009a84:	2b05      	cmp	r3, #5
 8009a86:	d168      	bne.n	8009b5a <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a8c:	e065      	b.n	8009b5a <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	795b      	ldrb	r3, [r3, #5]
 8009a92:	2201      	movs	r2, #1
 8009a94:	9200      	str	r2, [sp, #0]
 8009a96:	2200      	movs	r2, #0
 8009a98:	2100      	movs	r1, #0
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f880 	bl	8009ba0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	220a      	movs	r2, #10
 8009ab0:	761a      	strb	r2, [r3, #24]
      break;
 8009ab2:	e055      	b.n	8009b60 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	795b      	ldrb	r3, [r3, #5]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f005 fc0c 	bl	800f2d8 <USBH_LL_GetURBState>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d105      	bne.n	8009ad6 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 8009aca:	2300      	movs	r3, #0
 8009acc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	220d      	movs	r2, #13
 8009ad2:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009ad4:	e043      	b.n	8009b5e <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d103      	bne.n	8009ae4 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2209      	movs	r2, #9
 8009ae0:	761a      	strb	r2, [r3, #24]
      break;
 8009ae2:	e03c      	b.n	8009b5e <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8009ae4:	7bbb      	ldrb	r3, [r7, #14]
 8009ae6:	2b04      	cmp	r3, #4
 8009ae8:	d139      	bne.n	8009b5e <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	220b      	movs	r2, #11
 8009aee:	761a      	strb	r2, [r3, #24]
      break;
 8009af0:	e035      	b.n	8009b5e <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	7e5b      	ldrb	r3, [r3, #25]
 8009af6:	3301      	adds	r3, #1
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	765a      	strb	r2, [r3, #25]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	7e5b      	ldrb	r3, [r3, #25]
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d806      	bhi.n	8009b14 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009b12:	e025      	b.n	8009b60 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b1a:	2106      	movs	r1, #6
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	795b      	ldrb	r3, [r3, #5]
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f90d 	bl	8009d4c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	791b      	ldrb	r3, [r3, #4]
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 f907 	bl	8009d4c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009b44:	2302      	movs	r3, #2
 8009b46:	73fb      	strb	r3, [r7, #15]
      break;
 8009b48:	e00a      	b.n	8009b60 <USBH_HandleControl+0x2e0>

    default:
      break;
 8009b4a:	bf00      	nop
 8009b4c:	e008      	b.n	8009b60 <USBH_HandleControl+0x2e0>
      break;
 8009b4e:	bf00      	nop
 8009b50:	e006      	b.n	8009b60 <USBH_HandleControl+0x2e0>
      break;
 8009b52:	bf00      	nop
 8009b54:	e004      	b.n	8009b60 <USBH_HandleControl+0x2e0>
      break;
 8009b56:	bf00      	nop
 8009b58:	e002      	b.n	8009b60 <USBH_HandleControl+0x2e0>
      break;
 8009b5a:	bf00      	nop
 8009b5c:	e000      	b.n	8009b60 <USBH_HandleControl+0x2e0>
      break;
 8009b5e:	bf00      	nop
  }

  return status;
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop

08009b6c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b088      	sub	sp, #32
 8009b70:	af04      	add	r7, sp, #16
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	4613      	mov	r3, r2
 8009b78:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b7a:	79f9      	ldrb	r1, [r7, #7]
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	9303      	str	r3, [sp, #12]
 8009b80:	2308      	movs	r3, #8
 8009b82:	9302      	str	r3, [sp, #8]
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	9301      	str	r3, [sp, #4]
 8009b88:	2300      	movs	r3, #0
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	2200      	movs	r2, #0
 8009b90:	68f8      	ldr	r0, [r7, #12]
 8009b92:	f005 fb70 	bl	800f276 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b088      	sub	sp, #32
 8009ba4:	af04      	add	r7, sp, #16
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	4611      	mov	r1, r2
 8009bac:	461a      	mov	r2, r3
 8009bae:	460b      	mov	r3, r1
 8009bb0:	80fb      	strh	r3, [r7, #6]
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d001      	beq.n	8009bc4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009bc4:	7979      	ldrb	r1, [r7, #5]
 8009bc6:	7e3b      	ldrb	r3, [r7, #24]
 8009bc8:	9303      	str	r3, [sp, #12]
 8009bca:	88fb      	ldrh	r3, [r7, #6]
 8009bcc:	9302      	str	r3, [sp, #8]
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	9301      	str	r3, [sp, #4]
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	2200      	movs	r2, #0
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f005 fb4b 	bl	800f276 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b088      	sub	sp, #32
 8009bee:	af04      	add	r7, sp, #16
 8009bf0:	60f8      	str	r0, [r7, #12]
 8009bf2:	60b9      	str	r1, [r7, #8]
 8009bf4:	4611      	mov	r1, r2
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	80fb      	strh	r3, [r7, #6]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c00:	7979      	ldrb	r1, [r7, #5]
 8009c02:	2300      	movs	r3, #0
 8009c04:	9303      	str	r3, [sp, #12]
 8009c06:	88fb      	ldrh	r3, [r7, #6]
 8009c08:	9302      	str	r3, [sp, #8]
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	9301      	str	r3, [sp, #4]
 8009c0e:	2301      	movs	r3, #1
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	2300      	movs	r3, #0
 8009c14:	2201      	movs	r2, #1
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f005 fb2d 	bl	800f276 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009c1c:	2300      	movs	r3, #0

}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b088      	sub	sp, #32
 8009c2a:	af04      	add	r7, sp, #16
 8009c2c:	60f8      	str	r0, [r7, #12]
 8009c2e:	60b9      	str	r1, [r7, #8]
 8009c30:	4611      	mov	r1, r2
 8009c32:	461a      	mov	r2, r3
 8009c34:	460b      	mov	r3, r1
 8009c36:	80fb      	strh	r3, [r7, #6]
 8009c38:	4613      	mov	r3, r2
 8009c3a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009c46:	2300      	movs	r3, #0
 8009c48:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c4a:	7979      	ldrb	r1, [r7, #5]
 8009c4c:	7e3b      	ldrb	r3, [r7, #24]
 8009c4e:	9303      	str	r3, [sp, #12]
 8009c50:	88fb      	ldrh	r3, [r7, #6]
 8009c52:	9302      	str	r3, [sp, #8]
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	9301      	str	r3, [sp, #4]
 8009c58:	2301      	movs	r3, #1
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	2200      	movs	r2, #0
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f005 fb08 	bl	800f276 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b088      	sub	sp, #32
 8009c74:	af04      	add	r7, sp, #16
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	4611      	mov	r1, r2
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	460b      	mov	r3, r1
 8009c80:	80fb      	strh	r3, [r7, #6]
 8009c82:	4613      	mov	r3, r2
 8009c84:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c86:	7979      	ldrb	r1, [r7, #5]
 8009c88:	2300      	movs	r3, #0
 8009c8a:	9303      	str	r3, [sp, #12]
 8009c8c:	88fb      	ldrh	r3, [r7, #6]
 8009c8e:	9302      	str	r3, [sp, #8]
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	9301      	str	r3, [sp, #4]
 8009c94:	2301      	movs	r3, #1
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	2302      	movs	r3, #2
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f005 faea 	bl	800f276 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af04      	add	r7, sp, #16
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	4608      	mov	r0, r1
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	461a      	mov	r2, r3
 8009cba:	4603      	mov	r3, r0
 8009cbc:	70fb      	strb	r3, [r7, #3]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	70bb      	strb	r3, [r7, #2]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009cc6:	7878      	ldrb	r0, [r7, #1]
 8009cc8:	78ba      	ldrb	r2, [r7, #2]
 8009cca:	78f9      	ldrb	r1, [r7, #3]
 8009ccc:	8b3b      	ldrh	r3, [r7, #24]
 8009cce:	9302      	str	r3, [sp, #8]
 8009cd0:	7d3b      	ldrb	r3, [r7, #20]
 8009cd2:	9301      	str	r3, [sp, #4]
 8009cd4:	7c3b      	ldrb	r3, [r7, #16]
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	4603      	mov	r3, r0
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f005 fa8f 	bl	800f1fe <USBH_LL_OpenPipe>

  return USBH_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b082      	sub	sp, #8
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009cf6:	78fb      	ldrb	r3, [r7, #3]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f005 faae 	bl	800f25c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b084      	sub	sp, #16
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	460b      	mov	r3, r1
 8009d14:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f836 	bl	8009d88 <USBH_GetFreePipe>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009d20:	89fb      	ldrh	r3, [r7, #14]
 8009d22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d00a      	beq.n	8009d40 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009d2a:	78fa      	ldrb	r2, [r7, #3]
 8009d2c:	89fb      	ldrh	r3, [r7, #14]
 8009d2e:	f003 030f 	and.w	r3, r3, #15
 8009d32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d36:	6879      	ldr	r1, [r7, #4]
 8009d38:	33e0      	adds	r3, #224	@ 0xe0
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	440b      	add	r3, r1
 8009d3e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009d40:	89fb      	ldrh	r3, [r7, #14]
 8009d42:	b2db      	uxtb	r3, r3
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009d58:	78fb      	ldrb	r3, [r7, #3]
 8009d5a:	2b0f      	cmp	r3, #15
 8009d5c:	d80d      	bhi.n	8009d7a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009d5e:	78fb      	ldrb	r3, [r7, #3]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	33e0      	adds	r3, #224	@ 0xe0
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	685a      	ldr	r2, [r3, #4]
 8009d6a:	78fb      	ldrb	r3, [r7, #3]
 8009d6c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009d70:	6879      	ldr	r1, [r7, #4]
 8009d72:	33e0      	adds	r3, #224	@ 0xe0
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	440b      	add	r3, r1
 8009d78:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009d90:	2300      	movs	r3, #0
 8009d92:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009d94:	2300      	movs	r3, #0
 8009d96:	73fb      	strb	r3, [r7, #15]
 8009d98:	e00f      	b.n	8009dba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	33e0      	adds	r3, #224	@ 0xe0
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d102      	bne.n	8009db4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	e007      	b.n	8009dc4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009db4:	7bfb      	ldrb	r3, [r7, #15]
 8009db6:	3301      	adds	r3, #1
 8009db8:	73fb      	strb	r3, [r7, #15]
 8009dba:	7bfb      	ldrb	r3, [r7, #15]
 8009dbc:	2b0f      	cmp	r3, #15
 8009dbe:	d9ec      	bls.n	8009d9a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009dc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009dda:	79fb      	ldrb	r3, [r7, #7]
 8009ddc:	4a08      	ldr	r2, [pc, #32]	@ (8009e00 <disk_status+0x30>)
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	79fa      	ldrb	r2, [r7, #7]
 8009de8:	4905      	ldr	r1, [pc, #20]	@ (8009e00 <disk_status+0x30>)
 8009dea:	440a      	add	r2, r1
 8009dec:	7a12      	ldrb	r2, [r2, #8]
 8009dee:	4610      	mov	r0, r2
 8009df0:	4798      	blx	r3
 8009df2:	4603      	mov	r3, r0
 8009df4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	200028c8 	.word	0x200028c8

08009e04 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009e12:	79fb      	ldrb	r3, [r7, #7]
 8009e14:	4a0e      	ldr	r2, [pc, #56]	@ (8009e50 <disk_initialize+0x4c>)
 8009e16:	5cd3      	ldrb	r3, [r2, r3]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d114      	bne.n	8009e46 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009e1c:	79fb      	ldrb	r3, [r7, #7]
 8009e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8009e50 <disk_initialize+0x4c>)
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4413      	add	r3, r2
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	79fa      	ldrb	r2, [r7, #7]
 8009e2a:	4909      	ldr	r1, [pc, #36]	@ (8009e50 <disk_initialize+0x4c>)
 8009e2c:	440a      	add	r2, r1
 8009e2e:	7a12      	ldrb	r2, [r2, #8]
 8009e30:	4610      	mov	r0, r2
 8009e32:	4798      	blx	r3
 8009e34:	4603      	mov	r3, r0
 8009e36:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d103      	bne.n	8009e46 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009e3e:	79fb      	ldrb	r3, [r7, #7]
 8009e40:	4a03      	ldr	r2, [pc, #12]	@ (8009e50 <disk_initialize+0x4c>)
 8009e42:	2101      	movs	r1, #1
 8009e44:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	200028c8 	.word	0x200028c8

08009e54 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009e54:	b590      	push	{r4, r7, lr}
 8009e56:	b087      	sub	sp, #28
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60b9      	str	r1, [r7, #8]
 8009e5c:	607a      	str	r2, [r7, #4]
 8009e5e:	603b      	str	r3, [r7, #0]
 8009e60:	4603      	mov	r3, r0
 8009e62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
 8009e66:	4a0a      	ldr	r2, [pc, #40]	@ (8009e90 <disk_read+0x3c>)
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	4413      	add	r3, r2
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	689c      	ldr	r4, [r3, #8]
 8009e70:	7bfb      	ldrb	r3, [r7, #15]
 8009e72:	4a07      	ldr	r2, [pc, #28]	@ (8009e90 <disk_read+0x3c>)
 8009e74:	4413      	add	r3, r2
 8009e76:	7a18      	ldrb	r0, [r3, #8]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	68b9      	ldr	r1, [r7, #8]
 8009e7e:	47a0      	blx	r4
 8009e80:	4603      	mov	r3, r0
 8009e82:	75fb      	strb	r3, [r7, #23]
  return res;
 8009e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	371c      	adds	r7, #28
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd90      	pop	{r4, r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	200028c8 	.word	0x200028c8

08009e94 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009e94:	b590      	push	{r4, r7, lr}
 8009e96:	b087      	sub	sp, #28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60b9      	str	r1, [r7, #8]
 8009e9c:	607a      	str	r2, [r7, #4]
 8009e9e:	603b      	str	r3, [r7, #0]
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
 8009ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8009ed0 <disk_write+0x3c>)
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	68dc      	ldr	r4, [r3, #12]
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
 8009eb2:	4a07      	ldr	r2, [pc, #28]	@ (8009ed0 <disk_write+0x3c>)
 8009eb4:	4413      	add	r3, r2
 8009eb6:	7a18      	ldrb	r0, [r3, #8]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	68b9      	ldr	r1, [r7, #8]
 8009ebe:	47a0      	blx	r4
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	75fb      	strb	r3, [r7, #23]
  return res;
 8009ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	371c      	adds	r7, #28
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd90      	pop	{r4, r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	200028c8 	.word	0x200028c8

08009ed4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	4603      	mov	r3, r0
 8009edc:	603a      	str	r2, [r7, #0]
 8009ede:	71fb      	strb	r3, [r7, #7]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009ee4:	79fb      	ldrb	r3, [r7, #7]
 8009ee6:	4a09      	ldr	r2, [pc, #36]	@ (8009f0c <disk_ioctl+0x38>)
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4413      	add	r3, r2
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	79fa      	ldrb	r2, [r7, #7]
 8009ef2:	4906      	ldr	r1, [pc, #24]	@ (8009f0c <disk_ioctl+0x38>)
 8009ef4:	440a      	add	r2, r1
 8009ef6:	7a10      	ldrb	r0, [r2, #8]
 8009ef8:	79b9      	ldrb	r1, [r7, #6]
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	4798      	blx	r3
 8009efe:	4603      	mov	r3, r0
 8009f00:	73fb      	strb	r3, [r7, #15]
  return res;
 8009f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	200028c8 	.word	0x200028c8

08009f10 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009f20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009f24:	021b      	lsls	r3, r3, #8
 8009f26:	b21a      	sxth	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	b21b      	sxth	r3, r3
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	b21b      	sxth	r3, r3
 8009f32:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009f34:	89fb      	ldrh	r3, [r7, #14]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009f42:	b480      	push	{r7}
 8009f44:	b085      	sub	sp, #20
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	3303      	adds	r3, #3
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	021b      	lsls	r3, r3, #8
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	3202      	adds	r2, #2
 8009f5a:	7812      	ldrb	r2, [r2, #0]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	021b      	lsls	r3, r3, #8
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	3201      	adds	r2, #1
 8009f68:	7812      	ldrb	r2, [r2, #0]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	021b      	lsls	r3, r3, #8
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	7812      	ldrb	r2, [r2, #0]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	60fb      	str	r3, [r7, #12]
	return rv;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8009f88:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009f8c:	b09d      	sub	sp, #116	@ 0x74
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8009f92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f94:	3307      	adds	r3, #7
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	469a      	mov	sl, r3
 8009f9e:	4693      	mov	fp, r2
 8009fa0:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 8009fa4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009fa8:	f04f 0000 	mov.w	r0, #0
 8009fac:	f04f 0100 	mov.w	r1, #0
 8009fb0:	0219      	lsls	r1, r3, #8
 8009fb2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009fb6:	0210      	lsls	r0, r2, #8
 8009fb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fba:	3306      	adds	r3, #6
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	461c      	mov	r4, r3
 8009fc4:	4615      	mov	r5, r2
 8009fc6:	ea40 0804 	orr.w	r8, r0, r4
 8009fca:	ea41 0905 	orr.w	r9, r1, r5
 8009fce:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 8009fd2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009fd6:	f04f 0000 	mov.w	r0, #0
 8009fda:	f04f 0100 	mov.w	r1, #0
 8009fde:	0219      	lsls	r1, r3, #8
 8009fe0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009fe4:	0210      	lsls	r0, r2, #8
 8009fe6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fe8:	3305      	adds	r3, #5
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2200      	movs	r2, #0
 8009ff0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ff2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8009ff4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8009ff8:	4623      	mov	r3, r4
 8009ffa:	4303      	orrs	r3, r0
 8009ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ffe:	462b      	mov	r3, r5
 800a000:	430b      	orrs	r3, r1
 800a002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a004:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800a008:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 800a00c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a010:	f04f 0000 	mov.w	r0, #0
 800a014:	f04f 0100 	mov.w	r1, #0
 800a018:	0219      	lsls	r1, r3, #8
 800a01a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a01e:	0210      	lsls	r0, r2, #8
 800a020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a022:	3304      	adds	r3, #4
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	b2db      	uxtb	r3, r3
 800a028:	2200      	movs	r2, #0
 800a02a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a02c:	657a      	str	r2, [r7, #84]	@ 0x54
 800a02e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800a032:	4623      	mov	r3, r4
 800a034:	4303      	orrs	r3, r0
 800a036:	623b      	str	r3, [r7, #32]
 800a038:	462b      	mov	r3, r5
 800a03a:	430b      	orrs	r3, r1
 800a03c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a03e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a042:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800a046:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a04a:	f04f 0000 	mov.w	r0, #0
 800a04e:	f04f 0100 	mov.w	r1, #0
 800a052:	0219      	lsls	r1, r3, #8
 800a054:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a058:	0210      	lsls	r0, r2, #8
 800a05a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a05c:	3303      	adds	r3, #3
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	b2db      	uxtb	r3, r3
 800a062:	2200      	movs	r2, #0
 800a064:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a066:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a068:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800a06c:	4623      	mov	r3, r4
 800a06e:	4303      	orrs	r3, r0
 800a070:	61bb      	str	r3, [r7, #24]
 800a072:	462b      	mov	r3, r5
 800a074:	430b      	orrs	r3, r1
 800a076:	61fb      	str	r3, [r7, #28]
 800a078:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800a07c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800a080:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a084:	f04f 0000 	mov.w	r0, #0
 800a088:	f04f 0100 	mov.w	r1, #0
 800a08c:	0219      	lsls	r1, r3, #8
 800a08e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a092:	0210      	lsls	r0, r2, #8
 800a094:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a096:	3302      	adds	r3, #2
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	2200      	movs	r2, #0
 800a09e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0a0:	647a      	str	r2, [r7, #68]	@ 0x44
 800a0a2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800a0a6:	4623      	mov	r3, r4
 800a0a8:	4303      	orrs	r3, r0
 800a0aa:	613b      	str	r3, [r7, #16]
 800a0ac:	462b      	mov	r3, r5
 800a0ae:	430b      	orrs	r3, r1
 800a0b0:	617b      	str	r3, [r7, #20]
 800a0b2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a0b6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 800a0ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a0be:	f04f 0200 	mov.w	r2, #0
 800a0c2:	f04f 0300 	mov.w	r3, #0
 800a0c6:	020b      	lsls	r3, r1, #8
 800a0c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0cc:	0202      	lsls	r2, r0, #8
 800a0ce:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a0d0:	3101      	adds	r1, #1
 800a0d2:	7809      	ldrb	r1, [r1, #0]
 800a0d4:	b2c9      	uxtb	r1, r1
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a0da:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800a0dc:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	4311      	orrs	r1, r2
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	4319      	orrs	r1, r3
 800a0ea:	60f9      	str	r1, [r7, #12]
 800a0ec:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a0f0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 800a0f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a0f8:	f04f 0200 	mov.w	r2, #0
 800a0fc:	f04f 0300 	mov.w	r3, #0
 800a100:	020b      	lsls	r3, r1, #8
 800a102:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a106:	0202      	lsls	r2, r0, #8
 800a108:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a10a:	7809      	ldrb	r1, [r1, #0]
 800a10c:	b2c9      	uxtb	r1, r1
 800a10e:	2000      	movs	r0, #0
 800a110:	6339      	str	r1, [r7, #48]	@ 0x30
 800a112:	6378      	str	r0, [r7, #52]	@ 0x34
 800a114:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a118:	4621      	mov	r1, r4
 800a11a:	4311      	orrs	r1, r2
 800a11c:	6039      	str	r1, [r7, #0]
 800a11e:	4629      	mov	r1, r5
 800a120:	4319      	orrs	r1, r3
 800a122:	6079      	str	r1, [r7, #4]
 800a124:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a128:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 800a12c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800a130:	4610      	mov	r0, r2
 800a132:	4619      	mov	r1, r3
 800a134:	3774      	adds	r7, #116	@ 0x74
 800a136:	46bd      	mov	sp, r7
 800a138:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a13c:	4770      	bx	lr

0800a13e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a13e:	b480      	push	{r7}
 800a140:	b083      	sub	sp, #12
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	460b      	mov	r3, r1
 800a148:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	1c5a      	adds	r2, r3, #1
 800a14e:	607a      	str	r2, [r7, #4]
 800a150:	887a      	ldrh	r2, [r7, #2]
 800a152:	b2d2      	uxtb	r2, r2
 800a154:	701a      	strb	r2, [r3, #0]
 800a156:	887b      	ldrh	r3, [r7, #2]
 800a158:	0a1b      	lsrs	r3, r3, #8
 800a15a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	1c5a      	adds	r2, r3, #1
 800a160:	607a      	str	r2, [r7, #4]
 800a162:	887a      	ldrh	r2, [r7, #2]
 800a164:	b2d2      	uxtb	r2, r2
 800a166:	701a      	strb	r2, [r3, #0]
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	1c5a      	adds	r2, r3, #1
 800a182:	607a      	str	r2, [r7, #4]
 800a184:	683a      	ldr	r2, [r7, #0]
 800a186:	b2d2      	uxtb	r2, r2
 800a188:	701a      	strb	r2, [r3, #0]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	0a1b      	lsrs	r3, r3, #8
 800a18e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	1c5a      	adds	r2, r3, #1
 800a194:	607a      	str	r2, [r7, #4]
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	b2d2      	uxtb	r2, r2
 800a19a:	701a      	strb	r2, [r3, #0]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	0a1b      	lsrs	r3, r3, #8
 800a1a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	1c5a      	adds	r2, r3, #1
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	683a      	ldr	r2, [r7, #0]
 800a1aa:	b2d2      	uxtb	r2, r2
 800a1ac:	701a      	strb	r2, [r3, #0]
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	0a1b      	lsrs	r3, r3, #8
 800a1b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	1c5a      	adds	r2, r3, #1
 800a1b8:	607a      	str	r2, [r7, #4]
 800a1ba:	683a      	ldr	r2, [r7, #0]
 800a1bc:	b2d2      	uxtb	r2, r2
 800a1be:	701a      	strb	r2, [r3, #0]
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	60fa      	str	r2, [r7, #12]
 800a1de:	783a      	ldrb	r2, [r7, #0]
 800a1e0:	701a      	strb	r2, [r3, #0]
 800a1e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a1e6:	f04f 0200 	mov.w	r2, #0
 800a1ea:	f04f 0300 	mov.w	r3, #0
 800a1ee:	0a02      	lsrs	r2, r0, #8
 800a1f0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a1f4:	0a0b      	lsrs	r3, r1, #8
 800a1f6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	1c5a      	adds	r2, r3, #1
 800a1fe:	60fa      	str	r2, [r7, #12]
 800a200:	783a      	ldrb	r2, [r7, #0]
 800a202:	701a      	strb	r2, [r3, #0]
 800a204:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a208:	f04f 0200 	mov.w	r2, #0
 800a20c:	f04f 0300 	mov.w	r3, #0
 800a210:	0a02      	lsrs	r2, r0, #8
 800a212:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a216:	0a0b      	lsrs	r3, r1, #8
 800a218:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	1c5a      	adds	r2, r3, #1
 800a220:	60fa      	str	r2, [r7, #12]
 800a222:	783a      	ldrb	r2, [r7, #0]
 800a224:	701a      	strb	r2, [r3, #0]
 800a226:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a22a:	f04f 0200 	mov.w	r2, #0
 800a22e:	f04f 0300 	mov.w	r3, #0
 800a232:	0a02      	lsrs	r2, r0, #8
 800a234:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a238:	0a0b      	lsrs	r3, r1, #8
 800a23a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	1c5a      	adds	r2, r3, #1
 800a242:	60fa      	str	r2, [r7, #12]
 800a244:	783a      	ldrb	r2, [r7, #0]
 800a246:	701a      	strb	r2, [r3, #0]
 800a248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a24c:	f04f 0200 	mov.w	r2, #0
 800a250:	f04f 0300 	mov.w	r3, #0
 800a254:	0a02      	lsrs	r2, r0, #8
 800a256:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a25a:	0a0b      	lsrs	r3, r1, #8
 800a25c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	60fa      	str	r2, [r7, #12]
 800a266:	783a      	ldrb	r2, [r7, #0]
 800a268:	701a      	strb	r2, [r3, #0]
 800a26a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a26e:	f04f 0200 	mov.w	r2, #0
 800a272:	f04f 0300 	mov.w	r3, #0
 800a276:	0a02      	lsrs	r2, r0, #8
 800a278:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a27c:	0a0b      	lsrs	r3, r1, #8
 800a27e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	1c5a      	adds	r2, r3, #1
 800a286:	60fa      	str	r2, [r7, #12]
 800a288:	783a      	ldrb	r2, [r7, #0]
 800a28a:	701a      	strb	r2, [r3, #0]
 800a28c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a290:	f04f 0200 	mov.w	r2, #0
 800a294:	f04f 0300 	mov.w	r3, #0
 800a298:	0a02      	lsrs	r2, r0, #8
 800a29a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a29e:	0a0b      	lsrs	r3, r1, #8
 800a2a0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	60fa      	str	r2, [r7, #12]
 800a2aa:	783a      	ldrb	r2, [r7, #0]
 800a2ac:	701a      	strb	r2, [r3, #0]
 800a2ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a2b2:	f04f 0200 	mov.w	r2, #0
 800a2b6:	f04f 0300 	mov.w	r3, #0
 800a2ba:	0a02      	lsrs	r2, r0, #8
 800a2bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a2c0:	0a0b      	lsrs	r3, r1, #8
 800a2c2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	60fa      	str	r2, [r7, #12]
 800a2cc:	783a      	ldrb	r2, [r7, #0]
 800a2ce:	701a      	strb	r2, [r3, #0]
}
 800a2d0:	bf00      	nop
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a2dc:	b480      	push	{r7}
 800a2de:	b087      	sub	sp, #28
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00d      	beq.n	800a312 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	1c53      	adds	r3, r2, #1
 800a2fa:	613b      	str	r3, [r7, #16]
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	1c59      	adds	r1, r3, #1
 800a300:	6179      	str	r1, [r7, #20]
 800a302:	7812      	ldrb	r2, [r2, #0]
 800a304:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	3b01      	subs	r3, #1
 800a30a:	607b      	str	r3, [r7, #4]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1f1      	bne.n	800a2f6 <mem_cpy+0x1a>
	}
}
 800a312:	bf00      	nop
 800a314:	371c      	adds	r7, #28
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a31e:	b480      	push	{r7}
 800a320:	b087      	sub	sp, #28
 800a322:	af00      	add	r7, sp, #0
 800a324:	60f8      	str	r0, [r7, #12]
 800a326:	60b9      	str	r1, [r7, #8]
 800a328:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	1c5a      	adds	r2, r3, #1
 800a332:	617a      	str	r2, [r7, #20]
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	b2d2      	uxtb	r2, r2
 800a338:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	3b01      	subs	r3, #1
 800a33e:	607b      	str	r3, [r7, #4]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1f3      	bne.n	800a32e <mem_set+0x10>
}
 800a346:	bf00      	nop
 800a348:	bf00      	nop
 800a34a:	371c      	adds	r7, #28
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a354:	b480      	push	{r7}
 800a356:	b089      	sub	sp, #36	@ 0x24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	61fb      	str	r3, [r7, #28]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a368:	2300      	movs	r3, #0
 800a36a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	1c5a      	adds	r2, r3, #1
 800a370:	61fa      	str	r2, [r7, #28]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	4619      	mov	r1, r3
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	1c5a      	adds	r2, r3, #1
 800a37a:	61ba      	str	r2, [r7, #24]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	1acb      	subs	r3, r1, r3
 800a380:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	3b01      	subs	r3, #1
 800a386:	607b      	str	r3, [r7, #4]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d002      	beq.n	800a394 <mem_cmp+0x40>
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d0eb      	beq.n	800a36c <mem_cmp+0x18>

	return r;
 800a394:	697b      	ldr	r3, [r7, #20]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3724      	adds	r7, #36	@ 0x24
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr

0800a3a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a3a2:	b480      	push	{r7}
 800a3a4:	b083      	sub	sp, #12
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a3ac:	e002      	b.n	800a3b4 <chk_chr+0x12>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	607b      	str	r3, [r7, #4]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d005      	beq.n	800a3c8 <chk_chr+0x26>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d1f2      	bne.n	800a3ae <chk_chr+0xc>
	return *str;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60bb      	str	r3, [r7, #8]
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	60fb      	str	r3, [r7, #12]
 800a3ea:	e029      	b.n	800a440 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a3ec:	4a27      	ldr	r2, [pc, #156]	@ (800a48c <chk_lock+0xb4>)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	011b      	lsls	r3, r3, #4
 800a3f2:	4413      	add	r3, r2
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d01d      	beq.n	800a436 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a3fa:	4a24      	ldr	r2, [pc, #144]	@ (800a48c <chk_lock+0xb4>)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	011b      	lsls	r3, r3, #4
 800a400:	4413      	add	r3, r2
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d116      	bne.n	800a43a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a40c:	4a1f      	ldr	r2, [pc, #124]	@ (800a48c <chk_lock+0xb4>)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	011b      	lsls	r3, r3, #4
 800a412:	4413      	add	r3, r2
 800a414:	3304      	adds	r3, #4
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d10c      	bne.n	800a43a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a420:	4a1a      	ldr	r2, [pc, #104]	@ (800a48c <chk_lock+0xb4>)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	011b      	lsls	r3, r3, #4
 800a426:	4413      	add	r3, r2
 800a428:	3308      	adds	r3, #8
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 800a430:	429a      	cmp	r2, r3
 800a432:	d102      	bne.n	800a43a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a434:	e007      	b.n	800a446 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a436:	2301      	movs	r3, #1
 800a438:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	3301      	adds	r3, #1
 800a43e:	60fb      	str	r3, [r7, #12]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b01      	cmp	r3, #1
 800a444:	d9d2      	bls.n	800a3ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2b02      	cmp	r3, #2
 800a44a:	d109      	bne.n	800a460 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d102      	bne.n	800a458 <chk_lock+0x80>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b02      	cmp	r3, #2
 800a456:	d101      	bne.n	800a45c <chk_lock+0x84>
 800a458:	2300      	movs	r3, #0
 800a45a:	e010      	b.n	800a47e <chk_lock+0xa6>
 800a45c:	2312      	movs	r3, #18
 800a45e:	e00e      	b.n	800a47e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d108      	bne.n	800a478 <chk_lock+0xa0>
 800a466:	4a09      	ldr	r2, [pc, #36]	@ (800a48c <chk_lock+0xb4>)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	011b      	lsls	r3, r3, #4
 800a46c:	4413      	add	r3, r2
 800a46e:	330c      	adds	r3, #12
 800a470:	881b      	ldrh	r3, [r3, #0]
 800a472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a476:	d101      	bne.n	800a47c <chk_lock+0xa4>
 800a478:	2310      	movs	r3, #16
 800a47a:	e000      	b.n	800a47e <chk_lock+0xa6>
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	20002448 	.word	0x20002448

0800a490 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a496:	2300      	movs	r3, #0
 800a498:	607b      	str	r3, [r7, #4]
 800a49a:	e002      	b.n	800a4a2 <enq_lock+0x12>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	607b      	str	r3, [r7, #4]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d806      	bhi.n	800a4b6 <enq_lock+0x26>
 800a4a8:	4a09      	ldr	r2, [pc, #36]	@ (800a4d0 <enq_lock+0x40>)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	011b      	lsls	r3, r3, #4
 800a4ae:	4413      	add	r3, r2
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1f2      	bne.n	800a49c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	bf14      	ite	ne
 800a4bc:	2301      	movne	r3, #1
 800a4be:	2300      	moveq	r3, #0
 800a4c0:	b2db      	uxtb	r3, r3
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	20002448 	.word	0x20002448

0800a4d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a4de:	2300      	movs	r3, #0
 800a4e0:	60fb      	str	r3, [r7, #12]
 800a4e2:	e01f      	b.n	800a524 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a4e4:	4a41      	ldr	r2, [pc, #260]	@ (800a5ec <inc_lock+0x118>)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	011b      	lsls	r3, r3, #4
 800a4ea:	4413      	add	r3, r2
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d113      	bne.n	800a51e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a4f6:	4a3d      	ldr	r2, [pc, #244]	@ (800a5ec <inc_lock+0x118>)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	011b      	lsls	r3, r3, #4
 800a4fc:	4413      	add	r3, r2
 800a4fe:	3304      	adds	r3, #4
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a506:	429a      	cmp	r2, r3
 800a508:	d109      	bne.n	800a51e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a50a:	4a38      	ldr	r2, [pc, #224]	@ (800a5ec <inc_lock+0x118>)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	011b      	lsls	r3, r3, #4
 800a510:	4413      	add	r3, r2
 800a512:	3308      	adds	r3, #8
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d006      	beq.n	800a52c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	3301      	adds	r3, #1
 800a522:	60fb      	str	r3, [r7, #12]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d9dc      	bls.n	800a4e4 <inc_lock+0x10>
 800a52a:	e000      	b.n	800a52e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a52c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2b02      	cmp	r3, #2
 800a532:	d132      	bne.n	800a59a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a534:	2300      	movs	r3, #0
 800a536:	60fb      	str	r3, [r7, #12]
 800a538:	e002      	b.n	800a540 <inc_lock+0x6c>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	3301      	adds	r3, #1
 800a53e:	60fb      	str	r3, [r7, #12]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d806      	bhi.n	800a554 <inc_lock+0x80>
 800a546:	4a29      	ldr	r2, [pc, #164]	@ (800a5ec <inc_lock+0x118>)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	011b      	lsls	r3, r3, #4
 800a54c:	4413      	add	r3, r2
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1f2      	bne.n	800a53a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2b02      	cmp	r3, #2
 800a558:	d101      	bne.n	800a55e <inc_lock+0x8a>
 800a55a:	2300      	movs	r3, #0
 800a55c:	e040      	b.n	800a5e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	4922      	ldr	r1, [pc, #136]	@ (800a5ec <inc_lock+0x118>)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	011b      	lsls	r3, r3, #4
 800a568:	440b      	add	r3, r1
 800a56a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	689a      	ldr	r2, [r3, #8]
 800a570:	491e      	ldr	r1, [pc, #120]	@ (800a5ec <inc_lock+0x118>)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	011b      	lsls	r3, r3, #4
 800a576:	440b      	add	r3, r1
 800a578:	3304      	adds	r3, #4
 800a57a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a580:	491a      	ldr	r1, [pc, #104]	@ (800a5ec <inc_lock+0x118>)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	011b      	lsls	r3, r3, #4
 800a586:	440b      	add	r3, r1
 800a588:	3308      	adds	r3, #8
 800a58a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a58c:	4a17      	ldr	r2, [pc, #92]	@ (800a5ec <inc_lock+0x118>)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	011b      	lsls	r3, r3, #4
 800a592:	4413      	add	r3, r2
 800a594:	330c      	adds	r3, #12
 800a596:	2200      	movs	r2, #0
 800a598:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d009      	beq.n	800a5b4 <inc_lock+0xe0>
 800a5a0:	4a12      	ldr	r2, [pc, #72]	@ (800a5ec <inc_lock+0x118>)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	011b      	lsls	r3, r3, #4
 800a5a6:	4413      	add	r3, r2
 800a5a8:	330c      	adds	r3, #12
 800a5aa:	881b      	ldrh	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d001      	beq.n	800a5b4 <inc_lock+0xe0>
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	e015      	b.n	800a5e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d108      	bne.n	800a5cc <inc_lock+0xf8>
 800a5ba:	4a0c      	ldr	r2, [pc, #48]	@ (800a5ec <inc_lock+0x118>)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	011b      	lsls	r3, r3, #4
 800a5c0:	4413      	add	r3, r2
 800a5c2:	330c      	adds	r3, #12
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	e001      	b.n	800a5d0 <inc_lock+0xfc>
 800a5cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a5d0:	4906      	ldr	r1, [pc, #24]	@ (800a5ec <inc_lock+0x118>)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	011b      	lsls	r3, r3, #4
 800a5d6:	440b      	add	r3, r1
 800a5d8:	330c      	adds	r3, #12
 800a5da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	3301      	adds	r3, #1
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3714      	adds	r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	20002448 	.word	0x20002448

0800a5f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b085      	sub	sp, #20
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	607b      	str	r3, [r7, #4]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d825      	bhi.n	800a650 <dec_lock+0x60>
		n = Files[i].ctr;
 800a604:	4a17      	ldr	r2, [pc, #92]	@ (800a664 <dec_lock+0x74>)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	011b      	lsls	r3, r3, #4
 800a60a:	4413      	add	r3, r2
 800a60c:	330c      	adds	r3, #12
 800a60e:	881b      	ldrh	r3, [r3, #0]
 800a610:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a612:	89fb      	ldrh	r3, [r7, #14]
 800a614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a618:	d101      	bne.n	800a61e <dec_lock+0x2e>
 800a61a:	2300      	movs	r3, #0
 800a61c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a61e:	89fb      	ldrh	r3, [r7, #14]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d002      	beq.n	800a62a <dec_lock+0x3a>
 800a624:	89fb      	ldrh	r3, [r7, #14]
 800a626:	3b01      	subs	r3, #1
 800a628:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a62a:	4a0e      	ldr	r2, [pc, #56]	@ (800a664 <dec_lock+0x74>)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	011b      	lsls	r3, r3, #4
 800a630:	4413      	add	r3, r2
 800a632:	330c      	adds	r3, #12
 800a634:	89fa      	ldrh	r2, [r7, #14]
 800a636:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a638:	89fb      	ldrh	r3, [r7, #14]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d105      	bne.n	800a64a <dec_lock+0x5a>
 800a63e:	4a09      	ldr	r2, [pc, #36]	@ (800a664 <dec_lock+0x74>)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	011b      	lsls	r3, r3, #4
 800a644:	4413      	add	r3, r2
 800a646:	2200      	movs	r2, #0
 800a648:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	737b      	strb	r3, [r7, #13]
 800a64e:	e001      	b.n	800a654 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a650:	2302      	movs	r3, #2
 800a652:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a654:	7b7b      	ldrb	r3, [r7, #13]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3714      	adds	r7, #20
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	20002448 	.word	0x20002448

0800a668 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a670:	2300      	movs	r3, #0
 800a672:	60fb      	str	r3, [r7, #12]
 800a674:	e010      	b.n	800a698 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a676:	4a0d      	ldr	r2, [pc, #52]	@ (800a6ac <clear_lock+0x44>)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	011b      	lsls	r3, r3, #4
 800a67c:	4413      	add	r3, r2
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	429a      	cmp	r2, r3
 800a684:	d105      	bne.n	800a692 <clear_lock+0x2a>
 800a686:	4a09      	ldr	r2, [pc, #36]	@ (800a6ac <clear_lock+0x44>)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	011b      	lsls	r3, r3, #4
 800a68c:	4413      	add	r3, r2
 800a68e:	2200      	movs	r2, #0
 800a690:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3301      	adds	r3, #1
 800a696:	60fb      	str	r3, [r7, #12]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d9eb      	bls.n	800a676 <clear_lock+0xe>
	}
}
 800a69e:	bf00      	nop
 800a6a0:	bf00      	nop
 800a6a2:	3714      	adds	r7, #20
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr
 800a6ac:	20002448 	.word	0x20002448

0800a6b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	78db      	ldrb	r3, [r3, #3]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d034      	beq.n	800a72e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	7858      	ldrb	r0, [r3, #1]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	697a      	ldr	r2, [r7, #20]
 800a6d8:	f7ff fbdc 	bl	8009e94 <disk_write>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d002      	beq.n	800a6e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	73fb      	strb	r3, [r7, #15]
 800a6e6:	e022      	b.n	800a72e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f2:	697a      	ldr	r2, [r7, #20]
 800a6f4:	1ad2      	subs	r2, r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d217      	bcs.n	800a72e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	789b      	ldrb	r3, [r3, #2]
 800a702:	613b      	str	r3, [r7, #16]
 800a704:	e010      	b.n	800a728 <sync_window+0x78>
					wsect += fs->fsize;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	4413      	add	r3, r2
 800a70e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	7858      	ldrb	r0, [r3, #1]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a71a:	2301      	movs	r3, #1
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	f7ff fbb9 	bl	8009e94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	3b01      	subs	r3, #1
 800a726:	613b      	str	r3, [r7, #16]
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d8eb      	bhi.n	800a706 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a72e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3718      	adds	r7, #24
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d01b      	beq.n	800a788 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f7ff ffad 	bl	800a6b0 <sync_window>
 800a756:	4603      	mov	r3, r0
 800a758:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a75a:	7bfb      	ldrb	r3, [r7, #15]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d113      	bne.n	800a788 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	7858      	ldrb	r0, [r3, #1]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a76a:	2301      	movs	r3, #1
 800a76c:	683a      	ldr	r2, [r7, #0]
 800a76e:	f7ff fb71 	bl	8009e54 <disk_read>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d004      	beq.n	800a782 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a778:	f04f 33ff 	mov.w	r3, #4294967295
 800a77c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a77e:	2301      	movs	r3, #1
 800a780:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	683a      	ldr	r2, [r7, #0]
 800a786:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800a788:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
	...

0800a794 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f7ff ff87 	bl	800a6b0 <sync_window>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a7a6:	7bfb      	ldrb	r3, [r7, #15]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d159      	bne.n	800a860 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	2b03      	cmp	r3, #3
 800a7b2:	d149      	bne.n	800a848 <sync_fs+0xb4>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	791b      	ldrb	r3, [r3, #4]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d145      	bne.n	800a848 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	899b      	ldrh	r3, [r3, #12]
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	f7ff fda8 	bl	800a31e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	333c      	adds	r3, #60	@ 0x3c
 800a7d2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a7d6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7ff fcaf 	bl	800a13e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	333c      	adds	r3, #60	@ 0x3c
 800a7e4:	4921      	ldr	r1, [pc, #132]	@ (800a86c <sync_fs+0xd8>)
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7ff fcc4 	bl	800a174 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	333c      	adds	r3, #60	@ 0x3c
 800a7f0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a7f4:	491e      	ldr	r1, [pc, #120]	@ (800a870 <sync_fs+0xdc>)
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7ff fcbc 	bl	800a174 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	333c      	adds	r3, #60	@ 0x3c
 800a800:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	4619      	mov	r1, r3
 800a80a:	4610      	mov	r0, r2
 800a80c:	f7ff fcb2 	bl	800a174 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	333c      	adds	r3, #60	@ 0x3c
 800a814:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	699b      	ldr	r3, [r3, #24]
 800a81c:	4619      	mov	r1, r3
 800a81e:	4610      	mov	r0, r2
 800a820:	f7ff fca8 	bl	800a174 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a828:	1c5a      	adds	r2, r3, #1
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	7858      	ldrb	r0, [r3, #1]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a83c:	2301      	movs	r3, #1
 800a83e:	f7ff fb29 	bl	8009e94 <disk_write>
			fs->fsi_flag = 0;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	785b      	ldrb	r3, [r3, #1]
 800a84c:	2200      	movs	r2, #0
 800a84e:	2100      	movs	r1, #0
 800a850:	4618      	mov	r0, r3
 800a852:	f7ff fb3f 	bl	8009ed4 <disk_ioctl>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d001      	beq.n	800a860 <sync_fs+0xcc>
 800a85c:	2301      	movs	r3, #1
 800a85e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a860:	7bfb      	ldrb	r3, [r7, #15]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	41615252 	.word	0x41615252
 800a870:	61417272 	.word	0x61417272

0800a874 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	3b02      	subs	r3, #2
 800a882:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a1b      	ldr	r3, [r3, #32]
 800a888:	3b02      	subs	r3, #2
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d301      	bcc.n	800a894 <clust2sect+0x20>
 800a890:	2300      	movs	r3, #0
 800a892:	e008      	b.n	800a8a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	895b      	ldrh	r3, [r3, #10]
 800a898:	461a      	mov	r2, r3
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	fb03 f202 	mul.w	r2, r3, r2
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8a4:	4413      	add	r3, r2
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	370c      	adds	r7, #12
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
	...

0800a8b4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a8b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a8b8:	b088      	sub	sp, #32
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d904      	bls.n	800a8d6 <get_fat+0x22>
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	6a1b      	ldr	r3, [r3, #32]
 800a8d0:	683a      	ldr	r2, [r7, #0]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d302      	bcc.n	800a8dc <get_fat+0x28>
		val = 1;	/* Internal error */
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	61fb      	str	r3, [r7, #28]
 800a8da:	e139      	b.n	800ab50 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e0:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	2b03      	cmp	r3, #3
 800a8ea:	f200 8125 	bhi.w	800ab38 <get_fat+0x284>
 800a8ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a8f4 <get_fat+0x40>)
 800a8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f4:	0800a905 	.word	0x0800a905
 800a8f8:	0800a9b1 	.word	0x0800a9b1
 800a8fc:	0800a9fd 	.word	0x0800a9fd
 800a900:	0800aa4d 	.word	0x0800aa4d
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	60fb      	str	r3, [r7, #12]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	085b      	lsrs	r3, r3, #1
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	4413      	add	r3, r2
 800a910:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	899b      	ldrh	r3, [r3, #12]
 800a91a:	4619      	mov	r1, r3
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a922:	4413      	add	r3, r2
 800a924:	4619      	mov	r1, r3
 800a926:	69b8      	ldr	r0, [r7, #24]
 800a928:	f7ff ff06 	bl	800a738 <move_window>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	f040 8105 	bne.w	800ab3e <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	1c5a      	adds	r2, r3, #1
 800a938:	60fa      	str	r2, [r7, #12]
 800a93a:	69ba      	ldr	r2, [r7, #24]
 800a93c:	8992      	ldrh	r2, [r2, #12]
 800a93e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a942:	fb01 f202 	mul.w	r2, r1, r2
 800a946:	1a9b      	subs	r3, r3, r2
 800a948:	69ba      	ldr	r2, [r7, #24]
 800a94a:	4413      	add	r3, r2
 800a94c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a950:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	899b      	ldrh	r3, [r3, #12]
 800a95a:	4619      	mov	r1, r3
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a962:	4413      	add	r3, r2
 800a964:	4619      	mov	r1, r3
 800a966:	69b8      	ldr	r0, [r7, #24]
 800a968:	f7ff fee6 	bl	800a738 <move_window>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f040 80e7 	bne.w	800ab42 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	899b      	ldrh	r3, [r3, #12]
 800a978:	461a      	mov	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a980:	fb01 f202 	mul.w	r2, r1, r2
 800a984:	1a9b      	subs	r3, r3, r2
 800a986:	69ba      	ldr	r2, [r7, #24]
 800a988:	4413      	add	r3, r2
 800a98a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a98e:	021b      	lsls	r3, r3, #8
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	4313      	orrs	r3, r2
 800a994:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	f003 0301 	and.w	r3, r3, #1
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d002      	beq.n	800a9a6 <get_fat+0xf2>
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	091b      	lsrs	r3, r3, #4
 800a9a4:	e002      	b.n	800a9ac <get_fat+0xf8>
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a9ac:	61fb      	str	r3, [r7, #28]
			break;
 800a9ae:	e0cf      	b.n	800ab50 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	899b      	ldrh	r3, [r3, #12]
 800a9b8:	085b      	lsrs	r3, r3, #1
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	4619      	mov	r1, r3
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9c4:	4413      	add	r3, r2
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	69b8      	ldr	r0, [r7, #24]
 800a9ca:	f7ff feb5 	bl	800a738 <move_window>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f040 80b8 	bne.w	800ab46 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	005b      	lsls	r3, r3, #1
 800a9e0:	69ba      	ldr	r2, [r7, #24]
 800a9e2:	8992      	ldrh	r2, [r2, #12]
 800a9e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9e8:	fb00 f202 	mul.w	r2, r0, r2
 800a9ec:	1a9b      	subs	r3, r3, r2
 800a9ee:	440b      	add	r3, r1
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7ff fa8d 	bl	8009f10 <ld_word>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	61fb      	str	r3, [r7, #28]
			break;
 800a9fa:	e0a9      	b.n	800ab50 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	899b      	ldrh	r3, [r3, #12]
 800aa04:	089b      	lsrs	r3, r3, #2
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	4619      	mov	r1, r3
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa10:	4413      	add	r3, r2
 800aa12:	4619      	mov	r1, r3
 800aa14:	69b8      	ldr	r0, [r7, #24]
 800aa16:	f7ff fe8f 	bl	800a738 <move_window>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f040 8094 	bne.w	800ab4a <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	69ba      	ldr	r2, [r7, #24]
 800aa2e:	8992      	ldrh	r2, [r2, #12]
 800aa30:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa34:	fb00 f202 	mul.w	r2, r0, r2
 800aa38:	1a9b      	subs	r3, r3, r2
 800aa3a:	440b      	add	r3, r1
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7ff fa80 	bl	8009f42 <ld_dword>
 800aa42:	4603      	mov	r3, r0
 800aa44:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800aa48:	61fb      	str	r3, [r7, #28]
			break;
 800aa4a:	e081      	b.n	800ab50 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	d070      	beq.n	800ab38 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	683a      	ldr	r2, [r7, #0]
 800aa5c:	1ad3      	subs	r3, r2, r3
 800aa5e:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800aa66:	1e54      	subs	r4, r2, #1
 800aa68:	f143 35ff 	adc.w	r5, r3, #4294967295
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	899b      	ldrh	r3, [r3, #12]
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	2200      	movs	r2, #0
 800aa74:	4698      	mov	r8, r3
 800aa76:	4691      	mov	r9, r2
 800aa78:	4642      	mov	r2, r8
 800aa7a:	464b      	mov	r3, r9
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	4629      	mov	r1, r5
 800aa80:	f7f6 f8c2 	bl	8000c08 <__aeabi_uldivmod>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	895b      	ldrh	r3, [r3, #10]
 800aa8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa90:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	79db      	ldrb	r3, [r3, #7]
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d10e      	bne.n	800aab8 <get_fat+0x204>
					if (cofs <= clen) {
 800aa9a:	697a      	ldr	r2, [r7, #20]
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d80a      	bhi.n	800aab8 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d002      	beq.n	800aab0 <get_fat+0x1fc>
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	3301      	adds	r3, #1
 800aaae:	e001      	b.n	800aab4 <get_fat+0x200>
 800aab0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800aab4:	61fb      	str	r3, [r7, #28]
						break;
 800aab6:	e04b      	b.n	800ab50 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	79db      	ldrb	r3, [r3, #7]
 800aabc:	2b03      	cmp	r3, #3
 800aabe:	d108      	bne.n	800aad2 <get_fat+0x21e>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	699b      	ldr	r3, [r3, #24]
 800aac4:	697a      	ldr	r2, [r7, #20]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d203      	bcs.n	800aad2 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	3301      	adds	r3, #1
 800aace:	61fb      	str	r3, [r7, #28]
					break;
 800aad0:	e03e      	b.n	800ab50 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	79db      	ldrb	r3, [r3, #7]
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d02e      	beq.n	800ab38 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d003      	beq.n	800aaea <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800aae2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800aae6:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800aae8:	e032      	b.n	800ab50 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	899b      	ldrh	r3, [r3, #12]
 800aaf2:	089b      	lsrs	r3, r3, #2
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	fbb3 f3f1 	udiv	r3, r3, r1
 800aafe:	4413      	add	r3, r2
 800ab00:	4619      	mov	r1, r3
 800ab02:	69b8      	ldr	r0, [r7, #24]
 800ab04:	f7ff fe18 	bl	800a738 <move_window>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d11f      	bne.n	800ab4e <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	69ba      	ldr	r2, [r7, #24]
 800ab1a:	8992      	ldrh	r2, [r2, #12]
 800ab1c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab20:	fb00 f202 	mul.w	r2, r0, r2
 800ab24:	1a9b      	subs	r3, r3, r2
 800ab26:	440b      	add	r3, r1
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7ff fa0a 	bl	8009f42 <ld_dword>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ab34:	61fb      	str	r3, [r7, #28]
					break;
 800ab36:	e00b      	b.n	800ab50 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ab38:	2301      	movs	r3, #1
 800ab3a:	61fb      	str	r3, [r7, #28]
 800ab3c:	e008      	b.n	800ab50 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab3e:	bf00      	nop
 800ab40:	e006      	b.n	800ab50 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab42:	bf00      	nop
 800ab44:	e004      	b.n	800ab50 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ab46:	bf00      	nop
 800ab48:	e002      	b.n	800ab50 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ab4a:	bf00      	nop
 800ab4c:	e000      	b.n	800ab50 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ab4e:	bf00      	nop
		}
	}

	return val;
 800ab50:	69fb      	ldr	r3, [r7, #28]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3720      	adds	r7, #32
 800ab56:	46bd      	mov	sp, r7
 800ab58:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800ab5c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ab5c:	b590      	push	{r4, r7, lr}
 800ab5e:	b089      	sub	sp, #36	@ 0x24
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ab68:	2302      	movs	r3, #2
 800ab6a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	f240 810d 	bls.w	800ad8e <put_fat+0x232>
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6a1b      	ldr	r3, [r3, #32]
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	f080 8107 	bcs.w	800ad8e <put_fat+0x232>
		switch (fs->fs_type) {
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	2b04      	cmp	r3, #4
 800ab86:	f300 8102 	bgt.w	800ad8e <put_fat+0x232>
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	f280 80b3 	bge.w	800acf6 <put_fat+0x19a>
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d003      	beq.n	800ab9c <put_fat+0x40>
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	f000 8083 	beq.w	800aca0 <put_fat+0x144>
 800ab9a:	e0f8      	b.n	800ad8e <put_fat+0x232>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	61bb      	str	r3, [r7, #24]
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	085b      	lsrs	r3, r3, #1
 800aba4:	69ba      	ldr	r2, [r7, #24]
 800aba6:	4413      	add	r3, r2
 800aba8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	899b      	ldrh	r3, [r3, #12]
 800abb2:	4619      	mov	r1, r3
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	fbb3 f3f1 	udiv	r3, r3, r1
 800abba:	4413      	add	r3, r2
 800abbc:	4619      	mov	r1, r3
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f7ff fdba 	bl	800a738 <move_window>
 800abc4:	4603      	mov	r3, r0
 800abc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800abc8:	7ffb      	ldrb	r3, [r7, #31]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f040 80d8 	bne.w	800ad80 <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	1c5a      	adds	r2, r3, #1
 800abda:	61ba      	str	r2, [r7, #24]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	8992      	ldrh	r2, [r2, #12]
 800abe0:	fbb3 f0f2 	udiv	r0, r3, r2
 800abe4:	fb00 f202 	mul.w	r2, r0, r2
 800abe8:	1a9b      	subs	r3, r3, r2
 800abea:	440b      	add	r3, r1
 800abec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	f003 0301 	and.w	r3, r3, #1
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00d      	beq.n	800ac14 <put_fat+0xb8>
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	b25b      	sxtb	r3, r3
 800abfe:	f003 030f 	and.w	r3, r3, #15
 800ac02:	b25a      	sxtb	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	b25b      	sxtb	r3, r3
 800ac08:	011b      	lsls	r3, r3, #4
 800ac0a:	b25b      	sxtb	r3, r3
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	b25b      	sxtb	r3, r3
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	e001      	b.n	800ac18 <put_fat+0xbc>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	697a      	ldr	r2, [r7, #20]
 800ac1a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	899b      	ldrh	r3, [r3, #12]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac32:	4413      	add	r3, r2
 800ac34:	4619      	mov	r1, r3
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f7ff fd7e 	bl	800a738 <move_window>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac40:	7ffb      	ldrb	r3, [r7, #31]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f040 809e 	bne.w	800ad84 <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	899b      	ldrh	r3, [r3, #12]
 800ac52:	461a      	mov	r2, r3
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac5a:	fb00 f202 	mul.w	r2, r0, r2
 800ac5e:	1a9b      	subs	r3, r3, r2
 800ac60:	440b      	add	r3, r1
 800ac62:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d003      	beq.n	800ac76 <put_fat+0x11a>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	091b      	lsrs	r3, r3, #4
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	e00e      	b.n	800ac94 <put_fat+0x138>
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	b25b      	sxtb	r3, r3
 800ac7c:	f023 030f 	bic.w	r3, r3, #15
 800ac80:	b25a      	sxtb	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	0a1b      	lsrs	r3, r3, #8
 800ac86:	b25b      	sxtb	r3, r3
 800ac88:	f003 030f 	and.w	r3, r3, #15
 800ac8c:	b25b      	sxtb	r3, r3
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	b25b      	sxtb	r3, r3
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	697a      	ldr	r2, [r7, #20]
 800ac96:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	70da      	strb	r2, [r3, #3]
			break;
 800ac9e:	e076      	b.n	800ad8e <put_fat+0x232>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	899b      	ldrh	r3, [r3, #12]
 800aca8:	085b      	lsrs	r3, r3, #1
 800acaa:	b29b      	uxth	r3, r3
 800acac:	4619      	mov	r1, r3
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	fbb3 f3f1 	udiv	r3, r3, r1
 800acb4:	4413      	add	r3, r2
 800acb6:	4619      	mov	r1, r3
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	f7ff fd3d 	bl	800a738 <move_window>
 800acbe:	4603      	mov	r3, r0
 800acc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800acc2:	7ffb      	ldrb	r3, [r7, #31]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d15f      	bne.n	800ad88 <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	005b      	lsls	r3, r3, #1
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	8992      	ldrh	r2, [r2, #12]
 800acd6:	fbb3 f0f2 	udiv	r0, r3, r2
 800acda:	fb00 f202 	mul.w	r2, r0, r2
 800acde:	1a9b      	subs	r3, r3, r2
 800ace0:	440b      	add	r3, r1
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	b292      	uxth	r2, r2
 800ace6:	4611      	mov	r1, r2
 800ace8:	4618      	mov	r0, r3
 800acea:	f7ff fa28 	bl	800a13e <st_word>
			fs->wflag = 1;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2201      	movs	r2, #1
 800acf2:	70da      	strb	r2, [r3, #3]
			break;
 800acf4:	e04b      	b.n	800ad8e <put_fat+0x232>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	899b      	ldrh	r3, [r3, #12]
 800acfe:	089b      	lsrs	r3, r3, #2
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	4619      	mov	r1, r3
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad0a:	4413      	add	r3, r2
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f7ff fd12 	bl	800a738 <move_window>
 800ad14:	4603      	mov	r3, r0
 800ad16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad18:	7ffb      	ldrb	r3, [r7, #31]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d136      	bne.n	800ad8c <put_fat+0x230>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	2b04      	cmp	r3, #4
 800ad24:	d017      	beq.n	800ad56 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	8992      	ldrh	r2, [r2, #12]
 800ad3a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad3e:	fb00 f202 	mul.w	r2, r0, r2
 800ad42:	1a9b      	subs	r3, r3, r2
 800ad44:	440b      	add	r3, r1
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7ff f8fb 	bl	8009f42 <ld_dword>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ad52:	4323      	orrs	r3, r4
 800ad54:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	8992      	ldrh	r2, [r2, #12]
 800ad64:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad68:	fb00 f202 	mul.w	r2, r0, r2
 800ad6c:	1a9b      	subs	r3, r3, r2
 800ad6e:	440b      	add	r3, r1
 800ad70:	6879      	ldr	r1, [r7, #4]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7ff f9fe 	bl	800a174 <st_dword>
			fs->wflag = 1;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	70da      	strb	r2, [r3, #3]
			break;
 800ad7e:	e006      	b.n	800ad8e <put_fat+0x232>
			if (res != FR_OK) break;
 800ad80:	bf00      	nop
 800ad82:	e004      	b.n	800ad8e <put_fat+0x232>
			if (res != FR_OK) break;
 800ad84:	bf00      	nop
 800ad86:	e002      	b.n	800ad8e <put_fat+0x232>
			if (res != FR_OK) break;
 800ad88:	bf00      	nop
 800ad8a:	e000      	b.n	800ad8e <put_fat+0x232>
			if (res != FR_OK) break;
 800ad8c:	bf00      	nop
		}
	}
	return res;
 800ad8e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3724      	adds	r7, #36	@ 0x24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd90      	pop	{r4, r7, pc}

0800ad98 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b08a      	sub	sp, #40	@ 0x28
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	3b02      	subs	r3, #2
 800ada8:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6a1b      	ldr	r3, [r3, #32]
 800adae:	3b02      	subs	r3, #2
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d301      	bcc.n	800adba <find_bitmap+0x22>
 800adb6:	2300      	movs	r3, #0
 800adb8:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	61fb      	str	r3, [r7, #28]
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	61bb      	str	r3, [r7, #24]
 800adc2:	2300      	movs	r3, #0
 800adc4:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	08db      	lsrs	r3, r3, #3
 800adce:	68f9      	ldr	r1, [r7, #12]
 800add0:	8989      	ldrh	r1, [r1, #12]
 800add2:	fbb3 f3f1 	udiv	r3, r3, r1
 800add6:	4413      	add	r3, r2
 800add8:	4619      	mov	r1, r3
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	f7ff fcac 	bl	800a738 <move_window>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d002      	beq.n	800adec <find_bitmap+0x54>
 800ade6:	f04f 33ff 	mov.w	r3, #4294967295
 800adea:	e058      	b.n	800ae9e <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	08db      	lsrs	r3, r3, #3
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	8992      	ldrh	r2, [r2, #12]
 800adf4:	fbb3 f1f2 	udiv	r1, r3, r2
 800adf8:	fb01 f202 	mul.w	r2, r1, r2
 800adfc:	1a9b      	subs	r3, r3, r2
 800adfe:	623b      	str	r3, [r7, #32]
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	f003 0307 	and.w	r3, r3, #7
 800ae06:	2201      	movs	r2, #1
 800ae08:	fa02 f303 	lsl.w	r3, r2, r3
 800ae0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	6a3b      	ldr	r3, [r7, #32]
 800ae14:	4413      	add	r3, r2
 800ae16:	333c      	adds	r3, #60	@ 0x3c
 800ae18:	781a      	ldrb	r2, [r3, #0]
 800ae1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae1e:	4013      	ands	r3, r2
 800ae20:	74fb      	strb	r3, [r7, #19]
 800ae22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae26:	005b      	lsls	r3, r3, #1
 800ae28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	61fb      	str	r3, [r7, #28]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6a1b      	ldr	r3, [r3, #32]
 800ae36:	3b02      	subs	r3, #2
 800ae38:	69fa      	ldr	r2, [r7, #28]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d307      	bcc.n	800ae4e <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800ae3e:	2300      	movs	r3, #0
 800ae40:	61fb      	str	r3, [r7, #28]
 800ae42:	2300      	movs	r3, #0
 800ae44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	899b      	ldrh	r3, [r3, #12]
 800ae4c:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800ae4e:	7cfb      	ldrb	r3, [r7, #19]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d109      	bne.n	800ae68 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	3301      	adds	r3, #1
 800ae58:	617b      	str	r3, [r7, #20]
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d106      	bne.n	800ae70 <find_bitmap+0xd8>
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	3302      	adds	r3, #2
 800ae66:	e01a      	b.n	800ae9e <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	61bb      	str	r3, [r7, #24]
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800ae70:	69fa      	ldr	r2, [r7, #28]
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d101      	bne.n	800ae7c <find_bitmap+0xe4>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	e010      	b.n	800ae9e <find_bitmap+0x106>
			} while (bm);
 800ae7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1c5      	bne.n	800ae10 <find_bitmap+0x78>
			bm = 1;
 800ae84:	2301      	movs	r3, #1
 800ae86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800ae8a:	6a3b      	ldr	r3, [r7, #32]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	623b      	str	r3, [r7, #32]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	899b      	ldrh	r3, [r3, #12]
 800ae94:	461a      	mov	r2, r3
 800ae96:	6a3b      	ldr	r3, [r7, #32]
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d3b9      	bcc.n	800ae10 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800ae9c:	e793      	b.n	800adc6 <find_bitmap+0x2e>
	}
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3728      	adds	r7, #40	@ 0x28
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b088      	sub	sp, #32
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	60f8      	str	r0, [r7, #12]
 800aeae:	60b9      	str	r1, [r7, #8]
 800aeb0:	607a      	str	r2, [r7, #4]
 800aeb2:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	3b02      	subs	r3, #2
 800aeb8:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	08db      	lsrs	r3, r3, #3
 800aec2:	68f9      	ldr	r1, [r7, #12]
 800aec4:	8989      	ldrh	r1, [r1, #12]
 800aec6:	fbb3 f3f1 	udiv	r3, r3, r1
 800aeca:	4413      	add	r3, r2
 800aecc:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	08db      	lsrs	r3, r3, #3
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	8992      	ldrh	r2, [r2, #12]
 800aed6:	fbb3 f1f2 	udiv	r1, r3, r2
 800aeda:	fb01 f202 	mul.w	r2, r1, r2
 800aede:	1a9b      	subs	r3, r3, r2
 800aee0:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	f003 0307 	and.w	r3, r3, #7
 800aee8:	2201      	movs	r2, #1
 800aeea:	fa02 f303 	lsl.w	r3, r2, r3
 800aeee:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	1c5a      	adds	r2, r3, #1
 800aef4:	617a      	str	r2, [r7, #20]
 800aef6:	4619      	mov	r1, r3
 800aef8:	68f8      	ldr	r0, [r7, #12]
 800aefa:	f7ff fc1d 	bl	800a738 <move_window>
 800aefe:	4603      	mov	r3, r0
 800af00:	2b00      	cmp	r3, #0
 800af02:	d001      	beq.n	800af08 <change_bitmap+0x62>
 800af04:	2301      	movs	r3, #1
 800af06:	e03f      	b.n	800af88 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	4413      	add	r3, r2
 800af0e:	333c      	adds	r3, #60	@ 0x3c
 800af10:	781a      	ldrb	r2, [r3, #0]
 800af12:	7ffb      	ldrb	r3, [r7, #31]
 800af14:	4013      	ands	r3, r2
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b00      	cmp	r3, #0
 800af1a:	bf14      	ite	ne
 800af1c:	2301      	movne	r3, #1
 800af1e:	2300      	moveq	r3, #0
 800af20:	b2db      	uxtb	r3, r3
 800af22:	461a      	mov	r2, r3
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	4293      	cmp	r3, r2
 800af28:	d101      	bne.n	800af2e <change_bitmap+0x88>
 800af2a:	2302      	movs	r3, #2
 800af2c:	e02c      	b.n	800af88 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	4413      	add	r3, r2
 800af34:	333c      	adds	r3, #60	@ 0x3c
 800af36:	781a      	ldrb	r2, [r3, #0]
 800af38:	7ffb      	ldrb	r3, [r7, #31]
 800af3a:	4053      	eors	r3, r2
 800af3c:	b2d9      	uxtb	r1, r3
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	4413      	add	r3, r2
 800af44:	333c      	adds	r3, #60	@ 0x3c
 800af46:	460a      	mov	r2, r1
 800af48:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2201      	movs	r2, #1
 800af4e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	3b01      	subs	r3, #1
 800af54:	607b      	str	r3, [r7, #4]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d101      	bne.n	800af60 <change_bitmap+0xba>
 800af5c:	2300      	movs	r3, #0
 800af5e:	e013      	b.n	800af88 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800af60:	7ffb      	ldrb	r3, [r7, #31]
 800af62:	005b      	lsls	r3, r3, #1
 800af64:	77fb      	strb	r3, [r7, #31]
 800af66:	7ffb      	ldrb	r3, [r7, #31]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1cd      	bne.n	800af08 <change_bitmap+0x62>
			bm = 1;
 800af6c:	2301      	movs	r3, #1
 800af6e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	3301      	adds	r3, #1
 800af74:	61bb      	str	r3, [r7, #24]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	899b      	ldrh	r3, [r3, #12]
 800af7a:	461a      	mov	r2, r3
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	4293      	cmp	r3, r2
 800af80:	d3c2      	bcc.n	800af08 <change_bitmap+0x62>
		i = 0;
 800af82:	2300      	movs	r3, #0
 800af84:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800af86:	e7b3      	b.n	800aef0 <change_bitmap+0x4a>
	}
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3720      	adds	r7, #32
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	79db      	ldrb	r3, [r3, #7]
 800af9c:	2b03      	cmp	r3, #3
 800af9e:	d121      	bne.n	800afe4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	617b      	str	r3, [r7, #20]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	699b      	ldr	r3, [r3, #24]
 800afaa:	613b      	str	r3, [r7, #16]
 800afac:	e014      	b.n	800afd8 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6818      	ldr	r0, [r3, #0]
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	3301      	adds	r3, #1
 800afb6:	461a      	mov	r2, r3
 800afb8:	6979      	ldr	r1, [r7, #20]
 800afba:	f7ff fdcf 	bl	800ab5c <put_fat>
 800afbe:	4603      	mov	r3, r0
 800afc0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800afc2:	7bfb      	ldrb	r3, [r7, #15]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d001      	beq.n	800afcc <fill_first_frag+0x3c>
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
 800afca:	e00c      	b.n	800afe6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	3301      	adds	r3, #1
 800afd0:	617b      	str	r3, [r7, #20]
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	3b01      	subs	r3, #1
 800afd6:	613b      	str	r3, [r7, #16]
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1e7      	bne.n	800afae <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3718      	adds	r7, #24
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b086      	sub	sp, #24
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	60f8      	str	r0, [r7, #12]
 800aff6:	60b9      	str	r1, [r7, #8]
 800aff8:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800affa:	e020      	b.n	800b03e <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	6818      	ldr	r0, [r3, #0]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	69db      	ldr	r3, [r3, #28]
 800b004:	68ba      	ldr	r2, [r7, #8]
 800b006:	1ad3      	subs	r3, r2, r3
 800b008:	1c59      	adds	r1, r3, #1
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	69db      	ldr	r3, [r3, #28]
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d905      	bls.n	800b01e <fill_last_frag+0x30>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	69db      	ldr	r3, [r3, #28]
 800b016:	68ba      	ldr	r2, [r7, #8]
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	3302      	adds	r3, #2
 800b01c:	e000      	b.n	800b020 <fill_last_frag+0x32>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	461a      	mov	r2, r3
 800b022:	f7ff fd9b 	bl	800ab5c <put_fat>
 800b026:	4603      	mov	r3, r0
 800b028:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800b02a:	7dfb      	ldrb	r3, [r7, #23]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d001      	beq.n	800b034 <fill_last_frag+0x46>
 800b030:	7dfb      	ldrb	r3, [r7, #23]
 800b032:	e009      	b.n	800b048 <fill_last_frag+0x5a>
		obj->n_frag--;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	69db      	ldr	r3, [r3, #28]
 800b038:	1e5a      	subs	r2, r3, #1
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	69db      	ldr	r3, [r3, #28]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1da      	bne.n	800affc <fill_last_frag+0xe>
	}
	return FR_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3718      	adds	r7, #24
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b08a      	sub	sp, #40	@ 0x28
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b05c:	2300      	movs	r3, #0
 800b05e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	627b      	str	r3, [r7, #36]	@ 0x24
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	2b01      	cmp	r3, #1
 800b072:	d904      	bls.n	800b07e <remove_chain+0x2e>
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	6a1b      	ldr	r3, [r3, #32]
 800b078:	68ba      	ldr	r2, [r7, #8]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d301      	bcc.n	800b082 <remove_chain+0x32>
 800b07e:	2302      	movs	r3, #2
 800b080:	e096      	b.n	800b1b0 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d014      	beq.n	800b0b2 <remove_chain+0x62>
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	2b04      	cmp	r3, #4
 800b08e:	d103      	bne.n	800b098 <remove_chain+0x48>
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	79db      	ldrb	r3, [r3, #7]
 800b094:	2b02      	cmp	r3, #2
 800b096:	d00c      	beq.n	800b0b2 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b098:	f04f 32ff 	mov.w	r2, #4294967295
 800b09c:	6879      	ldr	r1, [r7, #4]
 800b09e:	69b8      	ldr	r0, [r7, #24]
 800b0a0:	f7ff fd5c 	bl	800ab5c <put_fat>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b0a8:	7ffb      	ldrb	r3, [r7, #31]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <remove_chain+0x62>
 800b0ae:	7ffb      	ldrb	r3, [r7, #31]
 800b0b0:	e07e      	b.n	800b1b0 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b0b2:	68b9      	ldr	r1, [r7, #8]
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f7ff fbfd 	bl	800a8b4 <get_fat>
 800b0ba:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d055      	beq.n	800b16e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d101      	bne.n	800b0cc <remove_chain+0x7c>
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	e071      	b.n	800b1b0 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d2:	d101      	bne.n	800b0d8 <remove_chain+0x88>
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	e06b      	b.n	800b1b0 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	2b04      	cmp	r3, #4
 800b0de:	d00b      	beq.n	800b0f8 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	68b9      	ldr	r1, [r7, #8]
 800b0e4:	69b8      	ldr	r0, [r7, #24]
 800b0e6:	f7ff fd39 	bl	800ab5c <put_fat>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b0ee:	7ffb      	ldrb	r3, [r7, #31]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d001      	beq.n	800b0f8 <remove_chain+0xa8>
 800b0f4:	7ffb      	ldrb	r3, [r7, #31]
 800b0f6:	e05b      	b.n	800b1b0 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	69da      	ldr	r2, [r3, #28]
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	6a1b      	ldr	r3, [r3, #32]
 800b100:	3b02      	subs	r3, #2
 800b102:	429a      	cmp	r2, r3
 800b104:	d20b      	bcs.n	800b11e <remove_chain+0xce>
			fs->free_clst++;
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	69db      	ldr	r3, [r3, #28]
 800b10a:	1c5a      	adds	r2, r3, #1
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	791b      	ldrb	r3, [r3, #4]
 800b114:	f043 0301 	orr.w	r3, r3, #1
 800b118:	b2da      	uxtb	r2, r3
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800b11e:	6a3b      	ldr	r3, [r7, #32]
 800b120:	3301      	adds	r3, #1
 800b122:	697a      	ldr	r2, [r7, #20]
 800b124:	429a      	cmp	r2, r3
 800b126:	d102      	bne.n	800b12e <remove_chain+0xde>
			ecl = nxt;
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	623b      	str	r3, [r7, #32]
 800b12c:	e017      	b.n	800b15e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	2b04      	cmp	r3, #4
 800b134:	d10f      	bne.n	800b156 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800b136:	6a3a      	ldr	r2, [r7, #32]
 800b138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b13a:	1ad3      	subs	r3, r2, r3
 800b13c:	1c5a      	adds	r2, r3, #1
 800b13e:	2300      	movs	r3, #0
 800b140:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b142:	69b8      	ldr	r0, [r7, #24]
 800b144:	f7ff feaf 	bl	800aea6 <change_bitmap>
 800b148:	4603      	mov	r3, r0
 800b14a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800b14c:	7ffb      	ldrb	r3, [r7, #31]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <remove_chain+0x106>
 800b152:	7ffb      	ldrb	r3, [r7, #31]
 800b154:	e02c      	b.n	800b1b0 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	623b      	str	r3, [r7, #32]
 800b15a:	6a3b      	ldr	r3, [r7, #32]
 800b15c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	6a1b      	ldr	r3, [r3, #32]
 800b166:	68ba      	ldr	r2, [r7, #8]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d3a2      	bcc.n	800b0b2 <remove_chain+0x62>
 800b16c:	e000      	b.n	800b170 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800b16e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	2b04      	cmp	r3, #4
 800b176:	d11a      	bne.n	800b1ae <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d103      	bne.n	800b186 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2200      	movs	r2, #0
 800b182:	71da      	strb	r2, [r3, #7]
 800b184:	e013      	b.n	800b1ae <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	79db      	ldrb	r3, [r3, #7]
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d10f      	bne.n	800b1ae <remove_chain+0x15e>
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	429a      	cmp	r2, r3
 800b196:	d30a      	bcc.n	800b1ae <remove_chain+0x15e>
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	689a      	ldr	r2, [r3, #8]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d802      	bhi.n	800b1ae <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2202      	movs	r2, #2
 800b1ac:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3728      	adds	r7, #40	@ 0x28
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b088      	sub	sp, #32
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d10d      	bne.n	800b1ea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d004      	beq.n	800b1e4 <create_chain+0x2c>
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	69ba      	ldr	r2, [r7, #24]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d31b      	bcc.n	800b21c <create_chain+0x64>
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	61bb      	str	r3, [r7, #24]
 800b1e8:	e018      	b.n	800b21c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b1ea:	6839      	ldr	r1, [r7, #0]
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f7ff fb61 	bl	800a8b4 <get_fat>
 800b1f2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d801      	bhi.n	800b1fe <create_chain+0x46>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e0d9      	b.n	800b3b2 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b204:	d101      	bne.n	800b20a <create_chain+0x52>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	e0d3      	b.n	800b3b2 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	429a      	cmp	r2, r3
 800b212:	d201      	bcs.n	800b218 <create_chain+0x60>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	e0cc      	b.n	800b3b2 <create_chain+0x1fa>
		scl = clst;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	2b04      	cmp	r3, #4
 800b222:	d164      	bne.n	800b2ee <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800b224:	2201      	movs	r2, #1
 800b226:	69b9      	ldr	r1, [r7, #24]
 800b228:	6938      	ldr	r0, [r7, #16]
 800b22a:	f7ff fdb5 	bl	800ad98 <find_bitmap>
 800b22e:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d003      	beq.n	800b23e <create_chain+0x86>
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23c:	d101      	bne.n	800b242 <create_chain+0x8a>
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	e0b7      	b.n	800b3b2 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800b242:	2301      	movs	r3, #1
 800b244:	2201      	movs	r2, #1
 800b246:	69f9      	ldr	r1, [r7, #28]
 800b248:	6938      	ldr	r0, [r7, #16]
 800b24a:	f7ff fe2c 	bl	800aea6 <change_bitmap>
 800b24e:	4603      	mov	r3, r0
 800b250:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800b252:	7dfb      	ldrb	r3, [r7, #23]
 800b254:	2b02      	cmp	r3, #2
 800b256:	d101      	bne.n	800b25c <create_chain+0xa4>
 800b258:	2301      	movs	r3, #1
 800b25a:	e0aa      	b.n	800b3b2 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800b25c:	7dfb      	ldrb	r3, [r7, #23]
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d102      	bne.n	800b268 <create_chain+0xb0>
 800b262:	f04f 33ff 	mov.w	r3, #4294967295
 800b266:	e0a4      	b.n	800b3b2 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d103      	bne.n	800b276 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2202      	movs	r2, #2
 800b272:	71da      	strb	r2, [r3, #7]
 800b274:	e011      	b.n	800b29a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	79db      	ldrb	r3, [r3, #7]
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d10d      	bne.n	800b29a <create_chain+0xe2>
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	3301      	adds	r3, #1
 800b282:	69fa      	ldr	r2, [r7, #28]
 800b284:	429a      	cmp	r2, r3
 800b286:	d008      	beq.n	800b29a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	69ba      	ldr	r2, [r7, #24]
 800b28e:	1ad2      	subs	r2, r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2203      	movs	r2, #3
 800b298:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	79db      	ldrb	r3, [r3, #7]
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d064      	beq.n	800b36c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	69fa      	ldr	r2, [r7, #28]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d10b      	bne.n	800b2c4 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	69db      	ldr	r3, [r3, #28]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d003      	beq.n	800b2bc <create_chain+0x104>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	69db      	ldr	r3, [r3, #28]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	e000      	b.n	800b2be <create_chain+0x106>
 800b2bc:	2302      	movs	r3, #2
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	61d3      	str	r3, [r2, #28]
 800b2c2:	e053      	b.n	800b36c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	69db      	ldr	r3, [r3, #28]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d102      	bne.n	800b2d2 <create_chain+0x11a>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800b2d2:	69fa      	ldr	r2, [r7, #28]
 800b2d4:	6839      	ldr	r1, [r7, #0]
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f7ff fe89 	bl	800afee <fill_last_frag>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800b2e0:	7dfb      	ldrb	r3, [r7, #23]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d142      	bne.n	800b36c <create_chain+0x1b4>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	61da      	str	r2, [r3, #28]
 800b2ec:	e03e      	b.n	800b36c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	6a1b      	ldr	r3, [r3, #32]
 800b2fc:	69fa      	ldr	r2, [r7, #28]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d307      	bcc.n	800b312 <create_chain+0x15a>
				ncl = 2;
 800b302:	2302      	movs	r3, #2
 800b304:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b306:	69fa      	ldr	r2, [r7, #28]
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d901      	bls.n	800b312 <create_chain+0x15a>
 800b30e:	2300      	movs	r3, #0
 800b310:	e04f      	b.n	800b3b2 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b312:	69f9      	ldr	r1, [r7, #28]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f7ff facd 	bl	800a8b4 <get_fat>
 800b31a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00e      	beq.n	800b340 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2b01      	cmp	r3, #1
 800b326:	d003      	beq.n	800b330 <create_chain+0x178>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b32e:	d101      	bne.n	800b334 <create_chain+0x17c>
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	e03e      	b.n	800b3b2 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800b334:	69fa      	ldr	r2, [r7, #28]
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d1da      	bne.n	800b2f2 <create_chain+0x13a>
 800b33c:	2300      	movs	r3, #0
 800b33e:	e038      	b.n	800b3b2 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800b340:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b342:	f04f 32ff 	mov.w	r2, #4294967295
 800b346:	69f9      	ldr	r1, [r7, #28]
 800b348:	6938      	ldr	r0, [r7, #16]
 800b34a:	f7ff fc07 	bl	800ab5c <put_fat>
 800b34e:	4603      	mov	r3, r0
 800b350:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b352:	7dfb      	ldrb	r3, [r7, #23]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d109      	bne.n	800b36c <create_chain+0x1b4>
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d006      	beq.n	800b36c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b35e:	69fa      	ldr	r2, [r7, #28]
 800b360:	6839      	ldr	r1, [r7, #0]
 800b362:	6938      	ldr	r0, [r7, #16]
 800b364:	f7ff fbfa 	bl	800ab5c <put_fat>
 800b368:	4603      	mov	r3, r0
 800b36a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b36c:	7dfb      	ldrb	r3, [r7, #23]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d116      	bne.n	800b3a0 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	69fa      	ldr	r2, [r7, #28]
 800b376:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	69da      	ldr	r2, [r3, #28]
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	6a1b      	ldr	r3, [r3, #32]
 800b380:	3b02      	subs	r3, #2
 800b382:	429a      	cmp	r2, r3
 800b384:	d804      	bhi.n	800b390 <create_chain+0x1d8>
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	69db      	ldr	r3, [r3, #28]
 800b38a:	1e5a      	subs	r2, r3, #1
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	791b      	ldrb	r3, [r3, #4]
 800b394:	f043 0301 	orr.w	r3, r3, #1
 800b398:	b2da      	uxtb	r2, r3
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	711a      	strb	r2, [r3, #4]
 800b39e:	e007      	b.n	800b3b0 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b3a0:	7dfb      	ldrb	r3, [r7, #23]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d102      	bne.n	800b3ac <create_chain+0x1f4>
 800b3a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b3aa:	e000      	b.n	800b3ae <create_chain+0x1f6>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b3b0:	69fb      	ldr	r3, [r7, #28]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3720      	adds	r7, #32
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b3ba:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b3be:	b088      	sub	sp, #32
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3d2:	3304      	adds	r3, #4
 800b3d4:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	899b      	ldrh	r3, [r3, #12]
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	2200      	movs	r2, #0
 800b3de:	4698      	mov	r8, r3
 800b3e0:	4691      	mov	r9, r2
 800b3e2:	4642      	mov	r2, r8
 800b3e4:	464b      	mov	r3, r9
 800b3e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b3ea:	f7f5 fc0d 	bl	8000c08 <__aeabi_uldivmod>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4610      	mov	r0, r2
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	895b      	ldrh	r3, [r3, #10]
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	461c      	mov	r4, r3
 800b400:	4615      	mov	r5, r2
 800b402:	4622      	mov	r2, r4
 800b404:	462b      	mov	r3, r5
 800b406:	f7f5 fbff 	bl	8000c08 <__aeabi_uldivmod>
 800b40a:	4602      	mov	r2, r0
 800b40c:	460b      	mov	r3, r1
 800b40e:	4613      	mov	r3, r2
 800b410:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	1d1a      	adds	r2, r3, #4
 800b416:	61ba      	str	r2, [r7, #24]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d101      	bne.n	800b426 <clmt_clust+0x6c>
 800b422:	2300      	movs	r3, #0
 800b424:	e010      	b.n	800b448 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800b426:	69fa      	ldr	r2, [r7, #28]
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d307      	bcc.n	800b43e <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800b42e:	69fa      	ldr	r2, [r7, #28]
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	1ad3      	subs	r3, r2, r3
 800b434:	61fb      	str	r3, [r7, #28]
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	3304      	adds	r3, #4
 800b43a:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b43c:	e7e9      	b.n	800b412 <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800b43e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	4413      	add	r3, r2
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3720      	adds	r7, #32
 800b44c:	46bd      	mov	sp, r7
 800b44e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b452 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b086      	sub	sp, #24
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	2b04      	cmp	r3, #4
 800b468:	d102      	bne.n	800b470 <dir_sdi+0x1e>
 800b46a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b46e:	e001      	b.n	800b474 <dir_sdi+0x22>
 800b470:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	429a      	cmp	r2, r3
 800b478:	d904      	bls.n	800b484 <dir_sdi+0x32>
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	f003 031f 	and.w	r3, r3, #31
 800b480:	2b00      	cmp	r3, #0
 800b482:	d001      	beq.n	800b488 <dir_sdi+0x36>
		return FR_INT_ERR;
 800b484:	2302      	movs	r3, #2
 800b486:	e074      	b.n	800b572 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	683a      	ldr	r2, [r7, #0]
 800b48c:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d109      	bne.n	800b4ae <dir_sdi+0x5c>
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d905      	bls.n	800b4ae <dir_sdi+0x5c>
		clst = fs->dirbase;
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4a6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d10c      	bne.n	800b4ce <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	095b      	lsrs	r3, r3, #5
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	8912      	ldrh	r2, [r2, #8]
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d301      	bcc.n	800b4c4 <dir_sdi+0x72>
 800b4c0:	2302      	movs	r3, #2
 800b4c2:	e056      	b.n	800b572 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	639a      	str	r2, [r3, #56]	@ 0x38
 800b4cc:	e02d      	b.n	800b52a <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	895b      	ldrh	r3, [r3, #10]
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	899b      	ldrh	r3, [r3, #12]
 800b4d8:	fb02 f303 	mul.w	r3, r2, r3
 800b4dc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b4de:	e019      	b.n	800b514 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6979      	ldr	r1, [r7, #20]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7ff f9e5 	bl	800a8b4 <get_fat>
 800b4ea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f2:	d101      	bne.n	800b4f8 <dir_sdi+0xa6>
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e03c      	b.n	800b572 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d904      	bls.n	800b508 <dir_sdi+0xb6>
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	6a1b      	ldr	r3, [r3, #32]
 800b502:	697a      	ldr	r2, [r7, #20]
 800b504:	429a      	cmp	r2, r3
 800b506:	d301      	bcc.n	800b50c <dir_sdi+0xba>
 800b508:	2302      	movs	r3, #2
 800b50a:	e032      	b.n	800b572 <dir_sdi+0x120>
			ofs -= csz;
 800b50c:	683a      	ldr	r2, [r7, #0]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	1ad3      	subs	r3, r2, r3
 800b512:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d2e1      	bcs.n	800b4e0 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800b51c:	6979      	ldr	r1, [r7, #20]
 800b51e:	6938      	ldr	r0, [r7, #16]
 800b520:	f7ff f9a8 	bl	800a874 <clust2sect>
 800b524:	4602      	mov	r2, r0
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	697a      	ldr	r2, [r7, #20]
 800b52e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b534:	2b00      	cmp	r3, #0
 800b536:	d101      	bne.n	800b53c <dir_sdi+0xea>
 800b538:	2302      	movs	r3, #2
 800b53a:	e01a      	b.n	800b572 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	899b      	ldrh	r3, [r3, #12]
 800b544:	4619      	mov	r1, r3
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	fbb3 f3f1 	udiv	r3, r3, r1
 800b54c:	441a      	add	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	899b      	ldrh	r3, [r3, #12]
 800b55c:	461a      	mov	r2, r3
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	fbb3 f0f2 	udiv	r0, r3, r2
 800b564:	fb00 f202 	mul.w	r2, r0, r2
 800b568:	1a9b      	subs	r3, r3, r2
 800b56a:	18ca      	adds	r2, r1, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	3718      	adds	r7, #24
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b086      	sub	sp, #24
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
 800b582:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b58e:	3320      	adds	r3, #32
 800b590:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00b      	beq.n	800b5b2 <dir_next+0x38>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	2b04      	cmp	r3, #4
 800b5a0:	d102      	bne.n	800b5a8 <dir_next+0x2e>
 800b5a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5a6:	e001      	b.n	800b5ac <dir_next+0x32>
 800b5a8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d801      	bhi.n	800b5b6 <dir_next+0x3c>
 800b5b2:	2304      	movs	r3, #4
 800b5b4:	e0c3      	b.n	800b73e <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	899b      	ldrh	r3, [r3, #12]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5c2:	fb01 f202 	mul.w	r2, r1, r2
 800b5c6:	1a9b      	subs	r3, r3, r2
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f040 80a5 	bne.w	800b718 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5d2:	1c5a      	adds	r2, r3, #1
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d10b      	bne.n	800b5f8 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	095b      	lsrs	r3, r3, #5
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	8912      	ldrh	r2, [r2, #8]
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	f0c0 8095 	bcc.w	800b718 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	639a      	str	r2, [r3, #56]	@ 0x38
 800b5f4:	2304      	movs	r3, #4
 800b5f6:	e0a2      	b.n	800b73e <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	899b      	ldrh	r3, [r3, #12]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	fbb3 f3f2 	udiv	r3, r3, r2
 800b604:	68fa      	ldr	r2, [r7, #12]
 800b606:	8952      	ldrh	r2, [r2, #10]
 800b608:	3a01      	subs	r2, #1
 800b60a:	4013      	ands	r3, r2
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f040 8083 	bne.w	800b718 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b618:	4619      	mov	r1, r3
 800b61a:	4610      	mov	r0, r2
 800b61c:	f7ff f94a 	bl	800a8b4 <get_fat>
 800b620:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d801      	bhi.n	800b62c <dir_next+0xb2>
 800b628:	2302      	movs	r3, #2
 800b62a:	e088      	b.n	800b73e <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b632:	d101      	bne.n	800b638 <dir_next+0xbe>
 800b634:	2301      	movs	r3, #1
 800b636:	e082      	b.n	800b73e <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6a1b      	ldr	r3, [r3, #32]
 800b63c:	697a      	ldr	r2, [r7, #20]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d360      	bcc.n	800b704 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d104      	bne.n	800b652 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	639a      	str	r2, [r3, #56]	@ 0x38
 800b64e:	2304      	movs	r3, #4
 800b650:	e075      	b.n	800b73e <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b658:	4619      	mov	r1, r3
 800b65a:	4610      	mov	r0, r2
 800b65c:	f7ff fdac 	bl	800b1b8 <create_chain>
 800b660:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d101      	bne.n	800b66c <dir_next+0xf2>
 800b668:	2307      	movs	r3, #7
 800b66a:	e068      	b.n	800b73e <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d101      	bne.n	800b676 <dir_next+0xfc>
 800b672:	2302      	movs	r3, #2
 800b674:	e063      	b.n	800b73e <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b67c:	d101      	bne.n	800b682 <dir_next+0x108>
 800b67e:	2301      	movs	r3, #1
 800b680:	e05d      	b.n	800b73e <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	79db      	ldrb	r3, [r3, #7]
 800b686:	f043 0304 	orr.w	r3, r3, #4
 800b68a:	b2da      	uxtb	r2, r3
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f7ff f80d 	bl	800a6b0 <sync_window>
 800b696:	4603      	mov	r3, r0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d001      	beq.n	800b6a0 <dir_next+0x126>
 800b69c:	2301      	movs	r3, #1
 800b69e:	e04e      	b.n	800b73e <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	899b      	ldrh	r3, [r3, #12]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	f7fe fe36 	bl	800a31e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	613b      	str	r3, [r7, #16]
 800b6b6:	6979      	ldr	r1, [r7, #20]
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	f7ff f8db 	bl	800a874 <clust2sect>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	639a      	str	r2, [r3, #56]	@ 0x38
 800b6c4:	e012      	b.n	800b6ec <dir_next+0x172>
						fs->wflag = 1;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f7fe ffef 	bl	800a6b0 <sync_window>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d001      	beq.n	800b6dc <dir_next+0x162>
 800b6d8:	2301      	movs	r3, #1
 800b6da:	e030      	b.n	800b73e <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	613b      	str	r3, [r7, #16]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6e6:	1c5a      	adds	r2, r3, #1
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	639a      	str	r2, [r3, #56]	@ 0x38
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	895b      	ldrh	r3, [r3, #10]
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d3e6      	bcc.n	800b6c6 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	1ad2      	subs	r2, r2, r3
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800b70a:	6979      	ldr	r1, [r7, #20]
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f7ff f8b1 	bl	800a874 <clust2sect>
 800b712:	4602      	mov	r2, r0
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	899b      	ldrh	r3, [r3, #12]
 800b728:	461a      	mov	r2, r3
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b730:	fb00 f202 	mul.w	r2, r0, r2
 800b734:	1a9b      	subs	r3, r3, r2
 800b736:	18ca      	adds	r2, r1, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3718      	adds	r7, #24
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b086      	sub	sp, #24
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b756:	2100      	movs	r1, #0
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f7ff fe7a 	bl	800b452 <dir_sdi>
 800b75e:	4603      	mov	r3, r0
 800b760:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b762:	7dfb      	ldrb	r3, [r7, #23]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d140      	bne.n	800b7ea <dir_alloc+0xa4>
		n = 0;
 800b768:	2300      	movs	r3, #0
 800b76a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b770:	4619      	mov	r1, r3
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f7fe ffe0 	bl	800a738 <move_window>
 800b778:	4603      	mov	r3, r0
 800b77a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b77c:	7dfb      	ldrb	r3, [r7, #23]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d132      	bne.n	800b7e8 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	2b04      	cmp	r3, #4
 800b788:	d108      	bne.n	800b79c <dir_alloc+0x56>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	b25b      	sxtb	r3, r3
 800b792:	43db      	mvns	r3, r3
 800b794:	b2db      	uxtb	r3, r3
 800b796:	09db      	lsrs	r3, r3, #7
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	e00f      	b.n	800b7bc <dir_alloc+0x76>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	2be5      	cmp	r3, #229	@ 0xe5
 800b7a4:	d004      	beq.n	800b7b0 <dir_alloc+0x6a>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d101      	bne.n	800b7b4 <dir_alloc+0x6e>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e000      	b.n	800b7b6 <dir_alloc+0x70>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	f003 0301 	and.w	r3, r3, #1
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d007      	beq.n	800b7d0 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	613b      	str	r3, [r7, #16]
 800b7c6:	693a      	ldr	r2, [r7, #16]
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d102      	bne.n	800b7d4 <dir_alloc+0x8e>
 800b7ce:	e00c      	b.n	800b7ea <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f7ff fecf 	bl	800b57a <dir_next>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b7e0:	7dfb      	ldrb	r3, [r7, #23]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d0c2      	beq.n	800b76c <dir_alloc+0x26>
 800b7e6:	e000      	b.n	800b7ea <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800b7e8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b7ea:	7dfb      	ldrb	r3, [r7, #23]
 800b7ec:	2b04      	cmp	r3, #4
 800b7ee:	d101      	bne.n	800b7f4 <dir_alloc+0xae>
 800b7f0:	2307      	movs	r3, #7
 800b7f2:	75fb      	strb	r3, [r7, #23]
	return res;
 800b7f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3718      	adds	r7, #24
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b084      	sub	sp, #16
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
 800b806:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	331a      	adds	r3, #26
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7fe fb7f 	bl	8009f10 <ld_word>
 800b812:	4603      	mov	r3, r0
 800b814:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	2b03      	cmp	r3, #3
 800b81c:	d109      	bne.n	800b832 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	3314      	adds	r3, #20
 800b822:	4618      	mov	r0, r3
 800b824:	f7fe fb74 	bl	8009f10 <ld_word>
 800b828:	4603      	mov	r3, r0
 800b82a:	041b      	lsls	r3, r3, #16
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	4313      	orrs	r3, r2
 800b830:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b832:	68fb      	ldr	r3, [r7, #12]
}
 800b834:	4618      	mov	r0, r3
 800b836:	3710      	adds	r7, #16
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	331a      	adds	r3, #26
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	b292      	uxth	r2, r2
 800b850:	4611      	mov	r1, r2
 800b852:	4618      	mov	r0, r3
 800b854:	f7fe fc73 	bl	800a13e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	2b03      	cmp	r3, #3
 800b85e:	d109      	bne.n	800b874 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	f103 0214 	add.w	r2, r3, #20
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	0c1b      	lsrs	r3, r3, #16
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	4619      	mov	r1, r3
 800b86e:	4610      	mov	r0, r2
 800b870:	f7fe fc65 	bl	800a13e <st_word>
	}
}
 800b874:	bf00      	nop
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b87c:	b590      	push	{r4, r7, lr}
 800b87e:	b087      	sub	sp, #28
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	331a      	adds	r3, #26
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fe fb40 	bl	8009f10 <ld_word>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d001      	beq.n	800b89a <cmp_lfn+0x1e>
 800b896:	2300      	movs	r3, #0
 800b898:	e059      	b.n	800b94e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b8a2:	1e5a      	subs	r2, r3, #1
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	005b      	lsls	r3, r3, #1
 800b8a8:	4413      	add	r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	4413      	add	r3, r2
 800b8ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	81fb      	strh	r3, [r7, #14]
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	613b      	str	r3, [r7, #16]
 800b8b8:	e033      	b.n	800b922 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b8ba:	4a27      	ldr	r2, [pc, #156]	@ (800b958 <cmp_lfn+0xdc>)
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	4413      	add	r3, r2
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fe fb21 	bl	8009f10 <ld_word>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b8d2:	89fb      	ldrh	r3, [r7, #14]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d01a      	beq.n	800b90e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	2bfe      	cmp	r3, #254	@ 0xfe
 800b8dc:	d812      	bhi.n	800b904 <cmp_lfn+0x88>
 800b8de:	89bb      	ldrh	r3, [r7, #12]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f003 fa1d 	bl	800ed20 <ff_wtoupper>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	461c      	mov	r4, r3
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	1c5a      	adds	r2, r3, #1
 800b8ee:	617a      	str	r2, [r7, #20]
 800b8f0:	005b      	lsls	r3, r3, #1
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f003 fa11 	bl	800ed20 <ff_wtoupper>
 800b8fe:	4603      	mov	r3, r0
 800b900:	429c      	cmp	r4, r3
 800b902:	d001      	beq.n	800b908 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b904:	2300      	movs	r3, #0
 800b906:	e022      	b.n	800b94e <cmp_lfn+0xd2>
			}
			wc = uc;
 800b908:	89bb      	ldrh	r3, [r7, #12]
 800b90a:	81fb      	strh	r3, [r7, #14]
 800b90c:	e006      	b.n	800b91c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b90e:	89bb      	ldrh	r3, [r7, #12]
 800b910:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b914:	4293      	cmp	r3, r2
 800b916:	d001      	beq.n	800b91c <cmp_lfn+0xa0>
 800b918:	2300      	movs	r3, #0
 800b91a:	e018      	b.n	800b94e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	3301      	adds	r3, #1
 800b920:	613b      	str	r3, [r7, #16]
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	2b0c      	cmp	r3, #12
 800b926:	d9c8      	bls.n	800b8ba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00b      	beq.n	800b94c <cmp_lfn+0xd0>
 800b934:	89fb      	ldrh	r3, [r7, #14]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d008      	beq.n	800b94c <cmp_lfn+0xd0>
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	005b      	lsls	r3, r3, #1
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	4413      	add	r3, r2
 800b942:	881b      	ldrh	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d001      	beq.n	800b94c <cmp_lfn+0xd0>
 800b948:	2300      	movs	r3, #0
 800b94a:	e000      	b.n	800b94e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b94c:	2301      	movs	r3, #1
}
 800b94e:	4618      	mov	r0, r3
 800b950:	371c      	adds	r7, #28
 800b952:	46bd      	mov	sp, r7
 800b954:	bd90      	pop	{r4, r7, pc}
 800b956:	bf00      	nop
 800b958:	0801285c 	.word	0x0801285c

0800b95c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b086      	sub	sp, #24
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	331a      	adds	r3, #26
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fe fad0 	bl	8009f10 <ld_word>
 800b970:	4603      	mov	r3, r0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d001      	beq.n	800b97a <pick_lfn+0x1e>
 800b976:	2300      	movs	r3, #0
 800b978:	e04d      	b.n	800ba16 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b982:	1e5a      	subs	r2, r3, #1
 800b984:	4613      	mov	r3, r2
 800b986:	005b      	lsls	r3, r3, #1
 800b988:	4413      	add	r3, r2
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	4413      	add	r3, r2
 800b98e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b990:	2301      	movs	r3, #1
 800b992:	81fb      	strh	r3, [r7, #14]
 800b994:	2300      	movs	r3, #0
 800b996:	613b      	str	r3, [r7, #16]
 800b998:	e028      	b.n	800b9ec <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b99a:	4a21      	ldr	r2, [pc, #132]	@ (800ba20 <pick_lfn+0xc4>)
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	4413      	add	r3, r2
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7fe fab1 	bl	8009f10 <ld_word>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b9b2:	89fb      	ldrh	r3, [r7, #14]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00f      	beq.n	800b9d8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	2bfe      	cmp	r3, #254	@ 0xfe
 800b9bc:	d901      	bls.n	800b9c2 <pick_lfn+0x66>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	e029      	b.n	800ba16 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b9c2:	89bb      	ldrh	r3, [r7, #12]
 800b9c4:	81fb      	strh	r3, [r7, #14]
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	1c5a      	adds	r2, r3, #1
 800b9ca:	617a      	str	r2, [r7, #20]
 800b9cc:	005b      	lsls	r3, r3, #1
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	89fa      	ldrh	r2, [r7, #14]
 800b9d4:	801a      	strh	r2, [r3, #0]
 800b9d6:	e006      	b.n	800b9e6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b9d8:	89bb      	ldrh	r3, [r7, #12]
 800b9da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d001      	beq.n	800b9e6 <pick_lfn+0x8a>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	e017      	b.n	800ba16 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	613b      	str	r3, [r7, #16]
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	2b0c      	cmp	r3, #12
 800b9f0:	d9d3      	bls.n	800b99a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00a      	beq.n	800ba14 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	2bfe      	cmp	r3, #254	@ 0xfe
 800ba02:	d901      	bls.n	800ba08 <pick_lfn+0xac>
 800ba04:	2300      	movs	r3, #0
 800ba06:	e006      	b.n	800ba16 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	005b      	lsls	r3, r3, #1
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	4413      	add	r3, r2
 800ba10:	2200      	movs	r2, #0
 800ba12:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ba14:	2301      	movs	r3, #1
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3718      	adds	r7, #24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	0801285c 	.word	0x0801285c

0800ba24 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b088      	sub	sp, #32
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	4611      	mov	r1, r2
 800ba30:	461a      	mov	r2, r3
 800ba32:	460b      	mov	r3, r1
 800ba34:	71fb      	strb	r3, [r7, #7]
 800ba36:	4613      	mov	r3, r2
 800ba38:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	330d      	adds	r3, #13
 800ba3e:	79ba      	ldrb	r2, [r7, #6]
 800ba40:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	330b      	adds	r3, #11
 800ba46:	220f      	movs	r2, #15
 800ba48:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	330c      	adds	r3, #12
 800ba4e:	2200      	movs	r2, #0
 800ba50:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	331a      	adds	r3, #26
 800ba56:	2100      	movs	r1, #0
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7fe fb70 	bl	800a13e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ba5e:	79fb      	ldrb	r3, [r7, #7]
 800ba60:	1e5a      	subs	r2, r3, #1
 800ba62:	4613      	mov	r3, r2
 800ba64:	005b      	lsls	r3, r3, #1
 800ba66:	4413      	add	r3, r2
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	4413      	add	r3, r2
 800ba6c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	82fb      	strh	r3, [r7, #22]
 800ba72:	2300      	movs	r3, #0
 800ba74:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ba76:	8afb      	ldrh	r3, [r7, #22]
 800ba78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d007      	beq.n	800ba90 <put_lfn+0x6c>
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	1c5a      	adds	r2, r3, #1
 800ba84:	61fa      	str	r2, [r7, #28]
 800ba86:	005b      	lsls	r3, r3, #1
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	881b      	ldrh	r3, [r3, #0]
 800ba8e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ba90:	4a17      	ldr	r2, [pc, #92]	@ (800baf0 <put_lfn+0xcc>)
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	4413      	add	r3, r2
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	8afa      	ldrh	r2, [r7, #22]
 800baa0:	4611      	mov	r1, r2
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fe fb4b 	bl	800a13e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800baa8:	8afb      	ldrh	r3, [r7, #22]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d102      	bne.n	800bab4 <put_lfn+0x90>
 800baae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bab2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	3301      	adds	r3, #1
 800bab8:	61bb      	str	r3, [r7, #24]
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	2b0c      	cmp	r3, #12
 800babe:	d9da      	bls.n	800ba76 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bac0:	8afb      	ldrh	r3, [r7, #22]
 800bac2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d006      	beq.n	800bad8 <put_lfn+0xb4>
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	005b      	lsls	r3, r3, #1
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	4413      	add	r3, r2
 800bad2:	881b      	ldrh	r3, [r3, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d103      	bne.n	800bae0 <put_lfn+0xbc>
 800bad8:	79fb      	ldrb	r3, [r7, #7]
 800bada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bade:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	79fa      	ldrb	r2, [r7, #7]
 800bae4:	701a      	strb	r2, [r3, #0]
}
 800bae6:	bf00      	nop
 800bae8:	3720      	adds	r7, #32
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	0801285c 	.word	0x0801285c

0800baf4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b08c      	sub	sp, #48	@ 0x30
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	607a      	str	r2, [r7, #4]
 800bb00:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bb02:	220b      	movs	r2, #11
 800bb04:	68b9      	ldr	r1, [r7, #8]
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f7fe fbe8 	bl	800a2dc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	2b05      	cmp	r3, #5
 800bb10:	d92b      	bls.n	800bb6a <gen_numname+0x76>
		sr = seq;
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bb16:	e022      	b.n	800bb5e <gen_numname+0x6a>
			wc = *lfn++;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	1c9a      	adds	r2, r3, #2
 800bb1c:	607a      	str	r2, [r7, #4]
 800bb1e:	881b      	ldrh	r3, [r3, #0]
 800bb20:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800bb22:	2300      	movs	r3, #0
 800bb24:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb26:	e017      	b.n	800bb58 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	005a      	lsls	r2, r3, #1
 800bb2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bb2e:	f003 0301 	and.w	r3, r3, #1
 800bb32:	4413      	add	r3, r2
 800bb34:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bb36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bb38:	085b      	lsrs	r3, r3, #1
 800bb3a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d005      	beq.n	800bb52 <gen_numname+0x5e>
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800bb4c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800bb50:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bb52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb54:	3301      	adds	r3, #1
 800bb56:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb5a:	2b0f      	cmp	r3, #15
 800bb5c:	d9e4      	bls.n	800bb28 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	881b      	ldrh	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1d8      	bne.n	800bb18 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bb6a:	2307      	movs	r3, #7
 800bb6c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	f003 030f 	and.w	r3, r3, #15
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	3330      	adds	r3, #48	@ 0x30
 800bb7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800bb7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb82:	2b39      	cmp	r3, #57	@ 0x39
 800bb84:	d904      	bls.n	800bb90 <gen_numname+0x9c>
 800bb86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb8a:	3307      	adds	r3, #7
 800bb8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800bb90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb92:	1e5a      	subs	r2, r3, #1
 800bb94:	62ba      	str	r2, [r7, #40]	@ 0x28
 800bb96:	3330      	adds	r3, #48	@ 0x30
 800bb98:	443b      	add	r3, r7
 800bb9a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800bb9e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	091b      	lsrs	r3, r3, #4
 800bba6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d1df      	bne.n	800bb6e <gen_numname+0x7a>
	ns[i] = '~';
 800bbae:	f107 0214 	add.w	r2, r7, #20
 800bbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb4:	4413      	add	r3, r2
 800bbb6:	227e      	movs	r2, #126	@ 0x7e
 800bbb8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bbba:	2300      	movs	r3, #0
 800bbbc:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbbe:	e002      	b.n	800bbc6 <gen_numname+0xd2>
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d205      	bcs.n	800bbda <gen_numname+0xe6>
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd2:	4413      	add	r3, r2
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	2b20      	cmp	r3, #32
 800bbd8:	d1f2      	bne.n	800bbc0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bbda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbdc:	2b07      	cmp	r3, #7
 800bbde:	d807      	bhi.n	800bbf0 <gen_numname+0xfc>
 800bbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe2:	1c5a      	adds	r2, r3, #1
 800bbe4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800bbe6:	3330      	adds	r3, #48	@ 0x30
 800bbe8:	443b      	add	r3, r7
 800bbea:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bbee:	e000      	b.n	800bbf2 <gen_numname+0xfe>
 800bbf0:	2120      	movs	r1, #32
 800bbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf4:	1c5a      	adds	r2, r3, #1
 800bbf6:	627a      	str	r2, [r7, #36]	@ 0x24
 800bbf8:	68fa      	ldr	r2, [r7, #12]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	460a      	mov	r2, r1
 800bbfe:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc02:	2b07      	cmp	r3, #7
 800bc04:	d9e9      	bls.n	800bbda <gen_numname+0xe6>
}
 800bc06:	bf00      	nop
 800bc08:	bf00      	nop
 800bc0a:	3730      	adds	r7, #48	@ 0x30
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bc1c:	230b      	movs	r3, #11
 800bc1e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bc20:	7bfb      	ldrb	r3, [r7, #15]
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	0852      	lsrs	r2, r2, #1
 800bc26:	01db      	lsls	r3, r3, #7
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	b2da      	uxtb	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	1c59      	adds	r1, r3, #1
 800bc30:	6079      	str	r1, [r7, #4]
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	4413      	add	r3, r2
 800bc36:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	60bb      	str	r3, [r7, #8]
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d1ed      	bne.n	800bc20 <sum_sfn+0x10>
	return sum;
 800bc44:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3714      	adds	r7, #20
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800bc52:	b480      	push	{r7}
 800bc54:	b087      	sub	sp, #28
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	3301      	adds	r3, #1
 800bc62:	015b      	lsls	r3, r3, #5
 800bc64:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800bc66:	2300      	movs	r3, #0
 800bc68:	827b      	strh	r3, [r7, #18]
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	617b      	str	r3, [r7, #20]
 800bc6e:	e015      	b.n	800bc9c <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	2b02      	cmp	r3, #2
 800bc74:	d103      	bne.n	800bc7e <xdir_sum+0x2c>
			i++;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	617b      	str	r3, [r7, #20]
 800bc7c:	e00b      	b.n	800bc96 <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800bc7e:	8a7b      	ldrh	r3, [r7, #18]
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	0852      	lsrs	r2, r2, #1
 800bc84:	03db      	lsls	r3, r3, #15
 800bc86:	4313      	orrs	r3, r2
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	6879      	ldr	r1, [r7, #4]
 800bc8c:	697a      	ldr	r2, [r7, #20]
 800bc8e:	440a      	add	r2, r1
 800bc90:	7812      	ldrb	r2, [r2, #0]
 800bc92:	4413      	add	r3, r2
 800bc94:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	617b      	str	r3, [r7, #20]
 800bc9c:	697a      	ldr	r2, [r7, #20]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d3e5      	bcc.n	800bc70 <xdir_sum+0x1e>
		}
	}
	return sum;
 800bca4:	8a7b      	ldrh	r3, [r7, #18]
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	371c      	adds	r7, #28
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr

0800bcb2 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b084      	sub	sp, #16
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800bcbe:	e01b      	b.n	800bcf8 <xname_sum+0x46>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800bcc0:	89bb      	ldrh	r3, [r7, #12]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f003 f82c 	bl	800ed20 <ff_wtoupper>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800bccc:	89fb      	ldrh	r3, [r7, #14]
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	0852      	lsrs	r2, r2, #1
 800bcd2:	03db      	lsls	r3, r3, #15
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	b29a      	uxth	r2, r3
 800bcd8:	89bb      	ldrh	r3, [r7, #12]
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	4413      	add	r3, r2
 800bce0:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800bce2:	89fb      	ldrh	r3, [r7, #14]
 800bce4:	b29a      	uxth	r2, r3
 800bce6:	0852      	lsrs	r2, r2, #1
 800bce8:	03db      	lsls	r3, r3, #15
 800bcea:	4313      	orrs	r3, r2
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	89bb      	ldrh	r3, [r7, #12]
 800bcf0:	0a1b      	lsrs	r3, r3, #8
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	4413      	add	r3, r2
 800bcf6:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	1c9a      	adds	r2, r3, #2
 800bcfc:	607a      	str	r2, [r7, #4]
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	81bb      	strh	r3, [r7, #12]
 800bd02:	89bb      	ldrh	r3, [r7, #12]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d1db      	bne.n	800bcc0 <xname_sum+0xe>
	}
	return sum;
 800bd08:	89fb      	ldrh	r3, [r7, #14]
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b086      	sub	sp, #24
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
 800bd1a:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800bd20:	2340      	movs	r3, #64	@ 0x40
 800bd22:	613b      	str	r3, [r7, #16]
 800bd24:	2300      	movs	r3, #0
 800bd26:	60fb      	str	r3, [r7, #12]
 800bd28:	e02c      	b.n	800bd84 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	f003 031f 	and.w	r3, r3, #31
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d102      	bne.n	800bd3a <get_xdir_info+0x28>
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	3302      	adds	r3, #2
 800bd38:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	4413      	add	r3, r2
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7fe f8e5 	bl	8009f10 <ld_word>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2100      	movs	r1, #0
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f002 ffac 	bl	800eca8 <ff_convert>
 800bd50:	4603      	mov	r3, r0
 800bd52:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800bd54:	897b      	ldrh	r3, [r7, #10]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d002      	beq.n	800bd60 <get_xdir_info+0x4e>
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	2bfe      	cmp	r3, #254	@ 0xfe
 800bd5e:	d902      	bls.n	800bd66 <get_xdir_info+0x54>
 800bd60:	2300      	movs	r3, #0
 800bd62:	617b      	str	r3, [r7, #20]
 800bd64:	e015      	b.n	800bd92 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	1c5a      	adds	r2, r3, #1
 800bd6a:	617a      	str	r2, [r7, #20]
 800bd6c:	897a      	ldrh	r2, [r7, #10]
 800bd6e:	b2d1      	uxtb	r1, r2
 800bd70:	683a      	ldr	r2, [r7, #0]
 800bd72:	4413      	add	r3, r2
 800bd74:	460a      	mov	r2, r1
 800bd76:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	3302      	adds	r3, #2
 800bd7c:	613b      	str	r3, [r7, #16]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	3301      	adds	r3, #1
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	3323      	adds	r3, #35	@ 0x23
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d3cb      	bcc.n	800bd2a <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d106      	bne.n	800bda6 <get_xdir_info+0x94>
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	617a      	str	r2, [r7, #20]
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	4413      	add	r3, r2
 800bda2:	223f      	movs	r2, #63	@ 0x3f
 800bda4:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800bda6:	683a      	ldr	r2, [r7, #0]
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	4413      	add	r3, r2
 800bdac:	331a      	adds	r3, #26
 800bdae:	2200      	movs	r2, #0
 800bdb0:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	791a      	ldrb	r2, [r3, #4]
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	7b1b      	ldrb	r3, [r3, #12]
 800bdc4:	f003 0310 	and.w	r3, r3, #16
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d107      	bne.n	800bddc <get_xdir_info+0xca>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	3338      	adds	r3, #56	@ 0x38
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7fe f8d9 	bl	8009f88 <ld_qword>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	460b      	mov	r3, r1
 800bdda:	e003      	b.n	800bde4 <get_xdir_info+0xd2>
 800bddc:	f04f 0200 	mov.w	r2, #0
 800bde0:	f04f 0300 	mov.w	r3, #0
 800bde4:	6839      	ldr	r1, [r7, #0]
 800bde6:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	330c      	adds	r3, #12
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7fe f88e 	bl	8009f10 <ld_word>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	330e      	adds	r3, #14
 800be00:	4618      	mov	r0, r3
 800be02:	f7fe f885 	bl	8009f10 <ld_word>
 800be06:	4603      	mov	r3, r0
 800be08:	461a      	mov	r2, r3
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	811a      	strh	r2, [r3, #8]
}
 800be0e:	bf00      	nop
 800be10:	3718      	adds	r7, #24
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
	...

0800be18 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800be18:	b590      	push	{r4, r7, lr}
 800be1a:	b087      	sub	sp, #28
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	695b      	ldr	r3, [r3, #20]
 800be26:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be30:	4619      	mov	r1, r3
 800be32:	4610      	mov	r0, r2
 800be34:	f7fe fc80 	bl	800a738 <move_window>
 800be38:	4603      	mov	r3, r0
 800be3a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800be3c:	7bfb      	ldrb	r3, [r7, #15]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d001      	beq.n	800be46 <load_xdir+0x2e>
 800be42:	7bfb      	ldrb	r3, [r7, #15]
 800be44:	e09f      	b.n	800bf86 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	2b85      	cmp	r3, #133	@ 0x85
 800be4e:	d001      	beq.n	800be54 <load_xdir+0x3c>
 800be50:	2302      	movs	r3, #2
 800be52:	e098      	b.n	800bf86 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be58:	2220      	movs	r2, #32
 800be5a:	4619      	mov	r1, r3
 800be5c:	6938      	ldr	r0, [r7, #16]
 800be5e:	f7fe fa3d 	bl	800a2dc <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	3301      	adds	r3, #1
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	3301      	adds	r3, #1
 800be6a:	015b      	lsls	r3, r3, #5
 800be6c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	2b5f      	cmp	r3, #95	@ 0x5f
 800be72:	d903      	bls.n	800be7c <load_xdir+0x64>
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800be7a:	d901      	bls.n	800be80 <load_xdir+0x68>
 800be7c:	2302      	movs	r3, #2
 800be7e:	e082      	b.n	800bf86 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800be80:	2100      	movs	r1, #0
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7ff fb79 	bl	800b57a <dir_next>
 800be88:	4603      	mov	r3, r0
 800be8a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800be8c:	7bfb      	ldrb	r3, [r7, #15]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d001      	beq.n	800be96 <load_xdir+0x7e>
 800be92:	7bfb      	ldrb	r3, [r7, #15]
 800be94:	e077      	b.n	800bf86 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681a      	ldr	r2, [r3, #0]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be9e:	4619      	mov	r1, r3
 800bea0:	4610      	mov	r0, r2
 800bea2:	f7fe fc49 	bl	800a738 <move_window>
 800bea6:	4603      	mov	r3, r0
 800bea8:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800beaa:	7bfb      	ldrb	r3, [r7, #15]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d001      	beq.n	800beb4 <load_xdir+0x9c>
 800beb0:	7bfb      	ldrb	r3, [r7, #15]
 800beb2:	e068      	b.n	800bf86 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	2bc0      	cmp	r3, #192	@ 0xc0
 800bebc:	d001      	beq.n	800bec2 <load_xdir+0xaa>
 800bebe:	2302      	movs	r3, #2
 800bec0:	e061      	b.n	800bf86 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	f103 0020 	add.w	r0, r3, #32
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800becc:	2220      	movs	r2, #32
 800bece:	4619      	mov	r1, r3
 800bed0:	f7fe fa04 	bl	800a2dc <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	3323      	adds	r3, #35	@ 0x23
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	332c      	adds	r3, #44	@ 0x2c
 800bedc:	4a2c      	ldr	r2, [pc, #176]	@ (800bf90 <load_xdir+0x178>)
 800bede:	fba2 2303 	umull	r2, r3, r2, r3
 800bee2:	08db      	lsrs	r3, r3, #3
 800bee4:	015b      	lsls	r3, r3, #5
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d201      	bcs.n	800bef0 <load_xdir+0xd8>
 800beec:	2302      	movs	r3, #2
 800beee:	e04a      	b.n	800bf86 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800bef0:	2340      	movs	r3, #64	@ 0x40
 800bef2:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800bef4:	2100      	movs	r1, #0
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f7ff fb3f 	bl	800b57a <dir_next>
 800befc:	4603      	mov	r3, r0
 800befe:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800bf00:	7bfb      	ldrb	r3, [r7, #15]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d001      	beq.n	800bf0a <load_xdir+0xf2>
 800bf06:	7bfb      	ldrb	r3, [r7, #15]
 800bf08:	e03d      	b.n	800bf86 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf12:	4619      	mov	r1, r3
 800bf14:	4610      	mov	r0, r2
 800bf16:	f7fe fc0f 	bl	800a738 <move_window>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800bf1e:	7bfb      	ldrb	r3, [r7, #15]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d001      	beq.n	800bf28 <load_xdir+0x110>
 800bf24:	7bfb      	ldrb	r3, [r7, #15]
 800bf26:	e02e      	b.n	800bf86 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	2bc1      	cmp	r3, #193	@ 0xc1
 800bf30:	d001      	beq.n	800bf36 <load_xdir+0x11e>
 800bf32:	2302      	movs	r3, #2
 800bf34:	e027      	b.n	800bf86 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800bf3c:	d208      	bcs.n	800bf50 <load_xdir+0x138>
 800bf3e:	693a      	ldr	r2, [r7, #16]
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	18d0      	adds	r0, r2, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf48:	2220      	movs	r2, #32
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	f7fe f9c6 	bl	800a2dc <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	3320      	adds	r3, #32
 800bf54:	617b      	str	r3, [r7, #20]
 800bf56:	697a      	ldr	r2, [r7, #20]
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d3ca      	bcc.n	800bef4 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800bf64:	d80e      	bhi.n	800bf84 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800bf66:	6938      	ldr	r0, [r7, #16]
 800bf68:	f7ff fe73 	bl	800bc52 <xdir_sum>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	461c      	mov	r4, r3
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	3302      	adds	r3, #2
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7fd ffcb 	bl	8009f10 <ld_word>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	429c      	cmp	r4, r3
 800bf7e:	d001      	beq.n	800bf84 <load_xdir+0x16c>
 800bf80:	2302      	movs	r3, #2
 800bf82:	e000      	b.n	800bf86 <load_xdir+0x16e>
	}
	return FR_OK;
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	371c      	adds	r7, #28
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd90      	pop	{r4, r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	88888889 	.word	0x88888889

0800bf94 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800bf94:	b5b0      	push	{r4, r5, r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800bf9e:	6839      	ldr	r1, [r7, #0]
 800bfa0:	6808      	ldr	r0, [r1, #0]
 800bfa2:	6879      	ldr	r1, [r7, #4]
 800bfa4:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	6a08      	ldr	r0, [r1, #32]
 800bfaa:	6879      	ldr	r1, [r7, #4]
 800bfac:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800bfae:	6839      	ldr	r1, [r7, #0]
 800bfb0:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800bfb2:	b2c8      	uxtb	r0, r1
 800bfb4:	6879      	ldr	r1, [r7, #4]
 800bfb6:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800bfb8:	6839      	ldr	r1, [r7, #0]
 800bfba:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	460c      	mov	r4, r1
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	6879      	ldr	r1, [r7, #4]
 800bfca:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f7ff fa38 	bl	800b452 <dir_sdi>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bfe6:	7bfb      	ldrb	r3, [r7, #15]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d104      	bne.n	800bff6 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f7ff ff13 	bl	800be18 <load_xdir>
 800bff2:	4603      	mov	r3, r0
 800bff4:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800bff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bdb0      	pop	{r4, r5, r7, pc}

0800c000 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800c000:	b590      	push	{r4, r7, lr}
 800c002:	b087      	sub	sp, #28
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	695b      	ldr	r3, [r3, #20]
 800c00e:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	1c9c      	adds	r4, r3, #2
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f7ff fe1c 	bl	800bc52 <xdir_sum>
 800c01a:	4603      	mov	r3, r0
 800c01c:	4619      	mov	r1, r3
 800c01e:	4620      	mov	r0, r4
 800c020:	f7fe f88d 	bl	800a13e <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	3301      	adds	r3, #1
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	3301      	adds	r3, #1
 800c02c:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c032:	4619      	mov	r1, r3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f7ff fa0c 	bl	800b452 <dir_sdi>
 800c03a:	4603      	mov	r3, r0
 800c03c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800c03e:	e026      	b.n	800c08e <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c048:	4619      	mov	r1, r3
 800c04a:	4610      	mov	r0, r2
 800c04c:	f7fe fb74 	bl	800a738 <move_window>
 800c050:	4603      	mov	r3, r0
 800c052:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c054:	7dfb      	ldrb	r3, [r7, #23]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d11d      	bne.n	800c096 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c05e:	2220      	movs	r2, #32
 800c060:	68f9      	ldr	r1, [r7, #12]
 800c062:	4618      	mov	r0, r3
 800c064:	f7fe f93a 	bl	800a2dc <mem_cpy>
		dp->obj.fs->wflag = 1;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2201      	movs	r2, #1
 800c06e:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	3b01      	subs	r3, #1
 800c074:	613b      	str	r3, [r7, #16]
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00e      	beq.n	800c09a <store_xdir+0x9a>
		dirb += SZDIRE;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	3320      	adds	r3, #32
 800c080:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800c082:	2100      	movs	r1, #0
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f7ff fa78 	bl	800b57a <dir_next>
 800c08a:	4603      	mov	r3, r0
 800c08c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800c08e:	7dfb      	ldrb	r3, [r7, #23]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d0d5      	beq.n	800c040 <store_xdir+0x40>
 800c094:	e002      	b.n	800c09c <store_xdir+0x9c>
		if (res != FR_OK) break;
 800c096:	bf00      	nop
 800c098:	e000      	b.n	800c09c <store_xdir+0x9c>
		if (--nent == 0) break;
 800c09a:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800c09c:	7dfb      	ldrb	r3, [r7, #23]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d002      	beq.n	800c0a8 <store_xdir+0xa8>
 800c0a2:	7dfb      	ldrb	r3, [r7, #23]
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d101      	bne.n	800c0ac <store_xdir+0xac>
 800c0a8:	7dfb      	ldrb	r3, [r7, #23]
 800c0aa:	e000      	b.n	800c0ae <store_xdir+0xae>
 800c0ac:	2302      	movs	r3, #2
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	371c      	adds	r7, #28
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd90      	pop	{r4, r7, pc}

0800c0b6 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800c0b6:	b590      	push	{r4, r7, lr}
 800c0b8:	b085      	sub	sp, #20
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
 800c0be:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800c0c0:	2240      	movs	r2, #64	@ 0x40
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f7fe f92a 	bl	800a31e <mem_set>
	dirb[XDIR_Type] = 0x85;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2285      	movs	r2, #133	@ 0x85
 800c0ce:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	3320      	adds	r3, #32
 800c0d4:	22c0      	movs	r2, #192	@ 0xc0
 800c0d6:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	72bb      	strb	r3, [r7, #10]
 800c0dc:	2301      	movs	r3, #1
 800c0de:	72fb      	strb	r3, [r7, #11]
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	813b      	strh	r3, [r7, #8]
 800c0e4:	2340      	movs	r3, #64	@ 0x40
 800c0e6:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	1c5a      	adds	r2, r3, #1
 800c0ec:	60fa      	str	r2, [r7, #12]
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	22c1      	movs	r2, #193	@ 0xc1
 800c0f4:	701a      	strb	r2, [r3, #0]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	1c5a      	adds	r2, r3, #1
 800c0fa:	60fa      	str	r2, [r7, #12]
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	4413      	add	r3, r2
 800c100:	2200      	movs	r2, #0
 800c102:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800c104:	893b      	ldrh	r3, [r7, #8]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00b      	beq.n	800c122 <create_xdir+0x6c>
 800c10a:	7abb      	ldrb	r3, [r7, #10]
 800c10c:	005b      	lsls	r3, r3, #1
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	4413      	add	r3, r2
 800c112:	881b      	ldrh	r3, [r3, #0]
 800c114:	813b      	strh	r3, [r7, #8]
 800c116:	893b      	ldrh	r3, [r7, #8]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d002      	beq.n	800c122 <create_xdir+0x6c>
 800c11c:	7abb      	ldrb	r3, [r7, #10]
 800c11e:	3301      	adds	r3, #1
 800c120:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	4413      	add	r3, r2
 800c128:	893a      	ldrh	r2, [r7, #8]
 800c12a:	4611      	mov	r1, r2
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7fe f806 	bl	800a13e <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	3302      	adds	r3, #2
 800c136:	60fb      	str	r3, [r7, #12]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f003 031f 	and.w	r3, r3, #31
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1e0      	bne.n	800c104 <create_xdir+0x4e>
		nb++;
 800c142:	7afb      	ldrb	r3, [r7, #11]
 800c144:	3301      	adds	r3, #1
 800c146:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800c148:	7abb      	ldrb	r3, [r7, #10]
 800c14a:	005b      	lsls	r3, r3, #1
 800c14c:	683a      	ldr	r2, [r7, #0]
 800c14e:	4413      	add	r3, r2
 800c150:	881b      	ldrh	r3, [r3, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1c8      	bne.n	800c0e8 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	3323      	adds	r3, #35	@ 0x23
 800c15a:	7aba      	ldrb	r2, [r7, #10]
 800c15c:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	3301      	adds	r3, #1
 800c162:	7afa      	ldrb	r2, [r7, #11]
 800c164:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800c16c:	6838      	ldr	r0, [r7, #0]
 800c16e:	f7ff fda0 	bl	800bcb2 <xname_sum>
 800c172:	4603      	mov	r3, r0
 800c174:	4619      	mov	r1, r3
 800c176:	4620      	mov	r0, r4
 800c178:	f7fd ffe1 	bl	800a13e <st_word>
}
 800c17c:	bf00      	nop
 800c17e:	3714      	adds	r7, #20
 800c180:	46bd      	mov	sp, r7
 800c182:	bd90      	pop	{r4, r7, pc}

0800c184 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c18e:	2304      	movs	r3, #4
 800c190:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c198:	23ff      	movs	r3, #255	@ 0xff
 800c19a:	757b      	strb	r3, [r7, #21]
 800c19c:	23ff      	movs	r3, #255	@ 0xff
 800c19e:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c1a0:	e09f      	b.n	800c2e2 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	6938      	ldr	r0, [r7, #16]
 800c1aa:	f7fe fac5 	bl	800a738 <move_window>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c1b2:	7dfb      	ldrb	r3, [r7, #23]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f040 809a 	bne.w	800c2ee <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c1c2:	7dbb      	ldrb	r3, [r7, #22]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d102      	bne.n	800c1ce <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c1c8:	2304      	movs	r3, #4
 800c1ca:	75fb      	strb	r3, [r7, #23]
 800c1cc:	e096      	b.n	800c2fc <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	2b04      	cmp	r3, #4
 800c1d4:	d118      	bne.n	800c208 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800c1d6:	7dbb      	ldrb	r3, [r7, #22]
 800c1d8:	2b85      	cmp	r3, #133	@ 0x85
 800c1da:	d179      	bne.n	800c2d0 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f7ff fe17 	bl	800be18 <load_xdir>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800c1ee:	7dfb      	ldrb	r3, [r7, #23]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d17e      	bne.n	800c2f2 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	695b      	ldr	r3, [r3, #20]
 800c1f8:	3304      	adds	r3, #4
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c200:	b2da      	uxtb	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	719a      	strb	r2, [r3, #6]
					}
					break;
 800c206:	e074      	b.n	800c2f2 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c20c:	330b      	adds	r3, #11
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c214:	73fb      	strb	r3, [r7, #15]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	7bfa      	ldrb	r2, [r7, #15]
 800c21a:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c21c:	7dbb      	ldrb	r3, [r7, #22]
 800c21e:	2be5      	cmp	r3, #229	@ 0xe5
 800c220:	d00e      	beq.n	800c240 <dir_read+0xbc>
 800c222:	7dbb      	ldrb	r3, [r7, #22]
 800c224:	2b2e      	cmp	r3, #46	@ 0x2e
 800c226:	d00b      	beq.n	800c240 <dir_read+0xbc>
 800c228:	7bfb      	ldrb	r3, [r7, #15]
 800c22a:	f023 0320 	bic.w	r3, r3, #32
 800c22e:	2b08      	cmp	r3, #8
 800c230:	bf0c      	ite	eq
 800c232:	2301      	moveq	r3, #1
 800c234:	2300      	movne	r3, #0
 800c236:	b2db      	uxtb	r3, r3
 800c238:	461a      	mov	r2, r3
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d002      	beq.n	800c246 <dir_read+0xc2>
				ord = 0xFF;
 800c240:	23ff      	movs	r3, #255	@ 0xff
 800c242:	757b      	strb	r3, [r7, #21]
 800c244:	e044      	b.n	800c2d0 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c246:	7bfb      	ldrb	r3, [r7, #15]
 800c248:	2b0f      	cmp	r3, #15
 800c24a:	d12f      	bne.n	800c2ac <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c24c:	7dbb      	ldrb	r3, [r7, #22]
 800c24e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c252:	2b00      	cmp	r3, #0
 800c254:	d00d      	beq.n	800c272 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c25a:	7b5b      	ldrb	r3, [r3, #13]
 800c25c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800c25e:	7dbb      	ldrb	r3, [r7, #22]
 800c260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c264:	75bb      	strb	r3, [r7, #22]
 800c266:	7dbb      	ldrb	r3, [r7, #22]
 800c268:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c272:	7dba      	ldrb	r2, [r7, #22]
 800c274:	7d7b      	ldrb	r3, [r7, #21]
 800c276:	429a      	cmp	r2, r3
 800c278:	d115      	bne.n	800c2a6 <dir_read+0x122>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c27e:	330d      	adds	r3, #13
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	7d3a      	ldrb	r2, [r7, #20]
 800c284:	429a      	cmp	r2, r3
 800c286:	d10e      	bne.n	800c2a6 <dir_read+0x122>
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	691a      	ldr	r2, [r3, #16]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c290:	4619      	mov	r1, r3
 800c292:	4610      	mov	r0, r2
 800c294:	f7ff fb62 	bl	800b95c <pick_lfn>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d003      	beq.n	800c2a6 <dir_read+0x122>
 800c29e:	7d7b      	ldrb	r3, [r7, #21]
 800c2a0:	3b01      	subs	r3, #1
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	e000      	b.n	800c2a8 <dir_read+0x124>
 800c2a6:	23ff      	movs	r3, #255	@ 0xff
 800c2a8:	757b      	strb	r3, [r7, #21]
 800c2aa:	e011      	b.n	800c2d0 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c2ac:	7d7b      	ldrb	r3, [r7, #21]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d109      	bne.n	800c2c6 <dir_read+0x142>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7ff fcaa 	bl	800bc10 <sum_sfn>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	461a      	mov	r2, r3
 800c2c0:	7d3b      	ldrb	r3, [r7, #20]
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d017      	beq.n	800c2f6 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c2cc:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800c2ce:	e012      	b.n	800c2f6 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f7ff f951 	bl	800b57a <dir_next>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c2dc:	7dfb      	ldrb	r3, [r7, #23]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d10b      	bne.n	800c2fa <dir_read+0x176>
	while (dp->sect) {
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f47f af5b 	bne.w	800c1a2 <dir_read+0x1e>
 800c2ec:	e006      	b.n	800c2fc <dir_read+0x178>
		if (res != FR_OK) break;
 800c2ee:	bf00      	nop
 800c2f0:	e004      	b.n	800c2fc <dir_read+0x178>
					break;
 800c2f2:	bf00      	nop
 800c2f4:	e002      	b.n	800c2fc <dir_read+0x178>
					break;
 800c2f6:	bf00      	nop
 800c2f8:	e000      	b.n	800c2fc <dir_read+0x178>
		if (res != FR_OK) break;
 800c2fa:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c2fc:	7dfb      	ldrb	r3, [r7, #23]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d002      	beq.n	800c308 <dir_read+0x184>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2200      	movs	r2, #0
 800c306:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800c308:	7dfb      	ldrb	r3, [r7, #23]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3718      	adds	r7, #24
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c312:	b590      	push	{r4, r7, lr}
 800c314:	b089      	sub	sp, #36	@ 0x24
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c320:	2100      	movs	r1, #0
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f7ff f895 	bl	800b452 <dir_sdi>
 800c328:	4603      	mov	r3, r0
 800c32a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800c32c:	7ffb      	ldrb	r3, [r7, #31]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d001      	beq.n	800c336 <dir_find+0x24>
 800c332:	7ffb      	ldrb	r3, [r7, #31]
 800c334:	e113      	b.n	800c55e <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	2b04      	cmp	r3, #4
 800c33c:	d165      	bne.n	800c40a <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	691b      	ldr	r3, [r3, #16]
 800c342:	4618      	mov	r0, r3
 800c344:	f7ff fcb5 	bl	800bcb2 <xname_sum>
 800c348:	4603      	mov	r3, r0
 800c34a:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c34c:	e050      	b.n	800c3f0 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	695b      	ldr	r3, [r3, #20]
 800c352:	3324      	adds	r3, #36	@ 0x24
 800c354:	4618      	mov	r0, r3
 800c356:	f7fd fddb 	bl	8009f10 <ld_word>
 800c35a:	4603      	mov	r3, r0
 800c35c:	461a      	mov	r2, r3
 800c35e:	893b      	ldrh	r3, [r7, #8]
 800c360:	4293      	cmp	r3, r2
 800c362:	d144      	bne.n	800c3ee <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	695b      	ldr	r3, [r3, #20]
 800c368:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800c36c:	76fb      	strb	r3, [r7, #27]
 800c36e:	2340      	movs	r3, #64	@ 0x40
 800c370:	617b      	str	r3, [r7, #20]
 800c372:	2300      	movs	r3, #0
 800c374:	613b      	str	r3, [r7, #16]
 800c376:	e029      	b.n	800c3cc <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	f003 031f 	and.w	r3, r3, #31
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d102      	bne.n	800c388 <dir_find+0x76>
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	3302      	adds	r3, #2
 800c386:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	695a      	ldr	r2, [r3, #20]
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	4413      	add	r3, r2
 800c390:	4618      	mov	r0, r3
 800c392:	f7fd fdbd 	bl	8009f10 <ld_word>
 800c396:	4603      	mov	r3, r0
 800c398:	4618      	mov	r0, r3
 800c39a:	f002 fcc1 	bl	800ed20 <ff_wtoupper>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	461c      	mov	r4, r3
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	691a      	ldr	r2, [r3, #16]
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	005b      	lsls	r3, r3, #1
 800c3aa:	4413      	add	r3, r2
 800c3ac:	881b      	ldrh	r3, [r3, #0]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f002 fcb6 	bl	800ed20 <ff_wtoupper>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	429c      	cmp	r4, r3
 800c3b8:	d10c      	bne.n	800c3d4 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c3ba:	7efb      	ldrb	r3, [r7, #27]
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	76fb      	strb	r3, [r7, #27]
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	3302      	adds	r3, #2
 800c3c4:	617b      	str	r3, [r7, #20]
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	613b      	str	r3, [r7, #16]
 800c3cc:	7efb      	ldrb	r3, [r7, #27]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d1d2      	bne.n	800c378 <dir_find+0x66>
 800c3d2:	e000      	b.n	800c3d6 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c3d4:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c3d6:	7efb      	ldrb	r3, [r7, #27]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d109      	bne.n	800c3f0 <dir_find+0xde>
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	691a      	ldr	r2, [r3, #16]
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	005b      	lsls	r3, r3, #1
 800c3e4:	4413      	add	r3, r2
 800c3e6:	881b      	ldrh	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00b      	beq.n	800c404 <dir_find+0xf2>
 800c3ec:	e000      	b.n	800c3f0 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800c3ee:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c3f0:	2100      	movs	r1, #0
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f7ff fec6 	bl	800c184 <dir_read>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	77fb      	strb	r3, [r7, #31]
 800c3fc:	7ffb      	ldrb	r3, [r7, #31]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d0a5      	beq.n	800c34e <dir_find+0x3c>
 800c402:	e000      	b.n	800c406 <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c404:	bf00      	nop
		}
		return res;
 800c406:	7ffb      	ldrb	r3, [r7, #31]
 800c408:	e0a9      	b.n	800c55e <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c40a:	23ff      	movs	r3, #255	@ 0xff
 800c40c:	773b      	strb	r3, [r7, #28]
 800c40e:	7f3b      	ldrb	r3, [r7, #28]
 800c410:	777b      	strb	r3, [r7, #29]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f04f 32ff 	mov.w	r2, #4294967295
 800c418:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c41e:	4619      	mov	r1, r3
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f7fe f989 	bl	800a738 <move_window>
 800c426:	4603      	mov	r3, r0
 800c428:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800c42a:	7ffb      	ldrb	r3, [r7, #31]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f040 8090 	bne.w	800c552 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c43a:	7fbb      	ldrb	r3, [r7, #30]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d102      	bne.n	800c446 <dir_find+0x134>
 800c440:	2304      	movs	r3, #4
 800c442:	77fb      	strb	r3, [r7, #31]
 800c444:	e08a      	b.n	800c55c <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c44a:	330b      	adds	r3, #11
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c452:	72fb      	strb	r3, [r7, #11]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	7afa      	ldrb	r2, [r7, #11]
 800c458:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c45a:	7fbb      	ldrb	r3, [r7, #30]
 800c45c:	2be5      	cmp	r3, #229	@ 0xe5
 800c45e:	d007      	beq.n	800c470 <dir_find+0x15e>
 800c460:	7afb      	ldrb	r3, [r7, #11]
 800c462:	f003 0308 	and.w	r3, r3, #8
 800c466:	2b00      	cmp	r3, #0
 800c468:	d009      	beq.n	800c47e <dir_find+0x16c>
 800c46a:	7afb      	ldrb	r3, [r7, #11]
 800c46c:	2b0f      	cmp	r3, #15
 800c46e:	d006      	beq.n	800c47e <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c470:	23ff      	movs	r3, #255	@ 0xff
 800c472:	777b      	strb	r3, [r7, #29]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f04f 32ff 	mov.w	r2, #4294967295
 800c47a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c47c:	e05e      	b.n	800c53c <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c47e:	7afb      	ldrb	r3, [r7, #11]
 800c480:	2b0f      	cmp	r3, #15
 800c482:	d136      	bne.n	800c4f2 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c48a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d154      	bne.n	800c53c <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c492:	7fbb      	ldrb	r3, [r7, #30]
 800c494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00d      	beq.n	800c4b8 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4a0:	7b5b      	ldrb	r3, [r3, #13]
 800c4a2:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c4a4:	7fbb      	ldrb	r3, [r7, #30]
 800c4a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4aa:	77bb      	strb	r3, [r7, #30]
 800c4ac:	7fbb      	ldrb	r3, [r7, #30]
 800c4ae:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c4b8:	7fba      	ldrb	r2, [r7, #30]
 800c4ba:	7f7b      	ldrb	r3, [r7, #29]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d115      	bne.n	800c4ec <dir_find+0x1da>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4c4:	330d      	adds	r3, #13
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	7f3a      	ldrb	r2, [r7, #28]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d10e      	bne.n	800c4ec <dir_find+0x1da>
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	691a      	ldr	r2, [r3, #16]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	4610      	mov	r0, r2
 800c4da:	f7ff f9cf 	bl	800b87c <cmp_lfn>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d003      	beq.n	800c4ec <dir_find+0x1da>
 800c4e4:	7f7b      	ldrb	r3, [r7, #29]
 800c4e6:	3b01      	subs	r3, #1
 800c4e8:	b2db      	uxtb	r3, r3
 800c4ea:	e000      	b.n	800c4ee <dir_find+0x1dc>
 800c4ec:	23ff      	movs	r3, #255	@ 0xff
 800c4ee:	777b      	strb	r3, [r7, #29]
 800c4f0:	e024      	b.n	800c53c <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c4f2:	7f7b      	ldrb	r3, [r7, #29]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d109      	bne.n	800c50c <dir_find+0x1fa>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7ff fb87 	bl	800bc10 <sum_sfn>
 800c502:	4603      	mov	r3, r0
 800c504:	461a      	mov	r2, r3
 800c506:	7f3b      	ldrb	r3, [r7, #28]
 800c508:	4293      	cmp	r3, r2
 800c50a:	d024      	beq.n	800c556 <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c512:	f003 0301 	and.w	r3, r3, #1
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10a      	bne.n	800c530 <dir_find+0x21e>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3340      	adds	r3, #64	@ 0x40
 800c522:	220b      	movs	r2, #11
 800c524:	4619      	mov	r1, r3
 800c526:	f7fd ff15 	bl	800a354 <mem_cmp>
 800c52a:	4603      	mov	r3, r0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d014      	beq.n	800c55a <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c530:	23ff      	movs	r3, #255	@ 0xff
 800c532:	777b      	strb	r3, [r7, #29]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f04f 32ff 	mov.w	r2, #4294967295
 800c53a:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c53c:	2100      	movs	r1, #0
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f7ff f81b 	bl	800b57a <dir_next>
 800c544:	4603      	mov	r3, r0
 800c546:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800c548:	7ffb      	ldrb	r3, [r7, #31]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	f43f af65 	beq.w	800c41a <dir_find+0x108>
 800c550:	e004      	b.n	800c55c <dir_find+0x24a>
		if (res != FR_OK) break;
 800c552:	bf00      	nop
 800c554:	e002      	b.n	800c55c <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c556:	bf00      	nop
 800c558:	e000      	b.n	800c55c <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c55a:	bf00      	nop

	return res;
 800c55c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3724      	adds	r7, #36	@ 0x24
 800c562:	46bd      	mov	sp, r7
 800c564:	bd90      	pop	{r4, r7, pc}
	...

0800c568 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c568:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c56c:	b0a0      	sub	sp, #128	@ 0x80
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c57e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d001      	beq.n	800c58a <dir_register+0x22>
 800c586:	2306      	movs	r3, #6
 800c588:	e192      	b.n	800c8b0 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c58a:	2300      	movs	r3, #0
 800c58c:	677b      	str	r3, [r7, #116]	@ 0x74
 800c58e:	e002      	b.n	800c596 <dir_register+0x2e>
 800c590:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c592:	3301      	adds	r3, #1
 800c594:	677b      	str	r3, [r7, #116]	@ 0x74
 800c596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c598:	691a      	ldr	r2, [r3, #16]
 800c59a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c59c:	005b      	lsls	r3, r3, #1
 800c59e:	4413      	add	r3, r2
 800c5a0:	881b      	ldrh	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d1f4      	bne.n	800c590 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c5a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	2b04      	cmp	r3, #4
 800c5ac:	f040 80a3 	bne.w	800c6f6 <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800c5b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c5b2:	330e      	adds	r3, #14
 800c5b4:	4aa4      	ldr	r2, [pc, #656]	@ (800c848 <dir_register+0x2e0>)
 800c5b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ba:	08db      	lsrs	r3, r3, #3
 800c5bc:	3302      	adds	r3, #2
 800c5be:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800c5c0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f7ff f8bf 	bl	800b746 <dir_alloc>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800c5ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d002      	beq.n	800c5dc <dir_register+0x74>
 800c5d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c5da:	e169      	b.n	800c8b0 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	015b      	lsls	r3, r3, #5
 800c5e6:	1ad2      	subs	r2, r2, r3
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	689b      	ldr	r3, [r3, #8]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d076      	beq.n	800c6e2 <dir_register+0x17a>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	79db      	ldrb	r3, [r3, #7]
 800c5f8:	f003 0304 	and.w	r3, r3, #4
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d070      	beq.n	800c6e2 <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c606:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c608:	8949      	ldrh	r1, [r1, #10]
 800c60a:	4608      	mov	r0, r1
 800c60c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c60e:	8989      	ldrh	r1, [r1, #12]
 800c610:	fb00 f101 	mul.w	r1, r0, r1
 800c614:	2000      	movs	r0, #0
 800c616:	460c      	mov	r4, r1
 800c618:	4605      	mov	r5, r0
 800c61a:	eb12 0804 	adds.w	r8, r2, r4
 800c61e:	eb43 0905 	adc.w	r9, r3, r5
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7fe fcb0 	bl	800af90 <fill_first_frag>
 800c630:	4603      	mov	r3, r0
 800c632:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c636:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d002      	beq.n	800c644 <dir_register+0xdc>
 800c63e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c642:	e135      	b.n	800c8b0 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c64a:	f04f 32ff 	mov.w	r2, #4294967295
 800c64e:	4619      	mov	r1, r3
 800c650:	f7fe fccd 	bl	800afee <fill_last_frag>
 800c654:	4603      	mov	r3, r0
 800c656:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c65a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d002      	beq.n	800c668 <dir_register+0x100>
 800c662:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c666:	e123      	b.n	800c8b0 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	f107 0308 	add.w	r3, r7, #8
 800c66e:	4611      	mov	r1, r2
 800c670:	4618      	mov	r0, r3
 800c672:	f7ff fc8f 	bl	800bf94 <load_obj_dir>
 800c676:	4603      	mov	r3, r0
 800c678:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c67c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c680:	2b00      	cmp	r3, #0
 800c682:	d002      	beq.n	800c68a <dir_register+0x122>
 800c684:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c688:	e112      	b.n	800c8b0 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800c68a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c68c:	695b      	ldr	r3, [r3, #20]
 800c68e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c698:	4608      	mov	r0, r1
 800c69a:	f7fd fd97 	bl	800a1cc <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800c69e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6a0:	695b      	ldr	r3, [r3, #20]
 800c6a2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c6ac:	4608      	mov	r0, r1
 800c6ae:	f7fd fd8d 	bl	800a1cc <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	79da      	ldrb	r2, [r3, #7]
 800c6b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6b8:	695b      	ldr	r3, [r3, #20]
 800c6ba:	3321      	adds	r3, #33	@ 0x21
 800c6bc:	f042 0201 	orr.w	r2, r2, #1
 800c6c0:	b2d2      	uxtb	r2, r2
 800c6c2:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800c6c4:	f107 0308 	add.w	r3, r7, #8
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7ff fc99 	bl	800c000 <store_xdir>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c6d4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d002      	beq.n	800c6e2 <dir_register+0x17a>
 800c6dc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c6e0:	e0e6      	b.n	800c8b0 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800c6e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6e4:	695a      	ldr	r2, [r3, #20]
 800c6e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6e8:	691b      	ldr	r3, [r3, #16]
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	4610      	mov	r0, r2
 800c6ee:	f7ff fce2 	bl	800c0b6 <create_xdir>
		return FR_OK;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	e0dc      	b.n	800c8b0 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800c6fc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800c700:	220c      	movs	r2, #12
 800c702:	4618      	mov	r0, r3
 800c704:	f7fd fdea 	bl	800a2dc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c708:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c70c:	f003 0301 	and.w	r3, r3, #1
 800c710:	2b00      	cmp	r3, #0
 800c712:	d033      	beq.n	800c77c <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2240      	movs	r2, #64	@ 0x40
 800c718:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800c71c:	2301      	movs	r3, #1
 800c71e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c720:	e016      	b.n	800c750 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800c728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c72a:	691a      	ldr	r2, [r3, #16]
 800c72c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800c730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c732:	f7ff f9df 	bl	800baf4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7ff fdeb 	bl	800c312 <dir_find>
 800c73c:	4603      	mov	r3, r0
 800c73e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800c742:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c746:	2b00      	cmp	r3, #0
 800c748:	d106      	bne.n	800c758 <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 800c74a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c74c:	3301      	adds	r3, #1
 800c74e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c750:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c752:	2b63      	cmp	r3, #99	@ 0x63
 800c754:	d9e5      	bls.n	800c722 <dir_register+0x1ba>
 800c756:	e000      	b.n	800c75a <dir_register+0x1f2>
			if (res != FR_OK) break;
 800c758:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c75a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c75c:	2b64      	cmp	r3, #100	@ 0x64
 800c75e:	d101      	bne.n	800c764 <dir_register+0x1fc>
 800c760:	2307      	movs	r3, #7
 800c762:	e0a5      	b.n	800c8b0 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c764:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c768:	2b04      	cmp	r3, #4
 800c76a:	d002      	beq.n	800c772 <dir_register+0x20a>
 800c76c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c770:	e09e      	b.n	800c8b0 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c772:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c77c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c780:	f003 0302 	and.w	r3, r3, #2
 800c784:	2b00      	cmp	r3, #0
 800c786:	d007      	beq.n	800c798 <dir_register+0x230>
 800c788:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c78a:	330c      	adds	r3, #12
 800c78c:	4a2f      	ldr	r2, [pc, #188]	@ (800c84c <dir_register+0x2e4>)
 800c78e:	fba2 2303 	umull	r2, r3, r2, r3
 800c792:	089b      	lsrs	r3, r3, #2
 800c794:	3301      	adds	r3, #1
 800c796:	e000      	b.n	800c79a <dir_register+0x232>
 800c798:	2301      	movs	r3, #1
 800c79a:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c79c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f7fe ffd1 	bl	800b746 <dir_alloc>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c7aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d14f      	bne.n	800c852 <dir_register+0x2ea>
 800c7b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c7b4:	3b01      	subs	r3, #1
 800c7b6:	673b      	str	r3, [r7, #112]	@ 0x70
 800c7b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d049      	beq.n	800c852 <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c7c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c7c4:	015b      	lsls	r3, r3, #5
 800c7c6:	1ad3      	subs	r3, r2, r3
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f7fe fe41 	bl	800b452 <dir_sdi>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800c7d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d139      	bne.n	800c852 <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	3340      	adds	r3, #64	@ 0x40
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7ff fa14 	bl	800bc10 <sum_sfn>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c7f6:	f7fd ff9f 	bl	800a738 <move_window>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800c800:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c804:	2b00      	cmp	r3, #0
 800c806:	d123      	bne.n	800c850 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c80a:	6918      	ldr	r0, [r3, #16]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c810:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c812:	b2da      	uxtb	r2, r3
 800c814:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c818:	f7ff f904 	bl	800ba24 <put_lfn>
				fs->wflag = 1;
 800c81c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c81e:	2201      	movs	r2, #1
 800c820:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c822:	2100      	movs	r1, #0
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f7fe fea8 	bl	800b57a <dir_next>
 800c82a:	4603      	mov	r3, r0
 800c82c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800c830:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c834:	2b00      	cmp	r3, #0
 800c836:	d10c      	bne.n	800c852 <dir_register+0x2ea>
 800c838:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c83a:	3b01      	subs	r3, #1
 800c83c:	673b      	str	r3, [r7, #112]	@ 0x70
 800c83e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c840:	2b00      	cmp	r3, #0
 800c842:	d1d4      	bne.n	800c7ee <dir_register+0x286>
 800c844:	e005      	b.n	800c852 <dir_register+0x2ea>
 800c846:	bf00      	nop
 800c848:	88888889 	.word	0x88888889
 800c84c:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800c850:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c852:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c856:	2b00      	cmp	r3, #0
 800c858:	d128      	bne.n	800c8ac <dir_register+0x344>
		res = move_window(fs, dp->sect);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c85e:	4619      	mov	r1, r3
 800c860:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c862:	f7fd ff69 	bl	800a738 <move_window>
 800c866:	4603      	mov	r3, r0
 800c868:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800c86c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c870:	2b00      	cmp	r3, #0
 800c872:	d11b      	bne.n	800c8ac <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c878:	2220      	movs	r2, #32
 800c87a:	2100      	movs	r1, #0
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7fd fd4e 	bl	800a31e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	3340      	adds	r3, #64	@ 0x40
 800c88a:	220b      	movs	r2, #11
 800c88c:	4619      	mov	r1, r3
 800c88e:	f7fd fd25 	bl	800a2dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c89c:	330c      	adds	r3, #12
 800c89e:	f002 0218 	and.w	r2, r2, #24
 800c8a2:	b2d2      	uxtb	r2, r2
 800c8a4:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c8a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c8ac:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3780      	adds	r7, #128	@ 0x80
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c8ba:	bf00      	nop

0800c8bc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c8bc:	b5b0      	push	{r4, r5, r7, lr}
 800c8be:	b088      	sub	sp, #32
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f000 80d9 	beq.w	800ca8e <get_fileinfo+0x1d2>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	2b04      	cmp	r3, #4
 800c8e2:	d106      	bne.n	800c8f2 <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	695b      	ldr	r3, [r3, #20]
 800c8e8:	6839      	ldr	r1, [r7, #0]
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7ff fa11 	bl	800bd12 <get_xdir_info>
		return;
 800c8f0:	e0ce      	b.n	800ca90 <get_fileinfo+0x1d4>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8fa:	d032      	beq.n	800c962 <get_fileinfo+0xa6>
			i = j = 0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	61bb      	str	r3, [r7, #24]
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c904:	e01b      	b.n	800c93e <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c906:	89fb      	ldrh	r3, [r7, #14]
 800c908:	2100      	movs	r1, #0
 800c90a:	4618      	mov	r0, r3
 800c90c:	f002 f9cc 	bl	800eca8 <ff_convert>
 800c910:	4603      	mov	r3, r0
 800c912:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c914:	89fb      	ldrh	r3, [r7, #14]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d102      	bne.n	800c920 <get_fileinfo+0x64>
 800c91a:	2300      	movs	r3, #0
 800c91c:	61fb      	str	r3, [r7, #28]
 800c91e:	e01a      	b.n	800c956 <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	2bfe      	cmp	r3, #254	@ 0xfe
 800c924:	d902      	bls.n	800c92c <get_fileinfo+0x70>
 800c926:	2300      	movs	r3, #0
 800c928:	61fb      	str	r3, [r7, #28]
 800c92a:	e014      	b.n	800c956 <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800c92c:	69fb      	ldr	r3, [r7, #28]
 800c92e:	1c5a      	adds	r2, r3, #1
 800c930:	61fa      	str	r2, [r7, #28]
 800c932:	89fa      	ldrh	r2, [r7, #14]
 800c934:	b2d1      	uxtb	r1, r2
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	4413      	add	r3, r2
 800c93a:	460a      	mov	r2, r1
 800c93c:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	691a      	ldr	r2, [r3, #16]
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	1c59      	adds	r1, r3, #1
 800c946:	61b9      	str	r1, [r7, #24]
 800c948:	005b      	lsls	r3, r3, #1
 800c94a:	4413      	add	r3, r2
 800c94c:	881b      	ldrh	r3, [r3, #0]
 800c94e:	81fb      	strh	r3, [r7, #14]
 800c950:	89fb      	ldrh	r3, [r7, #14]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1d7      	bne.n	800c906 <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c956:	683a      	ldr	r2, [r7, #0]
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	4413      	add	r3, r2
 800c95c:	331a      	adds	r3, #26
 800c95e:	2200      	movs	r2, #0
 800c960:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800c962:	2300      	movs	r3, #0
 800c964:	61bb      	str	r3, [r7, #24]
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	4413      	add	r3, r2
 800c970:	331a      	adds	r3, #26
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800c976:	e04d      	b.n	800ca14 <get_fileinfo+0x158>
		c = (TCHAR)dp->dir[i++];
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	1c59      	adds	r1, r3, #1
 800c980:	61f9      	str	r1, [r7, #28]
 800c982:	4413      	add	r3, r2
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c988:	7dfb      	ldrb	r3, [r7, #23]
 800c98a:	2b20      	cmp	r3, #32
 800c98c:	d041      	beq.n	800ca12 <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c98e:	7dfb      	ldrb	r3, [r7, #23]
 800c990:	2b05      	cmp	r3, #5
 800c992:	d101      	bne.n	800c998 <get_fileinfo+0xdc>
 800c994:	23e5      	movs	r3, #229	@ 0xe5
 800c996:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	2b09      	cmp	r3, #9
 800c99c:	d10f      	bne.n	800c9be <get_fileinfo+0x102>
			if (!lfv) fno->fname[j] = '.';
 800c99e:	89bb      	ldrh	r3, [r7, #12]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d105      	bne.n	800c9b0 <get_fileinfo+0xf4>
 800c9a4:	683a      	ldr	r2, [r7, #0]
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	331a      	adds	r3, #26
 800c9ac:	222e      	movs	r2, #46	@ 0x2e
 800c9ae:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	1c5a      	adds	r2, r3, #1
 800c9b4:	61ba      	str	r2, [r7, #24]
 800c9b6:	683a      	ldr	r2, [r7, #0]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	222e      	movs	r2, #46	@ 0x2e
 800c9bc:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c9be:	683a      	ldr	r2, [r7, #0]
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	330d      	adds	r3, #13
 800c9c6:	7dfa      	ldrb	r2, [r7, #23]
 800c9c8:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c9ca:	89bb      	ldrh	r3, [r7, #12]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d11c      	bne.n	800ca0a <get_fileinfo+0x14e>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c9d0:	7dfb      	ldrb	r3, [r7, #23]
 800c9d2:	2b40      	cmp	r3, #64	@ 0x40
 800c9d4:	d913      	bls.n	800c9fe <get_fileinfo+0x142>
 800c9d6:	7dfb      	ldrb	r3, [r7, #23]
 800c9d8:	2b5a      	cmp	r3, #90	@ 0x5a
 800c9da:	d810      	bhi.n	800c9fe <get_fileinfo+0x142>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9e0:	330c      	adds	r3, #12
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	2b08      	cmp	r3, #8
 800c9ea:	d901      	bls.n	800c9f0 <get_fileinfo+0x134>
 800c9ec:	2310      	movs	r3, #16
 800c9ee:	e000      	b.n	800c9f2 <get_fileinfo+0x136>
 800c9f0:	2308      	movs	r3, #8
 800c9f2:	4013      	ands	r3, r2
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d002      	beq.n	800c9fe <get_fileinfo+0x142>
				c += 0x20;			/* To lower */
 800c9f8:	7dfb      	ldrb	r3, [r7, #23]
 800c9fa:	3320      	adds	r3, #32
 800c9fc:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c9fe:	683a      	ldr	r2, [r7, #0]
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	4413      	add	r3, r2
 800ca04:	331a      	adds	r3, #26
 800ca06:	7dfa      	ldrb	r2, [r7, #23]
 800ca08:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	61bb      	str	r3, [r7, #24]
 800ca10:	e000      	b.n	800ca14 <get_fileinfo+0x158>
		if (c == ' ') continue;				/* Skip padding spaces */
 800ca12:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	2b0a      	cmp	r3, #10
 800ca18:	d9ae      	bls.n	800c978 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800ca1a:	89bb      	ldrh	r3, [r7, #12]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10d      	bne.n	800ca3c <get_fileinfo+0x180>
		fno->fname[j] = 0;
 800ca20:	683a      	ldr	r2, [r7, #0]
 800ca22:	69bb      	ldr	r3, [r7, #24]
 800ca24:	4413      	add	r3, r2
 800ca26:	331a      	adds	r3, #26
 800ca28:	2200      	movs	r2, #0
 800ca2a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca30:	330c      	adds	r3, #12
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d101      	bne.n	800ca3c <get_fileinfo+0x180>
 800ca38:	2300      	movs	r3, #0
 800ca3a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800ca3c:	683a      	ldr	r2, [r7, #0]
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	4413      	add	r3, r2
 800ca42:	330d      	adds	r3, #13
 800ca44:	2200      	movs	r2, #0
 800ca46:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca4c:	7ada      	ldrb	r2, [r3, #11]
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca56:	331c      	adds	r3, #28
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fd fa72 	bl	8009f42 <ld_dword>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2200      	movs	r2, #0
 800ca62:	461c      	mov	r4, r3
 800ca64:	4615      	mov	r5, r2
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca70:	3316      	adds	r3, #22
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7fd fa65 	bl	8009f42 <ld_dword>
 800ca78:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	815a      	strh	r2, [r3, #10]
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	0c1b      	lsrs	r3, r3, #16
 800ca86:	b29a      	uxth	r2, r3
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	811a      	strh	r2, [r3, #8]
 800ca8c:	e000      	b.n	800ca90 <get_fileinfo+0x1d4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ca8e:	bf00      	nop
}
 800ca90:	3720      	adds	r7, #32
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ca98 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b08a      	sub	sp, #40	@ 0x28
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	613b      	str	r3, [r7, #16]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	60fb      	str	r3, [r7, #12]
 800cab0:	2300      	movs	r3, #0
 800cab2:	617b      	str	r3, [r7, #20]
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	1c5a      	adds	r2, r3, #1
 800cabc:	61ba      	str	r2, [r7, #24]
 800cabe:	693a      	ldr	r2, [r7, #16]
 800cac0:	4413      	add	r3, r2
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800cac6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cac8:	2b1f      	cmp	r3, #31
 800caca:	d940      	bls.n	800cb4e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800cacc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cace:	2b2f      	cmp	r3, #47	@ 0x2f
 800cad0:	d006      	beq.n	800cae0 <create_name+0x48>
 800cad2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cad4:	2b5c      	cmp	r3, #92	@ 0x5c
 800cad6:	d110      	bne.n	800cafa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cad8:	e002      	b.n	800cae0 <create_name+0x48>
 800cada:	69bb      	ldr	r3, [r7, #24]
 800cadc:	3301      	adds	r3, #1
 800cade:	61bb      	str	r3, [r7, #24]
 800cae0:	693a      	ldr	r2, [r7, #16]
 800cae2:	69bb      	ldr	r3, [r7, #24]
 800cae4:	4413      	add	r3, r2
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	2b2f      	cmp	r3, #47	@ 0x2f
 800caea:	d0f6      	beq.n	800cada <create_name+0x42>
 800caec:	693a      	ldr	r2, [r7, #16]
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	4413      	add	r3, r2
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	2b5c      	cmp	r3, #92	@ 0x5c
 800caf6:	d0f0      	beq.n	800cada <create_name+0x42>
			break;
 800caf8:	e02a      	b.n	800cb50 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	2bfe      	cmp	r3, #254	@ 0xfe
 800cafe:	d901      	bls.n	800cb04 <create_name+0x6c>
 800cb00:	2306      	movs	r3, #6
 800cb02:	e17d      	b.n	800ce00 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800cb04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800cb0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb0c:	2101      	movs	r1, #1
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f002 f8ca 	bl	800eca8 <ff_convert>
 800cb14:	4603      	mov	r3, r0
 800cb16:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cb18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d101      	bne.n	800cb22 <create_name+0x8a>
 800cb1e:	2306      	movs	r3, #6
 800cb20:	e16e      	b.n	800ce00 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800cb22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb24:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb26:	d809      	bhi.n	800cb3c <create_name+0xa4>
 800cb28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	488d      	ldr	r0, [pc, #564]	@ (800cd64 <create_name+0x2cc>)
 800cb2e:	f7fd fc38 	bl	800a3a2 <chk_chr>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d001      	beq.n	800cb3c <create_name+0xa4>
 800cb38:	2306      	movs	r3, #6
 800cb3a:	e161      	b.n	800ce00 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	1c5a      	adds	r2, r3, #1
 800cb40:	617a      	str	r2, [r7, #20]
 800cb42:	005b      	lsls	r3, r3, #1
 800cb44:	68fa      	ldr	r2, [r7, #12]
 800cb46:	4413      	add	r3, r2
 800cb48:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cb4a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cb4c:	e7b4      	b.n	800cab8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800cb4e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cb50:	693a      	ldr	r2, [r7, #16]
 800cb52:	69bb      	ldr	r3, [r7, #24]
 800cb54:	441a      	add	r2, r3
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cb5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb5c:	2b1f      	cmp	r3, #31
 800cb5e:	d801      	bhi.n	800cb64 <create_name+0xcc>
 800cb60:	2304      	movs	r3, #4
 800cb62:	e000      	b.n	800cb66 <create_name+0xce>
 800cb64:	2300      	movs	r3, #0
 800cb66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cb6a:	e011      	b.n	800cb90 <create_name+0xf8>
		w = lfn[di - 1];
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cb72:	3b01      	subs	r3, #1
 800cb74:	005b      	lsls	r3, r3, #1
 800cb76:	68fa      	ldr	r2, [r7, #12]
 800cb78:	4413      	add	r3, r2
 800cb7a:	881b      	ldrh	r3, [r3, #0]
 800cb7c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800cb7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb80:	2b20      	cmp	r3, #32
 800cb82:	d002      	beq.n	800cb8a <create_name+0xf2>
 800cb84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb86:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb88:	d106      	bne.n	800cb98 <create_name+0x100>
		di--;
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	3b01      	subs	r3, #1
 800cb8e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1ea      	bne.n	800cb6c <create_name+0xd4>
 800cb96:	e000      	b.n	800cb9a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800cb98:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	005b      	lsls	r3, r3, #1
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	4413      	add	r3, r2
 800cba2:	2200      	movs	r2, #0
 800cba4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d101      	bne.n	800cbb0 <create_name+0x118>
 800cbac:	2306      	movs	r3, #6
 800cbae:	e127      	b.n	800ce00 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	3340      	adds	r3, #64	@ 0x40
 800cbb4:	220b      	movs	r2, #11
 800cbb6:	2120      	movs	r1, #32
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7fd fbb0 	bl	800a31e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	61bb      	str	r3, [r7, #24]
 800cbc2:	e002      	b.n	800cbca <create_name+0x132>
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	61bb      	str	r3, [r7, #24]
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	005b      	lsls	r3, r3, #1
 800cbce:	68fa      	ldr	r2, [r7, #12]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	881b      	ldrh	r3, [r3, #0]
 800cbd4:	2b20      	cmp	r3, #32
 800cbd6:	d0f5      	beq.n	800cbc4 <create_name+0x12c>
 800cbd8:	69bb      	ldr	r3, [r7, #24]
 800cbda:	005b      	lsls	r3, r3, #1
 800cbdc:	68fa      	ldr	r2, [r7, #12]
 800cbde:	4413      	add	r3, r2
 800cbe0:	881b      	ldrh	r3, [r3, #0]
 800cbe2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cbe4:	d0ee      	beq.n	800cbc4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800cbe6:	69bb      	ldr	r3, [r7, #24]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d009      	beq.n	800cc00 <create_name+0x168>
 800cbec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbf0:	f043 0303 	orr.w	r3, r3, #3
 800cbf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cbf8:	e002      	b.n	800cc00 <create_name+0x168>
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	3b01      	subs	r3, #1
 800cbfe:	617b      	str	r3, [r7, #20]
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d009      	beq.n	800cc1a <create_name+0x182>
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	005b      	lsls	r3, r3, #1
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	4413      	add	r3, r2
 800cc14:	881b      	ldrh	r3, [r3, #0]
 800cc16:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc18:	d1ef      	bne.n	800cbfa <create_name+0x162>

	i = b = 0; ni = 8;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cc20:	2300      	movs	r3, #0
 800cc22:	623b      	str	r3, [r7, #32]
 800cc24:	2308      	movs	r3, #8
 800cc26:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cc28:	69bb      	ldr	r3, [r7, #24]
 800cc2a:	1c5a      	adds	r2, r3, #1
 800cc2c:	61ba      	str	r2, [r7, #24]
 800cc2e:	005b      	lsls	r3, r3, #1
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	4413      	add	r3, r2
 800cc34:	881b      	ldrh	r3, [r3, #0]
 800cc36:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cc38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	f000 8090 	beq.w	800cd60 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cc40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc42:	2b20      	cmp	r3, #32
 800cc44:	d006      	beq.n	800cc54 <create_name+0x1bc>
 800cc46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc48:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc4a:	d10a      	bne.n	800cc62 <create_name+0x1ca>
 800cc4c:	69ba      	ldr	r2, [r7, #24]
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d006      	beq.n	800cc62 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800cc54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc58:	f043 0303 	orr.w	r3, r3, #3
 800cc5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cc60:	e07d      	b.n	800cd5e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cc62:	6a3a      	ldr	r2, [r7, #32]
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d203      	bcs.n	800cc72 <create_name+0x1da>
 800cc6a:	69ba      	ldr	r2, [r7, #24]
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d123      	bne.n	800ccba <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	2b0b      	cmp	r3, #11
 800cc76:	d106      	bne.n	800cc86 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800cc78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc7c:	f043 0303 	orr.w	r3, r3, #3
 800cc80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cc84:	e075      	b.n	800cd72 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cc86:	69ba      	ldr	r2, [r7, #24]
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d005      	beq.n	800cc9a <create_name+0x202>
 800cc8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc92:	f043 0303 	orr.w	r3, r3, #3
 800cc96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800cc9a:	69ba      	ldr	r2, [r7, #24]
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d866      	bhi.n	800cd70 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	61bb      	str	r3, [r7, #24]
 800cca6:	2308      	movs	r3, #8
 800cca8:	623b      	str	r3, [r7, #32]
 800ccaa:	230b      	movs	r3, #11
 800ccac:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ccae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ccb8:	e051      	b.n	800cd5e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ccba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ccbc:	2b7f      	cmp	r3, #127	@ 0x7f
 800ccbe:	d914      	bls.n	800ccea <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ccc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f001 ffef 	bl	800eca8 <ff_convert>
 800ccca:	4603      	mov	r3, r0
 800cccc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ccce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d004      	beq.n	800ccde <create_name+0x246>
 800ccd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ccd6:	3b80      	subs	r3, #128	@ 0x80
 800ccd8:	4a23      	ldr	r2, [pc, #140]	@ (800cd68 <create_name+0x2d0>)
 800ccda:	5cd3      	ldrb	r3, [r2, r3]
 800ccdc:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ccde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cce2:	f043 0302 	orr.w	r3, r3, #2
 800cce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ccea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d007      	beq.n	800cd00 <create_name+0x268>
 800ccf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	481d      	ldr	r0, [pc, #116]	@ (800cd6c <create_name+0x2d4>)
 800ccf6:	f7fd fb54 	bl	800a3a2 <chk_chr>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d008      	beq.n	800cd12 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cd00:	235f      	movs	r3, #95	@ 0x5f
 800cd02:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cd04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd08:	f043 0303 	orr.w	r3, r3, #3
 800cd0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cd10:	e01b      	b.n	800cd4a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cd12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cd14:	2b40      	cmp	r3, #64	@ 0x40
 800cd16:	d909      	bls.n	800cd2c <create_name+0x294>
 800cd18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cd1a:	2b5a      	cmp	r3, #90	@ 0x5a
 800cd1c:	d806      	bhi.n	800cd2c <create_name+0x294>
					b |= 2;
 800cd1e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cd22:	f043 0302 	orr.w	r3, r3, #2
 800cd26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cd2a:	e00e      	b.n	800cd4a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800cd2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cd2e:	2b60      	cmp	r3, #96	@ 0x60
 800cd30:	d90b      	bls.n	800cd4a <create_name+0x2b2>
 800cd32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cd34:	2b7a      	cmp	r3, #122	@ 0x7a
 800cd36:	d808      	bhi.n	800cd4a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800cd38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cd3c:	f043 0301 	orr.w	r3, r3, #1
 800cd40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cd44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cd46:	3b20      	subs	r3, #32
 800cd48:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cd4a:	6a3b      	ldr	r3, [r7, #32]
 800cd4c:	1c5a      	adds	r2, r3, #1
 800cd4e:	623a      	str	r2, [r7, #32]
 800cd50:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cd52:	b2d1      	uxtb	r1, r2
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	4413      	add	r3, r2
 800cd58:	460a      	mov	r2, r1
 800cd5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800cd5e:	e763      	b.n	800cc28 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800cd60:	bf00      	nop
 800cd62:	e006      	b.n	800cd72 <create_name+0x2da>
 800cd64:	0801275c 	.word	0x0801275c
 800cd68:	080127dc 	.word	0x080127dc
 800cd6c:	08012768 	.word	0x08012768
			if (si > di) break;			/* No extension */
 800cd70:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cd78:	2be5      	cmp	r3, #229	@ 0xe5
 800cd7a:	d103      	bne.n	800cd84 <create_name+0x2ec>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2205      	movs	r2, #5
 800cd80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	2b08      	cmp	r3, #8
 800cd88:	d104      	bne.n	800cd94 <create_name+0x2fc>
 800cd8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cd94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cd98:	f003 030c 	and.w	r3, r3, #12
 800cd9c:	2b0c      	cmp	r3, #12
 800cd9e:	d005      	beq.n	800cdac <create_name+0x314>
 800cda0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cda4:	f003 0303 	and.w	r3, r3, #3
 800cda8:	2b03      	cmp	r3, #3
 800cdaa:	d105      	bne.n	800cdb8 <create_name+0x320>
 800cdac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cdb0:	f043 0302 	orr.w	r3, r3, #2
 800cdb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cdb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cdbc:	f003 0302 	and.w	r3, r3, #2
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d117      	bne.n	800cdf4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cdc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cdc8:	f003 0303 	and.w	r3, r3, #3
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d105      	bne.n	800cddc <create_name+0x344>
 800cdd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cdd4:	f043 0310 	orr.w	r3, r3, #16
 800cdd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cddc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cde0:	f003 030c 	and.w	r3, r3, #12
 800cde4:	2b04      	cmp	r3, #4
 800cde6:	d105      	bne.n	800cdf4 <create_name+0x35c>
 800cde8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cdec:	f043 0308 	orr.w	r3, r3, #8
 800cdf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cdfa:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800cdfe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3728      	adds	r7, #40	@ 0x28
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b086      	sub	sp, #24
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ce1c:	e002      	b.n	800ce24 <follow_path+0x1c>
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	3301      	adds	r3, #1
 800ce22:	603b      	str	r3, [r7, #0]
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	2b2f      	cmp	r3, #47	@ 0x2f
 800ce2a:	d0f8      	beq.n	800ce1e <follow_path+0x16>
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	2b5c      	cmp	r3, #92	@ 0x5c
 800ce32:	d0f4      	beq.n	800ce1e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	2200      	movs	r2, #0
 800ce38:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	2b1f      	cmp	r3, #31
 800ce46:	d80a      	bhi.n	800ce5e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2280      	movs	r2, #128	@ 0x80
 800ce4c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800ce50:	2100      	movs	r1, #0
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f7fe fafd 	bl	800b452 <dir_sdi>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	75fb      	strb	r3, [r7, #23]
 800ce5c:	e07d      	b.n	800cf5a <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ce5e:	463b      	mov	r3, r7
 800ce60:	4619      	mov	r1, r3
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f7ff fe18 	bl	800ca98 <create_name>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ce6c:	7dfb      	ldrb	r3, [r7, #23]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d16e      	bne.n	800cf50 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f7ff fa4d 	bl	800c312 <dir_find>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800ce82:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ce84:	7dfb      	ldrb	r3, [r7, #23]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00a      	beq.n	800cea0 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ce8a:	7dfb      	ldrb	r3, [r7, #23]
 800ce8c:	2b04      	cmp	r3, #4
 800ce8e:	d161      	bne.n	800cf54 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ce90:	7afb      	ldrb	r3, [r7, #11]
 800ce92:	f003 0304 	and.w	r3, r3, #4
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d15c      	bne.n	800cf54 <follow_path+0x14c>
 800ce9a:	2305      	movs	r3, #5
 800ce9c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ce9e:	e059      	b.n	800cf54 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cea0:	7afb      	ldrb	r3, [r7, #11]
 800cea2:	f003 0304 	and.w	r3, r3, #4
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d156      	bne.n	800cf58 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	799b      	ldrb	r3, [r3, #6]
 800ceae:	f003 0310 	and.w	r3, r3, #16
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d102      	bne.n	800cebc <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800ceb6:	2305      	movs	r3, #5
 800ceb8:	75fb      	strb	r3, [r7, #23]
 800ceba:	e04e      	b.n	800cf5a <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	2b04      	cmp	r3, #4
 800cec2:	d130      	bne.n	800cf26 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	689a      	ldr	r2, [r3, #8]
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ced2:	4613      	mov	r3, r2
 800ced4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	79d2      	ldrb	r2, [r2, #7]
 800cedc:	431a      	orrs	r2, r3
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	695b      	ldr	r3, [r3, #20]
 800ceee:	3334      	adds	r3, #52	@ 0x34
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7fd f826 	bl	8009f42 <ld_dword>
 800cef6:	4602      	mov	r2, r0
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	695b      	ldr	r3, [r3, #20]
 800cf00:	3321      	adds	r3, #33	@ 0x21
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	f003 0302 	and.w	r3, r3, #2
 800cf08:	b2da      	uxtb	r2, r3
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	695b      	ldr	r3, [r3, #20]
 800cf12:	3338      	adds	r3, #56	@ 0x38
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7fd f837 	bl	8009f88 <ld_qword>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	6939      	ldr	r1, [r7, #16]
 800cf20:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800cf24:	e79b      	b.n	800ce5e <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	8992      	ldrh	r2, [r2, #12]
 800cf34:	fbb3 f0f2 	udiv	r0, r3, r2
 800cf38:	fb00 f202 	mul.w	r2, r0, r2
 800cf3c:	1a9b      	subs	r3, r3, r2
 800cf3e:	440b      	add	r3, r1
 800cf40:	4619      	mov	r1, r3
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f7fe fc5b 	bl	800b7fe <ld_clust>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cf4e:	e786      	b.n	800ce5e <follow_path+0x56>
			if (res != FR_OK) break;
 800cf50:	bf00      	nop
 800cf52:	e002      	b.n	800cf5a <follow_path+0x152>
				break;
 800cf54:	bf00      	nop
 800cf56:	e000      	b.n	800cf5a <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cf58:	bf00      	nop
			}
		}
	}

	return res;
 800cf5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3718      	adds	r7, #24
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b087      	sub	sp, #28
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cf6c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf70:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d031      	beq.n	800cfde <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	617b      	str	r3, [r7, #20]
 800cf80:	e002      	b.n	800cf88 <get_ldnumber+0x24>
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	3301      	adds	r3, #1
 800cf86:	617b      	str	r3, [r7, #20]
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	2b1f      	cmp	r3, #31
 800cf8e:	d903      	bls.n	800cf98 <get_ldnumber+0x34>
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	2b3a      	cmp	r3, #58	@ 0x3a
 800cf96:	d1f4      	bne.n	800cf82 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	2b3a      	cmp	r3, #58	@ 0x3a
 800cf9e:	d11c      	bne.n	800cfda <get_ldnumber+0x76>
			tp = *path;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	1c5a      	adds	r2, r3, #1
 800cfaa:	60fa      	str	r2, [r7, #12]
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	3b30      	subs	r3, #48	@ 0x30
 800cfb0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	2b09      	cmp	r3, #9
 800cfb6:	d80e      	bhi.n	800cfd6 <get_ldnumber+0x72>
 800cfb8:	68fa      	ldr	r2, [r7, #12]
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d10a      	bne.n	800cfd6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d107      	bne.n	800cfd6 <get_ldnumber+0x72>
					vol = (int)i;
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	617b      	str	r3, [r7, #20]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	697a      	ldr	r2, [r7, #20]
 800cfd4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	e002      	b.n	800cfe0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cfda:	2300      	movs	r3, #0
 800cfdc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cfde:	693b      	ldr	r3, [r7, #16]
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	371c      	adds	r7, #28
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr

0800cfec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2200      	movs	r2, #0
 800cffa:	70da      	strb	r2, [r3, #3]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f04f 32ff 	mov.w	r2, #4294967295
 800d002:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d004:	6839      	ldr	r1, [r7, #0]
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f7fd fb96 	bl	800a738 <move_window>
 800d00c:	4603      	mov	r3, r0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d001      	beq.n	800d016 <check_fs+0x2a>
 800d012:	2304      	movs	r3, #4
 800d014:	e044      	b.n	800d0a0 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	333c      	adds	r3, #60	@ 0x3c
 800d01a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fc ff76 	bl	8009f10 <ld_word>
 800d024:	4603      	mov	r3, r0
 800d026:	461a      	mov	r2, r3
 800d028:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d001      	beq.n	800d034 <check_fs+0x48>
 800d030:	2303      	movs	r3, #3
 800d032:	e035      	b.n	800d0a0 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d03a:	2be9      	cmp	r3, #233	@ 0xe9
 800d03c:	d009      	beq.n	800d052 <check_fs+0x66>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d044:	2beb      	cmp	r3, #235	@ 0xeb
 800d046:	d11e      	bne.n	800d086 <check_fs+0x9a>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d04e:	2b90      	cmp	r3, #144	@ 0x90
 800d050:	d119      	bne.n	800d086 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	333c      	adds	r3, #60	@ 0x3c
 800d056:	3336      	adds	r3, #54	@ 0x36
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fc ff72 	bl	8009f42 <ld_dword>
 800d05e:	4603      	mov	r3, r0
 800d060:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d064:	4a10      	ldr	r2, [pc, #64]	@ (800d0a8 <check_fs+0xbc>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d101      	bne.n	800d06e <check_fs+0x82>
 800d06a:	2300      	movs	r3, #0
 800d06c:	e018      	b.n	800d0a0 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	333c      	adds	r3, #60	@ 0x3c
 800d072:	3352      	adds	r3, #82	@ 0x52
 800d074:	4618      	mov	r0, r3
 800d076:	f7fc ff64 	bl	8009f42 <ld_dword>
 800d07a:	4603      	mov	r3, r0
 800d07c:	4a0b      	ldr	r2, [pc, #44]	@ (800d0ac <check_fs+0xc0>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d101      	bne.n	800d086 <check_fs+0x9a>
 800d082:	2300      	movs	r3, #0
 800d084:	e00c      	b.n	800d0a0 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	333c      	adds	r3, #60	@ 0x3c
 800d08a:	220b      	movs	r2, #11
 800d08c:	4908      	ldr	r1, [pc, #32]	@ (800d0b0 <check_fs+0xc4>)
 800d08e:	4618      	mov	r0, r3
 800d090:	f7fd f960 	bl	800a354 <mem_cmp>
 800d094:	4603      	mov	r3, r0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d101      	bne.n	800d09e <check_fs+0xb2>
 800d09a:	2301      	movs	r3, #1
 800d09c:	e000      	b.n	800d0a0 <check_fs+0xb4>
#endif
	return 2;
 800d09e:	2302      	movs	r3, #2
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	00544146 	.word	0x00544146
 800d0ac:	33544146 	.word	0x33544146
 800d0b0:	08012770 	.word	0x08012770

0800d0b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d0b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0b8:	b09c      	sub	sp, #112	@ 0x70
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	61f8      	str	r0, [r7, #28]
 800d0be:	61b9      	str	r1, [r7, #24]
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d0ca:	69f8      	ldr	r0, [r7, #28]
 800d0cc:	f7ff ff4a 	bl	800cf64 <get_ldnumber>
 800d0d0:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800d0d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	da01      	bge.n	800d0dc <find_volume+0x28>
 800d0d8:	230b      	movs	r3, #11
 800d0da:	e376      	b.n	800d7ca <find_volume+0x716>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d0dc:	4aa6      	ldr	r2, [pc, #664]	@ (800d378 <find_volume+0x2c4>)
 800d0de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0e4:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d0e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d101      	bne.n	800d0f0 <find_volume+0x3c>
 800d0ec:	230c      	movs	r3, #12
 800d0ee:	e36c      	b.n	800d7ca <find_volume+0x716>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d0f4:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d0f6:	7dfb      	ldrb	r3, [r7, #23]
 800d0f8:	f023 0301 	bic.w	r3, r3, #1
 800d0fc:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d0fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d01a      	beq.n	800d13c <find_volume+0x88>
		stat = disk_status(fs->drv);
 800d106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d108:	785b      	ldrb	r3, [r3, #1]
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fc fe60 	bl	8009dd0 <disk_status>
 800d110:	4603      	mov	r3, r0
 800d112:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d116:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d11a:	f003 0301 	and.w	r3, r3, #1
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d10c      	bne.n	800d13c <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d122:	7dfb      	ldrb	r3, [r7, #23]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d007      	beq.n	800d138 <find_volume+0x84>
 800d128:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d12c:	f003 0304 	and.w	r3, r3, #4
 800d130:	2b00      	cmp	r3, #0
 800d132:	d001      	beq.n	800d138 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800d134:	230a      	movs	r3, #10
 800d136:	e348      	b.n	800d7ca <find_volume+0x716>
			}
			return FR_OK;				/* The file system object is valid */
 800d138:	2300      	movs	r3, #0
 800d13a:	e346      	b.n	800d7ca <find_volume+0x716>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d13c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d13e:	2200      	movs	r2, #0
 800d140:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d144:	b2da      	uxtb	r2, r3
 800d146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d148:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d14a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d14c:	785b      	ldrb	r3, [r3, #1]
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fc fe58 	bl	8009e04 <disk_initialize>
 800d154:	4603      	mov	r3, r0
 800d156:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d15a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d15e:	f003 0301 	and.w	r3, r3, #1
 800d162:	2b00      	cmp	r3, #0
 800d164:	d001      	beq.n	800d16a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d166:	2303      	movs	r3, #3
 800d168:	e32f      	b.n	800d7ca <find_volume+0x716>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d16a:	7dfb      	ldrb	r3, [r7, #23]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d007      	beq.n	800d180 <find_volume+0xcc>
 800d170:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d174:	f003 0304 	and.w	r3, r3, #4
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d001      	beq.n	800d180 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800d17c:	230a      	movs	r3, #10
 800d17e:	e324      	b.n	800d7ca <find_volume+0x716>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d182:	7858      	ldrb	r0, [r3, #1]
 800d184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d186:	330c      	adds	r3, #12
 800d188:	461a      	mov	r2, r3
 800d18a:	2102      	movs	r1, #2
 800d18c:	f7fc fea2 	bl	8009ed4 <disk_ioctl>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d001      	beq.n	800d19a <find_volume+0xe6>
 800d196:	2301      	movs	r3, #1
 800d198:	e317      	b.n	800d7ca <find_volume+0x716>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d19a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d19c:	899b      	ldrh	r3, [r3, #12]
 800d19e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1a2:	d80d      	bhi.n	800d1c0 <find_volume+0x10c>
 800d1a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1a6:	899b      	ldrh	r3, [r3, #12]
 800d1a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1ac:	d308      	bcc.n	800d1c0 <find_volume+0x10c>
 800d1ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1b0:	899b      	ldrh	r3, [r3, #12]
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1b6:	899b      	ldrh	r3, [r3, #12]
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	4013      	ands	r3, r2
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d001      	beq.n	800d1c4 <find_volume+0x110>
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e302      	b.n	800d7ca <find_volume+0x716>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d1c8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d1ca:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d1cc:	f7ff ff0e 	bl	800cfec <check_fs>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d1d6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d14d      	bne.n	800d27a <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d1de:	2300      	movs	r3, #0
 800d1e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d1e2:	e020      	b.n	800d226 <find_volume+0x172>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d1e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1e6:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800d1ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d1ec:	011b      	lsls	r3, r3, #4
 800d1ee:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d1f2:	4413      	add	r3, r2
 800d1f4:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d1f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1f8:	3304      	adds	r3, #4
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d006      	beq.n	800d20e <find_volume+0x15a>
 800d200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d202:	3308      	adds	r3, #8
 800d204:	4618      	mov	r0, r3
 800d206:	f7fc fe9c 	bl	8009f42 <ld_dword>
 800d20a:	4602      	mov	r2, r0
 800d20c:	e000      	b.n	800d210 <find_volume+0x15c>
 800d20e:	2200      	movs	r2, #0
 800d210:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	3360      	adds	r3, #96	@ 0x60
 800d216:	f107 0110 	add.w	r1, r7, #16
 800d21a:	440b      	add	r3, r1
 800d21c:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d220:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d222:	3301      	adds	r3, #1
 800d224:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d226:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d228:	2b03      	cmp	r3, #3
 800d22a:	d9db      	bls.n	800d1e4 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d22c:	2300      	movs	r3, #0
 800d22e:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800d230:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d232:	2b00      	cmp	r3, #0
 800d234:	d002      	beq.n	800d23c <find_volume+0x188>
 800d236:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d238:	3b01      	subs	r3, #1
 800d23a:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d23c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	3360      	adds	r3, #96	@ 0x60
 800d242:	f107 0210 	add.w	r2, r7, #16
 800d246:	4413      	add	r3, r2
 800d248:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800d24c:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d24e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d250:	2b00      	cmp	r3, #0
 800d252:	d005      	beq.n	800d260 <find_volume+0x1ac>
 800d254:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d256:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d258:	f7ff fec8 	bl	800cfec <check_fs>
 800d25c:	4603      	mov	r3, r0
 800d25e:	e000      	b.n	800d262 <find_volume+0x1ae>
 800d260:	2303      	movs	r3, #3
 800d262:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d266:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d905      	bls.n	800d27a <find_volume+0x1c6>
 800d26e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d270:	3301      	adds	r3, #1
 800d272:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d274:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d276:	2b03      	cmp	r3, #3
 800d278:	d9e0      	bls.n	800d23c <find_volume+0x188>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d27a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d27e:	2b04      	cmp	r3, #4
 800d280:	d101      	bne.n	800d286 <find_volume+0x1d2>
 800d282:	2301      	movs	r3, #1
 800d284:	e2a1      	b.n	800d7ca <find_volume+0x716>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d286:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d901      	bls.n	800d292 <find_volume+0x1de>
 800d28e:	230d      	movs	r3, #13
 800d290:	e29b      	b.n	800d7ca <find_volume+0x716>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800d292:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d296:	2b01      	cmp	r3, #1
 800d298:	f040 8101 	bne.w	800d49e <find_volume+0x3ea>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800d29c:	230b      	movs	r3, #11
 800d29e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d2a0:	e002      	b.n	800d2a8 <find_volume+0x1f4>
 800d2a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d2a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d2aa:	2b3f      	cmp	r3, #63	@ 0x3f
 800d2ac:	d806      	bhi.n	800d2bc <find_volume+0x208>
 800d2ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d2b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d2b2:	4413      	add	r3, r2
 800d2b4:	333c      	adds	r3, #60	@ 0x3c
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d0f2      	beq.n	800d2a2 <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800d2bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d2be:	2b3f      	cmp	r3, #63	@ 0x3f
 800d2c0:	d801      	bhi.n	800d2c6 <find_volume+0x212>
 800d2c2:	230d      	movs	r3, #13
 800d2c4:	e281      	b.n	800d7ca <find_volume+0x716>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800d2c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2c8:	333c      	adds	r3, #60	@ 0x3c
 800d2ca:	3368      	adds	r3, #104	@ 0x68
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7fc fe1f 	bl	8009f10 <ld_word>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d2d8:	d001      	beq.n	800d2de <find_volume+0x22a>
 800d2da:	230d      	movs	r3, #13
 800d2dc:	e275      	b.n	800d7ca <find_volume+0x716>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800d2de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2e0:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	4093      	lsls	r3, r2
 800d2ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d2ec:	8992      	ldrh	r2, [r2, #12]
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d001      	beq.n	800d2f6 <find_volume+0x242>
			return FR_NO_FILESYSTEM;
 800d2f2:	230d      	movs	r3, #13
 800d2f4:	e269      	b.n	800d7ca <find_volume+0x716>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800d2f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2f8:	333c      	adds	r3, #60	@ 0x3c
 800d2fa:	3348      	adds	r3, #72	@ 0x48
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7fc fe43 	bl	8009f88 <ld_qword>
 800d302:	4602      	mov	r2, r0
 800d304:	460b      	mov	r3, r1
 800d306:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d308:	2000      	movs	r0, #0
 800d30a:	60b9      	str	r1, [r7, #8]
 800d30c:	60f8      	str	r0, [r7, #12]
 800d30e:	68b9      	ldr	r1, [r7, #8]
 800d310:	1851      	adds	r1, r2, r1
 800d312:	6039      	str	r1, [r7, #0]
 800d314:	68f9      	ldr	r1, [r7, #12]
 800d316:	eb43 0101 	adc.w	r1, r3, r1
 800d31a:	6079      	str	r1, [r7, #4]
 800d31c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d320:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800d324:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d301      	bcc.n	800d330 <find_volume+0x27c>
 800d32c:	230d      	movs	r3, #13
 800d32e:	e24c      	b.n	800d7ca <find_volume+0x716>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800d330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d332:	333c      	adds	r3, #60	@ 0x3c
 800d334:	3354      	adds	r3, #84	@ 0x54
 800d336:	4618      	mov	r0, r3
 800d338:	f7fc fe03 	bl	8009f42 <ld_dword>
 800d33c:	4602      	mov	r2, r0
 800d33e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d340:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800d342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d344:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 800d348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d34a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800d34c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d34e:	789b      	ldrb	r3, [r3, #2]
 800d350:	2b01      	cmp	r3, #1
 800d352:	d001      	beq.n	800d358 <find_volume+0x2a4>
 800d354:	230d      	movs	r3, #13
 800d356:	e238      	b.n	800d7ca <find_volume+0x716>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800d358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d35a:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800d35e:	461a      	mov	r2, r3
 800d360:	2301      	movs	r3, #1
 800d362:	4093      	lsls	r3, r2
 800d364:	b29a      	uxth	r2, r3
 800d366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d368:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800d36a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d36c:	895b      	ldrh	r3, [r3, #10]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d104      	bne.n	800d37c <find_volume+0x2c8>
 800d372:	230d      	movs	r3, #13
 800d374:	e229      	b.n	800d7ca <find_volume+0x716>
 800d376:	bf00      	nop
 800d378:	20002440 	.word	0x20002440

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800d37c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d37e:	333c      	adds	r3, #60	@ 0x3c
 800d380:	335c      	adds	r3, #92	@ 0x5c
 800d382:	4618      	mov	r0, r3
 800d384:	f7fc fddd 	bl	8009f42 <ld_dword>
 800d388:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800d38a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d38c:	4a99      	ldr	r2, [pc, #612]	@ (800d5f4 <find_volume+0x540>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d901      	bls.n	800d396 <find_volume+0x2e2>
 800d392:	230d      	movs	r3, #13
 800d394:	e219      	b.n	800d7ca <find_volume+0x716>
		fs->n_fatent = nclst + 2;
 800d396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d398:	1c9a      	adds	r2, r3, #2
 800d39a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d39c:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800d39e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d3a2:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800d3a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3a6:	333c      	adds	r3, #60	@ 0x3c
 800d3a8:	3358      	adds	r3, #88	@ 0x58
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7fc fdc9 	bl	8009f42 <ld_dword>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3b4:	441a      	add	r2, r3
 800d3b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3b8:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800d3ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3bc:	333c      	adds	r3, #60	@ 0x3c
 800d3be:	3350      	adds	r3, #80	@ 0x50
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7fc fdbe 	bl	8009f42 <ld_dword>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3ca:	441a      	add	r2, r3
 800d3cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3ce:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800d3d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	469a      	mov	sl, r3
 800d3d8:	4693      	mov	fp, r2
 800d3da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3dc:	895b      	ldrh	r3, [r3, #10]
 800d3de:	461a      	mov	r2, r3
 800d3e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3e2:	fb02 f303 	mul.w	r3, r2, r3
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	4698      	mov	r8, r3
 800d3ea:	4691      	mov	r9, r2
 800d3ec:	eb1a 0408 	adds.w	r4, sl, r8
 800d3f0:	eb4b 0509 	adc.w	r5, fp, r9
 800d3f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800d3f8:	42a2      	cmp	r2, r4
 800d3fa:	41ab      	sbcs	r3, r5
 800d3fc:	d201      	bcs.n	800d402 <find_volume+0x34e>
 800d3fe:	230d      	movs	r3, #13
 800d400:	e1e3      	b.n	800d7ca <find_volume+0x716>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800d402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d404:	333c      	adds	r3, #60	@ 0x3c
 800d406:	3360      	adds	r3, #96	@ 0x60
 800d408:	4618      	mov	r0, r3
 800d40a:	f7fc fd9a 	bl	8009f42 <ld_dword>
 800d40e:	4602      	mov	r2, r0
 800d410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d412:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800d414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d418:	4619      	mov	r1, r3
 800d41a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d41c:	f7fd fa2a 	bl	800a874 <clust2sect>
 800d420:	4603      	mov	r3, r0
 800d422:	4619      	mov	r1, r3
 800d424:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d426:	f7fd f987 	bl	800a738 <move_window>
 800d42a:	4603      	mov	r3, r0
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d001      	beq.n	800d434 <find_volume+0x380>
 800d430:	2301      	movs	r3, #1
 800d432:	e1ca      	b.n	800d7ca <find_volume+0x716>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d434:	2300      	movs	r3, #0
 800d436:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d438:	e015      	b.n	800d466 <find_volume+0x3b2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d43a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d43c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d43e:	4413      	add	r3, r2
 800d440:	333c      	adds	r3, #60	@ 0x3c
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	2b81      	cmp	r3, #129	@ 0x81
 800d446:	d10b      	bne.n	800d460 <find_volume+0x3ac>
 800d448:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d44a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800d44e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d450:	3314      	adds	r3, #20
 800d452:	4413      	add	r3, r2
 800d454:	4618      	mov	r0, r3
 800d456:	f7fc fd74 	bl	8009f42 <ld_dword>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b02      	cmp	r3, #2
 800d45e:	d009      	beq.n	800d474 <find_volume+0x3c0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d460:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d462:	3320      	adds	r3, #32
 800d464:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d468:	899b      	ldrh	r3, [r3, #12]
 800d46a:	461a      	mov	r2, r3
 800d46c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d46e:	4293      	cmp	r3, r2
 800d470:	d3e3      	bcc.n	800d43a <find_volume+0x386>
 800d472:	e000      	b.n	800d476 <find_volume+0x3c2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d474:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800d476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d478:	899b      	ldrh	r3, [r3, #12]
 800d47a:	461a      	mov	r2, r3
 800d47c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d47e:	4293      	cmp	r3, r2
 800d480:	d101      	bne.n	800d486 <find_volume+0x3d2>
 800d482:	230d      	movs	r3, #13
 800d484:	e1a1      	b.n	800d7ca <find_volume+0x716>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d488:	f04f 32ff 	mov.w	r2, #4294967295
 800d48c:	61da      	str	r2, [r3, #28]
 800d48e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d490:	69da      	ldr	r2, [r3, #28]
 800d492:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d494:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800d496:	2304      	movs	r3, #4
 800d498:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800d49c:	e17d      	b.n	800d79a <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d49e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4a0:	333c      	adds	r3, #60	@ 0x3c
 800d4a2:	330b      	adds	r3, #11
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7fc fd33 	bl	8009f10 <ld_word>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4b0:	899b      	ldrh	r3, [r3, #12]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d001      	beq.n	800d4ba <find_volume+0x406>
 800d4b6:	230d      	movs	r3, #13
 800d4b8:	e187      	b.n	800d7ca <find_volume+0x716>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d4ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4bc:	333c      	adds	r3, #60	@ 0x3c
 800d4be:	3316      	adds	r3, #22
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7fc fd25 	bl	8009f10 <ld_word>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d4ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d106      	bne.n	800d4de <find_volume+0x42a>
 800d4d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4d2:	333c      	adds	r3, #60	@ 0x3c
 800d4d4:	3324      	adds	r3, #36	@ 0x24
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fc fd33 	bl	8009f42 <ld_dword>
 800d4dc:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800d4de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d4e2:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d4e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4e6:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800d4ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4ec:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d4ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4f0:	789b      	ldrb	r3, [r3, #2]
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d005      	beq.n	800d502 <find_volume+0x44e>
 800d4f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4f8:	789b      	ldrb	r3, [r3, #2]
 800d4fa:	2b02      	cmp	r3, #2
 800d4fc:	d001      	beq.n	800d502 <find_volume+0x44e>
 800d4fe:	230d      	movs	r3, #13
 800d500:	e163      	b.n	800d7ca <find_volume+0x716>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d504:	789b      	ldrb	r3, [r3, #2]
 800d506:	461a      	mov	r2, r3
 800d508:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d50a:	fb02 f303 	mul.w	r3, r2, r3
 800d50e:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d510:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d512:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800d516:	461a      	mov	r2, r3
 800d518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d51a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d51c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d51e:	895b      	ldrh	r3, [r3, #10]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d008      	beq.n	800d536 <find_volume+0x482>
 800d524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d526:	895b      	ldrh	r3, [r3, #10]
 800d528:	461a      	mov	r2, r3
 800d52a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d52c:	895b      	ldrh	r3, [r3, #10]
 800d52e:	3b01      	subs	r3, #1
 800d530:	4013      	ands	r3, r2
 800d532:	2b00      	cmp	r3, #0
 800d534:	d001      	beq.n	800d53a <find_volume+0x486>
 800d536:	230d      	movs	r3, #13
 800d538:	e147      	b.n	800d7ca <find_volume+0x716>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d53a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d53c:	333c      	adds	r3, #60	@ 0x3c
 800d53e:	3311      	adds	r3, #17
 800d540:	4618      	mov	r0, r3
 800d542:	f7fc fce5 	bl	8009f10 <ld_word>
 800d546:	4603      	mov	r3, r0
 800d548:	461a      	mov	r2, r3
 800d54a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d54c:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d54e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d550:	891b      	ldrh	r3, [r3, #8]
 800d552:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d554:	8992      	ldrh	r2, [r2, #12]
 800d556:	0952      	lsrs	r2, r2, #5
 800d558:	b292      	uxth	r2, r2
 800d55a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d55e:	fb01 f202 	mul.w	r2, r1, r2
 800d562:	1a9b      	subs	r3, r3, r2
 800d564:	b29b      	uxth	r3, r3
 800d566:	2b00      	cmp	r3, #0
 800d568:	d001      	beq.n	800d56e <find_volume+0x4ba>
 800d56a:	230d      	movs	r3, #13
 800d56c:	e12d      	b.n	800d7ca <find_volume+0x716>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d56e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d570:	333c      	adds	r3, #60	@ 0x3c
 800d572:	3313      	adds	r3, #19
 800d574:	4618      	mov	r0, r3
 800d576:	f7fc fccb 	bl	8009f10 <ld_word>
 800d57a:	4603      	mov	r3, r0
 800d57c:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d57e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d580:	2b00      	cmp	r3, #0
 800d582:	d106      	bne.n	800d592 <find_volume+0x4de>
 800d584:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d586:	333c      	adds	r3, #60	@ 0x3c
 800d588:	3320      	adds	r3, #32
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7fc fcd9 	bl	8009f42 <ld_dword>
 800d590:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d594:	333c      	adds	r3, #60	@ 0x3c
 800d596:	330e      	adds	r3, #14
 800d598:	4618      	mov	r0, r3
 800d59a:	f7fc fcb9 	bl	8009f10 <ld_word>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d5a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d101      	bne.n	800d5b0 <find_volume+0x4fc>
 800d5ac:	230d      	movs	r3, #13
 800d5ae:	e10c      	b.n	800d7ca <find_volume+0x716>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d5b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d5b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d5b6:	4413      	add	r3, r2
 800d5b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d5ba:	8911      	ldrh	r1, [r2, #8]
 800d5bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d5be:	8992      	ldrh	r2, [r2, #12]
 800d5c0:	0952      	lsrs	r2, r2, #5
 800d5c2:	b292      	uxth	r2, r2
 800d5c4:	fbb1 f2f2 	udiv	r2, r1, r2
 800d5c8:	b292      	uxth	r2, r2
 800d5ca:	4413      	add	r3, r2
 800d5cc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d5ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d5d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d201      	bcs.n	800d5da <find_volume+0x526>
 800d5d6:	230d      	movs	r3, #13
 800d5d8:	e0f7      	b.n	800d7ca <find_volume+0x716>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d5da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d5dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5de:	1ad3      	subs	r3, r2, r3
 800d5e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d5e2:	8952      	ldrh	r2, [r2, #10]
 800d5e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d5ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d103      	bne.n	800d5f8 <find_volume+0x544>
 800d5f0:	230d      	movs	r3, #13
 800d5f2:	e0ea      	b.n	800d7ca <find_volume+0x716>
 800d5f4:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800d5f8:	2303      	movs	r3, #3
 800d5fa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d5fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d600:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d604:	4293      	cmp	r3, r2
 800d606:	d802      	bhi.n	800d60e <find_volume+0x55a>
 800d608:	2302      	movs	r3, #2
 800d60a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d60e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d610:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d614:	4293      	cmp	r3, r2
 800d616:	d802      	bhi.n	800d61e <find_volume+0x56a>
 800d618:	2301      	movs	r3, #1
 800d61a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d61e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d620:	1c9a      	adds	r2, r3, #2
 800d622:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d624:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800d626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d628:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d62a:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d62c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d630:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d632:	441a      	add	r2, r3
 800d634:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d636:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800d638:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d63a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d63c:	441a      	add	r2, r3
 800d63e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d640:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 800d642:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d646:	2b03      	cmp	r3, #3
 800d648:	d11e      	bne.n	800d688 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d64a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d64c:	333c      	adds	r3, #60	@ 0x3c
 800d64e:	332a      	adds	r3, #42	@ 0x2a
 800d650:	4618      	mov	r0, r3
 800d652:	f7fc fc5d 	bl	8009f10 <ld_word>
 800d656:	4603      	mov	r3, r0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d001      	beq.n	800d660 <find_volume+0x5ac>
 800d65c:	230d      	movs	r3, #13
 800d65e:	e0b4      	b.n	800d7ca <find_volume+0x716>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d662:	891b      	ldrh	r3, [r3, #8]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d001      	beq.n	800d66c <find_volume+0x5b8>
 800d668:	230d      	movs	r3, #13
 800d66a:	e0ae      	b.n	800d7ca <find_volume+0x716>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d66c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d66e:	333c      	adds	r3, #60	@ 0x3c
 800d670:	332c      	adds	r3, #44	@ 0x2c
 800d672:	4618      	mov	r0, r3
 800d674:	f7fc fc65 	bl	8009f42 <ld_dword>
 800d678:	4602      	mov	r2, r0
 800d67a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d67c:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d67e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d680:	6a1b      	ldr	r3, [r3, #32]
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d686:	e01f      	b.n	800d6c8 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d68a:	891b      	ldrh	r3, [r3, #8]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d101      	bne.n	800d694 <find_volume+0x5e0>
 800d690:	230d      	movs	r3, #13
 800d692:	e09a      	b.n	800d7ca <find_volume+0x716>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d698:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d69a:	441a      	add	r2, r3
 800d69c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d69e:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d6a0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d6a4:	2b02      	cmp	r3, #2
 800d6a6:	d103      	bne.n	800d6b0 <find_volume+0x5fc>
 800d6a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6aa:	6a1b      	ldr	r3, [r3, #32]
 800d6ac:	005b      	lsls	r3, r3, #1
 800d6ae:	e00a      	b.n	800d6c6 <find_volume+0x612>
 800d6b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6b2:	6a1a      	ldr	r2, [r3, #32]
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	005b      	lsls	r3, r3, #1
 800d6b8:	4413      	add	r3, r2
 800d6ba:	085a      	lsrs	r2, r3, #1
 800d6bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6be:	6a1b      	ldr	r3, [r3, #32]
 800d6c0:	f003 0301 	and.w	r3, r3, #1
 800d6c4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d6c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d6c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d6cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6ce:	899b      	ldrh	r3, [r3, #12]
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d6d4:	440b      	add	r3, r1
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d6da:	8989      	ldrh	r1, [r1, #12]
 800d6dc:	fbb3 f3f1 	udiv	r3, r3, r1
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d201      	bcs.n	800d6e8 <find_volume+0x634>
 800d6e4:	230d      	movs	r3, #13
 800d6e6:	e070      	b.n	800d7ca <find_volume+0x716>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d6e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ee:	61da      	str	r2, [r3, #28]
 800d6f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6f2:	69da      	ldr	r2, [r3, #28]
 800d6f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6f6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800d6f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6fa:	2280      	movs	r2, #128	@ 0x80
 800d6fc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d6fe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d702:	2b03      	cmp	r3, #3
 800d704:	d149      	bne.n	800d79a <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d708:	333c      	adds	r3, #60	@ 0x3c
 800d70a:	3330      	adds	r3, #48	@ 0x30
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7fc fbff 	bl	8009f10 <ld_word>
 800d712:	4603      	mov	r3, r0
 800d714:	2b01      	cmp	r3, #1
 800d716:	d140      	bne.n	800d79a <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d718:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d71a:	3301      	adds	r3, #1
 800d71c:	4619      	mov	r1, r3
 800d71e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d720:	f7fd f80a 	bl	800a738 <move_window>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d137      	bne.n	800d79a <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 800d72a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d72c:	2200      	movs	r2, #0
 800d72e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d730:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d732:	333c      	adds	r3, #60	@ 0x3c
 800d734:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fc fbe9 	bl	8009f10 <ld_word>
 800d73e:	4603      	mov	r3, r0
 800d740:	461a      	mov	r2, r3
 800d742:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d746:	429a      	cmp	r2, r3
 800d748:	d127      	bne.n	800d79a <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d74a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d74c:	333c      	adds	r3, #60	@ 0x3c
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fc fbf7 	bl	8009f42 <ld_dword>
 800d754:	4603      	mov	r3, r0
 800d756:	4a1f      	ldr	r2, [pc, #124]	@ (800d7d4 <find_volume+0x720>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d11e      	bne.n	800d79a <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d75c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d75e:	333c      	adds	r3, #60	@ 0x3c
 800d760:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d764:	4618      	mov	r0, r3
 800d766:	f7fc fbec 	bl	8009f42 <ld_dword>
 800d76a:	4603      	mov	r3, r0
 800d76c:	4a1a      	ldr	r2, [pc, #104]	@ (800d7d8 <find_volume+0x724>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d113      	bne.n	800d79a <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d774:	333c      	adds	r3, #60	@ 0x3c
 800d776:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7fc fbe1 	bl	8009f42 <ld_dword>
 800d780:	4602      	mov	r2, r0
 800d782:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d784:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d788:	333c      	adds	r3, #60	@ 0x3c
 800d78a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d78e:	4618      	mov	r0, r3
 800d790:	f7fc fbd7 	bl	8009f42 <ld_dword>
 800d794:	4602      	mov	r2, r0
 800d796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d798:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d79a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d79c:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800d7a0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d7a2:	4b0e      	ldr	r3, [pc, #56]	@ (800d7dc <find_volume+0x728>)
 800d7a4:	881b      	ldrh	r3, [r3, #0]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	b29a      	uxth	r2, r3
 800d7aa:	4b0c      	ldr	r3, [pc, #48]	@ (800d7dc <find_volume+0x728>)
 800d7ac:	801a      	strh	r2, [r3, #0]
 800d7ae:	4b0b      	ldr	r3, [pc, #44]	@ (800d7dc <find_volume+0x728>)
 800d7b0:	881a      	ldrh	r2, [r3, #0]
 800d7b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7b4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d7b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7b8:	4a09      	ldr	r2, [pc, #36]	@ (800d7e0 <find_volume+0x72c>)
 800d7ba:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800d7bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7be:	4a09      	ldr	r2, [pc, #36]	@ (800d7e4 <find_volume+0x730>)
 800d7c0:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d7c2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d7c4:	f7fc ff50 	bl	800a668 <clear_lock>
#endif
	return FR_OK;
 800d7c8:	2300      	movs	r3, #0
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3770      	adds	r7, #112	@ 0x70
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d7d4:	41615252 	.word	0x41615252
 800d7d8:	61417272 	.word	0x61417272
 800d7dc:	20002444 	.word	0x20002444
 800d7e0:	200026c8 	.word	0x200026c8
 800d7e4:	20002468 	.word	0x20002468

0800d7e8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d7f2:	2309      	movs	r3, #9
 800d7f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d01c      	beq.n	800d836 <validate+0x4e>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d018      	beq.n	800d836 <validate+0x4e>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d013      	beq.n	800d836 <validate+0x4e>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	889a      	ldrh	r2, [r3, #4]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	88db      	ldrh	r3, [r3, #6]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d10c      	bne.n	800d836 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	785b      	ldrb	r3, [r3, #1]
 800d822:	4618      	mov	r0, r3
 800d824:	f7fc fad4 	bl	8009dd0 <disk_status>
 800d828:	4603      	mov	r3, r0
 800d82a:	f003 0301 	and.w	r3, r3, #1
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d101      	bne.n	800d836 <validate+0x4e>
			res = FR_OK;
 800d832:	2300      	movs	r3, #0
 800d834:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d836:	7bfb      	ldrb	r3, [r7, #15]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d102      	bne.n	800d842 <validate+0x5a>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	e000      	b.n	800d844 <validate+0x5c>
 800d842:	2300      	movs	r3, #0
 800d844:	683a      	ldr	r2, [r7, #0]
 800d846:	6013      	str	r3, [r2, #0]
	return res;
 800d848:	7bfb      	ldrb	r3, [r7, #15]
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3710      	adds	r7, #16
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
	...

0800d854 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b088      	sub	sp, #32
 800d858:	af00      	add	r7, sp, #0
 800d85a:	60f8      	str	r0, [r7, #12]
 800d85c:	60b9      	str	r1, [r7, #8]
 800d85e:	4613      	mov	r3, r2
 800d860:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d866:	f107 0310 	add.w	r3, r7, #16
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7ff fb7a 	bl	800cf64 <get_ldnumber>
 800d870:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	2b00      	cmp	r3, #0
 800d876:	da01      	bge.n	800d87c <f_mount+0x28>
 800d878:	230b      	movs	r3, #11
 800d87a:	e02b      	b.n	800d8d4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d87c:	4a17      	ldr	r2, [pc, #92]	@ (800d8dc <f_mount+0x88>)
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d884:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d886:	69bb      	ldr	r3, [r7, #24]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d005      	beq.n	800d898 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d88c:	69b8      	ldr	r0, [r7, #24]
 800d88e:	f7fc feeb 	bl	800a668 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	2200      	movs	r2, #0
 800d896:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d002      	beq.n	800d8a4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	490d      	ldr	r1, [pc, #52]	@ (800d8dc <f_mount+0x88>)
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d002      	beq.n	800d8ba <f_mount+0x66>
 800d8b4:	79fb      	ldrb	r3, [r7, #7]
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d001      	beq.n	800d8be <f_mount+0x6a>
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	e00a      	b.n	800d8d4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d8be:	f107 010c 	add.w	r1, r7, #12
 800d8c2:	f107 0308 	add.w	r3, r7, #8
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7ff fbf3 	bl	800d0b4 <find_volume>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d8d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3720      	adds	r7, #32
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}
 800d8dc:	20002440 	.word	0x20002440

0800d8e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d8e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d8e4:	b0a8      	sub	sp, #160	@ 0xa0
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6278      	str	r0, [r7, #36]	@ 0x24
 800d8ea:	6239      	str	r1, [r7, #32]
 800d8ec:	4613      	mov	r3, r2
 800d8ee:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d101      	bne.n	800d8fa <f_open+0x1a>
 800d8f6:	2309      	movs	r3, #9
 800d8f8:	e2bc      	b.n	800de74 <f_open+0x594>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d8fa:	7ffb      	ldrb	r3, [r7, #31]
 800d8fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d900:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800d902:	7ffb      	ldrb	r3, [r7, #31]
 800d904:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800d908:	f107 0020 	add.w	r0, r7, #32
 800d90c:	461a      	mov	r2, r3
 800d90e:	f7ff fbd1 	bl	800d0b4 <find_volume>
 800d912:	4603      	mov	r3, r0
 800d914:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) {
 800d918:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f040 82a0 	bne.w	800de62 <f_open+0x582>
		dj.obj.fs = fs;
 800d922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d924:	633b      	str	r3, [r7, #48]	@ 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d926:	6a3b      	ldr	r3, [r7, #32]
 800d928:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d92c:	4619      	mov	r1, r3
 800d92e:	4610      	mov	r0, r2
 800d930:	f7ff fa6a 	bl	800ce08 <follow_path>
 800d934:	4603      	mov	r3, r0
 800d936:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d93a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d118      	bne.n	800d974 <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d942:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800d946:	b25b      	sxtb	r3, r3
 800d948:	2b00      	cmp	r3, #0
 800d94a:	da03      	bge.n	800d954 <f_open+0x74>
				res = FR_INVALID_NAME;
 800d94c:	2306      	movs	r3, #6
 800d94e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800d952:	e00f      	b.n	800d974 <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d954:	7ffb      	ldrb	r3, [r7, #31]
 800d956:	2b01      	cmp	r3, #1
 800d958:	bf8c      	ite	hi
 800d95a:	2301      	movhi	r3, #1
 800d95c:	2300      	movls	r3, #0
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	461a      	mov	r2, r3
 800d962:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d966:	4611      	mov	r1, r2
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fc fd35 	bl	800a3d8 <chk_lock>
 800d96e:	4603      	mov	r3, r0
 800d970:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d974:	7ffb      	ldrb	r3, [r7, #31]
 800d976:	f003 031c 	and.w	r3, r3, #28
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	f000 8117 	beq.w	800dbae <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 800d980:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d984:	2b00      	cmp	r3, #0
 800d986:	d017      	beq.n	800d9b8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d988:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d98c:	2b04      	cmp	r3, #4
 800d98e:	d10e      	bne.n	800d9ae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d990:	f7fc fd7e 	bl	800a490 <enq_lock>
 800d994:	4603      	mov	r3, r0
 800d996:	2b00      	cmp	r3, #0
 800d998:	d006      	beq.n	800d9a8 <f_open+0xc8>
 800d99a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fe fde2 	bl	800c568 <dir_register>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	e000      	b.n	800d9aa <f_open+0xca>
 800d9a8:	2312      	movs	r3, #18
 800d9aa:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d9ae:	7ffb      	ldrb	r3, [r7, #31]
 800d9b0:	f043 0308 	orr.w	r3, r3, #8
 800d9b4:	77fb      	strb	r3, [r7, #31]
 800d9b6:	e011      	b.n	800d9dc <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d9b8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d9bc:	f003 0311 	and.w	r3, r3, #17
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d003      	beq.n	800d9cc <f_open+0xec>
					res = FR_DENIED;
 800d9c4:	2307      	movs	r3, #7
 800d9c6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800d9ca:	e007      	b.n	800d9dc <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d9cc:	7ffb      	ldrb	r3, [r7, #31]
 800d9ce:	f003 0304 	and.w	r3, r3, #4
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d002      	beq.n	800d9dc <f_open+0xfc>
 800d9d6:	2308      	movs	r3, #8
 800d9d8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d9dc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	f040 8100 	bne.w	800dbe6 <f_open+0x306>
 800d9e6:	7ffb      	ldrb	r3, [r7, #31]
 800d9e8:	f003 0308 	and.w	r3, r3, #8
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	f000 80fa 	beq.w	800dbe6 <f_open+0x306>
				dw = GET_FATTIME();
 800d9f2:	f7f8 fffb 	bl	80069ec <get_fattime>
 800d9f6:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800d9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	2b04      	cmp	r3, #4
 800da00:	f040 8085 	bne.w	800db0e <f_open+0x22e>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800da04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da08:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800da0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da0c:	695b      	ldr	r3, [r3, #20]
 800da0e:	3334      	adds	r3, #52	@ 0x34
 800da10:	4618      	mov	r0, r3
 800da12:	f7fc fa96 	bl	8009f42 <ld_dword>
 800da16:	4602      	mov	r2, r0
 800da18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da1a:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800da1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da1e:	695b      	ldr	r3, [r3, #20]
 800da20:	3338      	adds	r3, #56	@ 0x38
 800da22:	4618      	mov	r0, r3
 800da24:	f7fc fab0 	bl	8009f88 <ld_qword>
 800da28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da2a:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800da2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da30:	695b      	ldr	r3, [r3, #20]
 800da32:	3321      	adds	r3, #33	@ 0x21
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	f003 0302 	and.w	r3, r3, #2
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da3e:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800da40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da42:	2200      	movs	r2, #0
 800da44:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800da46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da48:	695b      	ldr	r3, [r3, #20]
 800da4a:	3308      	adds	r3, #8
 800da4c:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800da50:	4618      	mov	r0, r3
 800da52:	f7fc fb8f 	bl	800a174 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800da56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da58:	695b      	ldr	r3, [r3, #20]
 800da5a:	f103 0214 	add.w	r2, r3, #20
 800da5e:	2300      	movs	r3, #0
 800da60:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800da62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da64:	695b      	ldr	r3, [r3, #20]
 800da66:	330c      	adds	r3, #12
 800da68:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fc fb81 	bl	800a174 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800da72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da74:	695b      	ldr	r3, [r3, #20]
 800da76:	f103 0215 	add.w	r2, r3, #21
 800da7a:	2300      	movs	r3, #0
 800da7c:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800da7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da80:	695b      	ldr	r3, [r3, #20]
 800da82:	1d1a      	adds	r2, r3, #4
 800da84:	2320      	movs	r3, #32
 800da86:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800da88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da8a:	695b      	ldr	r3, [r3, #20]
 800da8c:	3334      	adds	r3, #52	@ 0x34
 800da8e:	2100      	movs	r1, #0
 800da90:	4618      	mov	r0, r3
 800da92:	f7fc fb6f 	bl	800a174 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800da96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da98:	695b      	ldr	r3, [r3, #20]
 800da9a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800da9e:	f04f 0200 	mov.w	r2, #0
 800daa2:	f04f 0300 	mov.w	r3, #0
 800daa6:	4608      	mov	r0, r1
 800daa8:	f7fc fb90 	bl	800a1cc <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800daac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daae:	695b      	ldr	r3, [r3, #20]
 800dab0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800dab4:	f04f 0200 	mov.w	r2, #0
 800dab8:	f04f 0300 	mov.w	r3, #0
 800dabc:	4608      	mov	r0, r1
 800dabe:	f7fc fb85 	bl	800a1cc <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800dac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dac4:	695b      	ldr	r3, [r3, #20]
 800dac6:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800daca:	2301      	movs	r3, #1
 800dacc:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800dace:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7fe fa94 	bl	800c000 <store_xdir>
 800dad8:	4603      	mov	r3, r0
 800dada:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800dade:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d17f      	bne.n	800dbe6 <f_open+0x306>
 800dae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dae8:	689b      	ldr	r3, [r3, #8]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d07b      	beq.n	800dbe6 <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800daee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800daf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daf2:	689b      	ldr	r3, [r3, #8]
 800daf4:	2200      	movs	r2, #0
 800daf6:	4619      	mov	r1, r3
 800daf8:	f7fd faaa 	bl	800b050 <remove_chain>
 800dafc:	4603      	mov	r3, r0
 800dafe:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800db02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db04:	689b      	ldr	r3, [r3, #8]
 800db06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db08:	3b01      	subs	r3, #1
 800db0a:	6193      	str	r3, [r2, #24]
 800db0c:	e06b      	b.n	800dbe6 <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800db0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db10:	330e      	adds	r3, #14
 800db12:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800db16:	4618      	mov	r0, r3
 800db18:	f7fc fb2c 	bl	800a174 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800db1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db1e:	3316      	adds	r3, #22
 800db20:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800db24:	4618      	mov	r0, r3
 800db26:	f7fc fb25 	bl	800a174 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800db2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db2c:	f103 020b 	add.w	r2, r3, #11
 800db30:	2320      	movs	r3, #32
 800db32:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800db34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db38:	4619      	mov	r1, r3
 800db3a:	4610      	mov	r0, r2
 800db3c:	f7fd fe5f 	bl	800b7fe <ld_clust>
 800db40:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800db44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db48:	2200      	movs	r2, #0
 800db4a:	4619      	mov	r1, r3
 800db4c:	f7fd fe76 	bl	800b83c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800db50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db52:	331c      	adds	r3, #28
 800db54:	2100      	movs	r1, #0
 800db56:	4618      	mov	r0, r3
 800db58:	f7fc fb0c 	bl	800a174 <st_dword>
					fs->wflag = 1;
 800db5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db5e:	2301      	movs	r3, #1
 800db60:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800db62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800db66:	2b00      	cmp	r3, #0
 800db68:	d03d      	beq.n	800dbe6 <f_open+0x306>
						dw = fs->winsect;
 800db6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						res = remove_chain(&dj.obj, cl, 0);
 800db72:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800db76:	2200      	movs	r2, #0
 800db78:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7fd fa67 	bl	800b050 <remove_chain>
 800db82:	4603      	mov	r3, r0
 800db84:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						if (res == FR_OK) {
 800db88:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d12a      	bne.n	800dbe6 <f_open+0x306>
							res = move_window(fs, dw);
 800db90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db92:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800db96:	4618      	mov	r0, r3
 800db98:	f7fc fdce 	bl	800a738 <move_window>
 800db9c:	4603      	mov	r3, r0
 800db9e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dba8:	3b01      	subs	r3, #1
 800dbaa:	6193      	str	r3, [r2, #24]
 800dbac:	e01b      	b.n	800dbe6 <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dbae:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d117      	bne.n	800dbe6 <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dbb6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800dbba:	f003 0310 	and.w	r3, r3, #16
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d003      	beq.n	800dbca <f_open+0x2ea>
					res = FR_NO_FILE;
 800dbc2:	2304      	movs	r3, #4
 800dbc4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800dbc8:	e00d      	b.n	800dbe6 <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dbca:	7ffb      	ldrb	r3, [r7, #31]
 800dbcc:	f003 0302 	and.w	r3, r3, #2
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d008      	beq.n	800dbe6 <f_open+0x306>
 800dbd4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800dbd8:	f003 0301 	and.w	r3, r3, #1
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d002      	beq.n	800dbe6 <f_open+0x306>
						res = FR_DENIED;
 800dbe0:	2307      	movs	r3, #7
 800dbe2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800dbe6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d126      	bne.n	800dc3c <f_open+0x35c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dbee:	7ffb      	ldrb	r3, [r7, #31]
 800dbf0:	f003 0308 	and.w	r3, r3, #8
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d003      	beq.n	800dc00 <f_open+0x320>
				mode |= FA_MODIFIED;
 800dbf8:	7ffb      	ldrb	r3, [r7, #31]
 800dbfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbfe:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dc00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc06:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800dc08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800dc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc0c:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dc0e:	7ffb      	ldrb	r3, [r7, #31]
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	bf8c      	ite	hi
 800dc14:	2301      	movhi	r3, #1
 800dc16:	2300      	movls	r3, #0
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800dc20:	4611      	mov	r1, r2
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fc fc56 	bl	800a4d4 <inc_lock>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc2c:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dc2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d102      	bne.n	800dc3c <f_open+0x35c>
 800dc36:	2302      	movs	r3, #2
 800dc38:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dc3c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	f040 810e 	bne.w	800de62 <f_open+0x582>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800dc46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	2b04      	cmp	r3, #4
 800dc4c:	d12d      	bne.n	800dcaa <f_open+0x3ca>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800dc4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc52:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800dc54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800dc58:	4613      	mov	r3, r2
 800dc5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800dc5e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800dc62:	431a      	orrs	r2, r3
 800dc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc66:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800dc68:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800dc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc6c:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800dc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc70:	695b      	ldr	r3, [r3, #20]
 800dc72:	3334      	adds	r3, #52	@ 0x34
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fc f964 	bl	8009f42 <ld_dword>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc7e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800dc80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc82:	695b      	ldr	r3, [r3, #20]
 800dc84:	3338      	adds	r3, #56	@ 0x38
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fc f97e 	bl	8009f88 <ld_qword>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dc92:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800dc96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc98:	695b      	ldr	r3, [r3, #20]
 800dc9a:	3321      	adds	r3, #33	@ 0x21
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	f003 0302 	and.w	r3, r3, #2
 800dca2:	b2da      	uxtb	r2, r3
 800dca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dca6:	71da      	strb	r2, [r3, #7]
 800dca8:	e016      	b.n	800dcd8 <f_open+0x3f8>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dcaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dcac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dcae:	4619      	mov	r1, r3
 800dcb0:	4610      	mov	r0, r2
 800dcb2:	f7fd fda4 	bl	800b7fe <ld_clust>
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcba:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dcbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dcbe:	331c      	adds	r3, #28
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7fc f93e 	bl	8009f42 <ld_dword>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2200      	movs	r2, #0
 800dcca:	613b      	str	r3, [r7, #16]
 800dccc:	617a      	str	r2, [r7, #20]
 800dcce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcd0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dcd4:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dcd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcda:	2200      	movs	r2, #0
 800dcdc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dcde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dce6:	88da      	ldrh	r2, [r3, #6]
 800dce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcea:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dcec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcee:	7ffa      	ldrb	r2, [r7, #31]
 800dcf0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800dcf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800dcfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcfe:	2200      	movs	r2, #0
 800dd00:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dd02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd04:	f04f 0200 	mov.w	r2, #0
 800dd08:	f04f 0300 	mov.w	r3, #0
 800dd0c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd12:	3354      	adds	r3, #84	@ 0x54
 800dd14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800dd18:	2100      	movs	r1, #0
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7fc faff 	bl	800a31e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dd20:	7ffb      	ldrb	r3, [r7, #31]
 800dd22:	f003 0320 	and.w	r3, r3, #32
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	f000 809b 	beq.w	800de62 <f_open+0x582>
 800dd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd2e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dd32:	4313      	orrs	r3, r2
 800dd34:	f000 8095 	beq.w	800de62 <f_open+0x582>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd3a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dd3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd40:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dd44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd46:	895b      	ldrh	r3, [r3, #10]
 800dd48:	461a      	mov	r2, r3
 800dd4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd4c:	899b      	ldrh	r3, [r3, #12]
 800dd4e:	fb02 f303 	mul.w	r3, r2, r3
 800dd52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd58:	689b      	ldr	r3, [r3, #8]
 800dd5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd60:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dd64:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 800dd68:	e023      	b.n	800ddb2 <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 800dd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd6c:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7fc fd9f 	bl	800a8b4 <get_fat>
 800dd76:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800dd7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	d802      	bhi.n	800dd88 <f_open+0x4a8>
 800dd82:	2302      	movs	r3, #2
 800dd84:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dd88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dd8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd90:	d102      	bne.n	800dd98 <f_open+0x4b8>
 800dd92:	2301      	movs	r3, #1
 800dd94:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dd98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	4698      	mov	r8, r3
 800dda0:	4691      	mov	r9, r2
 800dda2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800dda6:	ebb2 0a08 	subs.w	sl, r2, r8
 800ddaa:	eb63 0b09 	sbc.w	fp, r3, r9
 800ddae:	e9c7 ab24 	strd	sl, fp, [r7, #144]	@ 0x90
 800ddb2:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d10a      	bne.n	800ddd0 <f_open+0x4f0>
 800ddba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	461c      	mov	r4, r3
 800ddc2:	4615      	mov	r5, r2
 800ddc4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800ddc8:	4294      	cmp	r4, r2
 800ddca:	eb75 0303 	sbcs.w	r3, r5, r3
 800ddce:	d3cc      	bcc.n	800dd6a <f_open+0x48a>
				}
				fp->clust = clst;
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ddd6:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ddd8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d140      	bne.n	800de62 <f_open+0x582>
 800dde0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde2:	899b      	ldrh	r3, [r3, #12]
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	2200      	movs	r2, #0
 800dde8:	60bb      	str	r3, [r7, #8]
 800ddea:	60fa      	str	r2, [r7, #12]
 800ddec:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800ddf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ddf4:	f7f2 ff08 	bl	8000c08 <__aeabi_uldivmod>
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	d032      	beq.n	800de62 <f_open+0x582>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ddfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddfe:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800de02:	4618      	mov	r0, r3
 800de04:	f7fc fd36 	bl	800a874 <clust2sect>
 800de08:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 800de0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800de10:	2b00      	cmp	r3, #0
 800de12:	d103      	bne.n	800de1c <f_open+0x53c>
						res = FR_INT_ERR;
 800de14:	2302      	movs	r3, #2
 800de16:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800de1a:	e022      	b.n	800de62 <f_open+0x582>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800de1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de1e:	899b      	ldrh	r3, [r3, #12]
 800de20:	b29b      	uxth	r3, r3
 800de22:	2200      	movs	r2, #0
 800de24:	603b      	str	r3, [r7, #0]
 800de26:	607a      	str	r2, [r7, #4]
 800de28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de2c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800de30:	f7f2 feea 	bl	8000c08 <__aeabi_uldivmod>
 800de34:	4602      	mov	r2, r0
 800de36:	460b      	mov	r3, r1
 800de38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800de3c:	441a      	add	r2, r3
 800de3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de40:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800de42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de44:	7858      	ldrb	r0, [r3, #1]
 800de46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de48:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800de4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800de50:	2301      	movs	r3, #1
 800de52:	f7fb ffff 	bl	8009e54 <disk_read>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d002      	beq.n	800de62 <f_open+0x582>
 800de5c:	2301      	movs	r3, #1
 800de5e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800de62:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800de66:	2b00      	cmp	r3, #0
 800de68:	d002      	beq.n	800de70 <f_open+0x590>
 800de6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de6c:	2200      	movs	r2, #0
 800de6e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800de70:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 800de74:	4618      	mov	r0, r3
 800de76:	37a0      	adds	r7, #160	@ 0xa0
 800de78:	46bd      	mov	sp, r7
 800de7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800de7e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800de7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de82:	b091      	sub	sp, #68	@ 0x44
 800de84:	af00      	add	r7, sp, #0
 800de86:	61f8      	str	r0, [r7, #28]
 800de88:	61b9      	str	r1, [r7, #24]
 800de8a:	617a      	str	r2, [r7, #20]
 800de8c:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800de8e:	69bb      	ldr	r3, [r7, #24]
 800de90:	62fb      	str	r3, [r7, #44]	@ 0x2c


	*bw = 0;	/* Clear write byte counter */
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	2200      	movs	r2, #0
 800de96:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800de98:	69fb      	ldr	r3, [r7, #28]
 800de9a:	f107 0220 	add.w	r2, r7, #32
 800de9e:	4611      	mov	r1, r2
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7ff fca1 	bl	800d7e8 <validate>
 800dea6:	4603      	mov	r3, r0
 800dea8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800deac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d108      	bne.n	800dec6 <f_write+0x48>
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800deba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800debe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d002      	beq.n	800decc <f_write+0x4e>
 800dec6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800deca:	e1aa      	b.n	800e222 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ded2:	f003 0302 	and.w	r3, r3, #2
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d101      	bne.n	800dede <f_write+0x60>
 800deda:	2307      	movs	r3, #7
 800dedc:	e1a1      	b.n	800e222 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800dede:	6a3b      	ldr	r3, [r7, #32]
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	2b04      	cmp	r3, #4
 800dee4:	f000 818d 	beq.w	800e202 <f_write+0x384>
 800dee8:	69fb      	ldr	r3, [r7, #28]
 800deea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	18d1      	adds	r1, r2, r3
 800def2:	69fb      	ldr	r3, [r7, #28]
 800def4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800def8:	4613      	mov	r3, r2
 800defa:	4299      	cmp	r1, r3
 800defc:	f080 8181 	bcs.w	800e202 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800df06:	4613      	mov	r3, r2
 800df08:	43db      	mvns	r3, r3
 800df0a:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800df0c:	e179      	b.n	800e202 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800df14:	6a3b      	ldr	r3, [r7, #32]
 800df16:	899b      	ldrh	r3, [r3, #12]
 800df18:	b29b      	uxth	r3, r3
 800df1a:	2200      	movs	r2, #0
 800df1c:	461d      	mov	r5, r3
 800df1e:	4616      	mov	r6, r2
 800df20:	462a      	mov	r2, r5
 800df22:	4633      	mov	r3, r6
 800df24:	f7f2 fe70 	bl	8000c08 <__aeabi_uldivmod>
 800df28:	4313      	orrs	r3, r2
 800df2a:	f040 810a 	bne.w	800e142 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800df34:	6a3b      	ldr	r3, [r7, #32]
 800df36:	899b      	ldrh	r3, [r3, #12]
 800df38:	b29b      	uxth	r3, r3
 800df3a:	2200      	movs	r2, #0
 800df3c:	60bb      	str	r3, [r7, #8]
 800df3e:	60fa      	str	r2, [r7, #12]
 800df40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800df44:	f7f2 fe60 	bl	8000c08 <__aeabi_uldivmod>
 800df48:	4602      	mov	r2, r0
 800df4a:	460b      	mov	r3, r1
 800df4c:	6a3b      	ldr	r3, [r7, #32]
 800df4e:	895b      	ldrh	r3, [r3, #10]
 800df50:	3b01      	subs	r3, #1
 800df52:	4013      	ands	r3, r2
 800df54:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 800df56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d146      	bne.n	800dfea <f_write+0x16c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800df5c:	69fb      	ldr	r3, [r7, #28]
 800df5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800df62:	4313      	orrs	r3, r2
 800df64:	d10c      	bne.n	800df80 <f_write+0x102>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 800df6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d11a      	bne.n	800dfa8 <f_write+0x12a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800df72:	69fb      	ldr	r3, [r7, #28]
 800df74:	2100      	movs	r1, #0
 800df76:	4618      	mov	r0, r3
 800df78:	f7fd f91e 	bl	800b1b8 <create_chain>
 800df7c:	63b8      	str	r0, [r7, #56]	@ 0x38
 800df7e:	e013      	b.n	800dfa8 <f_write+0x12a>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df84:	2b00      	cmp	r3, #0
 800df86:	d007      	beq.n	800df98 <f_write+0x11a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800df8e:	69f8      	ldr	r0, [r7, #28]
 800df90:	f7fd fa13 	bl	800b3ba <clmt_clust>
 800df94:	63b8      	str	r0, [r7, #56]	@ 0x38
 800df96:	e007      	b.n	800dfa8 <f_write+0x12a>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800df98:	69fa      	ldr	r2, [r7, #28]
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df9e:	4619      	mov	r1, r3
 800dfa0:	4610      	mov	r0, r2
 800dfa2:	f7fd f909 	bl	800b1b8 <create_chain>
 800dfa6:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dfa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	f000 812e 	beq.w	800e20c <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d105      	bne.n	800dfc2 <f_write+0x144>
 800dfb6:	69fb      	ldr	r3, [r7, #28]
 800dfb8:	2202      	movs	r2, #2
 800dfba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dfbe:	2302      	movs	r3, #2
 800dfc0:	e12f      	b.n	800e222 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dfc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc8:	d105      	bne.n	800dfd6 <f_write+0x158>
 800dfca:	69fb      	ldr	r3, [r7, #28]
 800dfcc:	2201      	movs	r2, #1
 800dfce:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	e125      	b.n	800e222 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dfda:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	689b      	ldr	r3, [r3, #8]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d102      	bne.n	800dfea <f_write+0x16c>
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dfe8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dfea:	69fb      	ldr	r3, [r7, #28]
 800dfec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dff0:	b25b      	sxtb	r3, r3
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	da1b      	bge.n	800e02e <f_write+0x1b0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dff6:	6a3b      	ldr	r3, [r7, #32]
 800dff8:	7858      	ldrb	r0, [r3, #1]
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e004:	2301      	movs	r3, #1
 800e006:	f7fb ff45 	bl	8009e94 <disk_write>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d005      	beq.n	800e01c <f_write+0x19e>
 800e010:	69fb      	ldr	r3, [r7, #28]
 800e012:	2201      	movs	r2, #1
 800e014:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e018:	2301      	movs	r3, #1
 800e01a:	e102      	b.n	800e222 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e026:	b2da      	uxtb	r2, r3
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e02e:	6a3a      	ldr	r2, [r7, #32]
 800e030:	69fb      	ldr	r3, [r7, #28]
 800e032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e034:	4619      	mov	r1, r3
 800e036:	4610      	mov	r0, r2
 800e038:	f7fc fc1c 	bl	800a874 <clust2sect>
 800e03c:	6278      	str	r0, [r7, #36]	@ 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e040:	2b00      	cmp	r3, #0
 800e042:	d105      	bne.n	800e050 <f_write+0x1d2>
 800e044:	69fb      	ldr	r3, [r7, #28]
 800e046:	2202      	movs	r2, #2
 800e048:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e04c:	2302      	movs	r3, #2
 800e04e:	e0e8      	b.n	800e222 <f_write+0x3a4>
			sect += csect;
 800e050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e054:	4413      	add	r3, r2
 800e056:	627b      	str	r3, [r7, #36]	@ 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e058:	6a3b      	ldr	r3, [r7, #32]
 800e05a:	899b      	ldrh	r3, [r3, #12]
 800e05c:	461a      	mov	r2, r3
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	fbb3 f3f2 	udiv	r3, r3, r2
 800e064:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d046      	beq.n	800e0fa <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e06c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e070:	4413      	add	r3, r2
 800e072:	6a3a      	ldr	r2, [r7, #32]
 800e074:	8952      	ldrh	r2, [r2, #10]
 800e076:	4293      	cmp	r3, r2
 800e078:	d905      	bls.n	800e086 <f_write+0x208>
					cc = fs->csize - csect;
 800e07a:	6a3b      	ldr	r3, [r7, #32]
 800e07c:	895b      	ldrh	r3, [r3, #10]
 800e07e:	461a      	mov	r2, r3
 800e080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e082:	1ad3      	subs	r3, r2, r3
 800e084:	633b      	str	r3, [r7, #48]	@ 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e086:	6a3b      	ldr	r3, [r7, #32]
 800e088:	7858      	ldrb	r0, [r3, #1]
 800e08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e08c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e08e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e090:	f7fb ff00 	bl	8009e94 <disk_write>
 800e094:	4603      	mov	r3, r0
 800e096:	2b00      	cmp	r3, #0
 800e098:	d005      	beq.n	800e0a6 <f_write+0x228>
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	2201      	movs	r2, #1
 800e09e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	e0bd      	b.n	800e222 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ac:	1ad3      	subs	r3, r2, r3
 800e0ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d91a      	bls.n	800e0ea <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c0:	1ad3      	subs	r3, r2, r3
 800e0c2:	6a3a      	ldr	r2, [r7, #32]
 800e0c4:	8992      	ldrh	r2, [r2, #12]
 800e0c6:	fb02 f303 	mul.w	r3, r2, r3
 800e0ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e0cc:	18d1      	adds	r1, r2, r3
 800e0ce:	6a3b      	ldr	r3, [r7, #32]
 800e0d0:	899b      	ldrh	r3, [r3, #12]
 800e0d2:	461a      	mov	r2, r3
 800e0d4:	f7fc f902 	bl	800a2dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e0de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0e2:	b2da      	uxtb	r2, r3
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e0ea:	6a3b      	ldr	r3, [r7, #32]
 800e0ec:	899b      	ldrh	r3, [r3, #12]
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f2:	fb02 f303 	mul.w	r3, r2, r3
 800e0f6:	637b      	str	r3, [r7, #52]	@ 0x34
				continue;
 800e0f8:	e058      	b.n	800e1ac <f_write+0x32e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e100:	429a      	cmp	r2, r3
 800e102:	d01b      	beq.n	800e13c <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e10a:	69fb      	ldr	r3, [r7, #28]
 800e10c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e110:	4290      	cmp	r0, r2
 800e112:	eb71 0303 	sbcs.w	r3, r1, r3
 800e116:	d211      	bcs.n	800e13c <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e118:	6a3b      	ldr	r3, [r7, #32]
 800e11a:	7858      	ldrb	r0, [r3, #1]
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e122:	2301      	movs	r3, #1
 800e124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e126:	f7fb fe95 	bl	8009e54 <disk_read>
 800e12a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d005      	beq.n	800e13c <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	2201      	movs	r2, #1
 800e134:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e138:	2301      	movs	r3, #1
 800e13a:	e072      	b.n	800e222 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e140:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e142:	6a3b      	ldr	r3, [r7, #32]
 800e144:	899b      	ldrh	r3, [r3, #12]
 800e146:	4618      	mov	r0, r3
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e14e:	6a3b      	ldr	r3, [r7, #32]
 800e150:	899b      	ldrh	r3, [r3, #12]
 800e152:	fbb2 f1f3 	udiv	r1, r2, r3
 800e156:	fb01 f303 	mul.w	r3, r1, r3
 800e15a:	1ad3      	subs	r3, r2, r3
 800e15c:	1ac3      	subs	r3, r0, r3
 800e15e:	637b      	str	r3, [r7, #52]	@ 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e160:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	429a      	cmp	r2, r3
 800e166:	d901      	bls.n	800e16c <f_write+0x2ee>
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	637b      	str	r3, [r7, #52]	@ 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e16c:	69fb      	ldr	r3, [r7, #28]
 800e16e:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e178:	6a3b      	ldr	r3, [r7, #32]
 800e17a:	899b      	ldrh	r3, [r3, #12]
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	2200      	movs	r2, #0
 800e180:	603b      	str	r3, [r7, #0]
 800e182:	607a      	str	r2, [r7, #4]
 800e184:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e188:	f7f2 fd3e 	bl	8000c08 <__aeabi_uldivmod>
 800e18c:	4613      	mov	r3, r2
 800e18e:	4423      	add	r3, r4
 800e190:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e194:	4618      	mov	r0, r3
 800e196:	f7fc f8a1 	bl	800a2dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e19a:	69fb      	ldr	r3, [r7, #28]
 800e19c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e1a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e1a4:	b2da      	uxtb	r2, r3
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e1ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1b0:	4413      	add	r3, r2
 800e1b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e1ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e1bc:	2000      	movs	r0, #0
 800e1be:	4688      	mov	r8, r1
 800e1c0:	4681      	mov	r9, r0
 800e1c2:	eb12 0a08 	adds.w	sl, r2, r8
 800e1c6:	eb43 0b09 	adc.w	fp, r3, r9
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800e1d6:	69fb      	ldr	r3, [r7, #28]
 800e1d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e1dc:	4290      	cmp	r0, r2
 800e1de:	eb71 0403 	sbcs.w	r4, r1, r3
 800e1e2:	d201      	bcs.n	800e1e8 <f_write+0x36a>
 800e1e4:	4610      	mov	r0, r2
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1f4:	441a      	add	r2, r3
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	601a      	str	r2, [r3, #0]
 800e1fa:	697a      	ldr	r2, [r7, #20]
 800e1fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1fe:	1ad3      	subs	r3, r2, r3
 800e200:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	2b00      	cmp	r3, #0
 800e206:	f47f ae82 	bne.w	800df0e <f_write+0x90>
 800e20a:	e000      	b.n	800e20e <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e20c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e218:	b2da      	uxtb	r2, r3
 800e21a:	69fb      	ldr	r3, [r7, #28]
 800e21c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800e220:	2300      	movs	r3, #0
}
 800e222:	4618      	mov	r0, r3
 800e224:	3744      	adds	r7, #68	@ 0x44
 800e226:	46bd      	mov	sp, r7
 800e228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e22c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b09a      	sub	sp, #104	@ 0x68
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800e23a:	4611      	mov	r1, r2
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7ff fad3 	bl	800d7e8 <validate>
 800e242:	4603      	mov	r3, r0
 800e244:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800e248:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	f040 8105 	bne.w	800e45c <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	f000 80fd 	beq.w	800e45c <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e268:	b25b      	sxtb	r3, r3
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	da17      	bge.n	800e29e <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e26e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e270:	7858      	ldrb	r0, [r3, #1]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e27c:	2301      	movs	r3, #1
 800e27e:	f7fb fe09 	bl	8009e94 <disk_write>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d001      	beq.n	800e28c <f_sync+0x60>
 800e288:	2301      	movs	r3, #1
 800e28a:	e0e9      	b.n	800e460 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e292:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e296:	b2da      	uxtb	r2, r3
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e29e:	f7f8 fba5 	bl	80069ec <get_fattime>
 800e2a2:	6638      	str	r0, [r7, #96]	@ 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e2a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	2b04      	cmp	r3, #4
 800e2aa:	f040 808c 	bne.w	800e3c6 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7fc fe6d 	bl	800af90 <fill_first_frag>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800e2bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d10a      	bne.n	800e2da <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	f7fc fe8d 	bl	800afee <fill_last_frag>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 800e2da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	f040 80bc 	bne.w	800e45c <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	f107 0308 	add.w	r3, r7, #8
 800e2ea:	4611      	mov	r1, r2
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7fd fe51 	bl	800bf94 <load_obj_dir>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 800e2f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	f040 80ad 	bne.w	800e45c <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800e302:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e304:	695b      	ldr	r3, [r3, #20]
 800e306:	3304      	adds	r3, #4
 800e308:	781a      	ldrb	r2, [r3, #0]
 800e30a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e30c:	695b      	ldr	r3, [r3, #20]
 800e30e:	3304      	adds	r3, #4
 800e310:	f042 0220 	orr.w	r2, r2, #32
 800e314:	b2d2      	uxtb	r2, r2
 800e316:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	79da      	ldrb	r2, [r3, #7]
 800e31c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e31e:	695b      	ldr	r3, [r3, #20]
 800e320:	3321      	adds	r3, #33	@ 0x21
 800e322:	f042 0201 	orr.w	r2, r2, #1
 800e326:	b2d2      	uxtb	r2, r2
 800e328:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800e32a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e32c:	695b      	ldr	r3, [r3, #20]
 800e32e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	4619      	mov	r1, r3
 800e338:	4610      	mov	r0, r2
 800e33a:	f7fb ff1b 	bl	800a174 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800e33e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e340:	695b      	ldr	r3, [r3, #20]
 800e342:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e34c:	4608      	mov	r0, r1
 800e34e:	f7fb ff3d 	bl	800a1cc <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800e352:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e354:	695b      	ldr	r3, [r3, #20]
 800e356:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e360:	4608      	mov	r0, r1
 800e362:	f7fb ff33 	bl	800a1cc <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800e366:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e368:	695b      	ldr	r3, [r3, #20]
 800e36a:	330c      	adds	r3, #12
 800e36c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e36e:	4618      	mov	r0, r3
 800e370:	f7fb ff00 	bl	800a174 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800e374:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e376:	695b      	ldr	r3, [r3, #20]
 800e378:	3315      	adds	r3, #21
 800e37a:	2200      	movs	r2, #0
 800e37c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800e37e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e380:	695b      	ldr	r3, [r3, #20]
 800e382:	3310      	adds	r3, #16
 800e384:	2100      	movs	r1, #0
 800e386:	4618      	mov	r0, r3
 800e388:	f7fb fef4 	bl	800a174 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800e38c:	f107 0308 	add.w	r3, r7, #8
 800e390:	4618      	mov	r0, r3
 800e392:	f7fd fe35 	bl	800c000 <store_xdir>
 800e396:	4603      	mov	r3, r0
 800e398:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800e39c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d15b      	bne.n	800e45c <f_sync+0x230>
							res = sync_fs(fs);
 800e3a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fc f9f4 	bl	800a794 <sync_fs>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e3b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e3bc:	b2da      	uxtb	r2, r3
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800e3c4:	e04a      	b.n	800e45c <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e3c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	4610      	mov	r0, r2
 800e3d0:	f7fc f9b2 	bl	800a738 <move_window>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800e3da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d13c      	bne.n	800e45c <f_sync+0x230>
					dir = fp->dir_ptr;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e3e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3ea:	330b      	adds	r3, #11
 800e3ec:	781a      	ldrb	r2, [r3, #0]
 800e3ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3f0:	330b      	adds	r3, #11
 800e3f2:	f042 0220 	orr.w	r2, r2, #32
 800e3f6:	b2d2      	uxtb	r2, r2
 800e3f8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6818      	ldr	r0, [r3, #0]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	689b      	ldr	r3, [r3, #8]
 800e402:	461a      	mov	r2, r3
 800e404:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800e406:	f7fd fa19 	bl	800b83c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e40a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e40c:	f103 001c 	add.w	r0, r3, #28
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e416:	4613      	mov	r3, r2
 800e418:	4619      	mov	r1, r3
 800e41a:	f7fb feab 	bl	800a174 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e41e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e420:	3316      	adds	r3, #22
 800e422:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e424:	4618      	mov	r0, r3
 800e426:	f7fb fea5 	bl	800a174 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e42a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e42c:	3312      	adds	r3, #18
 800e42e:	2100      	movs	r1, #0
 800e430:	4618      	mov	r0, r3
 800e432:	f7fb fe84 	bl	800a13e <st_word>
					fs->wflag = 1;
 800e436:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e438:	2201      	movs	r2, #1
 800e43a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e43c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e43e:	4618      	mov	r0, r3
 800e440:	f7fc f9a8 	bl	800a794 <sync_fs>
 800e444:	4603      	mov	r3, r0
 800e446:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e450:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e454:	b2da      	uxtb	r2, r3
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e45c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800e460:	4618      	mov	r0, r3
 800e462:	3768      	adds	r7, #104	@ 0x68
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f7ff fedb 	bl	800e22c <f_sync>
 800e476:	4603      	mov	r3, r0
 800e478:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e47a:	7bfb      	ldrb	r3, [r7, #15]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d118      	bne.n	800e4b2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f107 0208 	add.w	r2, r7, #8
 800e486:	4611      	mov	r1, r2
 800e488:	4618      	mov	r0, r3
 800e48a:	f7ff f9ad 	bl	800d7e8 <validate>
 800e48e:	4603      	mov	r3, r0
 800e490:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e492:	7bfb      	ldrb	r3, [r7, #15]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d10c      	bne.n	800e4b2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7fc f8a7 	bl	800a5f0 <dec_lock>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e4a6:	7bfb      	ldrb	r3, [r7, #15]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d102      	bne.n	800e4b2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3710      	adds	r7, #16
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b086      	sub	sp, #24
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d101      	bne.n	800e4d0 <f_opendir+0x14>
 800e4cc:	2309      	movs	r3, #9
 800e4ce:	e09a      	b.n	800e606 <f_opendir+0x14a>

	/* Get logical drive */
	obj = &dp->obj;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e4d4:	f107 010c 	add.w	r1, r7, #12
 800e4d8:	463b      	mov	r3, r7
 800e4da:	2200      	movs	r2, #0
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7fe fde9 	bl	800d0b4 <find_volume>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e4e6:	7dfb      	ldrb	r3, [r7, #23]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	f040 8085 	bne.w	800e5f8 <f_opendir+0x13c>
		obj->fs = fs;
 800e4ee:	68fa      	ldr	r2, [r7, #12]
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f7fe fc85 	bl	800ce08 <follow_path>
 800e4fe:	4603      	mov	r3, r0
 800e500:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e502:	7dfb      	ldrb	r3, [r7, #23]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d172      	bne.n	800e5ee <f_opendir+0x132>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800e50e:	b25b      	sxtb	r3, r3
 800e510:	2b00      	cmp	r3, #0
 800e512:	db47      	blt.n	800e5a4 <f_opendir+0xe8>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	799b      	ldrb	r3, [r3, #6]
 800e518:	f003 0310 	and.w	r3, r3, #16
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d03f      	beq.n	800e5a0 <f_opendir+0xe4>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	2b04      	cmp	r3, #4
 800e526:	d130      	bne.n	800e58a <f_opendir+0xce>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	689a      	ldr	r2, [r3, #8]
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e536:	4613      	mov	r3, r2
 800e538:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e53c:	693a      	ldr	r2, [r7, #16]
 800e53e:	79d2      	ldrb	r2, [r2, #7]
 800e540:	431a      	orrs	r2, r3
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	625a      	str	r2, [r3, #36]	@ 0x24
						obj->c_ofs = dp->blk_ofs;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	629a      	str	r2, [r3, #40]	@ 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	695b      	ldr	r3, [r3, #20]
 800e552:	3334      	adds	r3, #52	@ 0x34
 800e554:	4618      	mov	r0, r3
 800e556:	f7fb fcf4 	bl	8009f42 <ld_dword>
 800e55a:	4602      	mov	r2, r0
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	695b      	ldr	r3, [r3, #20]
 800e564:	3338      	adds	r3, #56	@ 0x38
 800e566:	4618      	mov	r0, r3
 800e568:	f7fb fd0e 	bl	8009f88 <ld_qword>
 800e56c:	4602      	mov	r2, r0
 800e56e:	460b      	mov	r3, r1
 800e570:	6939      	ldr	r1, [r7, #16]
 800e572:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	695b      	ldr	r3, [r3, #20]
 800e57a:	3321      	adds	r3, #33	@ 0x21
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	f003 0302 	and.w	r3, r3, #2
 800e582:	b2da      	uxtb	r2, r3
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	71da      	strb	r2, [r3, #7]
 800e588:	e00c      	b.n	800e5a4 <f_opendir+0xe8>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e58a:	68fa      	ldr	r2, [r7, #12]
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e590:	4619      	mov	r1, r3
 800e592:	4610      	mov	r0, r2
 800e594:	f7fd f933 	bl	800b7fe <ld_clust>
 800e598:	4602      	mov	r2, r0
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	609a      	str	r2, [r3, #8]
 800e59e:	e001      	b.n	800e5a4 <f_opendir+0xe8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e5a0:	2305      	movs	r3, #5
 800e5a2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e5a4:	7dfb      	ldrb	r3, [r7, #23]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d121      	bne.n	800e5ee <f_opendir+0x132>
				obj->id = fs->id;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	88da      	ldrh	r2, [r3, #6]
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e5b2:	2100      	movs	r1, #0
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f7fc ff4c 	bl	800b452 <dir_sdi>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e5be:	7dfb      	ldrb	r3, [r7, #23]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d114      	bne.n	800e5ee <f_opendir+0x132>
					if (obj->sclust) {
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	689b      	ldr	r3, [r3, #8]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d00d      	beq.n	800e5e8 <f_opendir+0x12c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e5cc:	2100      	movs	r1, #0
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f7fb ff80 	bl	800a4d4 <inc_lock>
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	62da      	str	r2, [r3, #44]	@ 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d105      	bne.n	800e5ee <f_opendir+0x132>
 800e5e2:	2312      	movs	r3, #18
 800e5e4:	75fb      	strb	r3, [r7, #23]
 800e5e6:	e002      	b.n	800e5ee <f_opendir+0x132>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	62da      	str	r2, [r3, #44]	@ 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e5ee:	7dfb      	ldrb	r3, [r7, #23]
 800e5f0:	2b04      	cmp	r3, #4
 800e5f2:	d101      	bne.n	800e5f8 <f_opendir+0x13c>
 800e5f4:	2305      	movs	r3, #5
 800e5f6:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e5f8:	7dfb      	ldrb	r3, [r7, #23]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d002      	beq.n	800e604 <f_opendir+0x148>
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	2200      	movs	r2, #0
 800e602:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e604:	7dfb      	ldrb	r3, [r7, #23]
}
 800e606:	4618      	mov	r0, r3
 800e608:	3718      	adds	r7, #24
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}

0800e60e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e60e:	b580      	push	{r7, lr}
 800e610:	b084      	sub	sp, #16
 800e612:	af00      	add	r7, sp, #0
 800e614:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f107 0208 	add.w	r2, r7, #8
 800e61c:	4611      	mov	r1, r2
 800e61e:	4618      	mov	r0, r3
 800e620:	f7ff f8e2 	bl	800d7e8 <validate>
 800e624:	4603      	mov	r3, r0
 800e626:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e628:	7bfb      	ldrb	r3, [r7, #15]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d110      	bne.n	800e650 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e632:	2b00      	cmp	r3, #0
 800e634:	d006      	beq.n	800e644 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7fb ffd8 	bl	800a5f0 <dec_lock>
 800e640:	4603      	mov	r3, r0
 800e642:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e644:	7bfb      	ldrb	r3, [r7, #15]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d102      	bne.n	800e650 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2200      	movs	r2, #0
 800e64e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e650:	7bfb      	ldrb	r3, [r7, #15]
}
 800e652:	4618      	mov	r0, r3
 800e654:	3710      	adds	r7, #16
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}

0800e65a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e65a:	b580      	push	{r7, lr}
 800e65c:	b084      	sub	sp, #16
 800e65e:	af00      	add	r7, sp, #0
 800e660:	6078      	str	r0, [r7, #4]
 800e662:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f107 0208 	add.w	r2, r7, #8
 800e66a:	4611      	mov	r1, r2
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7ff f8bb 	bl	800d7e8 <validate>
 800e672:	4603      	mov	r3, r0
 800e674:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e676:	7bfb      	ldrb	r3, [r7, #15]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d126      	bne.n	800e6ca <f_readdir+0x70>
		if (!fno) {
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d106      	bne.n	800e690 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e682:	2100      	movs	r1, #0
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f7fc fee4 	bl	800b452 <dir_sdi>
 800e68a:	4603      	mov	r3, r0
 800e68c:	73fb      	strb	r3, [r7, #15]
 800e68e:	e01c      	b.n	800e6ca <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e690:	2100      	movs	r1, #0
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f7fd fd76 	bl	800c184 <dir_read>
 800e698:	4603      	mov	r3, r0
 800e69a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e69c:	7bfb      	ldrb	r3, [r7, #15]
 800e69e:	2b04      	cmp	r3, #4
 800e6a0:	d101      	bne.n	800e6a6 <f_readdir+0x4c>
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e6a6:	7bfb      	ldrb	r3, [r7, #15]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d10e      	bne.n	800e6ca <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e6ac:	6839      	ldr	r1, [r7, #0]
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f7fe f904 	bl	800c8bc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e6b4:	2100      	movs	r1, #0
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f7fc ff5f 	bl	800b57a <dir_next>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e6c0:	7bfb      	ldrb	r3, [r7, #15]
 800e6c2:	2b04      	cmp	r3, #4
 800e6c4:	d101      	bne.n	800e6ca <f_readdir+0x70>
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3710      	adds	r7, #16
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b098      	sub	sp, #96	@ 0x60
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800e6de:	f107 0108 	add.w	r1, r7, #8
 800e6e2:	1d3b      	adds	r3, r7, #4
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7fe fce4 	bl	800d0b4 <find_volume>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e6f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d11f      	bne.n	800e73a <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	f107 0308 	add.w	r3, r7, #8
 800e700:	4611      	mov	r1, r2
 800e702:	4618      	mov	r0, r3
 800e704:	f7fe fb80 	bl	800ce08 <follow_path>
 800e708:	4603      	mov	r3, r0
 800e70a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800e70e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e712:	2b00      	cmp	r3, #0
 800e714:	d111      	bne.n	800e73a <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800e716:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800e71a:	b25b      	sxtb	r3, r3
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	da03      	bge.n	800e728 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800e720:	2306      	movs	r3, #6
 800e722:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e726:	e008      	b.n	800e73a <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d005      	beq.n	800e73a <f_stat+0x66>
 800e72e:	f107 0308 	add.w	r3, r7, #8
 800e732:	6839      	ldr	r1, [r7, #0]
 800e734:	4618      	mov	r0, r3
 800e736:	f7fe f8c1 	bl	800c8bc <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800e73a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3760      	adds	r7, #96	@ 0x60
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}

0800e746 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800e746:	b580      	push	{r7, lr}
 800e748:	b09a      	sub	sp, #104	@ 0x68
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	60f8      	str	r0, [r7, #12]
 800e74e:	60b9      	str	r1, [r7, #8]
 800e750:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800e752:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800e756:	f107 030c 	add.w	r3, r7, #12
 800e75a:	2200      	movs	r2, #0
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7fe fca9 	bl	800d0b4 <find_volume>
 800e762:	4603      	mov	r3, r0
 800e764:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800e768:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	f040 80eb 	bne.w	800e948 <f_getfree+0x202>
		*fatfs = fs;				/* Return ptr to the fs object */
 800e772:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800e778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e77a:	69da      	ldr	r2, [r3, #28]
 800e77c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e77e:	6a1b      	ldr	r3, [r3, #32]
 800e780:	3b02      	subs	r3, #2
 800e782:	429a      	cmp	r2, r3
 800e784:	d804      	bhi.n	800e790 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800e786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e788:	69da      	ldr	r2, [r3, #28]
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	601a      	str	r2, [r3, #0]
 800e78e:	e0db      	b.n	800e948 <f_getfree+0x202>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800e790:	2300      	movs	r3, #0
 800e792:	663b      	str	r3, [r7, #96]	@ 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800e794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	2b01      	cmp	r3, #1
 800e79a:	d128      	bne.n	800e7ee <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800e79c:	2302      	movs	r3, #2
 800e79e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e7a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7a2:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800e7a4:	f107 0310 	add.w	r3, r7, #16
 800e7a8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7fc f882 	bl	800a8b4 <get_fat>
 800e7b0:	6478      	str	r0, [r7, #68]	@ 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800e7b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7b8:	d103      	bne.n	800e7c2 <f_getfree+0x7c>
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e7c0:	e0b5      	b.n	800e92e <f_getfree+0x1e8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800e7c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d103      	bne.n	800e7d0 <f_getfree+0x8a>
 800e7c8:	2302      	movs	r3, #2
 800e7ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e7ce:	e0ae      	b.n	800e92e <f_getfree+0x1e8>
					if (stat == 0) nfree++;
 800e7d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d102      	bne.n	800e7dc <f_getfree+0x96>
 800e7d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e7d8:	3301      	adds	r3, #1
 800e7da:	663b      	str	r3, [r7, #96]	@ 0x60
				} while (++clst < fs->n_fatent);
 800e7dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7de:	3301      	adds	r3, #1
 800e7e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e7e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7e4:	6a1b      	ldr	r3, [r3, #32]
 800e7e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d3db      	bcc.n	800e7a4 <f_getfree+0x5e>
 800e7ec:	e09f      	b.n	800e92e <f_getfree+0x1e8>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800e7ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	2b04      	cmp	r3, #4
 800e7f4:	d14b      	bne.n	800e88e <f_getfree+0x148>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800e7f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7f8:	6a1b      	ldr	r3, [r3, #32]
 800e7fa:	3b02      	subs	r3, #2
 800e7fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
					sect = fs->database;
 800e7fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e802:	65bb      	str	r3, [r7, #88]	@ 0x58
					i = 0;
 800e804:	2300      	movs	r3, #0
 800e806:	657b      	str	r3, [r7, #84]	@ 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800e808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d10d      	bne.n	800e82a <f_getfree+0xe4>
 800e80e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e810:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e812:	1c5a      	adds	r2, r3, #1
 800e814:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e816:	4619      	mov	r1, r3
 800e818:	f7fb ff8e 	bl	800a738 <move_window>
 800e81c:	4603      	mov	r3, r0
 800e81e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e822:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e826:	2b00      	cmp	r3, #0
 800e828:	d17e      	bne.n	800e928 <f_getfree+0x1e2>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800e82a:	2308      	movs	r3, #8
 800e82c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e82e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e832:	4413      	add	r3, r2
 800e834:	333c      	adds	r3, #60	@ 0x3c
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e83c:	e013      	b.n	800e866 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800e83e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e842:	f003 0301 	and.w	r3, r3, #1
 800e846:	2b00      	cmp	r3, #0
 800e848:	d102      	bne.n	800e850 <f_getfree+0x10a>
 800e84a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e84c:	3301      	adds	r3, #1
 800e84e:	663b      	str	r3, [r7, #96]	@ 0x60
							bm >>= 1;
 800e850:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e854:	085b      	lsrs	r3, r3, #1
 800e856:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800e85a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e85c:	3b01      	subs	r3, #1
 800e85e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e860:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e862:	3b01      	subs	r3, #1
 800e864:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d002      	beq.n	800e872 <f_getfree+0x12c>
 800e86c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d1e5      	bne.n	800e83e <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800e872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e874:	3301      	adds	r3, #1
 800e876:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e878:	8992      	ldrh	r2, [r2, #12]
 800e87a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e87e:	fb01 f202 	mul.w	r2, r1, r2
 800e882:	1a9b      	subs	r3, r3, r2
 800e884:	657b      	str	r3, [r7, #84]	@ 0x54
					} while (clst);
 800e886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d1bd      	bne.n	800e808 <f_getfree+0xc2>
 800e88c:	e04f      	b.n	800e92e <f_getfree+0x1e8>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800e88e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e890:	6a1b      	ldr	r3, [r3, #32]
 800e892:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e898:	65bb      	str	r3, [r7, #88]	@ 0x58
					i = 0; p = 0;
 800e89a:	2300      	movs	r3, #0
 800e89c:	657b      	str	r3, [r7, #84]	@ 0x54
 800e89e:	2300      	movs	r3, #0
 800e8a0:	653b      	str	r3, [r7, #80]	@ 0x50
					do {
						if (i == 0) {
 800e8a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d113      	bne.n	800e8d0 <f_getfree+0x18a>
							res = move_window(fs, sect++);
 800e8a8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e8aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e8ac:	1c5a      	adds	r2, r3, #1
 800e8ae:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	f7fb ff41 	bl	800a738 <move_window>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							if (res != FR_OK) break;
 800e8bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d133      	bne.n	800e92c <f_getfree+0x1e6>
							p = fs->win;
 800e8c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8c6:	333c      	adds	r3, #60	@ 0x3c
 800e8c8:	653b      	str	r3, [r7, #80]	@ 0x50
							i = SS(fs);
 800e8ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8cc:	899b      	ldrh	r3, [r3, #12]
 800e8ce:	657b      	str	r3, [r7, #84]	@ 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800e8d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	2b02      	cmp	r3, #2
 800e8d6:	d10f      	bne.n	800e8f8 <f_getfree+0x1b2>
							if (ld_word(p) == 0) nfree++;
 800e8d8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e8da:	f7fb fb19 	bl	8009f10 <ld_word>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d102      	bne.n	800e8ea <f_getfree+0x1a4>
 800e8e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	663b      	str	r3, [r7, #96]	@ 0x60
							p += 2; i -= 2;
 800e8ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8ec:	3302      	adds	r3, #2
 800e8ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800e8f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8f2:	3b02      	subs	r3, #2
 800e8f4:	657b      	str	r3, [r7, #84]	@ 0x54
 800e8f6:	e010      	b.n	800e91a <f_getfree+0x1d4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800e8f8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e8fa:	f7fb fb22 	bl	8009f42 <ld_dword>
 800e8fe:	4603      	mov	r3, r0
 800e900:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e904:	2b00      	cmp	r3, #0
 800e906:	d102      	bne.n	800e90e <f_getfree+0x1c8>
 800e908:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e90a:	3301      	adds	r3, #1
 800e90c:	663b      	str	r3, [r7, #96]	@ 0x60
							p += 4; i -= 4;
 800e90e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e910:	3304      	adds	r3, #4
 800e912:	653b      	str	r3, [r7, #80]	@ 0x50
 800e914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e916:	3b04      	subs	r3, #4
 800e918:	657b      	str	r3, [r7, #84]	@ 0x54
						}
					} while (--clst);
 800e91a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e91c:	3b01      	subs	r3, #1
 800e91e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e920:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e922:	2b00      	cmp	r3, #0
 800e924:	d1bd      	bne.n	800e8a2 <f_getfree+0x15c>
 800e926:	e002      	b.n	800e92e <f_getfree+0x1e8>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800e928:	bf00      	nop
 800e92a:	e000      	b.n	800e92e <f_getfree+0x1e8>
							if (res != FR_OK) break;
 800e92c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e932:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800e934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e936:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e938:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800e93a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e93c:	791a      	ldrb	r2, [r3, #4]
 800e93e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e940:	f042 0201 	orr.w	r2, r2, #1
 800e944:	b2d2      	uxtb	r2, r2
 800e946:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800e948:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3768      	adds	r7, #104	@ 0x68
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800e954:	b5b0      	push	{r4, r5, r7, lr}
 800e956:	b0a0      	sub	sp, #128	@ 0x80
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800e95c:	f107 010c 	add.w	r1, r7, #12
 800e960:	1d3b      	adds	r3, r7, #4
 800e962:	2202      	movs	r2, #2
 800e964:	4618      	mov	r0, r3
 800e966:	f7fe fba5 	bl	800d0b4 <find_volume>
 800e96a:	4603      	mov	r3, r0
 800e96c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800e974:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e978:	2b00      	cmp	r3, #0
 800e97a:	f040 8133 	bne.w	800ebe4 <f_mkdir+0x290>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	f107 0310 	add.w	r3, r7, #16
 800e984:	4611      	mov	r1, r2
 800e986:	4618      	mov	r0, r3
 800e988:	f7fe fa3e 	bl	800ce08 <follow_path>
 800e98c:	4603      	mov	r3, r0
 800e98e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800e992:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e996:	2b00      	cmp	r3, #0
 800e998:	d102      	bne.n	800e9a0 <f_mkdir+0x4c>
 800e99a:	2308      	movs	r3, #8
 800e99c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800e9a0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e9a4:	2b04      	cmp	r3, #4
 800e9a6:	f040 811d 	bne.w	800ebe4 <f_mkdir+0x290>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800e9aa:	f107 0310 	add.w	r3, r7, #16
 800e9ae:	2100      	movs	r1, #0
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7fc fc01 	bl	800b1b8 <create_chain>
 800e9b6:	66f8      	str	r0, [r7, #108]	@ 0x6c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	895b      	ldrh	r3, [r3, #10]
 800e9bc:	461a      	mov	r2, r3
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	899b      	ldrh	r3, [r3, #12]
 800e9c2:	fb02 f303 	mul.w	r3, r2, r3
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	461c      	mov	r4, r3
 800e9ca:	4615      	mov	r5, r2
 800e9cc:	e9c7 4508 	strd	r4, r5, [r7, #32]
			res = FR_OK;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800e9d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d102      	bne.n	800e9e2 <f_mkdir+0x8e>
 800e9dc:	2307      	movs	r3, #7
 800e9de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (dcl == 1) res = FR_INT_ERR;
 800e9e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d102      	bne.n	800e9ee <f_mkdir+0x9a>
 800e9e8:	2302      	movs	r3, #2
 800e9ea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e9ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9f4:	d102      	bne.n	800e9fc <f_mkdir+0xa8>
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800e9fc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d106      	bne.n	800ea12 <f_mkdir+0xbe>
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	4618      	mov	r0, r3
 800ea08:	f7fb fe52 	bl	800a6b0 <sync_window>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			tm = GET_FATTIME();
 800ea12:	f7f7 ffeb 	bl	80069ec <get_fattime>
 800ea16:	66b8      	str	r0, [r7, #104]	@ 0x68
			if (res == FR_OK) {					/* Initialize the new directory table */
 800ea18:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d170      	bne.n	800eb02 <f_mkdir+0x1ae>
				dsc = clust2sect(fs, dcl);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ea24:	4618      	mov	r0, r3
 800ea26:	f7fb ff25 	bl	800a874 <clust2sect>
 800ea2a:	6778      	str	r0, [r7, #116]	@ 0x74
				dir = fs->win;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	333c      	adds	r3, #60	@ 0x3c
 800ea30:	667b      	str	r3, [r7, #100]	@ 0x64
				mem_set(dir, 0, SS(fs));
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	899b      	ldrh	r3, [r3, #12]
 800ea36:	461a      	mov	r2, r3
 800ea38:	2100      	movs	r1, #0
 800ea3a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ea3c:	f7fb fc6f 	bl	800a31e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	2b04      	cmp	r3, #4
 800ea46:	d036      	beq.n	800eab6 <f_mkdir+0x162>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800ea48:	220b      	movs	r2, #11
 800ea4a:	2120      	movs	r1, #32
 800ea4c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ea4e:	f7fb fc66 	bl	800a31e <mem_set>
					dir[DIR_Name] = '.';
 800ea52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea54:	222e      	movs	r2, #46	@ 0x2e
 800ea56:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800ea58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea5a:	330b      	adds	r3, #11
 800ea5c:	2210      	movs	r2, #16
 800ea5e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800ea60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea62:	3316      	adds	r3, #22
 800ea64:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fb fb84 	bl	800a174 <st_dword>
					st_clust(fs, dir, dcl);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ea70:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7fc fee2 	bl	800b83c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800ea78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea7a:	3320      	adds	r3, #32
 800ea7c:	2220      	movs	r2, #32
 800ea7e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7fb fc2b 	bl	800a2dc <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800ea86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea88:	3321      	adds	r3, #33	@ 0x21
 800ea8a:	222e      	movs	r2, #46	@ 0x2e
 800ea8c:	701a      	strb	r2, [r3, #0]
 800ea8e:	69bb      	ldr	r3, [r7, #24]
 800ea90:	673b      	str	r3, [r7, #112]	@ 0x70
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	2b03      	cmp	r3, #3
 800ea98:	d106      	bne.n	800eaa8 <f_mkdir+0x154>
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea9e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d101      	bne.n	800eaa8 <f_mkdir+0x154>
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	673b      	str	r3, [r7, #112]	@ 0x70
					st_clust(fs, dir + SZDIRE, pcl);
 800eaa8:	68f8      	ldr	r0, [r7, #12]
 800eaaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eaac:	3320      	adds	r3, #32
 800eaae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800eab0:	4619      	mov	r1, r3
 800eab2:	f7fc fec3 	bl	800b83c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	895b      	ldrh	r3, [r3, #10]
 800eaba:	67bb      	str	r3, [r7, #120]	@ 0x78
 800eabc:	e01c      	b.n	800eaf8 <f_mkdir+0x1a4>
					fs->winsect = dsc++;
 800eabe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eac0:	1c5a      	adds	r2, r3, #1
 800eac2:	677a      	str	r2, [r7, #116]	@ 0x74
 800eac4:	68fa      	ldr	r2, [r7, #12]
 800eac6:	6393      	str	r3, [r2, #56]	@ 0x38
					fs->wflag = 1;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	2201      	movs	r2, #1
 800eacc:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	4618      	mov	r0, r3
 800ead2:	f7fb fded 	bl	800a6b0 <sync_window>
 800ead6:	4603      	mov	r3, r0
 800ead8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
					if (res != FR_OK) break;
 800eadc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d10d      	bne.n	800eb00 <f_mkdir+0x1ac>
					mem_set(dir, 0, SS(fs));
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	899b      	ldrh	r3, [r3, #12]
 800eae8:	461a      	mov	r2, r3
 800eaea:	2100      	movs	r1, #0
 800eaec:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800eaee:	f7fb fc16 	bl	800a31e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800eaf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eaf4:	3b01      	subs	r3, #1
 800eaf6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800eaf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d1df      	bne.n	800eabe <f_mkdir+0x16a>
 800eafe:	e000      	b.n	800eb02 <f_mkdir+0x1ae>
					if (res != FR_OK) break;
 800eb00:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800eb02:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d107      	bne.n	800eb1a <f_mkdir+0x1c6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800eb0a:	f107 0310 	add.w	r3, r7, #16
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7fd fd2a 	bl	800c568 <dir_register>
 800eb14:	4603      	mov	r3, r0
 800eb16:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
			if (res == FR_OK) {
 800eb1a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d159      	bne.n	800ebd6 <f_mkdir+0x282>
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	2b04      	cmp	r3, #4
 800eb28:	d134      	bne.n	800eb94 <f_mkdir+0x240>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	695b      	ldr	r3, [r3, #20]
 800eb2e:	330c      	adds	r3, #12
 800eb30:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7fb fb1e 	bl	800a174 <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	695b      	ldr	r3, [r3, #20]
 800eb3c:	3334      	adds	r3, #52	@ 0x34
 800eb3e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800eb40:	4618      	mov	r0, r3
 800eb42:	f7fb fb17 	bl	800a174 <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	695b      	ldr	r3, [r3, #20]
 800eb4a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800eb4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eb52:	4613      	mov	r3, r2
 800eb54:	4619      	mov	r1, r3
 800eb56:	f7fb fb0d 	bl	800a174 <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	695b      	ldr	r3, [r3, #20]
 800eb5e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800eb62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eb66:	4613      	mov	r3, r2
 800eb68:	4619      	mov	r1, r3
 800eb6a:	f7fb fb03 	bl	800a174 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	695b      	ldr	r3, [r3, #20]
 800eb72:	3321      	adds	r3, #33	@ 0x21
 800eb74:	2203      	movs	r2, #3
 800eb76:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	695b      	ldr	r3, [r3, #20]
 800eb7c:	3304      	adds	r3, #4
 800eb7e:	2210      	movs	r2, #16
 800eb80:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800eb82:	f107 0310 	add.w	r3, r7, #16
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fd fa3a 	bl	800c000 <store_xdir>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800eb92:	e014      	b.n	800ebbe <f_mkdir+0x26a>
				} else
#endif
				{
					dir = dj.dir;
 800eb94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb96:	667b      	str	r3, [r7, #100]	@ 0x64
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800eb98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb9a:	3316      	adds	r3, #22
 800eb9c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7fb fae8 	bl	800a174 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800eba8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7fc fe46 	bl	800b83c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800ebb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ebb2:	330b      	adds	r3, #11
 800ebb4:	2210      	movs	r2, #16
 800ebb6:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800ebbe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d10e      	bne.n	800ebe4 <f_mkdir+0x290>
					res = sync_fs(fs);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f7fb fde3 	bl	800a794 <sync_fs>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800ebd4:	e006      	b.n	800ebe4 <f_mkdir+0x290>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800ebd6:	f107 0310 	add.w	r3, r7, #16
 800ebda:	2200      	movs	r2, #0
 800ebdc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7fc fa36 	bl	800b050 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ebe4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3780      	adds	r7, #128	@ 0x80
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bdb0      	pop	{r4, r5, r7, pc}

0800ebf0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b087      	sub	sp, #28
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	60f8      	str	r0, [r7, #12]
 800ebf8:	60b9      	str	r1, [r7, #8]
 800ebfa:	4613      	mov	r3, r2
 800ebfc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ebfe:	2301      	movs	r3, #1
 800ec00:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ec02:	2300      	movs	r3, #0
 800ec04:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ec06:	4b1f      	ldr	r3, [pc, #124]	@ (800ec84 <FATFS_LinkDriverEx+0x94>)
 800ec08:	7a5b      	ldrb	r3, [r3, #9]
 800ec0a:	b2db      	uxtb	r3, r3
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d131      	bne.n	800ec74 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ec10:	4b1c      	ldr	r3, [pc, #112]	@ (800ec84 <FATFS_LinkDriverEx+0x94>)
 800ec12:	7a5b      	ldrb	r3, [r3, #9]
 800ec14:	b2db      	uxtb	r3, r3
 800ec16:	461a      	mov	r2, r3
 800ec18:	4b1a      	ldr	r3, [pc, #104]	@ (800ec84 <FATFS_LinkDriverEx+0x94>)
 800ec1a:	2100      	movs	r1, #0
 800ec1c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ec1e:	4b19      	ldr	r3, [pc, #100]	@ (800ec84 <FATFS_LinkDriverEx+0x94>)
 800ec20:	7a5b      	ldrb	r3, [r3, #9]
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	4a17      	ldr	r2, [pc, #92]	@ (800ec84 <FATFS_LinkDriverEx+0x94>)
 800ec26:	009b      	lsls	r3, r3, #2
 800ec28:	4413      	add	r3, r2
 800ec2a:	68fa      	ldr	r2, [r7, #12]
 800ec2c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ec2e:	4b15      	ldr	r3, [pc, #84]	@ (800ec84 <FATFS_LinkDriverEx+0x94>)
 800ec30:	7a5b      	ldrb	r3, [r3, #9]
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	461a      	mov	r2, r3
 800ec36:	4b13      	ldr	r3, [pc, #76]	@ (800ec84 <FATFS_LinkDriverEx+0x94>)
 800ec38:	4413      	add	r3, r2
 800ec3a:	79fa      	ldrb	r2, [r7, #7]
 800ec3c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ec3e:	4b11      	ldr	r3, [pc, #68]	@ (800ec84 <FATFS_LinkDriverEx+0x94>)
 800ec40:	7a5b      	ldrb	r3, [r3, #9]
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	1c5a      	adds	r2, r3, #1
 800ec46:	b2d1      	uxtb	r1, r2
 800ec48:	4a0e      	ldr	r2, [pc, #56]	@ (800ec84 <FATFS_LinkDriverEx+0x94>)
 800ec4a:	7251      	strb	r1, [r2, #9]
 800ec4c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ec4e:	7dbb      	ldrb	r3, [r7, #22]
 800ec50:	3330      	adds	r3, #48	@ 0x30
 800ec52:	b2da      	uxtb	r2, r3
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	223a      	movs	r2, #58	@ 0x3a
 800ec5e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	3302      	adds	r3, #2
 800ec64:	222f      	movs	r2, #47	@ 0x2f
 800ec66:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	3303      	adds	r3, #3
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ec70:	2300      	movs	r3, #0
 800ec72:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ec74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	371c      	adds	r7, #28
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec80:	4770      	bx	lr
 800ec82:	bf00      	nop
 800ec84:	200028c8 	.word	0x200028c8

0800ec88 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ec92:	2200      	movs	r2, #0
 800ec94:	6839      	ldr	r1, [r7, #0]
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7ff ffaa 	bl	800ebf0 <FATFS_LinkDriverEx>
 800ec9c:	4603      	mov	r3, r0
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3708      	adds	r7, #8
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
	...

0800eca8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b085      	sub	sp, #20
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	4603      	mov	r3, r0
 800ecb0:	6039      	str	r1, [r7, #0]
 800ecb2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ecb4:	88fb      	ldrh	r3, [r7, #6]
 800ecb6:	2b7f      	cmp	r3, #127	@ 0x7f
 800ecb8:	d802      	bhi.n	800ecc0 <ff_convert+0x18>
		c = chr;
 800ecba:	88fb      	ldrh	r3, [r7, #6]
 800ecbc:	81fb      	strh	r3, [r7, #14]
 800ecbe:	e025      	b.n	800ed0c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d00b      	beq.n	800ecde <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ecc6:	88fb      	ldrh	r3, [r7, #6]
 800ecc8:	2bff      	cmp	r3, #255	@ 0xff
 800ecca:	d805      	bhi.n	800ecd8 <ff_convert+0x30>
 800eccc:	88fb      	ldrh	r3, [r7, #6]
 800ecce:	3b80      	subs	r3, #128	@ 0x80
 800ecd0:	4a12      	ldr	r2, [pc, #72]	@ (800ed1c <ff_convert+0x74>)
 800ecd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecd6:	e000      	b.n	800ecda <ff_convert+0x32>
 800ecd8:	2300      	movs	r3, #0
 800ecda:	81fb      	strh	r3, [r7, #14]
 800ecdc:	e016      	b.n	800ed0c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ecde:	2300      	movs	r3, #0
 800ece0:	81fb      	strh	r3, [r7, #14]
 800ece2:	e009      	b.n	800ecf8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ece4:	89fb      	ldrh	r3, [r7, #14]
 800ece6:	4a0d      	ldr	r2, [pc, #52]	@ (800ed1c <ff_convert+0x74>)
 800ece8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecec:	88fa      	ldrh	r2, [r7, #6]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d006      	beq.n	800ed00 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ecf2:	89fb      	ldrh	r3, [r7, #14]
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	81fb      	strh	r3, [r7, #14]
 800ecf8:	89fb      	ldrh	r3, [r7, #14]
 800ecfa:	2b7f      	cmp	r3, #127	@ 0x7f
 800ecfc:	d9f2      	bls.n	800ece4 <ff_convert+0x3c>
 800ecfe:	e000      	b.n	800ed02 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ed00:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ed02:	89fb      	ldrh	r3, [r7, #14]
 800ed04:	3380      	adds	r3, #128	@ 0x80
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	b2db      	uxtb	r3, r3
 800ed0a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ed0c:	89fb      	ldrh	r3, [r7, #14]
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3714      	adds	r7, #20
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr
 800ed1a:	bf00      	nop
 800ed1c:	0801286c 	.word	0x0801286c

0800ed20 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b087      	sub	sp, #28
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	4603      	mov	r3, r0
 800ed28:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ed2a:	88fb      	ldrh	r3, [r7, #6]
 800ed2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed30:	d201      	bcs.n	800ed36 <ff_wtoupper+0x16>
 800ed32:	4b3e      	ldr	r3, [pc, #248]	@ (800ee2c <ff_wtoupper+0x10c>)
 800ed34:	e000      	b.n	800ed38 <ff_wtoupper+0x18>
 800ed36:	4b3e      	ldr	r3, [pc, #248]	@ (800ee30 <ff_wtoupper+0x110>)
 800ed38:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	1c9a      	adds	r2, r3, #2
 800ed3e:	617a      	str	r2, [r7, #20]
 800ed40:	881b      	ldrh	r3, [r3, #0]
 800ed42:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ed44:	8a7b      	ldrh	r3, [r7, #18]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d068      	beq.n	800ee1c <ff_wtoupper+0xfc>
 800ed4a:	88fa      	ldrh	r2, [r7, #6]
 800ed4c:	8a7b      	ldrh	r3, [r7, #18]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d364      	bcc.n	800ee1c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	1c9a      	adds	r2, r3, #2
 800ed56:	617a      	str	r2, [r7, #20]
 800ed58:	881b      	ldrh	r3, [r3, #0]
 800ed5a:	823b      	strh	r3, [r7, #16]
 800ed5c:	8a3b      	ldrh	r3, [r7, #16]
 800ed5e:	0a1b      	lsrs	r3, r3, #8
 800ed60:	81fb      	strh	r3, [r7, #14]
 800ed62:	8a3b      	ldrh	r3, [r7, #16]
 800ed64:	b2db      	uxtb	r3, r3
 800ed66:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ed68:	88fa      	ldrh	r2, [r7, #6]
 800ed6a:	8a79      	ldrh	r1, [r7, #18]
 800ed6c:	8a3b      	ldrh	r3, [r7, #16]
 800ed6e:	440b      	add	r3, r1
 800ed70:	429a      	cmp	r2, r3
 800ed72:	da49      	bge.n	800ee08 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ed74:	89fb      	ldrh	r3, [r7, #14]
 800ed76:	2b08      	cmp	r3, #8
 800ed78:	d84f      	bhi.n	800ee1a <ff_wtoupper+0xfa>
 800ed7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ed80 <ff_wtoupper+0x60>)
 800ed7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed80:	0800eda5 	.word	0x0800eda5
 800ed84:	0800edb7 	.word	0x0800edb7
 800ed88:	0800edcd 	.word	0x0800edcd
 800ed8c:	0800edd5 	.word	0x0800edd5
 800ed90:	0800eddd 	.word	0x0800eddd
 800ed94:	0800ede5 	.word	0x0800ede5
 800ed98:	0800eded 	.word	0x0800eded
 800ed9c:	0800edf5 	.word	0x0800edf5
 800eda0:	0800edfd 	.word	0x0800edfd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800eda4:	88fa      	ldrh	r2, [r7, #6]
 800eda6:	8a7b      	ldrh	r3, [r7, #18]
 800eda8:	1ad3      	subs	r3, r2, r3
 800edaa:	005b      	lsls	r3, r3, #1
 800edac:	697a      	ldr	r2, [r7, #20]
 800edae:	4413      	add	r3, r2
 800edb0:	881b      	ldrh	r3, [r3, #0]
 800edb2:	80fb      	strh	r3, [r7, #6]
 800edb4:	e027      	b.n	800ee06 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800edb6:	88fa      	ldrh	r2, [r7, #6]
 800edb8:	8a7b      	ldrh	r3, [r7, #18]
 800edba:	1ad3      	subs	r3, r2, r3
 800edbc:	b29b      	uxth	r3, r3
 800edbe:	f003 0301 	and.w	r3, r3, #1
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	88fa      	ldrh	r2, [r7, #6]
 800edc6:	1ad3      	subs	r3, r2, r3
 800edc8:	80fb      	strh	r3, [r7, #6]
 800edca:	e01c      	b.n	800ee06 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800edcc:	88fb      	ldrh	r3, [r7, #6]
 800edce:	3b10      	subs	r3, #16
 800edd0:	80fb      	strh	r3, [r7, #6]
 800edd2:	e018      	b.n	800ee06 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800edd4:	88fb      	ldrh	r3, [r7, #6]
 800edd6:	3b20      	subs	r3, #32
 800edd8:	80fb      	strh	r3, [r7, #6]
 800edda:	e014      	b.n	800ee06 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800eddc:	88fb      	ldrh	r3, [r7, #6]
 800edde:	3b30      	subs	r3, #48	@ 0x30
 800ede0:	80fb      	strh	r3, [r7, #6]
 800ede2:	e010      	b.n	800ee06 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ede4:	88fb      	ldrh	r3, [r7, #6]
 800ede6:	3b1a      	subs	r3, #26
 800ede8:	80fb      	strh	r3, [r7, #6]
 800edea:	e00c      	b.n	800ee06 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800edec:	88fb      	ldrh	r3, [r7, #6]
 800edee:	3308      	adds	r3, #8
 800edf0:	80fb      	strh	r3, [r7, #6]
 800edf2:	e008      	b.n	800ee06 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800edf4:	88fb      	ldrh	r3, [r7, #6]
 800edf6:	3b50      	subs	r3, #80	@ 0x50
 800edf8:	80fb      	strh	r3, [r7, #6]
 800edfa:	e004      	b.n	800ee06 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800edfc:	88fb      	ldrh	r3, [r7, #6]
 800edfe:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800ee02:	80fb      	strh	r3, [r7, #6]
 800ee04:	bf00      	nop
			}
			break;
 800ee06:	e008      	b.n	800ee1a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ee08:	89fb      	ldrh	r3, [r7, #14]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d195      	bne.n	800ed3a <ff_wtoupper+0x1a>
 800ee0e:	8a3b      	ldrh	r3, [r7, #16]
 800ee10:	005b      	lsls	r3, r3, #1
 800ee12:	697a      	ldr	r2, [r7, #20]
 800ee14:	4413      	add	r3, r2
 800ee16:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ee18:	e78f      	b.n	800ed3a <ff_wtoupper+0x1a>
			break;
 800ee1a:	bf00      	nop
	}

	return chr;
 800ee1c:	88fb      	ldrh	r3, [r7, #6]
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	371c      	adds	r7, #28
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop
 800ee2c:	0801296c 	.word	0x0801296c
 800ee30:	08012b60 	.word	0x08012b60

0800ee34 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ee38:	2201      	movs	r2, #1
 800ee3a:	490e      	ldr	r1, [pc, #56]	@ (800ee74 <MX_USB_HOST_Init+0x40>)
 800ee3c:	480e      	ldr	r0, [pc, #56]	@ (800ee78 <MX_USB_HOST_Init+0x44>)
 800ee3e:	f7f9 fade 	bl	80083fe <USBH_Init>
 800ee42:	4603      	mov	r3, r0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d001      	beq.n	800ee4c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ee48:	f7f2 fd86 	bl	8001958 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800ee4c:	490b      	ldr	r1, [pc, #44]	@ (800ee7c <MX_USB_HOST_Init+0x48>)
 800ee4e:	480a      	ldr	r0, [pc, #40]	@ (800ee78 <MX_USB_HOST_Init+0x44>)
 800ee50:	f7f9 fb80 	bl	8008554 <USBH_RegisterClass>
 800ee54:	4603      	mov	r3, r0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d001      	beq.n	800ee5e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ee5a:	f7f2 fd7d 	bl	8001958 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ee5e:	4806      	ldr	r0, [pc, #24]	@ (800ee78 <MX_USB_HOST_Init+0x44>)
 800ee60:	f7f9 fc04 	bl	800866c <USBH_Start>
 800ee64:	4603      	mov	r3, r0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d001      	beq.n	800ee6e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ee6a:	f7f2 fd75 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ee6e:	bf00      	nop
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	0800ee95 	.word	0x0800ee95
 800ee78:	200028d4 	.word	0x200028d4
 800ee7c:	2000000c 	.word	0x2000000c

0800ee80 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ee84:	4802      	ldr	r0, [pc, #8]	@ (800ee90 <MX_USB_HOST_Process+0x10>)
 800ee86:	f7f9 fc01 	bl	800868c <USBH_Process>
}
 800ee8a:	bf00      	nop
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	200028d4 	.word	0x200028d4

0800ee94 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b083      	sub	sp, #12
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800eea0:	78fb      	ldrb	r3, [r7, #3]
 800eea2:	3b01      	subs	r3, #1
 800eea4:	2b04      	cmp	r3, #4
 800eea6:	d822      	bhi.n	800eeee <USBH_UserProcess+0x5a>
 800eea8:	a201      	add	r2, pc, #4	@ (adr r2, 800eeb0 <USBH_UserProcess+0x1c>)
 800eeaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeae:	bf00      	nop
 800eeb0:	0800eeef 	.word	0x0800eeef
 800eeb4:	0800eed3 	.word	0x0800eed3
 800eeb8:	0800eeef 	.word	0x0800eeef
 800eebc:	0800eee1 	.word	0x0800eee1
 800eec0:	0800eec5 	.word	0x0800eec5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800eec4:	4b0d      	ldr	r3, [pc, #52]	@ (800eefc <USBH_UserProcess+0x68>)
 800eec6:	2203      	movs	r2, #3
 800eec8:	701a      	strb	r2, [r3, #0]
  u_can_application = 0;
 800eeca:	4b0d      	ldr	r3, [pc, #52]	@ (800ef00 <USBH_UserProcess+0x6c>)
 800eecc:	2200      	movs	r2, #0
 800eece:	701a      	strb	r2, [r3, #0]
  break;
 800eed0:	e00e      	b.n	800eef0 <USBH_UserProcess+0x5c>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800eed2:	4b0a      	ldr	r3, [pc, #40]	@ (800eefc <USBH_UserProcess+0x68>)
 800eed4:	2202      	movs	r2, #2
 800eed6:	701a      	strb	r2, [r3, #0]
  u_can_application = 1;
 800eed8:	4b09      	ldr	r3, [pc, #36]	@ (800ef00 <USBH_UserProcess+0x6c>)
 800eeda:	2201      	movs	r2, #1
 800eedc:	701a      	strb	r2, [r3, #0]
  break;
 800eede:	e007      	b.n	800eef0 <USBH_UserProcess+0x5c>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800eee0:	4b06      	ldr	r3, [pc, #24]	@ (800eefc <USBH_UserProcess+0x68>)
 800eee2:	2201      	movs	r2, #1
 800eee4:	701a      	strb	r2, [r3, #0]
  u_can_application = 2;
 800eee6:	4b06      	ldr	r3, [pc, #24]	@ (800ef00 <USBH_UserProcess+0x6c>)
 800eee8:	2202      	movs	r2, #2
 800eeea:	701a      	strb	r2, [r3, #0]
  break;
 800eeec:	e000      	b.n	800eef0 <USBH_UserProcess+0x5c>

  default:
  break;
 800eeee:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800eef0:	bf00      	nop
 800eef2:	370c      	adds	r7, #12
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr
 800eefc:	20002cac 	.word	0x20002cac
 800ef00:	20000398 	.word	0x20000398

0800ef04 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b08a      	sub	sp, #40	@ 0x28
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ef0c:	f107 0314 	add.w	r3, r7, #20
 800ef10:	2200      	movs	r2, #0
 800ef12:	601a      	str	r2, [r3, #0]
 800ef14:	605a      	str	r2, [r3, #4]
 800ef16:	609a      	str	r2, [r3, #8]
 800ef18:	60da      	str	r2, [r3, #12]
 800ef1a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ef24:	d147      	bne.n	800efb6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ef26:	2300      	movs	r3, #0
 800ef28:	613b      	str	r3, [r7, #16]
 800ef2a:	4b25      	ldr	r3, [pc, #148]	@ (800efc0 <HAL_HCD_MspInit+0xbc>)
 800ef2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef2e:	4a24      	ldr	r2, [pc, #144]	@ (800efc0 <HAL_HCD_MspInit+0xbc>)
 800ef30:	f043 0301 	orr.w	r3, r3, #1
 800ef34:	6313      	str	r3, [r2, #48]	@ 0x30
 800ef36:	4b22      	ldr	r3, [pc, #136]	@ (800efc0 <HAL_HCD_MspInit+0xbc>)
 800ef38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef3a:	f003 0301 	and.w	r3, r3, #1
 800ef3e:	613b      	str	r3, [r7, #16]
 800ef40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ef42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ef46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef50:	f107 0314 	add.w	r3, r7, #20
 800ef54:	4619      	mov	r1, r3
 800ef56:	481b      	ldr	r0, [pc, #108]	@ (800efc4 <HAL_HCD_MspInit+0xc0>)
 800ef58:	f7f3 f858 	bl	800200c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ef5c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ef60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef62:	2302      	movs	r3, #2
 800ef64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef66:	2300      	movs	r3, #0
 800ef68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ef6a:	2303      	movs	r3, #3
 800ef6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ef6e:	230a      	movs	r3, #10
 800ef70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef72:	f107 0314 	add.w	r3, r7, #20
 800ef76:	4619      	mov	r1, r3
 800ef78:	4812      	ldr	r0, [pc, #72]	@ (800efc4 <HAL_HCD_MspInit+0xc0>)
 800ef7a:	f7f3 f847 	bl	800200c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ef7e:	4b10      	ldr	r3, [pc, #64]	@ (800efc0 <HAL_HCD_MspInit+0xbc>)
 800ef80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef82:	4a0f      	ldr	r2, [pc, #60]	@ (800efc0 <HAL_HCD_MspInit+0xbc>)
 800ef84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef88:	6353      	str	r3, [r2, #52]	@ 0x34
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	60fb      	str	r3, [r7, #12]
 800ef8e:	4b0c      	ldr	r3, [pc, #48]	@ (800efc0 <HAL_HCD_MspInit+0xbc>)
 800ef90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef92:	4a0b      	ldr	r2, [pc, #44]	@ (800efc0 <HAL_HCD_MspInit+0xbc>)
 800ef94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ef98:	6453      	str	r3, [r2, #68]	@ 0x44
 800ef9a:	4b09      	ldr	r3, [pc, #36]	@ (800efc0 <HAL_HCD_MspInit+0xbc>)
 800ef9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800efa2:	60fb      	str	r3, [r7, #12]
 800efa4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800efa6:	2200      	movs	r2, #0
 800efa8:	2100      	movs	r1, #0
 800efaa:	2043      	movs	r0, #67	@ 0x43
 800efac:	f7f2 fff7 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800efb0:	2043      	movs	r0, #67	@ 0x43
 800efb2:	f7f3 f810 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800efb6:	bf00      	nop
 800efb8:	3728      	adds	r7, #40	@ 0x28
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	40023800 	.word	0x40023800
 800efc4:	40020000 	.word	0x40020000

0800efc8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7f9 ff31 	bl	8008e3e <USBH_LL_IncTimer>
}
 800efdc:	bf00      	nop
 800efde:	3708      	adds	r7, #8
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7f9 ff6d 	bl	8008ed2 <USBH_LL_Connect>
}
 800eff8:	bf00      	nop
 800effa:	3708      	adds	r7, #8
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}

0800f000 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f00e:	4618      	mov	r0, r3
 800f010:	f7f9 ff76 	bl	8008f00 <USBH_LL_Disconnect>
}
 800f014:	bf00      	nop
 800f016:	3708      	adds	r7, #8
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	460b      	mov	r3, r1
 800f026:	70fb      	strb	r3, [r7, #3]
 800f028:	4613      	mov	r3, r2
 800f02a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f02c:	bf00      	nop
 800f02e:	370c      	adds	r7, #12
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr

0800f038 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f046:	4618      	mov	r0, r3
 800f048:	f7f9 ff23 	bl	8008e92 <USBH_LL_PortEnabled>
}
 800f04c:	bf00      	nop
 800f04e:	3708      	adds	r7, #8
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b082      	sub	sp, #8
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f062:	4618      	mov	r0, r3
 800f064:	f7f9 ff23 	bl	8008eae <USBH_LL_PortDisabled>
}
 800f068:	bf00      	nop
 800f06a:	3708      	adds	r7, #8
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800f07e:	2b01      	cmp	r3, #1
 800f080:	d12a      	bne.n	800f0d8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f082:	4a18      	ldr	r2, [pc, #96]	@ (800f0e4 <USBH_LL_Init+0x74>)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	4a15      	ldr	r2, [pc, #84]	@ (800f0e4 <USBH_LL_Init+0x74>)
 800f08e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f092:	4b14      	ldr	r3, [pc, #80]	@ (800f0e4 <USBH_LL_Init+0x74>)
 800f094:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f098:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f09a:	4b12      	ldr	r3, [pc, #72]	@ (800f0e4 <USBH_LL_Init+0x74>)
 800f09c:	2208      	movs	r2, #8
 800f09e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f0a0:	4b10      	ldr	r3, [pc, #64]	@ (800f0e4 <USBH_LL_Init+0x74>)
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f0a6:	4b0f      	ldr	r3, [pc, #60]	@ (800f0e4 <USBH_LL_Init+0x74>)
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f0ac:	4b0d      	ldr	r3, [pc, #52]	@ (800f0e4 <USBH_LL_Init+0x74>)
 800f0ae:	2202      	movs	r2, #2
 800f0b0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f0b2:	4b0c      	ldr	r3, [pc, #48]	@ (800f0e4 <USBH_LL_Init+0x74>)
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f0b8:	480a      	ldr	r0, [pc, #40]	@ (800f0e4 <USBH_LL_Init+0x74>)
 800f0ba:	f7f3 f95c 	bl	8002376 <HAL_HCD_Init>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d001      	beq.n	800f0c8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f0c4:	f7f2 fc48 	bl	8001958 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f0c8:	4806      	ldr	r0, [pc, #24]	@ (800f0e4 <USBH_LL_Init+0x74>)
 800f0ca:	f7f3 fd99 	bl	8002c00 <HAL_HCD_GetCurrentFrame>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f7f9 fea4 	bl	8008e20 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f0d8:	2300      	movs	r3, #0
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3708      	adds	r7, #8
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	bf00      	nop
 800f0e4:	20002cb0 	.word	0x20002cb0

0800f0e8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b084      	sub	sp, #16
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7f3 fd06 	bl	8002b10 <HAL_HCD_Start>
 800f104:	4603      	mov	r3, r0
 800f106:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f108:	7bfb      	ldrb	r3, [r7, #15]
 800f10a:	4618      	mov	r0, r3
 800f10c:	f000 f980 	bl	800f410 <USBH_Get_USB_Status>
 800f110:	4603      	mov	r3, r0
 800f112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f114:	7bbb      	ldrb	r3, [r7, #14]
}
 800f116:	4618      	mov	r0, r3
 800f118:	3710      	adds	r7, #16
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}

0800f11e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f11e:	b580      	push	{r7, lr}
 800f120:	b084      	sub	sp, #16
 800f122:	af00      	add	r7, sp, #0
 800f124:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f126:	2300      	movs	r3, #0
 800f128:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f12a:	2300      	movs	r3, #0
 800f12c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f134:	4618      	mov	r0, r3
 800f136:	f7f3 fd0e 	bl	8002b56 <HAL_HCD_Stop>
 800f13a:	4603      	mov	r3, r0
 800f13c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f13e:	7bfb      	ldrb	r3, [r7, #15]
 800f140:	4618      	mov	r0, r3
 800f142:	f000 f965 	bl	800f410 <USBH_Get_USB_Status>
 800f146:	4603      	mov	r3, r0
 800f148:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f14a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3710      	adds	r7, #16
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f15c:	2301      	movs	r3, #1
 800f15e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f166:	4618      	mov	r0, r3
 800f168:	f7f3 fd58 	bl	8002c1c <HAL_HCD_GetCurrentSpeed>
 800f16c:	4603      	mov	r3, r0
 800f16e:	2b02      	cmp	r3, #2
 800f170:	d00c      	beq.n	800f18c <USBH_LL_GetSpeed+0x38>
 800f172:	2b02      	cmp	r3, #2
 800f174:	d80d      	bhi.n	800f192 <USBH_LL_GetSpeed+0x3e>
 800f176:	2b00      	cmp	r3, #0
 800f178:	d002      	beq.n	800f180 <USBH_LL_GetSpeed+0x2c>
 800f17a:	2b01      	cmp	r3, #1
 800f17c:	d003      	beq.n	800f186 <USBH_LL_GetSpeed+0x32>
 800f17e:	e008      	b.n	800f192 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f180:	2300      	movs	r3, #0
 800f182:	73fb      	strb	r3, [r7, #15]
    break;
 800f184:	e008      	b.n	800f198 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f186:	2301      	movs	r3, #1
 800f188:	73fb      	strb	r3, [r7, #15]
    break;
 800f18a:	e005      	b.n	800f198 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f18c:	2302      	movs	r3, #2
 800f18e:	73fb      	strb	r3, [r7, #15]
    break;
 800f190:	e002      	b.n	800f198 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f192:	2301      	movs	r3, #1
 800f194:	73fb      	strb	r3, [r7, #15]
    break;
 800f196:	bf00      	nop
  }
  return  speed;
 800f198:	7bfb      	ldrb	r3, [r7, #15]
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3710      	adds	r7, #16
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}

0800f1a2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f1a2:	b580      	push	{r7, lr}
 800f1a4:	b084      	sub	sp, #16
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7f3 fce9 	bl	8002b90 <HAL_HCD_ResetPort>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f1c2:	7bfb      	ldrb	r3, [r7, #15]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f000 f923 	bl	800f410 <USBH_Get_USB_Status>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3710      	adds	r7, #16
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}

0800f1d8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b082      	sub	sp, #8
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f1ea:	78fa      	ldrb	r2, [r7, #3]
 800f1ec:	4611      	mov	r1, r2
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7f3 fcf1 	bl	8002bd6 <HAL_HCD_HC_GetXferCount>
 800f1f4:	4603      	mov	r3, r0
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3708      	adds	r7, #8
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}

0800f1fe <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 800f1fe:	b590      	push	{r4, r7, lr}
 800f200:	b089      	sub	sp, #36	@ 0x24
 800f202:	af04      	add	r7, sp, #16
 800f204:	6078      	str	r0, [r7, #4]
 800f206:	4608      	mov	r0, r1
 800f208:	4611      	mov	r1, r2
 800f20a:	461a      	mov	r2, r3
 800f20c:	4603      	mov	r3, r0
 800f20e:	70fb      	strb	r3, [r7, #3]
 800f210:	460b      	mov	r3, r1
 800f212:	70bb      	strb	r3, [r7, #2]
 800f214:	4613      	mov	r3, r2
 800f216:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f218:	2300      	movs	r3, #0
 800f21a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f21c:	2300      	movs	r3, #0
 800f21e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe, epnum,
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800f226:	787c      	ldrb	r4, [r7, #1]
 800f228:	78ba      	ldrb	r2, [r7, #2]
 800f22a:	78f9      	ldrb	r1, [r7, #3]
 800f22c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f22e:	9302      	str	r3, [sp, #8]
 800f230:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f234:	9301      	str	r3, [sp, #4]
 800f236:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f23a:	9300      	str	r3, [sp, #0]
 800f23c:	4623      	mov	r3, r4
 800f23e:	f7f3 f901 	bl	8002444 <HAL_HCD_HC_Init>
 800f242:	4603      	mov	r3, r0
 800f244:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f246:	7bfb      	ldrb	r3, [r7, #15]
 800f248:	4618      	mov	r0, r3
 800f24a:	f000 f8e1 	bl	800f410 <USBH_Get_USB_Status>
 800f24e:	4603      	mov	r3, r0
 800f250:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f252:	7bbb      	ldrb	r3, [r7, #14]
}
 800f254:	4618      	mov	r0, r3
 800f256:	3714      	adds	r7, #20
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd90      	pop	{r4, r7, pc}

0800f25c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b083      	sub	sp, #12
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
 800f264:	460b      	mov	r3, r1
 800f266:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(pipe);

  return USBH_OK;
 800f268:	2300      	movs	r3, #0
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	370c      	adds	r7, #12
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr

0800f276 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f276:	b590      	push	{r4, r7, lr}
 800f278:	b089      	sub	sp, #36	@ 0x24
 800f27a:	af04      	add	r7, sp, #16
 800f27c:	6078      	str	r0, [r7, #4]
 800f27e:	4608      	mov	r0, r1
 800f280:	4611      	mov	r1, r2
 800f282:	461a      	mov	r2, r3
 800f284:	4603      	mov	r3, r0
 800f286:	70fb      	strb	r3, [r7, #3]
 800f288:	460b      	mov	r3, r1
 800f28a:	70bb      	strb	r3, [r7, #2]
 800f28c:	4613      	mov	r3, r2
 800f28e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f290:	2300      	movs	r3, #0
 800f292:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f294:	2300      	movs	r3, #0
 800f296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800f29e:	787c      	ldrb	r4, [r7, #1]
 800f2a0:	78ba      	ldrb	r2, [r7, #2]
 800f2a2:	78f9      	ldrb	r1, [r7, #3]
 800f2a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f2a8:	9303      	str	r3, [sp, #12]
 800f2aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f2ac:	9302      	str	r3, [sp, #8]
 800f2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2b0:	9301      	str	r3, [sp, #4]
 800f2b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f2b6:	9300      	str	r3, [sp, #0]
 800f2b8:	4623      	mov	r3, r4
 800f2ba:	f7f3 f97b 	bl	80025b4 <HAL_HCD_HC_SubmitRequest>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f2c2:	7bfb      	ldrb	r3, [r7, #15]
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f000 f8a3 	bl	800f410 <USBH_Get_USB_Status>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3714      	adds	r7, #20
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd90      	pop	{r4, r7, pc}

0800f2d8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	460b      	mov	r3, r1
 800f2e2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f2ea:	78fa      	ldrb	r2, [r7, #3]
 800f2ec:	4611      	mov	r1, r2
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7f3 fc5c 	bl	8002bac <HAL_HCD_HC_GetURBState>
 800f2f4:	4603      	mov	r3, r0
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3708      	adds	r7, #8
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}

0800f2fe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b082      	sub	sp, #8
 800f302:	af00      	add	r7, sp, #0
 800f304:	6078      	str	r0, [r7, #4]
 800f306:	460b      	mov	r3, r1
 800f308:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800f310:	2b01      	cmp	r3, #1
 800f312:	d103      	bne.n	800f31c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f314:	78fb      	ldrb	r3, [r7, #3]
 800f316:	4618      	mov	r0, r3
 800f318:	f000 f8a6 	bl	800f468 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f31c:	20c8      	movs	r0, #200	@ 0xc8
 800f31e:	f7f2 fd3f 	bl	8001da0 <HAL_Delay>
  return USBH_OK;
 800f322:	2300      	movs	r3, #0
}
 800f324:	4618      	mov	r0, r3
 800f326:	3708      	adds	r7, #8
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b085      	sub	sp, #20
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	460b      	mov	r3, r1
 800f336:	70fb      	strb	r3, [r7, #3]
 800f338:	4613      	mov	r3, r2
 800f33a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f342:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f344:	78fa      	ldrb	r2, [r7, #3]
 800f346:	68f9      	ldr	r1, [r7, #12]
 800f348:	4613      	mov	r3, r2
 800f34a:	011b      	lsls	r3, r3, #4
 800f34c:	1a9b      	subs	r3, r3, r2
 800f34e:	009b      	lsls	r3, r3, #2
 800f350:	440b      	add	r3, r1
 800f352:	3317      	adds	r3, #23
 800f354:	781b      	ldrb	r3, [r3, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d00a      	beq.n	800f370 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f35a:	78fa      	ldrb	r2, [r7, #3]
 800f35c:	68f9      	ldr	r1, [r7, #12]
 800f35e:	4613      	mov	r3, r2
 800f360:	011b      	lsls	r3, r3, #4
 800f362:	1a9b      	subs	r3, r3, r2
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	440b      	add	r3, r1
 800f368:	333c      	adds	r3, #60	@ 0x3c
 800f36a:	78ba      	ldrb	r2, [r7, #2]
 800f36c:	701a      	strb	r2, [r3, #0]
 800f36e:	e009      	b.n	800f384 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f370:	78fa      	ldrb	r2, [r7, #3]
 800f372:	68f9      	ldr	r1, [r7, #12]
 800f374:	4613      	mov	r3, r2
 800f376:	011b      	lsls	r3, r3, #4
 800f378:	1a9b      	subs	r3, r3, r2
 800f37a:	009b      	lsls	r3, r3, #2
 800f37c:	440b      	add	r3, r1
 800f37e:	333d      	adds	r3, #61	@ 0x3d
 800f380:	78ba      	ldrb	r2, [r7, #2]
 800f382:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f384:	2300      	movs	r3, #0
}
 800f386:	4618      	mov	r0, r3
 800f388:	3714      	adds	r7, #20
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr

0800f392 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f392:	b480      	push	{r7}
 800f394:	b085      	sub	sp, #20
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
 800f39a:	460b      	mov	r3, r1
 800f39c:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f3a8:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f3aa:	78fa      	ldrb	r2, [r7, #3]
 800f3ac:	68b9      	ldr	r1, [r7, #8]
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	011b      	lsls	r3, r3, #4
 800f3b2:	1a9b      	subs	r3, r3, r2
 800f3b4:	009b      	lsls	r3, r3, #2
 800f3b6:	440b      	add	r3, r1
 800f3b8:	3317      	adds	r3, #23
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d00a      	beq.n	800f3d6 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f3c0:	78fa      	ldrb	r2, [r7, #3]
 800f3c2:	68b9      	ldr	r1, [r7, #8]
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	011b      	lsls	r3, r3, #4
 800f3c8:	1a9b      	subs	r3, r3, r2
 800f3ca:	009b      	lsls	r3, r3, #2
 800f3cc:	440b      	add	r3, r1
 800f3ce:	333c      	adds	r3, #60	@ 0x3c
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	73fb      	strb	r3, [r7, #15]
 800f3d4:	e009      	b.n	800f3ea <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f3d6:	78fa      	ldrb	r2, [r7, #3]
 800f3d8:	68b9      	ldr	r1, [r7, #8]
 800f3da:	4613      	mov	r3, r2
 800f3dc:	011b      	lsls	r3, r3, #4
 800f3de:	1a9b      	subs	r3, r3, r2
 800f3e0:	009b      	lsls	r3, r3, #2
 800f3e2:	440b      	add	r3, r1
 800f3e4:	333d      	adds	r3, #61	@ 0x3d
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3714      	adds	r7, #20
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f6:	4770      	bx	lr

0800f3f8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f7f2 fccd 	bl	8001da0 <HAL_Delay>
}
 800f406:	bf00      	nop
 800f408:	3708      	adds	r7, #8
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}
	...

0800f410 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f410:	b480      	push	{r7}
 800f412:	b085      	sub	sp, #20
 800f414:	af00      	add	r7, sp, #0
 800f416:	4603      	mov	r3, r0
 800f418:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f41a:	2300      	movs	r3, #0
 800f41c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f41e:	79fb      	ldrb	r3, [r7, #7]
 800f420:	2b03      	cmp	r3, #3
 800f422:	d817      	bhi.n	800f454 <USBH_Get_USB_Status+0x44>
 800f424:	a201      	add	r2, pc, #4	@ (adr r2, 800f42c <USBH_Get_USB_Status+0x1c>)
 800f426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f42a:	bf00      	nop
 800f42c:	0800f43d 	.word	0x0800f43d
 800f430:	0800f443 	.word	0x0800f443
 800f434:	0800f449 	.word	0x0800f449
 800f438:	0800f44f 	.word	0x0800f44f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f43c:	2300      	movs	r3, #0
 800f43e:	73fb      	strb	r3, [r7, #15]
    break;
 800f440:	e00b      	b.n	800f45a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f442:	2302      	movs	r3, #2
 800f444:	73fb      	strb	r3, [r7, #15]
    break;
 800f446:	e008      	b.n	800f45a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f448:	2301      	movs	r3, #1
 800f44a:	73fb      	strb	r3, [r7, #15]
    break;
 800f44c:	e005      	b.n	800f45a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f44e:	2302      	movs	r3, #2
 800f450:	73fb      	strb	r3, [r7, #15]
    break;
 800f452:	e002      	b.n	800f45a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f454:	2302      	movs	r3, #2
 800f456:	73fb      	strb	r3, [r7, #15]
    break;
 800f458:	bf00      	nop
  }
  return usb_status;
 800f45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3714      	adds	r7, #20
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr

0800f468 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b084      	sub	sp, #16
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	4603      	mov	r3, r0
 800f470:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f472:	79fb      	ldrb	r3, [r7, #7]
 800f474:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f476:	79fb      	ldrb	r3, [r7, #7]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d102      	bne.n	800f482 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET; //data = GPIO_PIN_RESET;
 800f47c:	2301      	movs	r3, #1
 800f47e:	73fb      	strb	r3, [r7, #15]
 800f480:	e001      	b.n	800f486 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET; //data = GPIO_PIN_SET;
 800f482:	2300      	movs	r3, #0
 800f484:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f486:	7bfb      	ldrb	r3, [r7, #15]
 800f488:	461a      	mov	r2, r3
 800f48a:	2101      	movs	r1, #1
 800f48c:	4803      	ldr	r0, [pc, #12]	@ (800f49c <MX_DriverVbusFS+0x34>)
 800f48e:	f7f2 ff59 	bl	8002344 <HAL_GPIO_WritePin>
}
 800f492:	bf00      	nop
 800f494:	3710      	adds	r7, #16
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
 800f49a:	bf00      	nop
 800f49c:	40020800 	.word	0x40020800

0800f4a0 <malloc>:
 800f4a0:	4b02      	ldr	r3, [pc, #8]	@ (800f4ac <malloc+0xc>)
 800f4a2:	4601      	mov	r1, r0
 800f4a4:	6818      	ldr	r0, [r3, #0]
 800f4a6:	f000 b82d 	b.w	800f504 <_malloc_r>
 800f4aa:	bf00      	nop
 800f4ac:	20000038 	.word	0x20000038

0800f4b0 <free>:
 800f4b0:	4b02      	ldr	r3, [pc, #8]	@ (800f4bc <free+0xc>)
 800f4b2:	4601      	mov	r1, r0
 800f4b4:	6818      	ldr	r0, [r3, #0]
 800f4b6:	f001 bd27 	b.w	8010f08 <_free_r>
 800f4ba:	bf00      	nop
 800f4bc:	20000038 	.word	0x20000038

0800f4c0 <sbrk_aligned>:
 800f4c0:	b570      	push	{r4, r5, r6, lr}
 800f4c2:	4e0f      	ldr	r6, [pc, #60]	@ (800f500 <sbrk_aligned+0x40>)
 800f4c4:	460c      	mov	r4, r1
 800f4c6:	6831      	ldr	r1, [r6, #0]
 800f4c8:	4605      	mov	r5, r0
 800f4ca:	b911      	cbnz	r1, 800f4d2 <sbrk_aligned+0x12>
 800f4cc:	f000 fe64 	bl	8010198 <_sbrk_r>
 800f4d0:	6030      	str	r0, [r6, #0]
 800f4d2:	4621      	mov	r1, r4
 800f4d4:	4628      	mov	r0, r5
 800f4d6:	f000 fe5f 	bl	8010198 <_sbrk_r>
 800f4da:	1c43      	adds	r3, r0, #1
 800f4dc:	d103      	bne.n	800f4e6 <sbrk_aligned+0x26>
 800f4de:	f04f 34ff 	mov.w	r4, #4294967295
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	bd70      	pop	{r4, r5, r6, pc}
 800f4e6:	1cc4      	adds	r4, r0, #3
 800f4e8:	f024 0403 	bic.w	r4, r4, #3
 800f4ec:	42a0      	cmp	r0, r4
 800f4ee:	d0f8      	beq.n	800f4e2 <sbrk_aligned+0x22>
 800f4f0:	1a21      	subs	r1, r4, r0
 800f4f2:	4628      	mov	r0, r5
 800f4f4:	f000 fe50 	bl	8010198 <_sbrk_r>
 800f4f8:	3001      	adds	r0, #1
 800f4fa:	d1f2      	bne.n	800f4e2 <sbrk_aligned+0x22>
 800f4fc:	e7ef      	b.n	800f4de <sbrk_aligned+0x1e>
 800f4fe:	bf00      	nop
 800f500:	20003090 	.word	0x20003090

0800f504 <_malloc_r>:
 800f504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f508:	1ccd      	adds	r5, r1, #3
 800f50a:	f025 0503 	bic.w	r5, r5, #3
 800f50e:	3508      	adds	r5, #8
 800f510:	2d0c      	cmp	r5, #12
 800f512:	bf38      	it	cc
 800f514:	250c      	movcc	r5, #12
 800f516:	2d00      	cmp	r5, #0
 800f518:	4606      	mov	r6, r0
 800f51a:	db01      	blt.n	800f520 <_malloc_r+0x1c>
 800f51c:	42a9      	cmp	r1, r5
 800f51e:	d904      	bls.n	800f52a <_malloc_r+0x26>
 800f520:	230c      	movs	r3, #12
 800f522:	6033      	str	r3, [r6, #0]
 800f524:	2000      	movs	r0, #0
 800f526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f52a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f600 <_malloc_r+0xfc>
 800f52e:	f000 f869 	bl	800f604 <__malloc_lock>
 800f532:	f8d8 3000 	ldr.w	r3, [r8]
 800f536:	461c      	mov	r4, r3
 800f538:	bb44      	cbnz	r4, 800f58c <_malloc_r+0x88>
 800f53a:	4629      	mov	r1, r5
 800f53c:	4630      	mov	r0, r6
 800f53e:	f7ff ffbf 	bl	800f4c0 <sbrk_aligned>
 800f542:	1c43      	adds	r3, r0, #1
 800f544:	4604      	mov	r4, r0
 800f546:	d158      	bne.n	800f5fa <_malloc_r+0xf6>
 800f548:	f8d8 4000 	ldr.w	r4, [r8]
 800f54c:	4627      	mov	r7, r4
 800f54e:	2f00      	cmp	r7, #0
 800f550:	d143      	bne.n	800f5da <_malloc_r+0xd6>
 800f552:	2c00      	cmp	r4, #0
 800f554:	d04b      	beq.n	800f5ee <_malloc_r+0xea>
 800f556:	6823      	ldr	r3, [r4, #0]
 800f558:	4639      	mov	r1, r7
 800f55a:	4630      	mov	r0, r6
 800f55c:	eb04 0903 	add.w	r9, r4, r3
 800f560:	f000 fe1a 	bl	8010198 <_sbrk_r>
 800f564:	4581      	cmp	r9, r0
 800f566:	d142      	bne.n	800f5ee <_malloc_r+0xea>
 800f568:	6821      	ldr	r1, [r4, #0]
 800f56a:	1a6d      	subs	r5, r5, r1
 800f56c:	4629      	mov	r1, r5
 800f56e:	4630      	mov	r0, r6
 800f570:	f7ff ffa6 	bl	800f4c0 <sbrk_aligned>
 800f574:	3001      	adds	r0, #1
 800f576:	d03a      	beq.n	800f5ee <_malloc_r+0xea>
 800f578:	6823      	ldr	r3, [r4, #0]
 800f57a:	442b      	add	r3, r5
 800f57c:	6023      	str	r3, [r4, #0]
 800f57e:	f8d8 3000 	ldr.w	r3, [r8]
 800f582:	685a      	ldr	r2, [r3, #4]
 800f584:	bb62      	cbnz	r2, 800f5e0 <_malloc_r+0xdc>
 800f586:	f8c8 7000 	str.w	r7, [r8]
 800f58a:	e00f      	b.n	800f5ac <_malloc_r+0xa8>
 800f58c:	6822      	ldr	r2, [r4, #0]
 800f58e:	1b52      	subs	r2, r2, r5
 800f590:	d420      	bmi.n	800f5d4 <_malloc_r+0xd0>
 800f592:	2a0b      	cmp	r2, #11
 800f594:	d917      	bls.n	800f5c6 <_malloc_r+0xc2>
 800f596:	1961      	adds	r1, r4, r5
 800f598:	42a3      	cmp	r3, r4
 800f59a:	6025      	str	r5, [r4, #0]
 800f59c:	bf18      	it	ne
 800f59e:	6059      	strne	r1, [r3, #4]
 800f5a0:	6863      	ldr	r3, [r4, #4]
 800f5a2:	bf08      	it	eq
 800f5a4:	f8c8 1000 	streq.w	r1, [r8]
 800f5a8:	5162      	str	r2, [r4, r5]
 800f5aa:	604b      	str	r3, [r1, #4]
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	f000 f82f 	bl	800f610 <__malloc_unlock>
 800f5b2:	f104 000b 	add.w	r0, r4, #11
 800f5b6:	1d23      	adds	r3, r4, #4
 800f5b8:	f020 0007 	bic.w	r0, r0, #7
 800f5bc:	1ac2      	subs	r2, r0, r3
 800f5be:	bf1c      	itt	ne
 800f5c0:	1a1b      	subne	r3, r3, r0
 800f5c2:	50a3      	strne	r3, [r4, r2]
 800f5c4:	e7af      	b.n	800f526 <_malloc_r+0x22>
 800f5c6:	6862      	ldr	r2, [r4, #4]
 800f5c8:	42a3      	cmp	r3, r4
 800f5ca:	bf0c      	ite	eq
 800f5cc:	f8c8 2000 	streq.w	r2, [r8]
 800f5d0:	605a      	strne	r2, [r3, #4]
 800f5d2:	e7eb      	b.n	800f5ac <_malloc_r+0xa8>
 800f5d4:	4623      	mov	r3, r4
 800f5d6:	6864      	ldr	r4, [r4, #4]
 800f5d8:	e7ae      	b.n	800f538 <_malloc_r+0x34>
 800f5da:	463c      	mov	r4, r7
 800f5dc:	687f      	ldr	r7, [r7, #4]
 800f5de:	e7b6      	b.n	800f54e <_malloc_r+0x4a>
 800f5e0:	461a      	mov	r2, r3
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	42a3      	cmp	r3, r4
 800f5e6:	d1fb      	bne.n	800f5e0 <_malloc_r+0xdc>
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	6053      	str	r3, [r2, #4]
 800f5ec:	e7de      	b.n	800f5ac <_malloc_r+0xa8>
 800f5ee:	230c      	movs	r3, #12
 800f5f0:	6033      	str	r3, [r6, #0]
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	f000 f80c 	bl	800f610 <__malloc_unlock>
 800f5f8:	e794      	b.n	800f524 <_malloc_r+0x20>
 800f5fa:	6005      	str	r5, [r0, #0]
 800f5fc:	e7d6      	b.n	800f5ac <_malloc_r+0xa8>
 800f5fe:	bf00      	nop
 800f600:	20003094 	.word	0x20003094

0800f604 <__malloc_lock>:
 800f604:	4801      	ldr	r0, [pc, #4]	@ (800f60c <__malloc_lock+0x8>)
 800f606:	f000 be14 	b.w	8010232 <__retarget_lock_acquire_recursive>
 800f60a:	bf00      	nop
 800f60c:	200031d8 	.word	0x200031d8

0800f610 <__malloc_unlock>:
 800f610:	4801      	ldr	r0, [pc, #4]	@ (800f618 <__malloc_unlock+0x8>)
 800f612:	f000 be0f 	b.w	8010234 <__retarget_lock_release_recursive>
 800f616:	bf00      	nop
 800f618:	200031d8 	.word	0x200031d8

0800f61c <__cvt>:
 800f61c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f620:	ec57 6b10 	vmov	r6, r7, d0
 800f624:	2f00      	cmp	r7, #0
 800f626:	460c      	mov	r4, r1
 800f628:	4619      	mov	r1, r3
 800f62a:	463b      	mov	r3, r7
 800f62c:	bfbb      	ittet	lt
 800f62e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f632:	461f      	movlt	r7, r3
 800f634:	2300      	movge	r3, #0
 800f636:	232d      	movlt	r3, #45	@ 0x2d
 800f638:	700b      	strb	r3, [r1, #0]
 800f63a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f63c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f640:	4691      	mov	r9, r2
 800f642:	f023 0820 	bic.w	r8, r3, #32
 800f646:	bfbc      	itt	lt
 800f648:	4632      	movlt	r2, r6
 800f64a:	4616      	movlt	r6, r2
 800f64c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f650:	d005      	beq.n	800f65e <__cvt+0x42>
 800f652:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f656:	d100      	bne.n	800f65a <__cvt+0x3e>
 800f658:	3401      	adds	r4, #1
 800f65a:	2102      	movs	r1, #2
 800f65c:	e000      	b.n	800f660 <__cvt+0x44>
 800f65e:	2103      	movs	r1, #3
 800f660:	ab03      	add	r3, sp, #12
 800f662:	9301      	str	r3, [sp, #4]
 800f664:	ab02      	add	r3, sp, #8
 800f666:	9300      	str	r3, [sp, #0]
 800f668:	ec47 6b10 	vmov	d0, r6, r7
 800f66c:	4653      	mov	r3, sl
 800f66e:	4622      	mov	r2, r4
 800f670:	f000 fe7a 	bl	8010368 <_dtoa_r>
 800f674:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f678:	4605      	mov	r5, r0
 800f67a:	d119      	bne.n	800f6b0 <__cvt+0x94>
 800f67c:	f019 0f01 	tst.w	r9, #1
 800f680:	d00e      	beq.n	800f6a0 <__cvt+0x84>
 800f682:	eb00 0904 	add.w	r9, r0, r4
 800f686:	2200      	movs	r2, #0
 800f688:	2300      	movs	r3, #0
 800f68a:	4630      	mov	r0, r6
 800f68c:	4639      	mov	r1, r7
 800f68e:	f7f1 fa2b 	bl	8000ae8 <__aeabi_dcmpeq>
 800f692:	b108      	cbz	r0, 800f698 <__cvt+0x7c>
 800f694:	f8cd 900c 	str.w	r9, [sp, #12]
 800f698:	2230      	movs	r2, #48	@ 0x30
 800f69a:	9b03      	ldr	r3, [sp, #12]
 800f69c:	454b      	cmp	r3, r9
 800f69e:	d31e      	bcc.n	800f6de <__cvt+0xc2>
 800f6a0:	9b03      	ldr	r3, [sp, #12]
 800f6a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6a4:	1b5b      	subs	r3, r3, r5
 800f6a6:	4628      	mov	r0, r5
 800f6a8:	6013      	str	r3, [r2, #0]
 800f6aa:	b004      	add	sp, #16
 800f6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f6b4:	eb00 0904 	add.w	r9, r0, r4
 800f6b8:	d1e5      	bne.n	800f686 <__cvt+0x6a>
 800f6ba:	7803      	ldrb	r3, [r0, #0]
 800f6bc:	2b30      	cmp	r3, #48	@ 0x30
 800f6be:	d10a      	bne.n	800f6d6 <__cvt+0xba>
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	4639      	mov	r1, r7
 800f6c8:	f7f1 fa0e 	bl	8000ae8 <__aeabi_dcmpeq>
 800f6cc:	b918      	cbnz	r0, 800f6d6 <__cvt+0xba>
 800f6ce:	f1c4 0401 	rsb	r4, r4, #1
 800f6d2:	f8ca 4000 	str.w	r4, [sl]
 800f6d6:	f8da 3000 	ldr.w	r3, [sl]
 800f6da:	4499      	add	r9, r3
 800f6dc:	e7d3      	b.n	800f686 <__cvt+0x6a>
 800f6de:	1c59      	adds	r1, r3, #1
 800f6e0:	9103      	str	r1, [sp, #12]
 800f6e2:	701a      	strb	r2, [r3, #0]
 800f6e4:	e7d9      	b.n	800f69a <__cvt+0x7e>

0800f6e6 <__exponent>:
 800f6e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6e8:	2900      	cmp	r1, #0
 800f6ea:	bfba      	itte	lt
 800f6ec:	4249      	neglt	r1, r1
 800f6ee:	232d      	movlt	r3, #45	@ 0x2d
 800f6f0:	232b      	movge	r3, #43	@ 0x2b
 800f6f2:	2909      	cmp	r1, #9
 800f6f4:	7002      	strb	r2, [r0, #0]
 800f6f6:	7043      	strb	r3, [r0, #1]
 800f6f8:	dd29      	ble.n	800f74e <__exponent+0x68>
 800f6fa:	f10d 0307 	add.w	r3, sp, #7
 800f6fe:	461d      	mov	r5, r3
 800f700:	270a      	movs	r7, #10
 800f702:	461a      	mov	r2, r3
 800f704:	fbb1 f6f7 	udiv	r6, r1, r7
 800f708:	fb07 1416 	mls	r4, r7, r6, r1
 800f70c:	3430      	adds	r4, #48	@ 0x30
 800f70e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f712:	460c      	mov	r4, r1
 800f714:	2c63      	cmp	r4, #99	@ 0x63
 800f716:	f103 33ff 	add.w	r3, r3, #4294967295
 800f71a:	4631      	mov	r1, r6
 800f71c:	dcf1      	bgt.n	800f702 <__exponent+0x1c>
 800f71e:	3130      	adds	r1, #48	@ 0x30
 800f720:	1e94      	subs	r4, r2, #2
 800f722:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f726:	1c41      	adds	r1, r0, #1
 800f728:	4623      	mov	r3, r4
 800f72a:	42ab      	cmp	r3, r5
 800f72c:	d30a      	bcc.n	800f744 <__exponent+0x5e>
 800f72e:	f10d 0309 	add.w	r3, sp, #9
 800f732:	1a9b      	subs	r3, r3, r2
 800f734:	42ac      	cmp	r4, r5
 800f736:	bf88      	it	hi
 800f738:	2300      	movhi	r3, #0
 800f73a:	3302      	adds	r3, #2
 800f73c:	4403      	add	r3, r0
 800f73e:	1a18      	subs	r0, r3, r0
 800f740:	b003      	add	sp, #12
 800f742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f744:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f748:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f74c:	e7ed      	b.n	800f72a <__exponent+0x44>
 800f74e:	2330      	movs	r3, #48	@ 0x30
 800f750:	3130      	adds	r1, #48	@ 0x30
 800f752:	7083      	strb	r3, [r0, #2]
 800f754:	70c1      	strb	r1, [r0, #3]
 800f756:	1d03      	adds	r3, r0, #4
 800f758:	e7f1      	b.n	800f73e <__exponent+0x58>
	...

0800f75c <_printf_float>:
 800f75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f760:	b08d      	sub	sp, #52	@ 0x34
 800f762:	460c      	mov	r4, r1
 800f764:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f768:	4616      	mov	r6, r2
 800f76a:	461f      	mov	r7, r3
 800f76c:	4605      	mov	r5, r0
 800f76e:	f000 fcdb 	bl	8010128 <_localeconv_r>
 800f772:	6803      	ldr	r3, [r0, #0]
 800f774:	9304      	str	r3, [sp, #16]
 800f776:	4618      	mov	r0, r3
 800f778:	f7f0 fd8a 	bl	8000290 <strlen>
 800f77c:	2300      	movs	r3, #0
 800f77e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f780:	f8d8 3000 	ldr.w	r3, [r8]
 800f784:	9005      	str	r0, [sp, #20]
 800f786:	3307      	adds	r3, #7
 800f788:	f023 0307 	bic.w	r3, r3, #7
 800f78c:	f103 0208 	add.w	r2, r3, #8
 800f790:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f794:	f8d4 b000 	ldr.w	fp, [r4]
 800f798:	f8c8 2000 	str.w	r2, [r8]
 800f79c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f7a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f7a4:	9307      	str	r3, [sp, #28]
 800f7a6:	f8cd 8018 	str.w	r8, [sp, #24]
 800f7aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f7ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f7b2:	4b9c      	ldr	r3, [pc, #624]	@ (800fa24 <_printf_float+0x2c8>)
 800f7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f7b8:	f7f1 f9c8 	bl	8000b4c <__aeabi_dcmpun>
 800f7bc:	bb70      	cbnz	r0, 800f81c <_printf_float+0xc0>
 800f7be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f7c2:	4b98      	ldr	r3, [pc, #608]	@ (800fa24 <_printf_float+0x2c8>)
 800f7c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f7c8:	f7f1 f9a2 	bl	8000b10 <__aeabi_dcmple>
 800f7cc:	bb30      	cbnz	r0, 800f81c <_printf_float+0xc0>
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	4640      	mov	r0, r8
 800f7d4:	4649      	mov	r1, r9
 800f7d6:	f7f1 f991 	bl	8000afc <__aeabi_dcmplt>
 800f7da:	b110      	cbz	r0, 800f7e2 <_printf_float+0x86>
 800f7dc:	232d      	movs	r3, #45	@ 0x2d
 800f7de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f7e2:	4a91      	ldr	r2, [pc, #580]	@ (800fa28 <_printf_float+0x2cc>)
 800f7e4:	4b91      	ldr	r3, [pc, #580]	@ (800fa2c <_printf_float+0x2d0>)
 800f7e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f7ea:	bf8c      	ite	hi
 800f7ec:	4690      	movhi	r8, r2
 800f7ee:	4698      	movls	r8, r3
 800f7f0:	2303      	movs	r3, #3
 800f7f2:	6123      	str	r3, [r4, #16]
 800f7f4:	f02b 0304 	bic.w	r3, fp, #4
 800f7f8:	6023      	str	r3, [r4, #0]
 800f7fa:	f04f 0900 	mov.w	r9, #0
 800f7fe:	9700      	str	r7, [sp, #0]
 800f800:	4633      	mov	r3, r6
 800f802:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f804:	4621      	mov	r1, r4
 800f806:	4628      	mov	r0, r5
 800f808:	f000 f9d2 	bl	800fbb0 <_printf_common>
 800f80c:	3001      	adds	r0, #1
 800f80e:	f040 808d 	bne.w	800f92c <_printf_float+0x1d0>
 800f812:	f04f 30ff 	mov.w	r0, #4294967295
 800f816:	b00d      	add	sp, #52	@ 0x34
 800f818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f81c:	4642      	mov	r2, r8
 800f81e:	464b      	mov	r3, r9
 800f820:	4640      	mov	r0, r8
 800f822:	4649      	mov	r1, r9
 800f824:	f7f1 f992 	bl	8000b4c <__aeabi_dcmpun>
 800f828:	b140      	cbz	r0, 800f83c <_printf_float+0xe0>
 800f82a:	464b      	mov	r3, r9
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	bfbc      	itt	lt
 800f830:	232d      	movlt	r3, #45	@ 0x2d
 800f832:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f836:	4a7e      	ldr	r2, [pc, #504]	@ (800fa30 <_printf_float+0x2d4>)
 800f838:	4b7e      	ldr	r3, [pc, #504]	@ (800fa34 <_printf_float+0x2d8>)
 800f83a:	e7d4      	b.n	800f7e6 <_printf_float+0x8a>
 800f83c:	6863      	ldr	r3, [r4, #4]
 800f83e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f842:	9206      	str	r2, [sp, #24]
 800f844:	1c5a      	adds	r2, r3, #1
 800f846:	d13b      	bne.n	800f8c0 <_printf_float+0x164>
 800f848:	2306      	movs	r3, #6
 800f84a:	6063      	str	r3, [r4, #4]
 800f84c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f850:	2300      	movs	r3, #0
 800f852:	6022      	str	r2, [r4, #0]
 800f854:	9303      	str	r3, [sp, #12]
 800f856:	ab0a      	add	r3, sp, #40	@ 0x28
 800f858:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f85c:	ab09      	add	r3, sp, #36	@ 0x24
 800f85e:	9300      	str	r3, [sp, #0]
 800f860:	6861      	ldr	r1, [r4, #4]
 800f862:	ec49 8b10 	vmov	d0, r8, r9
 800f866:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f86a:	4628      	mov	r0, r5
 800f86c:	f7ff fed6 	bl	800f61c <__cvt>
 800f870:	9b06      	ldr	r3, [sp, #24]
 800f872:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f874:	2b47      	cmp	r3, #71	@ 0x47
 800f876:	4680      	mov	r8, r0
 800f878:	d129      	bne.n	800f8ce <_printf_float+0x172>
 800f87a:	1cc8      	adds	r0, r1, #3
 800f87c:	db02      	blt.n	800f884 <_printf_float+0x128>
 800f87e:	6863      	ldr	r3, [r4, #4]
 800f880:	4299      	cmp	r1, r3
 800f882:	dd41      	ble.n	800f908 <_printf_float+0x1ac>
 800f884:	f1aa 0a02 	sub.w	sl, sl, #2
 800f888:	fa5f fa8a 	uxtb.w	sl, sl
 800f88c:	3901      	subs	r1, #1
 800f88e:	4652      	mov	r2, sl
 800f890:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f894:	9109      	str	r1, [sp, #36]	@ 0x24
 800f896:	f7ff ff26 	bl	800f6e6 <__exponent>
 800f89a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f89c:	1813      	adds	r3, r2, r0
 800f89e:	2a01      	cmp	r2, #1
 800f8a0:	4681      	mov	r9, r0
 800f8a2:	6123      	str	r3, [r4, #16]
 800f8a4:	dc02      	bgt.n	800f8ac <_printf_float+0x150>
 800f8a6:	6822      	ldr	r2, [r4, #0]
 800f8a8:	07d2      	lsls	r2, r2, #31
 800f8aa:	d501      	bpl.n	800f8b0 <_printf_float+0x154>
 800f8ac:	3301      	adds	r3, #1
 800f8ae:	6123      	str	r3, [r4, #16]
 800f8b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d0a2      	beq.n	800f7fe <_printf_float+0xa2>
 800f8b8:	232d      	movs	r3, #45	@ 0x2d
 800f8ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f8be:	e79e      	b.n	800f7fe <_printf_float+0xa2>
 800f8c0:	9a06      	ldr	r2, [sp, #24]
 800f8c2:	2a47      	cmp	r2, #71	@ 0x47
 800f8c4:	d1c2      	bne.n	800f84c <_printf_float+0xf0>
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d1c0      	bne.n	800f84c <_printf_float+0xf0>
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	e7bd      	b.n	800f84a <_printf_float+0xee>
 800f8ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f8d2:	d9db      	bls.n	800f88c <_printf_float+0x130>
 800f8d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f8d8:	d118      	bne.n	800f90c <_printf_float+0x1b0>
 800f8da:	2900      	cmp	r1, #0
 800f8dc:	6863      	ldr	r3, [r4, #4]
 800f8de:	dd0b      	ble.n	800f8f8 <_printf_float+0x19c>
 800f8e0:	6121      	str	r1, [r4, #16]
 800f8e2:	b913      	cbnz	r3, 800f8ea <_printf_float+0x18e>
 800f8e4:	6822      	ldr	r2, [r4, #0]
 800f8e6:	07d0      	lsls	r0, r2, #31
 800f8e8:	d502      	bpl.n	800f8f0 <_printf_float+0x194>
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	440b      	add	r3, r1
 800f8ee:	6123      	str	r3, [r4, #16]
 800f8f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f8f2:	f04f 0900 	mov.w	r9, #0
 800f8f6:	e7db      	b.n	800f8b0 <_printf_float+0x154>
 800f8f8:	b913      	cbnz	r3, 800f900 <_printf_float+0x1a4>
 800f8fa:	6822      	ldr	r2, [r4, #0]
 800f8fc:	07d2      	lsls	r2, r2, #31
 800f8fe:	d501      	bpl.n	800f904 <_printf_float+0x1a8>
 800f900:	3302      	adds	r3, #2
 800f902:	e7f4      	b.n	800f8ee <_printf_float+0x192>
 800f904:	2301      	movs	r3, #1
 800f906:	e7f2      	b.n	800f8ee <_printf_float+0x192>
 800f908:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f90c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f90e:	4299      	cmp	r1, r3
 800f910:	db05      	blt.n	800f91e <_printf_float+0x1c2>
 800f912:	6823      	ldr	r3, [r4, #0]
 800f914:	6121      	str	r1, [r4, #16]
 800f916:	07d8      	lsls	r0, r3, #31
 800f918:	d5ea      	bpl.n	800f8f0 <_printf_float+0x194>
 800f91a:	1c4b      	adds	r3, r1, #1
 800f91c:	e7e7      	b.n	800f8ee <_printf_float+0x192>
 800f91e:	2900      	cmp	r1, #0
 800f920:	bfd4      	ite	le
 800f922:	f1c1 0202 	rsble	r2, r1, #2
 800f926:	2201      	movgt	r2, #1
 800f928:	4413      	add	r3, r2
 800f92a:	e7e0      	b.n	800f8ee <_printf_float+0x192>
 800f92c:	6823      	ldr	r3, [r4, #0]
 800f92e:	055a      	lsls	r2, r3, #21
 800f930:	d407      	bmi.n	800f942 <_printf_float+0x1e6>
 800f932:	6923      	ldr	r3, [r4, #16]
 800f934:	4642      	mov	r2, r8
 800f936:	4631      	mov	r1, r6
 800f938:	4628      	mov	r0, r5
 800f93a:	47b8      	blx	r7
 800f93c:	3001      	adds	r0, #1
 800f93e:	d12b      	bne.n	800f998 <_printf_float+0x23c>
 800f940:	e767      	b.n	800f812 <_printf_float+0xb6>
 800f942:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f946:	f240 80dd 	bls.w	800fb04 <_printf_float+0x3a8>
 800f94a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f94e:	2200      	movs	r2, #0
 800f950:	2300      	movs	r3, #0
 800f952:	f7f1 f8c9 	bl	8000ae8 <__aeabi_dcmpeq>
 800f956:	2800      	cmp	r0, #0
 800f958:	d033      	beq.n	800f9c2 <_printf_float+0x266>
 800f95a:	4a37      	ldr	r2, [pc, #220]	@ (800fa38 <_printf_float+0x2dc>)
 800f95c:	2301      	movs	r3, #1
 800f95e:	4631      	mov	r1, r6
 800f960:	4628      	mov	r0, r5
 800f962:	47b8      	blx	r7
 800f964:	3001      	adds	r0, #1
 800f966:	f43f af54 	beq.w	800f812 <_printf_float+0xb6>
 800f96a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f96e:	4543      	cmp	r3, r8
 800f970:	db02      	blt.n	800f978 <_printf_float+0x21c>
 800f972:	6823      	ldr	r3, [r4, #0]
 800f974:	07d8      	lsls	r0, r3, #31
 800f976:	d50f      	bpl.n	800f998 <_printf_float+0x23c>
 800f978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f97c:	4631      	mov	r1, r6
 800f97e:	4628      	mov	r0, r5
 800f980:	47b8      	blx	r7
 800f982:	3001      	adds	r0, #1
 800f984:	f43f af45 	beq.w	800f812 <_printf_float+0xb6>
 800f988:	f04f 0900 	mov.w	r9, #0
 800f98c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f990:	f104 0a1a 	add.w	sl, r4, #26
 800f994:	45c8      	cmp	r8, r9
 800f996:	dc09      	bgt.n	800f9ac <_printf_float+0x250>
 800f998:	6823      	ldr	r3, [r4, #0]
 800f99a:	079b      	lsls	r3, r3, #30
 800f99c:	f100 8103 	bmi.w	800fba6 <_printf_float+0x44a>
 800f9a0:	68e0      	ldr	r0, [r4, #12]
 800f9a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9a4:	4298      	cmp	r0, r3
 800f9a6:	bfb8      	it	lt
 800f9a8:	4618      	movlt	r0, r3
 800f9aa:	e734      	b.n	800f816 <_printf_float+0xba>
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	4652      	mov	r2, sl
 800f9b0:	4631      	mov	r1, r6
 800f9b2:	4628      	mov	r0, r5
 800f9b4:	47b8      	blx	r7
 800f9b6:	3001      	adds	r0, #1
 800f9b8:	f43f af2b 	beq.w	800f812 <_printf_float+0xb6>
 800f9bc:	f109 0901 	add.w	r9, r9, #1
 800f9c0:	e7e8      	b.n	800f994 <_printf_float+0x238>
 800f9c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	dc39      	bgt.n	800fa3c <_printf_float+0x2e0>
 800f9c8:	4a1b      	ldr	r2, [pc, #108]	@ (800fa38 <_printf_float+0x2dc>)
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	4631      	mov	r1, r6
 800f9ce:	4628      	mov	r0, r5
 800f9d0:	47b8      	blx	r7
 800f9d2:	3001      	adds	r0, #1
 800f9d4:	f43f af1d 	beq.w	800f812 <_printf_float+0xb6>
 800f9d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f9dc:	ea59 0303 	orrs.w	r3, r9, r3
 800f9e0:	d102      	bne.n	800f9e8 <_printf_float+0x28c>
 800f9e2:	6823      	ldr	r3, [r4, #0]
 800f9e4:	07d9      	lsls	r1, r3, #31
 800f9e6:	d5d7      	bpl.n	800f998 <_printf_float+0x23c>
 800f9e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f9ec:	4631      	mov	r1, r6
 800f9ee:	4628      	mov	r0, r5
 800f9f0:	47b8      	blx	r7
 800f9f2:	3001      	adds	r0, #1
 800f9f4:	f43f af0d 	beq.w	800f812 <_printf_float+0xb6>
 800f9f8:	f04f 0a00 	mov.w	sl, #0
 800f9fc:	f104 0b1a 	add.w	fp, r4, #26
 800fa00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa02:	425b      	negs	r3, r3
 800fa04:	4553      	cmp	r3, sl
 800fa06:	dc01      	bgt.n	800fa0c <_printf_float+0x2b0>
 800fa08:	464b      	mov	r3, r9
 800fa0a:	e793      	b.n	800f934 <_printf_float+0x1d8>
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	465a      	mov	r2, fp
 800fa10:	4631      	mov	r1, r6
 800fa12:	4628      	mov	r0, r5
 800fa14:	47b8      	blx	r7
 800fa16:	3001      	adds	r0, #1
 800fa18:	f43f aefb 	beq.w	800f812 <_printf_float+0xb6>
 800fa1c:	f10a 0a01 	add.w	sl, sl, #1
 800fa20:	e7ee      	b.n	800fa00 <_printf_float+0x2a4>
 800fa22:	bf00      	nop
 800fa24:	7fefffff 	.word	0x7fefffff
 800fa28:	08012c20 	.word	0x08012c20
 800fa2c:	08012c1c 	.word	0x08012c1c
 800fa30:	08012c28 	.word	0x08012c28
 800fa34:	08012c24 	.word	0x08012c24
 800fa38:	08012c2c 	.word	0x08012c2c
 800fa3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fa3e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fa42:	4553      	cmp	r3, sl
 800fa44:	bfa8      	it	ge
 800fa46:	4653      	movge	r3, sl
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	4699      	mov	r9, r3
 800fa4c:	dc36      	bgt.n	800fabc <_printf_float+0x360>
 800fa4e:	f04f 0b00 	mov.w	fp, #0
 800fa52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fa56:	f104 021a 	add.w	r2, r4, #26
 800fa5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fa5c:	9306      	str	r3, [sp, #24]
 800fa5e:	eba3 0309 	sub.w	r3, r3, r9
 800fa62:	455b      	cmp	r3, fp
 800fa64:	dc31      	bgt.n	800faca <_printf_float+0x36e>
 800fa66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa68:	459a      	cmp	sl, r3
 800fa6a:	dc3a      	bgt.n	800fae2 <_printf_float+0x386>
 800fa6c:	6823      	ldr	r3, [r4, #0]
 800fa6e:	07da      	lsls	r2, r3, #31
 800fa70:	d437      	bmi.n	800fae2 <_printf_float+0x386>
 800fa72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa74:	ebaa 0903 	sub.w	r9, sl, r3
 800fa78:	9b06      	ldr	r3, [sp, #24]
 800fa7a:	ebaa 0303 	sub.w	r3, sl, r3
 800fa7e:	4599      	cmp	r9, r3
 800fa80:	bfa8      	it	ge
 800fa82:	4699      	movge	r9, r3
 800fa84:	f1b9 0f00 	cmp.w	r9, #0
 800fa88:	dc33      	bgt.n	800faf2 <_printf_float+0x396>
 800fa8a:	f04f 0800 	mov.w	r8, #0
 800fa8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fa92:	f104 0b1a 	add.w	fp, r4, #26
 800fa96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa98:	ebaa 0303 	sub.w	r3, sl, r3
 800fa9c:	eba3 0309 	sub.w	r3, r3, r9
 800faa0:	4543      	cmp	r3, r8
 800faa2:	f77f af79 	ble.w	800f998 <_printf_float+0x23c>
 800faa6:	2301      	movs	r3, #1
 800faa8:	465a      	mov	r2, fp
 800faaa:	4631      	mov	r1, r6
 800faac:	4628      	mov	r0, r5
 800faae:	47b8      	blx	r7
 800fab0:	3001      	adds	r0, #1
 800fab2:	f43f aeae 	beq.w	800f812 <_printf_float+0xb6>
 800fab6:	f108 0801 	add.w	r8, r8, #1
 800faba:	e7ec      	b.n	800fa96 <_printf_float+0x33a>
 800fabc:	4642      	mov	r2, r8
 800fabe:	4631      	mov	r1, r6
 800fac0:	4628      	mov	r0, r5
 800fac2:	47b8      	blx	r7
 800fac4:	3001      	adds	r0, #1
 800fac6:	d1c2      	bne.n	800fa4e <_printf_float+0x2f2>
 800fac8:	e6a3      	b.n	800f812 <_printf_float+0xb6>
 800faca:	2301      	movs	r3, #1
 800facc:	4631      	mov	r1, r6
 800face:	4628      	mov	r0, r5
 800fad0:	9206      	str	r2, [sp, #24]
 800fad2:	47b8      	blx	r7
 800fad4:	3001      	adds	r0, #1
 800fad6:	f43f ae9c 	beq.w	800f812 <_printf_float+0xb6>
 800fada:	9a06      	ldr	r2, [sp, #24]
 800fadc:	f10b 0b01 	add.w	fp, fp, #1
 800fae0:	e7bb      	b.n	800fa5a <_printf_float+0x2fe>
 800fae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fae6:	4631      	mov	r1, r6
 800fae8:	4628      	mov	r0, r5
 800faea:	47b8      	blx	r7
 800faec:	3001      	adds	r0, #1
 800faee:	d1c0      	bne.n	800fa72 <_printf_float+0x316>
 800faf0:	e68f      	b.n	800f812 <_printf_float+0xb6>
 800faf2:	9a06      	ldr	r2, [sp, #24]
 800faf4:	464b      	mov	r3, r9
 800faf6:	4442      	add	r2, r8
 800faf8:	4631      	mov	r1, r6
 800fafa:	4628      	mov	r0, r5
 800fafc:	47b8      	blx	r7
 800fafe:	3001      	adds	r0, #1
 800fb00:	d1c3      	bne.n	800fa8a <_printf_float+0x32e>
 800fb02:	e686      	b.n	800f812 <_printf_float+0xb6>
 800fb04:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fb08:	f1ba 0f01 	cmp.w	sl, #1
 800fb0c:	dc01      	bgt.n	800fb12 <_printf_float+0x3b6>
 800fb0e:	07db      	lsls	r3, r3, #31
 800fb10:	d536      	bpl.n	800fb80 <_printf_float+0x424>
 800fb12:	2301      	movs	r3, #1
 800fb14:	4642      	mov	r2, r8
 800fb16:	4631      	mov	r1, r6
 800fb18:	4628      	mov	r0, r5
 800fb1a:	47b8      	blx	r7
 800fb1c:	3001      	adds	r0, #1
 800fb1e:	f43f ae78 	beq.w	800f812 <_printf_float+0xb6>
 800fb22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb26:	4631      	mov	r1, r6
 800fb28:	4628      	mov	r0, r5
 800fb2a:	47b8      	blx	r7
 800fb2c:	3001      	adds	r0, #1
 800fb2e:	f43f ae70 	beq.w	800f812 <_printf_float+0xb6>
 800fb32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fb36:	2200      	movs	r2, #0
 800fb38:	2300      	movs	r3, #0
 800fb3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb3e:	f7f0 ffd3 	bl	8000ae8 <__aeabi_dcmpeq>
 800fb42:	b9c0      	cbnz	r0, 800fb76 <_printf_float+0x41a>
 800fb44:	4653      	mov	r3, sl
 800fb46:	f108 0201 	add.w	r2, r8, #1
 800fb4a:	4631      	mov	r1, r6
 800fb4c:	4628      	mov	r0, r5
 800fb4e:	47b8      	blx	r7
 800fb50:	3001      	adds	r0, #1
 800fb52:	d10c      	bne.n	800fb6e <_printf_float+0x412>
 800fb54:	e65d      	b.n	800f812 <_printf_float+0xb6>
 800fb56:	2301      	movs	r3, #1
 800fb58:	465a      	mov	r2, fp
 800fb5a:	4631      	mov	r1, r6
 800fb5c:	4628      	mov	r0, r5
 800fb5e:	47b8      	blx	r7
 800fb60:	3001      	adds	r0, #1
 800fb62:	f43f ae56 	beq.w	800f812 <_printf_float+0xb6>
 800fb66:	f108 0801 	add.w	r8, r8, #1
 800fb6a:	45d0      	cmp	r8, sl
 800fb6c:	dbf3      	blt.n	800fb56 <_printf_float+0x3fa>
 800fb6e:	464b      	mov	r3, r9
 800fb70:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fb74:	e6df      	b.n	800f936 <_printf_float+0x1da>
 800fb76:	f04f 0800 	mov.w	r8, #0
 800fb7a:	f104 0b1a 	add.w	fp, r4, #26
 800fb7e:	e7f4      	b.n	800fb6a <_printf_float+0x40e>
 800fb80:	2301      	movs	r3, #1
 800fb82:	4642      	mov	r2, r8
 800fb84:	e7e1      	b.n	800fb4a <_printf_float+0x3ee>
 800fb86:	2301      	movs	r3, #1
 800fb88:	464a      	mov	r2, r9
 800fb8a:	4631      	mov	r1, r6
 800fb8c:	4628      	mov	r0, r5
 800fb8e:	47b8      	blx	r7
 800fb90:	3001      	adds	r0, #1
 800fb92:	f43f ae3e 	beq.w	800f812 <_printf_float+0xb6>
 800fb96:	f108 0801 	add.w	r8, r8, #1
 800fb9a:	68e3      	ldr	r3, [r4, #12]
 800fb9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fb9e:	1a5b      	subs	r3, r3, r1
 800fba0:	4543      	cmp	r3, r8
 800fba2:	dcf0      	bgt.n	800fb86 <_printf_float+0x42a>
 800fba4:	e6fc      	b.n	800f9a0 <_printf_float+0x244>
 800fba6:	f04f 0800 	mov.w	r8, #0
 800fbaa:	f104 0919 	add.w	r9, r4, #25
 800fbae:	e7f4      	b.n	800fb9a <_printf_float+0x43e>

0800fbb0 <_printf_common>:
 800fbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbb4:	4616      	mov	r6, r2
 800fbb6:	4698      	mov	r8, r3
 800fbb8:	688a      	ldr	r2, [r1, #8]
 800fbba:	690b      	ldr	r3, [r1, #16]
 800fbbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	bfb8      	it	lt
 800fbc4:	4613      	movlt	r3, r2
 800fbc6:	6033      	str	r3, [r6, #0]
 800fbc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fbcc:	4607      	mov	r7, r0
 800fbce:	460c      	mov	r4, r1
 800fbd0:	b10a      	cbz	r2, 800fbd6 <_printf_common+0x26>
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	6033      	str	r3, [r6, #0]
 800fbd6:	6823      	ldr	r3, [r4, #0]
 800fbd8:	0699      	lsls	r1, r3, #26
 800fbda:	bf42      	ittt	mi
 800fbdc:	6833      	ldrmi	r3, [r6, #0]
 800fbde:	3302      	addmi	r3, #2
 800fbe0:	6033      	strmi	r3, [r6, #0]
 800fbe2:	6825      	ldr	r5, [r4, #0]
 800fbe4:	f015 0506 	ands.w	r5, r5, #6
 800fbe8:	d106      	bne.n	800fbf8 <_printf_common+0x48>
 800fbea:	f104 0a19 	add.w	sl, r4, #25
 800fbee:	68e3      	ldr	r3, [r4, #12]
 800fbf0:	6832      	ldr	r2, [r6, #0]
 800fbf2:	1a9b      	subs	r3, r3, r2
 800fbf4:	42ab      	cmp	r3, r5
 800fbf6:	dc26      	bgt.n	800fc46 <_printf_common+0x96>
 800fbf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fbfc:	6822      	ldr	r2, [r4, #0]
 800fbfe:	3b00      	subs	r3, #0
 800fc00:	bf18      	it	ne
 800fc02:	2301      	movne	r3, #1
 800fc04:	0692      	lsls	r2, r2, #26
 800fc06:	d42b      	bmi.n	800fc60 <_printf_common+0xb0>
 800fc08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fc0c:	4641      	mov	r1, r8
 800fc0e:	4638      	mov	r0, r7
 800fc10:	47c8      	blx	r9
 800fc12:	3001      	adds	r0, #1
 800fc14:	d01e      	beq.n	800fc54 <_printf_common+0xa4>
 800fc16:	6823      	ldr	r3, [r4, #0]
 800fc18:	6922      	ldr	r2, [r4, #16]
 800fc1a:	f003 0306 	and.w	r3, r3, #6
 800fc1e:	2b04      	cmp	r3, #4
 800fc20:	bf02      	ittt	eq
 800fc22:	68e5      	ldreq	r5, [r4, #12]
 800fc24:	6833      	ldreq	r3, [r6, #0]
 800fc26:	1aed      	subeq	r5, r5, r3
 800fc28:	68a3      	ldr	r3, [r4, #8]
 800fc2a:	bf0c      	ite	eq
 800fc2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc30:	2500      	movne	r5, #0
 800fc32:	4293      	cmp	r3, r2
 800fc34:	bfc4      	itt	gt
 800fc36:	1a9b      	subgt	r3, r3, r2
 800fc38:	18ed      	addgt	r5, r5, r3
 800fc3a:	2600      	movs	r6, #0
 800fc3c:	341a      	adds	r4, #26
 800fc3e:	42b5      	cmp	r5, r6
 800fc40:	d11a      	bne.n	800fc78 <_printf_common+0xc8>
 800fc42:	2000      	movs	r0, #0
 800fc44:	e008      	b.n	800fc58 <_printf_common+0xa8>
 800fc46:	2301      	movs	r3, #1
 800fc48:	4652      	mov	r2, sl
 800fc4a:	4641      	mov	r1, r8
 800fc4c:	4638      	mov	r0, r7
 800fc4e:	47c8      	blx	r9
 800fc50:	3001      	adds	r0, #1
 800fc52:	d103      	bne.n	800fc5c <_printf_common+0xac>
 800fc54:	f04f 30ff 	mov.w	r0, #4294967295
 800fc58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc5c:	3501      	adds	r5, #1
 800fc5e:	e7c6      	b.n	800fbee <_printf_common+0x3e>
 800fc60:	18e1      	adds	r1, r4, r3
 800fc62:	1c5a      	adds	r2, r3, #1
 800fc64:	2030      	movs	r0, #48	@ 0x30
 800fc66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fc6a:	4422      	add	r2, r4
 800fc6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fc70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fc74:	3302      	adds	r3, #2
 800fc76:	e7c7      	b.n	800fc08 <_printf_common+0x58>
 800fc78:	2301      	movs	r3, #1
 800fc7a:	4622      	mov	r2, r4
 800fc7c:	4641      	mov	r1, r8
 800fc7e:	4638      	mov	r0, r7
 800fc80:	47c8      	blx	r9
 800fc82:	3001      	adds	r0, #1
 800fc84:	d0e6      	beq.n	800fc54 <_printf_common+0xa4>
 800fc86:	3601      	adds	r6, #1
 800fc88:	e7d9      	b.n	800fc3e <_printf_common+0x8e>
	...

0800fc8c <_printf_i>:
 800fc8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc90:	7e0f      	ldrb	r7, [r1, #24]
 800fc92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fc94:	2f78      	cmp	r7, #120	@ 0x78
 800fc96:	4691      	mov	r9, r2
 800fc98:	4680      	mov	r8, r0
 800fc9a:	460c      	mov	r4, r1
 800fc9c:	469a      	mov	sl, r3
 800fc9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fca2:	d807      	bhi.n	800fcb4 <_printf_i+0x28>
 800fca4:	2f62      	cmp	r7, #98	@ 0x62
 800fca6:	d80a      	bhi.n	800fcbe <_printf_i+0x32>
 800fca8:	2f00      	cmp	r7, #0
 800fcaa:	f000 80d1 	beq.w	800fe50 <_printf_i+0x1c4>
 800fcae:	2f58      	cmp	r7, #88	@ 0x58
 800fcb0:	f000 80b8 	beq.w	800fe24 <_printf_i+0x198>
 800fcb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fcb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fcbc:	e03a      	b.n	800fd34 <_printf_i+0xa8>
 800fcbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fcc2:	2b15      	cmp	r3, #21
 800fcc4:	d8f6      	bhi.n	800fcb4 <_printf_i+0x28>
 800fcc6:	a101      	add	r1, pc, #4	@ (adr r1, 800fccc <_printf_i+0x40>)
 800fcc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fccc:	0800fd25 	.word	0x0800fd25
 800fcd0:	0800fd39 	.word	0x0800fd39
 800fcd4:	0800fcb5 	.word	0x0800fcb5
 800fcd8:	0800fcb5 	.word	0x0800fcb5
 800fcdc:	0800fcb5 	.word	0x0800fcb5
 800fce0:	0800fcb5 	.word	0x0800fcb5
 800fce4:	0800fd39 	.word	0x0800fd39
 800fce8:	0800fcb5 	.word	0x0800fcb5
 800fcec:	0800fcb5 	.word	0x0800fcb5
 800fcf0:	0800fcb5 	.word	0x0800fcb5
 800fcf4:	0800fcb5 	.word	0x0800fcb5
 800fcf8:	0800fe37 	.word	0x0800fe37
 800fcfc:	0800fd63 	.word	0x0800fd63
 800fd00:	0800fdf1 	.word	0x0800fdf1
 800fd04:	0800fcb5 	.word	0x0800fcb5
 800fd08:	0800fcb5 	.word	0x0800fcb5
 800fd0c:	0800fe59 	.word	0x0800fe59
 800fd10:	0800fcb5 	.word	0x0800fcb5
 800fd14:	0800fd63 	.word	0x0800fd63
 800fd18:	0800fcb5 	.word	0x0800fcb5
 800fd1c:	0800fcb5 	.word	0x0800fcb5
 800fd20:	0800fdf9 	.word	0x0800fdf9
 800fd24:	6833      	ldr	r3, [r6, #0]
 800fd26:	1d1a      	adds	r2, r3, #4
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	6032      	str	r2, [r6, #0]
 800fd2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fd30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fd34:	2301      	movs	r3, #1
 800fd36:	e09c      	b.n	800fe72 <_printf_i+0x1e6>
 800fd38:	6833      	ldr	r3, [r6, #0]
 800fd3a:	6820      	ldr	r0, [r4, #0]
 800fd3c:	1d19      	adds	r1, r3, #4
 800fd3e:	6031      	str	r1, [r6, #0]
 800fd40:	0606      	lsls	r6, r0, #24
 800fd42:	d501      	bpl.n	800fd48 <_printf_i+0xbc>
 800fd44:	681d      	ldr	r5, [r3, #0]
 800fd46:	e003      	b.n	800fd50 <_printf_i+0xc4>
 800fd48:	0645      	lsls	r5, r0, #25
 800fd4a:	d5fb      	bpl.n	800fd44 <_printf_i+0xb8>
 800fd4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fd50:	2d00      	cmp	r5, #0
 800fd52:	da03      	bge.n	800fd5c <_printf_i+0xd0>
 800fd54:	232d      	movs	r3, #45	@ 0x2d
 800fd56:	426d      	negs	r5, r5
 800fd58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd5c:	4858      	ldr	r0, [pc, #352]	@ (800fec0 <_printf_i+0x234>)
 800fd5e:	230a      	movs	r3, #10
 800fd60:	e011      	b.n	800fd86 <_printf_i+0xfa>
 800fd62:	6821      	ldr	r1, [r4, #0]
 800fd64:	6833      	ldr	r3, [r6, #0]
 800fd66:	0608      	lsls	r0, r1, #24
 800fd68:	f853 5b04 	ldr.w	r5, [r3], #4
 800fd6c:	d402      	bmi.n	800fd74 <_printf_i+0xe8>
 800fd6e:	0649      	lsls	r1, r1, #25
 800fd70:	bf48      	it	mi
 800fd72:	b2ad      	uxthmi	r5, r5
 800fd74:	2f6f      	cmp	r7, #111	@ 0x6f
 800fd76:	4852      	ldr	r0, [pc, #328]	@ (800fec0 <_printf_i+0x234>)
 800fd78:	6033      	str	r3, [r6, #0]
 800fd7a:	bf14      	ite	ne
 800fd7c:	230a      	movne	r3, #10
 800fd7e:	2308      	moveq	r3, #8
 800fd80:	2100      	movs	r1, #0
 800fd82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fd86:	6866      	ldr	r6, [r4, #4]
 800fd88:	60a6      	str	r6, [r4, #8]
 800fd8a:	2e00      	cmp	r6, #0
 800fd8c:	db05      	blt.n	800fd9a <_printf_i+0x10e>
 800fd8e:	6821      	ldr	r1, [r4, #0]
 800fd90:	432e      	orrs	r6, r5
 800fd92:	f021 0104 	bic.w	r1, r1, #4
 800fd96:	6021      	str	r1, [r4, #0]
 800fd98:	d04b      	beq.n	800fe32 <_printf_i+0x1a6>
 800fd9a:	4616      	mov	r6, r2
 800fd9c:	fbb5 f1f3 	udiv	r1, r5, r3
 800fda0:	fb03 5711 	mls	r7, r3, r1, r5
 800fda4:	5dc7      	ldrb	r7, [r0, r7]
 800fda6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fdaa:	462f      	mov	r7, r5
 800fdac:	42bb      	cmp	r3, r7
 800fdae:	460d      	mov	r5, r1
 800fdb0:	d9f4      	bls.n	800fd9c <_printf_i+0x110>
 800fdb2:	2b08      	cmp	r3, #8
 800fdb4:	d10b      	bne.n	800fdce <_printf_i+0x142>
 800fdb6:	6823      	ldr	r3, [r4, #0]
 800fdb8:	07df      	lsls	r7, r3, #31
 800fdba:	d508      	bpl.n	800fdce <_printf_i+0x142>
 800fdbc:	6923      	ldr	r3, [r4, #16]
 800fdbe:	6861      	ldr	r1, [r4, #4]
 800fdc0:	4299      	cmp	r1, r3
 800fdc2:	bfde      	ittt	le
 800fdc4:	2330      	movle	r3, #48	@ 0x30
 800fdc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fdca:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fdce:	1b92      	subs	r2, r2, r6
 800fdd0:	6122      	str	r2, [r4, #16]
 800fdd2:	f8cd a000 	str.w	sl, [sp]
 800fdd6:	464b      	mov	r3, r9
 800fdd8:	aa03      	add	r2, sp, #12
 800fdda:	4621      	mov	r1, r4
 800fddc:	4640      	mov	r0, r8
 800fdde:	f7ff fee7 	bl	800fbb0 <_printf_common>
 800fde2:	3001      	adds	r0, #1
 800fde4:	d14a      	bne.n	800fe7c <_printf_i+0x1f0>
 800fde6:	f04f 30ff 	mov.w	r0, #4294967295
 800fdea:	b004      	add	sp, #16
 800fdec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdf0:	6823      	ldr	r3, [r4, #0]
 800fdf2:	f043 0320 	orr.w	r3, r3, #32
 800fdf6:	6023      	str	r3, [r4, #0]
 800fdf8:	4832      	ldr	r0, [pc, #200]	@ (800fec4 <_printf_i+0x238>)
 800fdfa:	2778      	movs	r7, #120	@ 0x78
 800fdfc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fe00:	6823      	ldr	r3, [r4, #0]
 800fe02:	6831      	ldr	r1, [r6, #0]
 800fe04:	061f      	lsls	r7, r3, #24
 800fe06:	f851 5b04 	ldr.w	r5, [r1], #4
 800fe0a:	d402      	bmi.n	800fe12 <_printf_i+0x186>
 800fe0c:	065f      	lsls	r7, r3, #25
 800fe0e:	bf48      	it	mi
 800fe10:	b2ad      	uxthmi	r5, r5
 800fe12:	6031      	str	r1, [r6, #0]
 800fe14:	07d9      	lsls	r1, r3, #31
 800fe16:	bf44      	itt	mi
 800fe18:	f043 0320 	orrmi.w	r3, r3, #32
 800fe1c:	6023      	strmi	r3, [r4, #0]
 800fe1e:	b11d      	cbz	r5, 800fe28 <_printf_i+0x19c>
 800fe20:	2310      	movs	r3, #16
 800fe22:	e7ad      	b.n	800fd80 <_printf_i+0xf4>
 800fe24:	4826      	ldr	r0, [pc, #152]	@ (800fec0 <_printf_i+0x234>)
 800fe26:	e7e9      	b.n	800fdfc <_printf_i+0x170>
 800fe28:	6823      	ldr	r3, [r4, #0]
 800fe2a:	f023 0320 	bic.w	r3, r3, #32
 800fe2e:	6023      	str	r3, [r4, #0]
 800fe30:	e7f6      	b.n	800fe20 <_printf_i+0x194>
 800fe32:	4616      	mov	r6, r2
 800fe34:	e7bd      	b.n	800fdb2 <_printf_i+0x126>
 800fe36:	6833      	ldr	r3, [r6, #0]
 800fe38:	6825      	ldr	r5, [r4, #0]
 800fe3a:	6961      	ldr	r1, [r4, #20]
 800fe3c:	1d18      	adds	r0, r3, #4
 800fe3e:	6030      	str	r0, [r6, #0]
 800fe40:	062e      	lsls	r6, r5, #24
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	d501      	bpl.n	800fe4a <_printf_i+0x1be>
 800fe46:	6019      	str	r1, [r3, #0]
 800fe48:	e002      	b.n	800fe50 <_printf_i+0x1c4>
 800fe4a:	0668      	lsls	r0, r5, #25
 800fe4c:	d5fb      	bpl.n	800fe46 <_printf_i+0x1ba>
 800fe4e:	8019      	strh	r1, [r3, #0]
 800fe50:	2300      	movs	r3, #0
 800fe52:	6123      	str	r3, [r4, #16]
 800fe54:	4616      	mov	r6, r2
 800fe56:	e7bc      	b.n	800fdd2 <_printf_i+0x146>
 800fe58:	6833      	ldr	r3, [r6, #0]
 800fe5a:	1d1a      	adds	r2, r3, #4
 800fe5c:	6032      	str	r2, [r6, #0]
 800fe5e:	681e      	ldr	r6, [r3, #0]
 800fe60:	6862      	ldr	r2, [r4, #4]
 800fe62:	2100      	movs	r1, #0
 800fe64:	4630      	mov	r0, r6
 800fe66:	f7f0 f9c3 	bl	80001f0 <memchr>
 800fe6a:	b108      	cbz	r0, 800fe70 <_printf_i+0x1e4>
 800fe6c:	1b80      	subs	r0, r0, r6
 800fe6e:	6060      	str	r0, [r4, #4]
 800fe70:	6863      	ldr	r3, [r4, #4]
 800fe72:	6123      	str	r3, [r4, #16]
 800fe74:	2300      	movs	r3, #0
 800fe76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe7a:	e7aa      	b.n	800fdd2 <_printf_i+0x146>
 800fe7c:	6923      	ldr	r3, [r4, #16]
 800fe7e:	4632      	mov	r2, r6
 800fe80:	4649      	mov	r1, r9
 800fe82:	4640      	mov	r0, r8
 800fe84:	47d0      	blx	sl
 800fe86:	3001      	adds	r0, #1
 800fe88:	d0ad      	beq.n	800fde6 <_printf_i+0x15a>
 800fe8a:	6823      	ldr	r3, [r4, #0]
 800fe8c:	079b      	lsls	r3, r3, #30
 800fe8e:	d413      	bmi.n	800feb8 <_printf_i+0x22c>
 800fe90:	68e0      	ldr	r0, [r4, #12]
 800fe92:	9b03      	ldr	r3, [sp, #12]
 800fe94:	4298      	cmp	r0, r3
 800fe96:	bfb8      	it	lt
 800fe98:	4618      	movlt	r0, r3
 800fe9a:	e7a6      	b.n	800fdea <_printf_i+0x15e>
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	4632      	mov	r2, r6
 800fea0:	4649      	mov	r1, r9
 800fea2:	4640      	mov	r0, r8
 800fea4:	47d0      	blx	sl
 800fea6:	3001      	adds	r0, #1
 800fea8:	d09d      	beq.n	800fde6 <_printf_i+0x15a>
 800feaa:	3501      	adds	r5, #1
 800feac:	68e3      	ldr	r3, [r4, #12]
 800feae:	9903      	ldr	r1, [sp, #12]
 800feb0:	1a5b      	subs	r3, r3, r1
 800feb2:	42ab      	cmp	r3, r5
 800feb4:	dcf2      	bgt.n	800fe9c <_printf_i+0x210>
 800feb6:	e7eb      	b.n	800fe90 <_printf_i+0x204>
 800feb8:	2500      	movs	r5, #0
 800feba:	f104 0619 	add.w	r6, r4, #25
 800febe:	e7f5      	b.n	800feac <_printf_i+0x220>
 800fec0:	08012c2e 	.word	0x08012c2e
 800fec4:	08012c3f 	.word	0x08012c3f

0800fec8 <std>:
 800fec8:	2300      	movs	r3, #0
 800feca:	b510      	push	{r4, lr}
 800fecc:	4604      	mov	r4, r0
 800fece:	e9c0 3300 	strd	r3, r3, [r0]
 800fed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fed6:	6083      	str	r3, [r0, #8]
 800fed8:	8181      	strh	r1, [r0, #12]
 800feda:	6643      	str	r3, [r0, #100]	@ 0x64
 800fedc:	81c2      	strh	r2, [r0, #14]
 800fede:	6183      	str	r3, [r0, #24]
 800fee0:	4619      	mov	r1, r3
 800fee2:	2208      	movs	r2, #8
 800fee4:	305c      	adds	r0, #92	@ 0x5c
 800fee6:	f000 f916 	bl	8010116 <memset>
 800feea:	4b0d      	ldr	r3, [pc, #52]	@ (800ff20 <std+0x58>)
 800feec:	6263      	str	r3, [r4, #36]	@ 0x24
 800feee:	4b0d      	ldr	r3, [pc, #52]	@ (800ff24 <std+0x5c>)
 800fef0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fef2:	4b0d      	ldr	r3, [pc, #52]	@ (800ff28 <std+0x60>)
 800fef4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fef6:	4b0d      	ldr	r3, [pc, #52]	@ (800ff2c <std+0x64>)
 800fef8:	6323      	str	r3, [r4, #48]	@ 0x30
 800fefa:	4b0d      	ldr	r3, [pc, #52]	@ (800ff30 <std+0x68>)
 800fefc:	6224      	str	r4, [r4, #32]
 800fefe:	429c      	cmp	r4, r3
 800ff00:	d006      	beq.n	800ff10 <std+0x48>
 800ff02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ff06:	4294      	cmp	r4, r2
 800ff08:	d002      	beq.n	800ff10 <std+0x48>
 800ff0a:	33d0      	adds	r3, #208	@ 0xd0
 800ff0c:	429c      	cmp	r4, r3
 800ff0e:	d105      	bne.n	800ff1c <std+0x54>
 800ff10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ff14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff18:	f000 b98a 	b.w	8010230 <__retarget_lock_init_recursive>
 800ff1c:	bd10      	pop	{r4, pc}
 800ff1e:	bf00      	nop
 800ff20:	08010091 	.word	0x08010091
 800ff24:	080100b3 	.word	0x080100b3
 800ff28:	080100eb 	.word	0x080100eb
 800ff2c:	0801010f 	.word	0x0801010f
 800ff30:	20003098 	.word	0x20003098

0800ff34 <stdio_exit_handler>:
 800ff34:	4a02      	ldr	r2, [pc, #8]	@ (800ff40 <stdio_exit_handler+0xc>)
 800ff36:	4903      	ldr	r1, [pc, #12]	@ (800ff44 <stdio_exit_handler+0x10>)
 800ff38:	4803      	ldr	r0, [pc, #12]	@ (800ff48 <stdio_exit_handler+0x14>)
 800ff3a:	f000 b869 	b.w	8010010 <_fwalk_sglue>
 800ff3e:	bf00      	nop
 800ff40:	2000002c 	.word	0x2000002c
 800ff44:	08011a49 	.word	0x08011a49
 800ff48:	2000003c 	.word	0x2000003c

0800ff4c <cleanup_stdio>:
 800ff4c:	6841      	ldr	r1, [r0, #4]
 800ff4e:	4b0c      	ldr	r3, [pc, #48]	@ (800ff80 <cleanup_stdio+0x34>)
 800ff50:	4299      	cmp	r1, r3
 800ff52:	b510      	push	{r4, lr}
 800ff54:	4604      	mov	r4, r0
 800ff56:	d001      	beq.n	800ff5c <cleanup_stdio+0x10>
 800ff58:	f001 fd76 	bl	8011a48 <_fflush_r>
 800ff5c:	68a1      	ldr	r1, [r4, #8]
 800ff5e:	4b09      	ldr	r3, [pc, #36]	@ (800ff84 <cleanup_stdio+0x38>)
 800ff60:	4299      	cmp	r1, r3
 800ff62:	d002      	beq.n	800ff6a <cleanup_stdio+0x1e>
 800ff64:	4620      	mov	r0, r4
 800ff66:	f001 fd6f 	bl	8011a48 <_fflush_r>
 800ff6a:	68e1      	ldr	r1, [r4, #12]
 800ff6c:	4b06      	ldr	r3, [pc, #24]	@ (800ff88 <cleanup_stdio+0x3c>)
 800ff6e:	4299      	cmp	r1, r3
 800ff70:	d004      	beq.n	800ff7c <cleanup_stdio+0x30>
 800ff72:	4620      	mov	r0, r4
 800ff74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff78:	f001 bd66 	b.w	8011a48 <_fflush_r>
 800ff7c:	bd10      	pop	{r4, pc}
 800ff7e:	bf00      	nop
 800ff80:	20003098 	.word	0x20003098
 800ff84:	20003100 	.word	0x20003100
 800ff88:	20003168 	.word	0x20003168

0800ff8c <global_stdio_init.part.0>:
 800ff8c:	b510      	push	{r4, lr}
 800ff8e:	4b0b      	ldr	r3, [pc, #44]	@ (800ffbc <global_stdio_init.part.0+0x30>)
 800ff90:	4c0b      	ldr	r4, [pc, #44]	@ (800ffc0 <global_stdio_init.part.0+0x34>)
 800ff92:	4a0c      	ldr	r2, [pc, #48]	@ (800ffc4 <global_stdio_init.part.0+0x38>)
 800ff94:	601a      	str	r2, [r3, #0]
 800ff96:	4620      	mov	r0, r4
 800ff98:	2200      	movs	r2, #0
 800ff9a:	2104      	movs	r1, #4
 800ff9c:	f7ff ff94 	bl	800fec8 <std>
 800ffa0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ffa4:	2201      	movs	r2, #1
 800ffa6:	2109      	movs	r1, #9
 800ffa8:	f7ff ff8e 	bl	800fec8 <std>
 800ffac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ffb0:	2202      	movs	r2, #2
 800ffb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffb6:	2112      	movs	r1, #18
 800ffb8:	f7ff bf86 	b.w	800fec8 <std>
 800ffbc:	200031d0 	.word	0x200031d0
 800ffc0:	20003098 	.word	0x20003098
 800ffc4:	0800ff35 	.word	0x0800ff35

0800ffc8 <__sfp_lock_acquire>:
 800ffc8:	4801      	ldr	r0, [pc, #4]	@ (800ffd0 <__sfp_lock_acquire+0x8>)
 800ffca:	f000 b932 	b.w	8010232 <__retarget_lock_acquire_recursive>
 800ffce:	bf00      	nop
 800ffd0:	200031d9 	.word	0x200031d9

0800ffd4 <__sfp_lock_release>:
 800ffd4:	4801      	ldr	r0, [pc, #4]	@ (800ffdc <__sfp_lock_release+0x8>)
 800ffd6:	f000 b92d 	b.w	8010234 <__retarget_lock_release_recursive>
 800ffda:	bf00      	nop
 800ffdc:	200031d9 	.word	0x200031d9

0800ffe0 <__sinit>:
 800ffe0:	b510      	push	{r4, lr}
 800ffe2:	4604      	mov	r4, r0
 800ffe4:	f7ff fff0 	bl	800ffc8 <__sfp_lock_acquire>
 800ffe8:	6a23      	ldr	r3, [r4, #32]
 800ffea:	b11b      	cbz	r3, 800fff4 <__sinit+0x14>
 800ffec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fff0:	f7ff bff0 	b.w	800ffd4 <__sfp_lock_release>
 800fff4:	4b04      	ldr	r3, [pc, #16]	@ (8010008 <__sinit+0x28>)
 800fff6:	6223      	str	r3, [r4, #32]
 800fff8:	4b04      	ldr	r3, [pc, #16]	@ (801000c <__sinit+0x2c>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d1f5      	bne.n	800ffec <__sinit+0xc>
 8010000:	f7ff ffc4 	bl	800ff8c <global_stdio_init.part.0>
 8010004:	e7f2      	b.n	800ffec <__sinit+0xc>
 8010006:	bf00      	nop
 8010008:	0800ff4d 	.word	0x0800ff4d
 801000c:	200031d0 	.word	0x200031d0

08010010 <_fwalk_sglue>:
 8010010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010014:	4607      	mov	r7, r0
 8010016:	4688      	mov	r8, r1
 8010018:	4614      	mov	r4, r2
 801001a:	2600      	movs	r6, #0
 801001c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010020:	f1b9 0901 	subs.w	r9, r9, #1
 8010024:	d505      	bpl.n	8010032 <_fwalk_sglue+0x22>
 8010026:	6824      	ldr	r4, [r4, #0]
 8010028:	2c00      	cmp	r4, #0
 801002a:	d1f7      	bne.n	801001c <_fwalk_sglue+0xc>
 801002c:	4630      	mov	r0, r6
 801002e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010032:	89ab      	ldrh	r3, [r5, #12]
 8010034:	2b01      	cmp	r3, #1
 8010036:	d907      	bls.n	8010048 <_fwalk_sglue+0x38>
 8010038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801003c:	3301      	adds	r3, #1
 801003e:	d003      	beq.n	8010048 <_fwalk_sglue+0x38>
 8010040:	4629      	mov	r1, r5
 8010042:	4638      	mov	r0, r7
 8010044:	47c0      	blx	r8
 8010046:	4306      	orrs	r6, r0
 8010048:	3568      	adds	r5, #104	@ 0x68
 801004a:	e7e9      	b.n	8010020 <_fwalk_sglue+0x10>

0801004c <siprintf>:
 801004c:	b40e      	push	{r1, r2, r3}
 801004e:	b510      	push	{r4, lr}
 8010050:	b09d      	sub	sp, #116	@ 0x74
 8010052:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010054:	9002      	str	r0, [sp, #8]
 8010056:	9006      	str	r0, [sp, #24]
 8010058:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801005c:	480a      	ldr	r0, [pc, #40]	@ (8010088 <siprintf+0x3c>)
 801005e:	9107      	str	r1, [sp, #28]
 8010060:	9104      	str	r1, [sp, #16]
 8010062:	490a      	ldr	r1, [pc, #40]	@ (801008c <siprintf+0x40>)
 8010064:	f853 2b04 	ldr.w	r2, [r3], #4
 8010068:	9105      	str	r1, [sp, #20]
 801006a:	2400      	movs	r4, #0
 801006c:	a902      	add	r1, sp, #8
 801006e:	6800      	ldr	r0, [r0, #0]
 8010070:	9301      	str	r3, [sp, #4]
 8010072:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010074:	f001 fb68 	bl	8011748 <_svfiprintf_r>
 8010078:	9b02      	ldr	r3, [sp, #8]
 801007a:	701c      	strb	r4, [r3, #0]
 801007c:	b01d      	add	sp, #116	@ 0x74
 801007e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010082:	b003      	add	sp, #12
 8010084:	4770      	bx	lr
 8010086:	bf00      	nop
 8010088:	20000038 	.word	0x20000038
 801008c:	ffff0208 	.word	0xffff0208

08010090 <__sread>:
 8010090:	b510      	push	{r4, lr}
 8010092:	460c      	mov	r4, r1
 8010094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010098:	f000 f86c 	bl	8010174 <_read_r>
 801009c:	2800      	cmp	r0, #0
 801009e:	bfab      	itete	ge
 80100a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80100a2:	89a3      	ldrhlt	r3, [r4, #12]
 80100a4:	181b      	addge	r3, r3, r0
 80100a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80100aa:	bfac      	ite	ge
 80100ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80100ae:	81a3      	strhlt	r3, [r4, #12]
 80100b0:	bd10      	pop	{r4, pc}

080100b2 <__swrite>:
 80100b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100b6:	461f      	mov	r7, r3
 80100b8:	898b      	ldrh	r3, [r1, #12]
 80100ba:	05db      	lsls	r3, r3, #23
 80100bc:	4605      	mov	r5, r0
 80100be:	460c      	mov	r4, r1
 80100c0:	4616      	mov	r6, r2
 80100c2:	d505      	bpl.n	80100d0 <__swrite+0x1e>
 80100c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100c8:	2302      	movs	r3, #2
 80100ca:	2200      	movs	r2, #0
 80100cc:	f000 f840 	bl	8010150 <_lseek_r>
 80100d0:	89a3      	ldrh	r3, [r4, #12]
 80100d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80100da:	81a3      	strh	r3, [r4, #12]
 80100dc:	4632      	mov	r2, r6
 80100de:	463b      	mov	r3, r7
 80100e0:	4628      	mov	r0, r5
 80100e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100e6:	f000 b867 	b.w	80101b8 <_write_r>

080100ea <__sseek>:
 80100ea:	b510      	push	{r4, lr}
 80100ec:	460c      	mov	r4, r1
 80100ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100f2:	f000 f82d 	bl	8010150 <_lseek_r>
 80100f6:	1c43      	adds	r3, r0, #1
 80100f8:	89a3      	ldrh	r3, [r4, #12]
 80100fa:	bf15      	itete	ne
 80100fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80100fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010102:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010106:	81a3      	strheq	r3, [r4, #12]
 8010108:	bf18      	it	ne
 801010a:	81a3      	strhne	r3, [r4, #12]
 801010c:	bd10      	pop	{r4, pc}

0801010e <__sclose>:
 801010e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010112:	f000 b80d 	b.w	8010130 <_close_r>

08010116 <memset>:
 8010116:	4402      	add	r2, r0
 8010118:	4603      	mov	r3, r0
 801011a:	4293      	cmp	r3, r2
 801011c:	d100      	bne.n	8010120 <memset+0xa>
 801011e:	4770      	bx	lr
 8010120:	f803 1b01 	strb.w	r1, [r3], #1
 8010124:	e7f9      	b.n	801011a <memset+0x4>
	...

08010128 <_localeconv_r>:
 8010128:	4800      	ldr	r0, [pc, #0]	@ (801012c <_localeconv_r+0x4>)
 801012a:	4770      	bx	lr
 801012c:	20000178 	.word	0x20000178

08010130 <_close_r>:
 8010130:	b538      	push	{r3, r4, r5, lr}
 8010132:	4d06      	ldr	r5, [pc, #24]	@ (801014c <_close_r+0x1c>)
 8010134:	2300      	movs	r3, #0
 8010136:	4604      	mov	r4, r0
 8010138:	4608      	mov	r0, r1
 801013a:	602b      	str	r3, [r5, #0]
 801013c:	f7f1 fd18 	bl	8001b70 <_close>
 8010140:	1c43      	adds	r3, r0, #1
 8010142:	d102      	bne.n	801014a <_close_r+0x1a>
 8010144:	682b      	ldr	r3, [r5, #0]
 8010146:	b103      	cbz	r3, 801014a <_close_r+0x1a>
 8010148:	6023      	str	r3, [r4, #0]
 801014a:	bd38      	pop	{r3, r4, r5, pc}
 801014c:	200031d4 	.word	0x200031d4

08010150 <_lseek_r>:
 8010150:	b538      	push	{r3, r4, r5, lr}
 8010152:	4d07      	ldr	r5, [pc, #28]	@ (8010170 <_lseek_r+0x20>)
 8010154:	4604      	mov	r4, r0
 8010156:	4608      	mov	r0, r1
 8010158:	4611      	mov	r1, r2
 801015a:	2200      	movs	r2, #0
 801015c:	602a      	str	r2, [r5, #0]
 801015e:	461a      	mov	r2, r3
 8010160:	f7f1 fd2d 	bl	8001bbe <_lseek>
 8010164:	1c43      	adds	r3, r0, #1
 8010166:	d102      	bne.n	801016e <_lseek_r+0x1e>
 8010168:	682b      	ldr	r3, [r5, #0]
 801016a:	b103      	cbz	r3, 801016e <_lseek_r+0x1e>
 801016c:	6023      	str	r3, [r4, #0]
 801016e:	bd38      	pop	{r3, r4, r5, pc}
 8010170:	200031d4 	.word	0x200031d4

08010174 <_read_r>:
 8010174:	b538      	push	{r3, r4, r5, lr}
 8010176:	4d07      	ldr	r5, [pc, #28]	@ (8010194 <_read_r+0x20>)
 8010178:	4604      	mov	r4, r0
 801017a:	4608      	mov	r0, r1
 801017c:	4611      	mov	r1, r2
 801017e:	2200      	movs	r2, #0
 8010180:	602a      	str	r2, [r5, #0]
 8010182:	461a      	mov	r2, r3
 8010184:	f7f1 fcbb 	bl	8001afe <_read>
 8010188:	1c43      	adds	r3, r0, #1
 801018a:	d102      	bne.n	8010192 <_read_r+0x1e>
 801018c:	682b      	ldr	r3, [r5, #0]
 801018e:	b103      	cbz	r3, 8010192 <_read_r+0x1e>
 8010190:	6023      	str	r3, [r4, #0]
 8010192:	bd38      	pop	{r3, r4, r5, pc}
 8010194:	200031d4 	.word	0x200031d4

08010198 <_sbrk_r>:
 8010198:	b538      	push	{r3, r4, r5, lr}
 801019a:	4d06      	ldr	r5, [pc, #24]	@ (80101b4 <_sbrk_r+0x1c>)
 801019c:	2300      	movs	r3, #0
 801019e:	4604      	mov	r4, r0
 80101a0:	4608      	mov	r0, r1
 80101a2:	602b      	str	r3, [r5, #0]
 80101a4:	f7f1 fd18 	bl	8001bd8 <_sbrk>
 80101a8:	1c43      	adds	r3, r0, #1
 80101aa:	d102      	bne.n	80101b2 <_sbrk_r+0x1a>
 80101ac:	682b      	ldr	r3, [r5, #0]
 80101ae:	b103      	cbz	r3, 80101b2 <_sbrk_r+0x1a>
 80101b0:	6023      	str	r3, [r4, #0]
 80101b2:	bd38      	pop	{r3, r4, r5, pc}
 80101b4:	200031d4 	.word	0x200031d4

080101b8 <_write_r>:
 80101b8:	b538      	push	{r3, r4, r5, lr}
 80101ba:	4d07      	ldr	r5, [pc, #28]	@ (80101d8 <_write_r+0x20>)
 80101bc:	4604      	mov	r4, r0
 80101be:	4608      	mov	r0, r1
 80101c0:	4611      	mov	r1, r2
 80101c2:	2200      	movs	r2, #0
 80101c4:	602a      	str	r2, [r5, #0]
 80101c6:	461a      	mov	r2, r3
 80101c8:	f7f1 fcb6 	bl	8001b38 <_write>
 80101cc:	1c43      	adds	r3, r0, #1
 80101ce:	d102      	bne.n	80101d6 <_write_r+0x1e>
 80101d0:	682b      	ldr	r3, [r5, #0]
 80101d2:	b103      	cbz	r3, 80101d6 <_write_r+0x1e>
 80101d4:	6023      	str	r3, [r4, #0]
 80101d6:	bd38      	pop	{r3, r4, r5, pc}
 80101d8:	200031d4 	.word	0x200031d4

080101dc <__errno>:
 80101dc:	4b01      	ldr	r3, [pc, #4]	@ (80101e4 <__errno+0x8>)
 80101de:	6818      	ldr	r0, [r3, #0]
 80101e0:	4770      	bx	lr
 80101e2:	bf00      	nop
 80101e4:	20000038 	.word	0x20000038

080101e8 <__libc_init_array>:
 80101e8:	b570      	push	{r4, r5, r6, lr}
 80101ea:	4d0d      	ldr	r5, [pc, #52]	@ (8010220 <__libc_init_array+0x38>)
 80101ec:	4c0d      	ldr	r4, [pc, #52]	@ (8010224 <__libc_init_array+0x3c>)
 80101ee:	1b64      	subs	r4, r4, r5
 80101f0:	10a4      	asrs	r4, r4, #2
 80101f2:	2600      	movs	r6, #0
 80101f4:	42a6      	cmp	r6, r4
 80101f6:	d109      	bne.n	801020c <__libc_init_array+0x24>
 80101f8:	4d0b      	ldr	r5, [pc, #44]	@ (8010228 <__libc_init_array+0x40>)
 80101fa:	4c0c      	ldr	r4, [pc, #48]	@ (801022c <__libc_init_array+0x44>)
 80101fc:	f001 ffa4 	bl	8012148 <_init>
 8010200:	1b64      	subs	r4, r4, r5
 8010202:	10a4      	asrs	r4, r4, #2
 8010204:	2600      	movs	r6, #0
 8010206:	42a6      	cmp	r6, r4
 8010208:	d105      	bne.n	8010216 <__libc_init_array+0x2e>
 801020a:	bd70      	pop	{r4, r5, r6, pc}
 801020c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010210:	4798      	blx	r3
 8010212:	3601      	adds	r6, #1
 8010214:	e7ee      	b.n	80101f4 <__libc_init_array+0xc>
 8010216:	f855 3b04 	ldr.w	r3, [r5], #4
 801021a:	4798      	blx	r3
 801021c:	3601      	adds	r6, #1
 801021e:	e7f2      	b.n	8010206 <__libc_init_array+0x1e>
 8010220:	08012f9c 	.word	0x08012f9c
 8010224:	08012f9c 	.word	0x08012f9c
 8010228:	08012f9c 	.word	0x08012f9c
 801022c:	08012fa0 	.word	0x08012fa0

08010230 <__retarget_lock_init_recursive>:
 8010230:	4770      	bx	lr

08010232 <__retarget_lock_acquire_recursive>:
 8010232:	4770      	bx	lr

08010234 <__retarget_lock_release_recursive>:
 8010234:	4770      	bx	lr

08010236 <memcpy>:
 8010236:	440a      	add	r2, r1
 8010238:	4291      	cmp	r1, r2
 801023a:	f100 33ff 	add.w	r3, r0, #4294967295
 801023e:	d100      	bne.n	8010242 <memcpy+0xc>
 8010240:	4770      	bx	lr
 8010242:	b510      	push	{r4, lr}
 8010244:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010248:	f803 4f01 	strb.w	r4, [r3, #1]!
 801024c:	4291      	cmp	r1, r2
 801024e:	d1f9      	bne.n	8010244 <memcpy+0xe>
 8010250:	bd10      	pop	{r4, pc}

08010252 <quorem>:
 8010252:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010256:	6903      	ldr	r3, [r0, #16]
 8010258:	690c      	ldr	r4, [r1, #16]
 801025a:	42a3      	cmp	r3, r4
 801025c:	4607      	mov	r7, r0
 801025e:	db7e      	blt.n	801035e <quorem+0x10c>
 8010260:	3c01      	subs	r4, #1
 8010262:	f101 0814 	add.w	r8, r1, #20
 8010266:	00a3      	lsls	r3, r4, #2
 8010268:	f100 0514 	add.w	r5, r0, #20
 801026c:	9300      	str	r3, [sp, #0]
 801026e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010272:	9301      	str	r3, [sp, #4]
 8010274:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010278:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801027c:	3301      	adds	r3, #1
 801027e:	429a      	cmp	r2, r3
 8010280:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010284:	fbb2 f6f3 	udiv	r6, r2, r3
 8010288:	d32e      	bcc.n	80102e8 <quorem+0x96>
 801028a:	f04f 0a00 	mov.w	sl, #0
 801028e:	46c4      	mov	ip, r8
 8010290:	46ae      	mov	lr, r5
 8010292:	46d3      	mov	fp, sl
 8010294:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010298:	b298      	uxth	r0, r3
 801029a:	fb06 a000 	mla	r0, r6, r0, sl
 801029e:	0c02      	lsrs	r2, r0, #16
 80102a0:	0c1b      	lsrs	r3, r3, #16
 80102a2:	fb06 2303 	mla	r3, r6, r3, r2
 80102a6:	f8de 2000 	ldr.w	r2, [lr]
 80102aa:	b280      	uxth	r0, r0
 80102ac:	b292      	uxth	r2, r2
 80102ae:	1a12      	subs	r2, r2, r0
 80102b0:	445a      	add	r2, fp
 80102b2:	f8de 0000 	ldr.w	r0, [lr]
 80102b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80102ba:	b29b      	uxth	r3, r3
 80102bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80102c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80102c4:	b292      	uxth	r2, r2
 80102c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80102ca:	45e1      	cmp	r9, ip
 80102cc:	f84e 2b04 	str.w	r2, [lr], #4
 80102d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80102d4:	d2de      	bcs.n	8010294 <quorem+0x42>
 80102d6:	9b00      	ldr	r3, [sp, #0]
 80102d8:	58eb      	ldr	r3, [r5, r3]
 80102da:	b92b      	cbnz	r3, 80102e8 <quorem+0x96>
 80102dc:	9b01      	ldr	r3, [sp, #4]
 80102de:	3b04      	subs	r3, #4
 80102e0:	429d      	cmp	r5, r3
 80102e2:	461a      	mov	r2, r3
 80102e4:	d32f      	bcc.n	8010346 <quorem+0xf4>
 80102e6:	613c      	str	r4, [r7, #16]
 80102e8:	4638      	mov	r0, r7
 80102ea:	f001 f8c9 	bl	8011480 <__mcmp>
 80102ee:	2800      	cmp	r0, #0
 80102f0:	db25      	blt.n	801033e <quorem+0xec>
 80102f2:	4629      	mov	r1, r5
 80102f4:	2000      	movs	r0, #0
 80102f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80102fa:	f8d1 c000 	ldr.w	ip, [r1]
 80102fe:	fa1f fe82 	uxth.w	lr, r2
 8010302:	fa1f f38c 	uxth.w	r3, ip
 8010306:	eba3 030e 	sub.w	r3, r3, lr
 801030a:	4403      	add	r3, r0
 801030c:	0c12      	lsrs	r2, r2, #16
 801030e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010312:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010316:	b29b      	uxth	r3, r3
 8010318:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801031c:	45c1      	cmp	r9, r8
 801031e:	f841 3b04 	str.w	r3, [r1], #4
 8010322:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010326:	d2e6      	bcs.n	80102f6 <quorem+0xa4>
 8010328:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801032c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010330:	b922      	cbnz	r2, 801033c <quorem+0xea>
 8010332:	3b04      	subs	r3, #4
 8010334:	429d      	cmp	r5, r3
 8010336:	461a      	mov	r2, r3
 8010338:	d30b      	bcc.n	8010352 <quorem+0x100>
 801033a:	613c      	str	r4, [r7, #16]
 801033c:	3601      	adds	r6, #1
 801033e:	4630      	mov	r0, r6
 8010340:	b003      	add	sp, #12
 8010342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010346:	6812      	ldr	r2, [r2, #0]
 8010348:	3b04      	subs	r3, #4
 801034a:	2a00      	cmp	r2, #0
 801034c:	d1cb      	bne.n	80102e6 <quorem+0x94>
 801034e:	3c01      	subs	r4, #1
 8010350:	e7c6      	b.n	80102e0 <quorem+0x8e>
 8010352:	6812      	ldr	r2, [r2, #0]
 8010354:	3b04      	subs	r3, #4
 8010356:	2a00      	cmp	r2, #0
 8010358:	d1ef      	bne.n	801033a <quorem+0xe8>
 801035a:	3c01      	subs	r4, #1
 801035c:	e7ea      	b.n	8010334 <quorem+0xe2>
 801035e:	2000      	movs	r0, #0
 8010360:	e7ee      	b.n	8010340 <quorem+0xee>
 8010362:	0000      	movs	r0, r0
 8010364:	0000      	movs	r0, r0
	...

08010368 <_dtoa_r>:
 8010368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801036c:	69c7      	ldr	r7, [r0, #28]
 801036e:	b097      	sub	sp, #92	@ 0x5c
 8010370:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010374:	ec55 4b10 	vmov	r4, r5, d0
 8010378:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801037a:	9107      	str	r1, [sp, #28]
 801037c:	4681      	mov	r9, r0
 801037e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010380:	9311      	str	r3, [sp, #68]	@ 0x44
 8010382:	b97f      	cbnz	r7, 80103a4 <_dtoa_r+0x3c>
 8010384:	2010      	movs	r0, #16
 8010386:	f7ff f88b 	bl	800f4a0 <malloc>
 801038a:	4602      	mov	r2, r0
 801038c:	f8c9 001c 	str.w	r0, [r9, #28]
 8010390:	b920      	cbnz	r0, 801039c <_dtoa_r+0x34>
 8010392:	4ba9      	ldr	r3, [pc, #676]	@ (8010638 <_dtoa_r+0x2d0>)
 8010394:	21ef      	movs	r1, #239	@ 0xef
 8010396:	48a9      	ldr	r0, [pc, #676]	@ (801063c <_dtoa_r+0x2d4>)
 8010398:	f001 fb98 	bl	8011acc <__assert_func>
 801039c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80103a0:	6007      	str	r7, [r0, #0]
 80103a2:	60c7      	str	r7, [r0, #12]
 80103a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80103a8:	6819      	ldr	r1, [r3, #0]
 80103aa:	b159      	cbz	r1, 80103c4 <_dtoa_r+0x5c>
 80103ac:	685a      	ldr	r2, [r3, #4]
 80103ae:	604a      	str	r2, [r1, #4]
 80103b0:	2301      	movs	r3, #1
 80103b2:	4093      	lsls	r3, r2
 80103b4:	608b      	str	r3, [r1, #8]
 80103b6:	4648      	mov	r0, r9
 80103b8:	f000 fe30 	bl	801101c <_Bfree>
 80103bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80103c0:	2200      	movs	r2, #0
 80103c2:	601a      	str	r2, [r3, #0]
 80103c4:	1e2b      	subs	r3, r5, #0
 80103c6:	bfb9      	ittee	lt
 80103c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80103cc:	9305      	strlt	r3, [sp, #20]
 80103ce:	2300      	movge	r3, #0
 80103d0:	6033      	strge	r3, [r6, #0]
 80103d2:	9f05      	ldr	r7, [sp, #20]
 80103d4:	4b9a      	ldr	r3, [pc, #616]	@ (8010640 <_dtoa_r+0x2d8>)
 80103d6:	bfbc      	itt	lt
 80103d8:	2201      	movlt	r2, #1
 80103da:	6032      	strlt	r2, [r6, #0]
 80103dc:	43bb      	bics	r3, r7
 80103de:	d112      	bne.n	8010406 <_dtoa_r+0x9e>
 80103e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80103e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80103e6:	6013      	str	r3, [r2, #0]
 80103e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80103ec:	4323      	orrs	r3, r4
 80103ee:	f000 855a 	beq.w	8010ea6 <_dtoa_r+0xb3e>
 80103f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80103f4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010654 <_dtoa_r+0x2ec>
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	f000 855c 	beq.w	8010eb6 <_dtoa_r+0xb4e>
 80103fe:	f10a 0303 	add.w	r3, sl, #3
 8010402:	f000 bd56 	b.w	8010eb2 <_dtoa_r+0xb4a>
 8010406:	ed9d 7b04 	vldr	d7, [sp, #16]
 801040a:	2200      	movs	r2, #0
 801040c:	ec51 0b17 	vmov	r0, r1, d7
 8010410:	2300      	movs	r3, #0
 8010412:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010416:	f7f0 fb67 	bl	8000ae8 <__aeabi_dcmpeq>
 801041a:	4680      	mov	r8, r0
 801041c:	b158      	cbz	r0, 8010436 <_dtoa_r+0xce>
 801041e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010420:	2301      	movs	r3, #1
 8010422:	6013      	str	r3, [r2, #0]
 8010424:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010426:	b113      	cbz	r3, 801042e <_dtoa_r+0xc6>
 8010428:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801042a:	4b86      	ldr	r3, [pc, #536]	@ (8010644 <_dtoa_r+0x2dc>)
 801042c:	6013      	str	r3, [r2, #0]
 801042e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010658 <_dtoa_r+0x2f0>
 8010432:	f000 bd40 	b.w	8010eb6 <_dtoa_r+0xb4e>
 8010436:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801043a:	aa14      	add	r2, sp, #80	@ 0x50
 801043c:	a915      	add	r1, sp, #84	@ 0x54
 801043e:	4648      	mov	r0, r9
 8010440:	f001 f8ce 	bl	80115e0 <__d2b>
 8010444:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010448:	9002      	str	r0, [sp, #8]
 801044a:	2e00      	cmp	r6, #0
 801044c:	d078      	beq.n	8010540 <_dtoa_r+0x1d8>
 801044e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010450:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010458:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801045c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010460:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010464:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010468:	4619      	mov	r1, r3
 801046a:	2200      	movs	r2, #0
 801046c:	4b76      	ldr	r3, [pc, #472]	@ (8010648 <_dtoa_r+0x2e0>)
 801046e:	f7ef ff1b 	bl	80002a8 <__aeabi_dsub>
 8010472:	a36b      	add	r3, pc, #428	@ (adr r3, 8010620 <_dtoa_r+0x2b8>)
 8010474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010478:	f7f0 f8ce 	bl	8000618 <__aeabi_dmul>
 801047c:	a36a      	add	r3, pc, #424	@ (adr r3, 8010628 <_dtoa_r+0x2c0>)
 801047e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010482:	f7ef ff13 	bl	80002ac <__adddf3>
 8010486:	4604      	mov	r4, r0
 8010488:	4630      	mov	r0, r6
 801048a:	460d      	mov	r5, r1
 801048c:	f7f0 f85a 	bl	8000544 <__aeabi_i2d>
 8010490:	a367      	add	r3, pc, #412	@ (adr r3, 8010630 <_dtoa_r+0x2c8>)
 8010492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010496:	f7f0 f8bf 	bl	8000618 <__aeabi_dmul>
 801049a:	4602      	mov	r2, r0
 801049c:	460b      	mov	r3, r1
 801049e:	4620      	mov	r0, r4
 80104a0:	4629      	mov	r1, r5
 80104a2:	f7ef ff03 	bl	80002ac <__adddf3>
 80104a6:	4604      	mov	r4, r0
 80104a8:	460d      	mov	r5, r1
 80104aa:	f7f0 fb65 	bl	8000b78 <__aeabi_d2iz>
 80104ae:	2200      	movs	r2, #0
 80104b0:	4607      	mov	r7, r0
 80104b2:	2300      	movs	r3, #0
 80104b4:	4620      	mov	r0, r4
 80104b6:	4629      	mov	r1, r5
 80104b8:	f7f0 fb20 	bl	8000afc <__aeabi_dcmplt>
 80104bc:	b140      	cbz	r0, 80104d0 <_dtoa_r+0x168>
 80104be:	4638      	mov	r0, r7
 80104c0:	f7f0 f840 	bl	8000544 <__aeabi_i2d>
 80104c4:	4622      	mov	r2, r4
 80104c6:	462b      	mov	r3, r5
 80104c8:	f7f0 fb0e 	bl	8000ae8 <__aeabi_dcmpeq>
 80104cc:	b900      	cbnz	r0, 80104d0 <_dtoa_r+0x168>
 80104ce:	3f01      	subs	r7, #1
 80104d0:	2f16      	cmp	r7, #22
 80104d2:	d852      	bhi.n	801057a <_dtoa_r+0x212>
 80104d4:	4b5d      	ldr	r3, [pc, #372]	@ (801064c <_dtoa_r+0x2e4>)
 80104d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80104da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80104e2:	f7f0 fb0b 	bl	8000afc <__aeabi_dcmplt>
 80104e6:	2800      	cmp	r0, #0
 80104e8:	d049      	beq.n	801057e <_dtoa_r+0x216>
 80104ea:	3f01      	subs	r7, #1
 80104ec:	2300      	movs	r3, #0
 80104ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80104f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80104f2:	1b9b      	subs	r3, r3, r6
 80104f4:	1e5a      	subs	r2, r3, #1
 80104f6:	bf45      	ittet	mi
 80104f8:	f1c3 0301 	rsbmi	r3, r3, #1
 80104fc:	9300      	strmi	r3, [sp, #0]
 80104fe:	2300      	movpl	r3, #0
 8010500:	2300      	movmi	r3, #0
 8010502:	9206      	str	r2, [sp, #24]
 8010504:	bf54      	ite	pl
 8010506:	9300      	strpl	r3, [sp, #0]
 8010508:	9306      	strmi	r3, [sp, #24]
 801050a:	2f00      	cmp	r7, #0
 801050c:	db39      	blt.n	8010582 <_dtoa_r+0x21a>
 801050e:	9b06      	ldr	r3, [sp, #24]
 8010510:	970d      	str	r7, [sp, #52]	@ 0x34
 8010512:	443b      	add	r3, r7
 8010514:	9306      	str	r3, [sp, #24]
 8010516:	2300      	movs	r3, #0
 8010518:	9308      	str	r3, [sp, #32]
 801051a:	9b07      	ldr	r3, [sp, #28]
 801051c:	2b09      	cmp	r3, #9
 801051e:	d863      	bhi.n	80105e8 <_dtoa_r+0x280>
 8010520:	2b05      	cmp	r3, #5
 8010522:	bfc4      	itt	gt
 8010524:	3b04      	subgt	r3, #4
 8010526:	9307      	strgt	r3, [sp, #28]
 8010528:	9b07      	ldr	r3, [sp, #28]
 801052a:	f1a3 0302 	sub.w	r3, r3, #2
 801052e:	bfcc      	ite	gt
 8010530:	2400      	movgt	r4, #0
 8010532:	2401      	movle	r4, #1
 8010534:	2b03      	cmp	r3, #3
 8010536:	d863      	bhi.n	8010600 <_dtoa_r+0x298>
 8010538:	e8df f003 	tbb	[pc, r3]
 801053c:	2b375452 	.word	0x2b375452
 8010540:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010544:	441e      	add	r6, r3
 8010546:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801054a:	2b20      	cmp	r3, #32
 801054c:	bfc1      	itttt	gt
 801054e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010552:	409f      	lslgt	r7, r3
 8010554:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010558:	fa24 f303 	lsrgt.w	r3, r4, r3
 801055c:	bfd6      	itet	le
 801055e:	f1c3 0320 	rsble	r3, r3, #32
 8010562:	ea47 0003 	orrgt.w	r0, r7, r3
 8010566:	fa04 f003 	lslle.w	r0, r4, r3
 801056a:	f7ef ffdb 	bl	8000524 <__aeabi_ui2d>
 801056e:	2201      	movs	r2, #1
 8010570:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010574:	3e01      	subs	r6, #1
 8010576:	9212      	str	r2, [sp, #72]	@ 0x48
 8010578:	e776      	b.n	8010468 <_dtoa_r+0x100>
 801057a:	2301      	movs	r3, #1
 801057c:	e7b7      	b.n	80104ee <_dtoa_r+0x186>
 801057e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010580:	e7b6      	b.n	80104f0 <_dtoa_r+0x188>
 8010582:	9b00      	ldr	r3, [sp, #0]
 8010584:	1bdb      	subs	r3, r3, r7
 8010586:	9300      	str	r3, [sp, #0]
 8010588:	427b      	negs	r3, r7
 801058a:	9308      	str	r3, [sp, #32]
 801058c:	2300      	movs	r3, #0
 801058e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010590:	e7c3      	b.n	801051a <_dtoa_r+0x1b2>
 8010592:	2301      	movs	r3, #1
 8010594:	9309      	str	r3, [sp, #36]	@ 0x24
 8010596:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010598:	eb07 0b03 	add.w	fp, r7, r3
 801059c:	f10b 0301 	add.w	r3, fp, #1
 80105a0:	2b01      	cmp	r3, #1
 80105a2:	9303      	str	r3, [sp, #12]
 80105a4:	bfb8      	it	lt
 80105a6:	2301      	movlt	r3, #1
 80105a8:	e006      	b.n	80105b8 <_dtoa_r+0x250>
 80105aa:	2301      	movs	r3, #1
 80105ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80105ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	dd28      	ble.n	8010606 <_dtoa_r+0x29e>
 80105b4:	469b      	mov	fp, r3
 80105b6:	9303      	str	r3, [sp, #12]
 80105b8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80105bc:	2100      	movs	r1, #0
 80105be:	2204      	movs	r2, #4
 80105c0:	f102 0514 	add.w	r5, r2, #20
 80105c4:	429d      	cmp	r5, r3
 80105c6:	d926      	bls.n	8010616 <_dtoa_r+0x2ae>
 80105c8:	6041      	str	r1, [r0, #4]
 80105ca:	4648      	mov	r0, r9
 80105cc:	f000 fce6 	bl	8010f9c <_Balloc>
 80105d0:	4682      	mov	sl, r0
 80105d2:	2800      	cmp	r0, #0
 80105d4:	d142      	bne.n	801065c <_dtoa_r+0x2f4>
 80105d6:	4b1e      	ldr	r3, [pc, #120]	@ (8010650 <_dtoa_r+0x2e8>)
 80105d8:	4602      	mov	r2, r0
 80105da:	f240 11af 	movw	r1, #431	@ 0x1af
 80105de:	e6da      	b.n	8010396 <_dtoa_r+0x2e>
 80105e0:	2300      	movs	r3, #0
 80105e2:	e7e3      	b.n	80105ac <_dtoa_r+0x244>
 80105e4:	2300      	movs	r3, #0
 80105e6:	e7d5      	b.n	8010594 <_dtoa_r+0x22c>
 80105e8:	2401      	movs	r4, #1
 80105ea:	2300      	movs	r3, #0
 80105ec:	9307      	str	r3, [sp, #28]
 80105ee:	9409      	str	r4, [sp, #36]	@ 0x24
 80105f0:	f04f 3bff 	mov.w	fp, #4294967295
 80105f4:	2200      	movs	r2, #0
 80105f6:	f8cd b00c 	str.w	fp, [sp, #12]
 80105fa:	2312      	movs	r3, #18
 80105fc:	920c      	str	r2, [sp, #48]	@ 0x30
 80105fe:	e7db      	b.n	80105b8 <_dtoa_r+0x250>
 8010600:	2301      	movs	r3, #1
 8010602:	9309      	str	r3, [sp, #36]	@ 0x24
 8010604:	e7f4      	b.n	80105f0 <_dtoa_r+0x288>
 8010606:	f04f 0b01 	mov.w	fp, #1
 801060a:	f8cd b00c 	str.w	fp, [sp, #12]
 801060e:	465b      	mov	r3, fp
 8010610:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010614:	e7d0      	b.n	80105b8 <_dtoa_r+0x250>
 8010616:	3101      	adds	r1, #1
 8010618:	0052      	lsls	r2, r2, #1
 801061a:	e7d1      	b.n	80105c0 <_dtoa_r+0x258>
 801061c:	f3af 8000 	nop.w
 8010620:	636f4361 	.word	0x636f4361
 8010624:	3fd287a7 	.word	0x3fd287a7
 8010628:	8b60c8b3 	.word	0x8b60c8b3
 801062c:	3fc68a28 	.word	0x3fc68a28
 8010630:	509f79fb 	.word	0x509f79fb
 8010634:	3fd34413 	.word	0x3fd34413
 8010638:	08012c5d 	.word	0x08012c5d
 801063c:	08012c74 	.word	0x08012c74
 8010640:	7ff00000 	.word	0x7ff00000
 8010644:	08012c2d 	.word	0x08012c2d
 8010648:	3ff80000 	.word	0x3ff80000
 801064c:	08012dc8 	.word	0x08012dc8
 8010650:	08012ccc 	.word	0x08012ccc
 8010654:	08012c59 	.word	0x08012c59
 8010658:	08012c2c 	.word	0x08012c2c
 801065c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010660:	6018      	str	r0, [r3, #0]
 8010662:	9b03      	ldr	r3, [sp, #12]
 8010664:	2b0e      	cmp	r3, #14
 8010666:	f200 80a1 	bhi.w	80107ac <_dtoa_r+0x444>
 801066a:	2c00      	cmp	r4, #0
 801066c:	f000 809e 	beq.w	80107ac <_dtoa_r+0x444>
 8010670:	2f00      	cmp	r7, #0
 8010672:	dd33      	ble.n	80106dc <_dtoa_r+0x374>
 8010674:	4b9c      	ldr	r3, [pc, #624]	@ (80108e8 <_dtoa_r+0x580>)
 8010676:	f007 020f 	and.w	r2, r7, #15
 801067a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801067e:	ed93 7b00 	vldr	d7, [r3]
 8010682:	05f8      	lsls	r0, r7, #23
 8010684:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010688:	ea4f 1427 	mov.w	r4, r7, asr #4
 801068c:	d516      	bpl.n	80106bc <_dtoa_r+0x354>
 801068e:	4b97      	ldr	r3, [pc, #604]	@ (80108ec <_dtoa_r+0x584>)
 8010690:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010694:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010698:	f7f0 f8e8 	bl	800086c <__aeabi_ddiv>
 801069c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80106a0:	f004 040f 	and.w	r4, r4, #15
 80106a4:	2603      	movs	r6, #3
 80106a6:	4d91      	ldr	r5, [pc, #580]	@ (80108ec <_dtoa_r+0x584>)
 80106a8:	b954      	cbnz	r4, 80106c0 <_dtoa_r+0x358>
 80106aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80106ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80106b2:	f7f0 f8db 	bl	800086c <__aeabi_ddiv>
 80106b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80106ba:	e028      	b.n	801070e <_dtoa_r+0x3a6>
 80106bc:	2602      	movs	r6, #2
 80106be:	e7f2      	b.n	80106a6 <_dtoa_r+0x33e>
 80106c0:	07e1      	lsls	r1, r4, #31
 80106c2:	d508      	bpl.n	80106d6 <_dtoa_r+0x36e>
 80106c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80106c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80106cc:	f7ef ffa4 	bl	8000618 <__aeabi_dmul>
 80106d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80106d4:	3601      	adds	r6, #1
 80106d6:	1064      	asrs	r4, r4, #1
 80106d8:	3508      	adds	r5, #8
 80106da:	e7e5      	b.n	80106a8 <_dtoa_r+0x340>
 80106dc:	f000 80af 	beq.w	801083e <_dtoa_r+0x4d6>
 80106e0:	427c      	negs	r4, r7
 80106e2:	4b81      	ldr	r3, [pc, #516]	@ (80108e8 <_dtoa_r+0x580>)
 80106e4:	4d81      	ldr	r5, [pc, #516]	@ (80108ec <_dtoa_r+0x584>)
 80106e6:	f004 020f 	and.w	r2, r4, #15
 80106ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80106ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80106f6:	f7ef ff8f 	bl	8000618 <__aeabi_dmul>
 80106fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80106fe:	1124      	asrs	r4, r4, #4
 8010700:	2300      	movs	r3, #0
 8010702:	2602      	movs	r6, #2
 8010704:	2c00      	cmp	r4, #0
 8010706:	f040 808f 	bne.w	8010828 <_dtoa_r+0x4c0>
 801070a:	2b00      	cmp	r3, #0
 801070c:	d1d3      	bne.n	80106b6 <_dtoa_r+0x34e>
 801070e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010710:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010714:	2b00      	cmp	r3, #0
 8010716:	f000 8094 	beq.w	8010842 <_dtoa_r+0x4da>
 801071a:	4b75      	ldr	r3, [pc, #468]	@ (80108f0 <_dtoa_r+0x588>)
 801071c:	2200      	movs	r2, #0
 801071e:	4620      	mov	r0, r4
 8010720:	4629      	mov	r1, r5
 8010722:	f7f0 f9eb 	bl	8000afc <__aeabi_dcmplt>
 8010726:	2800      	cmp	r0, #0
 8010728:	f000 808b 	beq.w	8010842 <_dtoa_r+0x4da>
 801072c:	9b03      	ldr	r3, [sp, #12]
 801072e:	2b00      	cmp	r3, #0
 8010730:	f000 8087 	beq.w	8010842 <_dtoa_r+0x4da>
 8010734:	f1bb 0f00 	cmp.w	fp, #0
 8010738:	dd34      	ble.n	80107a4 <_dtoa_r+0x43c>
 801073a:	4620      	mov	r0, r4
 801073c:	4b6d      	ldr	r3, [pc, #436]	@ (80108f4 <_dtoa_r+0x58c>)
 801073e:	2200      	movs	r2, #0
 8010740:	4629      	mov	r1, r5
 8010742:	f7ef ff69 	bl	8000618 <__aeabi_dmul>
 8010746:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801074a:	f107 38ff 	add.w	r8, r7, #4294967295
 801074e:	3601      	adds	r6, #1
 8010750:	465c      	mov	r4, fp
 8010752:	4630      	mov	r0, r6
 8010754:	f7ef fef6 	bl	8000544 <__aeabi_i2d>
 8010758:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801075c:	f7ef ff5c 	bl	8000618 <__aeabi_dmul>
 8010760:	4b65      	ldr	r3, [pc, #404]	@ (80108f8 <_dtoa_r+0x590>)
 8010762:	2200      	movs	r2, #0
 8010764:	f7ef fda2 	bl	80002ac <__adddf3>
 8010768:	4605      	mov	r5, r0
 801076a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801076e:	2c00      	cmp	r4, #0
 8010770:	d16a      	bne.n	8010848 <_dtoa_r+0x4e0>
 8010772:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010776:	4b61      	ldr	r3, [pc, #388]	@ (80108fc <_dtoa_r+0x594>)
 8010778:	2200      	movs	r2, #0
 801077a:	f7ef fd95 	bl	80002a8 <__aeabi_dsub>
 801077e:	4602      	mov	r2, r0
 8010780:	460b      	mov	r3, r1
 8010782:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010786:	462a      	mov	r2, r5
 8010788:	4633      	mov	r3, r6
 801078a:	f7f0 f9d5 	bl	8000b38 <__aeabi_dcmpgt>
 801078e:	2800      	cmp	r0, #0
 8010790:	f040 8298 	bne.w	8010cc4 <_dtoa_r+0x95c>
 8010794:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010798:	462a      	mov	r2, r5
 801079a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801079e:	f7f0 f9ad 	bl	8000afc <__aeabi_dcmplt>
 80107a2:	bb38      	cbnz	r0, 80107f4 <_dtoa_r+0x48c>
 80107a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80107a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80107ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	f2c0 8157 	blt.w	8010a62 <_dtoa_r+0x6fa>
 80107b4:	2f0e      	cmp	r7, #14
 80107b6:	f300 8154 	bgt.w	8010a62 <_dtoa_r+0x6fa>
 80107ba:	4b4b      	ldr	r3, [pc, #300]	@ (80108e8 <_dtoa_r+0x580>)
 80107bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80107c0:	ed93 7b00 	vldr	d7, [r3]
 80107c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	ed8d 7b00 	vstr	d7, [sp]
 80107cc:	f280 80e5 	bge.w	801099a <_dtoa_r+0x632>
 80107d0:	9b03      	ldr	r3, [sp, #12]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	f300 80e1 	bgt.w	801099a <_dtoa_r+0x632>
 80107d8:	d10c      	bne.n	80107f4 <_dtoa_r+0x48c>
 80107da:	4b48      	ldr	r3, [pc, #288]	@ (80108fc <_dtoa_r+0x594>)
 80107dc:	2200      	movs	r2, #0
 80107de:	ec51 0b17 	vmov	r0, r1, d7
 80107e2:	f7ef ff19 	bl	8000618 <__aeabi_dmul>
 80107e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80107ea:	f7f0 f99b 	bl	8000b24 <__aeabi_dcmpge>
 80107ee:	2800      	cmp	r0, #0
 80107f0:	f000 8266 	beq.w	8010cc0 <_dtoa_r+0x958>
 80107f4:	2400      	movs	r4, #0
 80107f6:	4625      	mov	r5, r4
 80107f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80107fa:	4656      	mov	r6, sl
 80107fc:	ea6f 0803 	mvn.w	r8, r3
 8010800:	2700      	movs	r7, #0
 8010802:	4621      	mov	r1, r4
 8010804:	4648      	mov	r0, r9
 8010806:	f000 fc09 	bl	801101c <_Bfree>
 801080a:	2d00      	cmp	r5, #0
 801080c:	f000 80bd 	beq.w	801098a <_dtoa_r+0x622>
 8010810:	b12f      	cbz	r7, 801081e <_dtoa_r+0x4b6>
 8010812:	42af      	cmp	r7, r5
 8010814:	d003      	beq.n	801081e <_dtoa_r+0x4b6>
 8010816:	4639      	mov	r1, r7
 8010818:	4648      	mov	r0, r9
 801081a:	f000 fbff 	bl	801101c <_Bfree>
 801081e:	4629      	mov	r1, r5
 8010820:	4648      	mov	r0, r9
 8010822:	f000 fbfb 	bl	801101c <_Bfree>
 8010826:	e0b0      	b.n	801098a <_dtoa_r+0x622>
 8010828:	07e2      	lsls	r2, r4, #31
 801082a:	d505      	bpl.n	8010838 <_dtoa_r+0x4d0>
 801082c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010830:	f7ef fef2 	bl	8000618 <__aeabi_dmul>
 8010834:	3601      	adds	r6, #1
 8010836:	2301      	movs	r3, #1
 8010838:	1064      	asrs	r4, r4, #1
 801083a:	3508      	adds	r5, #8
 801083c:	e762      	b.n	8010704 <_dtoa_r+0x39c>
 801083e:	2602      	movs	r6, #2
 8010840:	e765      	b.n	801070e <_dtoa_r+0x3a6>
 8010842:	9c03      	ldr	r4, [sp, #12]
 8010844:	46b8      	mov	r8, r7
 8010846:	e784      	b.n	8010752 <_dtoa_r+0x3ea>
 8010848:	4b27      	ldr	r3, [pc, #156]	@ (80108e8 <_dtoa_r+0x580>)
 801084a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801084c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010850:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010854:	4454      	add	r4, sl
 8010856:	2900      	cmp	r1, #0
 8010858:	d054      	beq.n	8010904 <_dtoa_r+0x59c>
 801085a:	4929      	ldr	r1, [pc, #164]	@ (8010900 <_dtoa_r+0x598>)
 801085c:	2000      	movs	r0, #0
 801085e:	f7f0 f805 	bl	800086c <__aeabi_ddiv>
 8010862:	4633      	mov	r3, r6
 8010864:	462a      	mov	r2, r5
 8010866:	f7ef fd1f 	bl	80002a8 <__aeabi_dsub>
 801086a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801086e:	4656      	mov	r6, sl
 8010870:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010874:	f7f0 f980 	bl	8000b78 <__aeabi_d2iz>
 8010878:	4605      	mov	r5, r0
 801087a:	f7ef fe63 	bl	8000544 <__aeabi_i2d>
 801087e:	4602      	mov	r2, r0
 8010880:	460b      	mov	r3, r1
 8010882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010886:	f7ef fd0f 	bl	80002a8 <__aeabi_dsub>
 801088a:	3530      	adds	r5, #48	@ 0x30
 801088c:	4602      	mov	r2, r0
 801088e:	460b      	mov	r3, r1
 8010890:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010894:	f806 5b01 	strb.w	r5, [r6], #1
 8010898:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801089c:	f7f0 f92e 	bl	8000afc <__aeabi_dcmplt>
 80108a0:	2800      	cmp	r0, #0
 80108a2:	d172      	bne.n	801098a <_dtoa_r+0x622>
 80108a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80108a8:	4911      	ldr	r1, [pc, #68]	@ (80108f0 <_dtoa_r+0x588>)
 80108aa:	2000      	movs	r0, #0
 80108ac:	f7ef fcfc 	bl	80002a8 <__aeabi_dsub>
 80108b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80108b4:	f7f0 f922 	bl	8000afc <__aeabi_dcmplt>
 80108b8:	2800      	cmp	r0, #0
 80108ba:	f040 80b4 	bne.w	8010a26 <_dtoa_r+0x6be>
 80108be:	42a6      	cmp	r6, r4
 80108c0:	f43f af70 	beq.w	80107a4 <_dtoa_r+0x43c>
 80108c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80108c8:	4b0a      	ldr	r3, [pc, #40]	@ (80108f4 <_dtoa_r+0x58c>)
 80108ca:	2200      	movs	r2, #0
 80108cc:	f7ef fea4 	bl	8000618 <__aeabi_dmul>
 80108d0:	4b08      	ldr	r3, [pc, #32]	@ (80108f4 <_dtoa_r+0x58c>)
 80108d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80108d6:	2200      	movs	r2, #0
 80108d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80108dc:	f7ef fe9c 	bl	8000618 <__aeabi_dmul>
 80108e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80108e4:	e7c4      	b.n	8010870 <_dtoa_r+0x508>
 80108e6:	bf00      	nop
 80108e8:	08012dc8 	.word	0x08012dc8
 80108ec:	08012da0 	.word	0x08012da0
 80108f0:	3ff00000 	.word	0x3ff00000
 80108f4:	40240000 	.word	0x40240000
 80108f8:	401c0000 	.word	0x401c0000
 80108fc:	40140000 	.word	0x40140000
 8010900:	3fe00000 	.word	0x3fe00000
 8010904:	4631      	mov	r1, r6
 8010906:	4628      	mov	r0, r5
 8010908:	f7ef fe86 	bl	8000618 <__aeabi_dmul>
 801090c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010910:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010912:	4656      	mov	r6, sl
 8010914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010918:	f7f0 f92e 	bl	8000b78 <__aeabi_d2iz>
 801091c:	4605      	mov	r5, r0
 801091e:	f7ef fe11 	bl	8000544 <__aeabi_i2d>
 8010922:	4602      	mov	r2, r0
 8010924:	460b      	mov	r3, r1
 8010926:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801092a:	f7ef fcbd 	bl	80002a8 <__aeabi_dsub>
 801092e:	3530      	adds	r5, #48	@ 0x30
 8010930:	f806 5b01 	strb.w	r5, [r6], #1
 8010934:	4602      	mov	r2, r0
 8010936:	460b      	mov	r3, r1
 8010938:	42a6      	cmp	r6, r4
 801093a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801093e:	f04f 0200 	mov.w	r2, #0
 8010942:	d124      	bne.n	801098e <_dtoa_r+0x626>
 8010944:	4baf      	ldr	r3, [pc, #700]	@ (8010c04 <_dtoa_r+0x89c>)
 8010946:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801094a:	f7ef fcaf 	bl	80002ac <__adddf3>
 801094e:	4602      	mov	r2, r0
 8010950:	460b      	mov	r3, r1
 8010952:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010956:	f7f0 f8ef 	bl	8000b38 <__aeabi_dcmpgt>
 801095a:	2800      	cmp	r0, #0
 801095c:	d163      	bne.n	8010a26 <_dtoa_r+0x6be>
 801095e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010962:	49a8      	ldr	r1, [pc, #672]	@ (8010c04 <_dtoa_r+0x89c>)
 8010964:	2000      	movs	r0, #0
 8010966:	f7ef fc9f 	bl	80002a8 <__aeabi_dsub>
 801096a:	4602      	mov	r2, r0
 801096c:	460b      	mov	r3, r1
 801096e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010972:	f7f0 f8c3 	bl	8000afc <__aeabi_dcmplt>
 8010976:	2800      	cmp	r0, #0
 8010978:	f43f af14 	beq.w	80107a4 <_dtoa_r+0x43c>
 801097c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801097e:	1e73      	subs	r3, r6, #1
 8010980:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010982:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010986:	2b30      	cmp	r3, #48	@ 0x30
 8010988:	d0f8      	beq.n	801097c <_dtoa_r+0x614>
 801098a:	4647      	mov	r7, r8
 801098c:	e03b      	b.n	8010a06 <_dtoa_r+0x69e>
 801098e:	4b9e      	ldr	r3, [pc, #632]	@ (8010c08 <_dtoa_r+0x8a0>)
 8010990:	f7ef fe42 	bl	8000618 <__aeabi_dmul>
 8010994:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010998:	e7bc      	b.n	8010914 <_dtoa_r+0x5ac>
 801099a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801099e:	4656      	mov	r6, sl
 80109a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109a4:	4620      	mov	r0, r4
 80109a6:	4629      	mov	r1, r5
 80109a8:	f7ef ff60 	bl	800086c <__aeabi_ddiv>
 80109ac:	f7f0 f8e4 	bl	8000b78 <__aeabi_d2iz>
 80109b0:	4680      	mov	r8, r0
 80109b2:	f7ef fdc7 	bl	8000544 <__aeabi_i2d>
 80109b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109ba:	f7ef fe2d 	bl	8000618 <__aeabi_dmul>
 80109be:	4602      	mov	r2, r0
 80109c0:	460b      	mov	r3, r1
 80109c2:	4620      	mov	r0, r4
 80109c4:	4629      	mov	r1, r5
 80109c6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80109ca:	f7ef fc6d 	bl	80002a8 <__aeabi_dsub>
 80109ce:	f806 4b01 	strb.w	r4, [r6], #1
 80109d2:	9d03      	ldr	r5, [sp, #12]
 80109d4:	eba6 040a 	sub.w	r4, r6, sl
 80109d8:	42a5      	cmp	r5, r4
 80109da:	4602      	mov	r2, r0
 80109dc:	460b      	mov	r3, r1
 80109de:	d133      	bne.n	8010a48 <_dtoa_r+0x6e0>
 80109e0:	f7ef fc64 	bl	80002ac <__adddf3>
 80109e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109e8:	4604      	mov	r4, r0
 80109ea:	460d      	mov	r5, r1
 80109ec:	f7f0 f8a4 	bl	8000b38 <__aeabi_dcmpgt>
 80109f0:	b9c0      	cbnz	r0, 8010a24 <_dtoa_r+0x6bc>
 80109f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109f6:	4620      	mov	r0, r4
 80109f8:	4629      	mov	r1, r5
 80109fa:	f7f0 f875 	bl	8000ae8 <__aeabi_dcmpeq>
 80109fe:	b110      	cbz	r0, 8010a06 <_dtoa_r+0x69e>
 8010a00:	f018 0f01 	tst.w	r8, #1
 8010a04:	d10e      	bne.n	8010a24 <_dtoa_r+0x6bc>
 8010a06:	9902      	ldr	r1, [sp, #8]
 8010a08:	4648      	mov	r0, r9
 8010a0a:	f000 fb07 	bl	801101c <_Bfree>
 8010a0e:	2300      	movs	r3, #0
 8010a10:	7033      	strb	r3, [r6, #0]
 8010a12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010a14:	3701      	adds	r7, #1
 8010a16:	601f      	str	r7, [r3, #0]
 8010a18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	f000 824b 	beq.w	8010eb6 <_dtoa_r+0xb4e>
 8010a20:	601e      	str	r6, [r3, #0]
 8010a22:	e248      	b.n	8010eb6 <_dtoa_r+0xb4e>
 8010a24:	46b8      	mov	r8, r7
 8010a26:	4633      	mov	r3, r6
 8010a28:	461e      	mov	r6, r3
 8010a2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a2e:	2a39      	cmp	r2, #57	@ 0x39
 8010a30:	d106      	bne.n	8010a40 <_dtoa_r+0x6d8>
 8010a32:	459a      	cmp	sl, r3
 8010a34:	d1f8      	bne.n	8010a28 <_dtoa_r+0x6c0>
 8010a36:	2230      	movs	r2, #48	@ 0x30
 8010a38:	f108 0801 	add.w	r8, r8, #1
 8010a3c:	f88a 2000 	strb.w	r2, [sl]
 8010a40:	781a      	ldrb	r2, [r3, #0]
 8010a42:	3201      	adds	r2, #1
 8010a44:	701a      	strb	r2, [r3, #0]
 8010a46:	e7a0      	b.n	801098a <_dtoa_r+0x622>
 8010a48:	4b6f      	ldr	r3, [pc, #444]	@ (8010c08 <_dtoa_r+0x8a0>)
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	f7ef fde4 	bl	8000618 <__aeabi_dmul>
 8010a50:	2200      	movs	r2, #0
 8010a52:	2300      	movs	r3, #0
 8010a54:	4604      	mov	r4, r0
 8010a56:	460d      	mov	r5, r1
 8010a58:	f7f0 f846 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	d09f      	beq.n	80109a0 <_dtoa_r+0x638>
 8010a60:	e7d1      	b.n	8010a06 <_dtoa_r+0x69e>
 8010a62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a64:	2a00      	cmp	r2, #0
 8010a66:	f000 80ea 	beq.w	8010c3e <_dtoa_r+0x8d6>
 8010a6a:	9a07      	ldr	r2, [sp, #28]
 8010a6c:	2a01      	cmp	r2, #1
 8010a6e:	f300 80cd 	bgt.w	8010c0c <_dtoa_r+0x8a4>
 8010a72:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010a74:	2a00      	cmp	r2, #0
 8010a76:	f000 80c1 	beq.w	8010bfc <_dtoa_r+0x894>
 8010a7a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010a7e:	9c08      	ldr	r4, [sp, #32]
 8010a80:	9e00      	ldr	r6, [sp, #0]
 8010a82:	9a00      	ldr	r2, [sp, #0]
 8010a84:	441a      	add	r2, r3
 8010a86:	9200      	str	r2, [sp, #0]
 8010a88:	9a06      	ldr	r2, [sp, #24]
 8010a8a:	2101      	movs	r1, #1
 8010a8c:	441a      	add	r2, r3
 8010a8e:	4648      	mov	r0, r9
 8010a90:	9206      	str	r2, [sp, #24]
 8010a92:	f000 fb77 	bl	8011184 <__i2b>
 8010a96:	4605      	mov	r5, r0
 8010a98:	b166      	cbz	r6, 8010ab4 <_dtoa_r+0x74c>
 8010a9a:	9b06      	ldr	r3, [sp, #24]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	dd09      	ble.n	8010ab4 <_dtoa_r+0x74c>
 8010aa0:	42b3      	cmp	r3, r6
 8010aa2:	9a00      	ldr	r2, [sp, #0]
 8010aa4:	bfa8      	it	ge
 8010aa6:	4633      	movge	r3, r6
 8010aa8:	1ad2      	subs	r2, r2, r3
 8010aaa:	9200      	str	r2, [sp, #0]
 8010aac:	9a06      	ldr	r2, [sp, #24]
 8010aae:	1af6      	subs	r6, r6, r3
 8010ab0:	1ad3      	subs	r3, r2, r3
 8010ab2:	9306      	str	r3, [sp, #24]
 8010ab4:	9b08      	ldr	r3, [sp, #32]
 8010ab6:	b30b      	cbz	r3, 8010afc <_dtoa_r+0x794>
 8010ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	f000 80c6 	beq.w	8010c4c <_dtoa_r+0x8e4>
 8010ac0:	2c00      	cmp	r4, #0
 8010ac2:	f000 80c0 	beq.w	8010c46 <_dtoa_r+0x8de>
 8010ac6:	4629      	mov	r1, r5
 8010ac8:	4622      	mov	r2, r4
 8010aca:	4648      	mov	r0, r9
 8010acc:	f000 fc12 	bl	80112f4 <__pow5mult>
 8010ad0:	9a02      	ldr	r2, [sp, #8]
 8010ad2:	4601      	mov	r1, r0
 8010ad4:	4605      	mov	r5, r0
 8010ad6:	4648      	mov	r0, r9
 8010ad8:	f000 fb6a 	bl	80111b0 <__multiply>
 8010adc:	9902      	ldr	r1, [sp, #8]
 8010ade:	4680      	mov	r8, r0
 8010ae0:	4648      	mov	r0, r9
 8010ae2:	f000 fa9b 	bl	801101c <_Bfree>
 8010ae6:	9b08      	ldr	r3, [sp, #32]
 8010ae8:	1b1b      	subs	r3, r3, r4
 8010aea:	9308      	str	r3, [sp, #32]
 8010aec:	f000 80b1 	beq.w	8010c52 <_dtoa_r+0x8ea>
 8010af0:	9a08      	ldr	r2, [sp, #32]
 8010af2:	4641      	mov	r1, r8
 8010af4:	4648      	mov	r0, r9
 8010af6:	f000 fbfd 	bl	80112f4 <__pow5mult>
 8010afa:	9002      	str	r0, [sp, #8]
 8010afc:	2101      	movs	r1, #1
 8010afe:	4648      	mov	r0, r9
 8010b00:	f000 fb40 	bl	8011184 <__i2b>
 8010b04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010b06:	4604      	mov	r4, r0
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	f000 81d8 	beq.w	8010ebe <_dtoa_r+0xb56>
 8010b0e:	461a      	mov	r2, r3
 8010b10:	4601      	mov	r1, r0
 8010b12:	4648      	mov	r0, r9
 8010b14:	f000 fbee 	bl	80112f4 <__pow5mult>
 8010b18:	9b07      	ldr	r3, [sp, #28]
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	4604      	mov	r4, r0
 8010b1e:	f300 809f 	bgt.w	8010c60 <_dtoa_r+0x8f8>
 8010b22:	9b04      	ldr	r3, [sp, #16]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	f040 8097 	bne.w	8010c58 <_dtoa_r+0x8f0>
 8010b2a:	9b05      	ldr	r3, [sp, #20]
 8010b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	f040 8093 	bne.w	8010c5c <_dtoa_r+0x8f4>
 8010b36:	9b05      	ldr	r3, [sp, #20]
 8010b38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010b3c:	0d1b      	lsrs	r3, r3, #20
 8010b3e:	051b      	lsls	r3, r3, #20
 8010b40:	b133      	cbz	r3, 8010b50 <_dtoa_r+0x7e8>
 8010b42:	9b00      	ldr	r3, [sp, #0]
 8010b44:	3301      	adds	r3, #1
 8010b46:	9300      	str	r3, [sp, #0]
 8010b48:	9b06      	ldr	r3, [sp, #24]
 8010b4a:	3301      	adds	r3, #1
 8010b4c:	9306      	str	r3, [sp, #24]
 8010b4e:	2301      	movs	r3, #1
 8010b50:	9308      	str	r3, [sp, #32]
 8010b52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	f000 81b8 	beq.w	8010eca <_dtoa_r+0xb62>
 8010b5a:	6923      	ldr	r3, [r4, #16]
 8010b5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010b60:	6918      	ldr	r0, [r3, #16]
 8010b62:	f000 fac3 	bl	80110ec <__hi0bits>
 8010b66:	f1c0 0020 	rsb	r0, r0, #32
 8010b6a:	9b06      	ldr	r3, [sp, #24]
 8010b6c:	4418      	add	r0, r3
 8010b6e:	f010 001f 	ands.w	r0, r0, #31
 8010b72:	f000 8082 	beq.w	8010c7a <_dtoa_r+0x912>
 8010b76:	f1c0 0320 	rsb	r3, r0, #32
 8010b7a:	2b04      	cmp	r3, #4
 8010b7c:	dd73      	ble.n	8010c66 <_dtoa_r+0x8fe>
 8010b7e:	9b00      	ldr	r3, [sp, #0]
 8010b80:	f1c0 001c 	rsb	r0, r0, #28
 8010b84:	4403      	add	r3, r0
 8010b86:	9300      	str	r3, [sp, #0]
 8010b88:	9b06      	ldr	r3, [sp, #24]
 8010b8a:	4403      	add	r3, r0
 8010b8c:	4406      	add	r6, r0
 8010b8e:	9306      	str	r3, [sp, #24]
 8010b90:	9b00      	ldr	r3, [sp, #0]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	dd05      	ble.n	8010ba2 <_dtoa_r+0x83a>
 8010b96:	9902      	ldr	r1, [sp, #8]
 8010b98:	461a      	mov	r2, r3
 8010b9a:	4648      	mov	r0, r9
 8010b9c:	f000 fc04 	bl	80113a8 <__lshift>
 8010ba0:	9002      	str	r0, [sp, #8]
 8010ba2:	9b06      	ldr	r3, [sp, #24]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	dd05      	ble.n	8010bb4 <_dtoa_r+0x84c>
 8010ba8:	4621      	mov	r1, r4
 8010baa:	461a      	mov	r2, r3
 8010bac:	4648      	mov	r0, r9
 8010bae:	f000 fbfb 	bl	80113a8 <__lshift>
 8010bb2:	4604      	mov	r4, r0
 8010bb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d061      	beq.n	8010c7e <_dtoa_r+0x916>
 8010bba:	9802      	ldr	r0, [sp, #8]
 8010bbc:	4621      	mov	r1, r4
 8010bbe:	f000 fc5f 	bl	8011480 <__mcmp>
 8010bc2:	2800      	cmp	r0, #0
 8010bc4:	da5b      	bge.n	8010c7e <_dtoa_r+0x916>
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	9902      	ldr	r1, [sp, #8]
 8010bca:	220a      	movs	r2, #10
 8010bcc:	4648      	mov	r0, r9
 8010bce:	f000 fa47 	bl	8011060 <__multadd>
 8010bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bd4:	9002      	str	r0, [sp, #8]
 8010bd6:	f107 38ff 	add.w	r8, r7, #4294967295
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f000 8177 	beq.w	8010ece <_dtoa_r+0xb66>
 8010be0:	4629      	mov	r1, r5
 8010be2:	2300      	movs	r3, #0
 8010be4:	220a      	movs	r2, #10
 8010be6:	4648      	mov	r0, r9
 8010be8:	f000 fa3a 	bl	8011060 <__multadd>
 8010bec:	f1bb 0f00 	cmp.w	fp, #0
 8010bf0:	4605      	mov	r5, r0
 8010bf2:	dc6f      	bgt.n	8010cd4 <_dtoa_r+0x96c>
 8010bf4:	9b07      	ldr	r3, [sp, #28]
 8010bf6:	2b02      	cmp	r3, #2
 8010bf8:	dc49      	bgt.n	8010c8e <_dtoa_r+0x926>
 8010bfa:	e06b      	b.n	8010cd4 <_dtoa_r+0x96c>
 8010bfc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010bfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010c02:	e73c      	b.n	8010a7e <_dtoa_r+0x716>
 8010c04:	3fe00000 	.word	0x3fe00000
 8010c08:	40240000 	.word	0x40240000
 8010c0c:	9b03      	ldr	r3, [sp, #12]
 8010c0e:	1e5c      	subs	r4, r3, #1
 8010c10:	9b08      	ldr	r3, [sp, #32]
 8010c12:	42a3      	cmp	r3, r4
 8010c14:	db09      	blt.n	8010c2a <_dtoa_r+0x8c2>
 8010c16:	1b1c      	subs	r4, r3, r4
 8010c18:	9b03      	ldr	r3, [sp, #12]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	f6bf af30 	bge.w	8010a80 <_dtoa_r+0x718>
 8010c20:	9b00      	ldr	r3, [sp, #0]
 8010c22:	9a03      	ldr	r2, [sp, #12]
 8010c24:	1a9e      	subs	r6, r3, r2
 8010c26:	2300      	movs	r3, #0
 8010c28:	e72b      	b.n	8010a82 <_dtoa_r+0x71a>
 8010c2a:	9b08      	ldr	r3, [sp, #32]
 8010c2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010c2e:	9408      	str	r4, [sp, #32]
 8010c30:	1ae3      	subs	r3, r4, r3
 8010c32:	441a      	add	r2, r3
 8010c34:	9e00      	ldr	r6, [sp, #0]
 8010c36:	9b03      	ldr	r3, [sp, #12]
 8010c38:	920d      	str	r2, [sp, #52]	@ 0x34
 8010c3a:	2400      	movs	r4, #0
 8010c3c:	e721      	b.n	8010a82 <_dtoa_r+0x71a>
 8010c3e:	9c08      	ldr	r4, [sp, #32]
 8010c40:	9e00      	ldr	r6, [sp, #0]
 8010c42:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010c44:	e728      	b.n	8010a98 <_dtoa_r+0x730>
 8010c46:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010c4a:	e751      	b.n	8010af0 <_dtoa_r+0x788>
 8010c4c:	9a08      	ldr	r2, [sp, #32]
 8010c4e:	9902      	ldr	r1, [sp, #8]
 8010c50:	e750      	b.n	8010af4 <_dtoa_r+0x78c>
 8010c52:	f8cd 8008 	str.w	r8, [sp, #8]
 8010c56:	e751      	b.n	8010afc <_dtoa_r+0x794>
 8010c58:	2300      	movs	r3, #0
 8010c5a:	e779      	b.n	8010b50 <_dtoa_r+0x7e8>
 8010c5c:	9b04      	ldr	r3, [sp, #16]
 8010c5e:	e777      	b.n	8010b50 <_dtoa_r+0x7e8>
 8010c60:	2300      	movs	r3, #0
 8010c62:	9308      	str	r3, [sp, #32]
 8010c64:	e779      	b.n	8010b5a <_dtoa_r+0x7f2>
 8010c66:	d093      	beq.n	8010b90 <_dtoa_r+0x828>
 8010c68:	9a00      	ldr	r2, [sp, #0]
 8010c6a:	331c      	adds	r3, #28
 8010c6c:	441a      	add	r2, r3
 8010c6e:	9200      	str	r2, [sp, #0]
 8010c70:	9a06      	ldr	r2, [sp, #24]
 8010c72:	441a      	add	r2, r3
 8010c74:	441e      	add	r6, r3
 8010c76:	9206      	str	r2, [sp, #24]
 8010c78:	e78a      	b.n	8010b90 <_dtoa_r+0x828>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	e7f4      	b.n	8010c68 <_dtoa_r+0x900>
 8010c7e:	9b03      	ldr	r3, [sp, #12]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	46b8      	mov	r8, r7
 8010c84:	dc20      	bgt.n	8010cc8 <_dtoa_r+0x960>
 8010c86:	469b      	mov	fp, r3
 8010c88:	9b07      	ldr	r3, [sp, #28]
 8010c8a:	2b02      	cmp	r3, #2
 8010c8c:	dd1e      	ble.n	8010ccc <_dtoa_r+0x964>
 8010c8e:	f1bb 0f00 	cmp.w	fp, #0
 8010c92:	f47f adb1 	bne.w	80107f8 <_dtoa_r+0x490>
 8010c96:	4621      	mov	r1, r4
 8010c98:	465b      	mov	r3, fp
 8010c9a:	2205      	movs	r2, #5
 8010c9c:	4648      	mov	r0, r9
 8010c9e:	f000 f9df 	bl	8011060 <__multadd>
 8010ca2:	4601      	mov	r1, r0
 8010ca4:	4604      	mov	r4, r0
 8010ca6:	9802      	ldr	r0, [sp, #8]
 8010ca8:	f000 fbea 	bl	8011480 <__mcmp>
 8010cac:	2800      	cmp	r0, #0
 8010cae:	f77f ada3 	ble.w	80107f8 <_dtoa_r+0x490>
 8010cb2:	4656      	mov	r6, sl
 8010cb4:	2331      	movs	r3, #49	@ 0x31
 8010cb6:	f806 3b01 	strb.w	r3, [r6], #1
 8010cba:	f108 0801 	add.w	r8, r8, #1
 8010cbe:	e59f      	b.n	8010800 <_dtoa_r+0x498>
 8010cc0:	9c03      	ldr	r4, [sp, #12]
 8010cc2:	46b8      	mov	r8, r7
 8010cc4:	4625      	mov	r5, r4
 8010cc6:	e7f4      	b.n	8010cb2 <_dtoa_r+0x94a>
 8010cc8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	f000 8101 	beq.w	8010ed6 <_dtoa_r+0xb6e>
 8010cd4:	2e00      	cmp	r6, #0
 8010cd6:	dd05      	ble.n	8010ce4 <_dtoa_r+0x97c>
 8010cd8:	4629      	mov	r1, r5
 8010cda:	4632      	mov	r2, r6
 8010cdc:	4648      	mov	r0, r9
 8010cde:	f000 fb63 	bl	80113a8 <__lshift>
 8010ce2:	4605      	mov	r5, r0
 8010ce4:	9b08      	ldr	r3, [sp, #32]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d05c      	beq.n	8010da4 <_dtoa_r+0xa3c>
 8010cea:	6869      	ldr	r1, [r5, #4]
 8010cec:	4648      	mov	r0, r9
 8010cee:	f000 f955 	bl	8010f9c <_Balloc>
 8010cf2:	4606      	mov	r6, r0
 8010cf4:	b928      	cbnz	r0, 8010d02 <_dtoa_r+0x99a>
 8010cf6:	4b82      	ldr	r3, [pc, #520]	@ (8010f00 <_dtoa_r+0xb98>)
 8010cf8:	4602      	mov	r2, r0
 8010cfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010cfe:	f7ff bb4a 	b.w	8010396 <_dtoa_r+0x2e>
 8010d02:	692a      	ldr	r2, [r5, #16]
 8010d04:	3202      	adds	r2, #2
 8010d06:	0092      	lsls	r2, r2, #2
 8010d08:	f105 010c 	add.w	r1, r5, #12
 8010d0c:	300c      	adds	r0, #12
 8010d0e:	f7ff fa92 	bl	8010236 <memcpy>
 8010d12:	2201      	movs	r2, #1
 8010d14:	4631      	mov	r1, r6
 8010d16:	4648      	mov	r0, r9
 8010d18:	f000 fb46 	bl	80113a8 <__lshift>
 8010d1c:	f10a 0301 	add.w	r3, sl, #1
 8010d20:	9300      	str	r3, [sp, #0]
 8010d22:	eb0a 030b 	add.w	r3, sl, fp
 8010d26:	9308      	str	r3, [sp, #32]
 8010d28:	9b04      	ldr	r3, [sp, #16]
 8010d2a:	f003 0301 	and.w	r3, r3, #1
 8010d2e:	462f      	mov	r7, r5
 8010d30:	9306      	str	r3, [sp, #24]
 8010d32:	4605      	mov	r5, r0
 8010d34:	9b00      	ldr	r3, [sp, #0]
 8010d36:	9802      	ldr	r0, [sp, #8]
 8010d38:	4621      	mov	r1, r4
 8010d3a:	f103 3bff 	add.w	fp, r3, #4294967295
 8010d3e:	f7ff fa88 	bl	8010252 <quorem>
 8010d42:	4603      	mov	r3, r0
 8010d44:	3330      	adds	r3, #48	@ 0x30
 8010d46:	9003      	str	r0, [sp, #12]
 8010d48:	4639      	mov	r1, r7
 8010d4a:	9802      	ldr	r0, [sp, #8]
 8010d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d4e:	f000 fb97 	bl	8011480 <__mcmp>
 8010d52:	462a      	mov	r2, r5
 8010d54:	9004      	str	r0, [sp, #16]
 8010d56:	4621      	mov	r1, r4
 8010d58:	4648      	mov	r0, r9
 8010d5a:	f000 fbad 	bl	80114b8 <__mdiff>
 8010d5e:	68c2      	ldr	r2, [r0, #12]
 8010d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d62:	4606      	mov	r6, r0
 8010d64:	bb02      	cbnz	r2, 8010da8 <_dtoa_r+0xa40>
 8010d66:	4601      	mov	r1, r0
 8010d68:	9802      	ldr	r0, [sp, #8]
 8010d6a:	f000 fb89 	bl	8011480 <__mcmp>
 8010d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d70:	4602      	mov	r2, r0
 8010d72:	4631      	mov	r1, r6
 8010d74:	4648      	mov	r0, r9
 8010d76:	920c      	str	r2, [sp, #48]	@ 0x30
 8010d78:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d7a:	f000 f94f 	bl	801101c <_Bfree>
 8010d7e:	9b07      	ldr	r3, [sp, #28]
 8010d80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010d82:	9e00      	ldr	r6, [sp, #0]
 8010d84:	ea42 0103 	orr.w	r1, r2, r3
 8010d88:	9b06      	ldr	r3, [sp, #24]
 8010d8a:	4319      	orrs	r1, r3
 8010d8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d8e:	d10d      	bne.n	8010dac <_dtoa_r+0xa44>
 8010d90:	2b39      	cmp	r3, #57	@ 0x39
 8010d92:	d027      	beq.n	8010de4 <_dtoa_r+0xa7c>
 8010d94:	9a04      	ldr	r2, [sp, #16]
 8010d96:	2a00      	cmp	r2, #0
 8010d98:	dd01      	ble.n	8010d9e <_dtoa_r+0xa36>
 8010d9a:	9b03      	ldr	r3, [sp, #12]
 8010d9c:	3331      	adds	r3, #49	@ 0x31
 8010d9e:	f88b 3000 	strb.w	r3, [fp]
 8010da2:	e52e      	b.n	8010802 <_dtoa_r+0x49a>
 8010da4:	4628      	mov	r0, r5
 8010da6:	e7b9      	b.n	8010d1c <_dtoa_r+0x9b4>
 8010da8:	2201      	movs	r2, #1
 8010daa:	e7e2      	b.n	8010d72 <_dtoa_r+0xa0a>
 8010dac:	9904      	ldr	r1, [sp, #16]
 8010dae:	2900      	cmp	r1, #0
 8010db0:	db04      	blt.n	8010dbc <_dtoa_r+0xa54>
 8010db2:	9807      	ldr	r0, [sp, #28]
 8010db4:	4301      	orrs	r1, r0
 8010db6:	9806      	ldr	r0, [sp, #24]
 8010db8:	4301      	orrs	r1, r0
 8010dba:	d120      	bne.n	8010dfe <_dtoa_r+0xa96>
 8010dbc:	2a00      	cmp	r2, #0
 8010dbe:	ddee      	ble.n	8010d9e <_dtoa_r+0xa36>
 8010dc0:	9902      	ldr	r1, [sp, #8]
 8010dc2:	9300      	str	r3, [sp, #0]
 8010dc4:	2201      	movs	r2, #1
 8010dc6:	4648      	mov	r0, r9
 8010dc8:	f000 faee 	bl	80113a8 <__lshift>
 8010dcc:	4621      	mov	r1, r4
 8010dce:	9002      	str	r0, [sp, #8]
 8010dd0:	f000 fb56 	bl	8011480 <__mcmp>
 8010dd4:	2800      	cmp	r0, #0
 8010dd6:	9b00      	ldr	r3, [sp, #0]
 8010dd8:	dc02      	bgt.n	8010de0 <_dtoa_r+0xa78>
 8010dda:	d1e0      	bne.n	8010d9e <_dtoa_r+0xa36>
 8010ddc:	07da      	lsls	r2, r3, #31
 8010dde:	d5de      	bpl.n	8010d9e <_dtoa_r+0xa36>
 8010de0:	2b39      	cmp	r3, #57	@ 0x39
 8010de2:	d1da      	bne.n	8010d9a <_dtoa_r+0xa32>
 8010de4:	2339      	movs	r3, #57	@ 0x39
 8010de6:	f88b 3000 	strb.w	r3, [fp]
 8010dea:	4633      	mov	r3, r6
 8010dec:	461e      	mov	r6, r3
 8010dee:	3b01      	subs	r3, #1
 8010df0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010df4:	2a39      	cmp	r2, #57	@ 0x39
 8010df6:	d04e      	beq.n	8010e96 <_dtoa_r+0xb2e>
 8010df8:	3201      	adds	r2, #1
 8010dfa:	701a      	strb	r2, [r3, #0]
 8010dfc:	e501      	b.n	8010802 <_dtoa_r+0x49a>
 8010dfe:	2a00      	cmp	r2, #0
 8010e00:	dd03      	ble.n	8010e0a <_dtoa_r+0xaa2>
 8010e02:	2b39      	cmp	r3, #57	@ 0x39
 8010e04:	d0ee      	beq.n	8010de4 <_dtoa_r+0xa7c>
 8010e06:	3301      	adds	r3, #1
 8010e08:	e7c9      	b.n	8010d9e <_dtoa_r+0xa36>
 8010e0a:	9a00      	ldr	r2, [sp, #0]
 8010e0c:	9908      	ldr	r1, [sp, #32]
 8010e0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010e12:	428a      	cmp	r2, r1
 8010e14:	d028      	beq.n	8010e68 <_dtoa_r+0xb00>
 8010e16:	9902      	ldr	r1, [sp, #8]
 8010e18:	2300      	movs	r3, #0
 8010e1a:	220a      	movs	r2, #10
 8010e1c:	4648      	mov	r0, r9
 8010e1e:	f000 f91f 	bl	8011060 <__multadd>
 8010e22:	42af      	cmp	r7, r5
 8010e24:	9002      	str	r0, [sp, #8]
 8010e26:	f04f 0300 	mov.w	r3, #0
 8010e2a:	f04f 020a 	mov.w	r2, #10
 8010e2e:	4639      	mov	r1, r7
 8010e30:	4648      	mov	r0, r9
 8010e32:	d107      	bne.n	8010e44 <_dtoa_r+0xadc>
 8010e34:	f000 f914 	bl	8011060 <__multadd>
 8010e38:	4607      	mov	r7, r0
 8010e3a:	4605      	mov	r5, r0
 8010e3c:	9b00      	ldr	r3, [sp, #0]
 8010e3e:	3301      	adds	r3, #1
 8010e40:	9300      	str	r3, [sp, #0]
 8010e42:	e777      	b.n	8010d34 <_dtoa_r+0x9cc>
 8010e44:	f000 f90c 	bl	8011060 <__multadd>
 8010e48:	4629      	mov	r1, r5
 8010e4a:	4607      	mov	r7, r0
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	220a      	movs	r2, #10
 8010e50:	4648      	mov	r0, r9
 8010e52:	f000 f905 	bl	8011060 <__multadd>
 8010e56:	4605      	mov	r5, r0
 8010e58:	e7f0      	b.n	8010e3c <_dtoa_r+0xad4>
 8010e5a:	f1bb 0f00 	cmp.w	fp, #0
 8010e5e:	bfcc      	ite	gt
 8010e60:	465e      	movgt	r6, fp
 8010e62:	2601      	movle	r6, #1
 8010e64:	4456      	add	r6, sl
 8010e66:	2700      	movs	r7, #0
 8010e68:	9902      	ldr	r1, [sp, #8]
 8010e6a:	9300      	str	r3, [sp, #0]
 8010e6c:	2201      	movs	r2, #1
 8010e6e:	4648      	mov	r0, r9
 8010e70:	f000 fa9a 	bl	80113a8 <__lshift>
 8010e74:	4621      	mov	r1, r4
 8010e76:	9002      	str	r0, [sp, #8]
 8010e78:	f000 fb02 	bl	8011480 <__mcmp>
 8010e7c:	2800      	cmp	r0, #0
 8010e7e:	dcb4      	bgt.n	8010dea <_dtoa_r+0xa82>
 8010e80:	d102      	bne.n	8010e88 <_dtoa_r+0xb20>
 8010e82:	9b00      	ldr	r3, [sp, #0]
 8010e84:	07db      	lsls	r3, r3, #31
 8010e86:	d4b0      	bmi.n	8010dea <_dtoa_r+0xa82>
 8010e88:	4633      	mov	r3, r6
 8010e8a:	461e      	mov	r6, r3
 8010e8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010e90:	2a30      	cmp	r2, #48	@ 0x30
 8010e92:	d0fa      	beq.n	8010e8a <_dtoa_r+0xb22>
 8010e94:	e4b5      	b.n	8010802 <_dtoa_r+0x49a>
 8010e96:	459a      	cmp	sl, r3
 8010e98:	d1a8      	bne.n	8010dec <_dtoa_r+0xa84>
 8010e9a:	2331      	movs	r3, #49	@ 0x31
 8010e9c:	f108 0801 	add.w	r8, r8, #1
 8010ea0:	f88a 3000 	strb.w	r3, [sl]
 8010ea4:	e4ad      	b.n	8010802 <_dtoa_r+0x49a>
 8010ea6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010ea8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010f04 <_dtoa_r+0xb9c>
 8010eac:	b11b      	cbz	r3, 8010eb6 <_dtoa_r+0xb4e>
 8010eae:	f10a 0308 	add.w	r3, sl, #8
 8010eb2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010eb4:	6013      	str	r3, [r2, #0]
 8010eb6:	4650      	mov	r0, sl
 8010eb8:	b017      	add	sp, #92	@ 0x5c
 8010eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ebe:	9b07      	ldr	r3, [sp, #28]
 8010ec0:	2b01      	cmp	r3, #1
 8010ec2:	f77f ae2e 	ble.w	8010b22 <_dtoa_r+0x7ba>
 8010ec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ec8:	9308      	str	r3, [sp, #32]
 8010eca:	2001      	movs	r0, #1
 8010ecc:	e64d      	b.n	8010b6a <_dtoa_r+0x802>
 8010ece:	f1bb 0f00 	cmp.w	fp, #0
 8010ed2:	f77f aed9 	ble.w	8010c88 <_dtoa_r+0x920>
 8010ed6:	4656      	mov	r6, sl
 8010ed8:	9802      	ldr	r0, [sp, #8]
 8010eda:	4621      	mov	r1, r4
 8010edc:	f7ff f9b9 	bl	8010252 <quorem>
 8010ee0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010ee4:	f806 3b01 	strb.w	r3, [r6], #1
 8010ee8:	eba6 020a 	sub.w	r2, r6, sl
 8010eec:	4593      	cmp	fp, r2
 8010eee:	ddb4      	ble.n	8010e5a <_dtoa_r+0xaf2>
 8010ef0:	9902      	ldr	r1, [sp, #8]
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	220a      	movs	r2, #10
 8010ef6:	4648      	mov	r0, r9
 8010ef8:	f000 f8b2 	bl	8011060 <__multadd>
 8010efc:	9002      	str	r0, [sp, #8]
 8010efe:	e7eb      	b.n	8010ed8 <_dtoa_r+0xb70>
 8010f00:	08012ccc 	.word	0x08012ccc
 8010f04:	08012c50 	.word	0x08012c50

08010f08 <_free_r>:
 8010f08:	b538      	push	{r3, r4, r5, lr}
 8010f0a:	4605      	mov	r5, r0
 8010f0c:	2900      	cmp	r1, #0
 8010f0e:	d041      	beq.n	8010f94 <_free_r+0x8c>
 8010f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f14:	1f0c      	subs	r4, r1, #4
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	bfb8      	it	lt
 8010f1a:	18e4      	addlt	r4, r4, r3
 8010f1c:	f7fe fb72 	bl	800f604 <__malloc_lock>
 8010f20:	4a1d      	ldr	r2, [pc, #116]	@ (8010f98 <_free_r+0x90>)
 8010f22:	6813      	ldr	r3, [r2, #0]
 8010f24:	b933      	cbnz	r3, 8010f34 <_free_r+0x2c>
 8010f26:	6063      	str	r3, [r4, #4]
 8010f28:	6014      	str	r4, [r2, #0]
 8010f2a:	4628      	mov	r0, r5
 8010f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f30:	f7fe bb6e 	b.w	800f610 <__malloc_unlock>
 8010f34:	42a3      	cmp	r3, r4
 8010f36:	d908      	bls.n	8010f4a <_free_r+0x42>
 8010f38:	6820      	ldr	r0, [r4, #0]
 8010f3a:	1821      	adds	r1, r4, r0
 8010f3c:	428b      	cmp	r3, r1
 8010f3e:	bf01      	itttt	eq
 8010f40:	6819      	ldreq	r1, [r3, #0]
 8010f42:	685b      	ldreq	r3, [r3, #4]
 8010f44:	1809      	addeq	r1, r1, r0
 8010f46:	6021      	streq	r1, [r4, #0]
 8010f48:	e7ed      	b.n	8010f26 <_free_r+0x1e>
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	685b      	ldr	r3, [r3, #4]
 8010f4e:	b10b      	cbz	r3, 8010f54 <_free_r+0x4c>
 8010f50:	42a3      	cmp	r3, r4
 8010f52:	d9fa      	bls.n	8010f4a <_free_r+0x42>
 8010f54:	6811      	ldr	r1, [r2, #0]
 8010f56:	1850      	adds	r0, r2, r1
 8010f58:	42a0      	cmp	r0, r4
 8010f5a:	d10b      	bne.n	8010f74 <_free_r+0x6c>
 8010f5c:	6820      	ldr	r0, [r4, #0]
 8010f5e:	4401      	add	r1, r0
 8010f60:	1850      	adds	r0, r2, r1
 8010f62:	4283      	cmp	r3, r0
 8010f64:	6011      	str	r1, [r2, #0]
 8010f66:	d1e0      	bne.n	8010f2a <_free_r+0x22>
 8010f68:	6818      	ldr	r0, [r3, #0]
 8010f6a:	685b      	ldr	r3, [r3, #4]
 8010f6c:	6053      	str	r3, [r2, #4]
 8010f6e:	4408      	add	r0, r1
 8010f70:	6010      	str	r0, [r2, #0]
 8010f72:	e7da      	b.n	8010f2a <_free_r+0x22>
 8010f74:	d902      	bls.n	8010f7c <_free_r+0x74>
 8010f76:	230c      	movs	r3, #12
 8010f78:	602b      	str	r3, [r5, #0]
 8010f7a:	e7d6      	b.n	8010f2a <_free_r+0x22>
 8010f7c:	6820      	ldr	r0, [r4, #0]
 8010f7e:	1821      	adds	r1, r4, r0
 8010f80:	428b      	cmp	r3, r1
 8010f82:	bf04      	itt	eq
 8010f84:	6819      	ldreq	r1, [r3, #0]
 8010f86:	685b      	ldreq	r3, [r3, #4]
 8010f88:	6063      	str	r3, [r4, #4]
 8010f8a:	bf04      	itt	eq
 8010f8c:	1809      	addeq	r1, r1, r0
 8010f8e:	6021      	streq	r1, [r4, #0]
 8010f90:	6054      	str	r4, [r2, #4]
 8010f92:	e7ca      	b.n	8010f2a <_free_r+0x22>
 8010f94:	bd38      	pop	{r3, r4, r5, pc}
 8010f96:	bf00      	nop
 8010f98:	20003094 	.word	0x20003094

08010f9c <_Balloc>:
 8010f9c:	b570      	push	{r4, r5, r6, lr}
 8010f9e:	69c6      	ldr	r6, [r0, #28]
 8010fa0:	4604      	mov	r4, r0
 8010fa2:	460d      	mov	r5, r1
 8010fa4:	b976      	cbnz	r6, 8010fc4 <_Balloc+0x28>
 8010fa6:	2010      	movs	r0, #16
 8010fa8:	f7fe fa7a 	bl	800f4a0 <malloc>
 8010fac:	4602      	mov	r2, r0
 8010fae:	61e0      	str	r0, [r4, #28]
 8010fb0:	b920      	cbnz	r0, 8010fbc <_Balloc+0x20>
 8010fb2:	4b18      	ldr	r3, [pc, #96]	@ (8011014 <_Balloc+0x78>)
 8010fb4:	4818      	ldr	r0, [pc, #96]	@ (8011018 <_Balloc+0x7c>)
 8010fb6:	216b      	movs	r1, #107	@ 0x6b
 8010fb8:	f000 fd88 	bl	8011acc <__assert_func>
 8010fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010fc0:	6006      	str	r6, [r0, #0]
 8010fc2:	60c6      	str	r6, [r0, #12]
 8010fc4:	69e6      	ldr	r6, [r4, #28]
 8010fc6:	68f3      	ldr	r3, [r6, #12]
 8010fc8:	b183      	cbz	r3, 8010fec <_Balloc+0x50>
 8010fca:	69e3      	ldr	r3, [r4, #28]
 8010fcc:	68db      	ldr	r3, [r3, #12]
 8010fce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010fd2:	b9b8      	cbnz	r0, 8011004 <_Balloc+0x68>
 8010fd4:	2101      	movs	r1, #1
 8010fd6:	fa01 f605 	lsl.w	r6, r1, r5
 8010fda:	1d72      	adds	r2, r6, #5
 8010fdc:	0092      	lsls	r2, r2, #2
 8010fde:	4620      	mov	r0, r4
 8010fe0:	f000 fd92 	bl	8011b08 <_calloc_r>
 8010fe4:	b160      	cbz	r0, 8011000 <_Balloc+0x64>
 8010fe6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010fea:	e00e      	b.n	801100a <_Balloc+0x6e>
 8010fec:	2221      	movs	r2, #33	@ 0x21
 8010fee:	2104      	movs	r1, #4
 8010ff0:	4620      	mov	r0, r4
 8010ff2:	f000 fd89 	bl	8011b08 <_calloc_r>
 8010ff6:	69e3      	ldr	r3, [r4, #28]
 8010ff8:	60f0      	str	r0, [r6, #12]
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d1e4      	bne.n	8010fca <_Balloc+0x2e>
 8011000:	2000      	movs	r0, #0
 8011002:	bd70      	pop	{r4, r5, r6, pc}
 8011004:	6802      	ldr	r2, [r0, #0]
 8011006:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801100a:	2300      	movs	r3, #0
 801100c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011010:	e7f7      	b.n	8011002 <_Balloc+0x66>
 8011012:	bf00      	nop
 8011014:	08012c5d 	.word	0x08012c5d
 8011018:	08012cdd 	.word	0x08012cdd

0801101c <_Bfree>:
 801101c:	b570      	push	{r4, r5, r6, lr}
 801101e:	69c6      	ldr	r6, [r0, #28]
 8011020:	4605      	mov	r5, r0
 8011022:	460c      	mov	r4, r1
 8011024:	b976      	cbnz	r6, 8011044 <_Bfree+0x28>
 8011026:	2010      	movs	r0, #16
 8011028:	f7fe fa3a 	bl	800f4a0 <malloc>
 801102c:	4602      	mov	r2, r0
 801102e:	61e8      	str	r0, [r5, #28]
 8011030:	b920      	cbnz	r0, 801103c <_Bfree+0x20>
 8011032:	4b09      	ldr	r3, [pc, #36]	@ (8011058 <_Bfree+0x3c>)
 8011034:	4809      	ldr	r0, [pc, #36]	@ (801105c <_Bfree+0x40>)
 8011036:	218f      	movs	r1, #143	@ 0x8f
 8011038:	f000 fd48 	bl	8011acc <__assert_func>
 801103c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011040:	6006      	str	r6, [r0, #0]
 8011042:	60c6      	str	r6, [r0, #12]
 8011044:	b13c      	cbz	r4, 8011056 <_Bfree+0x3a>
 8011046:	69eb      	ldr	r3, [r5, #28]
 8011048:	6862      	ldr	r2, [r4, #4]
 801104a:	68db      	ldr	r3, [r3, #12]
 801104c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011050:	6021      	str	r1, [r4, #0]
 8011052:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011056:	bd70      	pop	{r4, r5, r6, pc}
 8011058:	08012c5d 	.word	0x08012c5d
 801105c:	08012cdd 	.word	0x08012cdd

08011060 <__multadd>:
 8011060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011064:	690d      	ldr	r5, [r1, #16]
 8011066:	4607      	mov	r7, r0
 8011068:	460c      	mov	r4, r1
 801106a:	461e      	mov	r6, r3
 801106c:	f101 0c14 	add.w	ip, r1, #20
 8011070:	2000      	movs	r0, #0
 8011072:	f8dc 3000 	ldr.w	r3, [ip]
 8011076:	b299      	uxth	r1, r3
 8011078:	fb02 6101 	mla	r1, r2, r1, r6
 801107c:	0c1e      	lsrs	r6, r3, #16
 801107e:	0c0b      	lsrs	r3, r1, #16
 8011080:	fb02 3306 	mla	r3, r2, r6, r3
 8011084:	b289      	uxth	r1, r1
 8011086:	3001      	adds	r0, #1
 8011088:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801108c:	4285      	cmp	r5, r0
 801108e:	f84c 1b04 	str.w	r1, [ip], #4
 8011092:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011096:	dcec      	bgt.n	8011072 <__multadd+0x12>
 8011098:	b30e      	cbz	r6, 80110de <__multadd+0x7e>
 801109a:	68a3      	ldr	r3, [r4, #8]
 801109c:	42ab      	cmp	r3, r5
 801109e:	dc19      	bgt.n	80110d4 <__multadd+0x74>
 80110a0:	6861      	ldr	r1, [r4, #4]
 80110a2:	4638      	mov	r0, r7
 80110a4:	3101      	adds	r1, #1
 80110a6:	f7ff ff79 	bl	8010f9c <_Balloc>
 80110aa:	4680      	mov	r8, r0
 80110ac:	b928      	cbnz	r0, 80110ba <__multadd+0x5a>
 80110ae:	4602      	mov	r2, r0
 80110b0:	4b0c      	ldr	r3, [pc, #48]	@ (80110e4 <__multadd+0x84>)
 80110b2:	480d      	ldr	r0, [pc, #52]	@ (80110e8 <__multadd+0x88>)
 80110b4:	21ba      	movs	r1, #186	@ 0xba
 80110b6:	f000 fd09 	bl	8011acc <__assert_func>
 80110ba:	6922      	ldr	r2, [r4, #16]
 80110bc:	3202      	adds	r2, #2
 80110be:	f104 010c 	add.w	r1, r4, #12
 80110c2:	0092      	lsls	r2, r2, #2
 80110c4:	300c      	adds	r0, #12
 80110c6:	f7ff f8b6 	bl	8010236 <memcpy>
 80110ca:	4621      	mov	r1, r4
 80110cc:	4638      	mov	r0, r7
 80110ce:	f7ff ffa5 	bl	801101c <_Bfree>
 80110d2:	4644      	mov	r4, r8
 80110d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80110d8:	3501      	adds	r5, #1
 80110da:	615e      	str	r6, [r3, #20]
 80110dc:	6125      	str	r5, [r4, #16]
 80110de:	4620      	mov	r0, r4
 80110e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110e4:	08012ccc 	.word	0x08012ccc
 80110e8:	08012cdd 	.word	0x08012cdd

080110ec <__hi0bits>:
 80110ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80110f0:	4603      	mov	r3, r0
 80110f2:	bf36      	itet	cc
 80110f4:	0403      	lslcc	r3, r0, #16
 80110f6:	2000      	movcs	r0, #0
 80110f8:	2010      	movcc	r0, #16
 80110fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80110fe:	bf3c      	itt	cc
 8011100:	021b      	lslcc	r3, r3, #8
 8011102:	3008      	addcc	r0, #8
 8011104:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011108:	bf3c      	itt	cc
 801110a:	011b      	lslcc	r3, r3, #4
 801110c:	3004      	addcc	r0, #4
 801110e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011112:	bf3c      	itt	cc
 8011114:	009b      	lslcc	r3, r3, #2
 8011116:	3002      	addcc	r0, #2
 8011118:	2b00      	cmp	r3, #0
 801111a:	db05      	blt.n	8011128 <__hi0bits+0x3c>
 801111c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011120:	f100 0001 	add.w	r0, r0, #1
 8011124:	bf08      	it	eq
 8011126:	2020      	moveq	r0, #32
 8011128:	4770      	bx	lr

0801112a <__lo0bits>:
 801112a:	6803      	ldr	r3, [r0, #0]
 801112c:	4602      	mov	r2, r0
 801112e:	f013 0007 	ands.w	r0, r3, #7
 8011132:	d00b      	beq.n	801114c <__lo0bits+0x22>
 8011134:	07d9      	lsls	r1, r3, #31
 8011136:	d421      	bmi.n	801117c <__lo0bits+0x52>
 8011138:	0798      	lsls	r0, r3, #30
 801113a:	bf49      	itett	mi
 801113c:	085b      	lsrmi	r3, r3, #1
 801113e:	089b      	lsrpl	r3, r3, #2
 8011140:	2001      	movmi	r0, #1
 8011142:	6013      	strmi	r3, [r2, #0]
 8011144:	bf5c      	itt	pl
 8011146:	6013      	strpl	r3, [r2, #0]
 8011148:	2002      	movpl	r0, #2
 801114a:	4770      	bx	lr
 801114c:	b299      	uxth	r1, r3
 801114e:	b909      	cbnz	r1, 8011154 <__lo0bits+0x2a>
 8011150:	0c1b      	lsrs	r3, r3, #16
 8011152:	2010      	movs	r0, #16
 8011154:	b2d9      	uxtb	r1, r3
 8011156:	b909      	cbnz	r1, 801115c <__lo0bits+0x32>
 8011158:	3008      	adds	r0, #8
 801115a:	0a1b      	lsrs	r3, r3, #8
 801115c:	0719      	lsls	r1, r3, #28
 801115e:	bf04      	itt	eq
 8011160:	091b      	lsreq	r3, r3, #4
 8011162:	3004      	addeq	r0, #4
 8011164:	0799      	lsls	r1, r3, #30
 8011166:	bf04      	itt	eq
 8011168:	089b      	lsreq	r3, r3, #2
 801116a:	3002      	addeq	r0, #2
 801116c:	07d9      	lsls	r1, r3, #31
 801116e:	d403      	bmi.n	8011178 <__lo0bits+0x4e>
 8011170:	085b      	lsrs	r3, r3, #1
 8011172:	f100 0001 	add.w	r0, r0, #1
 8011176:	d003      	beq.n	8011180 <__lo0bits+0x56>
 8011178:	6013      	str	r3, [r2, #0]
 801117a:	4770      	bx	lr
 801117c:	2000      	movs	r0, #0
 801117e:	4770      	bx	lr
 8011180:	2020      	movs	r0, #32
 8011182:	4770      	bx	lr

08011184 <__i2b>:
 8011184:	b510      	push	{r4, lr}
 8011186:	460c      	mov	r4, r1
 8011188:	2101      	movs	r1, #1
 801118a:	f7ff ff07 	bl	8010f9c <_Balloc>
 801118e:	4602      	mov	r2, r0
 8011190:	b928      	cbnz	r0, 801119e <__i2b+0x1a>
 8011192:	4b05      	ldr	r3, [pc, #20]	@ (80111a8 <__i2b+0x24>)
 8011194:	4805      	ldr	r0, [pc, #20]	@ (80111ac <__i2b+0x28>)
 8011196:	f240 1145 	movw	r1, #325	@ 0x145
 801119a:	f000 fc97 	bl	8011acc <__assert_func>
 801119e:	2301      	movs	r3, #1
 80111a0:	6144      	str	r4, [r0, #20]
 80111a2:	6103      	str	r3, [r0, #16]
 80111a4:	bd10      	pop	{r4, pc}
 80111a6:	bf00      	nop
 80111a8:	08012ccc 	.word	0x08012ccc
 80111ac:	08012cdd 	.word	0x08012cdd

080111b0 <__multiply>:
 80111b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111b4:	4617      	mov	r7, r2
 80111b6:	690a      	ldr	r2, [r1, #16]
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	bfa8      	it	ge
 80111be:	463b      	movge	r3, r7
 80111c0:	4689      	mov	r9, r1
 80111c2:	bfa4      	itt	ge
 80111c4:	460f      	movge	r7, r1
 80111c6:	4699      	movge	r9, r3
 80111c8:	693d      	ldr	r5, [r7, #16]
 80111ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	6879      	ldr	r1, [r7, #4]
 80111d2:	eb05 060a 	add.w	r6, r5, sl
 80111d6:	42b3      	cmp	r3, r6
 80111d8:	b085      	sub	sp, #20
 80111da:	bfb8      	it	lt
 80111dc:	3101      	addlt	r1, #1
 80111de:	f7ff fedd 	bl	8010f9c <_Balloc>
 80111e2:	b930      	cbnz	r0, 80111f2 <__multiply+0x42>
 80111e4:	4602      	mov	r2, r0
 80111e6:	4b41      	ldr	r3, [pc, #260]	@ (80112ec <__multiply+0x13c>)
 80111e8:	4841      	ldr	r0, [pc, #260]	@ (80112f0 <__multiply+0x140>)
 80111ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80111ee:	f000 fc6d 	bl	8011acc <__assert_func>
 80111f2:	f100 0414 	add.w	r4, r0, #20
 80111f6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80111fa:	4623      	mov	r3, r4
 80111fc:	2200      	movs	r2, #0
 80111fe:	4573      	cmp	r3, lr
 8011200:	d320      	bcc.n	8011244 <__multiply+0x94>
 8011202:	f107 0814 	add.w	r8, r7, #20
 8011206:	f109 0114 	add.w	r1, r9, #20
 801120a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801120e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011212:	9302      	str	r3, [sp, #8]
 8011214:	1beb      	subs	r3, r5, r7
 8011216:	3b15      	subs	r3, #21
 8011218:	f023 0303 	bic.w	r3, r3, #3
 801121c:	3304      	adds	r3, #4
 801121e:	3715      	adds	r7, #21
 8011220:	42bd      	cmp	r5, r7
 8011222:	bf38      	it	cc
 8011224:	2304      	movcc	r3, #4
 8011226:	9301      	str	r3, [sp, #4]
 8011228:	9b02      	ldr	r3, [sp, #8]
 801122a:	9103      	str	r1, [sp, #12]
 801122c:	428b      	cmp	r3, r1
 801122e:	d80c      	bhi.n	801124a <__multiply+0x9a>
 8011230:	2e00      	cmp	r6, #0
 8011232:	dd03      	ble.n	801123c <__multiply+0x8c>
 8011234:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011238:	2b00      	cmp	r3, #0
 801123a:	d055      	beq.n	80112e8 <__multiply+0x138>
 801123c:	6106      	str	r6, [r0, #16]
 801123e:	b005      	add	sp, #20
 8011240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011244:	f843 2b04 	str.w	r2, [r3], #4
 8011248:	e7d9      	b.n	80111fe <__multiply+0x4e>
 801124a:	f8b1 a000 	ldrh.w	sl, [r1]
 801124e:	f1ba 0f00 	cmp.w	sl, #0
 8011252:	d01f      	beq.n	8011294 <__multiply+0xe4>
 8011254:	46c4      	mov	ip, r8
 8011256:	46a1      	mov	r9, r4
 8011258:	2700      	movs	r7, #0
 801125a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801125e:	f8d9 3000 	ldr.w	r3, [r9]
 8011262:	fa1f fb82 	uxth.w	fp, r2
 8011266:	b29b      	uxth	r3, r3
 8011268:	fb0a 330b 	mla	r3, sl, fp, r3
 801126c:	443b      	add	r3, r7
 801126e:	f8d9 7000 	ldr.w	r7, [r9]
 8011272:	0c12      	lsrs	r2, r2, #16
 8011274:	0c3f      	lsrs	r7, r7, #16
 8011276:	fb0a 7202 	mla	r2, sl, r2, r7
 801127a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801127e:	b29b      	uxth	r3, r3
 8011280:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011284:	4565      	cmp	r5, ip
 8011286:	f849 3b04 	str.w	r3, [r9], #4
 801128a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801128e:	d8e4      	bhi.n	801125a <__multiply+0xaa>
 8011290:	9b01      	ldr	r3, [sp, #4]
 8011292:	50e7      	str	r7, [r4, r3]
 8011294:	9b03      	ldr	r3, [sp, #12]
 8011296:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801129a:	3104      	adds	r1, #4
 801129c:	f1b9 0f00 	cmp.w	r9, #0
 80112a0:	d020      	beq.n	80112e4 <__multiply+0x134>
 80112a2:	6823      	ldr	r3, [r4, #0]
 80112a4:	4647      	mov	r7, r8
 80112a6:	46a4      	mov	ip, r4
 80112a8:	f04f 0a00 	mov.w	sl, #0
 80112ac:	f8b7 b000 	ldrh.w	fp, [r7]
 80112b0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80112b4:	fb09 220b 	mla	r2, r9, fp, r2
 80112b8:	4452      	add	r2, sl
 80112ba:	b29b      	uxth	r3, r3
 80112bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80112c0:	f84c 3b04 	str.w	r3, [ip], #4
 80112c4:	f857 3b04 	ldr.w	r3, [r7], #4
 80112c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80112cc:	f8bc 3000 	ldrh.w	r3, [ip]
 80112d0:	fb09 330a 	mla	r3, r9, sl, r3
 80112d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80112d8:	42bd      	cmp	r5, r7
 80112da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80112de:	d8e5      	bhi.n	80112ac <__multiply+0xfc>
 80112e0:	9a01      	ldr	r2, [sp, #4]
 80112e2:	50a3      	str	r3, [r4, r2]
 80112e4:	3404      	adds	r4, #4
 80112e6:	e79f      	b.n	8011228 <__multiply+0x78>
 80112e8:	3e01      	subs	r6, #1
 80112ea:	e7a1      	b.n	8011230 <__multiply+0x80>
 80112ec:	08012ccc 	.word	0x08012ccc
 80112f0:	08012cdd 	.word	0x08012cdd

080112f4 <__pow5mult>:
 80112f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112f8:	4615      	mov	r5, r2
 80112fa:	f012 0203 	ands.w	r2, r2, #3
 80112fe:	4607      	mov	r7, r0
 8011300:	460e      	mov	r6, r1
 8011302:	d007      	beq.n	8011314 <__pow5mult+0x20>
 8011304:	4c25      	ldr	r4, [pc, #148]	@ (801139c <__pow5mult+0xa8>)
 8011306:	3a01      	subs	r2, #1
 8011308:	2300      	movs	r3, #0
 801130a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801130e:	f7ff fea7 	bl	8011060 <__multadd>
 8011312:	4606      	mov	r6, r0
 8011314:	10ad      	asrs	r5, r5, #2
 8011316:	d03d      	beq.n	8011394 <__pow5mult+0xa0>
 8011318:	69fc      	ldr	r4, [r7, #28]
 801131a:	b97c      	cbnz	r4, 801133c <__pow5mult+0x48>
 801131c:	2010      	movs	r0, #16
 801131e:	f7fe f8bf 	bl	800f4a0 <malloc>
 8011322:	4602      	mov	r2, r0
 8011324:	61f8      	str	r0, [r7, #28]
 8011326:	b928      	cbnz	r0, 8011334 <__pow5mult+0x40>
 8011328:	4b1d      	ldr	r3, [pc, #116]	@ (80113a0 <__pow5mult+0xac>)
 801132a:	481e      	ldr	r0, [pc, #120]	@ (80113a4 <__pow5mult+0xb0>)
 801132c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011330:	f000 fbcc 	bl	8011acc <__assert_func>
 8011334:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011338:	6004      	str	r4, [r0, #0]
 801133a:	60c4      	str	r4, [r0, #12]
 801133c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011340:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011344:	b94c      	cbnz	r4, 801135a <__pow5mult+0x66>
 8011346:	f240 2171 	movw	r1, #625	@ 0x271
 801134a:	4638      	mov	r0, r7
 801134c:	f7ff ff1a 	bl	8011184 <__i2b>
 8011350:	2300      	movs	r3, #0
 8011352:	f8c8 0008 	str.w	r0, [r8, #8]
 8011356:	4604      	mov	r4, r0
 8011358:	6003      	str	r3, [r0, #0]
 801135a:	f04f 0900 	mov.w	r9, #0
 801135e:	07eb      	lsls	r3, r5, #31
 8011360:	d50a      	bpl.n	8011378 <__pow5mult+0x84>
 8011362:	4631      	mov	r1, r6
 8011364:	4622      	mov	r2, r4
 8011366:	4638      	mov	r0, r7
 8011368:	f7ff ff22 	bl	80111b0 <__multiply>
 801136c:	4631      	mov	r1, r6
 801136e:	4680      	mov	r8, r0
 8011370:	4638      	mov	r0, r7
 8011372:	f7ff fe53 	bl	801101c <_Bfree>
 8011376:	4646      	mov	r6, r8
 8011378:	106d      	asrs	r5, r5, #1
 801137a:	d00b      	beq.n	8011394 <__pow5mult+0xa0>
 801137c:	6820      	ldr	r0, [r4, #0]
 801137e:	b938      	cbnz	r0, 8011390 <__pow5mult+0x9c>
 8011380:	4622      	mov	r2, r4
 8011382:	4621      	mov	r1, r4
 8011384:	4638      	mov	r0, r7
 8011386:	f7ff ff13 	bl	80111b0 <__multiply>
 801138a:	6020      	str	r0, [r4, #0]
 801138c:	f8c0 9000 	str.w	r9, [r0]
 8011390:	4604      	mov	r4, r0
 8011392:	e7e4      	b.n	801135e <__pow5mult+0x6a>
 8011394:	4630      	mov	r0, r6
 8011396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801139a:	bf00      	nop
 801139c:	08012d90 	.word	0x08012d90
 80113a0:	08012c5d 	.word	0x08012c5d
 80113a4:	08012cdd 	.word	0x08012cdd

080113a8 <__lshift>:
 80113a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113ac:	460c      	mov	r4, r1
 80113ae:	6849      	ldr	r1, [r1, #4]
 80113b0:	6923      	ldr	r3, [r4, #16]
 80113b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80113b6:	68a3      	ldr	r3, [r4, #8]
 80113b8:	4607      	mov	r7, r0
 80113ba:	4691      	mov	r9, r2
 80113bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80113c0:	f108 0601 	add.w	r6, r8, #1
 80113c4:	42b3      	cmp	r3, r6
 80113c6:	db0b      	blt.n	80113e0 <__lshift+0x38>
 80113c8:	4638      	mov	r0, r7
 80113ca:	f7ff fde7 	bl	8010f9c <_Balloc>
 80113ce:	4605      	mov	r5, r0
 80113d0:	b948      	cbnz	r0, 80113e6 <__lshift+0x3e>
 80113d2:	4602      	mov	r2, r0
 80113d4:	4b28      	ldr	r3, [pc, #160]	@ (8011478 <__lshift+0xd0>)
 80113d6:	4829      	ldr	r0, [pc, #164]	@ (801147c <__lshift+0xd4>)
 80113d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80113dc:	f000 fb76 	bl	8011acc <__assert_func>
 80113e0:	3101      	adds	r1, #1
 80113e2:	005b      	lsls	r3, r3, #1
 80113e4:	e7ee      	b.n	80113c4 <__lshift+0x1c>
 80113e6:	2300      	movs	r3, #0
 80113e8:	f100 0114 	add.w	r1, r0, #20
 80113ec:	f100 0210 	add.w	r2, r0, #16
 80113f0:	4618      	mov	r0, r3
 80113f2:	4553      	cmp	r3, sl
 80113f4:	db33      	blt.n	801145e <__lshift+0xb6>
 80113f6:	6920      	ldr	r0, [r4, #16]
 80113f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80113fc:	f104 0314 	add.w	r3, r4, #20
 8011400:	f019 091f 	ands.w	r9, r9, #31
 8011404:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011408:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801140c:	d02b      	beq.n	8011466 <__lshift+0xbe>
 801140e:	f1c9 0e20 	rsb	lr, r9, #32
 8011412:	468a      	mov	sl, r1
 8011414:	2200      	movs	r2, #0
 8011416:	6818      	ldr	r0, [r3, #0]
 8011418:	fa00 f009 	lsl.w	r0, r0, r9
 801141c:	4310      	orrs	r0, r2
 801141e:	f84a 0b04 	str.w	r0, [sl], #4
 8011422:	f853 2b04 	ldr.w	r2, [r3], #4
 8011426:	459c      	cmp	ip, r3
 8011428:	fa22 f20e 	lsr.w	r2, r2, lr
 801142c:	d8f3      	bhi.n	8011416 <__lshift+0x6e>
 801142e:	ebac 0304 	sub.w	r3, ip, r4
 8011432:	3b15      	subs	r3, #21
 8011434:	f023 0303 	bic.w	r3, r3, #3
 8011438:	3304      	adds	r3, #4
 801143a:	f104 0015 	add.w	r0, r4, #21
 801143e:	4560      	cmp	r0, ip
 8011440:	bf88      	it	hi
 8011442:	2304      	movhi	r3, #4
 8011444:	50ca      	str	r2, [r1, r3]
 8011446:	b10a      	cbz	r2, 801144c <__lshift+0xa4>
 8011448:	f108 0602 	add.w	r6, r8, #2
 801144c:	3e01      	subs	r6, #1
 801144e:	4638      	mov	r0, r7
 8011450:	612e      	str	r6, [r5, #16]
 8011452:	4621      	mov	r1, r4
 8011454:	f7ff fde2 	bl	801101c <_Bfree>
 8011458:	4628      	mov	r0, r5
 801145a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801145e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011462:	3301      	adds	r3, #1
 8011464:	e7c5      	b.n	80113f2 <__lshift+0x4a>
 8011466:	3904      	subs	r1, #4
 8011468:	f853 2b04 	ldr.w	r2, [r3], #4
 801146c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011470:	459c      	cmp	ip, r3
 8011472:	d8f9      	bhi.n	8011468 <__lshift+0xc0>
 8011474:	e7ea      	b.n	801144c <__lshift+0xa4>
 8011476:	bf00      	nop
 8011478:	08012ccc 	.word	0x08012ccc
 801147c:	08012cdd 	.word	0x08012cdd

08011480 <__mcmp>:
 8011480:	690a      	ldr	r2, [r1, #16]
 8011482:	4603      	mov	r3, r0
 8011484:	6900      	ldr	r0, [r0, #16]
 8011486:	1a80      	subs	r0, r0, r2
 8011488:	b530      	push	{r4, r5, lr}
 801148a:	d10e      	bne.n	80114aa <__mcmp+0x2a>
 801148c:	3314      	adds	r3, #20
 801148e:	3114      	adds	r1, #20
 8011490:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011494:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011498:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801149c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80114a0:	4295      	cmp	r5, r2
 80114a2:	d003      	beq.n	80114ac <__mcmp+0x2c>
 80114a4:	d205      	bcs.n	80114b2 <__mcmp+0x32>
 80114a6:	f04f 30ff 	mov.w	r0, #4294967295
 80114aa:	bd30      	pop	{r4, r5, pc}
 80114ac:	42a3      	cmp	r3, r4
 80114ae:	d3f3      	bcc.n	8011498 <__mcmp+0x18>
 80114b0:	e7fb      	b.n	80114aa <__mcmp+0x2a>
 80114b2:	2001      	movs	r0, #1
 80114b4:	e7f9      	b.n	80114aa <__mcmp+0x2a>
	...

080114b8 <__mdiff>:
 80114b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114bc:	4689      	mov	r9, r1
 80114be:	4606      	mov	r6, r0
 80114c0:	4611      	mov	r1, r2
 80114c2:	4648      	mov	r0, r9
 80114c4:	4614      	mov	r4, r2
 80114c6:	f7ff ffdb 	bl	8011480 <__mcmp>
 80114ca:	1e05      	subs	r5, r0, #0
 80114cc:	d112      	bne.n	80114f4 <__mdiff+0x3c>
 80114ce:	4629      	mov	r1, r5
 80114d0:	4630      	mov	r0, r6
 80114d2:	f7ff fd63 	bl	8010f9c <_Balloc>
 80114d6:	4602      	mov	r2, r0
 80114d8:	b928      	cbnz	r0, 80114e6 <__mdiff+0x2e>
 80114da:	4b3f      	ldr	r3, [pc, #252]	@ (80115d8 <__mdiff+0x120>)
 80114dc:	f240 2137 	movw	r1, #567	@ 0x237
 80114e0:	483e      	ldr	r0, [pc, #248]	@ (80115dc <__mdiff+0x124>)
 80114e2:	f000 faf3 	bl	8011acc <__assert_func>
 80114e6:	2301      	movs	r3, #1
 80114e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80114ec:	4610      	mov	r0, r2
 80114ee:	b003      	add	sp, #12
 80114f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114f4:	bfbc      	itt	lt
 80114f6:	464b      	movlt	r3, r9
 80114f8:	46a1      	movlt	r9, r4
 80114fa:	4630      	mov	r0, r6
 80114fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011500:	bfba      	itte	lt
 8011502:	461c      	movlt	r4, r3
 8011504:	2501      	movlt	r5, #1
 8011506:	2500      	movge	r5, #0
 8011508:	f7ff fd48 	bl	8010f9c <_Balloc>
 801150c:	4602      	mov	r2, r0
 801150e:	b918      	cbnz	r0, 8011518 <__mdiff+0x60>
 8011510:	4b31      	ldr	r3, [pc, #196]	@ (80115d8 <__mdiff+0x120>)
 8011512:	f240 2145 	movw	r1, #581	@ 0x245
 8011516:	e7e3      	b.n	80114e0 <__mdiff+0x28>
 8011518:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801151c:	6926      	ldr	r6, [r4, #16]
 801151e:	60c5      	str	r5, [r0, #12]
 8011520:	f109 0310 	add.w	r3, r9, #16
 8011524:	f109 0514 	add.w	r5, r9, #20
 8011528:	f104 0e14 	add.w	lr, r4, #20
 801152c:	f100 0b14 	add.w	fp, r0, #20
 8011530:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011534:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011538:	9301      	str	r3, [sp, #4]
 801153a:	46d9      	mov	r9, fp
 801153c:	f04f 0c00 	mov.w	ip, #0
 8011540:	9b01      	ldr	r3, [sp, #4]
 8011542:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011546:	f853 af04 	ldr.w	sl, [r3, #4]!
 801154a:	9301      	str	r3, [sp, #4]
 801154c:	fa1f f38a 	uxth.w	r3, sl
 8011550:	4619      	mov	r1, r3
 8011552:	b283      	uxth	r3, r0
 8011554:	1acb      	subs	r3, r1, r3
 8011556:	0c00      	lsrs	r0, r0, #16
 8011558:	4463      	add	r3, ip
 801155a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801155e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011562:	b29b      	uxth	r3, r3
 8011564:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011568:	4576      	cmp	r6, lr
 801156a:	f849 3b04 	str.w	r3, [r9], #4
 801156e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011572:	d8e5      	bhi.n	8011540 <__mdiff+0x88>
 8011574:	1b33      	subs	r3, r6, r4
 8011576:	3b15      	subs	r3, #21
 8011578:	f023 0303 	bic.w	r3, r3, #3
 801157c:	3415      	adds	r4, #21
 801157e:	3304      	adds	r3, #4
 8011580:	42a6      	cmp	r6, r4
 8011582:	bf38      	it	cc
 8011584:	2304      	movcc	r3, #4
 8011586:	441d      	add	r5, r3
 8011588:	445b      	add	r3, fp
 801158a:	461e      	mov	r6, r3
 801158c:	462c      	mov	r4, r5
 801158e:	4544      	cmp	r4, r8
 8011590:	d30e      	bcc.n	80115b0 <__mdiff+0xf8>
 8011592:	f108 0103 	add.w	r1, r8, #3
 8011596:	1b49      	subs	r1, r1, r5
 8011598:	f021 0103 	bic.w	r1, r1, #3
 801159c:	3d03      	subs	r5, #3
 801159e:	45a8      	cmp	r8, r5
 80115a0:	bf38      	it	cc
 80115a2:	2100      	movcc	r1, #0
 80115a4:	440b      	add	r3, r1
 80115a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80115aa:	b191      	cbz	r1, 80115d2 <__mdiff+0x11a>
 80115ac:	6117      	str	r7, [r2, #16]
 80115ae:	e79d      	b.n	80114ec <__mdiff+0x34>
 80115b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80115b4:	46e6      	mov	lr, ip
 80115b6:	0c08      	lsrs	r0, r1, #16
 80115b8:	fa1c fc81 	uxtah	ip, ip, r1
 80115bc:	4471      	add	r1, lr
 80115be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80115c2:	b289      	uxth	r1, r1
 80115c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80115c8:	f846 1b04 	str.w	r1, [r6], #4
 80115cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80115d0:	e7dd      	b.n	801158e <__mdiff+0xd6>
 80115d2:	3f01      	subs	r7, #1
 80115d4:	e7e7      	b.n	80115a6 <__mdiff+0xee>
 80115d6:	bf00      	nop
 80115d8:	08012ccc 	.word	0x08012ccc
 80115dc:	08012cdd 	.word	0x08012cdd

080115e0 <__d2b>:
 80115e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80115e4:	460f      	mov	r7, r1
 80115e6:	2101      	movs	r1, #1
 80115e8:	ec59 8b10 	vmov	r8, r9, d0
 80115ec:	4616      	mov	r6, r2
 80115ee:	f7ff fcd5 	bl	8010f9c <_Balloc>
 80115f2:	4604      	mov	r4, r0
 80115f4:	b930      	cbnz	r0, 8011604 <__d2b+0x24>
 80115f6:	4602      	mov	r2, r0
 80115f8:	4b23      	ldr	r3, [pc, #140]	@ (8011688 <__d2b+0xa8>)
 80115fa:	4824      	ldr	r0, [pc, #144]	@ (801168c <__d2b+0xac>)
 80115fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8011600:	f000 fa64 	bl	8011acc <__assert_func>
 8011604:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011608:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801160c:	b10d      	cbz	r5, 8011612 <__d2b+0x32>
 801160e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011612:	9301      	str	r3, [sp, #4]
 8011614:	f1b8 0300 	subs.w	r3, r8, #0
 8011618:	d023      	beq.n	8011662 <__d2b+0x82>
 801161a:	4668      	mov	r0, sp
 801161c:	9300      	str	r3, [sp, #0]
 801161e:	f7ff fd84 	bl	801112a <__lo0bits>
 8011622:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011626:	b1d0      	cbz	r0, 801165e <__d2b+0x7e>
 8011628:	f1c0 0320 	rsb	r3, r0, #32
 801162c:	fa02 f303 	lsl.w	r3, r2, r3
 8011630:	430b      	orrs	r3, r1
 8011632:	40c2      	lsrs	r2, r0
 8011634:	6163      	str	r3, [r4, #20]
 8011636:	9201      	str	r2, [sp, #4]
 8011638:	9b01      	ldr	r3, [sp, #4]
 801163a:	61a3      	str	r3, [r4, #24]
 801163c:	2b00      	cmp	r3, #0
 801163e:	bf0c      	ite	eq
 8011640:	2201      	moveq	r2, #1
 8011642:	2202      	movne	r2, #2
 8011644:	6122      	str	r2, [r4, #16]
 8011646:	b1a5      	cbz	r5, 8011672 <__d2b+0x92>
 8011648:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801164c:	4405      	add	r5, r0
 801164e:	603d      	str	r5, [r7, #0]
 8011650:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011654:	6030      	str	r0, [r6, #0]
 8011656:	4620      	mov	r0, r4
 8011658:	b003      	add	sp, #12
 801165a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801165e:	6161      	str	r1, [r4, #20]
 8011660:	e7ea      	b.n	8011638 <__d2b+0x58>
 8011662:	a801      	add	r0, sp, #4
 8011664:	f7ff fd61 	bl	801112a <__lo0bits>
 8011668:	9b01      	ldr	r3, [sp, #4]
 801166a:	6163      	str	r3, [r4, #20]
 801166c:	3020      	adds	r0, #32
 801166e:	2201      	movs	r2, #1
 8011670:	e7e8      	b.n	8011644 <__d2b+0x64>
 8011672:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011676:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801167a:	6038      	str	r0, [r7, #0]
 801167c:	6918      	ldr	r0, [r3, #16]
 801167e:	f7ff fd35 	bl	80110ec <__hi0bits>
 8011682:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011686:	e7e5      	b.n	8011654 <__d2b+0x74>
 8011688:	08012ccc 	.word	0x08012ccc
 801168c:	08012cdd 	.word	0x08012cdd

08011690 <__ssputs_r>:
 8011690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011694:	688e      	ldr	r6, [r1, #8]
 8011696:	461f      	mov	r7, r3
 8011698:	42be      	cmp	r6, r7
 801169a:	680b      	ldr	r3, [r1, #0]
 801169c:	4682      	mov	sl, r0
 801169e:	460c      	mov	r4, r1
 80116a0:	4690      	mov	r8, r2
 80116a2:	d82d      	bhi.n	8011700 <__ssputs_r+0x70>
 80116a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80116a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80116ac:	d026      	beq.n	80116fc <__ssputs_r+0x6c>
 80116ae:	6965      	ldr	r5, [r4, #20]
 80116b0:	6909      	ldr	r1, [r1, #16]
 80116b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80116b6:	eba3 0901 	sub.w	r9, r3, r1
 80116ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80116be:	1c7b      	adds	r3, r7, #1
 80116c0:	444b      	add	r3, r9
 80116c2:	106d      	asrs	r5, r5, #1
 80116c4:	429d      	cmp	r5, r3
 80116c6:	bf38      	it	cc
 80116c8:	461d      	movcc	r5, r3
 80116ca:	0553      	lsls	r3, r2, #21
 80116cc:	d527      	bpl.n	801171e <__ssputs_r+0x8e>
 80116ce:	4629      	mov	r1, r5
 80116d0:	f7fd ff18 	bl	800f504 <_malloc_r>
 80116d4:	4606      	mov	r6, r0
 80116d6:	b360      	cbz	r0, 8011732 <__ssputs_r+0xa2>
 80116d8:	6921      	ldr	r1, [r4, #16]
 80116da:	464a      	mov	r2, r9
 80116dc:	f7fe fdab 	bl	8010236 <memcpy>
 80116e0:	89a3      	ldrh	r3, [r4, #12]
 80116e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80116e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116ea:	81a3      	strh	r3, [r4, #12]
 80116ec:	6126      	str	r6, [r4, #16]
 80116ee:	6165      	str	r5, [r4, #20]
 80116f0:	444e      	add	r6, r9
 80116f2:	eba5 0509 	sub.w	r5, r5, r9
 80116f6:	6026      	str	r6, [r4, #0]
 80116f8:	60a5      	str	r5, [r4, #8]
 80116fa:	463e      	mov	r6, r7
 80116fc:	42be      	cmp	r6, r7
 80116fe:	d900      	bls.n	8011702 <__ssputs_r+0x72>
 8011700:	463e      	mov	r6, r7
 8011702:	6820      	ldr	r0, [r4, #0]
 8011704:	4632      	mov	r2, r6
 8011706:	4641      	mov	r1, r8
 8011708:	f000 f9c6 	bl	8011a98 <memmove>
 801170c:	68a3      	ldr	r3, [r4, #8]
 801170e:	1b9b      	subs	r3, r3, r6
 8011710:	60a3      	str	r3, [r4, #8]
 8011712:	6823      	ldr	r3, [r4, #0]
 8011714:	4433      	add	r3, r6
 8011716:	6023      	str	r3, [r4, #0]
 8011718:	2000      	movs	r0, #0
 801171a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801171e:	462a      	mov	r2, r5
 8011720:	f000 fa18 	bl	8011b54 <_realloc_r>
 8011724:	4606      	mov	r6, r0
 8011726:	2800      	cmp	r0, #0
 8011728:	d1e0      	bne.n	80116ec <__ssputs_r+0x5c>
 801172a:	6921      	ldr	r1, [r4, #16]
 801172c:	4650      	mov	r0, sl
 801172e:	f7ff fbeb 	bl	8010f08 <_free_r>
 8011732:	230c      	movs	r3, #12
 8011734:	f8ca 3000 	str.w	r3, [sl]
 8011738:	89a3      	ldrh	r3, [r4, #12]
 801173a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801173e:	81a3      	strh	r3, [r4, #12]
 8011740:	f04f 30ff 	mov.w	r0, #4294967295
 8011744:	e7e9      	b.n	801171a <__ssputs_r+0x8a>
	...

08011748 <_svfiprintf_r>:
 8011748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801174c:	4698      	mov	r8, r3
 801174e:	898b      	ldrh	r3, [r1, #12]
 8011750:	061b      	lsls	r3, r3, #24
 8011752:	b09d      	sub	sp, #116	@ 0x74
 8011754:	4607      	mov	r7, r0
 8011756:	460d      	mov	r5, r1
 8011758:	4614      	mov	r4, r2
 801175a:	d510      	bpl.n	801177e <_svfiprintf_r+0x36>
 801175c:	690b      	ldr	r3, [r1, #16]
 801175e:	b973      	cbnz	r3, 801177e <_svfiprintf_r+0x36>
 8011760:	2140      	movs	r1, #64	@ 0x40
 8011762:	f7fd fecf 	bl	800f504 <_malloc_r>
 8011766:	6028      	str	r0, [r5, #0]
 8011768:	6128      	str	r0, [r5, #16]
 801176a:	b930      	cbnz	r0, 801177a <_svfiprintf_r+0x32>
 801176c:	230c      	movs	r3, #12
 801176e:	603b      	str	r3, [r7, #0]
 8011770:	f04f 30ff 	mov.w	r0, #4294967295
 8011774:	b01d      	add	sp, #116	@ 0x74
 8011776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801177a:	2340      	movs	r3, #64	@ 0x40
 801177c:	616b      	str	r3, [r5, #20]
 801177e:	2300      	movs	r3, #0
 8011780:	9309      	str	r3, [sp, #36]	@ 0x24
 8011782:	2320      	movs	r3, #32
 8011784:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011788:	f8cd 800c 	str.w	r8, [sp, #12]
 801178c:	2330      	movs	r3, #48	@ 0x30
 801178e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801192c <_svfiprintf_r+0x1e4>
 8011792:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011796:	f04f 0901 	mov.w	r9, #1
 801179a:	4623      	mov	r3, r4
 801179c:	469a      	mov	sl, r3
 801179e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117a2:	b10a      	cbz	r2, 80117a8 <_svfiprintf_r+0x60>
 80117a4:	2a25      	cmp	r2, #37	@ 0x25
 80117a6:	d1f9      	bne.n	801179c <_svfiprintf_r+0x54>
 80117a8:	ebba 0b04 	subs.w	fp, sl, r4
 80117ac:	d00b      	beq.n	80117c6 <_svfiprintf_r+0x7e>
 80117ae:	465b      	mov	r3, fp
 80117b0:	4622      	mov	r2, r4
 80117b2:	4629      	mov	r1, r5
 80117b4:	4638      	mov	r0, r7
 80117b6:	f7ff ff6b 	bl	8011690 <__ssputs_r>
 80117ba:	3001      	adds	r0, #1
 80117bc:	f000 80a7 	beq.w	801190e <_svfiprintf_r+0x1c6>
 80117c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80117c2:	445a      	add	r2, fp
 80117c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80117c6:	f89a 3000 	ldrb.w	r3, [sl]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	f000 809f 	beq.w	801190e <_svfiprintf_r+0x1c6>
 80117d0:	2300      	movs	r3, #0
 80117d2:	f04f 32ff 	mov.w	r2, #4294967295
 80117d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117da:	f10a 0a01 	add.w	sl, sl, #1
 80117de:	9304      	str	r3, [sp, #16]
 80117e0:	9307      	str	r3, [sp, #28]
 80117e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80117e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80117e8:	4654      	mov	r4, sl
 80117ea:	2205      	movs	r2, #5
 80117ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117f0:	484e      	ldr	r0, [pc, #312]	@ (801192c <_svfiprintf_r+0x1e4>)
 80117f2:	f7ee fcfd 	bl	80001f0 <memchr>
 80117f6:	9a04      	ldr	r2, [sp, #16]
 80117f8:	b9d8      	cbnz	r0, 8011832 <_svfiprintf_r+0xea>
 80117fa:	06d0      	lsls	r0, r2, #27
 80117fc:	bf44      	itt	mi
 80117fe:	2320      	movmi	r3, #32
 8011800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011804:	0711      	lsls	r1, r2, #28
 8011806:	bf44      	itt	mi
 8011808:	232b      	movmi	r3, #43	@ 0x2b
 801180a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801180e:	f89a 3000 	ldrb.w	r3, [sl]
 8011812:	2b2a      	cmp	r3, #42	@ 0x2a
 8011814:	d015      	beq.n	8011842 <_svfiprintf_r+0xfa>
 8011816:	9a07      	ldr	r2, [sp, #28]
 8011818:	4654      	mov	r4, sl
 801181a:	2000      	movs	r0, #0
 801181c:	f04f 0c0a 	mov.w	ip, #10
 8011820:	4621      	mov	r1, r4
 8011822:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011826:	3b30      	subs	r3, #48	@ 0x30
 8011828:	2b09      	cmp	r3, #9
 801182a:	d94b      	bls.n	80118c4 <_svfiprintf_r+0x17c>
 801182c:	b1b0      	cbz	r0, 801185c <_svfiprintf_r+0x114>
 801182e:	9207      	str	r2, [sp, #28]
 8011830:	e014      	b.n	801185c <_svfiprintf_r+0x114>
 8011832:	eba0 0308 	sub.w	r3, r0, r8
 8011836:	fa09 f303 	lsl.w	r3, r9, r3
 801183a:	4313      	orrs	r3, r2
 801183c:	9304      	str	r3, [sp, #16]
 801183e:	46a2      	mov	sl, r4
 8011840:	e7d2      	b.n	80117e8 <_svfiprintf_r+0xa0>
 8011842:	9b03      	ldr	r3, [sp, #12]
 8011844:	1d19      	adds	r1, r3, #4
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	9103      	str	r1, [sp, #12]
 801184a:	2b00      	cmp	r3, #0
 801184c:	bfbb      	ittet	lt
 801184e:	425b      	neglt	r3, r3
 8011850:	f042 0202 	orrlt.w	r2, r2, #2
 8011854:	9307      	strge	r3, [sp, #28]
 8011856:	9307      	strlt	r3, [sp, #28]
 8011858:	bfb8      	it	lt
 801185a:	9204      	strlt	r2, [sp, #16]
 801185c:	7823      	ldrb	r3, [r4, #0]
 801185e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011860:	d10a      	bne.n	8011878 <_svfiprintf_r+0x130>
 8011862:	7863      	ldrb	r3, [r4, #1]
 8011864:	2b2a      	cmp	r3, #42	@ 0x2a
 8011866:	d132      	bne.n	80118ce <_svfiprintf_r+0x186>
 8011868:	9b03      	ldr	r3, [sp, #12]
 801186a:	1d1a      	adds	r2, r3, #4
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	9203      	str	r2, [sp, #12]
 8011870:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011874:	3402      	adds	r4, #2
 8011876:	9305      	str	r3, [sp, #20]
 8011878:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801193c <_svfiprintf_r+0x1f4>
 801187c:	7821      	ldrb	r1, [r4, #0]
 801187e:	2203      	movs	r2, #3
 8011880:	4650      	mov	r0, sl
 8011882:	f7ee fcb5 	bl	80001f0 <memchr>
 8011886:	b138      	cbz	r0, 8011898 <_svfiprintf_r+0x150>
 8011888:	9b04      	ldr	r3, [sp, #16]
 801188a:	eba0 000a 	sub.w	r0, r0, sl
 801188e:	2240      	movs	r2, #64	@ 0x40
 8011890:	4082      	lsls	r2, r0
 8011892:	4313      	orrs	r3, r2
 8011894:	3401      	adds	r4, #1
 8011896:	9304      	str	r3, [sp, #16]
 8011898:	f814 1b01 	ldrb.w	r1, [r4], #1
 801189c:	4824      	ldr	r0, [pc, #144]	@ (8011930 <_svfiprintf_r+0x1e8>)
 801189e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80118a2:	2206      	movs	r2, #6
 80118a4:	f7ee fca4 	bl	80001f0 <memchr>
 80118a8:	2800      	cmp	r0, #0
 80118aa:	d036      	beq.n	801191a <_svfiprintf_r+0x1d2>
 80118ac:	4b21      	ldr	r3, [pc, #132]	@ (8011934 <_svfiprintf_r+0x1ec>)
 80118ae:	bb1b      	cbnz	r3, 80118f8 <_svfiprintf_r+0x1b0>
 80118b0:	9b03      	ldr	r3, [sp, #12]
 80118b2:	3307      	adds	r3, #7
 80118b4:	f023 0307 	bic.w	r3, r3, #7
 80118b8:	3308      	adds	r3, #8
 80118ba:	9303      	str	r3, [sp, #12]
 80118bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118be:	4433      	add	r3, r6
 80118c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80118c2:	e76a      	b.n	801179a <_svfiprintf_r+0x52>
 80118c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80118c8:	460c      	mov	r4, r1
 80118ca:	2001      	movs	r0, #1
 80118cc:	e7a8      	b.n	8011820 <_svfiprintf_r+0xd8>
 80118ce:	2300      	movs	r3, #0
 80118d0:	3401      	adds	r4, #1
 80118d2:	9305      	str	r3, [sp, #20]
 80118d4:	4619      	mov	r1, r3
 80118d6:	f04f 0c0a 	mov.w	ip, #10
 80118da:	4620      	mov	r0, r4
 80118dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118e0:	3a30      	subs	r2, #48	@ 0x30
 80118e2:	2a09      	cmp	r2, #9
 80118e4:	d903      	bls.n	80118ee <_svfiprintf_r+0x1a6>
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d0c6      	beq.n	8011878 <_svfiprintf_r+0x130>
 80118ea:	9105      	str	r1, [sp, #20]
 80118ec:	e7c4      	b.n	8011878 <_svfiprintf_r+0x130>
 80118ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80118f2:	4604      	mov	r4, r0
 80118f4:	2301      	movs	r3, #1
 80118f6:	e7f0      	b.n	80118da <_svfiprintf_r+0x192>
 80118f8:	ab03      	add	r3, sp, #12
 80118fa:	9300      	str	r3, [sp, #0]
 80118fc:	462a      	mov	r2, r5
 80118fe:	4b0e      	ldr	r3, [pc, #56]	@ (8011938 <_svfiprintf_r+0x1f0>)
 8011900:	a904      	add	r1, sp, #16
 8011902:	4638      	mov	r0, r7
 8011904:	f7fd ff2a 	bl	800f75c <_printf_float>
 8011908:	1c42      	adds	r2, r0, #1
 801190a:	4606      	mov	r6, r0
 801190c:	d1d6      	bne.n	80118bc <_svfiprintf_r+0x174>
 801190e:	89ab      	ldrh	r3, [r5, #12]
 8011910:	065b      	lsls	r3, r3, #25
 8011912:	f53f af2d 	bmi.w	8011770 <_svfiprintf_r+0x28>
 8011916:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011918:	e72c      	b.n	8011774 <_svfiprintf_r+0x2c>
 801191a:	ab03      	add	r3, sp, #12
 801191c:	9300      	str	r3, [sp, #0]
 801191e:	462a      	mov	r2, r5
 8011920:	4b05      	ldr	r3, [pc, #20]	@ (8011938 <_svfiprintf_r+0x1f0>)
 8011922:	a904      	add	r1, sp, #16
 8011924:	4638      	mov	r0, r7
 8011926:	f7fe f9b1 	bl	800fc8c <_printf_i>
 801192a:	e7ed      	b.n	8011908 <_svfiprintf_r+0x1c0>
 801192c:	08012d36 	.word	0x08012d36
 8011930:	08012d40 	.word	0x08012d40
 8011934:	0800f75d 	.word	0x0800f75d
 8011938:	08011691 	.word	0x08011691
 801193c:	08012d3c 	.word	0x08012d3c

08011940 <__sflush_r>:
 8011940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011948:	0716      	lsls	r6, r2, #28
 801194a:	4605      	mov	r5, r0
 801194c:	460c      	mov	r4, r1
 801194e:	d454      	bmi.n	80119fa <__sflush_r+0xba>
 8011950:	684b      	ldr	r3, [r1, #4]
 8011952:	2b00      	cmp	r3, #0
 8011954:	dc02      	bgt.n	801195c <__sflush_r+0x1c>
 8011956:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011958:	2b00      	cmp	r3, #0
 801195a:	dd48      	ble.n	80119ee <__sflush_r+0xae>
 801195c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801195e:	2e00      	cmp	r6, #0
 8011960:	d045      	beq.n	80119ee <__sflush_r+0xae>
 8011962:	2300      	movs	r3, #0
 8011964:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011968:	682f      	ldr	r7, [r5, #0]
 801196a:	6a21      	ldr	r1, [r4, #32]
 801196c:	602b      	str	r3, [r5, #0]
 801196e:	d030      	beq.n	80119d2 <__sflush_r+0x92>
 8011970:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011972:	89a3      	ldrh	r3, [r4, #12]
 8011974:	0759      	lsls	r1, r3, #29
 8011976:	d505      	bpl.n	8011984 <__sflush_r+0x44>
 8011978:	6863      	ldr	r3, [r4, #4]
 801197a:	1ad2      	subs	r2, r2, r3
 801197c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801197e:	b10b      	cbz	r3, 8011984 <__sflush_r+0x44>
 8011980:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011982:	1ad2      	subs	r2, r2, r3
 8011984:	2300      	movs	r3, #0
 8011986:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011988:	6a21      	ldr	r1, [r4, #32]
 801198a:	4628      	mov	r0, r5
 801198c:	47b0      	blx	r6
 801198e:	1c43      	adds	r3, r0, #1
 8011990:	89a3      	ldrh	r3, [r4, #12]
 8011992:	d106      	bne.n	80119a2 <__sflush_r+0x62>
 8011994:	6829      	ldr	r1, [r5, #0]
 8011996:	291d      	cmp	r1, #29
 8011998:	d82b      	bhi.n	80119f2 <__sflush_r+0xb2>
 801199a:	4a2a      	ldr	r2, [pc, #168]	@ (8011a44 <__sflush_r+0x104>)
 801199c:	40ca      	lsrs	r2, r1
 801199e:	07d6      	lsls	r6, r2, #31
 80119a0:	d527      	bpl.n	80119f2 <__sflush_r+0xb2>
 80119a2:	2200      	movs	r2, #0
 80119a4:	6062      	str	r2, [r4, #4]
 80119a6:	04d9      	lsls	r1, r3, #19
 80119a8:	6922      	ldr	r2, [r4, #16]
 80119aa:	6022      	str	r2, [r4, #0]
 80119ac:	d504      	bpl.n	80119b8 <__sflush_r+0x78>
 80119ae:	1c42      	adds	r2, r0, #1
 80119b0:	d101      	bne.n	80119b6 <__sflush_r+0x76>
 80119b2:	682b      	ldr	r3, [r5, #0]
 80119b4:	b903      	cbnz	r3, 80119b8 <__sflush_r+0x78>
 80119b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80119b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80119ba:	602f      	str	r7, [r5, #0]
 80119bc:	b1b9      	cbz	r1, 80119ee <__sflush_r+0xae>
 80119be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80119c2:	4299      	cmp	r1, r3
 80119c4:	d002      	beq.n	80119cc <__sflush_r+0x8c>
 80119c6:	4628      	mov	r0, r5
 80119c8:	f7ff fa9e 	bl	8010f08 <_free_r>
 80119cc:	2300      	movs	r3, #0
 80119ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80119d0:	e00d      	b.n	80119ee <__sflush_r+0xae>
 80119d2:	2301      	movs	r3, #1
 80119d4:	4628      	mov	r0, r5
 80119d6:	47b0      	blx	r6
 80119d8:	4602      	mov	r2, r0
 80119da:	1c50      	adds	r0, r2, #1
 80119dc:	d1c9      	bne.n	8011972 <__sflush_r+0x32>
 80119de:	682b      	ldr	r3, [r5, #0]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d0c6      	beq.n	8011972 <__sflush_r+0x32>
 80119e4:	2b1d      	cmp	r3, #29
 80119e6:	d001      	beq.n	80119ec <__sflush_r+0xac>
 80119e8:	2b16      	cmp	r3, #22
 80119ea:	d11e      	bne.n	8011a2a <__sflush_r+0xea>
 80119ec:	602f      	str	r7, [r5, #0]
 80119ee:	2000      	movs	r0, #0
 80119f0:	e022      	b.n	8011a38 <__sflush_r+0xf8>
 80119f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119f6:	b21b      	sxth	r3, r3
 80119f8:	e01b      	b.n	8011a32 <__sflush_r+0xf2>
 80119fa:	690f      	ldr	r7, [r1, #16]
 80119fc:	2f00      	cmp	r7, #0
 80119fe:	d0f6      	beq.n	80119ee <__sflush_r+0xae>
 8011a00:	0793      	lsls	r3, r2, #30
 8011a02:	680e      	ldr	r6, [r1, #0]
 8011a04:	bf08      	it	eq
 8011a06:	694b      	ldreq	r3, [r1, #20]
 8011a08:	600f      	str	r7, [r1, #0]
 8011a0a:	bf18      	it	ne
 8011a0c:	2300      	movne	r3, #0
 8011a0e:	eba6 0807 	sub.w	r8, r6, r7
 8011a12:	608b      	str	r3, [r1, #8]
 8011a14:	f1b8 0f00 	cmp.w	r8, #0
 8011a18:	dde9      	ble.n	80119ee <__sflush_r+0xae>
 8011a1a:	6a21      	ldr	r1, [r4, #32]
 8011a1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011a1e:	4643      	mov	r3, r8
 8011a20:	463a      	mov	r2, r7
 8011a22:	4628      	mov	r0, r5
 8011a24:	47b0      	blx	r6
 8011a26:	2800      	cmp	r0, #0
 8011a28:	dc08      	bgt.n	8011a3c <__sflush_r+0xfc>
 8011a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a32:	81a3      	strh	r3, [r4, #12]
 8011a34:	f04f 30ff 	mov.w	r0, #4294967295
 8011a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a3c:	4407      	add	r7, r0
 8011a3e:	eba8 0800 	sub.w	r8, r8, r0
 8011a42:	e7e7      	b.n	8011a14 <__sflush_r+0xd4>
 8011a44:	20400001 	.word	0x20400001

08011a48 <_fflush_r>:
 8011a48:	b538      	push	{r3, r4, r5, lr}
 8011a4a:	690b      	ldr	r3, [r1, #16]
 8011a4c:	4605      	mov	r5, r0
 8011a4e:	460c      	mov	r4, r1
 8011a50:	b913      	cbnz	r3, 8011a58 <_fflush_r+0x10>
 8011a52:	2500      	movs	r5, #0
 8011a54:	4628      	mov	r0, r5
 8011a56:	bd38      	pop	{r3, r4, r5, pc}
 8011a58:	b118      	cbz	r0, 8011a62 <_fflush_r+0x1a>
 8011a5a:	6a03      	ldr	r3, [r0, #32]
 8011a5c:	b90b      	cbnz	r3, 8011a62 <_fflush_r+0x1a>
 8011a5e:	f7fe fabf 	bl	800ffe0 <__sinit>
 8011a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d0f3      	beq.n	8011a52 <_fflush_r+0xa>
 8011a6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011a6c:	07d0      	lsls	r0, r2, #31
 8011a6e:	d404      	bmi.n	8011a7a <_fflush_r+0x32>
 8011a70:	0599      	lsls	r1, r3, #22
 8011a72:	d402      	bmi.n	8011a7a <_fflush_r+0x32>
 8011a74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a76:	f7fe fbdc 	bl	8010232 <__retarget_lock_acquire_recursive>
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	4621      	mov	r1, r4
 8011a7e:	f7ff ff5f 	bl	8011940 <__sflush_r>
 8011a82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011a84:	07da      	lsls	r2, r3, #31
 8011a86:	4605      	mov	r5, r0
 8011a88:	d4e4      	bmi.n	8011a54 <_fflush_r+0xc>
 8011a8a:	89a3      	ldrh	r3, [r4, #12]
 8011a8c:	059b      	lsls	r3, r3, #22
 8011a8e:	d4e1      	bmi.n	8011a54 <_fflush_r+0xc>
 8011a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a92:	f7fe fbcf 	bl	8010234 <__retarget_lock_release_recursive>
 8011a96:	e7dd      	b.n	8011a54 <_fflush_r+0xc>

08011a98 <memmove>:
 8011a98:	4288      	cmp	r0, r1
 8011a9a:	b510      	push	{r4, lr}
 8011a9c:	eb01 0402 	add.w	r4, r1, r2
 8011aa0:	d902      	bls.n	8011aa8 <memmove+0x10>
 8011aa2:	4284      	cmp	r4, r0
 8011aa4:	4623      	mov	r3, r4
 8011aa6:	d807      	bhi.n	8011ab8 <memmove+0x20>
 8011aa8:	1e43      	subs	r3, r0, #1
 8011aaa:	42a1      	cmp	r1, r4
 8011aac:	d008      	beq.n	8011ac0 <memmove+0x28>
 8011aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011ab6:	e7f8      	b.n	8011aaa <memmove+0x12>
 8011ab8:	4402      	add	r2, r0
 8011aba:	4601      	mov	r1, r0
 8011abc:	428a      	cmp	r2, r1
 8011abe:	d100      	bne.n	8011ac2 <memmove+0x2a>
 8011ac0:	bd10      	pop	{r4, pc}
 8011ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011aca:	e7f7      	b.n	8011abc <memmove+0x24>

08011acc <__assert_func>:
 8011acc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ace:	4614      	mov	r4, r2
 8011ad0:	461a      	mov	r2, r3
 8011ad2:	4b09      	ldr	r3, [pc, #36]	@ (8011af8 <__assert_func+0x2c>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	4605      	mov	r5, r0
 8011ad8:	68d8      	ldr	r0, [r3, #12]
 8011ada:	b14c      	cbz	r4, 8011af0 <__assert_func+0x24>
 8011adc:	4b07      	ldr	r3, [pc, #28]	@ (8011afc <__assert_func+0x30>)
 8011ade:	9100      	str	r1, [sp, #0]
 8011ae0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011ae4:	4906      	ldr	r1, [pc, #24]	@ (8011b00 <__assert_func+0x34>)
 8011ae6:	462b      	mov	r3, r5
 8011ae8:	f000 f870 	bl	8011bcc <fiprintf>
 8011aec:	f000 f880 	bl	8011bf0 <abort>
 8011af0:	4b04      	ldr	r3, [pc, #16]	@ (8011b04 <__assert_func+0x38>)
 8011af2:	461c      	mov	r4, r3
 8011af4:	e7f3      	b.n	8011ade <__assert_func+0x12>
 8011af6:	bf00      	nop
 8011af8:	20000038 	.word	0x20000038
 8011afc:	08012d51 	.word	0x08012d51
 8011b00:	08012d5e 	.word	0x08012d5e
 8011b04:	08012d8c 	.word	0x08012d8c

08011b08 <_calloc_r>:
 8011b08:	b570      	push	{r4, r5, r6, lr}
 8011b0a:	fba1 5402 	umull	r5, r4, r1, r2
 8011b0e:	b934      	cbnz	r4, 8011b1e <_calloc_r+0x16>
 8011b10:	4629      	mov	r1, r5
 8011b12:	f7fd fcf7 	bl	800f504 <_malloc_r>
 8011b16:	4606      	mov	r6, r0
 8011b18:	b928      	cbnz	r0, 8011b26 <_calloc_r+0x1e>
 8011b1a:	4630      	mov	r0, r6
 8011b1c:	bd70      	pop	{r4, r5, r6, pc}
 8011b1e:	220c      	movs	r2, #12
 8011b20:	6002      	str	r2, [r0, #0]
 8011b22:	2600      	movs	r6, #0
 8011b24:	e7f9      	b.n	8011b1a <_calloc_r+0x12>
 8011b26:	462a      	mov	r2, r5
 8011b28:	4621      	mov	r1, r4
 8011b2a:	f7fe faf4 	bl	8010116 <memset>
 8011b2e:	e7f4      	b.n	8011b1a <_calloc_r+0x12>

08011b30 <__ascii_mbtowc>:
 8011b30:	b082      	sub	sp, #8
 8011b32:	b901      	cbnz	r1, 8011b36 <__ascii_mbtowc+0x6>
 8011b34:	a901      	add	r1, sp, #4
 8011b36:	b142      	cbz	r2, 8011b4a <__ascii_mbtowc+0x1a>
 8011b38:	b14b      	cbz	r3, 8011b4e <__ascii_mbtowc+0x1e>
 8011b3a:	7813      	ldrb	r3, [r2, #0]
 8011b3c:	600b      	str	r3, [r1, #0]
 8011b3e:	7812      	ldrb	r2, [r2, #0]
 8011b40:	1e10      	subs	r0, r2, #0
 8011b42:	bf18      	it	ne
 8011b44:	2001      	movne	r0, #1
 8011b46:	b002      	add	sp, #8
 8011b48:	4770      	bx	lr
 8011b4a:	4610      	mov	r0, r2
 8011b4c:	e7fb      	b.n	8011b46 <__ascii_mbtowc+0x16>
 8011b4e:	f06f 0001 	mvn.w	r0, #1
 8011b52:	e7f8      	b.n	8011b46 <__ascii_mbtowc+0x16>

08011b54 <_realloc_r>:
 8011b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b58:	4607      	mov	r7, r0
 8011b5a:	4614      	mov	r4, r2
 8011b5c:	460d      	mov	r5, r1
 8011b5e:	b921      	cbnz	r1, 8011b6a <_realloc_r+0x16>
 8011b60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b64:	4611      	mov	r1, r2
 8011b66:	f7fd bccd 	b.w	800f504 <_malloc_r>
 8011b6a:	b92a      	cbnz	r2, 8011b78 <_realloc_r+0x24>
 8011b6c:	f7ff f9cc 	bl	8010f08 <_free_r>
 8011b70:	4625      	mov	r5, r4
 8011b72:	4628      	mov	r0, r5
 8011b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b78:	f000 f841 	bl	8011bfe <_malloc_usable_size_r>
 8011b7c:	4284      	cmp	r4, r0
 8011b7e:	4606      	mov	r6, r0
 8011b80:	d802      	bhi.n	8011b88 <_realloc_r+0x34>
 8011b82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011b86:	d8f4      	bhi.n	8011b72 <_realloc_r+0x1e>
 8011b88:	4621      	mov	r1, r4
 8011b8a:	4638      	mov	r0, r7
 8011b8c:	f7fd fcba 	bl	800f504 <_malloc_r>
 8011b90:	4680      	mov	r8, r0
 8011b92:	b908      	cbnz	r0, 8011b98 <_realloc_r+0x44>
 8011b94:	4645      	mov	r5, r8
 8011b96:	e7ec      	b.n	8011b72 <_realloc_r+0x1e>
 8011b98:	42b4      	cmp	r4, r6
 8011b9a:	4622      	mov	r2, r4
 8011b9c:	4629      	mov	r1, r5
 8011b9e:	bf28      	it	cs
 8011ba0:	4632      	movcs	r2, r6
 8011ba2:	f7fe fb48 	bl	8010236 <memcpy>
 8011ba6:	4629      	mov	r1, r5
 8011ba8:	4638      	mov	r0, r7
 8011baa:	f7ff f9ad 	bl	8010f08 <_free_r>
 8011bae:	e7f1      	b.n	8011b94 <_realloc_r+0x40>

08011bb0 <__ascii_wctomb>:
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	4608      	mov	r0, r1
 8011bb4:	b141      	cbz	r1, 8011bc8 <__ascii_wctomb+0x18>
 8011bb6:	2aff      	cmp	r2, #255	@ 0xff
 8011bb8:	d904      	bls.n	8011bc4 <__ascii_wctomb+0x14>
 8011bba:	228a      	movs	r2, #138	@ 0x8a
 8011bbc:	601a      	str	r2, [r3, #0]
 8011bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8011bc2:	4770      	bx	lr
 8011bc4:	700a      	strb	r2, [r1, #0]
 8011bc6:	2001      	movs	r0, #1
 8011bc8:	4770      	bx	lr
	...

08011bcc <fiprintf>:
 8011bcc:	b40e      	push	{r1, r2, r3}
 8011bce:	b503      	push	{r0, r1, lr}
 8011bd0:	4601      	mov	r1, r0
 8011bd2:	ab03      	add	r3, sp, #12
 8011bd4:	4805      	ldr	r0, [pc, #20]	@ (8011bec <fiprintf+0x20>)
 8011bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bda:	6800      	ldr	r0, [r0, #0]
 8011bdc:	9301      	str	r3, [sp, #4]
 8011bde:	f000 f83f 	bl	8011c60 <_vfiprintf_r>
 8011be2:	b002      	add	sp, #8
 8011be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011be8:	b003      	add	sp, #12
 8011bea:	4770      	bx	lr
 8011bec:	20000038 	.word	0x20000038

08011bf0 <abort>:
 8011bf0:	b508      	push	{r3, lr}
 8011bf2:	2006      	movs	r0, #6
 8011bf4:	f000 fa08 	bl	8012008 <raise>
 8011bf8:	2001      	movs	r0, #1
 8011bfa:	f7ef ff75 	bl	8001ae8 <_exit>

08011bfe <_malloc_usable_size_r>:
 8011bfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c02:	1f18      	subs	r0, r3, #4
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	bfbc      	itt	lt
 8011c08:	580b      	ldrlt	r3, [r1, r0]
 8011c0a:	18c0      	addlt	r0, r0, r3
 8011c0c:	4770      	bx	lr

08011c0e <__sfputc_r>:
 8011c0e:	6893      	ldr	r3, [r2, #8]
 8011c10:	3b01      	subs	r3, #1
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	b410      	push	{r4}
 8011c16:	6093      	str	r3, [r2, #8]
 8011c18:	da08      	bge.n	8011c2c <__sfputc_r+0x1e>
 8011c1a:	6994      	ldr	r4, [r2, #24]
 8011c1c:	42a3      	cmp	r3, r4
 8011c1e:	db01      	blt.n	8011c24 <__sfputc_r+0x16>
 8011c20:	290a      	cmp	r1, #10
 8011c22:	d103      	bne.n	8011c2c <__sfputc_r+0x1e>
 8011c24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c28:	f000 b932 	b.w	8011e90 <__swbuf_r>
 8011c2c:	6813      	ldr	r3, [r2, #0]
 8011c2e:	1c58      	adds	r0, r3, #1
 8011c30:	6010      	str	r0, [r2, #0]
 8011c32:	7019      	strb	r1, [r3, #0]
 8011c34:	4608      	mov	r0, r1
 8011c36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c3a:	4770      	bx	lr

08011c3c <__sfputs_r>:
 8011c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c3e:	4606      	mov	r6, r0
 8011c40:	460f      	mov	r7, r1
 8011c42:	4614      	mov	r4, r2
 8011c44:	18d5      	adds	r5, r2, r3
 8011c46:	42ac      	cmp	r4, r5
 8011c48:	d101      	bne.n	8011c4e <__sfputs_r+0x12>
 8011c4a:	2000      	movs	r0, #0
 8011c4c:	e007      	b.n	8011c5e <__sfputs_r+0x22>
 8011c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c52:	463a      	mov	r2, r7
 8011c54:	4630      	mov	r0, r6
 8011c56:	f7ff ffda 	bl	8011c0e <__sfputc_r>
 8011c5a:	1c43      	adds	r3, r0, #1
 8011c5c:	d1f3      	bne.n	8011c46 <__sfputs_r+0xa>
 8011c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011c60 <_vfiprintf_r>:
 8011c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c64:	460d      	mov	r5, r1
 8011c66:	b09d      	sub	sp, #116	@ 0x74
 8011c68:	4614      	mov	r4, r2
 8011c6a:	4698      	mov	r8, r3
 8011c6c:	4606      	mov	r6, r0
 8011c6e:	b118      	cbz	r0, 8011c78 <_vfiprintf_r+0x18>
 8011c70:	6a03      	ldr	r3, [r0, #32]
 8011c72:	b90b      	cbnz	r3, 8011c78 <_vfiprintf_r+0x18>
 8011c74:	f7fe f9b4 	bl	800ffe0 <__sinit>
 8011c78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c7a:	07d9      	lsls	r1, r3, #31
 8011c7c:	d405      	bmi.n	8011c8a <_vfiprintf_r+0x2a>
 8011c7e:	89ab      	ldrh	r3, [r5, #12]
 8011c80:	059a      	lsls	r2, r3, #22
 8011c82:	d402      	bmi.n	8011c8a <_vfiprintf_r+0x2a>
 8011c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c86:	f7fe fad4 	bl	8010232 <__retarget_lock_acquire_recursive>
 8011c8a:	89ab      	ldrh	r3, [r5, #12]
 8011c8c:	071b      	lsls	r3, r3, #28
 8011c8e:	d501      	bpl.n	8011c94 <_vfiprintf_r+0x34>
 8011c90:	692b      	ldr	r3, [r5, #16]
 8011c92:	b99b      	cbnz	r3, 8011cbc <_vfiprintf_r+0x5c>
 8011c94:	4629      	mov	r1, r5
 8011c96:	4630      	mov	r0, r6
 8011c98:	f000 f938 	bl	8011f0c <__swsetup_r>
 8011c9c:	b170      	cbz	r0, 8011cbc <_vfiprintf_r+0x5c>
 8011c9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ca0:	07dc      	lsls	r4, r3, #31
 8011ca2:	d504      	bpl.n	8011cae <_vfiprintf_r+0x4e>
 8011ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ca8:	b01d      	add	sp, #116	@ 0x74
 8011caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cae:	89ab      	ldrh	r3, [r5, #12]
 8011cb0:	0598      	lsls	r0, r3, #22
 8011cb2:	d4f7      	bmi.n	8011ca4 <_vfiprintf_r+0x44>
 8011cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011cb6:	f7fe fabd 	bl	8010234 <__retarget_lock_release_recursive>
 8011cba:	e7f3      	b.n	8011ca4 <_vfiprintf_r+0x44>
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cc0:	2320      	movs	r3, #32
 8011cc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011cc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8011cca:	2330      	movs	r3, #48	@ 0x30
 8011ccc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011e7c <_vfiprintf_r+0x21c>
 8011cd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011cd4:	f04f 0901 	mov.w	r9, #1
 8011cd8:	4623      	mov	r3, r4
 8011cda:	469a      	mov	sl, r3
 8011cdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ce0:	b10a      	cbz	r2, 8011ce6 <_vfiprintf_r+0x86>
 8011ce2:	2a25      	cmp	r2, #37	@ 0x25
 8011ce4:	d1f9      	bne.n	8011cda <_vfiprintf_r+0x7a>
 8011ce6:	ebba 0b04 	subs.w	fp, sl, r4
 8011cea:	d00b      	beq.n	8011d04 <_vfiprintf_r+0xa4>
 8011cec:	465b      	mov	r3, fp
 8011cee:	4622      	mov	r2, r4
 8011cf0:	4629      	mov	r1, r5
 8011cf2:	4630      	mov	r0, r6
 8011cf4:	f7ff ffa2 	bl	8011c3c <__sfputs_r>
 8011cf8:	3001      	adds	r0, #1
 8011cfa:	f000 80a7 	beq.w	8011e4c <_vfiprintf_r+0x1ec>
 8011cfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d00:	445a      	add	r2, fp
 8011d02:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d04:	f89a 3000 	ldrb.w	r3, [sl]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	f000 809f 	beq.w	8011e4c <_vfiprintf_r+0x1ec>
 8011d0e:	2300      	movs	r3, #0
 8011d10:	f04f 32ff 	mov.w	r2, #4294967295
 8011d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d18:	f10a 0a01 	add.w	sl, sl, #1
 8011d1c:	9304      	str	r3, [sp, #16]
 8011d1e:	9307      	str	r3, [sp, #28]
 8011d20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011d24:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d26:	4654      	mov	r4, sl
 8011d28:	2205      	movs	r2, #5
 8011d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d2e:	4853      	ldr	r0, [pc, #332]	@ (8011e7c <_vfiprintf_r+0x21c>)
 8011d30:	f7ee fa5e 	bl	80001f0 <memchr>
 8011d34:	9a04      	ldr	r2, [sp, #16]
 8011d36:	b9d8      	cbnz	r0, 8011d70 <_vfiprintf_r+0x110>
 8011d38:	06d1      	lsls	r1, r2, #27
 8011d3a:	bf44      	itt	mi
 8011d3c:	2320      	movmi	r3, #32
 8011d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d42:	0713      	lsls	r3, r2, #28
 8011d44:	bf44      	itt	mi
 8011d46:	232b      	movmi	r3, #43	@ 0x2b
 8011d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8011d50:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d52:	d015      	beq.n	8011d80 <_vfiprintf_r+0x120>
 8011d54:	9a07      	ldr	r2, [sp, #28]
 8011d56:	4654      	mov	r4, sl
 8011d58:	2000      	movs	r0, #0
 8011d5a:	f04f 0c0a 	mov.w	ip, #10
 8011d5e:	4621      	mov	r1, r4
 8011d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d64:	3b30      	subs	r3, #48	@ 0x30
 8011d66:	2b09      	cmp	r3, #9
 8011d68:	d94b      	bls.n	8011e02 <_vfiprintf_r+0x1a2>
 8011d6a:	b1b0      	cbz	r0, 8011d9a <_vfiprintf_r+0x13a>
 8011d6c:	9207      	str	r2, [sp, #28]
 8011d6e:	e014      	b.n	8011d9a <_vfiprintf_r+0x13a>
 8011d70:	eba0 0308 	sub.w	r3, r0, r8
 8011d74:	fa09 f303 	lsl.w	r3, r9, r3
 8011d78:	4313      	orrs	r3, r2
 8011d7a:	9304      	str	r3, [sp, #16]
 8011d7c:	46a2      	mov	sl, r4
 8011d7e:	e7d2      	b.n	8011d26 <_vfiprintf_r+0xc6>
 8011d80:	9b03      	ldr	r3, [sp, #12]
 8011d82:	1d19      	adds	r1, r3, #4
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	9103      	str	r1, [sp, #12]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	bfbb      	ittet	lt
 8011d8c:	425b      	neglt	r3, r3
 8011d8e:	f042 0202 	orrlt.w	r2, r2, #2
 8011d92:	9307      	strge	r3, [sp, #28]
 8011d94:	9307      	strlt	r3, [sp, #28]
 8011d96:	bfb8      	it	lt
 8011d98:	9204      	strlt	r2, [sp, #16]
 8011d9a:	7823      	ldrb	r3, [r4, #0]
 8011d9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d9e:	d10a      	bne.n	8011db6 <_vfiprintf_r+0x156>
 8011da0:	7863      	ldrb	r3, [r4, #1]
 8011da2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011da4:	d132      	bne.n	8011e0c <_vfiprintf_r+0x1ac>
 8011da6:	9b03      	ldr	r3, [sp, #12]
 8011da8:	1d1a      	adds	r2, r3, #4
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	9203      	str	r2, [sp, #12]
 8011dae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011db2:	3402      	adds	r4, #2
 8011db4:	9305      	str	r3, [sp, #20]
 8011db6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011e8c <_vfiprintf_r+0x22c>
 8011dba:	7821      	ldrb	r1, [r4, #0]
 8011dbc:	2203      	movs	r2, #3
 8011dbe:	4650      	mov	r0, sl
 8011dc0:	f7ee fa16 	bl	80001f0 <memchr>
 8011dc4:	b138      	cbz	r0, 8011dd6 <_vfiprintf_r+0x176>
 8011dc6:	9b04      	ldr	r3, [sp, #16]
 8011dc8:	eba0 000a 	sub.w	r0, r0, sl
 8011dcc:	2240      	movs	r2, #64	@ 0x40
 8011dce:	4082      	lsls	r2, r0
 8011dd0:	4313      	orrs	r3, r2
 8011dd2:	3401      	adds	r4, #1
 8011dd4:	9304      	str	r3, [sp, #16]
 8011dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dda:	4829      	ldr	r0, [pc, #164]	@ (8011e80 <_vfiprintf_r+0x220>)
 8011ddc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011de0:	2206      	movs	r2, #6
 8011de2:	f7ee fa05 	bl	80001f0 <memchr>
 8011de6:	2800      	cmp	r0, #0
 8011de8:	d03f      	beq.n	8011e6a <_vfiprintf_r+0x20a>
 8011dea:	4b26      	ldr	r3, [pc, #152]	@ (8011e84 <_vfiprintf_r+0x224>)
 8011dec:	bb1b      	cbnz	r3, 8011e36 <_vfiprintf_r+0x1d6>
 8011dee:	9b03      	ldr	r3, [sp, #12]
 8011df0:	3307      	adds	r3, #7
 8011df2:	f023 0307 	bic.w	r3, r3, #7
 8011df6:	3308      	adds	r3, #8
 8011df8:	9303      	str	r3, [sp, #12]
 8011dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dfc:	443b      	add	r3, r7
 8011dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e00:	e76a      	b.n	8011cd8 <_vfiprintf_r+0x78>
 8011e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e06:	460c      	mov	r4, r1
 8011e08:	2001      	movs	r0, #1
 8011e0a:	e7a8      	b.n	8011d5e <_vfiprintf_r+0xfe>
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	3401      	adds	r4, #1
 8011e10:	9305      	str	r3, [sp, #20]
 8011e12:	4619      	mov	r1, r3
 8011e14:	f04f 0c0a 	mov.w	ip, #10
 8011e18:	4620      	mov	r0, r4
 8011e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e1e:	3a30      	subs	r2, #48	@ 0x30
 8011e20:	2a09      	cmp	r2, #9
 8011e22:	d903      	bls.n	8011e2c <_vfiprintf_r+0x1cc>
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d0c6      	beq.n	8011db6 <_vfiprintf_r+0x156>
 8011e28:	9105      	str	r1, [sp, #20]
 8011e2a:	e7c4      	b.n	8011db6 <_vfiprintf_r+0x156>
 8011e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e30:	4604      	mov	r4, r0
 8011e32:	2301      	movs	r3, #1
 8011e34:	e7f0      	b.n	8011e18 <_vfiprintf_r+0x1b8>
 8011e36:	ab03      	add	r3, sp, #12
 8011e38:	9300      	str	r3, [sp, #0]
 8011e3a:	462a      	mov	r2, r5
 8011e3c:	4b12      	ldr	r3, [pc, #72]	@ (8011e88 <_vfiprintf_r+0x228>)
 8011e3e:	a904      	add	r1, sp, #16
 8011e40:	4630      	mov	r0, r6
 8011e42:	f7fd fc8b 	bl	800f75c <_printf_float>
 8011e46:	4607      	mov	r7, r0
 8011e48:	1c78      	adds	r0, r7, #1
 8011e4a:	d1d6      	bne.n	8011dfa <_vfiprintf_r+0x19a>
 8011e4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e4e:	07d9      	lsls	r1, r3, #31
 8011e50:	d405      	bmi.n	8011e5e <_vfiprintf_r+0x1fe>
 8011e52:	89ab      	ldrh	r3, [r5, #12]
 8011e54:	059a      	lsls	r2, r3, #22
 8011e56:	d402      	bmi.n	8011e5e <_vfiprintf_r+0x1fe>
 8011e58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e5a:	f7fe f9eb 	bl	8010234 <__retarget_lock_release_recursive>
 8011e5e:	89ab      	ldrh	r3, [r5, #12]
 8011e60:	065b      	lsls	r3, r3, #25
 8011e62:	f53f af1f 	bmi.w	8011ca4 <_vfiprintf_r+0x44>
 8011e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e68:	e71e      	b.n	8011ca8 <_vfiprintf_r+0x48>
 8011e6a:	ab03      	add	r3, sp, #12
 8011e6c:	9300      	str	r3, [sp, #0]
 8011e6e:	462a      	mov	r2, r5
 8011e70:	4b05      	ldr	r3, [pc, #20]	@ (8011e88 <_vfiprintf_r+0x228>)
 8011e72:	a904      	add	r1, sp, #16
 8011e74:	4630      	mov	r0, r6
 8011e76:	f7fd ff09 	bl	800fc8c <_printf_i>
 8011e7a:	e7e4      	b.n	8011e46 <_vfiprintf_r+0x1e6>
 8011e7c:	08012d36 	.word	0x08012d36
 8011e80:	08012d40 	.word	0x08012d40
 8011e84:	0800f75d 	.word	0x0800f75d
 8011e88:	08011c3d 	.word	0x08011c3d
 8011e8c:	08012d3c 	.word	0x08012d3c

08011e90 <__swbuf_r>:
 8011e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e92:	460e      	mov	r6, r1
 8011e94:	4614      	mov	r4, r2
 8011e96:	4605      	mov	r5, r0
 8011e98:	b118      	cbz	r0, 8011ea2 <__swbuf_r+0x12>
 8011e9a:	6a03      	ldr	r3, [r0, #32]
 8011e9c:	b90b      	cbnz	r3, 8011ea2 <__swbuf_r+0x12>
 8011e9e:	f7fe f89f 	bl	800ffe0 <__sinit>
 8011ea2:	69a3      	ldr	r3, [r4, #24]
 8011ea4:	60a3      	str	r3, [r4, #8]
 8011ea6:	89a3      	ldrh	r3, [r4, #12]
 8011ea8:	071a      	lsls	r2, r3, #28
 8011eaa:	d501      	bpl.n	8011eb0 <__swbuf_r+0x20>
 8011eac:	6923      	ldr	r3, [r4, #16]
 8011eae:	b943      	cbnz	r3, 8011ec2 <__swbuf_r+0x32>
 8011eb0:	4621      	mov	r1, r4
 8011eb2:	4628      	mov	r0, r5
 8011eb4:	f000 f82a 	bl	8011f0c <__swsetup_r>
 8011eb8:	b118      	cbz	r0, 8011ec2 <__swbuf_r+0x32>
 8011eba:	f04f 37ff 	mov.w	r7, #4294967295
 8011ebe:	4638      	mov	r0, r7
 8011ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ec2:	6823      	ldr	r3, [r4, #0]
 8011ec4:	6922      	ldr	r2, [r4, #16]
 8011ec6:	1a98      	subs	r0, r3, r2
 8011ec8:	6963      	ldr	r3, [r4, #20]
 8011eca:	b2f6      	uxtb	r6, r6
 8011ecc:	4283      	cmp	r3, r0
 8011ece:	4637      	mov	r7, r6
 8011ed0:	dc05      	bgt.n	8011ede <__swbuf_r+0x4e>
 8011ed2:	4621      	mov	r1, r4
 8011ed4:	4628      	mov	r0, r5
 8011ed6:	f7ff fdb7 	bl	8011a48 <_fflush_r>
 8011eda:	2800      	cmp	r0, #0
 8011edc:	d1ed      	bne.n	8011eba <__swbuf_r+0x2a>
 8011ede:	68a3      	ldr	r3, [r4, #8]
 8011ee0:	3b01      	subs	r3, #1
 8011ee2:	60a3      	str	r3, [r4, #8]
 8011ee4:	6823      	ldr	r3, [r4, #0]
 8011ee6:	1c5a      	adds	r2, r3, #1
 8011ee8:	6022      	str	r2, [r4, #0]
 8011eea:	701e      	strb	r6, [r3, #0]
 8011eec:	6962      	ldr	r2, [r4, #20]
 8011eee:	1c43      	adds	r3, r0, #1
 8011ef0:	429a      	cmp	r2, r3
 8011ef2:	d004      	beq.n	8011efe <__swbuf_r+0x6e>
 8011ef4:	89a3      	ldrh	r3, [r4, #12]
 8011ef6:	07db      	lsls	r3, r3, #31
 8011ef8:	d5e1      	bpl.n	8011ebe <__swbuf_r+0x2e>
 8011efa:	2e0a      	cmp	r6, #10
 8011efc:	d1df      	bne.n	8011ebe <__swbuf_r+0x2e>
 8011efe:	4621      	mov	r1, r4
 8011f00:	4628      	mov	r0, r5
 8011f02:	f7ff fda1 	bl	8011a48 <_fflush_r>
 8011f06:	2800      	cmp	r0, #0
 8011f08:	d0d9      	beq.n	8011ebe <__swbuf_r+0x2e>
 8011f0a:	e7d6      	b.n	8011eba <__swbuf_r+0x2a>

08011f0c <__swsetup_r>:
 8011f0c:	b538      	push	{r3, r4, r5, lr}
 8011f0e:	4b29      	ldr	r3, [pc, #164]	@ (8011fb4 <__swsetup_r+0xa8>)
 8011f10:	4605      	mov	r5, r0
 8011f12:	6818      	ldr	r0, [r3, #0]
 8011f14:	460c      	mov	r4, r1
 8011f16:	b118      	cbz	r0, 8011f20 <__swsetup_r+0x14>
 8011f18:	6a03      	ldr	r3, [r0, #32]
 8011f1a:	b90b      	cbnz	r3, 8011f20 <__swsetup_r+0x14>
 8011f1c:	f7fe f860 	bl	800ffe0 <__sinit>
 8011f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f24:	0719      	lsls	r1, r3, #28
 8011f26:	d422      	bmi.n	8011f6e <__swsetup_r+0x62>
 8011f28:	06da      	lsls	r2, r3, #27
 8011f2a:	d407      	bmi.n	8011f3c <__swsetup_r+0x30>
 8011f2c:	2209      	movs	r2, #9
 8011f2e:	602a      	str	r2, [r5, #0]
 8011f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f34:	81a3      	strh	r3, [r4, #12]
 8011f36:	f04f 30ff 	mov.w	r0, #4294967295
 8011f3a:	e033      	b.n	8011fa4 <__swsetup_r+0x98>
 8011f3c:	0758      	lsls	r0, r3, #29
 8011f3e:	d512      	bpl.n	8011f66 <__swsetup_r+0x5a>
 8011f40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011f42:	b141      	cbz	r1, 8011f56 <__swsetup_r+0x4a>
 8011f44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f48:	4299      	cmp	r1, r3
 8011f4a:	d002      	beq.n	8011f52 <__swsetup_r+0x46>
 8011f4c:	4628      	mov	r0, r5
 8011f4e:	f7fe ffdb 	bl	8010f08 <_free_r>
 8011f52:	2300      	movs	r3, #0
 8011f54:	6363      	str	r3, [r4, #52]	@ 0x34
 8011f56:	89a3      	ldrh	r3, [r4, #12]
 8011f58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011f5c:	81a3      	strh	r3, [r4, #12]
 8011f5e:	2300      	movs	r3, #0
 8011f60:	6063      	str	r3, [r4, #4]
 8011f62:	6923      	ldr	r3, [r4, #16]
 8011f64:	6023      	str	r3, [r4, #0]
 8011f66:	89a3      	ldrh	r3, [r4, #12]
 8011f68:	f043 0308 	orr.w	r3, r3, #8
 8011f6c:	81a3      	strh	r3, [r4, #12]
 8011f6e:	6923      	ldr	r3, [r4, #16]
 8011f70:	b94b      	cbnz	r3, 8011f86 <__swsetup_r+0x7a>
 8011f72:	89a3      	ldrh	r3, [r4, #12]
 8011f74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011f7c:	d003      	beq.n	8011f86 <__swsetup_r+0x7a>
 8011f7e:	4621      	mov	r1, r4
 8011f80:	4628      	mov	r0, r5
 8011f82:	f000 f883 	bl	801208c <__smakebuf_r>
 8011f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f8a:	f013 0201 	ands.w	r2, r3, #1
 8011f8e:	d00a      	beq.n	8011fa6 <__swsetup_r+0x9a>
 8011f90:	2200      	movs	r2, #0
 8011f92:	60a2      	str	r2, [r4, #8]
 8011f94:	6962      	ldr	r2, [r4, #20]
 8011f96:	4252      	negs	r2, r2
 8011f98:	61a2      	str	r2, [r4, #24]
 8011f9a:	6922      	ldr	r2, [r4, #16]
 8011f9c:	b942      	cbnz	r2, 8011fb0 <__swsetup_r+0xa4>
 8011f9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011fa2:	d1c5      	bne.n	8011f30 <__swsetup_r+0x24>
 8011fa4:	bd38      	pop	{r3, r4, r5, pc}
 8011fa6:	0799      	lsls	r1, r3, #30
 8011fa8:	bf58      	it	pl
 8011faa:	6962      	ldrpl	r2, [r4, #20]
 8011fac:	60a2      	str	r2, [r4, #8]
 8011fae:	e7f4      	b.n	8011f9a <__swsetup_r+0x8e>
 8011fb0:	2000      	movs	r0, #0
 8011fb2:	e7f7      	b.n	8011fa4 <__swsetup_r+0x98>
 8011fb4:	20000038 	.word	0x20000038

08011fb8 <_raise_r>:
 8011fb8:	291f      	cmp	r1, #31
 8011fba:	b538      	push	{r3, r4, r5, lr}
 8011fbc:	4605      	mov	r5, r0
 8011fbe:	460c      	mov	r4, r1
 8011fc0:	d904      	bls.n	8011fcc <_raise_r+0x14>
 8011fc2:	2316      	movs	r3, #22
 8011fc4:	6003      	str	r3, [r0, #0]
 8011fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8011fca:	bd38      	pop	{r3, r4, r5, pc}
 8011fcc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011fce:	b112      	cbz	r2, 8011fd6 <_raise_r+0x1e>
 8011fd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011fd4:	b94b      	cbnz	r3, 8011fea <_raise_r+0x32>
 8011fd6:	4628      	mov	r0, r5
 8011fd8:	f000 f830 	bl	801203c <_getpid_r>
 8011fdc:	4622      	mov	r2, r4
 8011fde:	4601      	mov	r1, r0
 8011fe0:	4628      	mov	r0, r5
 8011fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011fe6:	f000 b817 	b.w	8012018 <_kill_r>
 8011fea:	2b01      	cmp	r3, #1
 8011fec:	d00a      	beq.n	8012004 <_raise_r+0x4c>
 8011fee:	1c59      	adds	r1, r3, #1
 8011ff0:	d103      	bne.n	8011ffa <_raise_r+0x42>
 8011ff2:	2316      	movs	r3, #22
 8011ff4:	6003      	str	r3, [r0, #0]
 8011ff6:	2001      	movs	r0, #1
 8011ff8:	e7e7      	b.n	8011fca <_raise_r+0x12>
 8011ffa:	2100      	movs	r1, #0
 8011ffc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012000:	4620      	mov	r0, r4
 8012002:	4798      	blx	r3
 8012004:	2000      	movs	r0, #0
 8012006:	e7e0      	b.n	8011fca <_raise_r+0x12>

08012008 <raise>:
 8012008:	4b02      	ldr	r3, [pc, #8]	@ (8012014 <raise+0xc>)
 801200a:	4601      	mov	r1, r0
 801200c:	6818      	ldr	r0, [r3, #0]
 801200e:	f7ff bfd3 	b.w	8011fb8 <_raise_r>
 8012012:	bf00      	nop
 8012014:	20000038 	.word	0x20000038

08012018 <_kill_r>:
 8012018:	b538      	push	{r3, r4, r5, lr}
 801201a:	4d07      	ldr	r5, [pc, #28]	@ (8012038 <_kill_r+0x20>)
 801201c:	2300      	movs	r3, #0
 801201e:	4604      	mov	r4, r0
 8012020:	4608      	mov	r0, r1
 8012022:	4611      	mov	r1, r2
 8012024:	602b      	str	r3, [r5, #0]
 8012026:	f7ef fd4f 	bl	8001ac8 <_kill>
 801202a:	1c43      	adds	r3, r0, #1
 801202c:	d102      	bne.n	8012034 <_kill_r+0x1c>
 801202e:	682b      	ldr	r3, [r5, #0]
 8012030:	b103      	cbz	r3, 8012034 <_kill_r+0x1c>
 8012032:	6023      	str	r3, [r4, #0]
 8012034:	bd38      	pop	{r3, r4, r5, pc}
 8012036:	bf00      	nop
 8012038:	200031d4 	.word	0x200031d4

0801203c <_getpid_r>:
 801203c:	f7ef bd3c 	b.w	8001ab8 <_getpid>

08012040 <__swhatbuf_r>:
 8012040:	b570      	push	{r4, r5, r6, lr}
 8012042:	460c      	mov	r4, r1
 8012044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012048:	2900      	cmp	r1, #0
 801204a:	b096      	sub	sp, #88	@ 0x58
 801204c:	4615      	mov	r5, r2
 801204e:	461e      	mov	r6, r3
 8012050:	da0d      	bge.n	801206e <__swhatbuf_r+0x2e>
 8012052:	89a3      	ldrh	r3, [r4, #12]
 8012054:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012058:	f04f 0100 	mov.w	r1, #0
 801205c:	bf14      	ite	ne
 801205e:	2340      	movne	r3, #64	@ 0x40
 8012060:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012064:	2000      	movs	r0, #0
 8012066:	6031      	str	r1, [r6, #0]
 8012068:	602b      	str	r3, [r5, #0]
 801206a:	b016      	add	sp, #88	@ 0x58
 801206c:	bd70      	pop	{r4, r5, r6, pc}
 801206e:	466a      	mov	r2, sp
 8012070:	f000 f848 	bl	8012104 <_fstat_r>
 8012074:	2800      	cmp	r0, #0
 8012076:	dbec      	blt.n	8012052 <__swhatbuf_r+0x12>
 8012078:	9901      	ldr	r1, [sp, #4]
 801207a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801207e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012082:	4259      	negs	r1, r3
 8012084:	4159      	adcs	r1, r3
 8012086:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801208a:	e7eb      	b.n	8012064 <__swhatbuf_r+0x24>

0801208c <__smakebuf_r>:
 801208c:	898b      	ldrh	r3, [r1, #12]
 801208e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012090:	079d      	lsls	r5, r3, #30
 8012092:	4606      	mov	r6, r0
 8012094:	460c      	mov	r4, r1
 8012096:	d507      	bpl.n	80120a8 <__smakebuf_r+0x1c>
 8012098:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801209c:	6023      	str	r3, [r4, #0]
 801209e:	6123      	str	r3, [r4, #16]
 80120a0:	2301      	movs	r3, #1
 80120a2:	6163      	str	r3, [r4, #20]
 80120a4:	b003      	add	sp, #12
 80120a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120a8:	ab01      	add	r3, sp, #4
 80120aa:	466a      	mov	r2, sp
 80120ac:	f7ff ffc8 	bl	8012040 <__swhatbuf_r>
 80120b0:	9f00      	ldr	r7, [sp, #0]
 80120b2:	4605      	mov	r5, r0
 80120b4:	4639      	mov	r1, r7
 80120b6:	4630      	mov	r0, r6
 80120b8:	f7fd fa24 	bl	800f504 <_malloc_r>
 80120bc:	b948      	cbnz	r0, 80120d2 <__smakebuf_r+0x46>
 80120be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120c2:	059a      	lsls	r2, r3, #22
 80120c4:	d4ee      	bmi.n	80120a4 <__smakebuf_r+0x18>
 80120c6:	f023 0303 	bic.w	r3, r3, #3
 80120ca:	f043 0302 	orr.w	r3, r3, #2
 80120ce:	81a3      	strh	r3, [r4, #12]
 80120d0:	e7e2      	b.n	8012098 <__smakebuf_r+0xc>
 80120d2:	89a3      	ldrh	r3, [r4, #12]
 80120d4:	6020      	str	r0, [r4, #0]
 80120d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120da:	81a3      	strh	r3, [r4, #12]
 80120dc:	9b01      	ldr	r3, [sp, #4]
 80120de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80120e2:	b15b      	cbz	r3, 80120fc <__smakebuf_r+0x70>
 80120e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120e8:	4630      	mov	r0, r6
 80120ea:	f000 f81d 	bl	8012128 <_isatty_r>
 80120ee:	b128      	cbz	r0, 80120fc <__smakebuf_r+0x70>
 80120f0:	89a3      	ldrh	r3, [r4, #12]
 80120f2:	f023 0303 	bic.w	r3, r3, #3
 80120f6:	f043 0301 	orr.w	r3, r3, #1
 80120fa:	81a3      	strh	r3, [r4, #12]
 80120fc:	89a3      	ldrh	r3, [r4, #12]
 80120fe:	431d      	orrs	r5, r3
 8012100:	81a5      	strh	r5, [r4, #12]
 8012102:	e7cf      	b.n	80120a4 <__smakebuf_r+0x18>

08012104 <_fstat_r>:
 8012104:	b538      	push	{r3, r4, r5, lr}
 8012106:	4d07      	ldr	r5, [pc, #28]	@ (8012124 <_fstat_r+0x20>)
 8012108:	2300      	movs	r3, #0
 801210a:	4604      	mov	r4, r0
 801210c:	4608      	mov	r0, r1
 801210e:	4611      	mov	r1, r2
 8012110:	602b      	str	r3, [r5, #0]
 8012112:	f7ef fd39 	bl	8001b88 <_fstat>
 8012116:	1c43      	adds	r3, r0, #1
 8012118:	d102      	bne.n	8012120 <_fstat_r+0x1c>
 801211a:	682b      	ldr	r3, [r5, #0]
 801211c:	b103      	cbz	r3, 8012120 <_fstat_r+0x1c>
 801211e:	6023      	str	r3, [r4, #0]
 8012120:	bd38      	pop	{r3, r4, r5, pc}
 8012122:	bf00      	nop
 8012124:	200031d4 	.word	0x200031d4

08012128 <_isatty_r>:
 8012128:	b538      	push	{r3, r4, r5, lr}
 801212a:	4d06      	ldr	r5, [pc, #24]	@ (8012144 <_isatty_r+0x1c>)
 801212c:	2300      	movs	r3, #0
 801212e:	4604      	mov	r4, r0
 8012130:	4608      	mov	r0, r1
 8012132:	602b      	str	r3, [r5, #0]
 8012134:	f7ef fd38 	bl	8001ba8 <_isatty>
 8012138:	1c43      	adds	r3, r0, #1
 801213a:	d102      	bne.n	8012142 <_isatty_r+0x1a>
 801213c:	682b      	ldr	r3, [r5, #0]
 801213e:	b103      	cbz	r3, 8012142 <_isatty_r+0x1a>
 8012140:	6023      	str	r3, [r4, #0]
 8012142:	bd38      	pop	{r3, r4, r5, pc}
 8012144:	200031d4 	.word	0x200031d4

08012148 <_init>:
 8012148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801214a:	bf00      	nop
 801214c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801214e:	bc08      	pop	{r3}
 8012150:	469e      	mov	lr, r3
 8012152:	4770      	bx	lr

08012154 <_fini>:
 8012154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012156:	bf00      	nop
 8012158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801215a:	bc08      	pop	{r3}
 801215c:	469e      	mov	lr, r3
 801215e:	4770      	bx	lr
