
BluePill_ILI9341_TFT_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073a4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027e4  080074b8  080074b8  000084b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c9c  08009c9c  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009c9c  08009c9c  0000ac9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ca4  08009ca4  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ca4  08009ca4  0000aca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ca8  08009ca8  0000aca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009cac  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200001d8  08009e84  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08009e84  0000b410  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007426  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c87  00000000  00000000  00012627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  000142b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fc  00000000  00000000  00014ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f6e  00000000  00000000  000150d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0a7  00000000  00000000  0002d042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083be3  00000000  00000000  000370e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000baccc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b0  00000000  00000000  000bad10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000bdec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800749c 	.word	0x0800749c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800749c 	.word	0x0800749c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__gesf2>:
 8000ca4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ca8:	e006      	b.n	8000cb8 <__cmpsf2+0x4>
 8000caa:	bf00      	nop

08000cac <__lesf2>:
 8000cac:	f04f 0c01 	mov.w	ip, #1
 8000cb0:	e002      	b.n	8000cb8 <__cmpsf2+0x4>
 8000cb2:	bf00      	nop

08000cb4 <__cmpsf2>:
 8000cb4:	f04f 0c01 	mov.w	ip, #1
 8000cb8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cbc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc8:	bf18      	it	ne
 8000cca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cce:	d011      	beq.n	8000cf4 <__cmpsf2+0x40>
 8000cd0:	b001      	add	sp, #4
 8000cd2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cd6:	bf18      	it	ne
 8000cd8:	ea90 0f01 	teqne	r0, r1
 8000cdc:	bf58      	it	pl
 8000cde:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ce2:	bf88      	it	hi
 8000ce4:	17c8      	asrhi	r0, r1, #31
 8000ce6:	bf38      	it	cc
 8000ce8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cec:	bf18      	it	ne
 8000cee:	f040 0001 	orrne.w	r0, r0, #1
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	d102      	bne.n	8000d00 <__cmpsf2+0x4c>
 8000cfa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cfe:	d105      	bne.n	8000d0c <__cmpsf2+0x58>
 8000d00:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d04:	d1e4      	bne.n	8000cd0 <__cmpsf2+0x1c>
 8000d06:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d0a:	d0e1      	beq.n	8000cd0 <__cmpsf2+0x1c>
 8000d0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <__aeabi_cfrcmple>:
 8000d14:	4684      	mov	ip, r0
 8000d16:	4608      	mov	r0, r1
 8000d18:	4661      	mov	r1, ip
 8000d1a:	e7ff      	b.n	8000d1c <__aeabi_cfcmpeq>

08000d1c <__aeabi_cfcmpeq>:
 8000d1c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d1e:	f7ff ffc9 	bl	8000cb4 <__cmpsf2>
 8000d22:	2800      	cmp	r0, #0
 8000d24:	bf48      	it	mi
 8000d26:	f110 0f00 	cmnmi.w	r0, #0
 8000d2a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d2c <__aeabi_fcmpeq>:
 8000d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d30:	f7ff fff4 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d34:	bf0c      	ite	eq
 8000d36:	2001      	moveq	r0, #1
 8000d38:	2000      	movne	r0, #0
 8000d3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3e:	bf00      	nop

08000d40 <__aeabi_fcmplt>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff ffea 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d48:	bf34      	ite	cc
 8000d4a:	2001      	movcc	r0, #1
 8000d4c:	2000      	movcs	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_fcmple>:
 8000d54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d58:	f7ff ffe0 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d5c:	bf94      	ite	ls
 8000d5e:	2001      	movls	r0, #1
 8000d60:	2000      	movhi	r0, #0
 8000d62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d66:	bf00      	nop

08000d68 <__aeabi_fcmpge>:
 8000d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d6c:	f7ff ffd2 	bl	8000d14 <__aeabi_cfrcmple>
 8000d70:	bf94      	ite	ls
 8000d72:	2001      	movls	r0, #1
 8000d74:	2000      	movhi	r0, #0
 8000d76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7a:	bf00      	nop

08000d7c <__aeabi_fcmpgt>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff ffc8 	bl	8000d14 <__aeabi_cfrcmple>
 8000d84:	bf34      	ite	cc
 8000d86:	2001      	movcc	r0, #1
 8000d88:	2000      	movcs	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <ILI9341_DrawHollowCircle>:
	us *= (SystemCoreClock / 1000000);
	while (us--);
}

void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b089      	sub	sp, #36	@ 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4604      	mov	r4, r0
 8000d98:	4608      	mov	r0, r1
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4623      	mov	r3, r4
 8000da0:	80fb      	strh	r3, [r7, #6]
 8000da2:	4603      	mov	r3, r0
 8000da4:	80bb      	strh	r3, [r7, #4]
 8000da6:	460b      	mov	r3, r1
 8000da8:	807b      	strh	r3, [r7, #2]
 8000daa:	4613      	mov	r3, r2
 8000dac:	803b      	strh	r3, [r7, #0]
	int x = radius-1;
 8000dae:	887b      	ldrh	r3, [r7, #2]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	61fb      	str	r3, [r7, #28]
	int y = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
	int dx = 1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
	int dy = 1;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
	int err = dx - (radius << 1);
 8000dc0:	887b      	ldrh	r3, [r7, #2]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	60fb      	str	r3, [r7, #12]

	while (x >= y)
 8000dca:	e08d      	b.n	8000ee8 <ILI9341_DrawHollowCircle+0x158>
	{
		ILI9341_DrawPixel(X + x, Y + y, color);
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b298      	uxth	r0, r3
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	883a      	ldrh	r2, [r7, #0]
 8000de2:	4619      	mov	r1, r3
 8000de4:	f000 fde0 	bl	80019a8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y + x, color);
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	4413      	add	r3, r2
 8000df0:	b298      	uxth	r0, r3
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	88bb      	ldrh	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	883a      	ldrh	r2, [r7, #0]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f000 fdd2 	bl	80019a8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y + x, color);
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	88fa      	ldrh	r2, [r7, #6]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	b298      	uxth	r0, r3
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	88bb      	ldrh	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	883a      	ldrh	r2, [r7, #0]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f000 fdc4 	bl	80019a8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y + y, color);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	88fa      	ldrh	r2, [r7, #6]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	b298      	uxth	r0, r3
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	88bb      	ldrh	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	883a      	ldrh	r2, [r7, #0]
 8000e36:	4619      	mov	r1, r3
 8000e38:	f000 fdb6 	bl	80019a8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y - y, color);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	88fa      	ldrh	r2, [r7, #6]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	b298      	uxth	r0, r3
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	88ba      	ldrh	r2, [r7, #4]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	883a      	ldrh	r2, [r7, #0]
 8000e52:	4619      	mov	r1, r3
 8000e54:	f000 fda8 	bl	80019a8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y - x, color);
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	88fa      	ldrh	r2, [r7, #6]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	b298      	uxth	r0, r3
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	88ba      	ldrh	r2, [r7, #4]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	883a      	ldrh	r2, [r7, #0]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f000 fd9a 	bl	80019a8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y - x, color);
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	b298      	uxth	r0, r3
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	88ba      	ldrh	r2, [r7, #4]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	883a      	ldrh	r2, [r7, #0]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f000 fd8c 	bl	80019a8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + x, Y - y, color);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	4413      	add	r3, r2
 8000e98:	b298      	uxth	r0, r3
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	88ba      	ldrh	r2, [r7, #4]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	883a      	ldrh	r2, [r7, #0]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f000 fd7e 	bl	80019a8 <ILI9341_DrawPixel>

		if (err <= 0)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	dc09      	bgt.n	8000ec6 <ILI9341_DrawHollowCircle+0x136>
		{
			y++;
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	61bb      	str	r3, [r7, #24]
			err += dy;
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]
			dy += 2;
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	613b      	str	r3, [r7, #16]
		}

		if (err > 0)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	dd0d      	ble.n	8000ee8 <ILI9341_DrawHollowCircle+0x158>
		{
			x--;
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	61fb      	str	r3, [r7, #28]
			dx += 2;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	617b      	str	r3, [r7, #20]
			err += (-radius << 1) + dx;
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	425b      	negs	r3, r3
 8000edc:	005a      	lsls	r2, r3, #1
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
	while (x >= y)
 8000ee8:	69fa      	ldr	r2, [r7, #28]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	f6bf af6d 	bge.w	8000dcc <ILI9341_DrawHollowCircle+0x3c>
		}
	}
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	3724      	adds	r7, #36	@ 0x24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd90      	pop	{r4, r7, pc}

08000efc <ILI9341_DrawFilledCircle>:

void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b08b      	sub	sp, #44	@ 0x2c
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4604      	mov	r4, r0
 8000f04:	4608      	mov	r0, r1
 8000f06:	4611      	mov	r1, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4623      	mov	r3, r4
 8000f0c:	80fb      	strh	r3, [r7, #6]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	80bb      	strh	r3, [r7, #4]
 8000f12:	460b      	mov	r3, r1
 8000f14:	807b      	strh	r3, [r7, #2]
 8000f16:	4613      	mov	r3, r2
 8000f18:	803b      	strh	r3, [r7, #0]

	int x = radius;
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
	int y = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (radius << 1);
 8000f22:	887b      	ldrh	r3, [r7, #2]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	f1c3 0301 	rsb	r3, r3, #1
 8000f2a:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

	while (x >= y)
 8000f34:	e061      	b.n	8000ffa <ILI9341_DrawFilledCircle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 8000f36:	88fa      	ldrh	r2, [r7, #6]
 8000f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	e018      	b.n	8000f72 <ILI9341_DrawFilledCircle+0x76>
		{
			ILI9341_DrawPixel(i, Y + y,color);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	b298      	uxth	r0, r3
 8000f44:	6a3b      	ldr	r3, [r7, #32]
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	88bb      	ldrh	r3, [r7, #4]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	883a      	ldrh	r2, [r7, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f000 fd29 	bl	80019a8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - y,color);
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	b298      	uxth	r0, r3
 8000f5a:	6a3b      	ldr	r3, [r7, #32]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	88ba      	ldrh	r2, [r7, #4]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	883a      	ldrh	r2, [r7, #0]
 8000f66:	4619      	mov	r1, r3
 8000f68:	f000 fd1e 	bl	80019a8 <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	88fa      	ldrh	r2, [r7, #6]
 8000f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f76:	4413      	add	r3, r2
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	dde0      	ble.n	8000f40 <ILI9341_DrawFilledCircle+0x44>
		}

		for (int i = X - y; i <= X + y; i++)
 8000f7e:	88fa      	ldrh	r2, [r7, #6]
 8000f80:	6a3b      	ldr	r3, [r7, #32]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	e018      	b.n	8000fba <ILI9341_DrawFilledCircle+0xbe>
		{
			ILI9341_DrawPixel(i, Y + x,color);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	b298      	uxth	r0, r3
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	88bb      	ldrh	r3, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	883a      	ldrh	r2, [r7, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f000 fd05 	bl	80019a8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - x,color);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	b298      	uxth	r0, r3
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	88ba      	ldrh	r2, [r7, #4]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	883a      	ldrh	r2, [r7, #0]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f000 fcfa 	bl	80019a8 <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	88fa      	ldrh	r2, [r7, #6]
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	dde0      	ble.n	8000f88 <ILI9341_DrawFilledCircle+0x8c>
		}

		y++;
 8000fc6:	6a3b      	ldr	r3, [r7, #32]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]

		if (((radiusError << 1) + xChange) > 0)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	005a      	lsls	r2, r3, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	dd09      	ble.n	8000ffa <ILI9341_DrawFilledCircle+0xfe>
		{
			x--;
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
			radiusError += xChange;
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 8000ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ffc:	6a3b      	ldr	r3, [r7, #32]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	da99      	bge.n	8000f36 <ILI9341_DrawFilledCircle+0x3a>
		}
	}
}
 8001002:	bf00      	nop
 8001004:	bf00      	nop
 8001006:	372c      	adds	r7, #44	@ 0x2c
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}

0800100c <ILI9341_DrawHollowRectangleCoord>:

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	4604      	mov	r4, r0
 8001014:	4608      	mov	r0, r1
 8001016:	4611      	mov	r1, r2
 8001018:	461a      	mov	r2, r3
 800101a:	4623      	mov	r3, r4
 800101c:	80fb      	strh	r3, [r7, #6]
 800101e:	4603      	mov	r3, r0
 8001020:	80bb      	strh	r3, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	807b      	strh	r3, [r7, #2]
 8001026:	4613      	mov	r3, r2
 8001028:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	74bb      	strb	r3, [r7, #18]
	float negCalc = 0;
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]

	negCalc = X1 - X0;
 8001040:	887a      	ldrh	r2, [r7, #2]
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fdd8 	bl	8000bfc <__aeabi_i2f>
 800104c:	4603      	mov	r3, r0
 800104e:	60fb      	str	r3, [r7, #12]
	if(negCalc < 0) negX = 1;
 8001050:	f04f 0100 	mov.w	r1, #0
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f7ff fe73 	bl	8000d40 <__aeabi_fcmplt>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <ILI9341_DrawHollowRectangleCoord+0x58>
 8001060:	2301      	movs	r3, #1
 8001062:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]

	negCalc = Y1 - Y0;
 800106a:	883a      	ldrh	r2, [r7, #0]
 800106c:	88bb      	ldrh	r3, [r7, #4]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fdc3 	bl	8000bfc <__aeabi_i2f>
 8001076:	4603      	mov	r3, r0
 8001078:	60fb      	str	r3, [r7, #12]
	if(negCalc < 0) negY = 1;
 800107a:	f04f 0100 	mov.w	r1, #0
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f7ff fe5e 	bl	8000d40 <__aeabi_fcmplt>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <ILI9341_DrawHollowRectangleCoord+0x82>
 800108a:	2301      	movs	r3, #1
 800108c:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!negX)
 800108e:	7cfb      	ldrb	r3, [r7, #19]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d104      	bne.n	800109e <ILI9341_DrawHollowRectangleCoord+0x92>
	{
		xLen = X1 - X0;
 8001094:	887a      	ldrh	r2, [r7, #2]
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	82fb      	strh	r3, [r7, #22]
 800109c:	e003      	b.n	80010a6 <ILI9341_DrawHollowRectangleCoord+0x9a>
	}
	else
	{
		xLen = X0 - X1;
 800109e:	88fa      	ldrh	r2, [r7, #6]
 80010a0:	887b      	ldrh	r3, [r7, #2]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 80010a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80010a8:	8afa      	ldrh	r2, [r7, #22]
 80010aa:	88b9      	ldrh	r1, [r7, #4]
 80010ac:	88f8      	ldrh	r0, [r7, #6]
 80010ae:	f000 fd3d 	bl	8001b2c <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 80010b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80010b4:	8afa      	ldrh	r2, [r7, #22]
 80010b6:	8839      	ldrh	r1, [r7, #0]
 80010b8:	88f8      	ldrh	r0, [r7, #6]
 80010ba:	f000 fd37 	bl	8001b2c <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 80010be:	7cbb      	ldrb	r3, [r7, #18]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d104      	bne.n	80010ce <ILI9341_DrawHollowRectangleCoord+0xc2>
	{
		yLen = Y1 - Y0;
 80010c4:	883a      	ldrh	r2, [r7, #0]
 80010c6:	88bb      	ldrh	r3, [r7, #4]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	82bb      	strh	r3, [r7, #20]
 80010cc:	e003      	b.n	80010d6 <ILI9341_DrawHollowRectangleCoord+0xca>
	}
	else
	{
		yLen = Y0 - Y1;
 80010ce:	88ba      	ldrh	r2, [r7, #4]
 80010d0:	883b      	ldrh	r3, [r7, #0]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 80010d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80010d8:	8aba      	ldrh	r2, [r7, #20]
 80010da:	88b9      	ldrh	r1, [r7, #4]
 80010dc:	88f8      	ldrh	r0, [r7, #6]
 80010de:	f000 fd69 	bl	8001bb4 <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 80010e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80010e4:	8aba      	ldrh	r2, [r7, #20]
 80010e6:	88b9      	ldrh	r1, [r7, #4]
 80010e8:	8878      	ldrh	r0, [r7, #2]
 80010ea:	f000 fd63 	bl	8001bb4 <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 80010ee:	8afb      	ldrh	r3, [r7, #22]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <ILI9341_DrawHollowRectangleCoord+0xee>
 80010f4:	8abb      	ldrh	r3, [r7, #20]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <ILI9341_DrawHollowRectangleCoord+0xfa>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 80010fa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80010fc:	8839      	ldrh	r1, [r7, #0]
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fc51 	bl	80019a8 <ILI9341_DrawPixel>
	}
}
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}

0800110e <ILI9341_DrawFilledRectangleCoord>:

void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 800110e:	b590      	push	{r4, r7, lr}
 8001110:	b089      	sub	sp, #36	@ 0x24
 8001112:	af02      	add	r7, sp, #8
 8001114:	4604      	mov	r4, r0
 8001116:	4608      	mov	r0, r1
 8001118:	4611      	mov	r1, r2
 800111a:	461a      	mov	r2, r3
 800111c:	4623      	mov	r3, r4
 800111e:	80fb      	strh	r3, [r7, #6]
 8001120:	4603      	mov	r3, r0
 8001122:	80bb      	strh	r3, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	74bb      	strb	r3, [r7, #18]
	int32_t negCalc = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
	uint16_t X0True = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	823b      	strh	r3, [r7, #16]
	uint16_t Y0True = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	81fb      	strh	r3, [r7, #14]

	negCalc = X1 - X0;
 8001148:	887a      	ldrh	r2, [r7, #2]
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negX = 1;
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	da01      	bge.n	800115a <ILI9341_DrawFilledRectangleCoord+0x4c>
 8001156:	2301      	movs	r3, #1
 8001158:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]

	negCalc = Y1 - Y0;
 800115e:	883a      	ldrh	r2, [r7, #0]
 8001160:	88bb      	ldrh	r3, [r7, #4]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negY = 1;
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	2b00      	cmp	r3, #0
 800116a:	da01      	bge.n	8001170 <ILI9341_DrawFilledRectangleCoord+0x62>
 800116c:	2301      	movs	r3, #1
 800116e:	74bb      	strb	r3, [r7, #18]

	if(!negX)
 8001170:	7cfb      	ldrb	r3, [r7, #19]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d106      	bne.n	8001184 <ILI9341_DrawFilledRectangleCoord+0x76>
	{
		xLen = X1 - X0;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	82fb      	strh	r3, [r7, #22]
		X0True = X0;
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	823b      	strh	r3, [r7, #16]
 8001182:	e005      	b.n	8001190 <ILI9341_DrawFilledRectangleCoord+0x82>
	}
	else
	{
		xLen = X0 - X1;
 8001184:	88fa      	ldrh	r2, [r7, #6]
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	82fb      	strh	r3, [r7, #22]
		X0True = X1;
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	823b      	strh	r3, [r7, #16]
	}

	if(!negY)
 8001190:	7cbb      	ldrb	r3, [r7, #18]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d106      	bne.n	80011a4 <ILI9341_DrawFilledRectangleCoord+0x96>
	{
		yLen = Y1 - Y0;
 8001196:	883a      	ldrh	r2, [r7, #0]
 8001198:	88bb      	ldrh	r3, [r7, #4]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	82bb      	strh	r3, [r7, #20]
		Y0True = Y0;
 800119e:	88bb      	ldrh	r3, [r7, #4]
 80011a0:	81fb      	strh	r3, [r7, #14]
 80011a2:	e005      	b.n	80011b0 <ILI9341_DrawFilledRectangleCoord+0xa2>
	}
	else
	{
		yLen = Y0 - Y1;
 80011a4:	88ba      	ldrh	r2, [r7, #4]
 80011a6:	883b      	ldrh	r3, [r7, #0]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	82bb      	strh	r3, [r7, #20]
		Y0True = Y1;
 80011ac:	883b      	ldrh	r3, [r7, #0]
 80011ae:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 80011b0:	8abc      	ldrh	r4, [r7, #20]
 80011b2:	8afa      	ldrh	r2, [r7, #22]
 80011b4:	89f9      	ldrh	r1, [r7, #14]
 80011b6:	8a38      	ldrh	r0, [r7, #16]
 80011b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	4623      	mov	r3, r4
 80011be:	f000 fc59 	bl	8001a74 <ILI9341_DrawRectangle>
}
 80011c2:	bf00      	nop
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd90      	pop	{r4, r7, pc}

080011ca <ILI9341_DrawChar>:

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80011ca:	b590      	push	{r4, r7, lr}
 80011cc:	b08d      	sub	sp, #52	@ 0x34
 80011ce:	af02      	add	r7, sp, #8
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	4611      	mov	r1, r2
 80011d4:	461a      	mov	r2, r3
 80011d6:	4603      	mov	r3, r0
 80011d8:	73fb      	strb	r3, [r7, #15]
 80011da:	460b      	mov	r3, r1
 80011dc:	81bb      	strh	r3, [r7, #12]
 80011de:	4613      	mov	r3, r2
 80011e0:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b1e      	cmp	r3, #30
 80011e6:	d964      	bls.n	80012b2 <ILI9341_DrawChar+0xe8>
 80011e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db60      	blt.n	80012b2 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3301      	adds	r3, #1
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	3302      	adds	r3, #2
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	3303      	adds	r3, #3
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	3b20      	subs	r3, #32
 8001212:	7ffa      	ldrb	r2, [r7, #31]
 8001214:	fb02 f303 	mul.w	r3, r2, r3
 8001218:	3304      	adds	r3, #4
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	4413      	add	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8001220:	7fbb      	ldrb	r3, [r7, #30]
 8001222:	b29a      	uxth	r2, r3
 8001224:	7f7b      	ldrb	r3, [r7, #29]
 8001226:	b29c      	uxth	r4, r3
 8001228:	88f9      	ldrh	r1, [r7, #6]
 800122a:	89b8      	ldrh	r0, [r7, #12]
 800122c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	4623      	mov	r3, r4
 8001232:	f000 fc1f 	bl	8001a74 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	@ 0x24
 800123a:	e035      	b.n	80012a8 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
 8001240:	e02b      	b.n	800129a <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8001242:	7f3b      	ldrb	r3, [r7, #28]
 8001244:	6a3a      	ldr	r2, [r7, #32]
 8001246:	fb03 f202 	mul.w	r2, r3, r2
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	10db      	asrs	r3, r3, #3
 800124e:	f003 031f 	and.w	r3, r3, #31
 8001252:	4413      	add	r3, r2
 8001254:	3301      	adds	r3, #1
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 800125e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	2201      	movs	r2, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 800126c:	7dfa      	ldrb	r2, [r7, #23]
 800126e:	7dbb      	ldrb	r3, [r7, #22]
 8001270:	4013      	ands	r3, r2
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00d      	beq.n	8001294 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	b29a      	uxth	r2, r3
 800127c:	89bb      	ldrh	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	b298      	uxth	r0, r3
 8001282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001284:	b29a      	uxth	r2, r3
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	4413      	add	r3, r2
 800128a:	b29b      	uxth	r3, r3
 800128c:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800128e:	4619      	mov	r1, r3
 8001290:	f000 fb8a 	bl	80019a8 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	3301      	adds	r3, #1
 8001298:	623b      	str	r3, [r7, #32]
 800129a:	7fbb      	ldrb	r3, [r7, #30]
 800129c:	6a3a      	ldr	r2, [r7, #32]
 800129e:	429a      	cmp	r2, r3
 80012a0:	dbcf      	blt.n	8001242 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 80012a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a4:	3301      	adds	r3, #1
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80012a8:	7f7b      	ldrb	r3, [r7, #29]
 80012aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbc5      	blt.n	800123c <ILI9341_DrawChar+0x72>
 80012b0:	e000      	b.n	80012b4 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 80012b2:	bf00      	nop
			}
		}
	}
}
 80012b4:	372c      	adds	r7, #44	@ 0x2c
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd90      	pop	{r4, r7, pc}

080012ba <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b08a      	sub	sp, #40	@ 0x28
 80012be:	af02      	add	r7, sp, #8
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	4611      	mov	r1, r2
 80012c6:	461a      	mov	r2, r3
 80012c8:	460b      	mov	r3, r1
 80012ca:	80fb      	strh	r3, [r7, #6]
 80012cc:	4613      	mov	r3, r2
 80012ce:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	3301      	adds	r3, #1
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80012de:	e02d      	b.n	800133c <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	7818      	ldrb	r0, [r3, #0]
 80012e4:	88b9      	ldrh	r1, [r7, #4]
 80012e6:	88fa      	ldrh	r2, [r7, #6]
 80012e8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	460b      	mov	r3, r1
 80012f2:	68b9      	ldr	r1, [r7, #8]
 80012f4:	f7ff ff69 	bl	80011ca <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	3b20      	subs	r3, #32
 80012fe:	7ffa      	ldrb	r2, [r7, #31]
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	3304      	adds	r3, #4
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	4413      	add	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	1c9a      	adds	r2, r3, #2
 8001316:	7fbb      	ldrb	r3, [r7, #30]
 8001318:	429a      	cmp	r2, r3
 800131a:	da07      	bge.n	800132c <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	b29a      	uxth	r2, r3
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	4413      	add	r3, r2
 8001324:	b29b      	uxth	r3, r3
 8001326:	3302      	adds	r3, #2
 8001328:	80fb      	strh	r3, [r7, #6]
 800132a:	e004      	b.n	8001336 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 800132c:	7fbb      	ldrb	r3, [r7, #30]
 800132e:	b29a      	uxth	r2, r3
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	4413      	add	r3, r2
 8001334:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3301      	adds	r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
	while (*str)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1cd      	bne.n	80012e0 <ILI9341_DrawText+0x26>
	}
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a06      	ldr	r2, [pc, #24]	@ (8001374 <HAL_SPI_TxCpltCallback+0x24>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d105      	bne.n	800136c <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001366:	4804      	ldr	r0, [pc, #16]	@ (8001378 <HAL_SPI_TxCpltCallback+0x28>)
 8001368:	f002 fa42 	bl	80037f0 <HAL_GPIO_WritePin>
  }
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200001f4 	.word	0x200001f4
 8001378:	40010c00 	.word	0x40010c00

0800137c <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001386:	bf00      	nop
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <ILI9341_SPI_Tx+0x30>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b02      	cmp	r3, #2
 8001394:	d1f8      	bne.n	8001388 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	2201      	movs	r2, #1
 800139a:	4619      	mov	r1, r3
 800139c:	4803      	ldr	r0, [pc, #12]	@ (80013ac <ILI9341_SPI_Tx+0x30>)
 800139e:	f002 ffe5 	bl	800436c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200001f4 	.word	0x200001f4

080013b0 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80013bc:	bf00      	nop
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <ILI9341_SPI_TxBuffer+0x30>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d1f8      	bne.n	80013be <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	461a      	mov	r2, r3
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4803      	ldr	r0, [pc, #12]	@ (80013e0 <ILI9341_SPI_TxBuffer+0x30>)
 80013d4:	f002 ffca 	bl	800436c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200001f4 	.word	0x200001f4

080013e4 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 80013ee:	2200      	movs	r2, #0
 80013f0:	2101      	movs	r1, #1
 80013f2:	4808      	ldr	r0, [pc, #32]	@ (8001414 <ILI9341_WriteCommand+0x30>)
 80013f4:	f002 f9fc 	bl	80037f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <ILI9341_WriteCommand+0x30>)
 8001400:	f002 f9f6 	bl	80037f0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ffb8 	bl	800137c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40010c00 	.word	0x40010c00

08001418 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001422:	2201      	movs	r2, #1
 8001424:	2101      	movs	r1, #1
 8001426:	4808      	ldr	r0, [pc, #32]	@ (8001448 <ILI9341_WriteData+0x30>)
 8001428:	f002 f9e2 	bl	80037f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001432:	4805      	ldr	r0, [pc, #20]	@ (8001448 <ILI9341_WriteData+0x30>)
 8001434:	f002 f9dc 	bl	80037f0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ff9e 	bl	800137c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40010c00 	.word	0x40010c00

0800144c <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001458:	2201      	movs	r2, #1
 800145a:	2101      	movs	r1, #1
 800145c:	4808      	ldr	r0, [pc, #32]	@ (8001480 <ILI9341_WriteBuffer+0x34>)
 800145e:	f002 f9c7 	bl	80037f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001468:	4805      	ldr	r0, [pc, #20]	@ (8001480 <ILI9341_WriteBuffer+0x34>)
 800146a:	f002 f9c1 	bl	80037f0 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	4619      	mov	r1, r3
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ff9c 	bl	80013b0 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40010c00 	.word	0x40010c00

08001484 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	4604      	mov	r4, r0
 800148c:	4608      	mov	r0, r1
 800148e:	4611      	mov	r1, r2
 8001490:	461a      	mov	r2, r3
 8001492:	4623      	mov	r3, r4
 8001494:	80fb      	strh	r3, [r7, #6]
 8001496:	4603      	mov	r3, r0
 8001498:	80bb      	strh	r3, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	807b      	strh	r3, [r7, #2]
 800149e:	4613      	mov	r3, r2
 80014a0:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80014bc:	887b      	ldrh	r3, [r7, #2]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80014c2:	202a      	movs	r0, #42	@ 0x2a
 80014c4:	f7ff ff8e 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2104      	movs	r1, #4
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ffbc 	bl	800144c <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80014d4:	88bb      	ldrh	r3, [r7, #4]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b29b      	uxth	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80014de:	88bb      	ldrh	r3, [r7, #4]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80014e4:	883b      	ldrh	r3, [r7, #0]
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80014ee:	883b      	ldrh	r3, [r7, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80014f4:	202b      	movs	r0, #43	@ 0x2b
 80014f6:	f7ff ff75 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	2104      	movs	r1, #4
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ffa3 	bl	800144c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8001506:	202c      	movs	r0, #44	@ 0x2c
 8001508:	f7ff ff6c 	bl	80013e4 <ILI9341_WriteCommand>
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bd90      	pop	{r4, r7, pc}

08001514 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8001518:	2200      	movs	r2, #0
 800151a:	2102      	movs	r1, #2
 800151c:	480d      	ldr	r0, [pc, #52]	@ (8001554 <ILI9341_Reset+0x40>)
 800151e:	f002 f967 	bl	80037f0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001522:	200a      	movs	r0, #10
 8001524:	f001 fcc0 	bl	8002ea8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800152e:	4809      	ldr	r0, [pc, #36]	@ (8001554 <ILI9341_Reset+0x40>)
 8001530:	f002 f95e 	bl	80037f0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001534:	200a      	movs	r0, #10
 8001536:	f001 fcb7 	bl	8002ea8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800153a:	2201      	movs	r2, #1
 800153c:	2102      	movs	r1, #2
 800153e:	4805      	ldr	r0, [pc, #20]	@ (8001554 <ILI9341_Reset+0x40>)
 8001540:	f002 f956 	bl	80037f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8001544:	2201      	movs	r2, #1
 8001546:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800154a:	4802      	ldr	r0, [pc, #8]	@ (8001554 <ILI9341_Reset+0x40>)
 800154c:	f002 f950 	bl	80037f0 <HAL_GPIO_WritePin>
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40010c00 	.word	0x40010c00

08001558 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800155c:	2201      	movs	r2, #1
 800155e:	2102      	movs	r1, #2
 8001560:	4802      	ldr	r0, [pc, #8]	@ (800156c <ILI9341_Enable+0x14>)
 8001562:	f002 f945 	bl	80037f0 <HAL_GPIO_WritePin>
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40010c00 	.word	0x40010c00

08001570 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8001574:	f7ff fff0 	bl	8001558 <ILI9341_Enable>
	ILI9341_Reset();
 8001578:	f7ff ffcc 	bl	8001514 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 800157c:	2001      	movs	r0, #1
 800157e:	f7ff ff31 	bl	80013e4 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8001582:	200a      	movs	r0, #10
 8001584:	f001 fc90 	bl	8002ea8 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8001588:	20cb      	movs	r0, #203	@ 0xcb
 800158a:	f7ff ff2b 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 800158e:	2039      	movs	r0, #57	@ 0x39
 8001590:	f7ff ff42 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8001594:	202c      	movs	r0, #44	@ 0x2c
 8001596:	f7ff ff3f 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff ff3c 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80015a0:	2034      	movs	r0, #52	@ 0x34
 80015a2:	f7ff ff39 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80015a6:	2002      	movs	r0, #2
 80015a8:	f7ff ff36 	bl	8001418 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80015ac:	20cf      	movs	r0, #207	@ 0xcf
 80015ae:	f7ff ff19 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff ff30 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80015b8:	20c1      	movs	r0, #193	@ 0xc1
 80015ba:	f7ff ff2d 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80015be:	2030      	movs	r0, #48	@ 0x30
 80015c0:	f7ff ff2a 	bl	8001418 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80015c4:	20e8      	movs	r0, #232	@ 0xe8
 80015c6:	f7ff ff0d 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80015ca:	2085      	movs	r0, #133	@ 0x85
 80015cc:	f7ff ff24 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff ff21 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80015d6:	2078      	movs	r0, #120	@ 0x78
 80015d8:	f7ff ff1e 	bl	8001418 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80015dc:	20ea      	movs	r0, #234	@ 0xea
 80015de:	f7ff ff01 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff ff18 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff ff15 	bl	8001418 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 80015ee:	20ed      	movs	r0, #237	@ 0xed
 80015f0:	f7ff fef8 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 80015f4:	2064      	movs	r0, #100	@ 0x64
 80015f6:	f7ff ff0f 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80015fa:	2003      	movs	r0, #3
 80015fc:	f7ff ff0c 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8001600:	2012      	movs	r0, #18
 8001602:	f7ff ff09 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8001606:	2081      	movs	r0, #129	@ 0x81
 8001608:	f7ff ff06 	bl	8001418 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 800160c:	20f7      	movs	r0, #247	@ 0xf7
 800160e:	f7ff fee9 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8001612:	2020      	movs	r0, #32
 8001614:	f7ff ff00 	bl	8001418 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8001618:	20c0      	movs	r0, #192	@ 0xc0
 800161a:	f7ff fee3 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 800161e:	2023      	movs	r0, #35	@ 0x23
 8001620:	f7ff fefa 	bl	8001418 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8001624:	20c1      	movs	r0, #193	@ 0xc1
 8001626:	f7ff fedd 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 800162a:	2010      	movs	r0, #16
 800162c:	f7ff fef4 	bl	8001418 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8001630:	20c5      	movs	r0, #197	@ 0xc5
 8001632:	f7ff fed7 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8001636:	203e      	movs	r0, #62	@ 0x3e
 8001638:	f7ff feee 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 800163c:	2028      	movs	r0, #40	@ 0x28
 800163e:	f7ff feeb 	bl	8001418 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8001642:	20c7      	movs	r0, #199	@ 0xc7
 8001644:	f7ff fece 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001648:	2086      	movs	r0, #134	@ 0x86
 800164a:	f7ff fee5 	bl	8001418 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 800164e:	2036      	movs	r0, #54	@ 0x36
 8001650:	f7ff fec8 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8001654:	2048      	movs	r0, #72	@ 0x48
 8001656:	f7ff fedf 	bl	8001418 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 800165a:	203a      	movs	r0, #58	@ 0x3a
 800165c:	f7ff fec2 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8001660:	2055      	movs	r0, #85	@ 0x55
 8001662:	f7ff fed9 	bl	8001418 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8001666:	20b1      	movs	r0, #177	@ 0xb1
 8001668:	f7ff febc 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800166c:	2000      	movs	r0, #0
 800166e:	f7ff fed3 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8001672:	2018      	movs	r0, #24
 8001674:	f7ff fed0 	bl	8001418 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8001678:	20b6      	movs	r0, #182	@ 0xb6
 800167a:	f7ff feb3 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 800167e:	2008      	movs	r0, #8
 8001680:	f7ff feca 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8001684:	2082      	movs	r0, #130	@ 0x82
 8001686:	f7ff fec7 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 800168a:	2027      	movs	r0, #39	@ 0x27
 800168c:	f7ff fec4 	bl	8001418 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8001690:	20f2      	movs	r0, #242	@ 0xf2
 8001692:	f7ff fea7 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001696:	2000      	movs	r0, #0
 8001698:	f7ff febe 	bl	8001418 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 800169c:	2026      	movs	r0, #38	@ 0x26
 800169e:	f7ff fea1 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7ff feb8 	bl	8001418 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 80016a8:	20e0      	movs	r0, #224	@ 0xe0
 80016aa:	f7ff fe9b 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80016ae:	200f      	movs	r0, #15
 80016b0:	f7ff feb2 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80016b4:	2031      	movs	r0, #49	@ 0x31
 80016b6:	f7ff feaf 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80016ba:	202b      	movs	r0, #43	@ 0x2b
 80016bc:	f7ff feac 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80016c0:	200c      	movs	r0, #12
 80016c2:	f7ff fea9 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80016c6:	200e      	movs	r0, #14
 80016c8:	f7ff fea6 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80016cc:	2008      	movs	r0, #8
 80016ce:	f7ff fea3 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80016d2:	204e      	movs	r0, #78	@ 0x4e
 80016d4:	f7ff fea0 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80016d8:	20f1      	movs	r0, #241	@ 0xf1
 80016da:	f7ff fe9d 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80016de:	2037      	movs	r0, #55	@ 0x37
 80016e0:	f7ff fe9a 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80016e4:	2007      	movs	r0, #7
 80016e6:	f7ff fe97 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 80016ea:	2010      	movs	r0, #16
 80016ec:	f7ff fe94 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80016f0:	2003      	movs	r0, #3
 80016f2:	f7ff fe91 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80016f6:	200e      	movs	r0, #14
 80016f8:	f7ff fe8e 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 80016fc:	2009      	movs	r0, #9
 80016fe:	f7ff fe8b 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff fe88 	bl	8001418 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001708:	20e1      	movs	r0, #225	@ 0xe1
 800170a:	f7ff fe6b 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800170e:	2000      	movs	r0, #0
 8001710:	f7ff fe82 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001714:	200e      	movs	r0, #14
 8001716:	f7ff fe7f 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 800171a:	2014      	movs	r0, #20
 800171c:	f7ff fe7c 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001720:	2003      	movs	r0, #3
 8001722:	f7ff fe79 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8001726:	2011      	movs	r0, #17
 8001728:	f7ff fe76 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 800172c:	2007      	movs	r0, #7
 800172e:	f7ff fe73 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001732:	2031      	movs	r0, #49	@ 0x31
 8001734:	f7ff fe70 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001738:	20c1      	movs	r0, #193	@ 0xc1
 800173a:	f7ff fe6d 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800173e:	2048      	movs	r0, #72	@ 0x48
 8001740:	f7ff fe6a 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001744:	2008      	movs	r0, #8
 8001746:	f7ff fe67 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800174a:	200f      	movs	r0, #15
 800174c:	f7ff fe64 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001750:	200c      	movs	r0, #12
 8001752:	f7ff fe61 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001756:	2031      	movs	r0, #49	@ 0x31
 8001758:	f7ff fe5e 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 800175c:	2036      	movs	r0, #54	@ 0x36
 800175e:	f7ff fe5b 	bl	8001418 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001762:	200f      	movs	r0, #15
 8001764:	f7ff fe58 	bl	8001418 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8001768:	2011      	movs	r0, #17
 800176a:	f7ff fe3b 	bl	80013e4 <ILI9341_WriteCommand>
	HAL_Delay(100);
 800176e:	2064      	movs	r0, #100	@ 0x64
 8001770:	f001 fb9a 	bl	8002ea8 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8001774:	2029      	movs	r0, #41	@ 0x29
 8001776:	f7ff fe35 	bl	80013e4 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 800177a:	2000      	movs	r0, #0
 800177c:	f000 f802 	bl	8001784 <ILI9341_SetRotation>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}

08001784 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 800178e:	2036      	movs	r0, #54	@ 0x36
 8001790:	f7ff fe28 	bl	80013e4 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8001794:	2001      	movs	r0, #1
 8001796:	f001 fb87 	bl	8002ea8 <HAL_Delay>

	switch(rotation)
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b03      	cmp	r3, #3
 800179e:	d837      	bhi.n	8001810 <ILI9341_SetRotation+0x8c>
 80017a0:	a201      	add	r2, pc, #4	@ (adr r2, 80017a8 <ILI9341_SetRotation+0x24>)
 80017a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a6:	bf00      	nop
 80017a8:	080017b9 	.word	0x080017b9
 80017ac:	080017cf 	.word	0x080017cf
 80017b0:	080017e5 	.word	0x080017e5
 80017b4:	080017fb 	.word	0x080017fb
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80017b8:	2048      	movs	r0, #72	@ 0x48
 80017ba:	f7ff fe2d 	bl	8001418 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80017be:	4b17      	ldr	r3, [pc, #92]	@ (800181c <ILI9341_SetRotation+0x98>)
 80017c0:	22f0      	movs	r2, #240	@ 0xf0
 80017c2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80017c4:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <ILI9341_SetRotation+0x9c>)
 80017c6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80017ca:	801a      	strh	r2, [r3, #0]
		break;
 80017cc:	e021      	b.n	8001812 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 80017ce:	2028      	movs	r0, #40	@ 0x28
 80017d0:	f7ff fe22 	bl	8001418 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <ILI9341_SetRotation+0x98>)
 80017d6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80017da:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80017dc:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <ILI9341_SetRotation+0x9c>)
 80017de:	22f0      	movs	r2, #240	@ 0xf0
 80017e0:	801a      	strh	r2, [r3, #0]
		break;
 80017e2:	e016      	b.n	8001812 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 80017e4:	2088      	movs	r0, #136	@ 0x88
 80017e6:	f7ff fe17 	bl	8001418 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <ILI9341_SetRotation+0x98>)
 80017ec:	22f0      	movs	r2, #240	@ 0xf0
 80017ee:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80017f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <ILI9341_SetRotation+0x9c>)
 80017f2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80017f6:	801a      	strh	r2, [r3, #0]
		break;
 80017f8:	e00b      	b.n	8001812 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 80017fa:	20e8      	movs	r0, #232	@ 0xe8
 80017fc:	f7ff fe0c 	bl	8001418 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <ILI9341_SetRotation+0x98>)
 8001802:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001806:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <ILI9341_SetRotation+0x9c>)
 800180a:	22f0      	movs	r2, #240	@ 0xf0
 800180c:	801a      	strh	r2, [r3, #0]
		break;
 800180e:	e000      	b.n	8001812 <ILI9341_SetRotation+0x8e>
	default:
		break;
 8001810:	bf00      	nop
	}
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000002 	.word	0x20000002
 8001820:	20000000 	.word	0x20000000

08001824 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8001824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001828:	b08d      	sub	sp, #52	@ 0x34
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	6039      	str	r1, [r7, #0]
 8001830:	80fb      	strh	r3, [r7, #6]
 8001832:	466b      	mov	r3, sp
 8001834:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001842:	d202      	bcs.n	800184a <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001848:	e002      	b.n	8001850 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 800184a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800184e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001850:	2201      	movs	r2, #1
 8001852:	2101      	movs	r1, #1
 8001854:	483f      	ldr	r0, [pc, #252]	@ (8001954 <ILI9341_DrawColorBurst+0x130>)
 8001856:	f001 ffcb 	bl	80037f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001860:	483c      	ldr	r0, [pc, #240]	@ (8001954 <ILI9341_DrawColorBurst+0x130>)
 8001862:	f001 ffc5 	bl	80037f0 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	b29b      	uxth	r3, r3
 800186c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 8001870:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001872:	460b      	mov	r3, r1
 8001874:	3b01      	subs	r3, #1
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	2300      	movs	r3, #0
 800187a:	4688      	mov	r8, r1
 800187c:	4699      	mov	r9, r3
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800188a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800188e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001892:	2300      	movs	r3, #0
 8001894:	460c      	mov	r4, r1
 8001896:	461d      	mov	r5, r3
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	00eb      	lsls	r3, r5, #3
 80018a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018a6:	00e2      	lsls	r2, r4, #3
 80018a8:	1dcb      	adds	r3, r1, #7
 80018aa:	08db      	lsrs	r3, r3, #3
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	ebad 0d03 	sub.w	sp, sp, r3
 80018b2:	466b      	mov	r3, sp
 80018b4:	3300      	adds	r3, #0
 80018b6:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80018b8:	2300      	movs	r3, #0
 80018ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018bc:	e00e      	b.n	80018dc <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018c2:	4413      	add	r3, r2
 80018c4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80018c8:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 80018ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018cc:	3301      	adds	r3, #1
 80018ce:	88fa      	ldrh	r2, [r7, #6]
 80018d0:	b2d1      	uxtb	r1, r2
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80018d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d8:	3302      	adds	r3, #2
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d3ec      	bcc.n	80018be <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80018fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80018fe:	fb01 f202 	mul.w	r2, r1, r2
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d010      	beq.n	800192e <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800190c:	2300      	movs	r3, #0
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001910:	e009      	b.n	8001926 <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001914:	b29a      	uxth	r2, r3
 8001916:	230a      	movs	r3, #10
 8001918:	69b9      	ldr	r1, [r7, #24]
 800191a:	480f      	ldr	r0, [pc, #60]	@ (8001958 <ILI9341_DrawColorBurst+0x134>)
 800191c:	f002 fbe2 	bl	80040e4 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001922:	3301      	adds	r3, #1
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
 8001926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	429a      	cmp	r2, r3
 800192c:	d3f1      	bcc.n	8001912 <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	b29a      	uxth	r2, r3
 8001932:	230a      	movs	r3, #10
 8001934:	69b9      	ldr	r1, [r7, #24]
 8001936:	4808      	ldr	r0, [pc, #32]	@ (8001958 <ILI9341_DrawColorBurst+0x134>)
 8001938:	f002 fbd4 	bl	80040e4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800193c:	2201      	movs	r2, #1
 800193e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001942:	4804      	ldr	r0, [pc, #16]	@ (8001954 <ILI9341_DrawColorBurst+0x130>)
 8001944:	f001 ff54 	bl	80037f0 <HAL_GPIO_WritePin>
 8001948:	46b5      	mov	sp, r6
}
 800194a:	bf00      	nop
 800194c:	3734      	adds	r7, #52	@ 0x34
 800194e:	46bd      	mov	sp, r7
 8001950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001954:	40010c00 	.word	0x40010c00
 8001958:	200001f4 	.word	0x200001f4

0800195c <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001966:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <ILI9341_FillScreen+0x44>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	b29a      	uxth	r2, r3
 800196c:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <ILI9341_FillScreen+0x48>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	b29b      	uxth	r3, r3
 8001972:	2100      	movs	r1, #0
 8001974:	2000      	movs	r0, #0
 8001976:	f7ff fd85 	bl	8001484 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <ILI9341_FillScreen+0x44>)
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <ILI9341_FillScreen+0x48>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	461a      	mov	r2, r3
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ff46 	bl	8001824 <ILI9341_DrawColorBurst>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000002 	.word	0x20000002
 80019a4:	20000000 	.word	0x20000000

080019a8 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
 80019b2:	460b      	mov	r3, r1
 80019b4:	80bb      	strh	r3, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80019ba:	4b2c      	ldr	r3, [pc, #176]	@ (8001a6c <ILI9341_DrawPixel+0xc4>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	88fa      	ldrh	r2, [r7, #6]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d24d      	bcs.n	8001a62 <ILI9341_DrawPixel+0xba>
 80019c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <ILI9341_DrawPixel+0xc8>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	88ba      	ldrh	r2, [r7, #4]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d247      	bcs.n	8001a62 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	753b      	strb	r3, [r7, #20]
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	757b      	strb	r3, [r7, #21]
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	3301      	adds	r3, #1
 80019e6:	121b      	asrs	r3, r3, #8
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	75bb      	strb	r3, [r7, #22]
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	3301      	adds	r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 80019f6:	88bb      	ldrh	r3, [r7, #4]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	743b      	strb	r3, [r7, #16]
 8001a00:	88bb      	ldrh	r3, [r7, #4]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	747b      	strb	r3, [r7, #17]
 8001a06:	88bb      	ldrh	r3, [r7, #4]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	121b      	asrs	r3, r3, #8
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	74bb      	strb	r3, [r7, #18]
 8001a10:	88bb      	ldrh	r3, [r7, #4]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001a1a:	887b      	ldrh	r3, [r7, #2]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	733b      	strb	r3, [r7, #12]
 8001a24:	887b      	ldrh	r3, [r7, #2]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001a2a:	202a      	movs	r0, #42	@ 0x2a
 8001a2c:	f7ff fcda 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2104      	movs	r1, #4
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fd08 	bl	800144c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001a3c:	202b      	movs	r0, #43	@ 0x2b
 8001a3e:	f7ff fcd1 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	2104      	movs	r1, #4
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fcff 	bl	800144c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001a4e:	202c      	movs	r0, #44	@ 0x2c
 8001a50:	f7ff fcc8 	bl	80013e4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	2102      	movs	r1, #2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fcf6 	bl	800144c <ILI9341_WriteBuffer>
 8001a60:	e000      	b.n	8001a64 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001a62:	bf00      	nop
}
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000002 	.word	0x20000002
 8001a70:	20000000 	.word	0x20000000

08001a74 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	4611      	mov	r1, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	4623      	mov	r3, r4
 8001a84:	80fb      	strh	r3, [r7, #6]
 8001a86:	4603      	mov	r3, r0
 8001a88:	80bb      	strh	r3, [r7, #4]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	807b      	strh	r3, [r7, #2]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001a92:	4b24      	ldr	r3, [pc, #144]	@ (8001b24 <ILI9341_DrawRectangle+0xb0>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	88fa      	ldrh	r2, [r7, #6]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d23d      	bcs.n	8001b1a <ILI9341_DrawRectangle+0xa6>
 8001a9e:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <ILI9341_DrawRectangle+0xb4>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	88ba      	ldrh	r2, [r7, #4]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d237      	bcs.n	8001b1a <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8001aaa:	88fa      	ldrh	r2, [r7, #6]
 8001aac:	887b      	ldrh	r3, [r7, #2]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8001b24 <ILI9341_DrawRectangle+0xb0>)
 8001ab2:	8812      	ldrh	r2, [r2, #0]
 8001ab4:	b292      	uxth	r2, r2
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	dd05      	ble.n	8001ac6 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8001aba:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <ILI9341_DrawRectangle+0xb0>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8001ac6:	88ba      	ldrh	r2, [r7, #4]
 8001ac8:	883b      	ldrh	r3, [r7, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a16      	ldr	r2, [pc, #88]	@ (8001b28 <ILI9341_DrawRectangle+0xb4>)
 8001ace:	8812      	ldrh	r2, [r2, #0]
 8001ad0:	b292      	uxth	r2, r2
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	dd05      	ble.n	8001ae2 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <ILI9341_DrawRectangle+0xb4>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	88bb      	ldrh	r3, [r7, #4]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001ae2:	88fa      	ldrh	r2, [r7, #6]
 8001ae4:	887b      	ldrh	r3, [r7, #2]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29c      	uxth	r4, r3
 8001aee:	88ba      	ldrh	r2, [r7, #4]
 8001af0:	883b      	ldrh	r3, [r7, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	88b9      	ldrh	r1, [r7, #4]
 8001afc:	88f8      	ldrh	r0, [r7, #6]
 8001afe:	4622      	mov	r2, r4
 8001b00:	f7ff fcc0 	bl	8001484 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001b04:	883b      	ldrh	r3, [r7, #0]
 8001b06:	887a      	ldrh	r2, [r7, #2]
 8001b08:	fb02 f303 	mul.w	r3, r2, r3
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	8b3b      	ldrh	r3, [r7, #24]
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fe86 	bl	8001824 <ILI9341_DrawColorBurst>
 8001b18:	e000      	b.n	8001b1c <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001b1a:	bf00      	nop
}
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd90      	pop	{r4, r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000002 	.word	0x20000002
 8001b28:	20000000 	.word	0x20000000

08001b2c <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4604      	mov	r4, r0
 8001b34:	4608      	mov	r0, r1
 8001b36:	4611      	mov	r1, r2
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4623      	mov	r3, r4
 8001b3c:	80fb      	strh	r3, [r7, #6]
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80bb      	strh	r3, [r7, #4]
 8001b42:	460b      	mov	r3, r1
 8001b44:	807b      	strh	r3, [r7, #2]
 8001b46:	4613      	mov	r3, r2
 8001b48:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001b4a:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <ILI9341_DrawHLine+0x80>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	88fa      	ldrh	r2, [r7, #6]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d225      	bcs.n	8001ba2 <ILI9341_DrawHLine+0x76>
 8001b56:	4b16      	ldr	r3, [pc, #88]	@ (8001bb0 <ILI9341_DrawHLine+0x84>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	88ba      	ldrh	r2, [r7, #4]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d21f      	bcs.n	8001ba2 <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 8001b62:	88fa      	ldrh	r2, [r7, #6]
 8001b64:	887b      	ldrh	r3, [r7, #2]
 8001b66:	4413      	add	r3, r2
 8001b68:	4a10      	ldr	r2, [pc, #64]	@ (8001bac <ILI9341_DrawHLine+0x80>)
 8001b6a:	8812      	ldrh	r2, [r2, #0]
 8001b6c:	b292      	uxth	r2, r2
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	dd05      	ble.n	8001b7e <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <ILI9341_DrawHLine+0x80>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 8001b7e:	88fa      	ldrh	r2, [r7, #6]
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	4413      	add	r3, r2
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	88bb      	ldrh	r3, [r7, #4]
 8001b8c:	88b9      	ldrh	r1, [r7, #4]
 8001b8e:	88f8      	ldrh	r0, [r7, #6]
 8001b90:	f7ff fc78 	bl	8001484 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8001b94:	887a      	ldrh	r2, [r7, #2]
 8001b96:	883b      	ldrh	r3, [r7, #0]
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fe42 	bl	8001824 <ILI9341_DrawColorBurst>
 8001ba0:	e000      	b.n	8001ba4 <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001ba2:	bf00      	nop
}
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd90      	pop	{r4, r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000002 	.word	0x20000002
 8001bb0:	20000000 	.word	0x20000000

08001bb4 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4604      	mov	r4, r0
 8001bbc:	4608      	mov	r0, r1
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4623      	mov	r3, r4
 8001bc4:	80fb      	strh	r3, [r7, #6]
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80bb      	strh	r3, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	807b      	strh	r3, [r7, #2]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001bd2:	4b18      	ldr	r3, [pc, #96]	@ (8001c34 <ILI9341_DrawVLine+0x80>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	88fa      	ldrh	r2, [r7, #6]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d225      	bcs.n	8001c2a <ILI9341_DrawVLine+0x76>
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <ILI9341_DrawVLine+0x84>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	88ba      	ldrh	r2, [r7, #4]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d21f      	bcs.n	8001c2a <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 8001bea:	88ba      	ldrh	r2, [r7, #4]
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	4413      	add	r3, r2
 8001bf0:	4a11      	ldr	r2, [pc, #68]	@ (8001c38 <ILI9341_DrawVLine+0x84>)
 8001bf2:	8812      	ldrh	r2, [r2, #0]
 8001bf4:	b292      	uxth	r2, r2
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	dd05      	ble.n	8001c06 <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <ILI9341_DrawVLine+0x84>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	88bb      	ldrh	r3, [r7, #4]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 8001c06:	88ba      	ldrh	r2, [r7, #4]
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	88fa      	ldrh	r2, [r7, #6]
 8001c14:	88b9      	ldrh	r1, [r7, #4]
 8001c16:	88f8      	ldrh	r0, [r7, #6]
 8001c18:	f7ff fc34 	bl	8001484 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 8001c1c:	887a      	ldrh	r2, [r7, #2]
 8001c1e:	883b      	ldrh	r3, [r7, #0]
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fdfe 	bl	8001824 <ILI9341_DrawColorBurst>
 8001c28:	e000      	b.n	8001c2c <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001c2a:	bf00      	nop
}
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd90      	pop	{r4, r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000002 	.word	0x20000002
 8001c38:	20000000 	.word	0x20000000

08001c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b0a1      	sub	sp, #132	@ 0x84
 8001c40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c42:	f001 f8cf 	bl	8002de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c46:	f000 fe01 	bl	800284c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c4a:	f000 fe99 	bl	8002980 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c4e:	f000 fe79 	bl	8002944 <MX_DMA_Init>
  MX_SPI1_Init();
 8001c52:	f000 fe41 	bl	80028d8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8001c56:	f7ff fc8b 	bl	8001570 <ILI9341_Init>

	// Simple Text writing (Text, Font, X, Y, Color, BackColor)
	// Available Fonts are FONT1, FONT2, FONT3 and FONT4
	ILI9341_FillScreen(WHITE);
 8001c5a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001c5e:	f7ff fe7d 	bl	800195c <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001c62:	2003      	movs	r0, #3
 8001c64:	f7ff fd8e 	bl	8001784 <ILI9341_SetRotation>
	ILI9341_DrawText("HELLO WORLD", FONT4, 90, 110, BLACK, WHITE);
 8001c68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c6c:	9301      	str	r3, [sp, #4]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	236e      	movs	r3, #110	@ 0x6e
 8001c74:	225a      	movs	r2, #90	@ 0x5a
 8001c76:	498e      	ldr	r1, [pc, #568]	@ (8001eb0 <main+0x274>)
 8001c78:	488e      	ldr	r0, [pc, #568]	@ (8001eb4 <main+0x278>)
 8001c7a:	f7ff fb1e 	bl	80012ba <ILI9341_DrawText>
	HAL_Delay(1000);
 8001c7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c82:	f001 f911 	bl	8002ea8 <HAL_Delay>

	//Writing numbers
	ILI9341_FillScreen(WHITE);
 8001c86:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001c8a:	f7ff fe67 	bl	800195c <ILI9341_FillScreen>
	for(uint8_t i = 0; i <= 5; i++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001c94:	e07e      	b.n	8001d94 <main+0x158>
	{
	  sprintf(BufferText, "COUNT : %d", i);
 8001c96:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4986      	ldr	r1, [pc, #536]	@ (8001eb8 <main+0x27c>)
 8001c9e:	4887      	ldr	r0, [pc, #540]	@ (8001ebc <main+0x280>)
 8001ca0:	f003 fabe 	bl	8005220 <siprintf>
	  ILI9341_DrawText(BufferText, FONT3, 10, 10, BLACK, WHITE);
 8001ca4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	2300      	movs	r3, #0
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	230a      	movs	r3, #10
 8001cb0:	220a      	movs	r2, #10
 8001cb2:	4983      	ldr	r1, [pc, #524]	@ (8001ec0 <main+0x284>)
 8001cb4:	4881      	ldr	r0, [pc, #516]	@ (8001ebc <main+0x280>)
 8001cb6:	f7ff fb00 	bl	80012ba <ILI9341_DrawText>
	  ILI9341_DrawText(BufferText, FONT3, 10, 30, BLUE, WHITE);
 8001cba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	231f      	movs	r3, #31
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	231e      	movs	r3, #30
 8001cc6:	220a      	movs	r2, #10
 8001cc8:	497d      	ldr	r1, [pc, #500]	@ (8001ec0 <main+0x284>)
 8001cca:	487c      	ldr	r0, [pc, #496]	@ (8001ebc <main+0x280>)
 8001ccc:	f7ff faf5 	bl	80012ba <ILI9341_DrawText>
	  ILI9341_DrawText(BufferText, FONT3, 10, 50, RED, WHITE);
 8001cd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2332      	movs	r3, #50	@ 0x32
 8001cde:	220a      	movs	r2, #10
 8001ce0:	4977      	ldr	r1, [pc, #476]	@ (8001ec0 <main+0x284>)
 8001ce2:	4876      	ldr	r0, [pc, #472]	@ (8001ebc <main+0x280>)
 8001ce4:	f7ff fae9 	bl	80012ba <ILI9341_DrawText>
	  ILI9341_DrawText(BufferText, FONT3, 10, 70, GREEN, WHITE);
 8001ce8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2346      	movs	r3, #70	@ 0x46
 8001cf6:	220a      	movs	r2, #10
 8001cf8:	4971      	ldr	r1, [pc, #452]	@ (8001ec0 <main+0x284>)
 8001cfa:	4870      	ldr	r0, [pc, #448]	@ (8001ebc <main+0x280>)
 8001cfc:	f7ff fadd 	bl	80012ba <ILI9341_DrawText>
	  ILI9341_DrawText(BufferText, FONT3, 10, 90, YELLOW, WHITE);
 8001d00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	235a      	movs	r3, #90	@ 0x5a
 8001d0e:	220a      	movs	r2, #10
 8001d10:	496b      	ldr	r1, [pc, #428]	@ (8001ec0 <main+0x284>)
 8001d12:	486a      	ldr	r0, [pc, #424]	@ (8001ebc <main+0x280>)
 8001d14:	f7ff fad1 	bl	80012ba <ILI9341_DrawText>
	  ILI9341_DrawText(BufferText, FONT3, 10, 110, PURPLE, WHITE);
 8001d18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d1c:	9301      	str	r3, [sp, #4]
 8001d1e:	f647 030f 	movw	r3, #30735	@ 0x780f
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	236e      	movs	r3, #110	@ 0x6e
 8001d26:	220a      	movs	r2, #10
 8001d28:	4965      	ldr	r1, [pc, #404]	@ (8001ec0 <main+0x284>)
 8001d2a:	4864      	ldr	r0, [pc, #400]	@ (8001ebc <main+0x280>)
 8001d2c:	f7ff fac5 	bl	80012ba <ILI9341_DrawText>
	  ILI9341_DrawText(BufferText, FONT3, 10, 130, ORANGE, WHITE);
 8001d30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2382      	movs	r3, #130	@ 0x82
 8001d3e:	220a      	movs	r2, #10
 8001d40:	495f      	ldr	r1, [pc, #380]	@ (8001ec0 <main+0x284>)
 8001d42:	485e      	ldr	r0, [pc, #376]	@ (8001ebc <main+0x280>)
 8001d44:	f7ff fab9 	bl	80012ba <ILI9341_DrawText>
	  ILI9341_DrawText(BufferText, FONT3, 10, 150, MAROON, WHITE);
 8001d48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	2396      	movs	r3, #150	@ 0x96
 8001d56:	220a      	movs	r2, #10
 8001d58:	4959      	ldr	r1, [pc, #356]	@ (8001ec0 <main+0x284>)
 8001d5a:	4858      	ldr	r0, [pc, #352]	@ (8001ebc <main+0x280>)
 8001d5c:	f7ff faad 	bl	80012ba <ILI9341_DrawText>
	  ILI9341_DrawText(BufferText, FONT3, 10, 170, WHITE, BLACK);
 8001d60:	2300      	movs	r3, #0
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	23aa      	movs	r3, #170	@ 0xaa
 8001d6c:	220a      	movs	r2, #10
 8001d6e:	4954      	ldr	r1, [pc, #336]	@ (8001ec0 <main+0x284>)
 8001d70:	4852      	ldr	r0, [pc, #328]	@ (8001ebc <main+0x280>)
 8001d72:	f7ff faa2 	bl	80012ba <ILI9341_DrawText>
	  ILI9341_DrawText(BufferText, FONT3, 10, 190, BLUE, BLACK);
 8001d76:	2300      	movs	r3, #0
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	231f      	movs	r3, #31
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	23be      	movs	r3, #190	@ 0xbe
 8001d80:	220a      	movs	r2, #10
 8001d82:	494f      	ldr	r1, [pc, #316]	@ (8001ec0 <main+0x284>)
 8001d84:	484d      	ldr	r0, [pc, #308]	@ (8001ebc <main+0x280>)
 8001d86:	f7ff fa98 	bl	80012ba <ILI9341_DrawText>
	for(uint8_t i = 0; i <= 5; i++)
 8001d8a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001d94:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001d98:	2b05      	cmp	r3, #5
 8001d9a:	f67f af7c 	bls.w	8001c96 <main+0x5a>
	}

	// Horizontal Line (X, Y, Length, Color)
	ILI9341_FillScreen(WHITE);
 8001d9e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001da2:	f7ff fddb 	bl	800195c <ILI9341_FillScreen>
	ILI9341_DrawHLine(50, 120, 200, NAVY);
 8001da6:	230f      	movs	r3, #15
 8001da8:	22c8      	movs	r2, #200	@ 0xc8
 8001daa:	2178      	movs	r1, #120	@ 0x78
 8001dac:	2032      	movs	r0, #50	@ 0x32
 8001dae:	f7ff febd 	bl	8001b2c <ILI9341_DrawHLine>
	HAL_Delay(1000);
 8001db2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001db6:	f001 f877 	bl	8002ea8 <HAL_Delay>

	// Vertical Line (X, Y, Length, Color)
	ILI9341_FillScreen(WHITE);
 8001dba:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001dbe:	f7ff fdcd 	bl	800195c <ILI9341_FillScreen>
	ILI9341_DrawVLine(160, 40, 150, DARKGREEN);
 8001dc2:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8001dc6:	2296      	movs	r2, #150	@ 0x96
 8001dc8:	2128      	movs	r1, #40	@ 0x28
 8001dca:	20a0      	movs	r0, #160	@ 0xa0
 8001dcc:	f7ff fef2 	bl	8001bb4 <ILI9341_DrawVLine>
	HAL_Delay(1000);
 8001dd0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dd4:	f001 f868 	bl	8002ea8 <HAL_Delay>

	// Hollow Circle (Centre X, Centre Y, Radius, Color)
	ILI9341_FillScreen(WHITE);
 8001dd8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ddc:	f7ff fdbe 	bl	800195c <ILI9341_FillScreen>
	ILI9341_DrawHollowCircle(160, 120, 80, PINK);
 8001de0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001de4:	2250      	movs	r2, #80	@ 0x50
 8001de6:	2178      	movs	r1, #120	@ 0x78
 8001de8:	20a0      	movs	r0, #160	@ 0xa0
 8001dea:	f7fe ffd1 	bl	8000d90 <ILI9341_DrawHollowCircle>
	HAL_Delay(1000);
 8001dee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001df2:	f001 f859 	bl	8002ea8 <HAL_Delay>

	// Filled Circle (Centre X, Centre Y, Radius, Color)
	ILI9341_FillScreen(WHITE);
 8001df6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001dfa:	f7ff fdaf 	bl	800195c <ILI9341_FillScreen>
	ILI9341_DrawFilledCircle(160, 120, 50, CYAN);
 8001dfe:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001e02:	2232      	movs	r2, #50	@ 0x32
 8001e04:	2178      	movs	r1, #120	@ 0x78
 8001e06:	20a0      	movs	r0, #160	@ 0xa0
 8001e08:	f7ff f878 	bl	8000efc <ILI9341_DrawFilledCircle>
	HAL_Delay(1000);
 8001e0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e10:	f001 f84a 	bl	8002ea8 <HAL_Delay>

	// Filled Rectangle (Start X, Start Y, Length X, Length Y)
	ILI9341_FillScreen(WHITE);
 8001e14:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e18:	f7ff fda0 	bl	800195c <ILI9341_FillScreen>
	ILI9341_DrawRectangle(50, 50, 220, 140, GREENYELLOW);
 8001e1c:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	238c      	movs	r3, #140	@ 0x8c
 8001e24:	22dc      	movs	r2, #220	@ 0xdc
 8001e26:	2132      	movs	r1, #50	@ 0x32
 8001e28:	2032      	movs	r0, #50	@ 0x32
 8001e2a:	f7ff fe23 	bl	8001a74 <ILI9341_DrawRectangle>
	HAL_Delay(1000);
 8001e2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e32:	f001 f839 	bl	8002ea8 <HAL_Delay>

	// Hollow Rectangle (Start X, Start Y, End X, End Y)
	ILI9341_FillScreen(WHITE);
 8001e36:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e3a:	f7ff fd8f 	bl	800195c <ILI9341_FillScreen>
	ILI9341_DrawHollowRectangleCoord(50, 50, 270, 190, DARKCYAN);
 8001e3e:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	23be      	movs	r3, #190	@ 0xbe
 8001e46:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8001e4a:	2132      	movs	r1, #50	@ 0x32
 8001e4c:	2032      	movs	r0, #50	@ 0x32
 8001e4e:	f7ff f8dd 	bl	800100c <ILI9341_DrawHollowRectangleCoord>
	HAL_Delay(1000);
 8001e52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e56:	f001 f827 	bl	8002ea8 <HAL_Delay>

	// Simple Pixel Only (X, Y, Color)
	ILI9341_FillScreen(WHITE);
 8001e5a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e5e:	f7ff fd7d 	bl	800195c <ILI9341_FillScreen>
	ILI9341_DrawPixel(100, 100, BLACK);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2164      	movs	r1, #100	@ 0x64
 8001e66:	2064      	movs	r0, #100	@ 0x64
 8001e68:	f7ff fd9e 	bl	80019a8 <ILI9341_DrawPixel>
	HAL_Delay(1000);
 8001e6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e70:	f001 f81a 	bl	8002ea8 <HAL_Delay>

	/* COUNTING MULTIPLE SEGMENTS */
	ILI9341_FillScreen(WHITE);
 8001e74:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e78:	f7ff fd70 	bl	800195c <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	f7ff fc81 	bl	8001784 <ILI9341_SetRotation>
	ILI9341_DrawText("Counting multiple segments at once", FONT2, 10, 10, BLACK, WHITE);
 8001e82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	230a      	movs	r3, #10
 8001e8e:	220a      	movs	r2, #10
 8001e90:	490c      	ldr	r1, [pc, #48]	@ (8001ec4 <main+0x288>)
 8001e92:	480d      	ldr	r0, [pc, #52]	@ (8001ec8 <main+0x28c>)
 8001e94:	f7ff fa11 	bl	80012ba <ILI9341_DrawText>
	HAL_Delay(2000);
 8001e98:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e9c:	f001 f804 	bl	8002ea8 <HAL_Delay>
	ILI9341_FillScreen(WHITE);
 8001ea0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ea4:	f7ff fd5a 	bl	800195c <ILI9341_FillScreen>

	for(uint16_t i = 0; i <= 10; i++)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8001eae:	e095      	b.n	8001fdc <main+0x3a0>
 8001eb0:	0800876c 	.word	0x0800876c
 8001eb4:	080074b8 	.word	0x080074b8
 8001eb8:	080074c4 	.word	0x080074c4
 8001ebc:	20000294 	.word	0x20000294
 8001ec0:	08007e08 	.word	0x08007e08
 8001ec4:	08007624 	.word	0x08007624
 8001ec8:	080074d0 	.word	0x080074d0
	{
		sprintf(BufferText, "Counting: %d", i);
 8001ecc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4996      	ldr	r1, [pc, #600]	@ (800212c <main+0x4f0>)
 8001ed4:	4896      	ldr	r0, [pc, #600]	@ (8002130 <main+0x4f4>)
 8001ed6:	f003 f9a3 	bl	8005220 <siprintf>
		ILI9341_DrawText(BufferText, FONT3, 10, 10, BLACK, WHITE);
 8001eda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ede:	9301      	str	r3, [sp, #4]
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	230a      	movs	r3, #10
 8001ee6:	220a      	movs	r2, #10
 8001ee8:	4992      	ldr	r1, [pc, #584]	@ (8002134 <main+0x4f8>)
 8001eea:	4891      	ldr	r0, [pc, #580]	@ (8002130 <main+0x4f4>)
 8001eec:	f7ff f9e5 	bl	80012ba <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 30, BLUE, WHITE);
 8001ef0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	231f      	movs	r3, #31
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	231e      	movs	r3, #30
 8001efc:	220a      	movs	r2, #10
 8001efe:	498d      	ldr	r1, [pc, #564]	@ (8002134 <main+0x4f8>)
 8001f00:	488b      	ldr	r0, [pc, #556]	@ (8002130 <main+0x4f4>)
 8001f02:	f7ff f9da 	bl	80012ba <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 50, RED, WHITE);
 8001f06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2332      	movs	r3, #50	@ 0x32
 8001f14:	220a      	movs	r2, #10
 8001f16:	4987      	ldr	r1, [pc, #540]	@ (8002134 <main+0x4f8>)
 8001f18:	4885      	ldr	r0, [pc, #532]	@ (8002130 <main+0x4f4>)
 8001f1a:	f7ff f9ce 	bl	80012ba <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 70, GREEN, WHITE);
 8001f1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	2346      	movs	r3, #70	@ 0x46
 8001f2c:	220a      	movs	r2, #10
 8001f2e:	4981      	ldr	r1, [pc, #516]	@ (8002134 <main+0x4f8>)
 8001f30:	487f      	ldr	r0, [pc, #508]	@ (8002130 <main+0x4f4>)
 8001f32:	f7ff f9c2 	bl	80012ba <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 90, BLACK, WHITE);
 8001f36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	235a      	movs	r3, #90	@ 0x5a
 8001f42:	220a      	movs	r2, #10
 8001f44:	497b      	ldr	r1, [pc, #492]	@ (8002134 <main+0x4f8>)
 8001f46:	487a      	ldr	r0, [pc, #488]	@ (8002130 <main+0x4f4>)
 8001f48:	f7ff f9b7 	bl	80012ba <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 110, BLUE, WHITE);
 8001f4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	231f      	movs	r3, #31
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	236e      	movs	r3, #110	@ 0x6e
 8001f58:	220a      	movs	r2, #10
 8001f5a:	4976      	ldr	r1, [pc, #472]	@ (8002134 <main+0x4f8>)
 8001f5c:	4874      	ldr	r0, [pc, #464]	@ (8002130 <main+0x4f4>)
 8001f5e:	f7ff f9ac 	bl	80012ba <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 130, RED, WHITE);
 8001f62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2382      	movs	r3, #130	@ 0x82
 8001f70:	220a      	movs	r2, #10
 8001f72:	4970      	ldr	r1, [pc, #448]	@ (8002134 <main+0x4f8>)
 8001f74:	486e      	ldr	r0, [pc, #440]	@ (8002130 <main+0x4f4>)
 8001f76:	f7ff f9a0 	bl	80012ba <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 150, GREEN, WHITE);
 8001f7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2396      	movs	r3, #150	@ 0x96
 8001f88:	220a      	movs	r2, #10
 8001f8a:	496a      	ldr	r1, [pc, #424]	@ (8002134 <main+0x4f8>)
 8001f8c:	4868      	ldr	r0, [pc, #416]	@ (8002130 <main+0x4f4>)
 8001f8e:	f7ff f994 	bl	80012ba <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 170, WHITE, BLACK);
 8001f92:	2300      	movs	r3, #0
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	23aa      	movs	r3, #170	@ 0xaa
 8001f9e:	220a      	movs	r2, #10
 8001fa0:	4964      	ldr	r1, [pc, #400]	@ (8002134 <main+0x4f8>)
 8001fa2:	4863      	ldr	r0, [pc, #396]	@ (8002130 <main+0x4f4>)
 8001fa4:	f7ff f989 	bl	80012ba <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 190, BLUE, BLACK);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	231f      	movs	r3, #31
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	23be      	movs	r3, #190	@ 0xbe
 8001fb2:	220a      	movs	r2, #10
 8001fb4:	495f      	ldr	r1, [pc, #380]	@ (8002134 <main+0x4f8>)
 8001fb6:	485e      	ldr	r0, [pc, #376]	@ (8002130 <main+0x4f4>)
 8001fb8:	f7ff f97f 	bl	80012ba <ILI9341_DrawText>
		ILI9341_DrawText(BufferText, FONT3, 10, 210, RED, BLACK);
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	9301      	str	r3, [sp, #4]
 8001fc0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	23d2      	movs	r3, #210	@ 0xd2
 8001fc8:	220a      	movs	r2, #10
 8001fca:	495a      	ldr	r1, [pc, #360]	@ (8002134 <main+0x4f8>)
 8001fcc:	4858      	ldr	r0, [pc, #352]	@ (8002130 <main+0x4f4>)
 8001fce:	f7ff f974 	bl	80012ba <ILI9341_DrawText>
	for(uint16_t i = 0; i <= 10; i++)
 8001fd2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8001fdc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8001fe0:	2b0a      	cmp	r3, #10
 8001fe2:	f67f af73 	bls.w	8001ecc <main+0x290>
	}
	HAL_Delay(1000);
 8001fe6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fea:	f000 ff5d 	bl	8002ea8 <HAL_Delay>

	/* COUNTING SINGLE SEGMENT */
	ILI9341_FillScreen(WHITE);
 8001fee:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ff2:	f7ff fcb3 	bl	800195c <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001ff6:	2003      	movs	r0, #3
 8001ff8:	f7ff fbc4 	bl	8001784 <ILI9341_SetRotation>
	ILI9341_DrawText("Counting single segment", FONT3, 10, 10, BLACK, WHITE);
 8001ffc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	2300      	movs	r3, #0
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	230a      	movs	r3, #10
 8002008:	220a      	movs	r2, #10
 800200a:	494a      	ldr	r1, [pc, #296]	@ (8002134 <main+0x4f8>)
 800200c:	484a      	ldr	r0, [pc, #296]	@ (8002138 <main+0x4fc>)
 800200e:	f7ff f954 	bl	80012ba <ILI9341_DrawText>
	HAL_Delay(2000);
 8002012:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002016:	f000 ff47 	bl	8002ea8 <HAL_Delay>
	ILI9341_FillScreen(WHITE);
 800201a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800201e:	f7ff fc9d 	bl	800195c <ILI9341_FillScreen>

	for(uint16_t i = 0; i <= 100; i++)
 8002022:	2300      	movs	r3, #0
 8002024:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8002028:	e019      	b.n	800205e <main+0x422>
	{
		sprintf(BufferText, "Counting: %d", i);
 800202a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800202e:	461a      	mov	r2, r3
 8002030:	493e      	ldr	r1, [pc, #248]	@ (800212c <main+0x4f0>)
 8002032:	483f      	ldr	r0, [pc, #252]	@ (8002130 <main+0x4f4>)
 8002034:	f003 f8f4 	bl	8005220 <siprintf>
		ILI9341_DrawText(BufferText, FONT4, 10, 10, BLACK, WHITE);
 8002038:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	2300      	movs	r3, #0
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	230a      	movs	r3, #10
 8002044:	220a      	movs	r2, #10
 8002046:	493d      	ldr	r1, [pc, #244]	@ (800213c <main+0x500>)
 8002048:	4839      	ldr	r0, [pc, #228]	@ (8002130 <main+0x4f4>)
 800204a:	f7ff f936 	bl	80012ba <ILI9341_DrawText>
		HAL_Delay(10);
 800204e:	200a      	movs	r0, #10
 8002050:	f000 ff2a 	bl	8002ea8 <HAL_Delay>
	for(uint16_t i = 0; i <= 100; i++)
 8002054:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8002058:	3301      	adds	r3, #1
 800205a:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 800205e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8002062:	2b64      	cmp	r3, #100	@ 0x64
 8002064:	d9e1      	bls.n	800202a <main+0x3ee>
	}
	HAL_Delay(1000);
 8002066:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800206a:	f000 ff1d 	bl	8002ea8 <HAL_Delay>

	/* ALIGNMENT TEST */
	ILI9341_FillScreen(WHITE);
 800206e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002072:	f7ff fc73 	bl	800195c <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8002076:	2003      	movs	r0, #3
 8002078:	f7ff fb84 	bl	8001784 <ILI9341_SetRotation>
	ILI9341_DrawText("Rectangle alignment check", FONT3, 10, 10, BLACK, WHITE);
 800207c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	2300      	movs	r3, #0
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	230a      	movs	r3, #10
 8002088:	220a      	movs	r2, #10
 800208a:	492a      	ldr	r1, [pc, #168]	@ (8002134 <main+0x4f8>)
 800208c:	482c      	ldr	r0, [pc, #176]	@ (8002140 <main+0x504>)
 800208e:	f7ff f914 	bl	80012ba <ILI9341_DrawText>
	HAL_Delay(2000);
 8002092:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002096:	f000 ff07 	bl	8002ea8 <HAL_Delay>
	ILI9341_FillScreen(WHITE);
 800209a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800209e:	f7ff fc5d 	bl	800195c <ILI9341_FillScreen>

	ILI9341_DrawHollowRectangleCoord(50, 50, 100, 100, BLACK);
 80020a2:	2300      	movs	r3, #0
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2364      	movs	r3, #100	@ 0x64
 80020a8:	2264      	movs	r2, #100	@ 0x64
 80020aa:	2132      	movs	r1, #50	@ 0x32
 80020ac:	2032      	movs	r0, #50	@ 0x32
 80020ae:	f7fe ffad 	bl	800100c <ILI9341_DrawHollowRectangleCoord>
	ILI9341_DrawFilledRectangleCoord(20, 20, 50, 50, BLACK);
 80020b2:	2300      	movs	r3, #0
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	2332      	movs	r3, #50	@ 0x32
 80020b8:	2232      	movs	r2, #50	@ 0x32
 80020ba:	2114      	movs	r1, #20
 80020bc:	2014      	movs	r0, #20
 80020be:	f7ff f826 	bl	800110e <ILI9341_DrawFilledRectangleCoord>
	ILI9341_DrawHollowRectangleCoord(10, 10, 19, 19, BLACK);
 80020c2:	2300      	movs	r3, #0
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2313      	movs	r3, #19
 80020c8:	2213      	movs	r2, #19
 80020ca:	210a      	movs	r1, #10
 80020cc:	200a      	movs	r0, #10
 80020ce:	f7fe ff9d 	bl	800100c <ILI9341_DrawHollowRectangleCoord>
	HAL_Delay(1000);
 80020d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020d6:	f000 fee7 	bl	8002ea8 <HAL_Delay>

	/* LINES EXAMPLE */
	ILI9341_FillScreen(WHITE);
 80020da:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80020de:	f7ff fc3d 	bl	800195c <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 80020e2:	2003      	movs	r0, #3
 80020e4:	f7ff fb4e 	bl	8001784 <ILI9341_SetRotation>
	ILI9341_DrawText("Randomly placed and sized", FONT3, 10, 10, BLACK, WHITE);
 80020e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	2300      	movs	r3, #0
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	230a      	movs	r3, #10
 80020f4:	220a      	movs	r2, #10
 80020f6:	490f      	ldr	r1, [pc, #60]	@ (8002134 <main+0x4f8>)
 80020f8:	4812      	ldr	r0, [pc, #72]	@ (8002144 <main+0x508>)
 80020fa:	f7ff f8de 	bl	80012ba <ILI9341_DrawText>
	ILI9341_DrawText("Horizontal and Vertical lines", FONT3, 10, 30, BLACK, WHITE);
 80020fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	2300      	movs	r3, #0
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	231e      	movs	r3, #30
 800210a:	220a      	movs	r2, #10
 800210c:	4909      	ldr	r1, [pc, #36]	@ (8002134 <main+0x4f8>)
 800210e:	480e      	ldr	r0, [pc, #56]	@ (8002148 <main+0x50c>)
 8002110:	f7ff f8d3 	bl	80012ba <ILI9341_DrawText>
	HAL_Delay(2000);
 8002114:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002118:	f000 fec6 	bl	8002ea8 <HAL_Delay>
	ILI9341_FillScreen(WHITE);
 800211c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002120:	f7ff fc1c 	bl	800195c <ILI9341_FillScreen>

	for(uint32_t i = 0; i < 30000; i++)
 8002124:	2300      	movs	r3, #0
 8002126:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002128:	e04d      	b.n	80021c6 <main+0x58a>
 800212a:	bf00      	nop
 800212c:	080074f4 	.word	0x080074f4
 8002130:	20000294 	.word	0x20000294
 8002134:	08007e08 	.word	0x08007e08
 8002138:	08007504 	.word	0x08007504
 800213c:	0800876c 	.word	0x0800876c
 8002140:	0800751c 	.word	0x0800751c
 8002144:	08007538 	.word	0x08007538
 8002148:	08007554 	.word	0x08007554
	{
		uint32_t random_num = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
		uint16_t xr = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	817b      	strh	r3, [r7, #10]
		uint16_t yr = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	813b      	strh	r3, [r7, #8]
		uint16_t radiusr = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	80fb      	strh	r3, [r7, #6]
		uint16_t colourr = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	80bb      	strh	r3, [r7, #4]

		//Get random inputs
		random_num = rand();
 8002160:	f002 fb04 	bl	800476c <rand>
 8002164:	4603      	mov	r3, r0
 8002166:	60fb      	str	r3, [r7, #12]
		xr = random_num;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	817b      	strh	r3, [r7, #10]
		random_num = rand();
 800216c:	f002 fafe 	bl	800476c <rand>
 8002170:	4603      	mov	r3, r0
 8002172:	60fb      	str	r3, [r7, #12]
		yr = random_num;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	813b      	strh	r3, [r7, #8]
		random_num = rand();
 8002178:	f002 faf8 	bl	800476c <rand>
 800217c:	4603      	mov	r3, r0
 800217e:	60fb      	str	r3, [r7, #12]
		radiusr = random_num;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	80fb      	strh	r3, [r7, #6]
		random_num = rand();
 8002184:	f002 faf2 	bl	800476c <rand>
 8002188:	4603      	mov	r3, r0
 800218a:	60fb      	str	r3, [r7, #12]
		colourr = random_num;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	80bb      	strh	r3, [r7, #4]

		xr &= 0x01FF;
 8002190:	897b      	ldrh	r3, [r7, #10]
 8002192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002196:	817b      	strh	r3, [r7, #10]
		yr &= 0x01FF;
 8002198:	893b      	ldrh	r3, [r7, #8]
 800219a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800219e:	813b      	strh	r3, [r7, #8]
		radiusr &= 0x001F;
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	80fb      	strh	r3, [r7, #6]

		ILI9341_DrawHLine(xr, yr, radiusr, colourr);
 80021a8:	88bb      	ldrh	r3, [r7, #4]
 80021aa:	88fa      	ldrh	r2, [r7, #6]
 80021ac:	8939      	ldrh	r1, [r7, #8]
 80021ae:	8978      	ldrh	r0, [r7, #10]
 80021b0:	f7ff fcbc 	bl	8001b2c <ILI9341_DrawHLine>
		ILI9341_DrawVLine(xr, yr, radiusr, colourr);
 80021b4:	88bb      	ldrh	r3, [r7, #4]
 80021b6:	88fa      	ldrh	r2, [r7, #6]
 80021b8:	8939      	ldrh	r1, [r7, #8]
 80021ba:	8978      	ldrh	r0, [r7, #10]
 80021bc:	f7ff fcfa 	bl	8001bb4 <ILI9341_DrawVLine>
	for(uint32_t i = 0; i < 30000; i++)
 80021c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021c2:	3301      	adds	r3, #1
 80021c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021c8:	f247 522f 	movw	r2, #29999	@ 0x752f
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d9bd      	bls.n	800214c <main+0x510>
	}
	HAL_Delay(1000);
 80021d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021d4:	f000 fe68 	bl	8002ea8 <HAL_Delay>

	/* HOLLOW CIRCLES EXAMPLE */
	ILI9341_FillScreen(WHITE);
 80021d8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80021dc:	f7ff fbbe 	bl	800195c <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 80021e0:	2003      	movs	r0, #3
 80021e2:	f7ff facf 	bl	8001784 <ILI9341_SetRotation>
	ILI9341_DrawText("Randomly placed and sized", FONT3, 10, 10, BLACK, WHITE);
 80021e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	2300      	movs	r3, #0
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	230a      	movs	r3, #10
 80021f2:	220a      	movs	r2, #10
 80021f4:	49af      	ldr	r1, [pc, #700]	@ (80024b4 <main+0x878>)
 80021f6:	48b0      	ldr	r0, [pc, #704]	@ (80024b8 <main+0x87c>)
 80021f8:	f7ff f85f 	bl	80012ba <ILI9341_DrawText>
	ILI9341_DrawText("Circles", FONT3, 10, 30, BLACK, WHITE);
 80021fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	2300      	movs	r3, #0
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	231e      	movs	r3, #30
 8002208:	220a      	movs	r2, #10
 800220a:	49aa      	ldr	r1, [pc, #680]	@ (80024b4 <main+0x878>)
 800220c:	48ab      	ldr	r0, [pc, #684]	@ (80024bc <main+0x880>)
 800220e:	f7ff f854 	bl	80012ba <ILI9341_DrawText>
	HAL_Delay(2000);
 8002212:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002216:	f000 fe47 	bl	8002ea8 <HAL_Delay>
	ILI9341_FillScreen(WHITE);
 800221a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800221e:	f7ff fb9d 	bl	800195c <ILI9341_FillScreen>

	for(uint32_t i = 0; i < 3000; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002226:	e038      	b.n	800229a <main+0x65e>
	{
		uint32_t random_num = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	61bb      	str	r3, [r7, #24]
		uint16_t xr = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	82fb      	strh	r3, [r7, #22]
		uint16_t yr = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	82bb      	strh	r3, [r7, #20]
		uint16_t radiusr = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	827b      	strh	r3, [r7, #18]
		uint16_t colourr = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	823b      	strh	r3, [r7, #16]

		random_num = rand();
 800223c:	f002 fa96 	bl	800476c <rand>
 8002240:	4603      	mov	r3, r0
 8002242:	61bb      	str	r3, [r7, #24]
		xr = random_num;
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	82fb      	strh	r3, [r7, #22]
		random_num = rand();
 8002248:	f002 fa90 	bl	800476c <rand>
 800224c:	4603      	mov	r3, r0
 800224e:	61bb      	str	r3, [r7, #24]
		yr = random_num;
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	82bb      	strh	r3, [r7, #20]
		random_num = rand();
 8002254:	f002 fa8a 	bl	800476c <rand>
 8002258:	4603      	mov	r3, r0
 800225a:	61bb      	str	r3, [r7, #24]
		radiusr = random_num;
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	827b      	strh	r3, [r7, #18]
		random_num = rand();
 8002260:	f002 fa84 	bl	800476c <rand>
 8002264:	4603      	mov	r3, r0
 8002266:	61bb      	str	r3, [r7, #24]
		colourr = random_num;
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	823b      	strh	r3, [r7, #16]

		xr &= 0x01FF;
 800226c:	8afb      	ldrh	r3, [r7, #22]
 800226e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002272:	82fb      	strh	r3, [r7, #22]
		yr &= 0x01FF;
 8002274:	8abb      	ldrh	r3, [r7, #20]
 8002276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800227a:	82bb      	strh	r3, [r7, #20]
		radiusr &= 0x001F;
 800227c:	8a7b      	ldrh	r3, [r7, #18]
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	827b      	strh	r3, [r7, #18]

		ILI9341_DrawHollowCircle(xr, yr, radiusr*2, colourr);
 8002284:	8a7b      	ldrh	r3, [r7, #18]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	8a3b      	ldrh	r3, [r7, #16]
 800228c:	8ab9      	ldrh	r1, [r7, #20]
 800228e:	8af8      	ldrh	r0, [r7, #22]
 8002290:	f7fe fd7e 	bl	8000d90 <ILI9341_DrawHollowCircle>
	for(uint32_t i = 0; i < 3000; i++)
 8002294:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002296:	3301      	adds	r3, #1
 8002298:	66bb      	str	r3, [r7, #104]	@ 0x68
 800229a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800229c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d9c1      	bls.n	8002228 <main+0x5ec>
	}
	HAL_Delay(1000);
 80022a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022a8:	f000 fdfe 	bl	8002ea8 <HAL_Delay>

	/* FILLED CIRCLES EXAMPLE */
	ILI9341_FillScreen(WHITE);
 80022ac:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80022b0:	f7ff fb54 	bl	800195c <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 80022b4:	2003      	movs	r0, #3
 80022b6:	f7ff fa65 	bl	8001784 <ILI9341_SetRotation>
	ILI9341_DrawText("Randomly placed and sized", FONT3, 10, 10, BLACK,WHITE);
 80022ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022be:	9301      	str	r3, [sp, #4]
 80022c0:	2300      	movs	r3, #0
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	230a      	movs	r3, #10
 80022c6:	220a      	movs	r2, #10
 80022c8:	497a      	ldr	r1, [pc, #488]	@ (80024b4 <main+0x878>)
 80022ca:	487b      	ldr	r0, [pc, #492]	@ (80024b8 <main+0x87c>)
 80022cc:	f7fe fff5 	bl	80012ba <ILI9341_DrawText>
	ILI9341_DrawText("Filled Circles", FONT3, 10, 30, BLACK, WHITE);
 80022d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022d4:	9301      	str	r3, [sp, #4]
 80022d6:	2300      	movs	r3, #0
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	231e      	movs	r3, #30
 80022dc:	220a      	movs	r2, #10
 80022de:	4975      	ldr	r1, [pc, #468]	@ (80024b4 <main+0x878>)
 80022e0:	4877      	ldr	r0, [pc, #476]	@ (80024c0 <main+0x884>)
 80022e2:	f7fe ffea 	bl	80012ba <ILI9341_DrawText>
	HAL_Delay(2000);
 80022e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80022ea:	f000 fddd 	bl	8002ea8 <HAL_Delay>
	ILI9341_FillScreen(WHITE);
 80022ee:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80022f2:	f7ff fb33 	bl	800195c <ILI9341_FillScreen>

	for(uint32_t i = 0; i < 1000; i++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80022fa:	e038      	b.n	800236e <main+0x732>
	{
		uint32_t random_num = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	627b      	str	r3, [r7, #36]	@ 0x24
		uint16_t xr = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	847b      	strh	r3, [r7, #34]	@ 0x22
		uint16_t yr = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	843b      	strh	r3, [r7, #32]
		uint16_t radiusr = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	83fb      	strh	r3, [r7, #30]
		uint16_t colourr = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	83bb      	strh	r3, [r7, #28]

		random_num = rand();
 8002310:	f002 fa2c 	bl	800476c <rand>
 8002314:	4603      	mov	r3, r0
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
		xr = random_num;
 8002318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231a:	847b      	strh	r3, [r7, #34]	@ 0x22
		random_num = rand();
 800231c:	f002 fa26 	bl	800476c <rand>
 8002320:	4603      	mov	r3, r0
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
		yr = random_num;
 8002324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002326:	843b      	strh	r3, [r7, #32]
		random_num = rand();
 8002328:	f002 fa20 	bl	800476c <rand>
 800232c:	4603      	mov	r3, r0
 800232e:	627b      	str	r3, [r7, #36]	@ 0x24
		radiusr = random_num;
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	83fb      	strh	r3, [r7, #30]
		random_num = rand();
 8002334:	f002 fa1a 	bl	800476c <rand>
 8002338:	4603      	mov	r3, r0
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
		colourr = random_num;
 800233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233e:	83bb      	strh	r3, [r7, #28]

		xr &= 0x01FF;
 8002340:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002346:	847b      	strh	r3, [r7, #34]	@ 0x22
		yr &= 0x01FF;
 8002348:	8c3b      	ldrh	r3, [r7, #32]
 800234a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234e:	843b      	strh	r3, [r7, #32]
		radiusr &= 0x001F;
 8002350:	8bfb      	ldrh	r3, [r7, #30]
 8002352:	f003 031f 	and.w	r3, r3, #31
 8002356:	83fb      	strh	r3, [r7, #30]

		ILI9341_DrawFilledCircle(xr, yr, radiusr/2, colourr);
 8002358:	8bfb      	ldrh	r3, [r7, #30]
 800235a:	085b      	lsrs	r3, r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	8bbb      	ldrh	r3, [r7, #28]
 8002360:	8c39      	ldrh	r1, [r7, #32]
 8002362:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8002364:	f7fe fdca 	bl	8000efc <ILI9341_DrawFilledCircle>
	for(uint32_t i = 0; i < 1000; i++)
 8002368:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800236a:	3301      	adds	r3, #1
 800236c:	667b      	str	r3, [r7, #100]	@ 0x64
 800236e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002370:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002374:	d3c2      	bcc.n	80022fc <main+0x6c0>
	}
	HAL_Delay(1000);
 8002376:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800237a:	f000 fd95 	bl	8002ea8 <HAL_Delay>

	/* HOLLOW RECTANGLES EXAMPLE */
	ILI9341_FillScreen(WHITE);
 800237e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002382:	f7ff faeb 	bl	800195c <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8002386:	2003      	movs	r0, #3
 8002388:	f7ff f9fc 	bl	8001784 <ILI9341_SetRotation>
	ILI9341_DrawText("Randomly placed and sized", FONT3, 10, 10, BLACK, WHITE);
 800238c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	2300      	movs	r3, #0
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	230a      	movs	r3, #10
 8002398:	220a      	movs	r2, #10
 800239a:	4946      	ldr	r1, [pc, #280]	@ (80024b4 <main+0x878>)
 800239c:	4846      	ldr	r0, [pc, #280]	@ (80024b8 <main+0x87c>)
 800239e:	f7fe ff8c 	bl	80012ba <ILI9341_DrawText>
	ILI9341_DrawText("Rectangles", FONT3, 10, 30, BLACK, WHITE);
 80023a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	2300      	movs	r3, #0
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	231e      	movs	r3, #30
 80023ae:	220a      	movs	r2, #10
 80023b0:	4940      	ldr	r1, [pc, #256]	@ (80024b4 <main+0x878>)
 80023b2:	4844      	ldr	r0, [pc, #272]	@ (80024c4 <main+0x888>)
 80023b4:	f7fe ff81 	bl	80012ba <ILI9341_DrawText>
	HAL_Delay(2000);
 80023b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80023bc:	f000 fd74 	bl	8002ea8 <HAL_Delay>
	ILI9341_FillScreen(WHITE);
 80023c0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80023c4:	f7ff faca 	bl	800195c <ILI9341_FillScreen>

	for(uint32_t i = 0; i < 20000; i++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80023cc:	e040      	b.n	8002450 <main+0x814>
	{
		uint32_t random_num = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	633b      	str	r3, [r7, #48]	@ 0x30
		uint16_t xr = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		uint16_t yr = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		uint16_t radiusr = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	857b      	strh	r3, [r7, #42]	@ 0x2a
		uint16_t colourr = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	853b      	strh	r3, [r7, #40]	@ 0x28

		random_num = rand();
 80023e2:	f002 f9c3 	bl	800476c <rand>
 80023e6:	4603      	mov	r3, r0
 80023e8:	633b      	str	r3, [r7, #48]	@ 0x30
		xr = random_num;
 80023ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		random_num = rand();
 80023ee:	f002 f9bd 	bl	800476c <rand>
 80023f2:	4603      	mov	r3, r0
 80023f4:	633b      	str	r3, [r7, #48]	@ 0x30
		yr = random_num;
 80023f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		random_num = rand();
 80023fa:	f002 f9b7 	bl	800476c <rand>
 80023fe:	4603      	mov	r3, r0
 8002400:	633b      	str	r3, [r7, #48]	@ 0x30
		radiusr = random_num;
 8002402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002404:	857b      	strh	r3, [r7, #42]	@ 0x2a
		random_num = rand();
 8002406:	f002 f9b1 	bl	800476c <rand>
 800240a:	4603      	mov	r3, r0
 800240c:	633b      	str	r3, [r7, #48]	@ 0x30
		colourr = random_num;
 800240e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002410:	853b      	strh	r3, [r7, #40]	@ 0x28

		xr &= 0x01FF;
 8002412:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002418:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		yr &= 0x01FF;
 800241a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800241c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002420:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		radiusr &= 0x001F;
 8002422:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	857b      	strh	r3, [r7, #42]	@ 0x2a

		ILI9341_DrawHollowRectangleCoord(xr, yr, xr+radiusr, yr+radiusr, colourr);
 800242a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800242c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800242e:	4413      	add	r3, r2
 8002430:	b29c      	uxth	r4, r3
 8002432:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002434:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002436:	4413      	add	r3, r2
 8002438:	b29a      	uxth	r2, r3
 800243a:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 800243c:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
 800243e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	4613      	mov	r3, r2
 8002444:	4622      	mov	r2, r4
 8002446:	f7fe fde1 	bl	800100c <ILI9341_DrawHollowRectangleCoord>
	for(uint32_t i = 0; i < 20000; i++)
 800244a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800244c:	3301      	adds	r3, #1
 800244e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002450:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002452:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002456:	4293      	cmp	r3, r2
 8002458:	d9b9      	bls.n	80023ce <main+0x792>
	}
	HAL_Delay(1000);
 800245a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800245e:	f000 fd23 	bl	8002ea8 <HAL_Delay>

	/* FILLED RECTANGLES EXAMPLE */
	ILI9341_FillScreen(WHITE);
 8002462:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002466:	f7ff fa79 	bl	800195c <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 800246a:	2003      	movs	r0, #3
 800246c:	f7ff f98a 	bl	8001784 <ILI9341_SetRotation>
	ILI9341_DrawText("Randomly placed and sized", FONT3, 10, 10, BLACK, WHITE);
 8002470:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002474:	9301      	str	r3, [sp, #4]
 8002476:	2300      	movs	r3, #0
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	230a      	movs	r3, #10
 800247c:	220a      	movs	r2, #10
 800247e:	490d      	ldr	r1, [pc, #52]	@ (80024b4 <main+0x878>)
 8002480:	480d      	ldr	r0, [pc, #52]	@ (80024b8 <main+0x87c>)
 8002482:	f7fe ff1a 	bl	80012ba <ILI9341_DrawText>
	ILI9341_DrawText("Filled Rectangles", FONT3, 10, 30, BLACK, WHITE);
 8002486:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	2300      	movs	r3, #0
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	231e      	movs	r3, #30
 8002492:	220a      	movs	r2, #10
 8002494:	4907      	ldr	r1, [pc, #28]	@ (80024b4 <main+0x878>)
 8002496:	480c      	ldr	r0, [pc, #48]	@ (80024c8 <main+0x88c>)
 8002498:	f7fe ff0f 	bl	80012ba <ILI9341_DrawText>
	HAL_Delay(2000);
 800249c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80024a0:	f000 fd02 	bl	8002ea8 <HAL_Delay>
	ILI9341_FillScreen(WHITE);
 80024a4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80024a8:	f7ff fa58 	bl	800195c <ILI9341_FillScreen>

	for(uint32_t i = 0; i < 20000; i++)
 80024ac:	2300      	movs	r3, #0
 80024ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024b0:	e046      	b.n	8002540 <main+0x904>
 80024b2:	bf00      	nop
 80024b4:	08007e08 	.word	0x08007e08
 80024b8:	08007538 	.word	0x08007538
 80024bc:	08007574 	.word	0x08007574
 80024c0:	0800757c 	.word	0x0800757c
 80024c4:	0800758c 	.word	0x0800758c
 80024c8:	08007598 	.word	0x08007598
	{
		uint32_t random_num = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		uint16_t xr = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	877b      	strh	r3, [r7, #58]	@ 0x3a
		uint16_t yr = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	873b      	strh	r3, [r7, #56]	@ 0x38
		uint16_t radiusr = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	86fb      	strh	r3, [r7, #54]	@ 0x36
		uint16_t color = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	86bb      	strh	r3, [r7, #52]	@ 0x34

		random_num = rand();
 80024e0:	f002 f944 	bl	800476c <rand>
 80024e4:	4603      	mov	r3, r0
 80024e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		xr = random_num;
 80024e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ea:	877b      	strh	r3, [r7, #58]	@ 0x3a
		random_num = rand();
 80024ec:	f002 f93e 	bl	800476c <rand>
 80024f0:	4603      	mov	r3, r0
 80024f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		yr = random_num;
 80024f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f6:	873b      	strh	r3, [r7, #56]	@ 0x38
		random_num = rand();
 80024f8:	f002 f938 	bl	800476c <rand>
 80024fc:	4603      	mov	r3, r0
 80024fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		radiusr = random_num;
 8002500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002502:	86fb      	strh	r3, [r7, #54]	@ 0x36
		random_num = rand();
 8002504:	f002 f932 	bl	800476c <rand>
 8002508:	4603      	mov	r3, r0
 800250a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		color = random_num;
 800250c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800250e:	86bb      	strh	r3, [r7, #52]	@ 0x34

		xr &= 0x01FF;
 8002510:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002516:	877b      	strh	r3, [r7, #58]	@ 0x3a
		yr &= 0x01FF;
 8002518:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800251a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800251e:	873b      	strh	r3, [r7, #56]	@ 0x38
		radiusr &= 0x001F;
 8002520:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	86fb      	strh	r3, [r7, #54]	@ 0x36

		ILI9341_DrawRectangle(xr, yr, radiusr, radiusr, color);
 8002528:	8efc      	ldrh	r4, [r7, #54]	@ 0x36
 800252a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800252c:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800252e:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 8002530:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4623      	mov	r3, r4
 8002536:	f7ff fa9d 	bl	8001a74 <ILI9341_DrawRectangle>
	for(uint32_t i = 0; i < 20000; i++)
 800253a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800253c:	3301      	adds	r3, #1
 800253e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002540:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002542:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002546:	4293      	cmp	r3, r2
 8002548:	d9c0      	bls.n	80024cc <main+0x890>
	}
	HAL_Delay(1000);
 800254a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800254e:	f000 fcab 	bl	8002ea8 <HAL_Delay>

	/* INDIVIDUAL PIXEL EXAMPLE */

	ILI9341_FillScreen(WHITE);
 8002552:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002556:	f7ff fa01 	bl	800195c <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 800255a:	2003      	movs	r0, #3
 800255c:	f7ff f912 	bl	8001784 <ILI9341_SetRotation>
	ILI9341_DrawText("Slow draw by selecting", FONT3, 10, 10, BLACK, WHITE);
 8002560:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	2300      	movs	r3, #0
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	230a      	movs	r3, #10
 800256c:	220a      	movs	r2, #10
 800256e:	49ac      	ldr	r1, [pc, #688]	@ (8002820 <main+0xbe4>)
 8002570:	48ac      	ldr	r0, [pc, #688]	@ (8002824 <main+0xbe8>)
 8002572:	f7fe fea2 	bl	80012ba <ILI9341_DrawText>
	ILI9341_DrawText("and adressing pixels", FONT3, 10, 30, BLACK, WHITE);
 8002576:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800257a:	9301      	str	r3, [sp, #4]
 800257c:	2300      	movs	r3, #0
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	231e      	movs	r3, #30
 8002582:	220a      	movs	r2, #10
 8002584:	49a6      	ldr	r1, [pc, #664]	@ (8002820 <main+0xbe4>)
 8002586:	48a8      	ldr	r0, [pc, #672]	@ (8002828 <main+0xbec>)
 8002588:	f7fe fe97 	bl	80012ba <ILI9341_DrawText>
	HAL_Delay(2000);
 800258c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002590:	f000 fc8a 	bl	8002ea8 <HAL_Delay>
	ILI9341_FillScreen(WHITE);
 8002594:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002598:	f7ff f9e0 	bl	800195c <ILI9341_FillScreen>

	x = 0;
 800259c:	4ba3      	ldr	r3, [pc, #652]	@ (800282c <main+0xbf0>)
 800259e:	2200      	movs	r2, #0
 80025a0:	801a      	strh	r2, [r3, #0]
	y = 0;
 80025a2:	4ba3      	ldr	r3, [pc, #652]	@ (8002830 <main+0xbf4>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	801a      	strh	r2, [r3, #0]

	while (y < ILI9341_SCREEN_HEIGHT)
 80025a8:	e026      	b.n	80025f8 <main+0x9bc>
	{
		while ((x < ILI9341_SCREEN_WIDTH) && (y < ILI9341_SCREEN_HEIGHT))
		{
			if(x % 2)
 80025aa:	4ba0      	ldr	r3, [pc, #640]	@ (800282c <main+0xbf0>)
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d007      	beq.n	80025c8 <main+0x98c>
			{
				ILI9341_DrawPixel(x, y, BLACK);
 80025b8:	4b9c      	ldr	r3, [pc, #624]	@ (800282c <main+0xbf0>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	4a9c      	ldr	r2, [pc, #624]	@ (8002830 <main+0xbf4>)
 80025be:	8811      	ldrh	r1, [r2, #0]
 80025c0:	2200      	movs	r2, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff f9f0 	bl	80019a8 <ILI9341_DrawPixel>
			}
			x++;
 80025c8:	4b98      	ldr	r3, [pc, #608]	@ (800282c <main+0xbf0>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	4b96      	ldr	r3, [pc, #600]	@ (800282c <main+0xbf0>)
 80025d2:	801a      	strh	r2, [r3, #0]
		while ((x < ILI9341_SCREEN_WIDTH) && (y < ILI9341_SCREEN_HEIGHT))
 80025d4:	4b95      	ldr	r3, [pc, #596]	@ (800282c <main+0xbf0>)
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80025dc:	d203      	bcs.n	80025e6 <main+0x9aa>
 80025de:	4b94      	ldr	r3, [pc, #592]	@ (8002830 <main+0xbf4>)
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	2bef      	cmp	r3, #239	@ 0xef
 80025e4:	d9e1      	bls.n	80025aa <main+0x96e>
		}
		y++;
 80025e6:	4b92      	ldr	r3, [pc, #584]	@ (8002830 <main+0xbf4>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	4b90      	ldr	r3, [pc, #576]	@ (8002830 <main+0xbf4>)
 80025f0:	801a      	strh	r2, [r3, #0]
		x = 0;
 80025f2:	4b8e      	ldr	r3, [pc, #568]	@ (800282c <main+0xbf0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	801a      	strh	r2, [r3, #0]
	while (y < ILI9341_SCREEN_HEIGHT)
 80025f8:	4b8d      	ldr	r3, [pc, #564]	@ (8002830 <main+0xbf4>)
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	2bef      	cmp	r3, #239	@ 0xef
 80025fe:	d9e9      	bls.n	80025d4 <main+0x998>
	}

	x = 0;
 8002600:	4b8a      	ldr	r3, [pc, #552]	@ (800282c <main+0xbf0>)
 8002602:	2200      	movs	r2, #0
 8002604:	801a      	strh	r2, [r3, #0]
	y = 0;
 8002606:	4b8a      	ldr	r3, [pc, #552]	@ (8002830 <main+0xbf4>)
 8002608:	2200      	movs	r2, #0
 800260a:	801a      	strh	r2, [r3, #0]

	while (y < ILI9341_SCREEN_HEIGHT)
 800260c:	e026      	b.n	800265c <main+0xa20>
	{
		while ((x < ILI9341_SCREEN_WIDTH) && (y < ILI9341_SCREEN_HEIGHT))
		{
			if(y % 2)
 800260e:	4b88      	ldr	r3, [pc, #544]	@ (8002830 <main+0xbf4>)
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <main+0x9f0>
			{
				ILI9341_DrawPixel(x, y, BLACK);
 800261c:	4b83      	ldr	r3, [pc, #524]	@ (800282c <main+0xbf0>)
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	4a83      	ldr	r2, [pc, #524]	@ (8002830 <main+0xbf4>)
 8002622:	8811      	ldrh	r1, [r2, #0]
 8002624:	2200      	movs	r2, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff f9be 	bl	80019a8 <ILI9341_DrawPixel>
			}
			x++;
 800262c:	4b7f      	ldr	r3, [pc, #508]	@ (800282c <main+0xbf0>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	3301      	adds	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	4b7d      	ldr	r3, [pc, #500]	@ (800282c <main+0xbf0>)
 8002636:	801a      	strh	r2, [r3, #0]
		while ((x < ILI9341_SCREEN_WIDTH) && (y < ILI9341_SCREEN_HEIGHT))
 8002638:	4b7c      	ldr	r3, [pc, #496]	@ (800282c <main+0xbf0>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002640:	d203      	bcs.n	800264a <main+0xa0e>
 8002642:	4b7b      	ldr	r3, [pc, #492]	@ (8002830 <main+0xbf4>)
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	2bef      	cmp	r3, #239	@ 0xef
 8002648:	d9e1      	bls.n	800260e <main+0x9d2>
		}
		y++;
 800264a:	4b79      	ldr	r3, [pc, #484]	@ (8002830 <main+0xbf4>)
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	3301      	adds	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	4b77      	ldr	r3, [pc, #476]	@ (8002830 <main+0xbf4>)
 8002654:	801a      	strh	r2, [r3, #0]
		x = 0;
 8002656:	4b75      	ldr	r3, [pc, #468]	@ (800282c <main+0xbf0>)
 8002658:	2200      	movs	r2, #0
 800265a:	801a      	strh	r2, [r3, #0]
	while (y < ILI9341_SCREEN_HEIGHT)
 800265c:	4b74      	ldr	r3, [pc, #464]	@ (8002830 <main+0xbf4>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	2bef      	cmp	r3, #239	@ 0xef
 8002662:	d9e9      	bls.n	8002638 <main+0x9fc>
	}
	HAL_Delay(2000);
 8002664:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002668:	f000 fc1e 	bl	8002ea8 <HAL_Delay>

	/* INDIVIDUAL PIXEL EXAMPLE */
	ILI9341_FillScreen(WHITE);
 800266c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002670:	f7ff f974 	bl	800195c <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8002674:	2003      	movs	r0, #3
 8002676:	f7ff f885 	bl	8001784 <ILI9341_SetRotation>
	ILI9341_DrawText("Random position and color", FONT3, 10, 10, BLACK, WHITE);
 800267a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	2300      	movs	r3, #0
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	230a      	movs	r3, #10
 8002686:	220a      	movs	r2, #10
 8002688:	4965      	ldr	r1, [pc, #404]	@ (8002820 <main+0xbe4>)
 800268a:	486a      	ldr	r0, [pc, #424]	@ (8002834 <main+0xbf8>)
 800268c:	f7fe fe15 	bl	80012ba <ILI9341_DrawText>
	ILI9341_DrawText("500000 pixels", FONT3, 10, 30, BLACK, WHITE);
 8002690:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	2300      	movs	r3, #0
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	231e      	movs	r3, #30
 800269c:	220a      	movs	r2, #10
 800269e:	4960      	ldr	r1, [pc, #384]	@ (8002820 <main+0xbe4>)
 80026a0:	4865      	ldr	r0, [pc, #404]	@ (8002838 <main+0xbfc>)
 80026a2:	f7fe fe0a 	bl	80012ba <ILI9341_DrawText>
	HAL_Delay(2000);
 80026a6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80026aa:	f000 fbfd 	bl	8002ea8 <HAL_Delay>
	ILI9341_FillScreen(WHITE);
 80026ae:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80026b2:	f7ff f953 	bl	800195c <ILI9341_FillScreen>

	for(uint32_t i = 0; i < 500000; i++)
 80026b6:	2300      	movs	r3, #0
 80026b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026ba:	e032      	b.n	8002722 <main+0xae6>
	{
		uint32_t random_num = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	64bb      	str	r3, [r7, #72]	@ 0x48
		uint16_t xr = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		uint16_t yr = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

		random_num = rand();
 80026cc:	f002 f84e 	bl	800476c <rand>
 80026d0:	4603      	mov	r3, r0
 80026d2:	64bb      	str	r3, [r7, #72]	@ 0x48
		xr = random_num;
 80026d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		random_num = rand();
 80026da:	f002 f847 	bl	800476c <rand>
 80026de:	4603      	mov	r3, r0
 80026e0:	64bb      	str	r3, [r7, #72]	@ 0x48
		yr = random_num;
 80026e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026e4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		uint16_t color = rand();
 80026e8:	f002 f840 	bl	800476c <rand>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

		xr &= 0x01FF;
 80026f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80026f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		yr &= 0x01FF;
 80026fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002706:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

		ILI9341_DrawPixel(xr, yr, color);
 800270a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800270e:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8002712:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff f946 	bl	80019a8 <ILI9341_DrawPixel>
	for(uint32_t i = 0; i < 500000; i++)
 800271c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800271e:	3301      	adds	r3, #1
 8002720:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002722:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002724:	4a45      	ldr	r2, [pc, #276]	@ (800283c <main+0xc00>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d9c8      	bls.n	80026bc <main+0xa80>
	}
	HAL_Delay(2000);
 800272a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800272e:	f000 fbbb 	bl	8002ea8 <HAL_Delay>

	/* 565 GRAYSCALE EXAMPLE */
	ILI9341_FillScreen(WHITE);
 8002732:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002736:	f7ff f911 	bl	800195c <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 800273a:	2003      	movs	r0, #3
 800273c:	f7ff f822 	bl	8001784 <ILI9341_SetRotation>
	ILI9341_DrawText("Color gradient", FONT3, 10, 10, BLACK, WHITE);
 8002740:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	2300      	movs	r3, #0
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	230a      	movs	r3, #10
 800274c:	220a      	movs	r2, #10
 800274e:	4934      	ldr	r1, [pc, #208]	@ (8002820 <main+0xbe4>)
 8002750:	483b      	ldr	r0, [pc, #236]	@ (8002840 <main+0xc04>)
 8002752:	f7fe fdb2 	bl	80012ba <ILI9341_DrawText>
	ILI9341_DrawText("Grayscale", FONT3, 10, 30, BLACK, WHITE);
 8002756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	2300      	movs	r3, #0
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	231e      	movs	r3, #30
 8002762:	220a      	movs	r2, #10
 8002764:	492e      	ldr	r1, [pc, #184]	@ (8002820 <main+0xbe4>)
 8002766:	4837      	ldr	r0, [pc, #220]	@ (8002844 <main+0xc08>)
 8002768:	f7fe fda7 	bl	80012ba <ILI9341_DrawText>
	HAL_Delay(2000);
 800276c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002770:	f000 fb9a 	bl	8002ea8 <HAL_Delay>

	for(uint16_t i = 0; i <= ILI9341_SCREEN_WIDTH; i++)
 8002774:	2300      	movs	r3, #0
 8002776:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800277a:	e045      	b.n	8002808 <main+0xbcc>
	{
		uint16_t Red = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		uint16_t Green = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
		uint16_t Blue = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

		Red = i/(10);
 800278e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002792:	4a2d      	ldr	r2, [pc, #180]	@ (8002848 <main+0xc0c>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	08db      	lsrs	r3, r3, #3
 800279a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		Red <<= 11;
 800279e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80027a2:	02db      	lsls	r3, r3, #11
 80027a4:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		Green = i/(5);
 80027a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80027ac:	4a26      	ldr	r2, [pc, #152]	@ (8002848 <main+0xc0c>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	089b      	lsrs	r3, r3, #2
 80027b4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
		Green <<= 5;
 80027b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80027bc:	015b      	lsls	r3, r3, #5
 80027be:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
		Blue = i/(10);
 80027c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80027c6:	4a20      	ldr	r2, [pc, #128]	@ (8002848 <main+0xc0c>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	08db      	lsrs	r3, r3, #3
 80027ce:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

		uint16_t RGB = Red + Green + Blue;
 80027d2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 80027d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80027da:	4413      	add	r3, r2
 80027dc:	b29a      	uxth	r2, r3
 80027de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80027e2:	4413      	add	r3, r2
 80027e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		ILI9341_DrawRectangle(i, x, 1, 240, RGB);
 80027e8:	4b10      	ldr	r3, [pc, #64]	@ (800282c <main+0xbf0>)
 80027ea:	8819      	ldrh	r1, [r3, #0]
 80027ec:	f8b7 0056 	ldrh.w	r0, [r7, #86]	@ 0x56
 80027f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	23f0      	movs	r3, #240	@ 0xf0
 80027f8:	2201      	movs	r2, #1
 80027fa:	f7ff f93b 	bl	8001a74 <ILI9341_DrawRectangle>
	for(uint16_t i = 0; i <= ILI9341_SCREEN_WIDTH; i++)
 80027fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002802:	3301      	adds	r3, #1
 8002804:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8002808:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800280c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002810:	d9b4      	bls.n	800277c <main+0xb40>

	}
	HAL_Delay(2000);
 8002812:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002816:	f000 fb47 	bl	8002ea8 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800281a:	bf00      	nop
 800281c:	e7fd      	b.n	800281a <main+0xbde>
 800281e:	bf00      	nop
 8002820:	08007e08 	.word	0x08007e08
 8002824:	080075ac 	.word	0x080075ac
 8002828:	080075c4 	.word	0x080075c4
 800282c:	20000290 	.word	0x20000290
 8002830:	20000292 	.word	0x20000292
 8002834:	080075dc 	.word	0x080075dc
 8002838:	080075f8 	.word	0x080075f8
 800283c:	0007a11f 	.word	0x0007a11f
 8002840:	08007608 	.word	0x08007608
 8002844:	08007618 	.word	0x08007618
 8002848:	cccccccd 	.word	0xcccccccd

0800284c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b090      	sub	sp, #64	@ 0x40
 8002850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002852:	f107 0318 	add.w	r3, r7, #24
 8002856:	2228      	movs	r2, #40	@ 0x28
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f002 fd45 	bl	80052ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
 800286c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800286e:	2301      	movs	r3, #1
 8002870:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002872:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002876:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002878:	2300      	movs	r3, #0
 800287a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800287c:	2301      	movs	r3, #1
 800287e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002880:	2302      	movs	r3, #2
 8002882:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002884:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002888:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800288a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800288e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002890:	f107 0318 	add.w	r3, r7, #24
 8002894:	4618      	mov	r0, r3
 8002896:	f000 ffc3 	bl	8003820 <HAL_RCC_OscConfig>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80028a0:	f000 f8dc 	bl	8002a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028a4:	230f      	movs	r3, #15
 80028a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028a8:	2302      	movs	r3, #2
 80028aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	2102      	movs	r1, #2
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 fa30 	bl	8003d24 <HAL_RCC_ClockConfig>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80028ca:	f000 f8c7 	bl	8002a5c <Error_Handler>
  }
}
 80028ce:	bf00      	nop
 80028d0:	3740      	adds	r7, #64	@ 0x40
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028dc:	4b17      	ldr	r3, [pc, #92]	@ (800293c <MX_SPI1_Init+0x64>)
 80028de:	4a18      	ldr	r2, [pc, #96]	@ (8002940 <MX_SPI1_Init+0x68>)
 80028e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028e2:	4b16      	ldr	r3, [pc, #88]	@ (800293c <MX_SPI1_Init+0x64>)
 80028e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028ea:	4b14      	ldr	r3, [pc, #80]	@ (800293c <MX_SPI1_Init+0x64>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028f0:	4b12      	ldr	r3, [pc, #72]	@ (800293c <MX_SPI1_Init+0x64>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028f6:	4b11      	ldr	r3, [pc, #68]	@ (800293c <MX_SPI1_Init+0x64>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	@ (800293c <MX_SPI1_Init+0x64>)
 80028fe:	2200      	movs	r2, #0
 8002900:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002902:	4b0e      	ldr	r3, [pc, #56]	@ (800293c <MX_SPI1_Init+0x64>)
 8002904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002908:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800290a:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <MX_SPI1_Init+0x64>)
 800290c:	2208      	movs	r2, #8
 800290e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002910:	4b0a      	ldr	r3, [pc, #40]	@ (800293c <MX_SPI1_Init+0x64>)
 8002912:	2200      	movs	r2, #0
 8002914:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002916:	4b09      	ldr	r3, [pc, #36]	@ (800293c <MX_SPI1_Init+0x64>)
 8002918:	2200      	movs	r2, #0
 800291a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800291c:	4b07      	ldr	r3, [pc, #28]	@ (800293c <MX_SPI1_Init+0x64>)
 800291e:	2200      	movs	r2, #0
 8002920:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002922:	4b06      	ldr	r3, [pc, #24]	@ (800293c <MX_SPI1_Init+0x64>)
 8002924:	220a      	movs	r2, #10
 8002926:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002928:	4804      	ldr	r0, [pc, #16]	@ (800293c <MX_SPI1_Init+0x64>)
 800292a:	f001 fb57 	bl	8003fdc <HAL_SPI_Init>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002934:	f000 f892 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}
 800293c:	200001f4 	.word	0x200001f4
 8002940:	40013000 	.word	0x40013000

08002944 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800294a:	4b0c      	ldr	r3, [pc, #48]	@ (800297c <MX_DMA_Init+0x38>)
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	4a0b      	ldr	r2, [pc, #44]	@ (800297c <MX_DMA_Init+0x38>)
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	6153      	str	r3, [r2, #20]
 8002956:	4b09      	ldr	r3, [pc, #36]	@ (800297c <MX_DMA_Init+0x38>)
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	2100      	movs	r1, #0
 8002966:	200d      	movs	r0, #13
 8002968:	f000 fb99 	bl	800309e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800296c:	200d      	movs	r0, #13
 800296e:	f000 fbb2 	bl	80030d6 <HAL_NVIC_EnableIRQ>

}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000

08002980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002986:	f107 0310 	add.w	r3, r7, #16
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	609a      	str	r2, [r3, #8]
 8002992:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002994:	4b2e      	ldr	r3, [pc, #184]	@ (8002a50 <MX_GPIO_Init+0xd0>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	4a2d      	ldr	r2, [pc, #180]	@ (8002a50 <MX_GPIO_Init+0xd0>)
 800299a:	f043 0310 	orr.w	r3, r3, #16
 800299e:	6193      	str	r3, [r2, #24]
 80029a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a50 <MX_GPIO_Init+0xd0>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ac:	4b28      	ldr	r3, [pc, #160]	@ (8002a50 <MX_GPIO_Init+0xd0>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	4a27      	ldr	r2, [pc, #156]	@ (8002a50 <MX_GPIO_Init+0xd0>)
 80029b2:	f043 0320 	orr.w	r3, r3, #32
 80029b6:	6193      	str	r3, [r2, #24]
 80029b8:	4b25      	ldr	r3, [pc, #148]	@ (8002a50 <MX_GPIO_Init+0xd0>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c4:	4b22      	ldr	r3, [pc, #136]	@ (8002a50 <MX_GPIO_Init+0xd0>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	4a21      	ldr	r2, [pc, #132]	@ (8002a50 <MX_GPIO_Init+0xd0>)
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	6193      	str	r3, [r2, #24]
 80029d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a50 <MX_GPIO_Init+0xd0>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002a50 <MX_GPIO_Init+0xd0>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a50 <MX_GPIO_Init+0xd0>)
 80029e2:	f043 0308 	orr.w	r3, r3, #8
 80029e6:	6193      	str	r3, [r2, #24]
 80029e8:	4b19      	ldr	r3, [pc, #100]	@ (8002a50 <MX_GPIO_Init+0xd0>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	603b      	str	r3, [r7, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80029f4:	2200      	movs	r2, #0
 80029f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029fa:	4816      	ldr	r0, [pc, #88]	@ (8002a54 <MX_GPIO_Init+0xd4>)
 80029fc:	f000 fef8 	bl	80037f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_DC_Pin|LCD_RST_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8002a00:	2200      	movs	r2, #0
 8002a02:	f240 4103 	movw	r1, #1027	@ 0x403
 8002a06:	4814      	ldr	r0, [pc, #80]	@ (8002a58 <MX_GPIO_Init+0xd8>)
 8002a08:	f000 fef2 	bl	80037f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a12:	2301      	movs	r3, #1
 8002a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a1e:	f107 0310 	add.w	r3, r7, #16
 8002a22:	4619      	mov	r1, r3
 8002a24:	480b      	ldr	r0, [pc, #44]	@ (8002a54 <MX_GPIO_Init+0xd4>)
 8002a26:	f000 fd5f 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_DC_Pin LCD_RST_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|LCD_RST_Pin|TFT_CS_Pin;
 8002a2a:	f240 4303 	movw	r3, #1027	@ 0x403
 8002a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a30:	2301      	movs	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3c:	f107 0310 	add.w	r3, r7, #16
 8002a40:	4619      	mov	r1, r3
 8002a42:	4805      	ldr	r0, [pc, #20]	@ (8002a58 <MX_GPIO_Init+0xd8>)
 8002a44:	f000 fd50 	bl	80034e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002a48:	bf00      	nop
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40011000 	.word	0x40011000
 8002a58:	40010c00 	.word	0x40010c00

08002a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a60:	b672      	cpsid	i
}
 8002a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a64:	bf00      	nop
 8002a66:	e7fd      	b.n	8002a64 <Error_Handler+0x8>

08002a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a6e:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <HAL_MspInit+0x5c>)
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	4a14      	ldr	r2, [pc, #80]	@ (8002ac4 <HAL_MspInit+0x5c>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6193      	str	r3, [r2, #24]
 8002a7a:	4b12      	ldr	r3, [pc, #72]	@ (8002ac4 <HAL_MspInit+0x5c>)
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a86:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac4 <HAL_MspInit+0x5c>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ac4 <HAL_MspInit+0x5c>)
 8002a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a90:	61d3      	str	r3, [r2, #28]
 8002a92:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac4 <HAL_MspInit+0x5c>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9a:	607b      	str	r3, [r7, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac8 <HAL_MspInit+0x60>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	4a04      	ldr	r2, [pc, #16]	@ (8002ac8 <HAL_MspInit+0x60>)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40010000 	.word	0x40010000

08002acc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0310 	add.w	r3, r7, #16
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a28      	ldr	r2, [pc, #160]	@ (8002b88 <HAL_SPI_MspInit+0xbc>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d149      	bne.n	8002b80 <HAL_SPI_MspInit+0xb4>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aec:	4b27      	ldr	r3, [pc, #156]	@ (8002b8c <HAL_SPI_MspInit+0xc0>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	4a26      	ldr	r2, [pc, #152]	@ (8002b8c <HAL_SPI_MspInit+0xc0>)
 8002af2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002af6:	6193      	str	r3, [r2, #24]
 8002af8:	4b24      	ldr	r3, [pc, #144]	@ (8002b8c <HAL_SPI_MspInit+0xc0>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b04:	4b21      	ldr	r3, [pc, #132]	@ (8002b8c <HAL_SPI_MspInit+0xc0>)
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	4a20      	ldr	r2, [pc, #128]	@ (8002b8c <HAL_SPI_MspInit+0xc0>)
 8002b0a:	f043 0304 	orr.w	r3, r3, #4
 8002b0e:	6193      	str	r3, [r2, #24]
 8002b10:	4b1e      	ldr	r3, [pc, #120]	@ (8002b8c <HAL_SPI_MspInit+0xc0>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b1c:	23a0      	movs	r3, #160	@ 0xa0
 8002b1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b20:	2302      	movs	r3, #2
 8002b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b24:	2303      	movs	r3, #3
 8002b26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b28:	f107 0310 	add.w	r3, r7, #16
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4818      	ldr	r0, [pc, #96]	@ (8002b90 <HAL_SPI_MspInit+0xc4>)
 8002b30:	f000 fcda 	bl	80034e8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002b34:	4b17      	ldr	r3, [pc, #92]	@ (8002b94 <HAL_SPI_MspInit+0xc8>)
 8002b36:	4a18      	ldr	r2, [pc, #96]	@ (8002b98 <HAL_SPI_MspInit+0xcc>)
 8002b38:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b3a:	4b16      	ldr	r3, [pc, #88]	@ (8002b94 <HAL_SPI_MspInit+0xc8>)
 8002b3c:	2210      	movs	r2, #16
 8002b3e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b40:	4b14      	ldr	r3, [pc, #80]	@ (8002b94 <HAL_SPI_MspInit+0xc8>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b46:	4b13      	ldr	r3, [pc, #76]	@ (8002b94 <HAL_SPI_MspInit+0xc8>)
 8002b48:	2280      	movs	r2, #128	@ 0x80
 8002b4a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b4c:	4b11      	ldr	r3, [pc, #68]	@ (8002b94 <HAL_SPI_MspInit+0xc8>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b52:	4b10      	ldr	r3, [pc, #64]	@ (8002b94 <HAL_SPI_MspInit+0xc8>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002b58:	4b0e      	ldr	r3, [pc, #56]	@ (8002b94 <HAL_SPI_MspInit+0xc8>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b94 <HAL_SPI_MspInit+0xc8>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002b64:	480b      	ldr	r0, [pc, #44]	@ (8002b94 <HAL_SPI_MspInit+0xc8>)
 8002b66:	f000 fad1 	bl	800310c <HAL_DMA_Init>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8002b70:	f7ff ff74 	bl	8002a5c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a07      	ldr	r2, [pc, #28]	@ (8002b94 <HAL_SPI_MspInit+0xc8>)
 8002b78:	649a      	str	r2, [r3, #72]	@ 0x48
 8002b7a:	4a06      	ldr	r2, [pc, #24]	@ (8002b94 <HAL_SPI_MspInit+0xc8>)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b80:	bf00      	nop
 8002b82:	3720      	adds	r7, #32
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40013000 	.word	0x40013000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40010800 	.word	0x40010800
 8002b94:	2000024c 	.word	0x2000024c
 8002b98:	40020030 	.word	0x40020030

08002b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ba0:	bf00      	nop
 8002ba2:	e7fd      	b.n	8002ba0 <NMI_Handler+0x4>

08002ba4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ba8:	bf00      	nop
 8002baa:	e7fd      	b.n	8002ba8 <HardFault_Handler+0x4>

08002bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb0:	bf00      	nop
 8002bb2:	e7fd      	b.n	8002bb0 <MemManage_Handler+0x4>

08002bb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bb8:	bf00      	nop
 8002bba:	e7fd      	b.n	8002bb8 <BusFault_Handler+0x4>

08002bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <UsageFault_Handler+0x4>

08002bc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bec:	f000 f940 	bl	8002e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002bf8:	4802      	ldr	r0, [pc, #8]	@ (8002c04 <DMA1_Channel3_IRQHandler+0x10>)
 8002bfa:	f000 fb41 	bl	8003280 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	2000024c 	.word	0x2000024c

08002c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return 1;
 8002c0c:	2301      	movs	r3, #1
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <_kill>:

int _kill(int pid, int sig)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c20:	f002 fbb6 	bl	8005390 <__errno>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2216      	movs	r2, #22
 8002c28:	601a      	str	r2, [r3, #0]
  return -1;
 8002c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <_exit>:

void _exit (int status)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c3e:	f04f 31ff 	mov.w	r1, #4294967295
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ffe7 	bl	8002c16 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c48:	bf00      	nop
 8002c4a:	e7fd      	b.n	8002c48 <_exit+0x12>

08002c4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	e00a      	b.n	8002c74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c5e:	f3af 8000 	nop.w
 8002c62:	4601      	mov	r1, r0
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	60ba      	str	r2, [r7, #8]
 8002c6a:	b2ca      	uxtb	r2, r1
 8002c6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3301      	adds	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	dbf0      	blt.n	8002c5e <_read+0x12>
  }

  return len;
 8002c7c:	687b      	ldr	r3, [r7, #4]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e009      	b.n	8002cac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	60ba      	str	r2, [r7, #8]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	dbf1      	blt.n	8002c98 <_write+0x12>
  }
  return len;
 8002cb4:	687b      	ldr	r3, [r7, #4]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <_close>:

int _close(int file)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ce4:	605a      	str	r2, [r3, #4]
  return 0;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <_isatty>:

int _isatty(int file)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cfa:	2301      	movs	r3, #1
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b085      	sub	sp, #20
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
	...

08002d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d28:	4a14      	ldr	r2, [pc, #80]	@ (8002d7c <_sbrk+0x5c>)
 8002d2a:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <_sbrk+0x60>)
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d34:	4b13      	ldr	r3, [pc, #76]	@ (8002d84 <_sbrk+0x64>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <_sbrk+0x64>)
 8002d3e:	4a12      	ldr	r2, [pc, #72]	@ (8002d88 <_sbrk+0x68>)
 8002d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d42:	4b10      	ldr	r3, [pc, #64]	@ (8002d84 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d207      	bcs.n	8002d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d50:	f002 fb1e 	bl	8005390 <__errno>
 8002d54:	4603      	mov	r3, r0
 8002d56:	220c      	movs	r2, #12
 8002d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5e:	e009      	b.n	8002d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d60:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <_sbrk+0x64>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d66:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <_sbrk+0x64>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4a05      	ldr	r2, [pc, #20]	@ (8002d84 <_sbrk+0x64>)
 8002d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20005000 	.word	0x20005000
 8002d80:	00000400 	.word	0x00000400
 8002d84:	200002bc 	.word	0x200002bc
 8002d88:	20000410 	.word	0x20000410

08002d8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d98:	f7ff fff8 	bl	8002d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d9c:	480b      	ldr	r0, [pc, #44]	@ (8002dcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d9e:	490c      	ldr	r1, [pc, #48]	@ (8002dd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002da0:	4a0c      	ldr	r2, [pc, #48]	@ (8002dd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da4:	e002      	b.n	8002dac <LoopCopyDataInit>

08002da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002daa:	3304      	adds	r3, #4

08002dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db0:	d3f9      	bcc.n	8002da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002db2:	4a09      	ldr	r2, [pc, #36]	@ (8002dd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002db4:	4c09      	ldr	r4, [pc, #36]	@ (8002ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db8:	e001      	b.n	8002dbe <LoopFillZerobss>

08002dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dbc:	3204      	adds	r2, #4

08002dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc0:	d3fb      	bcc.n	8002dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dc2:	f002 faeb 	bl	800539c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dc6:	f7fe ff39 	bl	8001c3c <main>
  bx lr
 8002dca:	4770      	bx	lr
  ldr r0, =_sdata
 8002dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002dd4:	08009cac 	.word	0x08009cac
  ldr r2, =_sbss
 8002dd8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002ddc:	20000410 	.word	0x20000410

08002de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002de0:	e7fe      	b.n	8002de0 <ADC1_2_IRQHandler>
	...

08002de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002de8:	4b08      	ldr	r3, [pc, #32]	@ (8002e0c <HAL_Init+0x28>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a07      	ldr	r2, [pc, #28]	@ (8002e0c <HAL_Init+0x28>)
 8002dee:	f043 0310 	orr.w	r3, r3, #16
 8002df2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df4:	2003      	movs	r0, #3
 8002df6:	f000 f947 	bl	8003088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dfa:	200f      	movs	r0, #15
 8002dfc:	f000 f808 	bl	8002e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e00:	f7ff fe32 	bl	8002a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40022000 	.word	0x40022000

08002e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e18:	4b12      	ldr	r3, [pc, #72]	@ (8002e64 <HAL_InitTick+0x54>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <HAL_InitTick+0x58>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4619      	mov	r1, r3
 8002e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f95f 	bl	80030f2 <HAL_SYSTICK_Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e00e      	b.n	8002e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b0f      	cmp	r3, #15
 8002e42:	d80a      	bhi.n	8002e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e44:	2200      	movs	r2, #0
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4c:	f000 f927 	bl	800309e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e50:	4a06      	ldr	r2, [pc, #24]	@ (8002e6c <HAL_InitTick+0x5c>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000004 	.word	0x20000004
 8002e68:	2000000c 	.word	0x2000000c
 8002e6c:	20000008 	.word	0x20000008

08002e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e74:	4b05      	ldr	r3, [pc, #20]	@ (8002e8c <HAL_IncTick+0x1c>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <HAL_IncTick+0x20>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4413      	add	r3, r2
 8002e80:	4a03      	ldr	r2, [pc, #12]	@ (8002e90 <HAL_IncTick+0x20>)
 8002e82:	6013      	str	r3, [r2, #0]
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr
 8002e8c:	2000000c 	.word	0x2000000c
 8002e90:	200002c0 	.word	0x200002c0

08002e94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return uwTick;
 8002e98:	4b02      	ldr	r3, [pc, #8]	@ (8002ea4 <HAL_GetTick+0x10>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	200002c0 	.word	0x200002c0

08002ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb0:	f7ff fff0 	bl	8002e94 <HAL_GetTick>
 8002eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec0:	d005      	beq.n	8002ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8002eec <HAL_Delay+0x44>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4413      	add	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ece:	bf00      	nop
 8002ed0:	f7ff ffe0 	bl	8002e94 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d8f7      	bhi.n	8002ed0 <HAL_Delay+0x28>
  {
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	bf00      	nop
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	2000000c 	.word	0x2000000c

08002ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f00:	4b0c      	ldr	r3, [pc, #48]	@ (8002f34 <__NVIC_SetPriorityGrouping+0x44>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f22:	4a04      	ldr	r2, [pc, #16]	@ (8002f34 <__NVIC_SetPriorityGrouping+0x44>)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	60d3      	str	r3, [r2, #12]
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f3c:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <__NVIC_GetPriorityGrouping+0x18>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	f003 0307 	and.w	r3, r3, #7
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	db0b      	blt.n	8002f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	f003 021f 	and.w	r2, r3, #31
 8002f6c:	4906      	ldr	r1, [pc, #24]	@ (8002f88 <__NVIC_EnableIRQ+0x34>)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	2001      	movs	r0, #1
 8002f76:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	e000e100 	.word	0xe000e100

08002f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db0a      	blt.n	8002fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	490c      	ldr	r1, [pc, #48]	@ (8002fd8 <__NVIC_SetPriority+0x4c>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb4:	e00a      	b.n	8002fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4908      	ldr	r1, [pc, #32]	@ (8002fdc <__NVIC_SetPriority+0x50>)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	0112      	lsls	r2, r2, #4
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	440b      	add	r3, r1
 8002fca:	761a      	strb	r2, [r3, #24]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	e000e100 	.word	0xe000e100
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	@ 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f1c3 0307 	rsb	r3, r3, #7
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	bf28      	it	cs
 8002ffe:	2304      	movcs	r3, #4
 8003000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3304      	adds	r3, #4
 8003006:	2b06      	cmp	r3, #6
 8003008:	d902      	bls.n	8003010 <NVIC_EncodePriority+0x30>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3b03      	subs	r3, #3
 800300e:	e000      	b.n	8003012 <NVIC_EncodePriority+0x32>
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	401a      	ands	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003028:	f04f 31ff 	mov.w	r1, #4294967295
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	43d9      	mvns	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	4313      	orrs	r3, r2
         );
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	@ 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003054:	d301      	bcc.n	800305a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003056:	2301      	movs	r3, #1
 8003058:	e00f      	b.n	800307a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305a:	4a0a      	ldr	r2, [pc, #40]	@ (8003084 <SysTick_Config+0x40>)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3b01      	subs	r3, #1
 8003060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003062:	210f      	movs	r1, #15
 8003064:	f04f 30ff 	mov.w	r0, #4294967295
 8003068:	f7ff ff90 	bl	8002f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800306c:	4b05      	ldr	r3, [pc, #20]	@ (8003084 <SysTick_Config+0x40>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003072:	4b04      	ldr	r3, [pc, #16]	@ (8003084 <SysTick_Config+0x40>)
 8003074:	2207      	movs	r2, #7
 8003076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	e000e010 	.word	0xe000e010

08003088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff2d 	bl	8002ef0 <__NVIC_SetPriorityGrouping>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	4603      	mov	r3, r0
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030b0:	f7ff ff42 	bl	8002f38 <__NVIC_GetPriorityGrouping>
 80030b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	6978      	ldr	r0, [r7, #20]
 80030bc:	f7ff ff90 	bl	8002fe0 <NVIC_EncodePriority>
 80030c0:	4602      	mov	r2, r0
 80030c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff ff5f 	bl	8002f8c <__NVIC_SetPriority>
}
 80030ce:	bf00      	nop
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	4603      	mov	r3, r0
 80030de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ff35 	bl	8002f54 <__NVIC_EnableIRQ>
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff ffa2 	bl	8003044 <SysTick_Config>
 8003100:	4603      	mov	r3, r0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e043      	b.n	80031aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	4b22      	ldr	r3, [pc, #136]	@ (80031b4 <HAL_DMA_Init+0xa8>)
 800312a:	4413      	add	r3, r2
 800312c:	4a22      	ldr	r2, [pc, #136]	@ (80031b8 <HAL_DMA_Init+0xac>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	091b      	lsrs	r3, r3, #4
 8003134:	009a      	lsls	r2, r3, #2
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a1f      	ldr	r2, [pc, #124]	@ (80031bc <HAL_DMA_Init+0xb0>)
 800313e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003156:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800315a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800317c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	bffdfff8 	.word	0xbffdfff8
 80031b8:	cccccccd 	.word	0xcccccccd
 80031bc:	40020000 	.word	0x40020000

080031c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_DMA_Start_IT+0x20>
 80031dc:	2302      	movs	r3, #2
 80031de:	e04b      	b.n	8003278 <HAL_DMA_Start_IT+0xb8>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d13a      	bne.n	800326a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f937 	bl	800348c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 020e 	orr.w	r2, r2, #14
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	e00f      	b.n	8003258 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0204 	bic.w	r2, r2, #4
 8003246:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 020a 	orr.w	r2, r2, #10
 8003256:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	e005      	b.n	8003276 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003272:	2302      	movs	r3, #2
 8003274:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329c:	2204      	movs	r2, #4
 800329e:	409a      	lsls	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d04f      	beq.n	8003348 <HAL_DMA_IRQHandler+0xc8>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d04a      	beq.n	8003348 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d107      	bne.n	80032d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0204 	bic.w	r2, r2, #4
 80032ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a66      	ldr	r2, [pc, #408]	@ (8003470 <HAL_DMA_IRQHandler+0x1f0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d029      	beq.n	800332e <HAL_DMA_IRQHandler+0xae>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a65      	ldr	r2, [pc, #404]	@ (8003474 <HAL_DMA_IRQHandler+0x1f4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d022      	beq.n	800332a <HAL_DMA_IRQHandler+0xaa>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a63      	ldr	r2, [pc, #396]	@ (8003478 <HAL_DMA_IRQHandler+0x1f8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01a      	beq.n	8003324 <HAL_DMA_IRQHandler+0xa4>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a62      	ldr	r2, [pc, #392]	@ (800347c <HAL_DMA_IRQHandler+0x1fc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d012      	beq.n	800331e <HAL_DMA_IRQHandler+0x9e>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a60      	ldr	r2, [pc, #384]	@ (8003480 <HAL_DMA_IRQHandler+0x200>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00a      	beq.n	8003318 <HAL_DMA_IRQHandler+0x98>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a5f      	ldr	r2, [pc, #380]	@ (8003484 <HAL_DMA_IRQHandler+0x204>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d102      	bne.n	8003312 <HAL_DMA_IRQHandler+0x92>
 800330c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003310:	e00e      	b.n	8003330 <HAL_DMA_IRQHandler+0xb0>
 8003312:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003316:	e00b      	b.n	8003330 <HAL_DMA_IRQHandler+0xb0>
 8003318:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800331c:	e008      	b.n	8003330 <HAL_DMA_IRQHandler+0xb0>
 800331e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003322:	e005      	b.n	8003330 <HAL_DMA_IRQHandler+0xb0>
 8003324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003328:	e002      	b.n	8003330 <HAL_DMA_IRQHandler+0xb0>
 800332a:	2340      	movs	r3, #64	@ 0x40
 800332c:	e000      	b.n	8003330 <HAL_DMA_IRQHandler+0xb0>
 800332e:	2304      	movs	r3, #4
 8003330:	4a55      	ldr	r2, [pc, #340]	@ (8003488 <HAL_DMA_IRQHandler+0x208>)
 8003332:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8094 	beq.w	8003466 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003346:	e08e      	b.n	8003466 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	2202      	movs	r2, #2
 800334e:	409a      	lsls	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4013      	ands	r3, r2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d056      	beq.n	8003406 <HAL_DMA_IRQHandler+0x186>
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d051      	beq.n	8003406 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10b      	bne.n	8003388 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 020a 	bic.w	r2, r2, #10
 800337e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a38      	ldr	r2, [pc, #224]	@ (8003470 <HAL_DMA_IRQHandler+0x1f0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d029      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x166>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a37      	ldr	r2, [pc, #220]	@ (8003474 <HAL_DMA_IRQHandler+0x1f4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d022      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x162>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a35      	ldr	r2, [pc, #212]	@ (8003478 <HAL_DMA_IRQHandler+0x1f8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01a      	beq.n	80033dc <HAL_DMA_IRQHandler+0x15c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a34      	ldr	r2, [pc, #208]	@ (800347c <HAL_DMA_IRQHandler+0x1fc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d012      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x156>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a32      	ldr	r2, [pc, #200]	@ (8003480 <HAL_DMA_IRQHandler+0x200>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00a      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x150>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a31      	ldr	r2, [pc, #196]	@ (8003484 <HAL_DMA_IRQHandler+0x204>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d102      	bne.n	80033ca <HAL_DMA_IRQHandler+0x14a>
 80033c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80033c8:	e00e      	b.n	80033e8 <HAL_DMA_IRQHandler+0x168>
 80033ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033ce:	e00b      	b.n	80033e8 <HAL_DMA_IRQHandler+0x168>
 80033d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033d4:	e008      	b.n	80033e8 <HAL_DMA_IRQHandler+0x168>
 80033d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033da:	e005      	b.n	80033e8 <HAL_DMA_IRQHandler+0x168>
 80033dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033e0:	e002      	b.n	80033e8 <HAL_DMA_IRQHandler+0x168>
 80033e2:	2320      	movs	r3, #32
 80033e4:	e000      	b.n	80033e8 <HAL_DMA_IRQHandler+0x168>
 80033e6:	2302      	movs	r3, #2
 80033e8:	4a27      	ldr	r2, [pc, #156]	@ (8003488 <HAL_DMA_IRQHandler+0x208>)
 80033ea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d034      	beq.n	8003466 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003404:	e02f      	b.n	8003466 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	2208      	movs	r2, #8
 800340c:	409a      	lsls	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4013      	ands	r3, r2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d028      	beq.n	8003468 <HAL_DMA_IRQHandler+0x1e8>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d023      	beq.n	8003468 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 020e 	bic.w	r2, r2, #14
 800342e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003438:	2101      	movs	r1, #1
 800343a:	fa01 f202 	lsl.w	r2, r1, r2
 800343e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345a:	2b00      	cmp	r3, #0
 800345c:	d004      	beq.n	8003468 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
    }
  }
  return;
 8003466:	bf00      	nop
 8003468:	bf00      	nop
}
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40020008 	.word	0x40020008
 8003474:	4002001c 	.word	0x4002001c
 8003478:	40020030 	.word	0x40020030
 800347c:	40020044 	.word	0x40020044
 8003480:	40020058 	.word	0x40020058
 8003484:	4002006c 	.word	0x4002006c
 8003488:	40020000 	.word	0x40020000

0800348c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a2:	2101      	movs	r1, #1
 80034a4:	fa01 f202 	lsl.w	r2, r1, r2
 80034a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b10      	cmp	r3, #16
 80034b8:	d108      	bne.n	80034cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034ca:	e007      	b.n	80034dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	60da      	str	r2, [r3, #12]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
	...

080034e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b08b      	sub	sp, #44	@ 0x2c
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034f6:	2300      	movs	r3, #0
 80034f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034fa:	e169      	b.n	80037d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034fc:	2201      	movs	r2, #1
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	429a      	cmp	r2, r3
 8003516:	f040 8158 	bne.w	80037ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	4a9a      	ldr	r2, [pc, #616]	@ (8003788 <HAL_GPIO_Init+0x2a0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d05e      	beq.n	80035e2 <HAL_GPIO_Init+0xfa>
 8003524:	4a98      	ldr	r2, [pc, #608]	@ (8003788 <HAL_GPIO_Init+0x2a0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d875      	bhi.n	8003616 <HAL_GPIO_Init+0x12e>
 800352a:	4a98      	ldr	r2, [pc, #608]	@ (800378c <HAL_GPIO_Init+0x2a4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d058      	beq.n	80035e2 <HAL_GPIO_Init+0xfa>
 8003530:	4a96      	ldr	r2, [pc, #600]	@ (800378c <HAL_GPIO_Init+0x2a4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d86f      	bhi.n	8003616 <HAL_GPIO_Init+0x12e>
 8003536:	4a96      	ldr	r2, [pc, #600]	@ (8003790 <HAL_GPIO_Init+0x2a8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d052      	beq.n	80035e2 <HAL_GPIO_Init+0xfa>
 800353c:	4a94      	ldr	r2, [pc, #592]	@ (8003790 <HAL_GPIO_Init+0x2a8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d869      	bhi.n	8003616 <HAL_GPIO_Init+0x12e>
 8003542:	4a94      	ldr	r2, [pc, #592]	@ (8003794 <HAL_GPIO_Init+0x2ac>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d04c      	beq.n	80035e2 <HAL_GPIO_Init+0xfa>
 8003548:	4a92      	ldr	r2, [pc, #584]	@ (8003794 <HAL_GPIO_Init+0x2ac>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d863      	bhi.n	8003616 <HAL_GPIO_Init+0x12e>
 800354e:	4a92      	ldr	r2, [pc, #584]	@ (8003798 <HAL_GPIO_Init+0x2b0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d046      	beq.n	80035e2 <HAL_GPIO_Init+0xfa>
 8003554:	4a90      	ldr	r2, [pc, #576]	@ (8003798 <HAL_GPIO_Init+0x2b0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d85d      	bhi.n	8003616 <HAL_GPIO_Init+0x12e>
 800355a:	2b12      	cmp	r3, #18
 800355c:	d82a      	bhi.n	80035b4 <HAL_GPIO_Init+0xcc>
 800355e:	2b12      	cmp	r3, #18
 8003560:	d859      	bhi.n	8003616 <HAL_GPIO_Init+0x12e>
 8003562:	a201      	add	r2, pc, #4	@ (adr r2, 8003568 <HAL_GPIO_Init+0x80>)
 8003564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003568:	080035e3 	.word	0x080035e3
 800356c:	080035bd 	.word	0x080035bd
 8003570:	080035cf 	.word	0x080035cf
 8003574:	08003611 	.word	0x08003611
 8003578:	08003617 	.word	0x08003617
 800357c:	08003617 	.word	0x08003617
 8003580:	08003617 	.word	0x08003617
 8003584:	08003617 	.word	0x08003617
 8003588:	08003617 	.word	0x08003617
 800358c:	08003617 	.word	0x08003617
 8003590:	08003617 	.word	0x08003617
 8003594:	08003617 	.word	0x08003617
 8003598:	08003617 	.word	0x08003617
 800359c:	08003617 	.word	0x08003617
 80035a0:	08003617 	.word	0x08003617
 80035a4:	08003617 	.word	0x08003617
 80035a8:	08003617 	.word	0x08003617
 80035ac:	080035c5 	.word	0x080035c5
 80035b0:	080035d9 	.word	0x080035d9
 80035b4:	4a79      	ldr	r2, [pc, #484]	@ (800379c <HAL_GPIO_Init+0x2b4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d013      	beq.n	80035e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035ba:	e02c      	b.n	8003616 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	623b      	str	r3, [r7, #32]
          break;
 80035c2:	e029      	b.n	8003618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	3304      	adds	r3, #4
 80035ca:	623b      	str	r3, [r7, #32]
          break;
 80035cc:	e024      	b.n	8003618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	3308      	adds	r3, #8
 80035d4:	623b      	str	r3, [r7, #32]
          break;
 80035d6:	e01f      	b.n	8003618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	330c      	adds	r3, #12
 80035de:	623b      	str	r3, [r7, #32]
          break;
 80035e0:	e01a      	b.n	8003618 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d102      	bne.n	80035f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035ea:	2304      	movs	r3, #4
 80035ec:	623b      	str	r3, [r7, #32]
          break;
 80035ee:	e013      	b.n	8003618 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d105      	bne.n	8003604 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035f8:	2308      	movs	r3, #8
 80035fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	611a      	str	r2, [r3, #16]
          break;
 8003602:	e009      	b.n	8003618 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003604:	2308      	movs	r3, #8
 8003606:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	615a      	str	r2, [r3, #20]
          break;
 800360e:	e003      	b.n	8003618 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003610:	2300      	movs	r3, #0
 8003612:	623b      	str	r3, [r7, #32]
          break;
 8003614:	e000      	b.n	8003618 <HAL_GPIO_Init+0x130>
          break;
 8003616:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2bff      	cmp	r3, #255	@ 0xff
 800361c:	d801      	bhi.n	8003622 <HAL_GPIO_Init+0x13a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	e001      	b.n	8003626 <HAL_GPIO_Init+0x13e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3304      	adds	r3, #4
 8003626:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2bff      	cmp	r3, #255	@ 0xff
 800362c:	d802      	bhi.n	8003634 <HAL_GPIO_Init+0x14c>
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	e002      	b.n	800363a <HAL_GPIO_Init+0x152>
 8003634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003636:	3b08      	subs	r3, #8
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	210f      	movs	r1, #15
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	fa01 f303 	lsl.w	r3, r1, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	401a      	ands	r2, r3
 800364c:	6a39      	ldr	r1, [r7, #32]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	fa01 f303 	lsl.w	r3, r1, r3
 8003654:	431a      	orrs	r2, r3
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80b1 	beq.w	80037ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003668:	4b4d      	ldr	r3, [pc, #308]	@ (80037a0 <HAL_GPIO_Init+0x2b8>)
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	4a4c      	ldr	r2, [pc, #304]	@ (80037a0 <HAL_GPIO_Init+0x2b8>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6193      	str	r3, [r2, #24]
 8003674:	4b4a      	ldr	r3, [pc, #296]	@ (80037a0 <HAL_GPIO_Init+0x2b8>)
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003680:	4a48      	ldr	r2, [pc, #288]	@ (80037a4 <HAL_GPIO_Init+0x2bc>)
 8003682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003684:	089b      	lsrs	r3, r3, #2
 8003686:	3302      	adds	r3, #2
 8003688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	220f      	movs	r2, #15
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4013      	ands	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a40      	ldr	r2, [pc, #256]	@ (80037a8 <HAL_GPIO_Init+0x2c0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d013      	beq.n	80036d4 <HAL_GPIO_Init+0x1ec>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a3f      	ldr	r2, [pc, #252]	@ (80037ac <HAL_GPIO_Init+0x2c4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00d      	beq.n	80036d0 <HAL_GPIO_Init+0x1e8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a3e      	ldr	r2, [pc, #248]	@ (80037b0 <HAL_GPIO_Init+0x2c8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d007      	beq.n	80036cc <HAL_GPIO_Init+0x1e4>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a3d      	ldr	r2, [pc, #244]	@ (80037b4 <HAL_GPIO_Init+0x2cc>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d101      	bne.n	80036c8 <HAL_GPIO_Init+0x1e0>
 80036c4:	2303      	movs	r3, #3
 80036c6:	e006      	b.n	80036d6 <HAL_GPIO_Init+0x1ee>
 80036c8:	2304      	movs	r3, #4
 80036ca:	e004      	b.n	80036d6 <HAL_GPIO_Init+0x1ee>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e002      	b.n	80036d6 <HAL_GPIO_Init+0x1ee>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <HAL_GPIO_Init+0x1ee>
 80036d4:	2300      	movs	r3, #0
 80036d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d8:	f002 0203 	and.w	r2, r2, #3
 80036dc:	0092      	lsls	r2, r2, #2
 80036de:	4093      	lsls	r3, r2
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036e6:	492f      	ldr	r1, [pc, #188]	@ (80037a4 <HAL_GPIO_Init+0x2bc>)
 80036e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ea:	089b      	lsrs	r3, r3, #2
 80036ec:	3302      	adds	r3, #2
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d006      	beq.n	800370e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003700:	4b2d      	ldr	r3, [pc, #180]	@ (80037b8 <HAL_GPIO_Init+0x2d0>)
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	492c      	ldr	r1, [pc, #176]	@ (80037b8 <HAL_GPIO_Init+0x2d0>)
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	4313      	orrs	r3, r2
 800370a:	608b      	str	r3, [r1, #8]
 800370c:	e006      	b.n	800371c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800370e:	4b2a      	ldr	r3, [pc, #168]	@ (80037b8 <HAL_GPIO_Init+0x2d0>)
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	43db      	mvns	r3, r3
 8003716:	4928      	ldr	r1, [pc, #160]	@ (80037b8 <HAL_GPIO_Init+0x2d0>)
 8003718:	4013      	ands	r3, r2
 800371a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d006      	beq.n	8003736 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003728:	4b23      	ldr	r3, [pc, #140]	@ (80037b8 <HAL_GPIO_Init+0x2d0>)
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	4922      	ldr	r1, [pc, #136]	@ (80037b8 <HAL_GPIO_Init+0x2d0>)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	4313      	orrs	r3, r2
 8003732:	60cb      	str	r3, [r1, #12]
 8003734:	e006      	b.n	8003744 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003736:	4b20      	ldr	r3, [pc, #128]	@ (80037b8 <HAL_GPIO_Init+0x2d0>)
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	43db      	mvns	r3, r3
 800373e:	491e      	ldr	r1, [pc, #120]	@ (80037b8 <HAL_GPIO_Init+0x2d0>)
 8003740:	4013      	ands	r3, r2
 8003742:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d006      	beq.n	800375e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003750:	4b19      	ldr	r3, [pc, #100]	@ (80037b8 <HAL_GPIO_Init+0x2d0>)
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	4918      	ldr	r1, [pc, #96]	@ (80037b8 <HAL_GPIO_Init+0x2d0>)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
 800375c:	e006      	b.n	800376c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800375e:	4b16      	ldr	r3, [pc, #88]	@ (80037b8 <HAL_GPIO_Init+0x2d0>)
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	43db      	mvns	r3, r3
 8003766:	4914      	ldr	r1, [pc, #80]	@ (80037b8 <HAL_GPIO_Init+0x2d0>)
 8003768:	4013      	ands	r3, r2
 800376a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d021      	beq.n	80037bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003778:	4b0f      	ldr	r3, [pc, #60]	@ (80037b8 <HAL_GPIO_Init+0x2d0>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	490e      	ldr	r1, [pc, #56]	@ (80037b8 <HAL_GPIO_Init+0x2d0>)
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	4313      	orrs	r3, r2
 8003782:	600b      	str	r3, [r1, #0]
 8003784:	e021      	b.n	80037ca <HAL_GPIO_Init+0x2e2>
 8003786:	bf00      	nop
 8003788:	10320000 	.word	0x10320000
 800378c:	10310000 	.word	0x10310000
 8003790:	10220000 	.word	0x10220000
 8003794:	10210000 	.word	0x10210000
 8003798:	10120000 	.word	0x10120000
 800379c:	10110000 	.word	0x10110000
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40010000 	.word	0x40010000
 80037a8:	40010800 	.word	0x40010800
 80037ac:	40010c00 	.word	0x40010c00
 80037b0:	40011000 	.word	0x40011000
 80037b4:	40011400 	.word	0x40011400
 80037b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037bc:	4b0b      	ldr	r3, [pc, #44]	@ (80037ec <HAL_GPIO_Init+0x304>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	43db      	mvns	r3, r3
 80037c4:	4909      	ldr	r1, [pc, #36]	@ (80037ec <HAL_GPIO_Init+0x304>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	3301      	adds	r3, #1
 80037ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	fa22 f303 	lsr.w	r3, r2, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f47f ae8e 	bne.w	80034fc <HAL_GPIO_Init+0x14>
  }
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	372c      	adds	r7, #44	@ 0x2c
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr
 80037ec:	40010400 	.word	0x40010400

080037f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	807b      	strh	r3, [r7, #2]
 80037fc:	4613      	mov	r3, r2
 80037fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003800:	787b      	ldrb	r3, [r7, #1]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003806:	887a      	ldrh	r2, [r7, #2]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800380c:	e003      	b.n	8003816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800380e:	887b      	ldrh	r3, [r7, #2]
 8003810:	041a      	lsls	r2, r3, #16
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	611a      	str	r2, [r3, #16]
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr

08003820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e272      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 8087 	beq.w	800394e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003840:	4b92      	ldr	r3, [pc, #584]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b04      	cmp	r3, #4
 800384a:	d00c      	beq.n	8003866 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800384c:	4b8f      	ldr	r3, [pc, #572]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b08      	cmp	r3, #8
 8003856:	d112      	bne.n	800387e <HAL_RCC_OscConfig+0x5e>
 8003858:	4b8c      	ldr	r3, [pc, #560]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003864:	d10b      	bne.n	800387e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003866:	4b89      	ldr	r3, [pc, #548]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d06c      	beq.n	800394c <HAL_RCC_OscConfig+0x12c>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d168      	bne.n	800394c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e24c      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003886:	d106      	bne.n	8003896 <HAL_RCC_OscConfig+0x76>
 8003888:	4b80      	ldr	r3, [pc, #512]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a7f      	ldr	r2, [pc, #508]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 800388e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e02e      	b.n	80038f4 <HAL_RCC_OscConfig+0xd4>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10c      	bne.n	80038b8 <HAL_RCC_OscConfig+0x98>
 800389e:	4b7b      	ldr	r3, [pc, #492]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a7a      	ldr	r2, [pc, #488]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b78      	ldr	r3, [pc, #480]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a77      	ldr	r2, [pc, #476]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e01d      	b.n	80038f4 <HAL_RCC_OscConfig+0xd4>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0xbc>
 80038c2:	4b72      	ldr	r3, [pc, #456]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a71      	ldr	r2, [pc, #452]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	4b6f      	ldr	r3, [pc, #444]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a6e      	ldr	r2, [pc, #440]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e00b      	b.n	80038f4 <HAL_RCC_OscConfig+0xd4>
 80038dc:	4b6b      	ldr	r3, [pc, #428]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a6a      	ldr	r2, [pc, #424]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b68      	ldr	r3, [pc, #416]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a67      	ldr	r2, [pc, #412]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80038ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d013      	beq.n	8003924 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7ff faca 	bl	8002e94 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003904:	f7ff fac6 	bl	8002e94 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b64      	cmp	r3, #100	@ 0x64
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e200      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	4b5d      	ldr	r3, [pc, #372]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0xe4>
 8003922:	e014      	b.n	800394e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7ff fab6 	bl	8002e94 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800392c:	f7ff fab2 	bl	8002e94 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b64      	cmp	r3, #100	@ 0x64
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e1ec      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393e:	4b53      	ldr	r3, [pc, #332]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x10c>
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d063      	beq.n	8003a22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800395a:	4b4c      	ldr	r3, [pc, #304]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003966:	4b49      	ldr	r3, [pc, #292]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b08      	cmp	r3, #8
 8003970:	d11c      	bne.n	80039ac <HAL_RCC_OscConfig+0x18c>
 8003972:	4b46      	ldr	r3, [pc, #280]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d116      	bne.n	80039ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397e:	4b43      	ldr	r3, [pc, #268]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_RCC_OscConfig+0x176>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d001      	beq.n	8003996 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e1c0      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003996:	4b3d      	ldr	r3, [pc, #244]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4939      	ldr	r1, [pc, #228]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039aa:	e03a      	b.n	8003a22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d020      	beq.n	80039f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b4:	4b36      	ldr	r3, [pc, #216]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ba:	f7ff fa6b 	bl	8002e94 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c2:	f7ff fa67 	bl	8002e94 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e1a1      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4927      	ldr	r1, [pc, #156]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	600b      	str	r3, [r1, #0]
 80039f4:	e015      	b.n	8003a22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f6:	4b26      	ldr	r3, [pc, #152]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fc:	f7ff fa4a 	bl	8002e94 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a04:	f7ff fa46 	bl	8002e94 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e180      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a16:	4b1d      	ldr	r3, [pc, #116]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d03a      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d019      	beq.n	8003a6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a36:	4b17      	ldr	r3, [pc, #92]	@ (8003a94 <HAL_RCC_OscConfig+0x274>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3c:	f7ff fa2a 	bl	8002e94 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a44:	f7ff fa26 	bl	8002e94 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e160      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a56:	4b0d      	ldr	r3, [pc, #52]	@ (8003a8c <HAL_RCC_OscConfig+0x26c>)
 8003a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a62:	2001      	movs	r0, #1
 8003a64:	f000 fa9c 	bl	8003fa0 <RCC_Delay>
 8003a68:	e01c      	b.n	8003aa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a94 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a70:	f7ff fa10 	bl	8002e94 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a76:	e00f      	b.n	8003a98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a78:	f7ff fa0c 	bl	8002e94 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d908      	bls.n	8003a98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e146      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
 8003a8a:	bf00      	nop
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	42420000 	.word	0x42420000
 8003a94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a98:	4b92      	ldr	r3, [pc, #584]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e9      	bne.n	8003a78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80a6 	beq.w	8003bfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab6:	4b8b      	ldr	r3, [pc, #556]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10d      	bne.n	8003ade <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac2:	4b88      	ldr	r3, [pc, #544]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	4a87      	ldr	r2, [pc, #540]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003acc:	61d3      	str	r3, [r2, #28]
 8003ace:	4b85      	ldr	r3, [pc, #532]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ada:	2301      	movs	r3, #1
 8003adc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ade:	4b82      	ldr	r3, [pc, #520]	@ (8003ce8 <HAL_RCC_OscConfig+0x4c8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d118      	bne.n	8003b1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aea:	4b7f      	ldr	r3, [pc, #508]	@ (8003ce8 <HAL_RCC_OscConfig+0x4c8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a7e      	ldr	r2, [pc, #504]	@ (8003ce8 <HAL_RCC_OscConfig+0x4c8>)
 8003af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af6:	f7ff f9cd 	bl	8002e94 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afe:	f7ff f9c9 	bl	8002e94 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b64      	cmp	r3, #100	@ 0x64
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e103      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b10:	4b75      	ldr	r3, [pc, #468]	@ (8003ce8 <HAL_RCC_OscConfig+0x4c8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d106      	bne.n	8003b32 <HAL_RCC_OscConfig+0x312>
 8003b24:	4b6f      	ldr	r3, [pc, #444]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	4a6e      	ldr	r2, [pc, #440]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	6213      	str	r3, [r2, #32]
 8003b30:	e02d      	b.n	8003b8e <HAL_RCC_OscConfig+0x36e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x334>
 8003b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	4a69      	ldr	r2, [pc, #420]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	6213      	str	r3, [r2, #32]
 8003b46:	4b67      	ldr	r3, [pc, #412]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	4a66      	ldr	r2, [pc, #408]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b4c:	f023 0304 	bic.w	r3, r3, #4
 8003b50:	6213      	str	r3, [r2, #32]
 8003b52:	e01c      	b.n	8003b8e <HAL_RCC_OscConfig+0x36e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b05      	cmp	r3, #5
 8003b5a:	d10c      	bne.n	8003b76 <HAL_RCC_OscConfig+0x356>
 8003b5c:	4b61      	ldr	r3, [pc, #388]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	4a60      	ldr	r2, [pc, #384]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b62:	f043 0304 	orr.w	r3, r3, #4
 8003b66:	6213      	str	r3, [r2, #32]
 8003b68:	4b5e      	ldr	r3, [pc, #376]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	6213      	str	r3, [r2, #32]
 8003b74:	e00b      	b.n	8003b8e <HAL_RCC_OscConfig+0x36e>
 8003b76:	4b5b      	ldr	r3, [pc, #364]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	4a5a      	ldr	r2, [pc, #360]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	6213      	str	r3, [r2, #32]
 8003b82:	4b58      	ldr	r3, [pc, #352]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4a57      	ldr	r2, [pc, #348]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003b88:	f023 0304 	bic.w	r3, r3, #4
 8003b8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d015      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b96:	f7ff f97d 	bl	8002e94 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9c:	e00a      	b.n	8003bb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9e:	f7ff f979 	bl	8002e94 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e0b1      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0ee      	beq.n	8003b9e <HAL_RCC_OscConfig+0x37e>
 8003bc0:	e014      	b.n	8003bec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc2:	f7ff f967 	bl	8002e94 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc8:	e00a      	b.n	8003be0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bca:	f7ff f963 	bl	8002e94 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e09b      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be0:	4b40      	ldr	r3, [pc, #256]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ee      	bne.n	8003bca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d105      	bne.n	8003bfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	4a3b      	ldr	r2, [pc, #236]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8087 	beq.w	8003d16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c08:	4b36      	ldr	r3, [pc, #216]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d061      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d146      	bne.n	8003caa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1c:	4b33      	ldr	r3, [pc, #204]	@ (8003cec <HAL_RCC_OscConfig+0x4cc>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c22:	f7ff f937 	bl	8002e94 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2a:	f7ff f933 	bl	8002e94 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e06d      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c3c:	4b29      	ldr	r3, [pc, #164]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f0      	bne.n	8003c2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c50:	d108      	bne.n	8003c64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c52:	4b24      	ldr	r3, [pc, #144]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	4921      	ldr	r1, [pc, #132]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c64:	4b1f      	ldr	r3, [pc, #124]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a19      	ldr	r1, [r3, #32]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	430b      	orrs	r3, r1
 8003c76:	491b      	ldr	r1, [pc, #108]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cec <HAL_RCC_OscConfig+0x4cc>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c82:	f7ff f907 	bl	8002e94 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8a:	f7ff f903 	bl	8002e94 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e03d      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x46a>
 8003ca8:	e035      	b.n	8003d16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003caa:	4b10      	ldr	r3, [pc, #64]	@ (8003cec <HAL_RCC_OscConfig+0x4cc>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7ff f8f0 	bl	8002e94 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7ff f8ec 	bl	8002e94 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e026      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cca:	4b06      	ldr	r3, [pc, #24]	@ (8003ce4 <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x498>
 8003cd6:	e01e      	b.n	8003d16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d107      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e019      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40007000 	.word	0x40007000
 8003cec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d20 <HAL_RCC_OscConfig+0x500>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d106      	bne.n	8003d12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40021000 	.word	0x40021000

08003d24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0d0      	b.n	8003eda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d38:	4b6a      	ldr	r3, [pc, #424]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d910      	bls.n	8003d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d46:	4b67      	ldr	r3, [pc, #412]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 0207 	bic.w	r2, r3, #7
 8003d4e:	4965      	ldr	r1, [pc, #404]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d56:	4b63      	ldr	r3, [pc, #396]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d001      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0b8      	b.n	8003eda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d020      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d80:	4b59      	ldr	r3, [pc, #356]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	4a58      	ldr	r2, [pc, #352]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d98:	4b53      	ldr	r3, [pc, #332]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4a52      	ldr	r2, [pc, #328]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003da2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da4:	4b50      	ldr	r3, [pc, #320]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	494d      	ldr	r1, [pc, #308]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d040      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d107      	bne.n	8003dda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	4b47      	ldr	r3, [pc, #284]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d115      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e07f      	b.n	8003eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d107      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de2:	4b41      	ldr	r3, [pc, #260]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e073      	b.n	8003eda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e06b      	b.n	8003eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e02:	4b39      	ldr	r3, [pc, #228]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f023 0203 	bic.w	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4936      	ldr	r1, [pc, #216]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e14:	f7ff f83e 	bl	8002e94 <HAL_GetTick>
 8003e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e1c:	f7ff f83a 	bl	8002e94 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e053      	b.n	8003eda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e32:	4b2d      	ldr	r3, [pc, #180]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f003 020c 	and.w	r2, r3, #12
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d1eb      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e44:	4b27      	ldr	r3, [pc, #156]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d210      	bcs.n	8003e74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b24      	ldr	r3, [pc, #144]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 0207 	bic.w	r2, r3, #7
 8003e5a:	4922      	ldr	r1, [pc, #136]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e62:	4b20      	ldr	r3, [pc, #128]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e032      	b.n	8003eda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e80:	4b19      	ldr	r3, [pc, #100]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4916      	ldr	r1, [pc, #88]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e9e:	4b12      	ldr	r3, [pc, #72]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	490e      	ldr	r1, [pc, #56]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eb2:	f000 f821 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	490a      	ldr	r1, [pc, #40]	@ (8003eec <HAL_RCC_ClockConfig+0x1c8>)
 8003ec4:	5ccb      	ldrb	r3, [r1, r3]
 8003ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eca:	4a09      	ldr	r2, [pc, #36]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1cc>)
 8003ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ece:	4b09      	ldr	r3, [pc, #36]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe ff9c 	bl	8002e10 <HAL_InitTick>

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40022000 	.word	0x40022000
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	080098b0 	.word	0x080098b0
 8003ef0:	20000004 	.word	0x20000004
 8003ef4:	20000008 	.word	0x20000008

08003ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f12:	4b1e      	ldr	r3, [pc, #120]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d002      	beq.n	8003f28 <HAL_RCC_GetSysClockFreq+0x30>
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d003      	beq.n	8003f2e <HAL_RCC_GetSysClockFreq+0x36>
 8003f26:	e027      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f28:	4b19      	ldr	r3, [pc, #100]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f2a:	613b      	str	r3, [r7, #16]
      break;
 8003f2c:	e027      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	0c9b      	lsrs	r3, r3, #18
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	4a17      	ldr	r2, [pc, #92]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f38:	5cd3      	ldrb	r3, [r2, r3]
 8003f3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d010      	beq.n	8003f68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f46:	4b11      	ldr	r3, [pc, #68]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	0c5b      	lsrs	r3, r3, #17
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	4a11      	ldr	r2, [pc, #68]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f52:	5cd3      	ldrb	r3, [r2, r3]
 8003f54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a0d      	ldr	r2, [pc, #52]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f5a:	fb03 f202 	mul.w	r2, r3, r2
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	e004      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f6c:	fb02 f303 	mul.w	r3, r2, r3
 8003f70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	613b      	str	r3, [r7, #16]
      break;
 8003f76:	e002      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f78:	4b05      	ldr	r3, [pc, #20]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f7a:	613b      	str	r3, [r7, #16]
      break;
 8003f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f7e:	693b      	ldr	r3, [r7, #16]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	007a1200 	.word	0x007a1200
 8003f94:	080098c0 	.word	0x080098c0
 8003f98:	080098d0 	.word	0x080098d0
 8003f9c:	003d0900 	.word	0x003d0900

08003fa0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd4 <RCC_Delay+0x34>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a0a      	ldr	r2, [pc, #40]	@ (8003fd8 <RCC_Delay+0x38>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	0a5b      	lsrs	r3, r3, #9
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fbc:	bf00      	nop
  }
  while (Delay --);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1e5a      	subs	r2, r3, #1
 8003fc2:	60fa      	str	r2, [r7, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f9      	bne.n	8003fbc <RCC_Delay+0x1c>
}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr
 8003fd4:	20000004 	.word	0x20000004
 8003fd8:	10624dd3 	.word	0x10624dd3

08003fdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e076      	b.n	80040dc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d108      	bne.n	8004008 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ffe:	d009      	beq.n	8004014 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	61da      	str	r2, [r3, #28]
 8004006:	e005      	b.n	8004014 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fe fd4c 	bl	8002acc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800404a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004098:	ea42 0103 	orr.w	r1, r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	0c1a      	lsrs	r2, r3, #16
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f002 0204 	and.w	r2, r2, #4
 80040ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	69da      	ldr	r2, [r3, #28]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040f4:	f7fe fece 	bl	8002e94 <HAL_GetTick>
 80040f8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	d001      	beq.n	800410e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
 800410c:	e12a      	b.n	8004364 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <HAL_SPI_Transmit+0x36>
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e122      	b.n	8004364 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_SPI_Transmit+0x48>
 8004128:	2302      	movs	r3, #2
 800412a:	e11b      	b.n	8004364 <HAL_SPI_Transmit+0x280>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2203      	movs	r2, #3
 8004138:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	88fa      	ldrh	r2, [r7, #6]
 800414c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	88fa      	ldrh	r2, [r7, #6]
 8004152:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800417a:	d10f      	bne.n	800419c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800418a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800419a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a6:	2b40      	cmp	r3, #64	@ 0x40
 80041a8:	d007      	beq.n	80041ba <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041c2:	d152      	bne.n	800426a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_SPI_Transmit+0xee>
 80041cc:	8b7b      	ldrh	r3, [r7, #26]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d145      	bne.n	800425e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d6:	881a      	ldrh	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e2:	1c9a      	adds	r2, r3, #2
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041f6:	e032      	b.n	800425e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	d112      	bne.n	800422c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420a:	881a      	ldrh	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004216:	1c9a      	adds	r2, r3, #2
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	86da      	strh	r2, [r3, #54]	@ 0x36
 800422a:	e018      	b.n	800425e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800422c:	f7fe fe32 	bl	8002e94 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d803      	bhi.n	8004244 <HAL_SPI_Transmit+0x160>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004242:	d102      	bne.n	800424a <HAL_SPI_Transmit+0x166>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e082      	b.n	8004364 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1c7      	bne.n	80041f8 <HAL_SPI_Transmit+0x114>
 8004268:	e053      	b.n	8004312 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_SPI_Transmit+0x194>
 8004272:	8b7b      	ldrh	r3, [r7, #26]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d147      	bne.n	8004308 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	7812      	ldrb	r2, [r2, #0]
 8004284:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800429e:	e033      	b.n	8004308 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d113      	bne.n	80042d6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	330c      	adds	r3, #12
 80042b8:	7812      	ldrb	r2, [r2, #0]
 80042ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80042d4:	e018      	b.n	8004308 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042d6:	f7fe fddd 	bl	8002e94 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d803      	bhi.n	80042ee <HAL_SPI_Transmit+0x20a>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ec:	d102      	bne.n	80042f4 <HAL_SPI_Transmit+0x210>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d109      	bne.n	8004308 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e02d      	b.n	8004364 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1c6      	bne.n	80042a0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	6839      	ldr	r1, [r7, #0]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f9f6 	bl	8004708 <SPI_EndRxTxTransaction>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10a      	bne.n	8004346 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004362:	2300      	movs	r3, #0
  }
}
 8004364:	4618      	mov	r0, r3
 8004366:	3720      	adds	r7, #32
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	4613      	mov	r3, r2
 8004378:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b01      	cmp	r3, #1
 8004384:	d001      	beq.n	800438a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004386:	2302      	movs	r3, #2
 8004388:	e097      	b.n	80044ba <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_SPI_Transmit_DMA+0x2a>
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e08f      	b.n	80044ba <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_SPI_Transmit_DMA+0x3c>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e088      	b.n	80044ba <HAL_SPI_Transmit_DMA+0x14e>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2203      	movs	r2, #3
 80043b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	88fa      	ldrh	r2, [r7, #6]
 80043c8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	88fa      	ldrh	r2, [r7, #6]
 80043ce:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043f6:	d10f      	bne.n	8004418 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004406:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004416:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800441c:	4a29      	ldr	r2, [pc, #164]	@ (80044c4 <HAL_SPI_Transmit_DMA+0x158>)
 800441e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004424:	4a28      	ldr	r2, [pc, #160]	@ (80044c8 <HAL_SPI_Transmit_DMA+0x15c>)
 8004426:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800442c:	4a27      	ldr	r2, [pc, #156]	@ (80044cc <HAL_SPI_Transmit_DMA+0x160>)
 800442e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004434:	2200      	movs	r2, #0
 8004436:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004440:	4619      	mov	r1, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	330c      	adds	r3, #12
 8004448:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800444e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004450:	f7fe feb6 	bl	80031c0 <HAL_DMA_Start_IT>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445e:	f043 0210 	orr.w	r2, r3, #16
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e023      	b.n	80044ba <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447c:	2b40      	cmp	r3, #64	@ 0x40
 800447e:	d007      	beq.n	8004490 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800448e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0220 	orr.w	r2, r2, #32
 80044a6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0202 	orr.w	r2, r2, #2
 80044b6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	0800459b 	.word	0x0800459b
 80044c8:	080044f5 	.word	0x080044f5
 80044cc:	080045b7 	.word	0x080045b7

080044d0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr

080044e2 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004500:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004502:	f7fe fcc7 	bl	8002e94 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b20      	cmp	r3, #32
 8004514:	d03b      	beq.n	800458e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0220 	bic.w	r2, r2, #32
 8004524:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0202 	bic.w	r2, r2, #2
 8004534:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	2164      	movs	r1, #100	@ 0x64
 800453a:	6978      	ldr	r0, [r7, #20]
 800453c:	f000 f8e4 	bl	8004708 <SPI_EndRxTxTransaction>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454a:	f043 0220 	orr.w	r2, r3, #32
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10a      	bne.n	8004570 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2200      	movs	r2, #0
 8004574:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004586:	6978      	ldr	r0, [r7, #20]
 8004588:	f7ff ffab 	bl	80044e2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800458c:	e002      	b.n	8004594 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800458e:	6978      	ldr	r0, [r7, #20]
 8004590:	f7fc fede 	bl	8001350 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f7ff ff91 	bl	80044d0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0203 	bic.w	r2, r2, #3
 80045d2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d8:	f043 0210 	orr.w	r2, r3, #16
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff ff7a 	bl	80044e2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045ee:	bf00      	nop
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	4613      	mov	r3, r2
 8004606:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004608:	f7fe fc44 	bl	8002e94 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004610:	1a9b      	subs	r3, r3, r2
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	4413      	add	r3, r2
 8004616:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004618:	f7fe fc3c 	bl	8002e94 <HAL_GetTick>
 800461c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800461e:	4b39      	ldr	r3, [pc, #228]	@ (8004704 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	015b      	lsls	r3, r3, #5
 8004624:	0d1b      	lsrs	r3, r3, #20
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	fb02 f303 	mul.w	r3, r2, r3
 800462c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800462e:	e054      	b.n	80046da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004636:	d050      	beq.n	80046da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004638:	f7fe fc2c 	bl	8002e94 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	69fa      	ldr	r2, [r7, #28]
 8004644:	429a      	cmp	r2, r3
 8004646:	d902      	bls.n	800464e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d13d      	bne.n	80046ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800465c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004666:	d111      	bne.n	800468c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004670:	d004      	beq.n	800467c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800467a:	d107      	bne.n	800468c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800468a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004690:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004694:	d10f      	bne.n	80046b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e017      	b.n	80046fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	4013      	ands	r3, r2
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	bf0c      	ite	eq
 80046ea:	2301      	moveq	r3, #1
 80046ec:	2300      	movne	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	461a      	mov	r2, r3
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d19b      	bne.n	8004630 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3720      	adds	r7, #32
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20000004 	.word	0x20000004

08004708 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af02      	add	r7, sp, #8
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2201      	movs	r2, #1
 800471c:	2102      	movs	r1, #2
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7ff ff6a 	bl	80045f8 <SPI_WaitFlagStateUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d007      	beq.n	800473a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472e:	f043 0220 	orr.w	r2, r3, #32
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e013      	b.n	8004762 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2200      	movs	r2, #0
 8004742:	2180      	movs	r1, #128	@ 0x80
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f7ff ff57 	bl	80045f8 <SPI_WaitFlagStateUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d007      	beq.n	8004760 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004754:	f043 0220 	orr.w	r2, r3, #32
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e000      	b.n	8004762 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <rand>:
 800476c:	4b16      	ldr	r3, [pc, #88]	@ (80047c8 <rand+0x5c>)
 800476e:	b510      	push	{r4, lr}
 8004770:	681c      	ldr	r4, [r3, #0]
 8004772:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004774:	b9b3      	cbnz	r3, 80047a4 <rand+0x38>
 8004776:	2018      	movs	r0, #24
 8004778:	f001 fd0a 	bl	8006190 <malloc>
 800477c:	4602      	mov	r2, r0
 800477e:	6320      	str	r0, [r4, #48]	@ 0x30
 8004780:	b920      	cbnz	r0, 800478c <rand+0x20>
 8004782:	2152      	movs	r1, #82	@ 0x52
 8004784:	4b11      	ldr	r3, [pc, #68]	@ (80047cc <rand+0x60>)
 8004786:	4812      	ldr	r0, [pc, #72]	@ (80047d0 <rand+0x64>)
 8004788:	f000 fe3e 	bl	8005408 <__assert_func>
 800478c:	4911      	ldr	r1, [pc, #68]	@ (80047d4 <rand+0x68>)
 800478e:	4b12      	ldr	r3, [pc, #72]	@ (80047d8 <rand+0x6c>)
 8004790:	e9c0 1300 	strd	r1, r3, [r0]
 8004794:	4b11      	ldr	r3, [pc, #68]	@ (80047dc <rand+0x70>)
 8004796:	2100      	movs	r1, #0
 8004798:	6083      	str	r3, [r0, #8]
 800479a:	230b      	movs	r3, #11
 800479c:	8183      	strh	r3, [r0, #12]
 800479e:	2001      	movs	r0, #1
 80047a0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80047a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80047a6:	480e      	ldr	r0, [pc, #56]	@ (80047e0 <rand+0x74>)
 80047a8:	690b      	ldr	r3, [r1, #16]
 80047aa:	694c      	ldr	r4, [r1, #20]
 80047ac:	4358      	muls	r0, r3
 80047ae:	4a0d      	ldr	r2, [pc, #52]	@ (80047e4 <rand+0x78>)
 80047b0:	fb02 0004 	mla	r0, r2, r4, r0
 80047b4:	fba3 3202 	umull	r3, r2, r3, r2
 80047b8:	3301      	adds	r3, #1
 80047ba:	eb40 0002 	adc.w	r0, r0, r2
 80047be:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80047c2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80047c6:	bd10      	pop	{r4, pc}
 80047c8:	2000001c 	.word	0x2000001c
 80047cc:	080098d2 	.word	0x080098d2
 80047d0:	080098e9 	.word	0x080098e9
 80047d4:	abcd330e 	.word	0xabcd330e
 80047d8:	e66d1234 	.word	0xe66d1234
 80047dc:	0005deec 	.word	0x0005deec
 80047e0:	5851f42d 	.word	0x5851f42d
 80047e4:	4c957f2d 	.word	0x4c957f2d

080047e8 <__cvt>:
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047ee:	461d      	mov	r5, r3
 80047f0:	bfbb      	ittet	lt
 80047f2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80047f6:	461d      	movlt	r5, r3
 80047f8:	2300      	movge	r3, #0
 80047fa:	232d      	movlt	r3, #45	@ 0x2d
 80047fc:	b088      	sub	sp, #32
 80047fe:	4614      	mov	r4, r2
 8004800:	bfb8      	it	lt
 8004802:	4614      	movlt	r4, r2
 8004804:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004806:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004808:	7013      	strb	r3, [r2, #0]
 800480a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800480c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004810:	f023 0820 	bic.w	r8, r3, #32
 8004814:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004818:	d005      	beq.n	8004826 <__cvt+0x3e>
 800481a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800481e:	d100      	bne.n	8004822 <__cvt+0x3a>
 8004820:	3601      	adds	r6, #1
 8004822:	2302      	movs	r3, #2
 8004824:	e000      	b.n	8004828 <__cvt+0x40>
 8004826:	2303      	movs	r3, #3
 8004828:	aa07      	add	r2, sp, #28
 800482a:	9204      	str	r2, [sp, #16]
 800482c:	aa06      	add	r2, sp, #24
 800482e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004832:	e9cd 3600 	strd	r3, r6, [sp]
 8004836:	4622      	mov	r2, r4
 8004838:	462b      	mov	r3, r5
 800483a:	f000 fe8d 	bl	8005558 <_dtoa_r>
 800483e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004842:	4607      	mov	r7, r0
 8004844:	d119      	bne.n	800487a <__cvt+0x92>
 8004846:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004848:	07db      	lsls	r3, r3, #31
 800484a:	d50e      	bpl.n	800486a <__cvt+0x82>
 800484c:	eb00 0906 	add.w	r9, r0, r6
 8004850:	2200      	movs	r2, #0
 8004852:	2300      	movs	r3, #0
 8004854:	4620      	mov	r0, r4
 8004856:	4629      	mov	r1, r5
 8004858:	f7fc f8a6 	bl	80009a8 <__aeabi_dcmpeq>
 800485c:	b108      	cbz	r0, 8004862 <__cvt+0x7a>
 800485e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004862:	2230      	movs	r2, #48	@ 0x30
 8004864:	9b07      	ldr	r3, [sp, #28]
 8004866:	454b      	cmp	r3, r9
 8004868:	d31e      	bcc.n	80048a8 <__cvt+0xc0>
 800486a:	4638      	mov	r0, r7
 800486c:	9b07      	ldr	r3, [sp, #28]
 800486e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004870:	1bdb      	subs	r3, r3, r7
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	b008      	add	sp, #32
 8004876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800487e:	eb00 0906 	add.w	r9, r0, r6
 8004882:	d1e5      	bne.n	8004850 <__cvt+0x68>
 8004884:	7803      	ldrb	r3, [r0, #0]
 8004886:	2b30      	cmp	r3, #48	@ 0x30
 8004888:	d10a      	bne.n	80048a0 <__cvt+0xb8>
 800488a:	2200      	movs	r2, #0
 800488c:	2300      	movs	r3, #0
 800488e:	4620      	mov	r0, r4
 8004890:	4629      	mov	r1, r5
 8004892:	f7fc f889 	bl	80009a8 <__aeabi_dcmpeq>
 8004896:	b918      	cbnz	r0, 80048a0 <__cvt+0xb8>
 8004898:	f1c6 0601 	rsb	r6, r6, #1
 800489c:	f8ca 6000 	str.w	r6, [sl]
 80048a0:	f8da 3000 	ldr.w	r3, [sl]
 80048a4:	4499      	add	r9, r3
 80048a6:	e7d3      	b.n	8004850 <__cvt+0x68>
 80048a8:	1c59      	adds	r1, r3, #1
 80048aa:	9107      	str	r1, [sp, #28]
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	e7d9      	b.n	8004864 <__cvt+0x7c>

080048b0 <__exponent>:
 80048b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048b2:	2900      	cmp	r1, #0
 80048b4:	bfb6      	itet	lt
 80048b6:	232d      	movlt	r3, #45	@ 0x2d
 80048b8:	232b      	movge	r3, #43	@ 0x2b
 80048ba:	4249      	neglt	r1, r1
 80048bc:	2909      	cmp	r1, #9
 80048be:	7002      	strb	r2, [r0, #0]
 80048c0:	7043      	strb	r3, [r0, #1]
 80048c2:	dd29      	ble.n	8004918 <__exponent+0x68>
 80048c4:	f10d 0307 	add.w	r3, sp, #7
 80048c8:	461d      	mov	r5, r3
 80048ca:	270a      	movs	r7, #10
 80048cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80048d0:	461a      	mov	r2, r3
 80048d2:	fb07 1416 	mls	r4, r7, r6, r1
 80048d6:	3430      	adds	r4, #48	@ 0x30
 80048d8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80048dc:	460c      	mov	r4, r1
 80048de:	2c63      	cmp	r4, #99	@ 0x63
 80048e0:	4631      	mov	r1, r6
 80048e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80048e6:	dcf1      	bgt.n	80048cc <__exponent+0x1c>
 80048e8:	3130      	adds	r1, #48	@ 0x30
 80048ea:	1e94      	subs	r4, r2, #2
 80048ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80048f0:	4623      	mov	r3, r4
 80048f2:	1c41      	adds	r1, r0, #1
 80048f4:	42ab      	cmp	r3, r5
 80048f6:	d30a      	bcc.n	800490e <__exponent+0x5e>
 80048f8:	f10d 0309 	add.w	r3, sp, #9
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	42ac      	cmp	r4, r5
 8004900:	bf88      	it	hi
 8004902:	2300      	movhi	r3, #0
 8004904:	3302      	adds	r3, #2
 8004906:	4403      	add	r3, r0
 8004908:	1a18      	subs	r0, r3, r0
 800490a:	b003      	add	sp, #12
 800490c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800490e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004912:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004916:	e7ed      	b.n	80048f4 <__exponent+0x44>
 8004918:	2330      	movs	r3, #48	@ 0x30
 800491a:	3130      	adds	r1, #48	@ 0x30
 800491c:	7083      	strb	r3, [r0, #2]
 800491e:	70c1      	strb	r1, [r0, #3]
 8004920:	1d03      	adds	r3, r0, #4
 8004922:	e7f1      	b.n	8004908 <__exponent+0x58>

08004924 <_printf_float>:
 8004924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004928:	b091      	sub	sp, #68	@ 0x44
 800492a:	460c      	mov	r4, r1
 800492c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004930:	4616      	mov	r6, r2
 8004932:	461f      	mov	r7, r3
 8004934:	4605      	mov	r5, r0
 8004936:	f000 fce1 	bl	80052fc <_localeconv_r>
 800493a:	6803      	ldr	r3, [r0, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	9308      	str	r3, [sp, #32]
 8004940:	f7fb fc06 	bl	8000150 <strlen>
 8004944:	2300      	movs	r3, #0
 8004946:	930e      	str	r3, [sp, #56]	@ 0x38
 8004948:	f8d8 3000 	ldr.w	r3, [r8]
 800494c:	9009      	str	r0, [sp, #36]	@ 0x24
 800494e:	3307      	adds	r3, #7
 8004950:	f023 0307 	bic.w	r3, r3, #7
 8004954:	f103 0208 	add.w	r2, r3, #8
 8004958:	f894 a018 	ldrb.w	sl, [r4, #24]
 800495c:	f8d4 b000 	ldr.w	fp, [r4]
 8004960:	f8c8 2000 	str.w	r2, [r8]
 8004964:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004968:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800496c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800496e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004972:	f04f 32ff 	mov.w	r2, #4294967295
 8004976:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800497a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800497e:	4b9c      	ldr	r3, [pc, #624]	@ (8004bf0 <_printf_float+0x2cc>)
 8004980:	f7fc f844 	bl	8000a0c <__aeabi_dcmpun>
 8004984:	bb70      	cbnz	r0, 80049e4 <_printf_float+0xc0>
 8004986:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800498a:	f04f 32ff 	mov.w	r2, #4294967295
 800498e:	4b98      	ldr	r3, [pc, #608]	@ (8004bf0 <_printf_float+0x2cc>)
 8004990:	f7fc f81e 	bl	80009d0 <__aeabi_dcmple>
 8004994:	bb30      	cbnz	r0, 80049e4 <_printf_float+0xc0>
 8004996:	2200      	movs	r2, #0
 8004998:	2300      	movs	r3, #0
 800499a:	4640      	mov	r0, r8
 800499c:	4649      	mov	r1, r9
 800499e:	f7fc f80d 	bl	80009bc <__aeabi_dcmplt>
 80049a2:	b110      	cbz	r0, 80049aa <_printf_float+0x86>
 80049a4:	232d      	movs	r3, #45	@ 0x2d
 80049a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049aa:	4a92      	ldr	r2, [pc, #584]	@ (8004bf4 <_printf_float+0x2d0>)
 80049ac:	4b92      	ldr	r3, [pc, #584]	@ (8004bf8 <_printf_float+0x2d4>)
 80049ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80049b2:	bf8c      	ite	hi
 80049b4:	4690      	movhi	r8, r2
 80049b6:	4698      	movls	r8, r3
 80049b8:	2303      	movs	r3, #3
 80049ba:	f04f 0900 	mov.w	r9, #0
 80049be:	6123      	str	r3, [r4, #16]
 80049c0:	f02b 0304 	bic.w	r3, fp, #4
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	4633      	mov	r3, r6
 80049c8:	4621      	mov	r1, r4
 80049ca:	4628      	mov	r0, r5
 80049cc:	9700      	str	r7, [sp, #0]
 80049ce:	aa0f      	add	r2, sp, #60	@ 0x3c
 80049d0:	f000 f9d4 	bl	8004d7c <_printf_common>
 80049d4:	3001      	adds	r0, #1
 80049d6:	f040 8090 	bne.w	8004afa <_printf_float+0x1d6>
 80049da:	f04f 30ff 	mov.w	r0, #4294967295
 80049de:	b011      	add	sp, #68	@ 0x44
 80049e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e4:	4642      	mov	r2, r8
 80049e6:	464b      	mov	r3, r9
 80049e8:	4640      	mov	r0, r8
 80049ea:	4649      	mov	r1, r9
 80049ec:	f7fc f80e 	bl	8000a0c <__aeabi_dcmpun>
 80049f0:	b148      	cbz	r0, 8004a06 <_printf_float+0xe2>
 80049f2:	464b      	mov	r3, r9
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bfb8      	it	lt
 80049f8:	232d      	movlt	r3, #45	@ 0x2d
 80049fa:	4a80      	ldr	r2, [pc, #512]	@ (8004bfc <_printf_float+0x2d8>)
 80049fc:	bfb8      	it	lt
 80049fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004a02:	4b7f      	ldr	r3, [pc, #508]	@ (8004c00 <_printf_float+0x2dc>)
 8004a04:	e7d3      	b.n	80049ae <_printf_float+0x8a>
 8004a06:	6863      	ldr	r3, [r4, #4]
 8004a08:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	d13f      	bne.n	8004a90 <_printf_float+0x16c>
 8004a10:	2306      	movs	r3, #6
 8004a12:	6063      	str	r3, [r4, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	9206      	str	r2, [sp, #24]
 8004a1e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004a20:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004a24:	aa0d      	add	r2, sp, #52	@ 0x34
 8004a26:	9203      	str	r2, [sp, #12]
 8004a28:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004a2c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004a30:	6863      	ldr	r3, [r4, #4]
 8004a32:	4642      	mov	r2, r8
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	4628      	mov	r0, r5
 8004a38:	464b      	mov	r3, r9
 8004a3a:	910a      	str	r1, [sp, #40]	@ 0x28
 8004a3c:	f7ff fed4 	bl	80047e8 <__cvt>
 8004a40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004a42:	4680      	mov	r8, r0
 8004a44:	2947      	cmp	r1, #71	@ 0x47
 8004a46:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004a48:	d128      	bne.n	8004a9c <_printf_float+0x178>
 8004a4a:	1cc8      	adds	r0, r1, #3
 8004a4c:	db02      	blt.n	8004a54 <_printf_float+0x130>
 8004a4e:	6863      	ldr	r3, [r4, #4]
 8004a50:	4299      	cmp	r1, r3
 8004a52:	dd40      	ble.n	8004ad6 <_printf_float+0x1b2>
 8004a54:	f1aa 0a02 	sub.w	sl, sl, #2
 8004a58:	fa5f fa8a 	uxtb.w	sl, sl
 8004a5c:	4652      	mov	r2, sl
 8004a5e:	3901      	subs	r1, #1
 8004a60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004a64:	910d      	str	r1, [sp, #52]	@ 0x34
 8004a66:	f7ff ff23 	bl	80048b0 <__exponent>
 8004a6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a6c:	4681      	mov	r9, r0
 8004a6e:	1813      	adds	r3, r2, r0
 8004a70:	2a01      	cmp	r2, #1
 8004a72:	6123      	str	r3, [r4, #16]
 8004a74:	dc02      	bgt.n	8004a7c <_printf_float+0x158>
 8004a76:	6822      	ldr	r2, [r4, #0]
 8004a78:	07d2      	lsls	r2, r2, #31
 8004a7a:	d501      	bpl.n	8004a80 <_printf_float+0x15c>
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	6123      	str	r3, [r4, #16]
 8004a80:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d09e      	beq.n	80049c6 <_printf_float+0xa2>
 8004a88:	232d      	movs	r3, #45	@ 0x2d
 8004a8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a8e:	e79a      	b.n	80049c6 <_printf_float+0xa2>
 8004a90:	2947      	cmp	r1, #71	@ 0x47
 8004a92:	d1bf      	bne.n	8004a14 <_printf_float+0xf0>
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1bd      	bne.n	8004a14 <_printf_float+0xf0>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e7ba      	b.n	8004a12 <_printf_float+0xee>
 8004a9c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004aa0:	d9dc      	bls.n	8004a5c <_printf_float+0x138>
 8004aa2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004aa6:	d118      	bne.n	8004ada <_printf_float+0x1b6>
 8004aa8:	2900      	cmp	r1, #0
 8004aaa:	6863      	ldr	r3, [r4, #4]
 8004aac:	dd0b      	ble.n	8004ac6 <_printf_float+0x1a2>
 8004aae:	6121      	str	r1, [r4, #16]
 8004ab0:	b913      	cbnz	r3, 8004ab8 <_printf_float+0x194>
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	07d0      	lsls	r0, r2, #31
 8004ab6:	d502      	bpl.n	8004abe <_printf_float+0x19a>
 8004ab8:	3301      	adds	r3, #1
 8004aba:	440b      	add	r3, r1
 8004abc:	6123      	str	r3, [r4, #16]
 8004abe:	f04f 0900 	mov.w	r9, #0
 8004ac2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004ac4:	e7dc      	b.n	8004a80 <_printf_float+0x15c>
 8004ac6:	b913      	cbnz	r3, 8004ace <_printf_float+0x1aa>
 8004ac8:	6822      	ldr	r2, [r4, #0]
 8004aca:	07d2      	lsls	r2, r2, #31
 8004acc:	d501      	bpl.n	8004ad2 <_printf_float+0x1ae>
 8004ace:	3302      	adds	r3, #2
 8004ad0:	e7f4      	b.n	8004abc <_printf_float+0x198>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e7f2      	b.n	8004abc <_printf_float+0x198>
 8004ad6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004ada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004adc:	4299      	cmp	r1, r3
 8004ade:	db05      	blt.n	8004aec <_printf_float+0x1c8>
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	6121      	str	r1, [r4, #16]
 8004ae4:	07d8      	lsls	r0, r3, #31
 8004ae6:	d5ea      	bpl.n	8004abe <_printf_float+0x19a>
 8004ae8:	1c4b      	adds	r3, r1, #1
 8004aea:	e7e7      	b.n	8004abc <_printf_float+0x198>
 8004aec:	2900      	cmp	r1, #0
 8004aee:	bfcc      	ite	gt
 8004af0:	2201      	movgt	r2, #1
 8004af2:	f1c1 0202 	rsble	r2, r1, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	e7e0      	b.n	8004abc <_printf_float+0x198>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	055a      	lsls	r2, r3, #21
 8004afe:	d407      	bmi.n	8004b10 <_printf_float+0x1ec>
 8004b00:	6923      	ldr	r3, [r4, #16]
 8004b02:	4642      	mov	r2, r8
 8004b04:	4631      	mov	r1, r6
 8004b06:	4628      	mov	r0, r5
 8004b08:	47b8      	blx	r7
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	d12b      	bne.n	8004b66 <_printf_float+0x242>
 8004b0e:	e764      	b.n	80049da <_printf_float+0xb6>
 8004b10:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b14:	f240 80dc 	bls.w	8004cd0 <_printf_float+0x3ac>
 8004b18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f7fb ff42 	bl	80009a8 <__aeabi_dcmpeq>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d033      	beq.n	8004b90 <_printf_float+0x26c>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	4a35      	ldr	r2, [pc, #212]	@ (8004c04 <_printf_float+0x2e0>)
 8004b30:	47b8      	blx	r7
 8004b32:	3001      	adds	r0, #1
 8004b34:	f43f af51 	beq.w	80049da <_printf_float+0xb6>
 8004b38:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004b3c:	4543      	cmp	r3, r8
 8004b3e:	db02      	blt.n	8004b46 <_printf_float+0x222>
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	07d8      	lsls	r0, r3, #31
 8004b44:	d50f      	bpl.n	8004b66 <_printf_float+0x242>
 8004b46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b4a:	4631      	mov	r1, r6
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	47b8      	blx	r7
 8004b50:	3001      	adds	r0, #1
 8004b52:	f43f af42 	beq.w	80049da <_printf_float+0xb6>
 8004b56:	f04f 0900 	mov.w	r9, #0
 8004b5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b5e:	f104 0a1a 	add.w	sl, r4, #26
 8004b62:	45c8      	cmp	r8, r9
 8004b64:	dc09      	bgt.n	8004b7a <_printf_float+0x256>
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	079b      	lsls	r3, r3, #30
 8004b6a:	f100 8102 	bmi.w	8004d72 <_printf_float+0x44e>
 8004b6e:	68e0      	ldr	r0, [r4, #12]
 8004b70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b72:	4298      	cmp	r0, r3
 8004b74:	bfb8      	it	lt
 8004b76:	4618      	movlt	r0, r3
 8004b78:	e731      	b.n	80049de <_printf_float+0xba>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	4652      	mov	r2, sl
 8004b7e:	4631      	mov	r1, r6
 8004b80:	4628      	mov	r0, r5
 8004b82:	47b8      	blx	r7
 8004b84:	3001      	adds	r0, #1
 8004b86:	f43f af28 	beq.w	80049da <_printf_float+0xb6>
 8004b8a:	f109 0901 	add.w	r9, r9, #1
 8004b8e:	e7e8      	b.n	8004b62 <_printf_float+0x23e>
 8004b90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	dc38      	bgt.n	8004c08 <_printf_float+0x2e4>
 8004b96:	2301      	movs	r3, #1
 8004b98:	4631      	mov	r1, r6
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	4a19      	ldr	r2, [pc, #100]	@ (8004c04 <_printf_float+0x2e0>)
 8004b9e:	47b8      	blx	r7
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	f43f af1a 	beq.w	80049da <_printf_float+0xb6>
 8004ba6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004baa:	ea59 0303 	orrs.w	r3, r9, r3
 8004bae:	d102      	bne.n	8004bb6 <_printf_float+0x292>
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	07d9      	lsls	r1, r3, #31
 8004bb4:	d5d7      	bpl.n	8004b66 <_printf_float+0x242>
 8004bb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	47b8      	blx	r7
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	f43f af0a 	beq.w	80049da <_printf_float+0xb6>
 8004bc6:	f04f 0a00 	mov.w	sl, #0
 8004bca:	f104 0b1a 	add.w	fp, r4, #26
 8004bce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004bd0:	425b      	negs	r3, r3
 8004bd2:	4553      	cmp	r3, sl
 8004bd4:	dc01      	bgt.n	8004bda <_printf_float+0x2b6>
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	e793      	b.n	8004b02 <_printf_float+0x1de>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	465a      	mov	r2, fp
 8004bde:	4631      	mov	r1, r6
 8004be0:	4628      	mov	r0, r5
 8004be2:	47b8      	blx	r7
 8004be4:	3001      	adds	r0, #1
 8004be6:	f43f aef8 	beq.w	80049da <_printf_float+0xb6>
 8004bea:	f10a 0a01 	add.w	sl, sl, #1
 8004bee:	e7ee      	b.n	8004bce <_printf_float+0x2aa>
 8004bf0:	7fefffff 	.word	0x7fefffff
 8004bf4:	08009945 	.word	0x08009945
 8004bf8:	08009941 	.word	0x08009941
 8004bfc:	0800994d 	.word	0x0800994d
 8004c00:	08009949 	.word	0x08009949
 8004c04:	08009951 	.word	0x08009951
 8004c08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c0a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004c0e:	4553      	cmp	r3, sl
 8004c10:	bfa8      	it	ge
 8004c12:	4653      	movge	r3, sl
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	4699      	mov	r9, r3
 8004c18:	dc36      	bgt.n	8004c88 <_printf_float+0x364>
 8004c1a:	f04f 0b00 	mov.w	fp, #0
 8004c1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c22:	f104 021a 	add.w	r2, r4, #26
 8004c26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c28:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c2a:	eba3 0309 	sub.w	r3, r3, r9
 8004c2e:	455b      	cmp	r3, fp
 8004c30:	dc31      	bgt.n	8004c96 <_printf_float+0x372>
 8004c32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c34:	459a      	cmp	sl, r3
 8004c36:	dc3a      	bgt.n	8004cae <_printf_float+0x38a>
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	07da      	lsls	r2, r3, #31
 8004c3c:	d437      	bmi.n	8004cae <_printf_float+0x38a>
 8004c3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c40:	ebaa 0903 	sub.w	r9, sl, r3
 8004c44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c46:	ebaa 0303 	sub.w	r3, sl, r3
 8004c4a:	4599      	cmp	r9, r3
 8004c4c:	bfa8      	it	ge
 8004c4e:	4699      	movge	r9, r3
 8004c50:	f1b9 0f00 	cmp.w	r9, #0
 8004c54:	dc33      	bgt.n	8004cbe <_printf_float+0x39a>
 8004c56:	f04f 0800 	mov.w	r8, #0
 8004c5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c5e:	f104 0b1a 	add.w	fp, r4, #26
 8004c62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c64:	ebaa 0303 	sub.w	r3, sl, r3
 8004c68:	eba3 0309 	sub.w	r3, r3, r9
 8004c6c:	4543      	cmp	r3, r8
 8004c6e:	f77f af7a 	ble.w	8004b66 <_printf_float+0x242>
 8004c72:	2301      	movs	r3, #1
 8004c74:	465a      	mov	r2, fp
 8004c76:	4631      	mov	r1, r6
 8004c78:	4628      	mov	r0, r5
 8004c7a:	47b8      	blx	r7
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	f43f aeac 	beq.w	80049da <_printf_float+0xb6>
 8004c82:	f108 0801 	add.w	r8, r8, #1
 8004c86:	e7ec      	b.n	8004c62 <_printf_float+0x33e>
 8004c88:	4642      	mov	r2, r8
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	47b8      	blx	r7
 8004c90:	3001      	adds	r0, #1
 8004c92:	d1c2      	bne.n	8004c1a <_printf_float+0x2f6>
 8004c94:	e6a1      	b.n	80049da <_printf_float+0xb6>
 8004c96:	2301      	movs	r3, #1
 8004c98:	4631      	mov	r1, r6
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	920a      	str	r2, [sp, #40]	@ 0x28
 8004c9e:	47b8      	blx	r7
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	f43f ae9a 	beq.w	80049da <_printf_float+0xb6>
 8004ca6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ca8:	f10b 0b01 	add.w	fp, fp, #1
 8004cac:	e7bb      	b.n	8004c26 <_printf_float+0x302>
 8004cae:	4631      	mov	r1, r6
 8004cb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	47b8      	blx	r7
 8004cb8:	3001      	adds	r0, #1
 8004cba:	d1c0      	bne.n	8004c3e <_printf_float+0x31a>
 8004cbc:	e68d      	b.n	80049da <_printf_float+0xb6>
 8004cbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	4442      	add	r2, r8
 8004cc8:	47b8      	blx	r7
 8004cca:	3001      	adds	r0, #1
 8004ccc:	d1c3      	bne.n	8004c56 <_printf_float+0x332>
 8004cce:	e684      	b.n	80049da <_printf_float+0xb6>
 8004cd0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004cd4:	f1ba 0f01 	cmp.w	sl, #1
 8004cd8:	dc01      	bgt.n	8004cde <_printf_float+0x3ba>
 8004cda:	07db      	lsls	r3, r3, #31
 8004cdc:	d536      	bpl.n	8004d4c <_printf_float+0x428>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	4642      	mov	r2, r8
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	47b8      	blx	r7
 8004ce8:	3001      	adds	r0, #1
 8004cea:	f43f ae76 	beq.w	80049da <_printf_float+0xb6>
 8004cee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004cf2:	4631      	mov	r1, r6
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	47b8      	blx	r7
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	f43f ae6e 	beq.w	80049da <_printf_float+0xb6>
 8004cfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d02:	2200      	movs	r2, #0
 8004d04:	2300      	movs	r3, #0
 8004d06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d0a:	f7fb fe4d 	bl	80009a8 <__aeabi_dcmpeq>
 8004d0e:	b9c0      	cbnz	r0, 8004d42 <_printf_float+0x41e>
 8004d10:	4653      	mov	r3, sl
 8004d12:	f108 0201 	add.w	r2, r8, #1
 8004d16:	4631      	mov	r1, r6
 8004d18:	4628      	mov	r0, r5
 8004d1a:	47b8      	blx	r7
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	d10c      	bne.n	8004d3a <_printf_float+0x416>
 8004d20:	e65b      	b.n	80049da <_printf_float+0xb6>
 8004d22:	2301      	movs	r3, #1
 8004d24:	465a      	mov	r2, fp
 8004d26:	4631      	mov	r1, r6
 8004d28:	4628      	mov	r0, r5
 8004d2a:	47b8      	blx	r7
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	f43f ae54 	beq.w	80049da <_printf_float+0xb6>
 8004d32:	f108 0801 	add.w	r8, r8, #1
 8004d36:	45d0      	cmp	r8, sl
 8004d38:	dbf3      	blt.n	8004d22 <_printf_float+0x3fe>
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004d40:	e6e0      	b.n	8004b04 <_printf_float+0x1e0>
 8004d42:	f04f 0800 	mov.w	r8, #0
 8004d46:	f104 0b1a 	add.w	fp, r4, #26
 8004d4a:	e7f4      	b.n	8004d36 <_printf_float+0x412>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	4642      	mov	r2, r8
 8004d50:	e7e1      	b.n	8004d16 <_printf_float+0x3f2>
 8004d52:	2301      	movs	r3, #1
 8004d54:	464a      	mov	r2, r9
 8004d56:	4631      	mov	r1, r6
 8004d58:	4628      	mov	r0, r5
 8004d5a:	47b8      	blx	r7
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	f43f ae3c 	beq.w	80049da <_printf_float+0xb6>
 8004d62:	f108 0801 	add.w	r8, r8, #1
 8004d66:	68e3      	ldr	r3, [r4, #12]
 8004d68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004d6a:	1a5b      	subs	r3, r3, r1
 8004d6c:	4543      	cmp	r3, r8
 8004d6e:	dcf0      	bgt.n	8004d52 <_printf_float+0x42e>
 8004d70:	e6fd      	b.n	8004b6e <_printf_float+0x24a>
 8004d72:	f04f 0800 	mov.w	r8, #0
 8004d76:	f104 0919 	add.w	r9, r4, #25
 8004d7a:	e7f4      	b.n	8004d66 <_printf_float+0x442>

08004d7c <_printf_common>:
 8004d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d80:	4616      	mov	r6, r2
 8004d82:	4698      	mov	r8, r3
 8004d84:	688a      	ldr	r2, [r1, #8]
 8004d86:	690b      	ldr	r3, [r1, #16]
 8004d88:	4607      	mov	r7, r0
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	bfb8      	it	lt
 8004d8e:	4613      	movlt	r3, r2
 8004d90:	6033      	str	r3, [r6, #0]
 8004d92:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d96:	460c      	mov	r4, r1
 8004d98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d9c:	b10a      	cbz	r2, 8004da2 <_printf_common+0x26>
 8004d9e:	3301      	adds	r3, #1
 8004da0:	6033      	str	r3, [r6, #0]
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	0699      	lsls	r1, r3, #26
 8004da6:	bf42      	ittt	mi
 8004da8:	6833      	ldrmi	r3, [r6, #0]
 8004daa:	3302      	addmi	r3, #2
 8004dac:	6033      	strmi	r3, [r6, #0]
 8004dae:	6825      	ldr	r5, [r4, #0]
 8004db0:	f015 0506 	ands.w	r5, r5, #6
 8004db4:	d106      	bne.n	8004dc4 <_printf_common+0x48>
 8004db6:	f104 0a19 	add.w	sl, r4, #25
 8004dba:	68e3      	ldr	r3, [r4, #12]
 8004dbc:	6832      	ldr	r2, [r6, #0]
 8004dbe:	1a9b      	subs	r3, r3, r2
 8004dc0:	42ab      	cmp	r3, r5
 8004dc2:	dc2b      	bgt.n	8004e1c <_printf_common+0xa0>
 8004dc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004dc8:	6822      	ldr	r2, [r4, #0]
 8004dca:	3b00      	subs	r3, #0
 8004dcc:	bf18      	it	ne
 8004dce:	2301      	movne	r3, #1
 8004dd0:	0692      	lsls	r2, r2, #26
 8004dd2:	d430      	bmi.n	8004e36 <_printf_common+0xba>
 8004dd4:	4641      	mov	r1, r8
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ddc:	47c8      	blx	r9
 8004dde:	3001      	adds	r0, #1
 8004de0:	d023      	beq.n	8004e2a <_printf_common+0xae>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	6922      	ldr	r2, [r4, #16]
 8004de6:	f003 0306 	and.w	r3, r3, #6
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	bf14      	ite	ne
 8004dee:	2500      	movne	r5, #0
 8004df0:	6833      	ldreq	r3, [r6, #0]
 8004df2:	f04f 0600 	mov.w	r6, #0
 8004df6:	bf08      	it	eq
 8004df8:	68e5      	ldreq	r5, [r4, #12]
 8004dfa:	f104 041a 	add.w	r4, r4, #26
 8004dfe:	bf08      	it	eq
 8004e00:	1aed      	subeq	r5, r5, r3
 8004e02:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e06:	bf08      	it	eq
 8004e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	bfc4      	itt	gt
 8004e10:	1a9b      	subgt	r3, r3, r2
 8004e12:	18ed      	addgt	r5, r5, r3
 8004e14:	42b5      	cmp	r5, r6
 8004e16:	d11a      	bne.n	8004e4e <_printf_common+0xd2>
 8004e18:	2000      	movs	r0, #0
 8004e1a:	e008      	b.n	8004e2e <_printf_common+0xb2>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	4652      	mov	r2, sl
 8004e20:	4641      	mov	r1, r8
 8004e22:	4638      	mov	r0, r7
 8004e24:	47c8      	blx	r9
 8004e26:	3001      	adds	r0, #1
 8004e28:	d103      	bne.n	8004e32 <_printf_common+0xb6>
 8004e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e32:	3501      	adds	r5, #1
 8004e34:	e7c1      	b.n	8004dba <_printf_common+0x3e>
 8004e36:	2030      	movs	r0, #48	@ 0x30
 8004e38:	18e1      	adds	r1, r4, r3
 8004e3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e44:	4422      	add	r2, r4
 8004e46:	3302      	adds	r3, #2
 8004e48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e4c:	e7c2      	b.n	8004dd4 <_printf_common+0x58>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	4622      	mov	r2, r4
 8004e52:	4641      	mov	r1, r8
 8004e54:	4638      	mov	r0, r7
 8004e56:	47c8      	blx	r9
 8004e58:	3001      	adds	r0, #1
 8004e5a:	d0e6      	beq.n	8004e2a <_printf_common+0xae>
 8004e5c:	3601      	adds	r6, #1
 8004e5e:	e7d9      	b.n	8004e14 <_printf_common+0x98>

08004e60 <_printf_i>:
 8004e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e64:	7e0f      	ldrb	r7, [r1, #24]
 8004e66:	4691      	mov	r9, r2
 8004e68:	2f78      	cmp	r7, #120	@ 0x78
 8004e6a:	4680      	mov	r8, r0
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	469a      	mov	sl, r3
 8004e70:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e76:	d807      	bhi.n	8004e88 <_printf_i+0x28>
 8004e78:	2f62      	cmp	r7, #98	@ 0x62
 8004e7a:	d80a      	bhi.n	8004e92 <_printf_i+0x32>
 8004e7c:	2f00      	cmp	r7, #0
 8004e7e:	f000 80d1 	beq.w	8005024 <_printf_i+0x1c4>
 8004e82:	2f58      	cmp	r7, #88	@ 0x58
 8004e84:	f000 80b8 	beq.w	8004ff8 <_printf_i+0x198>
 8004e88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e90:	e03a      	b.n	8004f08 <_printf_i+0xa8>
 8004e92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e96:	2b15      	cmp	r3, #21
 8004e98:	d8f6      	bhi.n	8004e88 <_printf_i+0x28>
 8004e9a:	a101      	add	r1, pc, #4	@ (adr r1, 8004ea0 <_printf_i+0x40>)
 8004e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ea0:	08004ef9 	.word	0x08004ef9
 8004ea4:	08004f0d 	.word	0x08004f0d
 8004ea8:	08004e89 	.word	0x08004e89
 8004eac:	08004e89 	.word	0x08004e89
 8004eb0:	08004e89 	.word	0x08004e89
 8004eb4:	08004e89 	.word	0x08004e89
 8004eb8:	08004f0d 	.word	0x08004f0d
 8004ebc:	08004e89 	.word	0x08004e89
 8004ec0:	08004e89 	.word	0x08004e89
 8004ec4:	08004e89 	.word	0x08004e89
 8004ec8:	08004e89 	.word	0x08004e89
 8004ecc:	0800500b 	.word	0x0800500b
 8004ed0:	08004f37 	.word	0x08004f37
 8004ed4:	08004fc5 	.word	0x08004fc5
 8004ed8:	08004e89 	.word	0x08004e89
 8004edc:	08004e89 	.word	0x08004e89
 8004ee0:	0800502d 	.word	0x0800502d
 8004ee4:	08004e89 	.word	0x08004e89
 8004ee8:	08004f37 	.word	0x08004f37
 8004eec:	08004e89 	.word	0x08004e89
 8004ef0:	08004e89 	.word	0x08004e89
 8004ef4:	08004fcd 	.word	0x08004fcd
 8004ef8:	6833      	ldr	r3, [r6, #0]
 8004efa:	1d1a      	adds	r2, r3, #4
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6032      	str	r2, [r6, #0]
 8004f00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e09c      	b.n	8005046 <_printf_i+0x1e6>
 8004f0c:	6833      	ldr	r3, [r6, #0]
 8004f0e:	6820      	ldr	r0, [r4, #0]
 8004f10:	1d19      	adds	r1, r3, #4
 8004f12:	6031      	str	r1, [r6, #0]
 8004f14:	0606      	lsls	r6, r0, #24
 8004f16:	d501      	bpl.n	8004f1c <_printf_i+0xbc>
 8004f18:	681d      	ldr	r5, [r3, #0]
 8004f1a:	e003      	b.n	8004f24 <_printf_i+0xc4>
 8004f1c:	0645      	lsls	r5, r0, #25
 8004f1e:	d5fb      	bpl.n	8004f18 <_printf_i+0xb8>
 8004f20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f24:	2d00      	cmp	r5, #0
 8004f26:	da03      	bge.n	8004f30 <_printf_i+0xd0>
 8004f28:	232d      	movs	r3, #45	@ 0x2d
 8004f2a:	426d      	negs	r5, r5
 8004f2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f30:	230a      	movs	r3, #10
 8004f32:	4858      	ldr	r0, [pc, #352]	@ (8005094 <_printf_i+0x234>)
 8004f34:	e011      	b.n	8004f5a <_printf_i+0xfa>
 8004f36:	6821      	ldr	r1, [r4, #0]
 8004f38:	6833      	ldr	r3, [r6, #0]
 8004f3a:	0608      	lsls	r0, r1, #24
 8004f3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f40:	d402      	bmi.n	8004f48 <_printf_i+0xe8>
 8004f42:	0649      	lsls	r1, r1, #25
 8004f44:	bf48      	it	mi
 8004f46:	b2ad      	uxthmi	r5, r5
 8004f48:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f4a:	6033      	str	r3, [r6, #0]
 8004f4c:	bf14      	ite	ne
 8004f4e:	230a      	movne	r3, #10
 8004f50:	2308      	moveq	r3, #8
 8004f52:	4850      	ldr	r0, [pc, #320]	@ (8005094 <_printf_i+0x234>)
 8004f54:	2100      	movs	r1, #0
 8004f56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f5a:	6866      	ldr	r6, [r4, #4]
 8004f5c:	2e00      	cmp	r6, #0
 8004f5e:	60a6      	str	r6, [r4, #8]
 8004f60:	db05      	blt.n	8004f6e <_printf_i+0x10e>
 8004f62:	6821      	ldr	r1, [r4, #0]
 8004f64:	432e      	orrs	r6, r5
 8004f66:	f021 0104 	bic.w	r1, r1, #4
 8004f6a:	6021      	str	r1, [r4, #0]
 8004f6c:	d04b      	beq.n	8005006 <_printf_i+0x1a6>
 8004f6e:	4616      	mov	r6, r2
 8004f70:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f74:	fb03 5711 	mls	r7, r3, r1, r5
 8004f78:	5dc7      	ldrb	r7, [r0, r7]
 8004f7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f7e:	462f      	mov	r7, r5
 8004f80:	42bb      	cmp	r3, r7
 8004f82:	460d      	mov	r5, r1
 8004f84:	d9f4      	bls.n	8004f70 <_printf_i+0x110>
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d10b      	bne.n	8004fa2 <_printf_i+0x142>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	07df      	lsls	r7, r3, #31
 8004f8e:	d508      	bpl.n	8004fa2 <_printf_i+0x142>
 8004f90:	6923      	ldr	r3, [r4, #16]
 8004f92:	6861      	ldr	r1, [r4, #4]
 8004f94:	4299      	cmp	r1, r3
 8004f96:	bfde      	ittt	le
 8004f98:	2330      	movle	r3, #48	@ 0x30
 8004f9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fa2:	1b92      	subs	r2, r2, r6
 8004fa4:	6122      	str	r2, [r4, #16]
 8004fa6:	464b      	mov	r3, r9
 8004fa8:	4621      	mov	r1, r4
 8004faa:	4640      	mov	r0, r8
 8004fac:	f8cd a000 	str.w	sl, [sp]
 8004fb0:	aa03      	add	r2, sp, #12
 8004fb2:	f7ff fee3 	bl	8004d7c <_printf_common>
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d14a      	bne.n	8005050 <_printf_i+0x1f0>
 8004fba:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbe:	b004      	add	sp, #16
 8004fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	f043 0320 	orr.w	r3, r3, #32
 8004fca:	6023      	str	r3, [r4, #0]
 8004fcc:	2778      	movs	r7, #120	@ 0x78
 8004fce:	4832      	ldr	r0, [pc, #200]	@ (8005098 <_printf_i+0x238>)
 8004fd0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	6831      	ldr	r1, [r6, #0]
 8004fd8:	061f      	lsls	r7, r3, #24
 8004fda:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fde:	d402      	bmi.n	8004fe6 <_printf_i+0x186>
 8004fe0:	065f      	lsls	r7, r3, #25
 8004fe2:	bf48      	it	mi
 8004fe4:	b2ad      	uxthmi	r5, r5
 8004fe6:	6031      	str	r1, [r6, #0]
 8004fe8:	07d9      	lsls	r1, r3, #31
 8004fea:	bf44      	itt	mi
 8004fec:	f043 0320 	orrmi.w	r3, r3, #32
 8004ff0:	6023      	strmi	r3, [r4, #0]
 8004ff2:	b11d      	cbz	r5, 8004ffc <_printf_i+0x19c>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	e7ad      	b.n	8004f54 <_printf_i+0xf4>
 8004ff8:	4826      	ldr	r0, [pc, #152]	@ (8005094 <_printf_i+0x234>)
 8004ffa:	e7e9      	b.n	8004fd0 <_printf_i+0x170>
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	f023 0320 	bic.w	r3, r3, #32
 8005002:	6023      	str	r3, [r4, #0]
 8005004:	e7f6      	b.n	8004ff4 <_printf_i+0x194>
 8005006:	4616      	mov	r6, r2
 8005008:	e7bd      	b.n	8004f86 <_printf_i+0x126>
 800500a:	6833      	ldr	r3, [r6, #0]
 800500c:	6825      	ldr	r5, [r4, #0]
 800500e:	1d18      	adds	r0, r3, #4
 8005010:	6961      	ldr	r1, [r4, #20]
 8005012:	6030      	str	r0, [r6, #0]
 8005014:	062e      	lsls	r6, r5, #24
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	d501      	bpl.n	800501e <_printf_i+0x1be>
 800501a:	6019      	str	r1, [r3, #0]
 800501c:	e002      	b.n	8005024 <_printf_i+0x1c4>
 800501e:	0668      	lsls	r0, r5, #25
 8005020:	d5fb      	bpl.n	800501a <_printf_i+0x1ba>
 8005022:	8019      	strh	r1, [r3, #0]
 8005024:	2300      	movs	r3, #0
 8005026:	4616      	mov	r6, r2
 8005028:	6123      	str	r3, [r4, #16]
 800502a:	e7bc      	b.n	8004fa6 <_printf_i+0x146>
 800502c:	6833      	ldr	r3, [r6, #0]
 800502e:	2100      	movs	r1, #0
 8005030:	1d1a      	adds	r2, r3, #4
 8005032:	6032      	str	r2, [r6, #0]
 8005034:	681e      	ldr	r6, [r3, #0]
 8005036:	6862      	ldr	r2, [r4, #4]
 8005038:	4630      	mov	r0, r6
 800503a:	f000 f9d6 	bl	80053ea <memchr>
 800503e:	b108      	cbz	r0, 8005044 <_printf_i+0x1e4>
 8005040:	1b80      	subs	r0, r0, r6
 8005042:	6060      	str	r0, [r4, #4]
 8005044:	6863      	ldr	r3, [r4, #4]
 8005046:	6123      	str	r3, [r4, #16]
 8005048:	2300      	movs	r3, #0
 800504a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800504e:	e7aa      	b.n	8004fa6 <_printf_i+0x146>
 8005050:	4632      	mov	r2, r6
 8005052:	4649      	mov	r1, r9
 8005054:	4640      	mov	r0, r8
 8005056:	6923      	ldr	r3, [r4, #16]
 8005058:	47d0      	blx	sl
 800505a:	3001      	adds	r0, #1
 800505c:	d0ad      	beq.n	8004fba <_printf_i+0x15a>
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	079b      	lsls	r3, r3, #30
 8005062:	d413      	bmi.n	800508c <_printf_i+0x22c>
 8005064:	68e0      	ldr	r0, [r4, #12]
 8005066:	9b03      	ldr	r3, [sp, #12]
 8005068:	4298      	cmp	r0, r3
 800506a:	bfb8      	it	lt
 800506c:	4618      	movlt	r0, r3
 800506e:	e7a6      	b.n	8004fbe <_printf_i+0x15e>
 8005070:	2301      	movs	r3, #1
 8005072:	4632      	mov	r2, r6
 8005074:	4649      	mov	r1, r9
 8005076:	4640      	mov	r0, r8
 8005078:	47d0      	blx	sl
 800507a:	3001      	adds	r0, #1
 800507c:	d09d      	beq.n	8004fba <_printf_i+0x15a>
 800507e:	3501      	adds	r5, #1
 8005080:	68e3      	ldr	r3, [r4, #12]
 8005082:	9903      	ldr	r1, [sp, #12]
 8005084:	1a5b      	subs	r3, r3, r1
 8005086:	42ab      	cmp	r3, r5
 8005088:	dcf2      	bgt.n	8005070 <_printf_i+0x210>
 800508a:	e7eb      	b.n	8005064 <_printf_i+0x204>
 800508c:	2500      	movs	r5, #0
 800508e:	f104 0619 	add.w	r6, r4, #25
 8005092:	e7f5      	b.n	8005080 <_printf_i+0x220>
 8005094:	08009953 	.word	0x08009953
 8005098:	08009964 	.word	0x08009964

0800509c <std>:
 800509c:	2300      	movs	r3, #0
 800509e:	b510      	push	{r4, lr}
 80050a0:	4604      	mov	r4, r0
 80050a2:	e9c0 3300 	strd	r3, r3, [r0]
 80050a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050aa:	6083      	str	r3, [r0, #8]
 80050ac:	8181      	strh	r1, [r0, #12]
 80050ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80050b0:	81c2      	strh	r2, [r0, #14]
 80050b2:	6183      	str	r3, [r0, #24]
 80050b4:	4619      	mov	r1, r3
 80050b6:	2208      	movs	r2, #8
 80050b8:	305c      	adds	r0, #92	@ 0x5c
 80050ba:	f000 f916 	bl	80052ea <memset>
 80050be:	4b0d      	ldr	r3, [pc, #52]	@ (80050f4 <std+0x58>)
 80050c0:	6224      	str	r4, [r4, #32]
 80050c2:	6263      	str	r3, [r4, #36]	@ 0x24
 80050c4:	4b0c      	ldr	r3, [pc, #48]	@ (80050f8 <std+0x5c>)
 80050c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050c8:	4b0c      	ldr	r3, [pc, #48]	@ (80050fc <std+0x60>)
 80050ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80050cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005100 <std+0x64>)
 80050ce:	6323      	str	r3, [r4, #48]	@ 0x30
 80050d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <std+0x68>)
 80050d2:	429c      	cmp	r4, r3
 80050d4:	d006      	beq.n	80050e4 <std+0x48>
 80050d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80050da:	4294      	cmp	r4, r2
 80050dc:	d002      	beq.n	80050e4 <std+0x48>
 80050de:	33d0      	adds	r3, #208	@ 0xd0
 80050e0:	429c      	cmp	r4, r3
 80050e2:	d105      	bne.n	80050f0 <std+0x54>
 80050e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80050e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ec:	f000 b97a 	b.w	80053e4 <__retarget_lock_init_recursive>
 80050f0:	bd10      	pop	{r4, pc}
 80050f2:	bf00      	nop
 80050f4:	08005265 	.word	0x08005265
 80050f8:	08005287 	.word	0x08005287
 80050fc:	080052bf 	.word	0x080052bf
 8005100:	080052e3 	.word	0x080052e3
 8005104:	200002c4 	.word	0x200002c4

08005108 <stdio_exit_handler>:
 8005108:	4a02      	ldr	r2, [pc, #8]	@ (8005114 <stdio_exit_handler+0xc>)
 800510a:	4903      	ldr	r1, [pc, #12]	@ (8005118 <stdio_exit_handler+0x10>)
 800510c:	4803      	ldr	r0, [pc, #12]	@ (800511c <stdio_exit_handler+0x14>)
 800510e:	f000 b869 	b.w	80051e4 <_fwalk_sglue>
 8005112:	bf00      	nop
 8005114:	20000010 	.word	0x20000010
 8005118:	08006da1 	.word	0x08006da1
 800511c:	20000020 	.word	0x20000020

08005120 <cleanup_stdio>:
 8005120:	6841      	ldr	r1, [r0, #4]
 8005122:	4b0c      	ldr	r3, [pc, #48]	@ (8005154 <cleanup_stdio+0x34>)
 8005124:	b510      	push	{r4, lr}
 8005126:	4299      	cmp	r1, r3
 8005128:	4604      	mov	r4, r0
 800512a:	d001      	beq.n	8005130 <cleanup_stdio+0x10>
 800512c:	f001 fe38 	bl	8006da0 <_fflush_r>
 8005130:	68a1      	ldr	r1, [r4, #8]
 8005132:	4b09      	ldr	r3, [pc, #36]	@ (8005158 <cleanup_stdio+0x38>)
 8005134:	4299      	cmp	r1, r3
 8005136:	d002      	beq.n	800513e <cleanup_stdio+0x1e>
 8005138:	4620      	mov	r0, r4
 800513a:	f001 fe31 	bl	8006da0 <_fflush_r>
 800513e:	68e1      	ldr	r1, [r4, #12]
 8005140:	4b06      	ldr	r3, [pc, #24]	@ (800515c <cleanup_stdio+0x3c>)
 8005142:	4299      	cmp	r1, r3
 8005144:	d004      	beq.n	8005150 <cleanup_stdio+0x30>
 8005146:	4620      	mov	r0, r4
 8005148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800514c:	f001 be28 	b.w	8006da0 <_fflush_r>
 8005150:	bd10      	pop	{r4, pc}
 8005152:	bf00      	nop
 8005154:	200002c4 	.word	0x200002c4
 8005158:	2000032c 	.word	0x2000032c
 800515c:	20000394 	.word	0x20000394

08005160 <global_stdio_init.part.0>:
 8005160:	b510      	push	{r4, lr}
 8005162:	4b0b      	ldr	r3, [pc, #44]	@ (8005190 <global_stdio_init.part.0+0x30>)
 8005164:	4c0b      	ldr	r4, [pc, #44]	@ (8005194 <global_stdio_init.part.0+0x34>)
 8005166:	4a0c      	ldr	r2, [pc, #48]	@ (8005198 <global_stdio_init.part.0+0x38>)
 8005168:	4620      	mov	r0, r4
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	2104      	movs	r1, #4
 800516e:	2200      	movs	r2, #0
 8005170:	f7ff ff94 	bl	800509c <std>
 8005174:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005178:	2201      	movs	r2, #1
 800517a:	2109      	movs	r1, #9
 800517c:	f7ff ff8e 	bl	800509c <std>
 8005180:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005184:	2202      	movs	r2, #2
 8005186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800518a:	2112      	movs	r1, #18
 800518c:	f7ff bf86 	b.w	800509c <std>
 8005190:	200003fc 	.word	0x200003fc
 8005194:	200002c4 	.word	0x200002c4
 8005198:	08005109 	.word	0x08005109

0800519c <__sfp_lock_acquire>:
 800519c:	4801      	ldr	r0, [pc, #4]	@ (80051a4 <__sfp_lock_acquire+0x8>)
 800519e:	f000 b922 	b.w	80053e6 <__retarget_lock_acquire_recursive>
 80051a2:	bf00      	nop
 80051a4:	20000405 	.word	0x20000405

080051a8 <__sfp_lock_release>:
 80051a8:	4801      	ldr	r0, [pc, #4]	@ (80051b0 <__sfp_lock_release+0x8>)
 80051aa:	f000 b91d 	b.w	80053e8 <__retarget_lock_release_recursive>
 80051ae:	bf00      	nop
 80051b0:	20000405 	.word	0x20000405

080051b4 <__sinit>:
 80051b4:	b510      	push	{r4, lr}
 80051b6:	4604      	mov	r4, r0
 80051b8:	f7ff fff0 	bl	800519c <__sfp_lock_acquire>
 80051bc:	6a23      	ldr	r3, [r4, #32]
 80051be:	b11b      	cbz	r3, 80051c8 <__sinit+0x14>
 80051c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c4:	f7ff bff0 	b.w	80051a8 <__sfp_lock_release>
 80051c8:	4b04      	ldr	r3, [pc, #16]	@ (80051dc <__sinit+0x28>)
 80051ca:	6223      	str	r3, [r4, #32]
 80051cc:	4b04      	ldr	r3, [pc, #16]	@ (80051e0 <__sinit+0x2c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f5      	bne.n	80051c0 <__sinit+0xc>
 80051d4:	f7ff ffc4 	bl	8005160 <global_stdio_init.part.0>
 80051d8:	e7f2      	b.n	80051c0 <__sinit+0xc>
 80051da:	bf00      	nop
 80051dc:	08005121 	.word	0x08005121
 80051e0:	200003fc 	.word	0x200003fc

080051e4 <_fwalk_sglue>:
 80051e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051e8:	4607      	mov	r7, r0
 80051ea:	4688      	mov	r8, r1
 80051ec:	4614      	mov	r4, r2
 80051ee:	2600      	movs	r6, #0
 80051f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051f4:	f1b9 0901 	subs.w	r9, r9, #1
 80051f8:	d505      	bpl.n	8005206 <_fwalk_sglue+0x22>
 80051fa:	6824      	ldr	r4, [r4, #0]
 80051fc:	2c00      	cmp	r4, #0
 80051fe:	d1f7      	bne.n	80051f0 <_fwalk_sglue+0xc>
 8005200:	4630      	mov	r0, r6
 8005202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005206:	89ab      	ldrh	r3, [r5, #12]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d907      	bls.n	800521c <_fwalk_sglue+0x38>
 800520c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005210:	3301      	adds	r3, #1
 8005212:	d003      	beq.n	800521c <_fwalk_sglue+0x38>
 8005214:	4629      	mov	r1, r5
 8005216:	4638      	mov	r0, r7
 8005218:	47c0      	blx	r8
 800521a:	4306      	orrs	r6, r0
 800521c:	3568      	adds	r5, #104	@ 0x68
 800521e:	e7e9      	b.n	80051f4 <_fwalk_sglue+0x10>

08005220 <siprintf>:
 8005220:	b40e      	push	{r1, r2, r3}
 8005222:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005226:	b510      	push	{r4, lr}
 8005228:	2400      	movs	r4, #0
 800522a:	b09d      	sub	sp, #116	@ 0x74
 800522c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800522e:	9002      	str	r0, [sp, #8]
 8005230:	9006      	str	r0, [sp, #24]
 8005232:	9107      	str	r1, [sp, #28]
 8005234:	9104      	str	r1, [sp, #16]
 8005236:	4809      	ldr	r0, [pc, #36]	@ (800525c <siprintf+0x3c>)
 8005238:	4909      	ldr	r1, [pc, #36]	@ (8005260 <siprintf+0x40>)
 800523a:	f853 2b04 	ldr.w	r2, [r3], #4
 800523e:	9105      	str	r1, [sp, #20]
 8005240:	6800      	ldr	r0, [r0, #0]
 8005242:	a902      	add	r1, sp, #8
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005248:	f001 fc2e 	bl	8006aa8 <_svfiprintf_r>
 800524c:	9b02      	ldr	r3, [sp, #8]
 800524e:	701c      	strb	r4, [r3, #0]
 8005250:	b01d      	add	sp, #116	@ 0x74
 8005252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005256:	b003      	add	sp, #12
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	2000001c 	.word	0x2000001c
 8005260:	ffff0208 	.word	0xffff0208

08005264 <__sread>:
 8005264:	b510      	push	{r4, lr}
 8005266:	460c      	mov	r4, r1
 8005268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800526c:	f000 f86c 	bl	8005348 <_read_r>
 8005270:	2800      	cmp	r0, #0
 8005272:	bfab      	itete	ge
 8005274:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005276:	89a3      	ldrhlt	r3, [r4, #12]
 8005278:	181b      	addge	r3, r3, r0
 800527a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800527e:	bfac      	ite	ge
 8005280:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005282:	81a3      	strhlt	r3, [r4, #12]
 8005284:	bd10      	pop	{r4, pc}

08005286 <__swrite>:
 8005286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800528a:	461f      	mov	r7, r3
 800528c:	898b      	ldrh	r3, [r1, #12]
 800528e:	4605      	mov	r5, r0
 8005290:	05db      	lsls	r3, r3, #23
 8005292:	460c      	mov	r4, r1
 8005294:	4616      	mov	r6, r2
 8005296:	d505      	bpl.n	80052a4 <__swrite+0x1e>
 8005298:	2302      	movs	r3, #2
 800529a:	2200      	movs	r2, #0
 800529c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a0:	f000 f840 	bl	8005324 <_lseek_r>
 80052a4:	89a3      	ldrh	r3, [r4, #12]
 80052a6:	4632      	mov	r2, r6
 80052a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052ac:	81a3      	strh	r3, [r4, #12]
 80052ae:	4628      	mov	r0, r5
 80052b0:	463b      	mov	r3, r7
 80052b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ba:	f000 b857 	b.w	800536c <_write_r>

080052be <__sseek>:
 80052be:	b510      	push	{r4, lr}
 80052c0:	460c      	mov	r4, r1
 80052c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c6:	f000 f82d 	bl	8005324 <_lseek_r>
 80052ca:	1c43      	adds	r3, r0, #1
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	bf15      	itete	ne
 80052d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80052d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052da:	81a3      	strheq	r3, [r4, #12]
 80052dc:	bf18      	it	ne
 80052de:	81a3      	strhne	r3, [r4, #12]
 80052e0:	bd10      	pop	{r4, pc}

080052e2 <__sclose>:
 80052e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e6:	f000 b80d 	b.w	8005304 <_close_r>

080052ea <memset>:
 80052ea:	4603      	mov	r3, r0
 80052ec:	4402      	add	r2, r0
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d100      	bne.n	80052f4 <memset+0xa>
 80052f2:	4770      	bx	lr
 80052f4:	f803 1b01 	strb.w	r1, [r3], #1
 80052f8:	e7f9      	b.n	80052ee <memset+0x4>
	...

080052fc <_localeconv_r>:
 80052fc:	4800      	ldr	r0, [pc, #0]	@ (8005300 <_localeconv_r+0x4>)
 80052fe:	4770      	bx	lr
 8005300:	2000015c 	.word	0x2000015c

08005304 <_close_r>:
 8005304:	b538      	push	{r3, r4, r5, lr}
 8005306:	2300      	movs	r3, #0
 8005308:	4d05      	ldr	r5, [pc, #20]	@ (8005320 <_close_r+0x1c>)
 800530a:	4604      	mov	r4, r0
 800530c:	4608      	mov	r0, r1
 800530e:	602b      	str	r3, [r5, #0]
 8005310:	f7fd fcd5 	bl	8002cbe <_close>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	d102      	bne.n	800531e <_close_r+0x1a>
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	b103      	cbz	r3, 800531e <_close_r+0x1a>
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	bd38      	pop	{r3, r4, r5, pc}
 8005320:	20000400 	.word	0x20000400

08005324 <_lseek_r>:
 8005324:	b538      	push	{r3, r4, r5, lr}
 8005326:	4604      	mov	r4, r0
 8005328:	4608      	mov	r0, r1
 800532a:	4611      	mov	r1, r2
 800532c:	2200      	movs	r2, #0
 800532e:	4d05      	ldr	r5, [pc, #20]	@ (8005344 <_lseek_r+0x20>)
 8005330:	602a      	str	r2, [r5, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	f7fd fce7 	bl	8002d06 <_lseek>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d102      	bne.n	8005342 <_lseek_r+0x1e>
 800533c:	682b      	ldr	r3, [r5, #0]
 800533e:	b103      	cbz	r3, 8005342 <_lseek_r+0x1e>
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	bd38      	pop	{r3, r4, r5, pc}
 8005344:	20000400 	.word	0x20000400

08005348 <_read_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	4604      	mov	r4, r0
 800534c:	4608      	mov	r0, r1
 800534e:	4611      	mov	r1, r2
 8005350:	2200      	movs	r2, #0
 8005352:	4d05      	ldr	r5, [pc, #20]	@ (8005368 <_read_r+0x20>)
 8005354:	602a      	str	r2, [r5, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	f7fd fc78 	bl	8002c4c <_read>
 800535c:	1c43      	adds	r3, r0, #1
 800535e:	d102      	bne.n	8005366 <_read_r+0x1e>
 8005360:	682b      	ldr	r3, [r5, #0]
 8005362:	b103      	cbz	r3, 8005366 <_read_r+0x1e>
 8005364:	6023      	str	r3, [r4, #0]
 8005366:	bd38      	pop	{r3, r4, r5, pc}
 8005368:	20000400 	.word	0x20000400

0800536c <_write_r>:
 800536c:	b538      	push	{r3, r4, r5, lr}
 800536e:	4604      	mov	r4, r0
 8005370:	4608      	mov	r0, r1
 8005372:	4611      	mov	r1, r2
 8005374:	2200      	movs	r2, #0
 8005376:	4d05      	ldr	r5, [pc, #20]	@ (800538c <_write_r+0x20>)
 8005378:	602a      	str	r2, [r5, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	f7fd fc83 	bl	8002c86 <_write>
 8005380:	1c43      	adds	r3, r0, #1
 8005382:	d102      	bne.n	800538a <_write_r+0x1e>
 8005384:	682b      	ldr	r3, [r5, #0]
 8005386:	b103      	cbz	r3, 800538a <_write_r+0x1e>
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	bd38      	pop	{r3, r4, r5, pc}
 800538c:	20000400 	.word	0x20000400

08005390 <__errno>:
 8005390:	4b01      	ldr	r3, [pc, #4]	@ (8005398 <__errno+0x8>)
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	2000001c 	.word	0x2000001c

0800539c <__libc_init_array>:
 800539c:	b570      	push	{r4, r5, r6, lr}
 800539e:	2600      	movs	r6, #0
 80053a0:	4d0c      	ldr	r5, [pc, #48]	@ (80053d4 <__libc_init_array+0x38>)
 80053a2:	4c0d      	ldr	r4, [pc, #52]	@ (80053d8 <__libc_init_array+0x3c>)
 80053a4:	1b64      	subs	r4, r4, r5
 80053a6:	10a4      	asrs	r4, r4, #2
 80053a8:	42a6      	cmp	r6, r4
 80053aa:	d109      	bne.n	80053c0 <__libc_init_array+0x24>
 80053ac:	f002 f876 	bl	800749c <_init>
 80053b0:	2600      	movs	r6, #0
 80053b2:	4d0a      	ldr	r5, [pc, #40]	@ (80053dc <__libc_init_array+0x40>)
 80053b4:	4c0a      	ldr	r4, [pc, #40]	@ (80053e0 <__libc_init_array+0x44>)
 80053b6:	1b64      	subs	r4, r4, r5
 80053b8:	10a4      	asrs	r4, r4, #2
 80053ba:	42a6      	cmp	r6, r4
 80053bc:	d105      	bne.n	80053ca <__libc_init_array+0x2e>
 80053be:	bd70      	pop	{r4, r5, r6, pc}
 80053c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c4:	4798      	blx	r3
 80053c6:	3601      	adds	r6, #1
 80053c8:	e7ee      	b.n	80053a8 <__libc_init_array+0xc>
 80053ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ce:	4798      	blx	r3
 80053d0:	3601      	adds	r6, #1
 80053d2:	e7f2      	b.n	80053ba <__libc_init_array+0x1e>
 80053d4:	08009ca4 	.word	0x08009ca4
 80053d8:	08009ca4 	.word	0x08009ca4
 80053dc:	08009ca4 	.word	0x08009ca4
 80053e0:	08009ca8 	.word	0x08009ca8

080053e4 <__retarget_lock_init_recursive>:
 80053e4:	4770      	bx	lr

080053e6 <__retarget_lock_acquire_recursive>:
 80053e6:	4770      	bx	lr

080053e8 <__retarget_lock_release_recursive>:
 80053e8:	4770      	bx	lr

080053ea <memchr>:
 80053ea:	4603      	mov	r3, r0
 80053ec:	b510      	push	{r4, lr}
 80053ee:	b2c9      	uxtb	r1, r1
 80053f0:	4402      	add	r2, r0
 80053f2:	4293      	cmp	r3, r2
 80053f4:	4618      	mov	r0, r3
 80053f6:	d101      	bne.n	80053fc <memchr+0x12>
 80053f8:	2000      	movs	r0, #0
 80053fa:	e003      	b.n	8005404 <memchr+0x1a>
 80053fc:	7804      	ldrb	r4, [r0, #0]
 80053fe:	3301      	adds	r3, #1
 8005400:	428c      	cmp	r4, r1
 8005402:	d1f6      	bne.n	80053f2 <memchr+0x8>
 8005404:	bd10      	pop	{r4, pc}
	...

08005408 <__assert_func>:
 8005408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800540a:	4614      	mov	r4, r2
 800540c:	461a      	mov	r2, r3
 800540e:	4b09      	ldr	r3, [pc, #36]	@ (8005434 <__assert_func+0x2c>)
 8005410:	4605      	mov	r5, r0
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68d8      	ldr	r0, [r3, #12]
 8005416:	b14c      	cbz	r4, 800542c <__assert_func+0x24>
 8005418:	4b07      	ldr	r3, [pc, #28]	@ (8005438 <__assert_func+0x30>)
 800541a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800541e:	9100      	str	r1, [sp, #0]
 8005420:	462b      	mov	r3, r5
 8005422:	4906      	ldr	r1, [pc, #24]	@ (800543c <__assert_func+0x34>)
 8005424:	f001 fce4 	bl	8006df0 <fiprintf>
 8005428:	f001 fd2c 	bl	8006e84 <abort>
 800542c:	4b04      	ldr	r3, [pc, #16]	@ (8005440 <__assert_func+0x38>)
 800542e:	461c      	mov	r4, r3
 8005430:	e7f3      	b.n	800541a <__assert_func+0x12>
 8005432:	bf00      	nop
 8005434:	2000001c 	.word	0x2000001c
 8005438:	08009975 	.word	0x08009975
 800543c:	08009982 	.word	0x08009982
 8005440:	080099b0 	.word	0x080099b0

08005444 <quorem>:
 8005444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005448:	6903      	ldr	r3, [r0, #16]
 800544a:	690c      	ldr	r4, [r1, #16]
 800544c:	4607      	mov	r7, r0
 800544e:	42a3      	cmp	r3, r4
 8005450:	db7e      	blt.n	8005550 <quorem+0x10c>
 8005452:	3c01      	subs	r4, #1
 8005454:	00a3      	lsls	r3, r4, #2
 8005456:	f100 0514 	add.w	r5, r0, #20
 800545a:	f101 0814 	add.w	r8, r1, #20
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005464:	9301      	str	r3, [sp, #4]
 8005466:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800546a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800546e:	3301      	adds	r3, #1
 8005470:	429a      	cmp	r2, r3
 8005472:	fbb2 f6f3 	udiv	r6, r2, r3
 8005476:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800547a:	d32e      	bcc.n	80054da <quorem+0x96>
 800547c:	f04f 0a00 	mov.w	sl, #0
 8005480:	46c4      	mov	ip, r8
 8005482:	46ae      	mov	lr, r5
 8005484:	46d3      	mov	fp, sl
 8005486:	f85c 3b04 	ldr.w	r3, [ip], #4
 800548a:	b298      	uxth	r0, r3
 800548c:	fb06 a000 	mla	r0, r6, r0, sl
 8005490:	0c1b      	lsrs	r3, r3, #16
 8005492:	0c02      	lsrs	r2, r0, #16
 8005494:	fb06 2303 	mla	r3, r6, r3, r2
 8005498:	f8de 2000 	ldr.w	r2, [lr]
 800549c:	b280      	uxth	r0, r0
 800549e:	b292      	uxth	r2, r2
 80054a0:	1a12      	subs	r2, r2, r0
 80054a2:	445a      	add	r2, fp
 80054a4:	f8de 0000 	ldr.w	r0, [lr]
 80054a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80054b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80054b6:	b292      	uxth	r2, r2
 80054b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80054bc:	45e1      	cmp	r9, ip
 80054be:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80054c2:	f84e 2b04 	str.w	r2, [lr], #4
 80054c6:	d2de      	bcs.n	8005486 <quorem+0x42>
 80054c8:	9b00      	ldr	r3, [sp, #0]
 80054ca:	58eb      	ldr	r3, [r5, r3]
 80054cc:	b92b      	cbnz	r3, 80054da <quorem+0x96>
 80054ce:	9b01      	ldr	r3, [sp, #4]
 80054d0:	3b04      	subs	r3, #4
 80054d2:	429d      	cmp	r5, r3
 80054d4:	461a      	mov	r2, r3
 80054d6:	d32f      	bcc.n	8005538 <quorem+0xf4>
 80054d8:	613c      	str	r4, [r7, #16]
 80054da:	4638      	mov	r0, r7
 80054dc:	f001 f980 	bl	80067e0 <__mcmp>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	db25      	blt.n	8005530 <quorem+0xec>
 80054e4:	4629      	mov	r1, r5
 80054e6:	2000      	movs	r0, #0
 80054e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80054ec:	f8d1 c000 	ldr.w	ip, [r1]
 80054f0:	fa1f fe82 	uxth.w	lr, r2
 80054f4:	fa1f f38c 	uxth.w	r3, ip
 80054f8:	eba3 030e 	sub.w	r3, r3, lr
 80054fc:	4403      	add	r3, r0
 80054fe:	0c12      	lsrs	r2, r2, #16
 8005500:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005504:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005508:	b29b      	uxth	r3, r3
 800550a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800550e:	45c1      	cmp	r9, r8
 8005510:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005514:	f841 3b04 	str.w	r3, [r1], #4
 8005518:	d2e6      	bcs.n	80054e8 <quorem+0xa4>
 800551a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800551e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005522:	b922      	cbnz	r2, 800552e <quorem+0xea>
 8005524:	3b04      	subs	r3, #4
 8005526:	429d      	cmp	r5, r3
 8005528:	461a      	mov	r2, r3
 800552a:	d30b      	bcc.n	8005544 <quorem+0x100>
 800552c:	613c      	str	r4, [r7, #16]
 800552e:	3601      	adds	r6, #1
 8005530:	4630      	mov	r0, r6
 8005532:	b003      	add	sp, #12
 8005534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005538:	6812      	ldr	r2, [r2, #0]
 800553a:	3b04      	subs	r3, #4
 800553c:	2a00      	cmp	r2, #0
 800553e:	d1cb      	bne.n	80054d8 <quorem+0x94>
 8005540:	3c01      	subs	r4, #1
 8005542:	e7c6      	b.n	80054d2 <quorem+0x8e>
 8005544:	6812      	ldr	r2, [r2, #0]
 8005546:	3b04      	subs	r3, #4
 8005548:	2a00      	cmp	r2, #0
 800554a:	d1ef      	bne.n	800552c <quorem+0xe8>
 800554c:	3c01      	subs	r4, #1
 800554e:	e7ea      	b.n	8005526 <quorem+0xe2>
 8005550:	2000      	movs	r0, #0
 8005552:	e7ee      	b.n	8005532 <quorem+0xee>
 8005554:	0000      	movs	r0, r0
	...

08005558 <_dtoa_r>:
 8005558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555c:	4614      	mov	r4, r2
 800555e:	461d      	mov	r5, r3
 8005560:	69c7      	ldr	r7, [r0, #28]
 8005562:	b097      	sub	sp, #92	@ 0x5c
 8005564:	4681      	mov	r9, r0
 8005566:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800556a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800556c:	b97f      	cbnz	r7, 800558e <_dtoa_r+0x36>
 800556e:	2010      	movs	r0, #16
 8005570:	f000 fe0e 	bl	8006190 <malloc>
 8005574:	4602      	mov	r2, r0
 8005576:	f8c9 001c 	str.w	r0, [r9, #28]
 800557a:	b920      	cbnz	r0, 8005586 <_dtoa_r+0x2e>
 800557c:	21ef      	movs	r1, #239	@ 0xef
 800557e:	4bac      	ldr	r3, [pc, #688]	@ (8005830 <_dtoa_r+0x2d8>)
 8005580:	48ac      	ldr	r0, [pc, #688]	@ (8005834 <_dtoa_r+0x2dc>)
 8005582:	f7ff ff41 	bl	8005408 <__assert_func>
 8005586:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800558a:	6007      	str	r7, [r0, #0]
 800558c:	60c7      	str	r7, [r0, #12]
 800558e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005592:	6819      	ldr	r1, [r3, #0]
 8005594:	b159      	cbz	r1, 80055ae <_dtoa_r+0x56>
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	2301      	movs	r3, #1
 800559a:	4093      	lsls	r3, r2
 800559c:	604a      	str	r2, [r1, #4]
 800559e:	608b      	str	r3, [r1, #8]
 80055a0:	4648      	mov	r0, r9
 80055a2:	f000 feeb 	bl	800637c <_Bfree>
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	1e2b      	subs	r3, r5, #0
 80055b0:	bfaf      	iteee	ge
 80055b2:	2300      	movge	r3, #0
 80055b4:	2201      	movlt	r2, #1
 80055b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80055ba:	9307      	strlt	r3, [sp, #28]
 80055bc:	bfa8      	it	ge
 80055be:	6033      	strge	r3, [r6, #0]
 80055c0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80055c4:	4b9c      	ldr	r3, [pc, #624]	@ (8005838 <_dtoa_r+0x2e0>)
 80055c6:	bfb8      	it	lt
 80055c8:	6032      	strlt	r2, [r6, #0]
 80055ca:	ea33 0308 	bics.w	r3, r3, r8
 80055ce:	d112      	bne.n	80055f6 <_dtoa_r+0x9e>
 80055d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80055d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80055dc:	4323      	orrs	r3, r4
 80055de:	f000 855e 	beq.w	800609e <_dtoa_r+0xb46>
 80055e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80055e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800583c <_dtoa_r+0x2e4>
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 8560 	beq.w	80060ae <_dtoa_r+0xb56>
 80055ee:	f10a 0303 	add.w	r3, sl, #3
 80055f2:	f000 bd5a 	b.w	80060aa <_dtoa_r+0xb52>
 80055f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80055fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005602:	2200      	movs	r2, #0
 8005604:	2300      	movs	r3, #0
 8005606:	f7fb f9cf 	bl	80009a8 <__aeabi_dcmpeq>
 800560a:	4607      	mov	r7, r0
 800560c:	b158      	cbz	r0, 8005626 <_dtoa_r+0xce>
 800560e:	2301      	movs	r3, #1
 8005610:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005616:	b113      	cbz	r3, 800561e <_dtoa_r+0xc6>
 8005618:	4b89      	ldr	r3, [pc, #548]	@ (8005840 <_dtoa_r+0x2e8>)
 800561a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8005844 <_dtoa_r+0x2ec>
 8005622:	f000 bd44 	b.w	80060ae <_dtoa_r+0xb56>
 8005626:	ab14      	add	r3, sp, #80	@ 0x50
 8005628:	9301      	str	r3, [sp, #4]
 800562a:	ab15      	add	r3, sp, #84	@ 0x54
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	4648      	mov	r0, r9
 8005630:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005634:	f001 f984 	bl	8006940 <__d2b>
 8005638:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800563c:	9003      	str	r0, [sp, #12]
 800563e:	2e00      	cmp	r6, #0
 8005640:	d078      	beq.n	8005734 <_dtoa_r+0x1dc>
 8005642:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005646:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005648:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800564c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005650:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005654:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005658:	9712      	str	r7, [sp, #72]	@ 0x48
 800565a:	4619      	mov	r1, r3
 800565c:	2200      	movs	r2, #0
 800565e:	4b7a      	ldr	r3, [pc, #488]	@ (8005848 <_dtoa_r+0x2f0>)
 8005660:	f7fa fd82 	bl	8000168 <__aeabi_dsub>
 8005664:	a36c      	add	r3, pc, #432	@ (adr r3, 8005818 <_dtoa_r+0x2c0>)
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f7fa ff35 	bl	80004d8 <__aeabi_dmul>
 800566e:	a36c      	add	r3, pc, #432	@ (adr r3, 8005820 <_dtoa_r+0x2c8>)
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f7fa fd7a 	bl	800016c <__adddf3>
 8005678:	4604      	mov	r4, r0
 800567a:	4630      	mov	r0, r6
 800567c:	460d      	mov	r5, r1
 800567e:	f7fa fec1 	bl	8000404 <__aeabi_i2d>
 8005682:	a369      	add	r3, pc, #420	@ (adr r3, 8005828 <_dtoa_r+0x2d0>)
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	f7fa ff26 	bl	80004d8 <__aeabi_dmul>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4620      	mov	r0, r4
 8005692:	4629      	mov	r1, r5
 8005694:	f7fa fd6a 	bl	800016c <__adddf3>
 8005698:	4604      	mov	r4, r0
 800569a:	460d      	mov	r5, r1
 800569c:	f7fb f9cc 	bl	8000a38 <__aeabi_d2iz>
 80056a0:	2200      	movs	r2, #0
 80056a2:	4607      	mov	r7, r0
 80056a4:	2300      	movs	r3, #0
 80056a6:	4620      	mov	r0, r4
 80056a8:	4629      	mov	r1, r5
 80056aa:	f7fb f987 	bl	80009bc <__aeabi_dcmplt>
 80056ae:	b140      	cbz	r0, 80056c2 <_dtoa_r+0x16a>
 80056b0:	4638      	mov	r0, r7
 80056b2:	f7fa fea7 	bl	8000404 <__aeabi_i2d>
 80056b6:	4622      	mov	r2, r4
 80056b8:	462b      	mov	r3, r5
 80056ba:	f7fb f975 	bl	80009a8 <__aeabi_dcmpeq>
 80056be:	b900      	cbnz	r0, 80056c2 <_dtoa_r+0x16a>
 80056c0:	3f01      	subs	r7, #1
 80056c2:	2f16      	cmp	r7, #22
 80056c4:	d854      	bhi.n	8005770 <_dtoa_r+0x218>
 80056c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056ca:	4b60      	ldr	r3, [pc, #384]	@ (800584c <_dtoa_r+0x2f4>)
 80056cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80056d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d4:	f7fb f972 	bl	80009bc <__aeabi_dcmplt>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d04b      	beq.n	8005774 <_dtoa_r+0x21c>
 80056dc:	2300      	movs	r3, #0
 80056de:	3f01      	subs	r7, #1
 80056e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80056e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80056e4:	1b9b      	subs	r3, r3, r6
 80056e6:	1e5a      	subs	r2, r3, #1
 80056e8:	bf49      	itett	mi
 80056ea:	f1c3 0301 	rsbmi	r3, r3, #1
 80056ee:	2300      	movpl	r3, #0
 80056f0:	9304      	strmi	r3, [sp, #16]
 80056f2:	2300      	movmi	r3, #0
 80056f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80056f6:	bf54      	ite	pl
 80056f8:	9304      	strpl	r3, [sp, #16]
 80056fa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80056fc:	2f00      	cmp	r7, #0
 80056fe:	db3b      	blt.n	8005778 <_dtoa_r+0x220>
 8005700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005702:	970e      	str	r7, [sp, #56]	@ 0x38
 8005704:	443b      	add	r3, r7
 8005706:	9309      	str	r3, [sp, #36]	@ 0x24
 8005708:	2300      	movs	r3, #0
 800570a:	930a      	str	r3, [sp, #40]	@ 0x28
 800570c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800570e:	2b09      	cmp	r3, #9
 8005710:	d865      	bhi.n	80057de <_dtoa_r+0x286>
 8005712:	2b05      	cmp	r3, #5
 8005714:	bfc4      	itt	gt
 8005716:	3b04      	subgt	r3, #4
 8005718:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800571a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800571c:	bfc8      	it	gt
 800571e:	2400      	movgt	r4, #0
 8005720:	f1a3 0302 	sub.w	r3, r3, #2
 8005724:	bfd8      	it	le
 8005726:	2401      	movle	r4, #1
 8005728:	2b03      	cmp	r3, #3
 800572a:	d864      	bhi.n	80057f6 <_dtoa_r+0x29e>
 800572c:	e8df f003 	tbb	[pc, r3]
 8005730:	2c385553 	.word	0x2c385553
 8005734:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005738:	441e      	add	r6, r3
 800573a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800573e:	2b20      	cmp	r3, #32
 8005740:	bfc1      	itttt	gt
 8005742:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005746:	fa08 f803 	lslgt.w	r8, r8, r3
 800574a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800574e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005752:	bfd6      	itet	le
 8005754:	f1c3 0320 	rsble	r3, r3, #32
 8005758:	ea48 0003 	orrgt.w	r0, r8, r3
 800575c:	fa04 f003 	lslle.w	r0, r4, r3
 8005760:	f7fa fe40 	bl	80003e4 <__aeabi_ui2d>
 8005764:	2201      	movs	r2, #1
 8005766:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800576a:	3e01      	subs	r6, #1
 800576c:	9212      	str	r2, [sp, #72]	@ 0x48
 800576e:	e774      	b.n	800565a <_dtoa_r+0x102>
 8005770:	2301      	movs	r3, #1
 8005772:	e7b5      	b.n	80056e0 <_dtoa_r+0x188>
 8005774:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005776:	e7b4      	b.n	80056e2 <_dtoa_r+0x18a>
 8005778:	9b04      	ldr	r3, [sp, #16]
 800577a:	1bdb      	subs	r3, r3, r7
 800577c:	9304      	str	r3, [sp, #16]
 800577e:	427b      	negs	r3, r7
 8005780:	930a      	str	r3, [sp, #40]	@ 0x28
 8005782:	2300      	movs	r3, #0
 8005784:	930e      	str	r3, [sp, #56]	@ 0x38
 8005786:	e7c1      	b.n	800570c <_dtoa_r+0x1b4>
 8005788:	2301      	movs	r3, #1
 800578a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800578c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800578e:	eb07 0b03 	add.w	fp, r7, r3
 8005792:	f10b 0301 	add.w	r3, fp, #1
 8005796:	2b01      	cmp	r3, #1
 8005798:	9308      	str	r3, [sp, #32]
 800579a:	bfb8      	it	lt
 800579c:	2301      	movlt	r3, #1
 800579e:	e006      	b.n	80057ae <_dtoa_r+0x256>
 80057a0:	2301      	movs	r3, #1
 80057a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	dd28      	ble.n	80057fc <_dtoa_r+0x2a4>
 80057aa:	469b      	mov	fp, r3
 80057ac:	9308      	str	r3, [sp, #32]
 80057ae:	2100      	movs	r1, #0
 80057b0:	2204      	movs	r2, #4
 80057b2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80057b6:	f102 0514 	add.w	r5, r2, #20
 80057ba:	429d      	cmp	r5, r3
 80057bc:	d926      	bls.n	800580c <_dtoa_r+0x2b4>
 80057be:	6041      	str	r1, [r0, #4]
 80057c0:	4648      	mov	r0, r9
 80057c2:	f000 fd9b 	bl	80062fc <_Balloc>
 80057c6:	4682      	mov	sl, r0
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d143      	bne.n	8005854 <_dtoa_r+0x2fc>
 80057cc:	4602      	mov	r2, r0
 80057ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80057d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005850 <_dtoa_r+0x2f8>)
 80057d4:	e6d4      	b.n	8005580 <_dtoa_r+0x28>
 80057d6:	2300      	movs	r3, #0
 80057d8:	e7e3      	b.n	80057a2 <_dtoa_r+0x24a>
 80057da:	2300      	movs	r3, #0
 80057dc:	e7d5      	b.n	800578a <_dtoa_r+0x232>
 80057de:	2401      	movs	r4, #1
 80057e0:	2300      	movs	r3, #0
 80057e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80057e4:	9320      	str	r3, [sp, #128]	@ 0x80
 80057e6:	f04f 3bff 	mov.w	fp, #4294967295
 80057ea:	2200      	movs	r2, #0
 80057ec:	2312      	movs	r3, #18
 80057ee:	f8cd b020 	str.w	fp, [sp, #32]
 80057f2:	9221      	str	r2, [sp, #132]	@ 0x84
 80057f4:	e7db      	b.n	80057ae <_dtoa_r+0x256>
 80057f6:	2301      	movs	r3, #1
 80057f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057fa:	e7f4      	b.n	80057e6 <_dtoa_r+0x28e>
 80057fc:	f04f 0b01 	mov.w	fp, #1
 8005800:	465b      	mov	r3, fp
 8005802:	f8cd b020 	str.w	fp, [sp, #32]
 8005806:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800580a:	e7d0      	b.n	80057ae <_dtoa_r+0x256>
 800580c:	3101      	adds	r1, #1
 800580e:	0052      	lsls	r2, r2, #1
 8005810:	e7d1      	b.n	80057b6 <_dtoa_r+0x25e>
 8005812:	bf00      	nop
 8005814:	f3af 8000 	nop.w
 8005818:	636f4361 	.word	0x636f4361
 800581c:	3fd287a7 	.word	0x3fd287a7
 8005820:	8b60c8b3 	.word	0x8b60c8b3
 8005824:	3fc68a28 	.word	0x3fc68a28
 8005828:	509f79fb 	.word	0x509f79fb
 800582c:	3fd34413 	.word	0x3fd34413
 8005830:	080098d2 	.word	0x080098d2
 8005834:	080099be 	.word	0x080099be
 8005838:	7ff00000 	.word	0x7ff00000
 800583c:	080099ba 	.word	0x080099ba
 8005840:	08009952 	.word	0x08009952
 8005844:	08009951 	.word	0x08009951
 8005848:	3ff80000 	.word	0x3ff80000
 800584c:	08009ad0 	.word	0x08009ad0
 8005850:	08009a16 	.word	0x08009a16
 8005854:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005858:	6018      	str	r0, [r3, #0]
 800585a:	9b08      	ldr	r3, [sp, #32]
 800585c:	2b0e      	cmp	r3, #14
 800585e:	f200 80a1 	bhi.w	80059a4 <_dtoa_r+0x44c>
 8005862:	2c00      	cmp	r4, #0
 8005864:	f000 809e 	beq.w	80059a4 <_dtoa_r+0x44c>
 8005868:	2f00      	cmp	r7, #0
 800586a:	dd33      	ble.n	80058d4 <_dtoa_r+0x37c>
 800586c:	4b9c      	ldr	r3, [pc, #624]	@ (8005ae0 <_dtoa_r+0x588>)
 800586e:	f007 020f 	and.w	r2, r7, #15
 8005872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005876:	05f8      	lsls	r0, r7, #23
 8005878:	e9d3 3400 	ldrd	r3, r4, [r3]
 800587c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005880:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005884:	d516      	bpl.n	80058b4 <_dtoa_r+0x35c>
 8005886:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800588a:	4b96      	ldr	r3, [pc, #600]	@ (8005ae4 <_dtoa_r+0x58c>)
 800588c:	2603      	movs	r6, #3
 800588e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005892:	f7fa ff4b 	bl	800072c <__aeabi_ddiv>
 8005896:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800589a:	f004 040f 	and.w	r4, r4, #15
 800589e:	4d91      	ldr	r5, [pc, #580]	@ (8005ae4 <_dtoa_r+0x58c>)
 80058a0:	b954      	cbnz	r4, 80058b8 <_dtoa_r+0x360>
 80058a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80058a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058aa:	f7fa ff3f 	bl	800072c <__aeabi_ddiv>
 80058ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80058b2:	e028      	b.n	8005906 <_dtoa_r+0x3ae>
 80058b4:	2602      	movs	r6, #2
 80058b6:	e7f2      	b.n	800589e <_dtoa_r+0x346>
 80058b8:	07e1      	lsls	r1, r4, #31
 80058ba:	d508      	bpl.n	80058ce <_dtoa_r+0x376>
 80058bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80058c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058c4:	f7fa fe08 	bl	80004d8 <__aeabi_dmul>
 80058c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80058cc:	3601      	adds	r6, #1
 80058ce:	1064      	asrs	r4, r4, #1
 80058d0:	3508      	adds	r5, #8
 80058d2:	e7e5      	b.n	80058a0 <_dtoa_r+0x348>
 80058d4:	f000 80af 	beq.w	8005a36 <_dtoa_r+0x4de>
 80058d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058dc:	427c      	negs	r4, r7
 80058de:	4b80      	ldr	r3, [pc, #512]	@ (8005ae0 <_dtoa_r+0x588>)
 80058e0:	f004 020f 	and.w	r2, r4, #15
 80058e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ec:	f7fa fdf4 	bl	80004d8 <__aeabi_dmul>
 80058f0:	2602      	movs	r6, #2
 80058f2:	2300      	movs	r3, #0
 80058f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80058f8:	4d7a      	ldr	r5, [pc, #488]	@ (8005ae4 <_dtoa_r+0x58c>)
 80058fa:	1124      	asrs	r4, r4, #4
 80058fc:	2c00      	cmp	r4, #0
 80058fe:	f040 808f 	bne.w	8005a20 <_dtoa_r+0x4c8>
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1d3      	bne.n	80058ae <_dtoa_r+0x356>
 8005906:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800590a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 8094 	beq.w	8005a3a <_dtoa_r+0x4e2>
 8005912:	2200      	movs	r2, #0
 8005914:	4620      	mov	r0, r4
 8005916:	4629      	mov	r1, r5
 8005918:	4b73      	ldr	r3, [pc, #460]	@ (8005ae8 <_dtoa_r+0x590>)
 800591a:	f7fb f84f 	bl	80009bc <__aeabi_dcmplt>
 800591e:	2800      	cmp	r0, #0
 8005920:	f000 808b 	beq.w	8005a3a <_dtoa_r+0x4e2>
 8005924:	9b08      	ldr	r3, [sp, #32]
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 8087 	beq.w	8005a3a <_dtoa_r+0x4e2>
 800592c:	f1bb 0f00 	cmp.w	fp, #0
 8005930:	dd34      	ble.n	800599c <_dtoa_r+0x444>
 8005932:	4620      	mov	r0, r4
 8005934:	2200      	movs	r2, #0
 8005936:	4629      	mov	r1, r5
 8005938:	4b6c      	ldr	r3, [pc, #432]	@ (8005aec <_dtoa_r+0x594>)
 800593a:	f7fa fdcd 	bl	80004d8 <__aeabi_dmul>
 800593e:	465c      	mov	r4, fp
 8005940:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005944:	f107 38ff 	add.w	r8, r7, #4294967295
 8005948:	3601      	adds	r6, #1
 800594a:	4630      	mov	r0, r6
 800594c:	f7fa fd5a 	bl	8000404 <__aeabi_i2d>
 8005950:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005954:	f7fa fdc0 	bl	80004d8 <__aeabi_dmul>
 8005958:	2200      	movs	r2, #0
 800595a:	4b65      	ldr	r3, [pc, #404]	@ (8005af0 <_dtoa_r+0x598>)
 800595c:	f7fa fc06 	bl	800016c <__adddf3>
 8005960:	4605      	mov	r5, r0
 8005962:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005966:	2c00      	cmp	r4, #0
 8005968:	d16a      	bne.n	8005a40 <_dtoa_r+0x4e8>
 800596a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800596e:	2200      	movs	r2, #0
 8005970:	4b60      	ldr	r3, [pc, #384]	@ (8005af4 <_dtoa_r+0x59c>)
 8005972:	f7fa fbf9 	bl	8000168 <__aeabi_dsub>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800597e:	462a      	mov	r2, r5
 8005980:	4633      	mov	r3, r6
 8005982:	f7fb f839 	bl	80009f8 <__aeabi_dcmpgt>
 8005986:	2800      	cmp	r0, #0
 8005988:	f040 8298 	bne.w	8005ebc <_dtoa_r+0x964>
 800598c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005990:	462a      	mov	r2, r5
 8005992:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005996:	f7fb f811 	bl	80009bc <__aeabi_dcmplt>
 800599a:	bb38      	cbnz	r0, 80059ec <_dtoa_r+0x494>
 800599c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80059a0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80059a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f2c0 8157 	blt.w	8005c5a <_dtoa_r+0x702>
 80059ac:	2f0e      	cmp	r7, #14
 80059ae:	f300 8154 	bgt.w	8005c5a <_dtoa_r+0x702>
 80059b2:	4b4b      	ldr	r3, [pc, #300]	@ (8005ae0 <_dtoa_r+0x588>)
 80059b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80059b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80059c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f280 80e5 	bge.w	8005b92 <_dtoa_r+0x63a>
 80059c8:	9b08      	ldr	r3, [sp, #32]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f300 80e1 	bgt.w	8005b92 <_dtoa_r+0x63a>
 80059d0:	d10c      	bne.n	80059ec <_dtoa_r+0x494>
 80059d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059d6:	2200      	movs	r2, #0
 80059d8:	4b46      	ldr	r3, [pc, #280]	@ (8005af4 <_dtoa_r+0x59c>)
 80059da:	f7fa fd7d 	bl	80004d8 <__aeabi_dmul>
 80059de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059e2:	f7fa ffff 	bl	80009e4 <__aeabi_dcmpge>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	f000 8266 	beq.w	8005eb8 <_dtoa_r+0x960>
 80059ec:	2400      	movs	r4, #0
 80059ee:	4625      	mov	r5, r4
 80059f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80059f2:	4656      	mov	r6, sl
 80059f4:	ea6f 0803 	mvn.w	r8, r3
 80059f8:	2700      	movs	r7, #0
 80059fa:	4621      	mov	r1, r4
 80059fc:	4648      	mov	r0, r9
 80059fe:	f000 fcbd 	bl	800637c <_Bfree>
 8005a02:	2d00      	cmp	r5, #0
 8005a04:	f000 80bd 	beq.w	8005b82 <_dtoa_r+0x62a>
 8005a08:	b12f      	cbz	r7, 8005a16 <_dtoa_r+0x4be>
 8005a0a:	42af      	cmp	r7, r5
 8005a0c:	d003      	beq.n	8005a16 <_dtoa_r+0x4be>
 8005a0e:	4639      	mov	r1, r7
 8005a10:	4648      	mov	r0, r9
 8005a12:	f000 fcb3 	bl	800637c <_Bfree>
 8005a16:	4629      	mov	r1, r5
 8005a18:	4648      	mov	r0, r9
 8005a1a:	f000 fcaf 	bl	800637c <_Bfree>
 8005a1e:	e0b0      	b.n	8005b82 <_dtoa_r+0x62a>
 8005a20:	07e2      	lsls	r2, r4, #31
 8005a22:	d505      	bpl.n	8005a30 <_dtoa_r+0x4d8>
 8005a24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a28:	f7fa fd56 	bl	80004d8 <__aeabi_dmul>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	3601      	adds	r6, #1
 8005a30:	1064      	asrs	r4, r4, #1
 8005a32:	3508      	adds	r5, #8
 8005a34:	e762      	b.n	80058fc <_dtoa_r+0x3a4>
 8005a36:	2602      	movs	r6, #2
 8005a38:	e765      	b.n	8005906 <_dtoa_r+0x3ae>
 8005a3a:	46b8      	mov	r8, r7
 8005a3c:	9c08      	ldr	r4, [sp, #32]
 8005a3e:	e784      	b.n	800594a <_dtoa_r+0x3f2>
 8005a40:	4b27      	ldr	r3, [pc, #156]	@ (8005ae0 <_dtoa_r+0x588>)
 8005a42:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005a44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a4c:	4454      	add	r4, sl
 8005a4e:	2900      	cmp	r1, #0
 8005a50:	d054      	beq.n	8005afc <_dtoa_r+0x5a4>
 8005a52:	2000      	movs	r0, #0
 8005a54:	4928      	ldr	r1, [pc, #160]	@ (8005af8 <_dtoa_r+0x5a0>)
 8005a56:	f7fa fe69 	bl	800072c <__aeabi_ddiv>
 8005a5a:	4633      	mov	r3, r6
 8005a5c:	462a      	mov	r2, r5
 8005a5e:	f7fa fb83 	bl	8000168 <__aeabi_dsub>
 8005a62:	4656      	mov	r6, sl
 8005a64:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005a68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a6c:	f7fa ffe4 	bl	8000a38 <__aeabi_d2iz>
 8005a70:	4605      	mov	r5, r0
 8005a72:	f7fa fcc7 	bl	8000404 <__aeabi_i2d>
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a7e:	f7fa fb73 	bl	8000168 <__aeabi_dsub>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	3530      	adds	r5, #48	@ 0x30
 8005a88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005a90:	f806 5b01 	strb.w	r5, [r6], #1
 8005a94:	f7fa ff92 	bl	80009bc <__aeabi_dcmplt>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d172      	bne.n	8005b82 <_dtoa_r+0x62a>
 8005a9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	4911      	ldr	r1, [pc, #68]	@ (8005ae8 <_dtoa_r+0x590>)
 8005aa4:	f7fa fb60 	bl	8000168 <__aeabi_dsub>
 8005aa8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005aac:	f7fa ff86 	bl	80009bc <__aeabi_dcmplt>
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	f040 80b4 	bne.w	8005c1e <_dtoa_r+0x6c6>
 8005ab6:	42a6      	cmp	r6, r4
 8005ab8:	f43f af70 	beq.w	800599c <_dtoa_r+0x444>
 8005abc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8005aec <_dtoa_r+0x594>)
 8005ac4:	f7fa fd08 	bl	80004d8 <__aeabi_dmul>
 8005ac8:	2200      	movs	r2, #0
 8005aca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ace:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ad2:	4b06      	ldr	r3, [pc, #24]	@ (8005aec <_dtoa_r+0x594>)
 8005ad4:	f7fa fd00 	bl	80004d8 <__aeabi_dmul>
 8005ad8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005adc:	e7c4      	b.n	8005a68 <_dtoa_r+0x510>
 8005ade:	bf00      	nop
 8005ae0:	08009ad0 	.word	0x08009ad0
 8005ae4:	08009aa8 	.word	0x08009aa8
 8005ae8:	3ff00000 	.word	0x3ff00000
 8005aec:	40240000 	.word	0x40240000
 8005af0:	401c0000 	.word	0x401c0000
 8005af4:	40140000 	.word	0x40140000
 8005af8:	3fe00000 	.word	0x3fe00000
 8005afc:	4631      	mov	r1, r6
 8005afe:	4628      	mov	r0, r5
 8005b00:	f7fa fcea 	bl	80004d8 <__aeabi_dmul>
 8005b04:	4656      	mov	r6, sl
 8005b06:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b0a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005b0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b10:	f7fa ff92 	bl	8000a38 <__aeabi_d2iz>
 8005b14:	4605      	mov	r5, r0
 8005b16:	f7fa fc75 	bl	8000404 <__aeabi_i2d>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b22:	f7fa fb21 	bl	8000168 <__aeabi_dsub>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	3530      	adds	r5, #48	@ 0x30
 8005b2c:	f806 5b01 	strb.w	r5, [r6], #1
 8005b30:	42a6      	cmp	r6, r4
 8005b32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	d124      	bne.n	8005b86 <_dtoa_r+0x62e>
 8005b3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005b40:	4bae      	ldr	r3, [pc, #696]	@ (8005dfc <_dtoa_r+0x8a4>)
 8005b42:	f7fa fb13 	bl	800016c <__adddf3>
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b4e:	f7fa ff53 	bl	80009f8 <__aeabi_dcmpgt>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d163      	bne.n	8005c1e <_dtoa_r+0x6c6>
 8005b56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	49a7      	ldr	r1, [pc, #668]	@ (8005dfc <_dtoa_r+0x8a4>)
 8005b5e:	f7fa fb03 	bl	8000168 <__aeabi_dsub>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b6a:	f7fa ff27 	bl	80009bc <__aeabi_dcmplt>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	f43f af14 	beq.w	800599c <_dtoa_r+0x444>
 8005b74:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005b76:	1e73      	subs	r3, r6, #1
 8005b78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005b7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005b7e:	2b30      	cmp	r3, #48	@ 0x30
 8005b80:	d0f8      	beq.n	8005b74 <_dtoa_r+0x61c>
 8005b82:	4647      	mov	r7, r8
 8005b84:	e03b      	b.n	8005bfe <_dtoa_r+0x6a6>
 8005b86:	4b9e      	ldr	r3, [pc, #632]	@ (8005e00 <_dtoa_r+0x8a8>)
 8005b88:	f7fa fca6 	bl	80004d8 <__aeabi_dmul>
 8005b8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b90:	e7bc      	b.n	8005b0c <_dtoa_r+0x5b4>
 8005b92:	4656      	mov	r6, sl
 8005b94:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	f7fa fdc4 	bl	800072c <__aeabi_ddiv>
 8005ba4:	f7fa ff48 	bl	8000a38 <__aeabi_d2iz>
 8005ba8:	4680      	mov	r8, r0
 8005baa:	f7fa fc2b 	bl	8000404 <__aeabi_i2d>
 8005bae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bb2:	f7fa fc91 	bl	80004d8 <__aeabi_dmul>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4620      	mov	r0, r4
 8005bbc:	4629      	mov	r1, r5
 8005bbe:	f7fa fad3 	bl	8000168 <__aeabi_dsub>
 8005bc2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005bc6:	9d08      	ldr	r5, [sp, #32]
 8005bc8:	f806 4b01 	strb.w	r4, [r6], #1
 8005bcc:	eba6 040a 	sub.w	r4, r6, sl
 8005bd0:	42a5      	cmp	r5, r4
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	d133      	bne.n	8005c40 <_dtoa_r+0x6e8>
 8005bd8:	f7fa fac8 	bl	800016c <__adddf3>
 8005bdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005be0:	4604      	mov	r4, r0
 8005be2:	460d      	mov	r5, r1
 8005be4:	f7fa ff08 	bl	80009f8 <__aeabi_dcmpgt>
 8005be8:	b9c0      	cbnz	r0, 8005c1c <_dtoa_r+0x6c4>
 8005bea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bee:	4620      	mov	r0, r4
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	f7fa fed9 	bl	80009a8 <__aeabi_dcmpeq>
 8005bf6:	b110      	cbz	r0, 8005bfe <_dtoa_r+0x6a6>
 8005bf8:	f018 0f01 	tst.w	r8, #1
 8005bfc:	d10e      	bne.n	8005c1c <_dtoa_r+0x6c4>
 8005bfe:	4648      	mov	r0, r9
 8005c00:	9903      	ldr	r1, [sp, #12]
 8005c02:	f000 fbbb 	bl	800637c <_Bfree>
 8005c06:	2300      	movs	r3, #0
 8005c08:	7033      	strb	r3, [r6, #0]
 8005c0a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005c0c:	3701      	adds	r7, #1
 8005c0e:	601f      	str	r7, [r3, #0]
 8005c10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 824b 	beq.w	80060ae <_dtoa_r+0xb56>
 8005c18:	601e      	str	r6, [r3, #0]
 8005c1a:	e248      	b.n	80060ae <_dtoa_r+0xb56>
 8005c1c:	46b8      	mov	r8, r7
 8005c1e:	4633      	mov	r3, r6
 8005c20:	461e      	mov	r6, r3
 8005c22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c26:	2a39      	cmp	r2, #57	@ 0x39
 8005c28:	d106      	bne.n	8005c38 <_dtoa_r+0x6e0>
 8005c2a:	459a      	cmp	sl, r3
 8005c2c:	d1f8      	bne.n	8005c20 <_dtoa_r+0x6c8>
 8005c2e:	2230      	movs	r2, #48	@ 0x30
 8005c30:	f108 0801 	add.w	r8, r8, #1
 8005c34:	f88a 2000 	strb.w	r2, [sl]
 8005c38:	781a      	ldrb	r2, [r3, #0]
 8005c3a:	3201      	adds	r2, #1
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	e7a0      	b.n	8005b82 <_dtoa_r+0x62a>
 8005c40:	2200      	movs	r2, #0
 8005c42:	4b6f      	ldr	r3, [pc, #444]	@ (8005e00 <_dtoa_r+0x8a8>)
 8005c44:	f7fa fc48 	bl	80004d8 <__aeabi_dmul>
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	460d      	mov	r5, r1
 8005c50:	f7fa feaa 	bl	80009a8 <__aeabi_dcmpeq>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d09f      	beq.n	8005b98 <_dtoa_r+0x640>
 8005c58:	e7d1      	b.n	8005bfe <_dtoa_r+0x6a6>
 8005c5a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005c5c:	2a00      	cmp	r2, #0
 8005c5e:	f000 80ea 	beq.w	8005e36 <_dtoa_r+0x8de>
 8005c62:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005c64:	2a01      	cmp	r2, #1
 8005c66:	f300 80cd 	bgt.w	8005e04 <_dtoa_r+0x8ac>
 8005c6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005c6c:	2a00      	cmp	r2, #0
 8005c6e:	f000 80c1 	beq.w	8005df4 <_dtoa_r+0x89c>
 8005c72:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005c76:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005c78:	9e04      	ldr	r6, [sp, #16]
 8005c7a:	9a04      	ldr	r2, [sp, #16]
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	441a      	add	r2, r3
 8005c80:	9204      	str	r2, [sp, #16]
 8005c82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c84:	4648      	mov	r0, r9
 8005c86:	441a      	add	r2, r3
 8005c88:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c8a:	f000 fc2b 	bl	80064e4 <__i2b>
 8005c8e:	4605      	mov	r5, r0
 8005c90:	b166      	cbz	r6, 8005cac <_dtoa_r+0x754>
 8005c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	dd09      	ble.n	8005cac <_dtoa_r+0x754>
 8005c98:	42b3      	cmp	r3, r6
 8005c9a:	bfa8      	it	ge
 8005c9c:	4633      	movge	r3, r6
 8005c9e:	9a04      	ldr	r2, [sp, #16]
 8005ca0:	1af6      	subs	r6, r6, r3
 8005ca2:	1ad2      	subs	r2, r2, r3
 8005ca4:	9204      	str	r2, [sp, #16]
 8005ca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cae:	b30b      	cbz	r3, 8005cf4 <_dtoa_r+0x79c>
 8005cb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 80c6 	beq.w	8005e44 <_dtoa_r+0x8ec>
 8005cb8:	2c00      	cmp	r4, #0
 8005cba:	f000 80c0 	beq.w	8005e3e <_dtoa_r+0x8e6>
 8005cbe:	4629      	mov	r1, r5
 8005cc0:	4622      	mov	r2, r4
 8005cc2:	4648      	mov	r0, r9
 8005cc4:	f000 fcc6 	bl	8006654 <__pow5mult>
 8005cc8:	9a03      	ldr	r2, [sp, #12]
 8005cca:	4601      	mov	r1, r0
 8005ccc:	4605      	mov	r5, r0
 8005cce:	4648      	mov	r0, r9
 8005cd0:	f000 fc1e 	bl	8006510 <__multiply>
 8005cd4:	9903      	ldr	r1, [sp, #12]
 8005cd6:	4680      	mov	r8, r0
 8005cd8:	4648      	mov	r0, r9
 8005cda:	f000 fb4f 	bl	800637c <_Bfree>
 8005cde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ce0:	1b1b      	subs	r3, r3, r4
 8005ce2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ce4:	f000 80b1 	beq.w	8005e4a <_dtoa_r+0x8f2>
 8005ce8:	4641      	mov	r1, r8
 8005cea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005cec:	4648      	mov	r0, r9
 8005cee:	f000 fcb1 	bl	8006654 <__pow5mult>
 8005cf2:	9003      	str	r0, [sp, #12]
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	4648      	mov	r0, r9
 8005cf8:	f000 fbf4 	bl	80064e4 <__i2b>
 8005cfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cfe:	4604      	mov	r4, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 81d8 	beq.w	80060b6 <_dtoa_r+0xb5e>
 8005d06:	461a      	mov	r2, r3
 8005d08:	4601      	mov	r1, r0
 8005d0a:	4648      	mov	r0, r9
 8005d0c:	f000 fca2 	bl	8006654 <__pow5mult>
 8005d10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d12:	4604      	mov	r4, r0
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	f300 809f 	bgt.w	8005e58 <_dtoa_r+0x900>
 8005d1a:	9b06      	ldr	r3, [sp, #24]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f040 8097 	bne.w	8005e50 <_dtoa_r+0x8f8>
 8005d22:	9b07      	ldr	r3, [sp, #28]
 8005d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f040 8093 	bne.w	8005e54 <_dtoa_r+0x8fc>
 8005d2e:	9b07      	ldr	r3, [sp, #28]
 8005d30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d34:	0d1b      	lsrs	r3, r3, #20
 8005d36:	051b      	lsls	r3, r3, #20
 8005d38:	b133      	cbz	r3, 8005d48 <_dtoa_r+0x7f0>
 8005d3a:	9b04      	ldr	r3, [sp, #16]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	9304      	str	r3, [sp, #16]
 8005d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d42:	3301      	adds	r3, #1
 8005d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d46:	2301      	movs	r3, #1
 8005d48:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 81b8 	beq.w	80060c2 <_dtoa_r+0xb6a>
 8005d52:	6923      	ldr	r3, [r4, #16]
 8005d54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005d58:	6918      	ldr	r0, [r3, #16]
 8005d5a:	f000 fb77 	bl	800644c <__hi0bits>
 8005d5e:	f1c0 0020 	rsb	r0, r0, #32
 8005d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d64:	4418      	add	r0, r3
 8005d66:	f010 001f 	ands.w	r0, r0, #31
 8005d6a:	f000 8082 	beq.w	8005e72 <_dtoa_r+0x91a>
 8005d6e:	f1c0 0320 	rsb	r3, r0, #32
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	dd73      	ble.n	8005e5e <_dtoa_r+0x906>
 8005d76:	9b04      	ldr	r3, [sp, #16]
 8005d78:	f1c0 001c 	rsb	r0, r0, #28
 8005d7c:	4403      	add	r3, r0
 8005d7e:	9304      	str	r3, [sp, #16]
 8005d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d82:	4406      	add	r6, r0
 8005d84:	4403      	add	r3, r0
 8005d86:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d88:	9b04      	ldr	r3, [sp, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	dd05      	ble.n	8005d9a <_dtoa_r+0x842>
 8005d8e:	461a      	mov	r2, r3
 8005d90:	4648      	mov	r0, r9
 8005d92:	9903      	ldr	r1, [sp, #12]
 8005d94:	f000 fcb8 	bl	8006708 <__lshift>
 8005d98:	9003      	str	r0, [sp, #12]
 8005d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	dd05      	ble.n	8005dac <_dtoa_r+0x854>
 8005da0:	4621      	mov	r1, r4
 8005da2:	461a      	mov	r2, r3
 8005da4:	4648      	mov	r0, r9
 8005da6:	f000 fcaf 	bl	8006708 <__lshift>
 8005daa:	4604      	mov	r4, r0
 8005dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d061      	beq.n	8005e76 <_dtoa_r+0x91e>
 8005db2:	4621      	mov	r1, r4
 8005db4:	9803      	ldr	r0, [sp, #12]
 8005db6:	f000 fd13 	bl	80067e0 <__mcmp>
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	da5b      	bge.n	8005e76 <_dtoa_r+0x91e>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	220a      	movs	r2, #10
 8005dc2:	4648      	mov	r0, r9
 8005dc4:	9903      	ldr	r1, [sp, #12]
 8005dc6:	f000 fafb 	bl	80063c0 <__multadd>
 8005dca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dcc:	f107 38ff 	add.w	r8, r7, #4294967295
 8005dd0:	9003      	str	r0, [sp, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 8177 	beq.w	80060c6 <_dtoa_r+0xb6e>
 8005dd8:	4629      	mov	r1, r5
 8005dda:	2300      	movs	r3, #0
 8005ddc:	220a      	movs	r2, #10
 8005dde:	4648      	mov	r0, r9
 8005de0:	f000 faee 	bl	80063c0 <__multadd>
 8005de4:	f1bb 0f00 	cmp.w	fp, #0
 8005de8:	4605      	mov	r5, r0
 8005dea:	dc6f      	bgt.n	8005ecc <_dtoa_r+0x974>
 8005dec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	dc49      	bgt.n	8005e86 <_dtoa_r+0x92e>
 8005df2:	e06b      	b.n	8005ecc <_dtoa_r+0x974>
 8005df4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005df6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005dfa:	e73c      	b.n	8005c76 <_dtoa_r+0x71e>
 8005dfc:	3fe00000 	.word	0x3fe00000
 8005e00:	40240000 	.word	0x40240000
 8005e04:	9b08      	ldr	r3, [sp, #32]
 8005e06:	1e5c      	subs	r4, r3, #1
 8005e08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e0a:	42a3      	cmp	r3, r4
 8005e0c:	db09      	blt.n	8005e22 <_dtoa_r+0x8ca>
 8005e0e:	1b1c      	subs	r4, r3, r4
 8005e10:	9b08      	ldr	r3, [sp, #32]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f6bf af30 	bge.w	8005c78 <_dtoa_r+0x720>
 8005e18:	9b04      	ldr	r3, [sp, #16]
 8005e1a:	9a08      	ldr	r2, [sp, #32]
 8005e1c:	1a9e      	subs	r6, r3, r2
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e72b      	b.n	8005c7a <_dtoa_r+0x722>
 8005e22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e26:	1ae3      	subs	r3, r4, r3
 8005e28:	441a      	add	r2, r3
 8005e2a:	940a      	str	r4, [sp, #40]	@ 0x28
 8005e2c:	9e04      	ldr	r6, [sp, #16]
 8005e2e:	2400      	movs	r4, #0
 8005e30:	9b08      	ldr	r3, [sp, #32]
 8005e32:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e34:	e721      	b.n	8005c7a <_dtoa_r+0x722>
 8005e36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005e38:	9e04      	ldr	r6, [sp, #16]
 8005e3a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005e3c:	e728      	b.n	8005c90 <_dtoa_r+0x738>
 8005e3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005e42:	e751      	b.n	8005ce8 <_dtoa_r+0x790>
 8005e44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e46:	9903      	ldr	r1, [sp, #12]
 8005e48:	e750      	b.n	8005cec <_dtoa_r+0x794>
 8005e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e4e:	e751      	b.n	8005cf4 <_dtoa_r+0x79c>
 8005e50:	2300      	movs	r3, #0
 8005e52:	e779      	b.n	8005d48 <_dtoa_r+0x7f0>
 8005e54:	9b06      	ldr	r3, [sp, #24]
 8005e56:	e777      	b.n	8005d48 <_dtoa_r+0x7f0>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e5c:	e779      	b.n	8005d52 <_dtoa_r+0x7fa>
 8005e5e:	d093      	beq.n	8005d88 <_dtoa_r+0x830>
 8005e60:	9a04      	ldr	r2, [sp, #16]
 8005e62:	331c      	adds	r3, #28
 8005e64:	441a      	add	r2, r3
 8005e66:	9204      	str	r2, [sp, #16]
 8005e68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e6a:	441e      	add	r6, r3
 8005e6c:	441a      	add	r2, r3
 8005e6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e70:	e78a      	b.n	8005d88 <_dtoa_r+0x830>
 8005e72:	4603      	mov	r3, r0
 8005e74:	e7f4      	b.n	8005e60 <_dtoa_r+0x908>
 8005e76:	9b08      	ldr	r3, [sp, #32]
 8005e78:	46b8      	mov	r8, r7
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	dc20      	bgt.n	8005ec0 <_dtoa_r+0x968>
 8005e7e:	469b      	mov	fp, r3
 8005e80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	dd1e      	ble.n	8005ec4 <_dtoa_r+0x96c>
 8005e86:	f1bb 0f00 	cmp.w	fp, #0
 8005e8a:	f47f adb1 	bne.w	80059f0 <_dtoa_r+0x498>
 8005e8e:	4621      	mov	r1, r4
 8005e90:	465b      	mov	r3, fp
 8005e92:	2205      	movs	r2, #5
 8005e94:	4648      	mov	r0, r9
 8005e96:	f000 fa93 	bl	80063c0 <__multadd>
 8005e9a:	4601      	mov	r1, r0
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	9803      	ldr	r0, [sp, #12]
 8005ea0:	f000 fc9e 	bl	80067e0 <__mcmp>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	f77f ada3 	ble.w	80059f0 <_dtoa_r+0x498>
 8005eaa:	4656      	mov	r6, sl
 8005eac:	2331      	movs	r3, #49	@ 0x31
 8005eae:	f108 0801 	add.w	r8, r8, #1
 8005eb2:	f806 3b01 	strb.w	r3, [r6], #1
 8005eb6:	e59f      	b.n	80059f8 <_dtoa_r+0x4a0>
 8005eb8:	46b8      	mov	r8, r7
 8005eba:	9c08      	ldr	r4, [sp, #32]
 8005ebc:	4625      	mov	r5, r4
 8005ebe:	e7f4      	b.n	8005eaa <_dtoa_r+0x952>
 8005ec0:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005ec4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 8101 	beq.w	80060ce <_dtoa_r+0xb76>
 8005ecc:	2e00      	cmp	r6, #0
 8005ece:	dd05      	ble.n	8005edc <_dtoa_r+0x984>
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	4632      	mov	r2, r6
 8005ed4:	4648      	mov	r0, r9
 8005ed6:	f000 fc17 	bl	8006708 <__lshift>
 8005eda:	4605      	mov	r5, r0
 8005edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d05c      	beq.n	8005f9c <_dtoa_r+0xa44>
 8005ee2:	4648      	mov	r0, r9
 8005ee4:	6869      	ldr	r1, [r5, #4]
 8005ee6:	f000 fa09 	bl	80062fc <_Balloc>
 8005eea:	4606      	mov	r6, r0
 8005eec:	b928      	cbnz	r0, 8005efa <_dtoa_r+0x9a2>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005ef4:	4b80      	ldr	r3, [pc, #512]	@ (80060f8 <_dtoa_r+0xba0>)
 8005ef6:	f7ff bb43 	b.w	8005580 <_dtoa_r+0x28>
 8005efa:	692a      	ldr	r2, [r5, #16]
 8005efc:	f105 010c 	add.w	r1, r5, #12
 8005f00:	3202      	adds	r2, #2
 8005f02:	0092      	lsls	r2, r2, #2
 8005f04:	300c      	adds	r0, #12
 8005f06:	f000 ffaf 	bl	8006e68 <memcpy>
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4648      	mov	r0, r9
 8005f10:	f000 fbfa 	bl	8006708 <__lshift>
 8005f14:	462f      	mov	r7, r5
 8005f16:	4605      	mov	r5, r0
 8005f18:	f10a 0301 	add.w	r3, sl, #1
 8005f1c:	9304      	str	r3, [sp, #16]
 8005f1e:	eb0a 030b 	add.w	r3, sl, fp
 8005f22:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f24:	9b06      	ldr	r3, [sp, #24]
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f2c:	9b04      	ldr	r3, [sp, #16]
 8005f2e:	4621      	mov	r1, r4
 8005f30:	9803      	ldr	r0, [sp, #12]
 8005f32:	f103 3bff 	add.w	fp, r3, #4294967295
 8005f36:	f7ff fa85 	bl	8005444 <quorem>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	4639      	mov	r1, r7
 8005f3e:	3330      	adds	r3, #48	@ 0x30
 8005f40:	9006      	str	r0, [sp, #24]
 8005f42:	9803      	ldr	r0, [sp, #12]
 8005f44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f46:	f000 fc4b 	bl	80067e0 <__mcmp>
 8005f4a:	462a      	mov	r2, r5
 8005f4c:	9008      	str	r0, [sp, #32]
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4648      	mov	r0, r9
 8005f52:	f000 fc61 	bl	8006818 <__mdiff>
 8005f56:	68c2      	ldr	r2, [r0, #12]
 8005f58:	4606      	mov	r6, r0
 8005f5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f5c:	bb02      	cbnz	r2, 8005fa0 <_dtoa_r+0xa48>
 8005f5e:	4601      	mov	r1, r0
 8005f60:	9803      	ldr	r0, [sp, #12]
 8005f62:	f000 fc3d 	bl	80067e0 <__mcmp>
 8005f66:	4602      	mov	r2, r0
 8005f68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	4648      	mov	r0, r9
 8005f6e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005f72:	f000 fa03 	bl	800637c <_Bfree>
 8005f76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005f7a:	9e04      	ldr	r6, [sp, #16]
 8005f7c:	ea42 0103 	orr.w	r1, r2, r3
 8005f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f82:	4319      	orrs	r1, r3
 8005f84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f86:	d10d      	bne.n	8005fa4 <_dtoa_r+0xa4c>
 8005f88:	2b39      	cmp	r3, #57	@ 0x39
 8005f8a:	d027      	beq.n	8005fdc <_dtoa_r+0xa84>
 8005f8c:	9a08      	ldr	r2, [sp, #32]
 8005f8e:	2a00      	cmp	r2, #0
 8005f90:	dd01      	ble.n	8005f96 <_dtoa_r+0xa3e>
 8005f92:	9b06      	ldr	r3, [sp, #24]
 8005f94:	3331      	adds	r3, #49	@ 0x31
 8005f96:	f88b 3000 	strb.w	r3, [fp]
 8005f9a:	e52e      	b.n	80059fa <_dtoa_r+0x4a2>
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	e7b9      	b.n	8005f14 <_dtoa_r+0x9bc>
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	e7e2      	b.n	8005f6a <_dtoa_r+0xa12>
 8005fa4:	9908      	ldr	r1, [sp, #32]
 8005fa6:	2900      	cmp	r1, #0
 8005fa8:	db04      	blt.n	8005fb4 <_dtoa_r+0xa5c>
 8005faa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005fac:	4301      	orrs	r1, r0
 8005fae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fb0:	4301      	orrs	r1, r0
 8005fb2:	d120      	bne.n	8005ff6 <_dtoa_r+0xa9e>
 8005fb4:	2a00      	cmp	r2, #0
 8005fb6:	ddee      	ble.n	8005f96 <_dtoa_r+0xa3e>
 8005fb8:	2201      	movs	r2, #1
 8005fba:	9903      	ldr	r1, [sp, #12]
 8005fbc:	4648      	mov	r0, r9
 8005fbe:	9304      	str	r3, [sp, #16]
 8005fc0:	f000 fba2 	bl	8006708 <__lshift>
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	9003      	str	r0, [sp, #12]
 8005fc8:	f000 fc0a 	bl	80067e0 <__mcmp>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	9b04      	ldr	r3, [sp, #16]
 8005fd0:	dc02      	bgt.n	8005fd8 <_dtoa_r+0xa80>
 8005fd2:	d1e0      	bne.n	8005f96 <_dtoa_r+0xa3e>
 8005fd4:	07da      	lsls	r2, r3, #31
 8005fd6:	d5de      	bpl.n	8005f96 <_dtoa_r+0xa3e>
 8005fd8:	2b39      	cmp	r3, #57	@ 0x39
 8005fda:	d1da      	bne.n	8005f92 <_dtoa_r+0xa3a>
 8005fdc:	2339      	movs	r3, #57	@ 0x39
 8005fde:	f88b 3000 	strb.w	r3, [fp]
 8005fe2:	4633      	mov	r3, r6
 8005fe4:	461e      	mov	r6, r3
 8005fe6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	2a39      	cmp	r2, #57	@ 0x39
 8005fee:	d04e      	beq.n	800608e <_dtoa_r+0xb36>
 8005ff0:	3201      	adds	r2, #1
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	e501      	b.n	80059fa <_dtoa_r+0x4a2>
 8005ff6:	2a00      	cmp	r2, #0
 8005ff8:	dd03      	ble.n	8006002 <_dtoa_r+0xaaa>
 8005ffa:	2b39      	cmp	r3, #57	@ 0x39
 8005ffc:	d0ee      	beq.n	8005fdc <_dtoa_r+0xa84>
 8005ffe:	3301      	adds	r3, #1
 8006000:	e7c9      	b.n	8005f96 <_dtoa_r+0xa3e>
 8006002:	9a04      	ldr	r2, [sp, #16]
 8006004:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006006:	f802 3c01 	strb.w	r3, [r2, #-1]
 800600a:	428a      	cmp	r2, r1
 800600c:	d028      	beq.n	8006060 <_dtoa_r+0xb08>
 800600e:	2300      	movs	r3, #0
 8006010:	220a      	movs	r2, #10
 8006012:	9903      	ldr	r1, [sp, #12]
 8006014:	4648      	mov	r0, r9
 8006016:	f000 f9d3 	bl	80063c0 <__multadd>
 800601a:	42af      	cmp	r7, r5
 800601c:	9003      	str	r0, [sp, #12]
 800601e:	f04f 0300 	mov.w	r3, #0
 8006022:	f04f 020a 	mov.w	r2, #10
 8006026:	4639      	mov	r1, r7
 8006028:	4648      	mov	r0, r9
 800602a:	d107      	bne.n	800603c <_dtoa_r+0xae4>
 800602c:	f000 f9c8 	bl	80063c0 <__multadd>
 8006030:	4607      	mov	r7, r0
 8006032:	4605      	mov	r5, r0
 8006034:	9b04      	ldr	r3, [sp, #16]
 8006036:	3301      	adds	r3, #1
 8006038:	9304      	str	r3, [sp, #16]
 800603a:	e777      	b.n	8005f2c <_dtoa_r+0x9d4>
 800603c:	f000 f9c0 	bl	80063c0 <__multadd>
 8006040:	4629      	mov	r1, r5
 8006042:	4607      	mov	r7, r0
 8006044:	2300      	movs	r3, #0
 8006046:	220a      	movs	r2, #10
 8006048:	4648      	mov	r0, r9
 800604a:	f000 f9b9 	bl	80063c0 <__multadd>
 800604e:	4605      	mov	r5, r0
 8006050:	e7f0      	b.n	8006034 <_dtoa_r+0xadc>
 8006052:	f1bb 0f00 	cmp.w	fp, #0
 8006056:	bfcc      	ite	gt
 8006058:	465e      	movgt	r6, fp
 800605a:	2601      	movle	r6, #1
 800605c:	2700      	movs	r7, #0
 800605e:	4456      	add	r6, sl
 8006060:	2201      	movs	r2, #1
 8006062:	9903      	ldr	r1, [sp, #12]
 8006064:	4648      	mov	r0, r9
 8006066:	9304      	str	r3, [sp, #16]
 8006068:	f000 fb4e 	bl	8006708 <__lshift>
 800606c:	4621      	mov	r1, r4
 800606e:	9003      	str	r0, [sp, #12]
 8006070:	f000 fbb6 	bl	80067e0 <__mcmp>
 8006074:	2800      	cmp	r0, #0
 8006076:	dcb4      	bgt.n	8005fe2 <_dtoa_r+0xa8a>
 8006078:	d102      	bne.n	8006080 <_dtoa_r+0xb28>
 800607a:	9b04      	ldr	r3, [sp, #16]
 800607c:	07db      	lsls	r3, r3, #31
 800607e:	d4b0      	bmi.n	8005fe2 <_dtoa_r+0xa8a>
 8006080:	4633      	mov	r3, r6
 8006082:	461e      	mov	r6, r3
 8006084:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006088:	2a30      	cmp	r2, #48	@ 0x30
 800608a:	d0fa      	beq.n	8006082 <_dtoa_r+0xb2a>
 800608c:	e4b5      	b.n	80059fa <_dtoa_r+0x4a2>
 800608e:	459a      	cmp	sl, r3
 8006090:	d1a8      	bne.n	8005fe4 <_dtoa_r+0xa8c>
 8006092:	2331      	movs	r3, #49	@ 0x31
 8006094:	f108 0801 	add.w	r8, r8, #1
 8006098:	f88a 3000 	strb.w	r3, [sl]
 800609c:	e4ad      	b.n	80059fa <_dtoa_r+0x4a2>
 800609e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80060a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80060fc <_dtoa_r+0xba4>
 80060a4:	b11b      	cbz	r3, 80060ae <_dtoa_r+0xb56>
 80060a6:	f10a 0308 	add.w	r3, sl, #8
 80060aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	4650      	mov	r0, sl
 80060b0:	b017      	add	sp, #92	@ 0x5c
 80060b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	f77f ae2e 	ble.w	8005d1a <_dtoa_r+0x7c2>
 80060be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80060c2:	2001      	movs	r0, #1
 80060c4:	e64d      	b.n	8005d62 <_dtoa_r+0x80a>
 80060c6:	f1bb 0f00 	cmp.w	fp, #0
 80060ca:	f77f aed9 	ble.w	8005e80 <_dtoa_r+0x928>
 80060ce:	4656      	mov	r6, sl
 80060d0:	4621      	mov	r1, r4
 80060d2:	9803      	ldr	r0, [sp, #12]
 80060d4:	f7ff f9b6 	bl	8005444 <quorem>
 80060d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80060dc:	f806 3b01 	strb.w	r3, [r6], #1
 80060e0:	eba6 020a 	sub.w	r2, r6, sl
 80060e4:	4593      	cmp	fp, r2
 80060e6:	ddb4      	ble.n	8006052 <_dtoa_r+0xafa>
 80060e8:	2300      	movs	r3, #0
 80060ea:	220a      	movs	r2, #10
 80060ec:	4648      	mov	r0, r9
 80060ee:	9903      	ldr	r1, [sp, #12]
 80060f0:	f000 f966 	bl	80063c0 <__multadd>
 80060f4:	9003      	str	r0, [sp, #12]
 80060f6:	e7eb      	b.n	80060d0 <_dtoa_r+0xb78>
 80060f8:	08009a16 	.word	0x08009a16
 80060fc:	080099b1 	.word	0x080099b1

08006100 <_free_r>:
 8006100:	b538      	push	{r3, r4, r5, lr}
 8006102:	4605      	mov	r5, r0
 8006104:	2900      	cmp	r1, #0
 8006106:	d040      	beq.n	800618a <_free_r+0x8a>
 8006108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800610c:	1f0c      	subs	r4, r1, #4
 800610e:	2b00      	cmp	r3, #0
 8006110:	bfb8      	it	lt
 8006112:	18e4      	addlt	r4, r4, r3
 8006114:	f000 f8e6 	bl	80062e4 <__malloc_lock>
 8006118:	4a1c      	ldr	r2, [pc, #112]	@ (800618c <_free_r+0x8c>)
 800611a:	6813      	ldr	r3, [r2, #0]
 800611c:	b933      	cbnz	r3, 800612c <_free_r+0x2c>
 800611e:	6063      	str	r3, [r4, #4]
 8006120:	6014      	str	r4, [r2, #0]
 8006122:	4628      	mov	r0, r5
 8006124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006128:	f000 b8e2 	b.w	80062f0 <__malloc_unlock>
 800612c:	42a3      	cmp	r3, r4
 800612e:	d908      	bls.n	8006142 <_free_r+0x42>
 8006130:	6820      	ldr	r0, [r4, #0]
 8006132:	1821      	adds	r1, r4, r0
 8006134:	428b      	cmp	r3, r1
 8006136:	bf01      	itttt	eq
 8006138:	6819      	ldreq	r1, [r3, #0]
 800613a:	685b      	ldreq	r3, [r3, #4]
 800613c:	1809      	addeq	r1, r1, r0
 800613e:	6021      	streq	r1, [r4, #0]
 8006140:	e7ed      	b.n	800611e <_free_r+0x1e>
 8006142:	461a      	mov	r2, r3
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	b10b      	cbz	r3, 800614c <_free_r+0x4c>
 8006148:	42a3      	cmp	r3, r4
 800614a:	d9fa      	bls.n	8006142 <_free_r+0x42>
 800614c:	6811      	ldr	r1, [r2, #0]
 800614e:	1850      	adds	r0, r2, r1
 8006150:	42a0      	cmp	r0, r4
 8006152:	d10b      	bne.n	800616c <_free_r+0x6c>
 8006154:	6820      	ldr	r0, [r4, #0]
 8006156:	4401      	add	r1, r0
 8006158:	1850      	adds	r0, r2, r1
 800615a:	4283      	cmp	r3, r0
 800615c:	6011      	str	r1, [r2, #0]
 800615e:	d1e0      	bne.n	8006122 <_free_r+0x22>
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	4408      	add	r0, r1
 8006166:	6010      	str	r0, [r2, #0]
 8006168:	6053      	str	r3, [r2, #4]
 800616a:	e7da      	b.n	8006122 <_free_r+0x22>
 800616c:	d902      	bls.n	8006174 <_free_r+0x74>
 800616e:	230c      	movs	r3, #12
 8006170:	602b      	str	r3, [r5, #0]
 8006172:	e7d6      	b.n	8006122 <_free_r+0x22>
 8006174:	6820      	ldr	r0, [r4, #0]
 8006176:	1821      	adds	r1, r4, r0
 8006178:	428b      	cmp	r3, r1
 800617a:	bf01      	itttt	eq
 800617c:	6819      	ldreq	r1, [r3, #0]
 800617e:	685b      	ldreq	r3, [r3, #4]
 8006180:	1809      	addeq	r1, r1, r0
 8006182:	6021      	streq	r1, [r4, #0]
 8006184:	6063      	str	r3, [r4, #4]
 8006186:	6054      	str	r4, [r2, #4]
 8006188:	e7cb      	b.n	8006122 <_free_r+0x22>
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	2000040c 	.word	0x2000040c

08006190 <malloc>:
 8006190:	4b02      	ldr	r3, [pc, #8]	@ (800619c <malloc+0xc>)
 8006192:	4601      	mov	r1, r0
 8006194:	6818      	ldr	r0, [r3, #0]
 8006196:	f000 b825 	b.w	80061e4 <_malloc_r>
 800619a:	bf00      	nop
 800619c:	2000001c 	.word	0x2000001c

080061a0 <sbrk_aligned>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	4e0f      	ldr	r6, [pc, #60]	@ (80061e0 <sbrk_aligned+0x40>)
 80061a4:	460c      	mov	r4, r1
 80061a6:	6831      	ldr	r1, [r6, #0]
 80061a8:	4605      	mov	r5, r0
 80061aa:	b911      	cbnz	r1, 80061b2 <sbrk_aligned+0x12>
 80061ac:	f000 fe4c 	bl	8006e48 <_sbrk_r>
 80061b0:	6030      	str	r0, [r6, #0]
 80061b2:	4621      	mov	r1, r4
 80061b4:	4628      	mov	r0, r5
 80061b6:	f000 fe47 	bl	8006e48 <_sbrk_r>
 80061ba:	1c43      	adds	r3, r0, #1
 80061bc:	d103      	bne.n	80061c6 <sbrk_aligned+0x26>
 80061be:	f04f 34ff 	mov.w	r4, #4294967295
 80061c2:	4620      	mov	r0, r4
 80061c4:	bd70      	pop	{r4, r5, r6, pc}
 80061c6:	1cc4      	adds	r4, r0, #3
 80061c8:	f024 0403 	bic.w	r4, r4, #3
 80061cc:	42a0      	cmp	r0, r4
 80061ce:	d0f8      	beq.n	80061c2 <sbrk_aligned+0x22>
 80061d0:	1a21      	subs	r1, r4, r0
 80061d2:	4628      	mov	r0, r5
 80061d4:	f000 fe38 	bl	8006e48 <_sbrk_r>
 80061d8:	3001      	adds	r0, #1
 80061da:	d1f2      	bne.n	80061c2 <sbrk_aligned+0x22>
 80061dc:	e7ef      	b.n	80061be <sbrk_aligned+0x1e>
 80061de:	bf00      	nop
 80061e0:	20000408 	.word	0x20000408

080061e4 <_malloc_r>:
 80061e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061e8:	1ccd      	adds	r5, r1, #3
 80061ea:	f025 0503 	bic.w	r5, r5, #3
 80061ee:	3508      	adds	r5, #8
 80061f0:	2d0c      	cmp	r5, #12
 80061f2:	bf38      	it	cc
 80061f4:	250c      	movcc	r5, #12
 80061f6:	2d00      	cmp	r5, #0
 80061f8:	4606      	mov	r6, r0
 80061fa:	db01      	blt.n	8006200 <_malloc_r+0x1c>
 80061fc:	42a9      	cmp	r1, r5
 80061fe:	d904      	bls.n	800620a <_malloc_r+0x26>
 8006200:	230c      	movs	r3, #12
 8006202:	6033      	str	r3, [r6, #0]
 8006204:	2000      	movs	r0, #0
 8006206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800620a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062e0 <_malloc_r+0xfc>
 800620e:	f000 f869 	bl	80062e4 <__malloc_lock>
 8006212:	f8d8 3000 	ldr.w	r3, [r8]
 8006216:	461c      	mov	r4, r3
 8006218:	bb44      	cbnz	r4, 800626c <_malloc_r+0x88>
 800621a:	4629      	mov	r1, r5
 800621c:	4630      	mov	r0, r6
 800621e:	f7ff ffbf 	bl	80061a0 <sbrk_aligned>
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	4604      	mov	r4, r0
 8006226:	d158      	bne.n	80062da <_malloc_r+0xf6>
 8006228:	f8d8 4000 	ldr.w	r4, [r8]
 800622c:	4627      	mov	r7, r4
 800622e:	2f00      	cmp	r7, #0
 8006230:	d143      	bne.n	80062ba <_malloc_r+0xd6>
 8006232:	2c00      	cmp	r4, #0
 8006234:	d04b      	beq.n	80062ce <_malloc_r+0xea>
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	4639      	mov	r1, r7
 800623a:	4630      	mov	r0, r6
 800623c:	eb04 0903 	add.w	r9, r4, r3
 8006240:	f000 fe02 	bl	8006e48 <_sbrk_r>
 8006244:	4581      	cmp	r9, r0
 8006246:	d142      	bne.n	80062ce <_malloc_r+0xea>
 8006248:	6821      	ldr	r1, [r4, #0]
 800624a:	4630      	mov	r0, r6
 800624c:	1a6d      	subs	r5, r5, r1
 800624e:	4629      	mov	r1, r5
 8006250:	f7ff ffa6 	bl	80061a0 <sbrk_aligned>
 8006254:	3001      	adds	r0, #1
 8006256:	d03a      	beq.n	80062ce <_malloc_r+0xea>
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	442b      	add	r3, r5
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	f8d8 3000 	ldr.w	r3, [r8]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	bb62      	cbnz	r2, 80062c0 <_malloc_r+0xdc>
 8006266:	f8c8 7000 	str.w	r7, [r8]
 800626a:	e00f      	b.n	800628c <_malloc_r+0xa8>
 800626c:	6822      	ldr	r2, [r4, #0]
 800626e:	1b52      	subs	r2, r2, r5
 8006270:	d420      	bmi.n	80062b4 <_malloc_r+0xd0>
 8006272:	2a0b      	cmp	r2, #11
 8006274:	d917      	bls.n	80062a6 <_malloc_r+0xc2>
 8006276:	1961      	adds	r1, r4, r5
 8006278:	42a3      	cmp	r3, r4
 800627a:	6025      	str	r5, [r4, #0]
 800627c:	bf18      	it	ne
 800627e:	6059      	strne	r1, [r3, #4]
 8006280:	6863      	ldr	r3, [r4, #4]
 8006282:	bf08      	it	eq
 8006284:	f8c8 1000 	streq.w	r1, [r8]
 8006288:	5162      	str	r2, [r4, r5]
 800628a:	604b      	str	r3, [r1, #4]
 800628c:	4630      	mov	r0, r6
 800628e:	f000 f82f 	bl	80062f0 <__malloc_unlock>
 8006292:	f104 000b 	add.w	r0, r4, #11
 8006296:	1d23      	adds	r3, r4, #4
 8006298:	f020 0007 	bic.w	r0, r0, #7
 800629c:	1ac2      	subs	r2, r0, r3
 800629e:	bf1c      	itt	ne
 80062a0:	1a1b      	subne	r3, r3, r0
 80062a2:	50a3      	strne	r3, [r4, r2]
 80062a4:	e7af      	b.n	8006206 <_malloc_r+0x22>
 80062a6:	6862      	ldr	r2, [r4, #4]
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	bf0c      	ite	eq
 80062ac:	f8c8 2000 	streq.w	r2, [r8]
 80062b0:	605a      	strne	r2, [r3, #4]
 80062b2:	e7eb      	b.n	800628c <_malloc_r+0xa8>
 80062b4:	4623      	mov	r3, r4
 80062b6:	6864      	ldr	r4, [r4, #4]
 80062b8:	e7ae      	b.n	8006218 <_malloc_r+0x34>
 80062ba:	463c      	mov	r4, r7
 80062bc:	687f      	ldr	r7, [r7, #4]
 80062be:	e7b6      	b.n	800622e <_malloc_r+0x4a>
 80062c0:	461a      	mov	r2, r3
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	42a3      	cmp	r3, r4
 80062c6:	d1fb      	bne.n	80062c0 <_malloc_r+0xdc>
 80062c8:	2300      	movs	r3, #0
 80062ca:	6053      	str	r3, [r2, #4]
 80062cc:	e7de      	b.n	800628c <_malloc_r+0xa8>
 80062ce:	230c      	movs	r3, #12
 80062d0:	4630      	mov	r0, r6
 80062d2:	6033      	str	r3, [r6, #0]
 80062d4:	f000 f80c 	bl	80062f0 <__malloc_unlock>
 80062d8:	e794      	b.n	8006204 <_malloc_r+0x20>
 80062da:	6005      	str	r5, [r0, #0]
 80062dc:	e7d6      	b.n	800628c <_malloc_r+0xa8>
 80062de:	bf00      	nop
 80062e0:	2000040c 	.word	0x2000040c

080062e4 <__malloc_lock>:
 80062e4:	4801      	ldr	r0, [pc, #4]	@ (80062ec <__malloc_lock+0x8>)
 80062e6:	f7ff b87e 	b.w	80053e6 <__retarget_lock_acquire_recursive>
 80062ea:	bf00      	nop
 80062ec:	20000404 	.word	0x20000404

080062f0 <__malloc_unlock>:
 80062f0:	4801      	ldr	r0, [pc, #4]	@ (80062f8 <__malloc_unlock+0x8>)
 80062f2:	f7ff b879 	b.w	80053e8 <__retarget_lock_release_recursive>
 80062f6:	bf00      	nop
 80062f8:	20000404 	.word	0x20000404

080062fc <_Balloc>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	69c6      	ldr	r6, [r0, #28]
 8006300:	4604      	mov	r4, r0
 8006302:	460d      	mov	r5, r1
 8006304:	b976      	cbnz	r6, 8006324 <_Balloc+0x28>
 8006306:	2010      	movs	r0, #16
 8006308:	f7ff ff42 	bl	8006190 <malloc>
 800630c:	4602      	mov	r2, r0
 800630e:	61e0      	str	r0, [r4, #28]
 8006310:	b920      	cbnz	r0, 800631c <_Balloc+0x20>
 8006312:	216b      	movs	r1, #107	@ 0x6b
 8006314:	4b17      	ldr	r3, [pc, #92]	@ (8006374 <_Balloc+0x78>)
 8006316:	4818      	ldr	r0, [pc, #96]	@ (8006378 <_Balloc+0x7c>)
 8006318:	f7ff f876 	bl	8005408 <__assert_func>
 800631c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006320:	6006      	str	r6, [r0, #0]
 8006322:	60c6      	str	r6, [r0, #12]
 8006324:	69e6      	ldr	r6, [r4, #28]
 8006326:	68f3      	ldr	r3, [r6, #12]
 8006328:	b183      	cbz	r3, 800634c <_Balloc+0x50>
 800632a:	69e3      	ldr	r3, [r4, #28]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006332:	b9b8      	cbnz	r0, 8006364 <_Balloc+0x68>
 8006334:	2101      	movs	r1, #1
 8006336:	fa01 f605 	lsl.w	r6, r1, r5
 800633a:	1d72      	adds	r2, r6, #5
 800633c:	4620      	mov	r0, r4
 800633e:	0092      	lsls	r2, r2, #2
 8006340:	f000 fda7 	bl	8006e92 <_calloc_r>
 8006344:	b160      	cbz	r0, 8006360 <_Balloc+0x64>
 8006346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800634a:	e00e      	b.n	800636a <_Balloc+0x6e>
 800634c:	2221      	movs	r2, #33	@ 0x21
 800634e:	2104      	movs	r1, #4
 8006350:	4620      	mov	r0, r4
 8006352:	f000 fd9e 	bl	8006e92 <_calloc_r>
 8006356:	69e3      	ldr	r3, [r4, #28]
 8006358:	60f0      	str	r0, [r6, #12]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e4      	bne.n	800632a <_Balloc+0x2e>
 8006360:	2000      	movs	r0, #0
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	6802      	ldr	r2, [r0, #0]
 8006366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800636a:	2300      	movs	r3, #0
 800636c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006370:	e7f7      	b.n	8006362 <_Balloc+0x66>
 8006372:	bf00      	nop
 8006374:	080098d2 	.word	0x080098d2
 8006378:	08009a27 	.word	0x08009a27

0800637c <_Bfree>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	69c6      	ldr	r6, [r0, #28]
 8006380:	4605      	mov	r5, r0
 8006382:	460c      	mov	r4, r1
 8006384:	b976      	cbnz	r6, 80063a4 <_Bfree+0x28>
 8006386:	2010      	movs	r0, #16
 8006388:	f7ff ff02 	bl	8006190 <malloc>
 800638c:	4602      	mov	r2, r0
 800638e:	61e8      	str	r0, [r5, #28]
 8006390:	b920      	cbnz	r0, 800639c <_Bfree+0x20>
 8006392:	218f      	movs	r1, #143	@ 0x8f
 8006394:	4b08      	ldr	r3, [pc, #32]	@ (80063b8 <_Bfree+0x3c>)
 8006396:	4809      	ldr	r0, [pc, #36]	@ (80063bc <_Bfree+0x40>)
 8006398:	f7ff f836 	bl	8005408 <__assert_func>
 800639c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063a0:	6006      	str	r6, [r0, #0]
 80063a2:	60c6      	str	r6, [r0, #12]
 80063a4:	b13c      	cbz	r4, 80063b6 <_Bfree+0x3a>
 80063a6:	69eb      	ldr	r3, [r5, #28]
 80063a8:	6862      	ldr	r2, [r4, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063b0:	6021      	str	r1, [r4, #0]
 80063b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80063b6:	bd70      	pop	{r4, r5, r6, pc}
 80063b8:	080098d2 	.word	0x080098d2
 80063bc:	08009a27 	.word	0x08009a27

080063c0 <__multadd>:
 80063c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c4:	4607      	mov	r7, r0
 80063c6:	460c      	mov	r4, r1
 80063c8:	461e      	mov	r6, r3
 80063ca:	2000      	movs	r0, #0
 80063cc:	690d      	ldr	r5, [r1, #16]
 80063ce:	f101 0c14 	add.w	ip, r1, #20
 80063d2:	f8dc 3000 	ldr.w	r3, [ip]
 80063d6:	3001      	adds	r0, #1
 80063d8:	b299      	uxth	r1, r3
 80063da:	fb02 6101 	mla	r1, r2, r1, r6
 80063de:	0c1e      	lsrs	r6, r3, #16
 80063e0:	0c0b      	lsrs	r3, r1, #16
 80063e2:	fb02 3306 	mla	r3, r2, r6, r3
 80063e6:	b289      	uxth	r1, r1
 80063e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80063ec:	4285      	cmp	r5, r0
 80063ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80063f2:	f84c 1b04 	str.w	r1, [ip], #4
 80063f6:	dcec      	bgt.n	80063d2 <__multadd+0x12>
 80063f8:	b30e      	cbz	r6, 800643e <__multadd+0x7e>
 80063fa:	68a3      	ldr	r3, [r4, #8]
 80063fc:	42ab      	cmp	r3, r5
 80063fe:	dc19      	bgt.n	8006434 <__multadd+0x74>
 8006400:	6861      	ldr	r1, [r4, #4]
 8006402:	4638      	mov	r0, r7
 8006404:	3101      	adds	r1, #1
 8006406:	f7ff ff79 	bl	80062fc <_Balloc>
 800640a:	4680      	mov	r8, r0
 800640c:	b928      	cbnz	r0, 800641a <__multadd+0x5a>
 800640e:	4602      	mov	r2, r0
 8006410:	21ba      	movs	r1, #186	@ 0xba
 8006412:	4b0c      	ldr	r3, [pc, #48]	@ (8006444 <__multadd+0x84>)
 8006414:	480c      	ldr	r0, [pc, #48]	@ (8006448 <__multadd+0x88>)
 8006416:	f7fe fff7 	bl	8005408 <__assert_func>
 800641a:	6922      	ldr	r2, [r4, #16]
 800641c:	f104 010c 	add.w	r1, r4, #12
 8006420:	3202      	adds	r2, #2
 8006422:	0092      	lsls	r2, r2, #2
 8006424:	300c      	adds	r0, #12
 8006426:	f000 fd1f 	bl	8006e68 <memcpy>
 800642a:	4621      	mov	r1, r4
 800642c:	4638      	mov	r0, r7
 800642e:	f7ff ffa5 	bl	800637c <_Bfree>
 8006432:	4644      	mov	r4, r8
 8006434:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006438:	3501      	adds	r5, #1
 800643a:	615e      	str	r6, [r3, #20]
 800643c:	6125      	str	r5, [r4, #16]
 800643e:	4620      	mov	r0, r4
 8006440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006444:	08009a16 	.word	0x08009a16
 8006448:	08009a27 	.word	0x08009a27

0800644c <__hi0bits>:
 800644c:	4603      	mov	r3, r0
 800644e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006452:	bf3a      	itte	cc
 8006454:	0403      	lslcc	r3, r0, #16
 8006456:	2010      	movcc	r0, #16
 8006458:	2000      	movcs	r0, #0
 800645a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800645e:	bf3c      	itt	cc
 8006460:	021b      	lslcc	r3, r3, #8
 8006462:	3008      	addcc	r0, #8
 8006464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006468:	bf3c      	itt	cc
 800646a:	011b      	lslcc	r3, r3, #4
 800646c:	3004      	addcc	r0, #4
 800646e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006472:	bf3c      	itt	cc
 8006474:	009b      	lslcc	r3, r3, #2
 8006476:	3002      	addcc	r0, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	db05      	blt.n	8006488 <__hi0bits+0x3c>
 800647c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006480:	f100 0001 	add.w	r0, r0, #1
 8006484:	bf08      	it	eq
 8006486:	2020      	moveq	r0, #32
 8006488:	4770      	bx	lr

0800648a <__lo0bits>:
 800648a:	6803      	ldr	r3, [r0, #0]
 800648c:	4602      	mov	r2, r0
 800648e:	f013 0007 	ands.w	r0, r3, #7
 8006492:	d00b      	beq.n	80064ac <__lo0bits+0x22>
 8006494:	07d9      	lsls	r1, r3, #31
 8006496:	d421      	bmi.n	80064dc <__lo0bits+0x52>
 8006498:	0798      	lsls	r0, r3, #30
 800649a:	bf49      	itett	mi
 800649c:	085b      	lsrmi	r3, r3, #1
 800649e:	089b      	lsrpl	r3, r3, #2
 80064a0:	2001      	movmi	r0, #1
 80064a2:	6013      	strmi	r3, [r2, #0]
 80064a4:	bf5c      	itt	pl
 80064a6:	2002      	movpl	r0, #2
 80064a8:	6013      	strpl	r3, [r2, #0]
 80064aa:	4770      	bx	lr
 80064ac:	b299      	uxth	r1, r3
 80064ae:	b909      	cbnz	r1, 80064b4 <__lo0bits+0x2a>
 80064b0:	2010      	movs	r0, #16
 80064b2:	0c1b      	lsrs	r3, r3, #16
 80064b4:	b2d9      	uxtb	r1, r3
 80064b6:	b909      	cbnz	r1, 80064bc <__lo0bits+0x32>
 80064b8:	3008      	adds	r0, #8
 80064ba:	0a1b      	lsrs	r3, r3, #8
 80064bc:	0719      	lsls	r1, r3, #28
 80064be:	bf04      	itt	eq
 80064c0:	091b      	lsreq	r3, r3, #4
 80064c2:	3004      	addeq	r0, #4
 80064c4:	0799      	lsls	r1, r3, #30
 80064c6:	bf04      	itt	eq
 80064c8:	089b      	lsreq	r3, r3, #2
 80064ca:	3002      	addeq	r0, #2
 80064cc:	07d9      	lsls	r1, r3, #31
 80064ce:	d403      	bmi.n	80064d8 <__lo0bits+0x4e>
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	f100 0001 	add.w	r0, r0, #1
 80064d6:	d003      	beq.n	80064e0 <__lo0bits+0x56>
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	4770      	bx	lr
 80064dc:	2000      	movs	r0, #0
 80064de:	4770      	bx	lr
 80064e0:	2020      	movs	r0, #32
 80064e2:	4770      	bx	lr

080064e4 <__i2b>:
 80064e4:	b510      	push	{r4, lr}
 80064e6:	460c      	mov	r4, r1
 80064e8:	2101      	movs	r1, #1
 80064ea:	f7ff ff07 	bl	80062fc <_Balloc>
 80064ee:	4602      	mov	r2, r0
 80064f0:	b928      	cbnz	r0, 80064fe <__i2b+0x1a>
 80064f2:	f240 1145 	movw	r1, #325	@ 0x145
 80064f6:	4b04      	ldr	r3, [pc, #16]	@ (8006508 <__i2b+0x24>)
 80064f8:	4804      	ldr	r0, [pc, #16]	@ (800650c <__i2b+0x28>)
 80064fa:	f7fe ff85 	bl	8005408 <__assert_func>
 80064fe:	2301      	movs	r3, #1
 8006500:	6144      	str	r4, [r0, #20]
 8006502:	6103      	str	r3, [r0, #16]
 8006504:	bd10      	pop	{r4, pc}
 8006506:	bf00      	nop
 8006508:	08009a16 	.word	0x08009a16
 800650c:	08009a27 	.word	0x08009a27

08006510 <__multiply>:
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006514:	4617      	mov	r7, r2
 8006516:	690a      	ldr	r2, [r1, #16]
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	4689      	mov	r9, r1
 800651c:	429a      	cmp	r2, r3
 800651e:	bfa2      	ittt	ge
 8006520:	463b      	movge	r3, r7
 8006522:	460f      	movge	r7, r1
 8006524:	4699      	movge	r9, r3
 8006526:	693d      	ldr	r5, [r7, #16]
 8006528:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	6879      	ldr	r1, [r7, #4]
 8006530:	eb05 060a 	add.w	r6, r5, sl
 8006534:	42b3      	cmp	r3, r6
 8006536:	b085      	sub	sp, #20
 8006538:	bfb8      	it	lt
 800653a:	3101      	addlt	r1, #1
 800653c:	f7ff fede 	bl	80062fc <_Balloc>
 8006540:	b930      	cbnz	r0, 8006550 <__multiply+0x40>
 8006542:	4602      	mov	r2, r0
 8006544:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006548:	4b40      	ldr	r3, [pc, #256]	@ (800664c <__multiply+0x13c>)
 800654a:	4841      	ldr	r0, [pc, #260]	@ (8006650 <__multiply+0x140>)
 800654c:	f7fe ff5c 	bl	8005408 <__assert_func>
 8006550:	f100 0414 	add.w	r4, r0, #20
 8006554:	4623      	mov	r3, r4
 8006556:	2200      	movs	r2, #0
 8006558:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800655c:	4573      	cmp	r3, lr
 800655e:	d320      	bcc.n	80065a2 <__multiply+0x92>
 8006560:	f107 0814 	add.w	r8, r7, #20
 8006564:	f109 0114 	add.w	r1, r9, #20
 8006568:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800656c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006570:	9302      	str	r3, [sp, #8]
 8006572:	1beb      	subs	r3, r5, r7
 8006574:	3b15      	subs	r3, #21
 8006576:	f023 0303 	bic.w	r3, r3, #3
 800657a:	3304      	adds	r3, #4
 800657c:	3715      	adds	r7, #21
 800657e:	42bd      	cmp	r5, r7
 8006580:	bf38      	it	cc
 8006582:	2304      	movcc	r3, #4
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	9b02      	ldr	r3, [sp, #8]
 8006588:	9103      	str	r1, [sp, #12]
 800658a:	428b      	cmp	r3, r1
 800658c:	d80c      	bhi.n	80065a8 <__multiply+0x98>
 800658e:	2e00      	cmp	r6, #0
 8006590:	dd03      	ble.n	800659a <__multiply+0x8a>
 8006592:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006596:	2b00      	cmp	r3, #0
 8006598:	d055      	beq.n	8006646 <__multiply+0x136>
 800659a:	6106      	str	r6, [r0, #16]
 800659c:	b005      	add	sp, #20
 800659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a2:	f843 2b04 	str.w	r2, [r3], #4
 80065a6:	e7d9      	b.n	800655c <__multiply+0x4c>
 80065a8:	f8b1 a000 	ldrh.w	sl, [r1]
 80065ac:	f1ba 0f00 	cmp.w	sl, #0
 80065b0:	d01f      	beq.n	80065f2 <__multiply+0xe2>
 80065b2:	46c4      	mov	ip, r8
 80065b4:	46a1      	mov	r9, r4
 80065b6:	2700      	movs	r7, #0
 80065b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80065bc:	f8d9 3000 	ldr.w	r3, [r9]
 80065c0:	fa1f fb82 	uxth.w	fp, r2
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	fb0a 330b 	mla	r3, sl, fp, r3
 80065ca:	443b      	add	r3, r7
 80065cc:	f8d9 7000 	ldr.w	r7, [r9]
 80065d0:	0c12      	lsrs	r2, r2, #16
 80065d2:	0c3f      	lsrs	r7, r7, #16
 80065d4:	fb0a 7202 	mla	r2, sl, r2, r7
 80065d8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80065dc:	b29b      	uxth	r3, r3
 80065de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065e2:	4565      	cmp	r5, ip
 80065e4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80065e8:	f849 3b04 	str.w	r3, [r9], #4
 80065ec:	d8e4      	bhi.n	80065b8 <__multiply+0xa8>
 80065ee:	9b01      	ldr	r3, [sp, #4]
 80065f0:	50e7      	str	r7, [r4, r3]
 80065f2:	9b03      	ldr	r3, [sp, #12]
 80065f4:	3104      	adds	r1, #4
 80065f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80065fa:	f1b9 0f00 	cmp.w	r9, #0
 80065fe:	d020      	beq.n	8006642 <__multiply+0x132>
 8006600:	4647      	mov	r7, r8
 8006602:	46a4      	mov	ip, r4
 8006604:	f04f 0a00 	mov.w	sl, #0
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	f8b7 b000 	ldrh.w	fp, [r7]
 800660e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006612:	b29b      	uxth	r3, r3
 8006614:	fb09 220b 	mla	r2, r9, fp, r2
 8006618:	4452      	add	r2, sl
 800661a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800661e:	f84c 3b04 	str.w	r3, [ip], #4
 8006622:	f857 3b04 	ldr.w	r3, [r7], #4
 8006626:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800662a:	f8bc 3000 	ldrh.w	r3, [ip]
 800662e:	42bd      	cmp	r5, r7
 8006630:	fb09 330a 	mla	r3, r9, sl, r3
 8006634:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006638:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800663c:	d8e5      	bhi.n	800660a <__multiply+0xfa>
 800663e:	9a01      	ldr	r2, [sp, #4]
 8006640:	50a3      	str	r3, [r4, r2]
 8006642:	3404      	adds	r4, #4
 8006644:	e79f      	b.n	8006586 <__multiply+0x76>
 8006646:	3e01      	subs	r6, #1
 8006648:	e7a1      	b.n	800658e <__multiply+0x7e>
 800664a:	bf00      	nop
 800664c:	08009a16 	.word	0x08009a16
 8006650:	08009a27 	.word	0x08009a27

08006654 <__pow5mult>:
 8006654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006658:	4615      	mov	r5, r2
 800665a:	f012 0203 	ands.w	r2, r2, #3
 800665e:	4607      	mov	r7, r0
 8006660:	460e      	mov	r6, r1
 8006662:	d007      	beq.n	8006674 <__pow5mult+0x20>
 8006664:	4c25      	ldr	r4, [pc, #148]	@ (80066fc <__pow5mult+0xa8>)
 8006666:	3a01      	subs	r2, #1
 8006668:	2300      	movs	r3, #0
 800666a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800666e:	f7ff fea7 	bl	80063c0 <__multadd>
 8006672:	4606      	mov	r6, r0
 8006674:	10ad      	asrs	r5, r5, #2
 8006676:	d03d      	beq.n	80066f4 <__pow5mult+0xa0>
 8006678:	69fc      	ldr	r4, [r7, #28]
 800667a:	b97c      	cbnz	r4, 800669c <__pow5mult+0x48>
 800667c:	2010      	movs	r0, #16
 800667e:	f7ff fd87 	bl	8006190 <malloc>
 8006682:	4602      	mov	r2, r0
 8006684:	61f8      	str	r0, [r7, #28]
 8006686:	b928      	cbnz	r0, 8006694 <__pow5mult+0x40>
 8006688:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800668c:	4b1c      	ldr	r3, [pc, #112]	@ (8006700 <__pow5mult+0xac>)
 800668e:	481d      	ldr	r0, [pc, #116]	@ (8006704 <__pow5mult+0xb0>)
 8006690:	f7fe feba 	bl	8005408 <__assert_func>
 8006694:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006698:	6004      	str	r4, [r0, #0]
 800669a:	60c4      	str	r4, [r0, #12]
 800669c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80066a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066a4:	b94c      	cbnz	r4, 80066ba <__pow5mult+0x66>
 80066a6:	f240 2171 	movw	r1, #625	@ 0x271
 80066aa:	4638      	mov	r0, r7
 80066ac:	f7ff ff1a 	bl	80064e4 <__i2b>
 80066b0:	2300      	movs	r3, #0
 80066b2:	4604      	mov	r4, r0
 80066b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80066b8:	6003      	str	r3, [r0, #0]
 80066ba:	f04f 0900 	mov.w	r9, #0
 80066be:	07eb      	lsls	r3, r5, #31
 80066c0:	d50a      	bpl.n	80066d8 <__pow5mult+0x84>
 80066c2:	4631      	mov	r1, r6
 80066c4:	4622      	mov	r2, r4
 80066c6:	4638      	mov	r0, r7
 80066c8:	f7ff ff22 	bl	8006510 <__multiply>
 80066cc:	4680      	mov	r8, r0
 80066ce:	4631      	mov	r1, r6
 80066d0:	4638      	mov	r0, r7
 80066d2:	f7ff fe53 	bl	800637c <_Bfree>
 80066d6:	4646      	mov	r6, r8
 80066d8:	106d      	asrs	r5, r5, #1
 80066da:	d00b      	beq.n	80066f4 <__pow5mult+0xa0>
 80066dc:	6820      	ldr	r0, [r4, #0]
 80066de:	b938      	cbnz	r0, 80066f0 <__pow5mult+0x9c>
 80066e0:	4622      	mov	r2, r4
 80066e2:	4621      	mov	r1, r4
 80066e4:	4638      	mov	r0, r7
 80066e6:	f7ff ff13 	bl	8006510 <__multiply>
 80066ea:	6020      	str	r0, [r4, #0]
 80066ec:	f8c0 9000 	str.w	r9, [r0]
 80066f0:	4604      	mov	r4, r0
 80066f2:	e7e4      	b.n	80066be <__pow5mult+0x6a>
 80066f4:	4630      	mov	r0, r6
 80066f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066fa:	bf00      	nop
 80066fc:	08009a9c 	.word	0x08009a9c
 8006700:	080098d2 	.word	0x080098d2
 8006704:	08009a27 	.word	0x08009a27

08006708 <__lshift>:
 8006708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800670c:	460c      	mov	r4, r1
 800670e:	4607      	mov	r7, r0
 8006710:	4691      	mov	r9, r2
 8006712:	6923      	ldr	r3, [r4, #16]
 8006714:	6849      	ldr	r1, [r1, #4]
 8006716:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800671a:	68a3      	ldr	r3, [r4, #8]
 800671c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006720:	f108 0601 	add.w	r6, r8, #1
 8006724:	42b3      	cmp	r3, r6
 8006726:	db0b      	blt.n	8006740 <__lshift+0x38>
 8006728:	4638      	mov	r0, r7
 800672a:	f7ff fde7 	bl	80062fc <_Balloc>
 800672e:	4605      	mov	r5, r0
 8006730:	b948      	cbnz	r0, 8006746 <__lshift+0x3e>
 8006732:	4602      	mov	r2, r0
 8006734:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006738:	4b27      	ldr	r3, [pc, #156]	@ (80067d8 <__lshift+0xd0>)
 800673a:	4828      	ldr	r0, [pc, #160]	@ (80067dc <__lshift+0xd4>)
 800673c:	f7fe fe64 	bl	8005408 <__assert_func>
 8006740:	3101      	adds	r1, #1
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	e7ee      	b.n	8006724 <__lshift+0x1c>
 8006746:	2300      	movs	r3, #0
 8006748:	f100 0114 	add.w	r1, r0, #20
 800674c:	f100 0210 	add.w	r2, r0, #16
 8006750:	4618      	mov	r0, r3
 8006752:	4553      	cmp	r3, sl
 8006754:	db33      	blt.n	80067be <__lshift+0xb6>
 8006756:	6920      	ldr	r0, [r4, #16]
 8006758:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800675c:	f104 0314 	add.w	r3, r4, #20
 8006760:	f019 091f 	ands.w	r9, r9, #31
 8006764:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006768:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800676c:	d02b      	beq.n	80067c6 <__lshift+0xbe>
 800676e:	468a      	mov	sl, r1
 8006770:	2200      	movs	r2, #0
 8006772:	f1c9 0e20 	rsb	lr, r9, #32
 8006776:	6818      	ldr	r0, [r3, #0]
 8006778:	fa00 f009 	lsl.w	r0, r0, r9
 800677c:	4310      	orrs	r0, r2
 800677e:	f84a 0b04 	str.w	r0, [sl], #4
 8006782:	f853 2b04 	ldr.w	r2, [r3], #4
 8006786:	459c      	cmp	ip, r3
 8006788:	fa22 f20e 	lsr.w	r2, r2, lr
 800678c:	d8f3      	bhi.n	8006776 <__lshift+0x6e>
 800678e:	ebac 0304 	sub.w	r3, ip, r4
 8006792:	3b15      	subs	r3, #21
 8006794:	f023 0303 	bic.w	r3, r3, #3
 8006798:	3304      	adds	r3, #4
 800679a:	f104 0015 	add.w	r0, r4, #21
 800679e:	4560      	cmp	r0, ip
 80067a0:	bf88      	it	hi
 80067a2:	2304      	movhi	r3, #4
 80067a4:	50ca      	str	r2, [r1, r3]
 80067a6:	b10a      	cbz	r2, 80067ac <__lshift+0xa4>
 80067a8:	f108 0602 	add.w	r6, r8, #2
 80067ac:	3e01      	subs	r6, #1
 80067ae:	4638      	mov	r0, r7
 80067b0:	4621      	mov	r1, r4
 80067b2:	612e      	str	r6, [r5, #16]
 80067b4:	f7ff fde2 	bl	800637c <_Bfree>
 80067b8:	4628      	mov	r0, r5
 80067ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067be:	f842 0f04 	str.w	r0, [r2, #4]!
 80067c2:	3301      	adds	r3, #1
 80067c4:	e7c5      	b.n	8006752 <__lshift+0x4a>
 80067c6:	3904      	subs	r1, #4
 80067c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80067cc:	459c      	cmp	ip, r3
 80067ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80067d2:	d8f9      	bhi.n	80067c8 <__lshift+0xc0>
 80067d4:	e7ea      	b.n	80067ac <__lshift+0xa4>
 80067d6:	bf00      	nop
 80067d8:	08009a16 	.word	0x08009a16
 80067dc:	08009a27 	.word	0x08009a27

080067e0 <__mcmp>:
 80067e0:	4603      	mov	r3, r0
 80067e2:	690a      	ldr	r2, [r1, #16]
 80067e4:	6900      	ldr	r0, [r0, #16]
 80067e6:	b530      	push	{r4, r5, lr}
 80067e8:	1a80      	subs	r0, r0, r2
 80067ea:	d10e      	bne.n	800680a <__mcmp+0x2a>
 80067ec:	3314      	adds	r3, #20
 80067ee:	3114      	adds	r1, #20
 80067f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80067f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80067f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80067fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006800:	4295      	cmp	r5, r2
 8006802:	d003      	beq.n	800680c <__mcmp+0x2c>
 8006804:	d205      	bcs.n	8006812 <__mcmp+0x32>
 8006806:	f04f 30ff 	mov.w	r0, #4294967295
 800680a:	bd30      	pop	{r4, r5, pc}
 800680c:	42a3      	cmp	r3, r4
 800680e:	d3f3      	bcc.n	80067f8 <__mcmp+0x18>
 8006810:	e7fb      	b.n	800680a <__mcmp+0x2a>
 8006812:	2001      	movs	r0, #1
 8006814:	e7f9      	b.n	800680a <__mcmp+0x2a>
	...

08006818 <__mdiff>:
 8006818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681c:	4689      	mov	r9, r1
 800681e:	4606      	mov	r6, r0
 8006820:	4611      	mov	r1, r2
 8006822:	4648      	mov	r0, r9
 8006824:	4614      	mov	r4, r2
 8006826:	f7ff ffdb 	bl	80067e0 <__mcmp>
 800682a:	1e05      	subs	r5, r0, #0
 800682c:	d112      	bne.n	8006854 <__mdiff+0x3c>
 800682e:	4629      	mov	r1, r5
 8006830:	4630      	mov	r0, r6
 8006832:	f7ff fd63 	bl	80062fc <_Balloc>
 8006836:	4602      	mov	r2, r0
 8006838:	b928      	cbnz	r0, 8006846 <__mdiff+0x2e>
 800683a:	f240 2137 	movw	r1, #567	@ 0x237
 800683e:	4b3e      	ldr	r3, [pc, #248]	@ (8006938 <__mdiff+0x120>)
 8006840:	483e      	ldr	r0, [pc, #248]	@ (800693c <__mdiff+0x124>)
 8006842:	f7fe fde1 	bl	8005408 <__assert_func>
 8006846:	2301      	movs	r3, #1
 8006848:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800684c:	4610      	mov	r0, r2
 800684e:	b003      	add	sp, #12
 8006850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006854:	bfbc      	itt	lt
 8006856:	464b      	movlt	r3, r9
 8006858:	46a1      	movlt	r9, r4
 800685a:	4630      	mov	r0, r6
 800685c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006860:	bfba      	itte	lt
 8006862:	461c      	movlt	r4, r3
 8006864:	2501      	movlt	r5, #1
 8006866:	2500      	movge	r5, #0
 8006868:	f7ff fd48 	bl	80062fc <_Balloc>
 800686c:	4602      	mov	r2, r0
 800686e:	b918      	cbnz	r0, 8006878 <__mdiff+0x60>
 8006870:	f240 2145 	movw	r1, #581	@ 0x245
 8006874:	4b30      	ldr	r3, [pc, #192]	@ (8006938 <__mdiff+0x120>)
 8006876:	e7e3      	b.n	8006840 <__mdiff+0x28>
 8006878:	f100 0b14 	add.w	fp, r0, #20
 800687c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006880:	f109 0310 	add.w	r3, r9, #16
 8006884:	60c5      	str	r5, [r0, #12]
 8006886:	f04f 0c00 	mov.w	ip, #0
 800688a:	f109 0514 	add.w	r5, r9, #20
 800688e:	46d9      	mov	r9, fp
 8006890:	6926      	ldr	r6, [r4, #16]
 8006892:	f104 0e14 	add.w	lr, r4, #20
 8006896:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800689a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	9b01      	ldr	r3, [sp, #4]
 80068a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80068a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80068aa:	b281      	uxth	r1, r0
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	fa1f f38a 	uxth.w	r3, sl
 80068b2:	1a5b      	subs	r3, r3, r1
 80068b4:	0c00      	lsrs	r0, r0, #16
 80068b6:	4463      	add	r3, ip
 80068b8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80068bc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80068c6:	4576      	cmp	r6, lr
 80068c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80068cc:	f849 3b04 	str.w	r3, [r9], #4
 80068d0:	d8e6      	bhi.n	80068a0 <__mdiff+0x88>
 80068d2:	1b33      	subs	r3, r6, r4
 80068d4:	3b15      	subs	r3, #21
 80068d6:	f023 0303 	bic.w	r3, r3, #3
 80068da:	3415      	adds	r4, #21
 80068dc:	3304      	adds	r3, #4
 80068de:	42a6      	cmp	r6, r4
 80068e0:	bf38      	it	cc
 80068e2:	2304      	movcc	r3, #4
 80068e4:	441d      	add	r5, r3
 80068e6:	445b      	add	r3, fp
 80068e8:	461e      	mov	r6, r3
 80068ea:	462c      	mov	r4, r5
 80068ec:	4544      	cmp	r4, r8
 80068ee:	d30e      	bcc.n	800690e <__mdiff+0xf6>
 80068f0:	f108 0103 	add.w	r1, r8, #3
 80068f4:	1b49      	subs	r1, r1, r5
 80068f6:	f021 0103 	bic.w	r1, r1, #3
 80068fa:	3d03      	subs	r5, #3
 80068fc:	45a8      	cmp	r8, r5
 80068fe:	bf38      	it	cc
 8006900:	2100      	movcc	r1, #0
 8006902:	440b      	add	r3, r1
 8006904:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006908:	b199      	cbz	r1, 8006932 <__mdiff+0x11a>
 800690a:	6117      	str	r7, [r2, #16]
 800690c:	e79e      	b.n	800684c <__mdiff+0x34>
 800690e:	46e6      	mov	lr, ip
 8006910:	f854 1b04 	ldr.w	r1, [r4], #4
 8006914:	fa1f fc81 	uxth.w	ip, r1
 8006918:	44f4      	add	ip, lr
 800691a:	0c08      	lsrs	r0, r1, #16
 800691c:	4471      	add	r1, lr
 800691e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006922:	b289      	uxth	r1, r1
 8006924:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006928:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800692c:	f846 1b04 	str.w	r1, [r6], #4
 8006930:	e7dc      	b.n	80068ec <__mdiff+0xd4>
 8006932:	3f01      	subs	r7, #1
 8006934:	e7e6      	b.n	8006904 <__mdiff+0xec>
 8006936:	bf00      	nop
 8006938:	08009a16 	.word	0x08009a16
 800693c:	08009a27 	.word	0x08009a27

08006940 <__d2b>:
 8006940:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006944:	2101      	movs	r1, #1
 8006946:	4690      	mov	r8, r2
 8006948:	4699      	mov	r9, r3
 800694a:	9e08      	ldr	r6, [sp, #32]
 800694c:	f7ff fcd6 	bl	80062fc <_Balloc>
 8006950:	4604      	mov	r4, r0
 8006952:	b930      	cbnz	r0, 8006962 <__d2b+0x22>
 8006954:	4602      	mov	r2, r0
 8006956:	f240 310f 	movw	r1, #783	@ 0x30f
 800695a:	4b23      	ldr	r3, [pc, #140]	@ (80069e8 <__d2b+0xa8>)
 800695c:	4823      	ldr	r0, [pc, #140]	@ (80069ec <__d2b+0xac>)
 800695e:	f7fe fd53 	bl	8005408 <__assert_func>
 8006962:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006966:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800696a:	b10d      	cbz	r5, 8006970 <__d2b+0x30>
 800696c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006970:	9301      	str	r3, [sp, #4]
 8006972:	f1b8 0300 	subs.w	r3, r8, #0
 8006976:	d024      	beq.n	80069c2 <__d2b+0x82>
 8006978:	4668      	mov	r0, sp
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	f7ff fd85 	bl	800648a <__lo0bits>
 8006980:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006984:	b1d8      	cbz	r0, 80069be <__d2b+0x7e>
 8006986:	f1c0 0320 	rsb	r3, r0, #32
 800698a:	fa02 f303 	lsl.w	r3, r2, r3
 800698e:	430b      	orrs	r3, r1
 8006990:	40c2      	lsrs	r2, r0
 8006992:	6163      	str	r3, [r4, #20]
 8006994:	9201      	str	r2, [sp, #4]
 8006996:	9b01      	ldr	r3, [sp, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	bf0c      	ite	eq
 800699c:	2201      	moveq	r2, #1
 800699e:	2202      	movne	r2, #2
 80069a0:	61a3      	str	r3, [r4, #24]
 80069a2:	6122      	str	r2, [r4, #16]
 80069a4:	b1ad      	cbz	r5, 80069d2 <__d2b+0x92>
 80069a6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80069aa:	4405      	add	r5, r0
 80069ac:	6035      	str	r5, [r6, #0]
 80069ae:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80069b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069b4:	6018      	str	r0, [r3, #0]
 80069b6:	4620      	mov	r0, r4
 80069b8:	b002      	add	sp, #8
 80069ba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80069be:	6161      	str	r1, [r4, #20]
 80069c0:	e7e9      	b.n	8006996 <__d2b+0x56>
 80069c2:	a801      	add	r0, sp, #4
 80069c4:	f7ff fd61 	bl	800648a <__lo0bits>
 80069c8:	9b01      	ldr	r3, [sp, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	6163      	str	r3, [r4, #20]
 80069ce:	3020      	adds	r0, #32
 80069d0:	e7e7      	b.n	80069a2 <__d2b+0x62>
 80069d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80069d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80069da:	6030      	str	r0, [r6, #0]
 80069dc:	6918      	ldr	r0, [r3, #16]
 80069de:	f7ff fd35 	bl	800644c <__hi0bits>
 80069e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80069e6:	e7e4      	b.n	80069b2 <__d2b+0x72>
 80069e8:	08009a16 	.word	0x08009a16
 80069ec:	08009a27 	.word	0x08009a27

080069f0 <__ssputs_r>:
 80069f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f4:	461f      	mov	r7, r3
 80069f6:	688e      	ldr	r6, [r1, #8]
 80069f8:	4682      	mov	sl, r0
 80069fa:	42be      	cmp	r6, r7
 80069fc:	460c      	mov	r4, r1
 80069fe:	4690      	mov	r8, r2
 8006a00:	680b      	ldr	r3, [r1, #0]
 8006a02:	d82d      	bhi.n	8006a60 <__ssputs_r+0x70>
 8006a04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006a0c:	d026      	beq.n	8006a5c <__ssputs_r+0x6c>
 8006a0e:	6965      	ldr	r5, [r4, #20]
 8006a10:	6909      	ldr	r1, [r1, #16]
 8006a12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a16:	eba3 0901 	sub.w	r9, r3, r1
 8006a1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a1e:	1c7b      	adds	r3, r7, #1
 8006a20:	444b      	add	r3, r9
 8006a22:	106d      	asrs	r5, r5, #1
 8006a24:	429d      	cmp	r5, r3
 8006a26:	bf38      	it	cc
 8006a28:	461d      	movcc	r5, r3
 8006a2a:	0553      	lsls	r3, r2, #21
 8006a2c:	d527      	bpl.n	8006a7e <__ssputs_r+0x8e>
 8006a2e:	4629      	mov	r1, r5
 8006a30:	f7ff fbd8 	bl	80061e4 <_malloc_r>
 8006a34:	4606      	mov	r6, r0
 8006a36:	b360      	cbz	r0, 8006a92 <__ssputs_r+0xa2>
 8006a38:	464a      	mov	r2, r9
 8006a3a:	6921      	ldr	r1, [r4, #16]
 8006a3c:	f000 fa14 	bl	8006e68 <memcpy>
 8006a40:	89a3      	ldrh	r3, [r4, #12]
 8006a42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a4a:	81a3      	strh	r3, [r4, #12]
 8006a4c:	6126      	str	r6, [r4, #16]
 8006a4e:	444e      	add	r6, r9
 8006a50:	6026      	str	r6, [r4, #0]
 8006a52:	463e      	mov	r6, r7
 8006a54:	6165      	str	r5, [r4, #20]
 8006a56:	eba5 0509 	sub.w	r5, r5, r9
 8006a5a:	60a5      	str	r5, [r4, #8]
 8006a5c:	42be      	cmp	r6, r7
 8006a5e:	d900      	bls.n	8006a62 <__ssputs_r+0x72>
 8006a60:	463e      	mov	r6, r7
 8006a62:	4632      	mov	r2, r6
 8006a64:	4641      	mov	r1, r8
 8006a66:	6820      	ldr	r0, [r4, #0]
 8006a68:	f000 f9d4 	bl	8006e14 <memmove>
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	68a3      	ldr	r3, [r4, #8]
 8006a70:	1b9b      	subs	r3, r3, r6
 8006a72:	60a3      	str	r3, [r4, #8]
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	4433      	add	r3, r6
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7e:	462a      	mov	r2, r5
 8006a80:	f000 fa2d 	bl	8006ede <_realloc_r>
 8006a84:	4606      	mov	r6, r0
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d1e0      	bne.n	8006a4c <__ssputs_r+0x5c>
 8006a8a:	4650      	mov	r0, sl
 8006a8c:	6921      	ldr	r1, [r4, #16]
 8006a8e:	f7ff fb37 	bl	8006100 <_free_r>
 8006a92:	230c      	movs	r3, #12
 8006a94:	f8ca 3000 	str.w	r3, [sl]
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aa2:	81a3      	strh	r3, [r4, #12]
 8006aa4:	e7e9      	b.n	8006a7a <__ssputs_r+0x8a>
	...

08006aa8 <_svfiprintf_r>:
 8006aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	4698      	mov	r8, r3
 8006aae:	898b      	ldrh	r3, [r1, #12]
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	061b      	lsls	r3, r3, #24
 8006ab4:	460d      	mov	r5, r1
 8006ab6:	4614      	mov	r4, r2
 8006ab8:	b09d      	sub	sp, #116	@ 0x74
 8006aba:	d510      	bpl.n	8006ade <_svfiprintf_r+0x36>
 8006abc:	690b      	ldr	r3, [r1, #16]
 8006abe:	b973      	cbnz	r3, 8006ade <_svfiprintf_r+0x36>
 8006ac0:	2140      	movs	r1, #64	@ 0x40
 8006ac2:	f7ff fb8f 	bl	80061e4 <_malloc_r>
 8006ac6:	6028      	str	r0, [r5, #0]
 8006ac8:	6128      	str	r0, [r5, #16]
 8006aca:	b930      	cbnz	r0, 8006ada <_svfiprintf_r+0x32>
 8006acc:	230c      	movs	r3, #12
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad4:	b01d      	add	sp, #116	@ 0x74
 8006ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ada:	2340      	movs	r3, #64	@ 0x40
 8006adc:	616b      	str	r3, [r5, #20]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ae2:	2320      	movs	r3, #32
 8006ae4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ae8:	2330      	movs	r3, #48	@ 0x30
 8006aea:	f04f 0901 	mov.w	r9, #1
 8006aee:	f8cd 800c 	str.w	r8, [sp, #12]
 8006af2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006c8c <_svfiprintf_r+0x1e4>
 8006af6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006afa:	4623      	mov	r3, r4
 8006afc:	469a      	mov	sl, r3
 8006afe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b02:	b10a      	cbz	r2, 8006b08 <_svfiprintf_r+0x60>
 8006b04:	2a25      	cmp	r2, #37	@ 0x25
 8006b06:	d1f9      	bne.n	8006afc <_svfiprintf_r+0x54>
 8006b08:	ebba 0b04 	subs.w	fp, sl, r4
 8006b0c:	d00b      	beq.n	8006b26 <_svfiprintf_r+0x7e>
 8006b0e:	465b      	mov	r3, fp
 8006b10:	4622      	mov	r2, r4
 8006b12:	4629      	mov	r1, r5
 8006b14:	4638      	mov	r0, r7
 8006b16:	f7ff ff6b 	bl	80069f0 <__ssputs_r>
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	f000 80a7 	beq.w	8006c6e <_svfiprintf_r+0x1c6>
 8006b20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b22:	445a      	add	r2, fp
 8006b24:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b26:	f89a 3000 	ldrb.w	r3, [sl]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 809f 	beq.w	8006c6e <_svfiprintf_r+0x1c6>
 8006b30:	2300      	movs	r3, #0
 8006b32:	f04f 32ff 	mov.w	r2, #4294967295
 8006b36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b3a:	f10a 0a01 	add.w	sl, sl, #1
 8006b3e:	9304      	str	r3, [sp, #16]
 8006b40:	9307      	str	r3, [sp, #28]
 8006b42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b46:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b48:	4654      	mov	r4, sl
 8006b4a:	2205      	movs	r2, #5
 8006b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b50:	484e      	ldr	r0, [pc, #312]	@ (8006c8c <_svfiprintf_r+0x1e4>)
 8006b52:	f7fe fc4a 	bl	80053ea <memchr>
 8006b56:	9a04      	ldr	r2, [sp, #16]
 8006b58:	b9d8      	cbnz	r0, 8006b92 <_svfiprintf_r+0xea>
 8006b5a:	06d0      	lsls	r0, r2, #27
 8006b5c:	bf44      	itt	mi
 8006b5e:	2320      	movmi	r3, #32
 8006b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b64:	0711      	lsls	r1, r2, #28
 8006b66:	bf44      	itt	mi
 8006b68:	232b      	movmi	r3, #43	@ 0x2b
 8006b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b72:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b74:	d015      	beq.n	8006ba2 <_svfiprintf_r+0xfa>
 8006b76:	4654      	mov	r4, sl
 8006b78:	2000      	movs	r0, #0
 8006b7a:	f04f 0c0a 	mov.w	ip, #10
 8006b7e:	9a07      	ldr	r2, [sp, #28]
 8006b80:	4621      	mov	r1, r4
 8006b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b86:	3b30      	subs	r3, #48	@ 0x30
 8006b88:	2b09      	cmp	r3, #9
 8006b8a:	d94b      	bls.n	8006c24 <_svfiprintf_r+0x17c>
 8006b8c:	b1b0      	cbz	r0, 8006bbc <_svfiprintf_r+0x114>
 8006b8e:	9207      	str	r2, [sp, #28]
 8006b90:	e014      	b.n	8006bbc <_svfiprintf_r+0x114>
 8006b92:	eba0 0308 	sub.w	r3, r0, r8
 8006b96:	fa09 f303 	lsl.w	r3, r9, r3
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	46a2      	mov	sl, r4
 8006b9e:	9304      	str	r3, [sp, #16]
 8006ba0:	e7d2      	b.n	8006b48 <_svfiprintf_r+0xa0>
 8006ba2:	9b03      	ldr	r3, [sp, #12]
 8006ba4:	1d19      	adds	r1, r3, #4
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	9103      	str	r1, [sp, #12]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bfbb      	ittet	lt
 8006bae:	425b      	neglt	r3, r3
 8006bb0:	f042 0202 	orrlt.w	r2, r2, #2
 8006bb4:	9307      	strge	r3, [sp, #28]
 8006bb6:	9307      	strlt	r3, [sp, #28]
 8006bb8:	bfb8      	it	lt
 8006bba:	9204      	strlt	r2, [sp, #16]
 8006bbc:	7823      	ldrb	r3, [r4, #0]
 8006bbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bc0:	d10a      	bne.n	8006bd8 <_svfiprintf_r+0x130>
 8006bc2:	7863      	ldrb	r3, [r4, #1]
 8006bc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bc6:	d132      	bne.n	8006c2e <_svfiprintf_r+0x186>
 8006bc8:	9b03      	ldr	r3, [sp, #12]
 8006bca:	3402      	adds	r4, #2
 8006bcc:	1d1a      	adds	r2, r3, #4
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	9203      	str	r2, [sp, #12]
 8006bd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bd6:	9305      	str	r3, [sp, #20]
 8006bd8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006c90 <_svfiprintf_r+0x1e8>
 8006bdc:	2203      	movs	r2, #3
 8006bde:	4650      	mov	r0, sl
 8006be0:	7821      	ldrb	r1, [r4, #0]
 8006be2:	f7fe fc02 	bl	80053ea <memchr>
 8006be6:	b138      	cbz	r0, 8006bf8 <_svfiprintf_r+0x150>
 8006be8:	2240      	movs	r2, #64	@ 0x40
 8006bea:	9b04      	ldr	r3, [sp, #16]
 8006bec:	eba0 000a 	sub.w	r0, r0, sl
 8006bf0:	4082      	lsls	r2, r0
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	3401      	adds	r4, #1
 8006bf6:	9304      	str	r3, [sp, #16]
 8006bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bfc:	2206      	movs	r2, #6
 8006bfe:	4825      	ldr	r0, [pc, #148]	@ (8006c94 <_svfiprintf_r+0x1ec>)
 8006c00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c04:	f7fe fbf1 	bl	80053ea <memchr>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d036      	beq.n	8006c7a <_svfiprintf_r+0x1d2>
 8006c0c:	4b22      	ldr	r3, [pc, #136]	@ (8006c98 <_svfiprintf_r+0x1f0>)
 8006c0e:	bb1b      	cbnz	r3, 8006c58 <_svfiprintf_r+0x1b0>
 8006c10:	9b03      	ldr	r3, [sp, #12]
 8006c12:	3307      	adds	r3, #7
 8006c14:	f023 0307 	bic.w	r3, r3, #7
 8006c18:	3308      	adds	r3, #8
 8006c1a:	9303      	str	r3, [sp, #12]
 8006c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c1e:	4433      	add	r3, r6
 8006c20:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c22:	e76a      	b.n	8006afa <_svfiprintf_r+0x52>
 8006c24:	460c      	mov	r4, r1
 8006c26:	2001      	movs	r0, #1
 8006c28:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c2c:	e7a8      	b.n	8006b80 <_svfiprintf_r+0xd8>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f04f 0c0a 	mov.w	ip, #10
 8006c34:	4619      	mov	r1, r3
 8006c36:	3401      	adds	r4, #1
 8006c38:	9305      	str	r3, [sp, #20]
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c40:	3a30      	subs	r2, #48	@ 0x30
 8006c42:	2a09      	cmp	r2, #9
 8006c44:	d903      	bls.n	8006c4e <_svfiprintf_r+0x1a6>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0c6      	beq.n	8006bd8 <_svfiprintf_r+0x130>
 8006c4a:	9105      	str	r1, [sp, #20]
 8006c4c:	e7c4      	b.n	8006bd8 <_svfiprintf_r+0x130>
 8006c4e:	4604      	mov	r4, r0
 8006c50:	2301      	movs	r3, #1
 8006c52:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c56:	e7f0      	b.n	8006c3a <_svfiprintf_r+0x192>
 8006c58:	ab03      	add	r3, sp, #12
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	462a      	mov	r2, r5
 8006c5e:	4638      	mov	r0, r7
 8006c60:	4b0e      	ldr	r3, [pc, #56]	@ (8006c9c <_svfiprintf_r+0x1f4>)
 8006c62:	a904      	add	r1, sp, #16
 8006c64:	f7fd fe5e 	bl	8004924 <_printf_float>
 8006c68:	1c42      	adds	r2, r0, #1
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	d1d6      	bne.n	8006c1c <_svfiprintf_r+0x174>
 8006c6e:	89ab      	ldrh	r3, [r5, #12]
 8006c70:	065b      	lsls	r3, r3, #25
 8006c72:	f53f af2d 	bmi.w	8006ad0 <_svfiprintf_r+0x28>
 8006c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c78:	e72c      	b.n	8006ad4 <_svfiprintf_r+0x2c>
 8006c7a:	ab03      	add	r3, sp, #12
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	462a      	mov	r2, r5
 8006c80:	4638      	mov	r0, r7
 8006c82:	4b06      	ldr	r3, [pc, #24]	@ (8006c9c <_svfiprintf_r+0x1f4>)
 8006c84:	a904      	add	r1, sp, #16
 8006c86:	f7fe f8eb 	bl	8004e60 <_printf_i>
 8006c8a:	e7ed      	b.n	8006c68 <_svfiprintf_r+0x1c0>
 8006c8c:	08009a80 	.word	0x08009a80
 8006c90:	08009a86 	.word	0x08009a86
 8006c94:	08009a8a 	.word	0x08009a8a
 8006c98:	08004925 	.word	0x08004925
 8006c9c:	080069f1 	.word	0x080069f1

08006ca0 <__sflush_r>:
 8006ca0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca6:	0716      	lsls	r6, r2, #28
 8006ca8:	4605      	mov	r5, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	d454      	bmi.n	8006d58 <__sflush_r+0xb8>
 8006cae:	684b      	ldr	r3, [r1, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	dc02      	bgt.n	8006cba <__sflush_r+0x1a>
 8006cb4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	dd48      	ble.n	8006d4c <__sflush_r+0xac>
 8006cba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cbc:	2e00      	cmp	r6, #0
 8006cbe:	d045      	beq.n	8006d4c <__sflush_r+0xac>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006cc6:	682f      	ldr	r7, [r5, #0]
 8006cc8:	6a21      	ldr	r1, [r4, #32]
 8006cca:	602b      	str	r3, [r5, #0]
 8006ccc:	d030      	beq.n	8006d30 <__sflush_r+0x90>
 8006cce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006cd0:	89a3      	ldrh	r3, [r4, #12]
 8006cd2:	0759      	lsls	r1, r3, #29
 8006cd4:	d505      	bpl.n	8006ce2 <__sflush_r+0x42>
 8006cd6:	6863      	ldr	r3, [r4, #4]
 8006cd8:	1ad2      	subs	r2, r2, r3
 8006cda:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006cdc:	b10b      	cbz	r3, 8006ce2 <__sflush_r+0x42>
 8006cde:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ce0:	1ad2      	subs	r2, r2, r3
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ce8:	6a21      	ldr	r1, [r4, #32]
 8006cea:	47b0      	blx	r6
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	d106      	bne.n	8006d00 <__sflush_r+0x60>
 8006cf2:	6829      	ldr	r1, [r5, #0]
 8006cf4:	291d      	cmp	r1, #29
 8006cf6:	d82b      	bhi.n	8006d50 <__sflush_r+0xb0>
 8006cf8:	4a28      	ldr	r2, [pc, #160]	@ (8006d9c <__sflush_r+0xfc>)
 8006cfa:	40ca      	lsrs	r2, r1
 8006cfc:	07d6      	lsls	r6, r2, #31
 8006cfe:	d527      	bpl.n	8006d50 <__sflush_r+0xb0>
 8006d00:	2200      	movs	r2, #0
 8006d02:	6062      	str	r2, [r4, #4]
 8006d04:	6922      	ldr	r2, [r4, #16]
 8006d06:	04d9      	lsls	r1, r3, #19
 8006d08:	6022      	str	r2, [r4, #0]
 8006d0a:	d504      	bpl.n	8006d16 <__sflush_r+0x76>
 8006d0c:	1c42      	adds	r2, r0, #1
 8006d0e:	d101      	bne.n	8006d14 <__sflush_r+0x74>
 8006d10:	682b      	ldr	r3, [r5, #0]
 8006d12:	b903      	cbnz	r3, 8006d16 <__sflush_r+0x76>
 8006d14:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d16:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d18:	602f      	str	r7, [r5, #0]
 8006d1a:	b1b9      	cbz	r1, 8006d4c <__sflush_r+0xac>
 8006d1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d20:	4299      	cmp	r1, r3
 8006d22:	d002      	beq.n	8006d2a <__sflush_r+0x8a>
 8006d24:	4628      	mov	r0, r5
 8006d26:	f7ff f9eb 	bl	8006100 <_free_r>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d2e:	e00d      	b.n	8006d4c <__sflush_r+0xac>
 8006d30:	2301      	movs	r3, #1
 8006d32:	4628      	mov	r0, r5
 8006d34:	47b0      	blx	r6
 8006d36:	4602      	mov	r2, r0
 8006d38:	1c50      	adds	r0, r2, #1
 8006d3a:	d1c9      	bne.n	8006cd0 <__sflush_r+0x30>
 8006d3c:	682b      	ldr	r3, [r5, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d0c6      	beq.n	8006cd0 <__sflush_r+0x30>
 8006d42:	2b1d      	cmp	r3, #29
 8006d44:	d001      	beq.n	8006d4a <__sflush_r+0xaa>
 8006d46:	2b16      	cmp	r3, #22
 8006d48:	d11d      	bne.n	8006d86 <__sflush_r+0xe6>
 8006d4a:	602f      	str	r7, [r5, #0]
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	e021      	b.n	8006d94 <__sflush_r+0xf4>
 8006d50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d54:	b21b      	sxth	r3, r3
 8006d56:	e01a      	b.n	8006d8e <__sflush_r+0xee>
 8006d58:	690f      	ldr	r7, [r1, #16]
 8006d5a:	2f00      	cmp	r7, #0
 8006d5c:	d0f6      	beq.n	8006d4c <__sflush_r+0xac>
 8006d5e:	0793      	lsls	r3, r2, #30
 8006d60:	bf18      	it	ne
 8006d62:	2300      	movne	r3, #0
 8006d64:	680e      	ldr	r6, [r1, #0]
 8006d66:	bf08      	it	eq
 8006d68:	694b      	ldreq	r3, [r1, #20]
 8006d6a:	1bf6      	subs	r6, r6, r7
 8006d6c:	600f      	str	r7, [r1, #0]
 8006d6e:	608b      	str	r3, [r1, #8]
 8006d70:	2e00      	cmp	r6, #0
 8006d72:	ddeb      	ble.n	8006d4c <__sflush_r+0xac>
 8006d74:	4633      	mov	r3, r6
 8006d76:	463a      	mov	r2, r7
 8006d78:	4628      	mov	r0, r5
 8006d7a:	6a21      	ldr	r1, [r4, #32]
 8006d7c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006d80:	47e0      	blx	ip
 8006d82:	2800      	cmp	r0, #0
 8006d84:	dc07      	bgt.n	8006d96 <__sflush_r+0xf6>
 8006d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d92:	81a3      	strh	r3, [r4, #12]
 8006d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d96:	4407      	add	r7, r0
 8006d98:	1a36      	subs	r6, r6, r0
 8006d9a:	e7e9      	b.n	8006d70 <__sflush_r+0xd0>
 8006d9c:	20400001 	.word	0x20400001

08006da0 <_fflush_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	690b      	ldr	r3, [r1, #16]
 8006da4:	4605      	mov	r5, r0
 8006da6:	460c      	mov	r4, r1
 8006da8:	b913      	cbnz	r3, 8006db0 <_fflush_r+0x10>
 8006daa:	2500      	movs	r5, #0
 8006dac:	4628      	mov	r0, r5
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	b118      	cbz	r0, 8006dba <_fflush_r+0x1a>
 8006db2:	6a03      	ldr	r3, [r0, #32]
 8006db4:	b90b      	cbnz	r3, 8006dba <_fflush_r+0x1a>
 8006db6:	f7fe f9fd 	bl	80051b4 <__sinit>
 8006dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d0f3      	beq.n	8006daa <_fflush_r+0xa>
 8006dc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006dc4:	07d0      	lsls	r0, r2, #31
 8006dc6:	d404      	bmi.n	8006dd2 <_fflush_r+0x32>
 8006dc8:	0599      	lsls	r1, r3, #22
 8006dca:	d402      	bmi.n	8006dd2 <_fflush_r+0x32>
 8006dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dce:	f7fe fb0a 	bl	80053e6 <__retarget_lock_acquire_recursive>
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	f7ff ff63 	bl	8006ca0 <__sflush_r>
 8006dda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ddc:	4605      	mov	r5, r0
 8006dde:	07da      	lsls	r2, r3, #31
 8006de0:	d4e4      	bmi.n	8006dac <_fflush_r+0xc>
 8006de2:	89a3      	ldrh	r3, [r4, #12]
 8006de4:	059b      	lsls	r3, r3, #22
 8006de6:	d4e1      	bmi.n	8006dac <_fflush_r+0xc>
 8006de8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dea:	f7fe fafd 	bl	80053e8 <__retarget_lock_release_recursive>
 8006dee:	e7dd      	b.n	8006dac <_fflush_r+0xc>

08006df0 <fiprintf>:
 8006df0:	b40e      	push	{r1, r2, r3}
 8006df2:	b503      	push	{r0, r1, lr}
 8006df4:	4601      	mov	r1, r0
 8006df6:	ab03      	add	r3, sp, #12
 8006df8:	4805      	ldr	r0, [pc, #20]	@ (8006e10 <fiprintf+0x20>)
 8006dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dfe:	6800      	ldr	r0, [r0, #0]
 8006e00:	9301      	str	r3, [sp, #4]
 8006e02:	f000 f8cf 	bl	8006fa4 <_vfiprintf_r>
 8006e06:	b002      	add	sp, #8
 8006e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e0c:	b003      	add	sp, #12
 8006e0e:	4770      	bx	lr
 8006e10:	2000001c 	.word	0x2000001c

08006e14 <memmove>:
 8006e14:	4288      	cmp	r0, r1
 8006e16:	b510      	push	{r4, lr}
 8006e18:	eb01 0402 	add.w	r4, r1, r2
 8006e1c:	d902      	bls.n	8006e24 <memmove+0x10>
 8006e1e:	4284      	cmp	r4, r0
 8006e20:	4623      	mov	r3, r4
 8006e22:	d807      	bhi.n	8006e34 <memmove+0x20>
 8006e24:	1e43      	subs	r3, r0, #1
 8006e26:	42a1      	cmp	r1, r4
 8006e28:	d008      	beq.n	8006e3c <memmove+0x28>
 8006e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e32:	e7f8      	b.n	8006e26 <memmove+0x12>
 8006e34:	4601      	mov	r1, r0
 8006e36:	4402      	add	r2, r0
 8006e38:	428a      	cmp	r2, r1
 8006e3a:	d100      	bne.n	8006e3e <memmove+0x2a>
 8006e3c:	bd10      	pop	{r4, pc}
 8006e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e46:	e7f7      	b.n	8006e38 <memmove+0x24>

08006e48 <_sbrk_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	4d05      	ldr	r5, [pc, #20]	@ (8006e64 <_sbrk_r+0x1c>)
 8006e4e:	4604      	mov	r4, r0
 8006e50:	4608      	mov	r0, r1
 8006e52:	602b      	str	r3, [r5, #0]
 8006e54:	f7fb ff64 	bl	8002d20 <_sbrk>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	d102      	bne.n	8006e62 <_sbrk_r+0x1a>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	b103      	cbz	r3, 8006e62 <_sbrk_r+0x1a>
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	bd38      	pop	{r3, r4, r5, pc}
 8006e64:	20000400 	.word	0x20000400

08006e68 <memcpy>:
 8006e68:	440a      	add	r2, r1
 8006e6a:	4291      	cmp	r1, r2
 8006e6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e70:	d100      	bne.n	8006e74 <memcpy+0xc>
 8006e72:	4770      	bx	lr
 8006e74:	b510      	push	{r4, lr}
 8006e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e7a:	4291      	cmp	r1, r2
 8006e7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e80:	d1f9      	bne.n	8006e76 <memcpy+0xe>
 8006e82:	bd10      	pop	{r4, pc}

08006e84 <abort>:
 8006e84:	2006      	movs	r0, #6
 8006e86:	b508      	push	{r3, lr}
 8006e88:	f000 fa60 	bl	800734c <raise>
 8006e8c:	2001      	movs	r0, #1
 8006e8e:	f7fb fed2 	bl	8002c36 <_exit>

08006e92 <_calloc_r>:
 8006e92:	b570      	push	{r4, r5, r6, lr}
 8006e94:	fba1 5402 	umull	r5, r4, r1, r2
 8006e98:	b934      	cbnz	r4, 8006ea8 <_calloc_r+0x16>
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	f7ff f9a2 	bl	80061e4 <_malloc_r>
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	b928      	cbnz	r0, 8006eb0 <_calloc_r+0x1e>
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}
 8006ea8:	220c      	movs	r2, #12
 8006eaa:	2600      	movs	r6, #0
 8006eac:	6002      	str	r2, [r0, #0]
 8006eae:	e7f9      	b.n	8006ea4 <_calloc_r+0x12>
 8006eb0:	462a      	mov	r2, r5
 8006eb2:	4621      	mov	r1, r4
 8006eb4:	f7fe fa19 	bl	80052ea <memset>
 8006eb8:	e7f4      	b.n	8006ea4 <_calloc_r+0x12>

08006eba <__ascii_mbtowc>:
 8006eba:	b082      	sub	sp, #8
 8006ebc:	b901      	cbnz	r1, 8006ec0 <__ascii_mbtowc+0x6>
 8006ebe:	a901      	add	r1, sp, #4
 8006ec0:	b142      	cbz	r2, 8006ed4 <__ascii_mbtowc+0x1a>
 8006ec2:	b14b      	cbz	r3, 8006ed8 <__ascii_mbtowc+0x1e>
 8006ec4:	7813      	ldrb	r3, [r2, #0]
 8006ec6:	600b      	str	r3, [r1, #0]
 8006ec8:	7812      	ldrb	r2, [r2, #0]
 8006eca:	1e10      	subs	r0, r2, #0
 8006ecc:	bf18      	it	ne
 8006ece:	2001      	movne	r0, #1
 8006ed0:	b002      	add	sp, #8
 8006ed2:	4770      	bx	lr
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	e7fb      	b.n	8006ed0 <__ascii_mbtowc+0x16>
 8006ed8:	f06f 0001 	mvn.w	r0, #1
 8006edc:	e7f8      	b.n	8006ed0 <__ascii_mbtowc+0x16>

08006ede <_realloc_r>:
 8006ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee2:	4607      	mov	r7, r0
 8006ee4:	4614      	mov	r4, r2
 8006ee6:	460d      	mov	r5, r1
 8006ee8:	b921      	cbnz	r1, 8006ef4 <_realloc_r+0x16>
 8006eea:	4611      	mov	r1, r2
 8006eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef0:	f7ff b978 	b.w	80061e4 <_malloc_r>
 8006ef4:	b92a      	cbnz	r2, 8006f02 <_realloc_r+0x24>
 8006ef6:	f7ff f903 	bl	8006100 <_free_r>
 8006efa:	4625      	mov	r5, r4
 8006efc:	4628      	mov	r0, r5
 8006efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f02:	f000 fa3f 	bl	8007384 <_malloc_usable_size_r>
 8006f06:	4284      	cmp	r4, r0
 8006f08:	4606      	mov	r6, r0
 8006f0a:	d802      	bhi.n	8006f12 <_realloc_r+0x34>
 8006f0c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f10:	d8f4      	bhi.n	8006efc <_realloc_r+0x1e>
 8006f12:	4621      	mov	r1, r4
 8006f14:	4638      	mov	r0, r7
 8006f16:	f7ff f965 	bl	80061e4 <_malloc_r>
 8006f1a:	4680      	mov	r8, r0
 8006f1c:	b908      	cbnz	r0, 8006f22 <_realloc_r+0x44>
 8006f1e:	4645      	mov	r5, r8
 8006f20:	e7ec      	b.n	8006efc <_realloc_r+0x1e>
 8006f22:	42b4      	cmp	r4, r6
 8006f24:	4622      	mov	r2, r4
 8006f26:	4629      	mov	r1, r5
 8006f28:	bf28      	it	cs
 8006f2a:	4632      	movcs	r2, r6
 8006f2c:	f7ff ff9c 	bl	8006e68 <memcpy>
 8006f30:	4629      	mov	r1, r5
 8006f32:	4638      	mov	r0, r7
 8006f34:	f7ff f8e4 	bl	8006100 <_free_r>
 8006f38:	e7f1      	b.n	8006f1e <_realloc_r+0x40>

08006f3a <__ascii_wctomb>:
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	b141      	cbz	r1, 8006f52 <__ascii_wctomb+0x18>
 8006f40:	2aff      	cmp	r2, #255	@ 0xff
 8006f42:	d904      	bls.n	8006f4e <__ascii_wctomb+0x14>
 8006f44:	228a      	movs	r2, #138	@ 0x8a
 8006f46:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	4770      	bx	lr
 8006f4e:	2001      	movs	r0, #1
 8006f50:	700a      	strb	r2, [r1, #0]
 8006f52:	4770      	bx	lr

08006f54 <__sfputc_r>:
 8006f54:	6893      	ldr	r3, [r2, #8]
 8006f56:	b410      	push	{r4}
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	6093      	str	r3, [r2, #8]
 8006f5e:	da07      	bge.n	8006f70 <__sfputc_r+0x1c>
 8006f60:	6994      	ldr	r4, [r2, #24]
 8006f62:	42a3      	cmp	r3, r4
 8006f64:	db01      	blt.n	8006f6a <__sfputc_r+0x16>
 8006f66:	290a      	cmp	r1, #10
 8006f68:	d102      	bne.n	8006f70 <__sfputc_r+0x1c>
 8006f6a:	bc10      	pop	{r4}
 8006f6c:	f000 b932 	b.w	80071d4 <__swbuf_r>
 8006f70:	6813      	ldr	r3, [r2, #0]
 8006f72:	1c58      	adds	r0, r3, #1
 8006f74:	6010      	str	r0, [r2, #0]
 8006f76:	7019      	strb	r1, [r3, #0]
 8006f78:	4608      	mov	r0, r1
 8006f7a:	bc10      	pop	{r4}
 8006f7c:	4770      	bx	lr

08006f7e <__sfputs_r>:
 8006f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f80:	4606      	mov	r6, r0
 8006f82:	460f      	mov	r7, r1
 8006f84:	4614      	mov	r4, r2
 8006f86:	18d5      	adds	r5, r2, r3
 8006f88:	42ac      	cmp	r4, r5
 8006f8a:	d101      	bne.n	8006f90 <__sfputs_r+0x12>
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	e007      	b.n	8006fa0 <__sfputs_r+0x22>
 8006f90:	463a      	mov	r2, r7
 8006f92:	4630      	mov	r0, r6
 8006f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f98:	f7ff ffdc 	bl	8006f54 <__sfputc_r>
 8006f9c:	1c43      	adds	r3, r0, #1
 8006f9e:	d1f3      	bne.n	8006f88 <__sfputs_r+0xa>
 8006fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fa4 <_vfiprintf_r>:
 8006fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa8:	460d      	mov	r5, r1
 8006faa:	4614      	mov	r4, r2
 8006fac:	4698      	mov	r8, r3
 8006fae:	4606      	mov	r6, r0
 8006fb0:	b09d      	sub	sp, #116	@ 0x74
 8006fb2:	b118      	cbz	r0, 8006fbc <_vfiprintf_r+0x18>
 8006fb4:	6a03      	ldr	r3, [r0, #32]
 8006fb6:	b90b      	cbnz	r3, 8006fbc <_vfiprintf_r+0x18>
 8006fb8:	f7fe f8fc 	bl	80051b4 <__sinit>
 8006fbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fbe:	07d9      	lsls	r1, r3, #31
 8006fc0:	d405      	bmi.n	8006fce <_vfiprintf_r+0x2a>
 8006fc2:	89ab      	ldrh	r3, [r5, #12]
 8006fc4:	059a      	lsls	r2, r3, #22
 8006fc6:	d402      	bmi.n	8006fce <_vfiprintf_r+0x2a>
 8006fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fca:	f7fe fa0c 	bl	80053e6 <__retarget_lock_acquire_recursive>
 8006fce:	89ab      	ldrh	r3, [r5, #12]
 8006fd0:	071b      	lsls	r3, r3, #28
 8006fd2:	d501      	bpl.n	8006fd8 <_vfiprintf_r+0x34>
 8006fd4:	692b      	ldr	r3, [r5, #16]
 8006fd6:	b99b      	cbnz	r3, 8007000 <_vfiprintf_r+0x5c>
 8006fd8:	4629      	mov	r1, r5
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f000 f938 	bl	8007250 <__swsetup_r>
 8006fe0:	b170      	cbz	r0, 8007000 <_vfiprintf_r+0x5c>
 8006fe2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fe4:	07dc      	lsls	r4, r3, #31
 8006fe6:	d504      	bpl.n	8006ff2 <_vfiprintf_r+0x4e>
 8006fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fec:	b01d      	add	sp, #116	@ 0x74
 8006fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff2:	89ab      	ldrh	r3, [r5, #12]
 8006ff4:	0598      	lsls	r0, r3, #22
 8006ff6:	d4f7      	bmi.n	8006fe8 <_vfiprintf_r+0x44>
 8006ff8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ffa:	f7fe f9f5 	bl	80053e8 <__retarget_lock_release_recursive>
 8006ffe:	e7f3      	b.n	8006fe8 <_vfiprintf_r+0x44>
 8007000:	2300      	movs	r3, #0
 8007002:	9309      	str	r3, [sp, #36]	@ 0x24
 8007004:	2320      	movs	r3, #32
 8007006:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800700a:	2330      	movs	r3, #48	@ 0x30
 800700c:	f04f 0901 	mov.w	r9, #1
 8007010:	f8cd 800c 	str.w	r8, [sp, #12]
 8007014:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80071c0 <_vfiprintf_r+0x21c>
 8007018:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800701c:	4623      	mov	r3, r4
 800701e:	469a      	mov	sl, r3
 8007020:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007024:	b10a      	cbz	r2, 800702a <_vfiprintf_r+0x86>
 8007026:	2a25      	cmp	r2, #37	@ 0x25
 8007028:	d1f9      	bne.n	800701e <_vfiprintf_r+0x7a>
 800702a:	ebba 0b04 	subs.w	fp, sl, r4
 800702e:	d00b      	beq.n	8007048 <_vfiprintf_r+0xa4>
 8007030:	465b      	mov	r3, fp
 8007032:	4622      	mov	r2, r4
 8007034:	4629      	mov	r1, r5
 8007036:	4630      	mov	r0, r6
 8007038:	f7ff ffa1 	bl	8006f7e <__sfputs_r>
 800703c:	3001      	adds	r0, #1
 800703e:	f000 80a7 	beq.w	8007190 <_vfiprintf_r+0x1ec>
 8007042:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007044:	445a      	add	r2, fp
 8007046:	9209      	str	r2, [sp, #36]	@ 0x24
 8007048:	f89a 3000 	ldrb.w	r3, [sl]
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 809f 	beq.w	8007190 <_vfiprintf_r+0x1ec>
 8007052:	2300      	movs	r3, #0
 8007054:	f04f 32ff 	mov.w	r2, #4294967295
 8007058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800705c:	f10a 0a01 	add.w	sl, sl, #1
 8007060:	9304      	str	r3, [sp, #16]
 8007062:	9307      	str	r3, [sp, #28]
 8007064:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007068:	931a      	str	r3, [sp, #104]	@ 0x68
 800706a:	4654      	mov	r4, sl
 800706c:	2205      	movs	r2, #5
 800706e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007072:	4853      	ldr	r0, [pc, #332]	@ (80071c0 <_vfiprintf_r+0x21c>)
 8007074:	f7fe f9b9 	bl	80053ea <memchr>
 8007078:	9a04      	ldr	r2, [sp, #16]
 800707a:	b9d8      	cbnz	r0, 80070b4 <_vfiprintf_r+0x110>
 800707c:	06d1      	lsls	r1, r2, #27
 800707e:	bf44      	itt	mi
 8007080:	2320      	movmi	r3, #32
 8007082:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007086:	0713      	lsls	r3, r2, #28
 8007088:	bf44      	itt	mi
 800708a:	232b      	movmi	r3, #43	@ 0x2b
 800708c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007090:	f89a 3000 	ldrb.w	r3, [sl]
 8007094:	2b2a      	cmp	r3, #42	@ 0x2a
 8007096:	d015      	beq.n	80070c4 <_vfiprintf_r+0x120>
 8007098:	4654      	mov	r4, sl
 800709a:	2000      	movs	r0, #0
 800709c:	f04f 0c0a 	mov.w	ip, #10
 80070a0:	9a07      	ldr	r2, [sp, #28]
 80070a2:	4621      	mov	r1, r4
 80070a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070a8:	3b30      	subs	r3, #48	@ 0x30
 80070aa:	2b09      	cmp	r3, #9
 80070ac:	d94b      	bls.n	8007146 <_vfiprintf_r+0x1a2>
 80070ae:	b1b0      	cbz	r0, 80070de <_vfiprintf_r+0x13a>
 80070b0:	9207      	str	r2, [sp, #28]
 80070b2:	e014      	b.n	80070de <_vfiprintf_r+0x13a>
 80070b4:	eba0 0308 	sub.w	r3, r0, r8
 80070b8:	fa09 f303 	lsl.w	r3, r9, r3
 80070bc:	4313      	orrs	r3, r2
 80070be:	46a2      	mov	sl, r4
 80070c0:	9304      	str	r3, [sp, #16]
 80070c2:	e7d2      	b.n	800706a <_vfiprintf_r+0xc6>
 80070c4:	9b03      	ldr	r3, [sp, #12]
 80070c6:	1d19      	adds	r1, r3, #4
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	9103      	str	r1, [sp, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	bfbb      	ittet	lt
 80070d0:	425b      	neglt	r3, r3
 80070d2:	f042 0202 	orrlt.w	r2, r2, #2
 80070d6:	9307      	strge	r3, [sp, #28]
 80070d8:	9307      	strlt	r3, [sp, #28]
 80070da:	bfb8      	it	lt
 80070dc:	9204      	strlt	r2, [sp, #16]
 80070de:	7823      	ldrb	r3, [r4, #0]
 80070e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80070e2:	d10a      	bne.n	80070fa <_vfiprintf_r+0x156>
 80070e4:	7863      	ldrb	r3, [r4, #1]
 80070e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80070e8:	d132      	bne.n	8007150 <_vfiprintf_r+0x1ac>
 80070ea:	9b03      	ldr	r3, [sp, #12]
 80070ec:	3402      	adds	r4, #2
 80070ee:	1d1a      	adds	r2, r3, #4
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	9203      	str	r2, [sp, #12]
 80070f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80070f8:	9305      	str	r3, [sp, #20]
 80070fa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80071c4 <_vfiprintf_r+0x220>
 80070fe:	2203      	movs	r2, #3
 8007100:	4650      	mov	r0, sl
 8007102:	7821      	ldrb	r1, [r4, #0]
 8007104:	f7fe f971 	bl	80053ea <memchr>
 8007108:	b138      	cbz	r0, 800711a <_vfiprintf_r+0x176>
 800710a:	2240      	movs	r2, #64	@ 0x40
 800710c:	9b04      	ldr	r3, [sp, #16]
 800710e:	eba0 000a 	sub.w	r0, r0, sl
 8007112:	4082      	lsls	r2, r0
 8007114:	4313      	orrs	r3, r2
 8007116:	3401      	adds	r4, #1
 8007118:	9304      	str	r3, [sp, #16]
 800711a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711e:	2206      	movs	r2, #6
 8007120:	4829      	ldr	r0, [pc, #164]	@ (80071c8 <_vfiprintf_r+0x224>)
 8007122:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007126:	f7fe f960 	bl	80053ea <memchr>
 800712a:	2800      	cmp	r0, #0
 800712c:	d03f      	beq.n	80071ae <_vfiprintf_r+0x20a>
 800712e:	4b27      	ldr	r3, [pc, #156]	@ (80071cc <_vfiprintf_r+0x228>)
 8007130:	bb1b      	cbnz	r3, 800717a <_vfiprintf_r+0x1d6>
 8007132:	9b03      	ldr	r3, [sp, #12]
 8007134:	3307      	adds	r3, #7
 8007136:	f023 0307 	bic.w	r3, r3, #7
 800713a:	3308      	adds	r3, #8
 800713c:	9303      	str	r3, [sp, #12]
 800713e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007140:	443b      	add	r3, r7
 8007142:	9309      	str	r3, [sp, #36]	@ 0x24
 8007144:	e76a      	b.n	800701c <_vfiprintf_r+0x78>
 8007146:	460c      	mov	r4, r1
 8007148:	2001      	movs	r0, #1
 800714a:	fb0c 3202 	mla	r2, ip, r2, r3
 800714e:	e7a8      	b.n	80070a2 <_vfiprintf_r+0xfe>
 8007150:	2300      	movs	r3, #0
 8007152:	f04f 0c0a 	mov.w	ip, #10
 8007156:	4619      	mov	r1, r3
 8007158:	3401      	adds	r4, #1
 800715a:	9305      	str	r3, [sp, #20]
 800715c:	4620      	mov	r0, r4
 800715e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007162:	3a30      	subs	r2, #48	@ 0x30
 8007164:	2a09      	cmp	r2, #9
 8007166:	d903      	bls.n	8007170 <_vfiprintf_r+0x1cc>
 8007168:	2b00      	cmp	r3, #0
 800716a:	d0c6      	beq.n	80070fa <_vfiprintf_r+0x156>
 800716c:	9105      	str	r1, [sp, #20]
 800716e:	e7c4      	b.n	80070fa <_vfiprintf_r+0x156>
 8007170:	4604      	mov	r4, r0
 8007172:	2301      	movs	r3, #1
 8007174:	fb0c 2101 	mla	r1, ip, r1, r2
 8007178:	e7f0      	b.n	800715c <_vfiprintf_r+0x1b8>
 800717a:	ab03      	add	r3, sp, #12
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	462a      	mov	r2, r5
 8007180:	4630      	mov	r0, r6
 8007182:	4b13      	ldr	r3, [pc, #76]	@ (80071d0 <_vfiprintf_r+0x22c>)
 8007184:	a904      	add	r1, sp, #16
 8007186:	f7fd fbcd 	bl	8004924 <_printf_float>
 800718a:	4607      	mov	r7, r0
 800718c:	1c78      	adds	r0, r7, #1
 800718e:	d1d6      	bne.n	800713e <_vfiprintf_r+0x19a>
 8007190:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007192:	07d9      	lsls	r1, r3, #31
 8007194:	d405      	bmi.n	80071a2 <_vfiprintf_r+0x1fe>
 8007196:	89ab      	ldrh	r3, [r5, #12]
 8007198:	059a      	lsls	r2, r3, #22
 800719a:	d402      	bmi.n	80071a2 <_vfiprintf_r+0x1fe>
 800719c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800719e:	f7fe f923 	bl	80053e8 <__retarget_lock_release_recursive>
 80071a2:	89ab      	ldrh	r3, [r5, #12]
 80071a4:	065b      	lsls	r3, r3, #25
 80071a6:	f53f af1f 	bmi.w	8006fe8 <_vfiprintf_r+0x44>
 80071aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071ac:	e71e      	b.n	8006fec <_vfiprintf_r+0x48>
 80071ae:	ab03      	add	r3, sp, #12
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	462a      	mov	r2, r5
 80071b4:	4630      	mov	r0, r6
 80071b6:	4b06      	ldr	r3, [pc, #24]	@ (80071d0 <_vfiprintf_r+0x22c>)
 80071b8:	a904      	add	r1, sp, #16
 80071ba:	f7fd fe51 	bl	8004e60 <_printf_i>
 80071be:	e7e4      	b.n	800718a <_vfiprintf_r+0x1e6>
 80071c0:	08009a80 	.word	0x08009a80
 80071c4:	08009a86 	.word	0x08009a86
 80071c8:	08009a8a 	.word	0x08009a8a
 80071cc:	08004925 	.word	0x08004925
 80071d0:	08006f7f 	.word	0x08006f7f

080071d4 <__swbuf_r>:
 80071d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d6:	460e      	mov	r6, r1
 80071d8:	4614      	mov	r4, r2
 80071da:	4605      	mov	r5, r0
 80071dc:	b118      	cbz	r0, 80071e6 <__swbuf_r+0x12>
 80071de:	6a03      	ldr	r3, [r0, #32]
 80071e0:	b90b      	cbnz	r3, 80071e6 <__swbuf_r+0x12>
 80071e2:	f7fd ffe7 	bl	80051b4 <__sinit>
 80071e6:	69a3      	ldr	r3, [r4, #24]
 80071e8:	60a3      	str	r3, [r4, #8]
 80071ea:	89a3      	ldrh	r3, [r4, #12]
 80071ec:	071a      	lsls	r2, r3, #28
 80071ee:	d501      	bpl.n	80071f4 <__swbuf_r+0x20>
 80071f0:	6923      	ldr	r3, [r4, #16]
 80071f2:	b943      	cbnz	r3, 8007206 <__swbuf_r+0x32>
 80071f4:	4621      	mov	r1, r4
 80071f6:	4628      	mov	r0, r5
 80071f8:	f000 f82a 	bl	8007250 <__swsetup_r>
 80071fc:	b118      	cbz	r0, 8007206 <__swbuf_r+0x32>
 80071fe:	f04f 37ff 	mov.w	r7, #4294967295
 8007202:	4638      	mov	r0, r7
 8007204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	6922      	ldr	r2, [r4, #16]
 800720a:	b2f6      	uxtb	r6, r6
 800720c:	1a98      	subs	r0, r3, r2
 800720e:	6963      	ldr	r3, [r4, #20]
 8007210:	4637      	mov	r7, r6
 8007212:	4283      	cmp	r3, r0
 8007214:	dc05      	bgt.n	8007222 <__swbuf_r+0x4e>
 8007216:	4621      	mov	r1, r4
 8007218:	4628      	mov	r0, r5
 800721a:	f7ff fdc1 	bl	8006da0 <_fflush_r>
 800721e:	2800      	cmp	r0, #0
 8007220:	d1ed      	bne.n	80071fe <__swbuf_r+0x2a>
 8007222:	68a3      	ldr	r3, [r4, #8]
 8007224:	3b01      	subs	r3, #1
 8007226:	60a3      	str	r3, [r4, #8]
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	6022      	str	r2, [r4, #0]
 800722e:	701e      	strb	r6, [r3, #0]
 8007230:	6962      	ldr	r2, [r4, #20]
 8007232:	1c43      	adds	r3, r0, #1
 8007234:	429a      	cmp	r2, r3
 8007236:	d004      	beq.n	8007242 <__swbuf_r+0x6e>
 8007238:	89a3      	ldrh	r3, [r4, #12]
 800723a:	07db      	lsls	r3, r3, #31
 800723c:	d5e1      	bpl.n	8007202 <__swbuf_r+0x2e>
 800723e:	2e0a      	cmp	r6, #10
 8007240:	d1df      	bne.n	8007202 <__swbuf_r+0x2e>
 8007242:	4621      	mov	r1, r4
 8007244:	4628      	mov	r0, r5
 8007246:	f7ff fdab 	bl	8006da0 <_fflush_r>
 800724a:	2800      	cmp	r0, #0
 800724c:	d0d9      	beq.n	8007202 <__swbuf_r+0x2e>
 800724e:	e7d6      	b.n	80071fe <__swbuf_r+0x2a>

08007250 <__swsetup_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	4b29      	ldr	r3, [pc, #164]	@ (80072f8 <__swsetup_r+0xa8>)
 8007254:	4605      	mov	r5, r0
 8007256:	6818      	ldr	r0, [r3, #0]
 8007258:	460c      	mov	r4, r1
 800725a:	b118      	cbz	r0, 8007264 <__swsetup_r+0x14>
 800725c:	6a03      	ldr	r3, [r0, #32]
 800725e:	b90b      	cbnz	r3, 8007264 <__swsetup_r+0x14>
 8007260:	f7fd ffa8 	bl	80051b4 <__sinit>
 8007264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007268:	0719      	lsls	r1, r3, #28
 800726a:	d422      	bmi.n	80072b2 <__swsetup_r+0x62>
 800726c:	06da      	lsls	r2, r3, #27
 800726e:	d407      	bmi.n	8007280 <__swsetup_r+0x30>
 8007270:	2209      	movs	r2, #9
 8007272:	602a      	str	r2, [r5, #0]
 8007274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007278:	f04f 30ff 	mov.w	r0, #4294967295
 800727c:	81a3      	strh	r3, [r4, #12]
 800727e:	e033      	b.n	80072e8 <__swsetup_r+0x98>
 8007280:	0758      	lsls	r0, r3, #29
 8007282:	d512      	bpl.n	80072aa <__swsetup_r+0x5a>
 8007284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007286:	b141      	cbz	r1, 800729a <__swsetup_r+0x4a>
 8007288:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800728c:	4299      	cmp	r1, r3
 800728e:	d002      	beq.n	8007296 <__swsetup_r+0x46>
 8007290:	4628      	mov	r0, r5
 8007292:	f7fe ff35 	bl	8006100 <_free_r>
 8007296:	2300      	movs	r3, #0
 8007298:	6363      	str	r3, [r4, #52]	@ 0x34
 800729a:	89a3      	ldrh	r3, [r4, #12]
 800729c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80072a0:	81a3      	strh	r3, [r4, #12]
 80072a2:	2300      	movs	r3, #0
 80072a4:	6063      	str	r3, [r4, #4]
 80072a6:	6923      	ldr	r3, [r4, #16]
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	f043 0308 	orr.w	r3, r3, #8
 80072b0:	81a3      	strh	r3, [r4, #12]
 80072b2:	6923      	ldr	r3, [r4, #16]
 80072b4:	b94b      	cbnz	r3, 80072ca <__swsetup_r+0x7a>
 80072b6:	89a3      	ldrh	r3, [r4, #12]
 80072b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80072bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072c0:	d003      	beq.n	80072ca <__swsetup_r+0x7a>
 80072c2:	4621      	mov	r1, r4
 80072c4:	4628      	mov	r0, r5
 80072c6:	f000 f88a 	bl	80073de <__smakebuf_r>
 80072ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ce:	f013 0201 	ands.w	r2, r3, #1
 80072d2:	d00a      	beq.n	80072ea <__swsetup_r+0x9a>
 80072d4:	2200      	movs	r2, #0
 80072d6:	60a2      	str	r2, [r4, #8]
 80072d8:	6962      	ldr	r2, [r4, #20]
 80072da:	4252      	negs	r2, r2
 80072dc:	61a2      	str	r2, [r4, #24]
 80072de:	6922      	ldr	r2, [r4, #16]
 80072e0:	b942      	cbnz	r2, 80072f4 <__swsetup_r+0xa4>
 80072e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80072e6:	d1c5      	bne.n	8007274 <__swsetup_r+0x24>
 80072e8:	bd38      	pop	{r3, r4, r5, pc}
 80072ea:	0799      	lsls	r1, r3, #30
 80072ec:	bf58      	it	pl
 80072ee:	6962      	ldrpl	r2, [r4, #20]
 80072f0:	60a2      	str	r2, [r4, #8]
 80072f2:	e7f4      	b.n	80072de <__swsetup_r+0x8e>
 80072f4:	2000      	movs	r0, #0
 80072f6:	e7f7      	b.n	80072e8 <__swsetup_r+0x98>
 80072f8:	2000001c 	.word	0x2000001c

080072fc <_raise_r>:
 80072fc:	291f      	cmp	r1, #31
 80072fe:	b538      	push	{r3, r4, r5, lr}
 8007300:	4605      	mov	r5, r0
 8007302:	460c      	mov	r4, r1
 8007304:	d904      	bls.n	8007310 <_raise_r+0x14>
 8007306:	2316      	movs	r3, #22
 8007308:	6003      	str	r3, [r0, #0]
 800730a:	f04f 30ff 	mov.w	r0, #4294967295
 800730e:	bd38      	pop	{r3, r4, r5, pc}
 8007310:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007312:	b112      	cbz	r2, 800731a <_raise_r+0x1e>
 8007314:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007318:	b94b      	cbnz	r3, 800732e <_raise_r+0x32>
 800731a:	4628      	mov	r0, r5
 800731c:	f000 f830 	bl	8007380 <_getpid_r>
 8007320:	4622      	mov	r2, r4
 8007322:	4601      	mov	r1, r0
 8007324:	4628      	mov	r0, r5
 8007326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800732a:	f000 b817 	b.w	800735c <_kill_r>
 800732e:	2b01      	cmp	r3, #1
 8007330:	d00a      	beq.n	8007348 <_raise_r+0x4c>
 8007332:	1c59      	adds	r1, r3, #1
 8007334:	d103      	bne.n	800733e <_raise_r+0x42>
 8007336:	2316      	movs	r3, #22
 8007338:	6003      	str	r3, [r0, #0]
 800733a:	2001      	movs	r0, #1
 800733c:	e7e7      	b.n	800730e <_raise_r+0x12>
 800733e:	2100      	movs	r1, #0
 8007340:	4620      	mov	r0, r4
 8007342:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007346:	4798      	blx	r3
 8007348:	2000      	movs	r0, #0
 800734a:	e7e0      	b.n	800730e <_raise_r+0x12>

0800734c <raise>:
 800734c:	4b02      	ldr	r3, [pc, #8]	@ (8007358 <raise+0xc>)
 800734e:	4601      	mov	r1, r0
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	f7ff bfd3 	b.w	80072fc <_raise_r>
 8007356:	bf00      	nop
 8007358:	2000001c 	.word	0x2000001c

0800735c <_kill_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	2300      	movs	r3, #0
 8007360:	4d06      	ldr	r5, [pc, #24]	@ (800737c <_kill_r+0x20>)
 8007362:	4604      	mov	r4, r0
 8007364:	4608      	mov	r0, r1
 8007366:	4611      	mov	r1, r2
 8007368:	602b      	str	r3, [r5, #0]
 800736a:	f7fb fc54 	bl	8002c16 <_kill>
 800736e:	1c43      	adds	r3, r0, #1
 8007370:	d102      	bne.n	8007378 <_kill_r+0x1c>
 8007372:	682b      	ldr	r3, [r5, #0]
 8007374:	b103      	cbz	r3, 8007378 <_kill_r+0x1c>
 8007376:	6023      	str	r3, [r4, #0]
 8007378:	bd38      	pop	{r3, r4, r5, pc}
 800737a:	bf00      	nop
 800737c:	20000400 	.word	0x20000400

08007380 <_getpid_r>:
 8007380:	f7fb bc42 	b.w	8002c08 <_getpid>

08007384 <_malloc_usable_size_r>:
 8007384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007388:	1f18      	subs	r0, r3, #4
 800738a:	2b00      	cmp	r3, #0
 800738c:	bfbc      	itt	lt
 800738e:	580b      	ldrlt	r3, [r1, r0]
 8007390:	18c0      	addlt	r0, r0, r3
 8007392:	4770      	bx	lr

08007394 <__swhatbuf_r>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	460c      	mov	r4, r1
 8007398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800739c:	4615      	mov	r5, r2
 800739e:	2900      	cmp	r1, #0
 80073a0:	461e      	mov	r6, r3
 80073a2:	b096      	sub	sp, #88	@ 0x58
 80073a4:	da0c      	bge.n	80073c0 <__swhatbuf_r+0x2c>
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	2100      	movs	r1, #0
 80073aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80073ae:	bf14      	ite	ne
 80073b0:	2340      	movne	r3, #64	@ 0x40
 80073b2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80073b6:	2000      	movs	r0, #0
 80073b8:	6031      	str	r1, [r6, #0]
 80073ba:	602b      	str	r3, [r5, #0]
 80073bc:	b016      	add	sp, #88	@ 0x58
 80073be:	bd70      	pop	{r4, r5, r6, pc}
 80073c0:	466a      	mov	r2, sp
 80073c2:	f000 f849 	bl	8007458 <_fstat_r>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	dbed      	blt.n	80073a6 <__swhatbuf_r+0x12>
 80073ca:	9901      	ldr	r1, [sp, #4]
 80073cc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80073d0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80073d4:	4259      	negs	r1, r3
 80073d6:	4159      	adcs	r1, r3
 80073d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073dc:	e7eb      	b.n	80073b6 <__swhatbuf_r+0x22>

080073de <__smakebuf_r>:
 80073de:	898b      	ldrh	r3, [r1, #12]
 80073e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073e2:	079d      	lsls	r5, r3, #30
 80073e4:	4606      	mov	r6, r0
 80073e6:	460c      	mov	r4, r1
 80073e8:	d507      	bpl.n	80073fa <__smakebuf_r+0x1c>
 80073ea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80073ee:	6023      	str	r3, [r4, #0]
 80073f0:	6123      	str	r3, [r4, #16]
 80073f2:	2301      	movs	r3, #1
 80073f4:	6163      	str	r3, [r4, #20]
 80073f6:	b003      	add	sp, #12
 80073f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073fa:	466a      	mov	r2, sp
 80073fc:	ab01      	add	r3, sp, #4
 80073fe:	f7ff ffc9 	bl	8007394 <__swhatbuf_r>
 8007402:	9f00      	ldr	r7, [sp, #0]
 8007404:	4605      	mov	r5, r0
 8007406:	4639      	mov	r1, r7
 8007408:	4630      	mov	r0, r6
 800740a:	f7fe feeb 	bl	80061e4 <_malloc_r>
 800740e:	b948      	cbnz	r0, 8007424 <__smakebuf_r+0x46>
 8007410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007414:	059a      	lsls	r2, r3, #22
 8007416:	d4ee      	bmi.n	80073f6 <__smakebuf_r+0x18>
 8007418:	f023 0303 	bic.w	r3, r3, #3
 800741c:	f043 0302 	orr.w	r3, r3, #2
 8007420:	81a3      	strh	r3, [r4, #12]
 8007422:	e7e2      	b.n	80073ea <__smakebuf_r+0xc>
 8007424:	89a3      	ldrh	r3, [r4, #12]
 8007426:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800742a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800742e:	81a3      	strh	r3, [r4, #12]
 8007430:	9b01      	ldr	r3, [sp, #4]
 8007432:	6020      	str	r0, [r4, #0]
 8007434:	b15b      	cbz	r3, 800744e <__smakebuf_r+0x70>
 8007436:	4630      	mov	r0, r6
 8007438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800743c:	f000 f81e 	bl	800747c <_isatty_r>
 8007440:	b128      	cbz	r0, 800744e <__smakebuf_r+0x70>
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	f023 0303 	bic.w	r3, r3, #3
 8007448:	f043 0301 	orr.w	r3, r3, #1
 800744c:	81a3      	strh	r3, [r4, #12]
 800744e:	89a3      	ldrh	r3, [r4, #12]
 8007450:	431d      	orrs	r5, r3
 8007452:	81a5      	strh	r5, [r4, #12]
 8007454:	e7cf      	b.n	80073f6 <__smakebuf_r+0x18>
	...

08007458 <_fstat_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	2300      	movs	r3, #0
 800745c:	4d06      	ldr	r5, [pc, #24]	@ (8007478 <_fstat_r+0x20>)
 800745e:	4604      	mov	r4, r0
 8007460:	4608      	mov	r0, r1
 8007462:	4611      	mov	r1, r2
 8007464:	602b      	str	r3, [r5, #0]
 8007466:	f7fb fc35 	bl	8002cd4 <_fstat>
 800746a:	1c43      	adds	r3, r0, #1
 800746c:	d102      	bne.n	8007474 <_fstat_r+0x1c>
 800746e:	682b      	ldr	r3, [r5, #0]
 8007470:	b103      	cbz	r3, 8007474 <_fstat_r+0x1c>
 8007472:	6023      	str	r3, [r4, #0]
 8007474:	bd38      	pop	{r3, r4, r5, pc}
 8007476:	bf00      	nop
 8007478:	20000400 	.word	0x20000400

0800747c <_isatty_r>:
 800747c:	b538      	push	{r3, r4, r5, lr}
 800747e:	2300      	movs	r3, #0
 8007480:	4d05      	ldr	r5, [pc, #20]	@ (8007498 <_isatty_r+0x1c>)
 8007482:	4604      	mov	r4, r0
 8007484:	4608      	mov	r0, r1
 8007486:	602b      	str	r3, [r5, #0]
 8007488:	f7fb fc33 	bl	8002cf2 <_isatty>
 800748c:	1c43      	adds	r3, r0, #1
 800748e:	d102      	bne.n	8007496 <_isatty_r+0x1a>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	b103      	cbz	r3, 8007496 <_isatty_r+0x1a>
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	20000400 	.word	0x20000400

0800749c <_init>:
 800749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749e:	bf00      	nop
 80074a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a2:	bc08      	pop	{r3}
 80074a4:	469e      	mov	lr, r3
 80074a6:	4770      	bx	lr

080074a8 <_fini>:
 80074a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074aa:	bf00      	nop
 80074ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ae:	bc08      	pop	{r3}
 80074b0:	469e      	mov	lr, r3
 80074b2:	4770      	bx	lr
