
DAC_Oscillator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e28  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004fb0  08004fb0  00005fb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a0  080051a0  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080051a0  080051a0  000061a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051a8  080051a8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a8  080051a8  000061a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051ac  080051ac  000061ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080051b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          000004a4  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004b0  200004b0  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a817  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cdd  00000000  00000000  00011853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b88  00000000  00000000  00013530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008dd  00000000  00000000  000140b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d7e  00000000  00000000  00014995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb85  00000000  00000000  00035713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca40c  00000000  00000000  00042298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c6a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003404  00000000  00000000  0010c6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0010faec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f98 	.word	0x08004f98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004f98 	.word	0x08004f98

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b988 	b.w	8000e2c <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	468e      	mov	lr, r1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	4688      	mov	r8, r1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d14a      	bne.n	8000bda <__udivmoddi4+0xa6>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d962      	bls.n	8000c10 <__udivmoddi4+0xdc>
 8000b4a:	fab2 f682 	clz	r6, r2
 8000b4e:	b14e      	cbz	r6, 8000b64 <__udivmoddi4+0x30>
 8000b50:	f1c6 0320 	rsb	r3, r6, #32
 8000b54:	fa01 f806 	lsl.w	r8, r1, r6
 8000b58:	fa20 f303 	lsr.w	r3, r0, r3
 8000b5c:	40b7      	lsls	r7, r6
 8000b5e:	ea43 0808 	orr.w	r8, r3, r8
 8000b62:	40b4      	lsls	r4, r6
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	fa1f fc87 	uxth.w	ip, r7
 8000b6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b70:	0c23      	lsrs	r3, r4, #16
 8000b72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d909      	bls.n	8000b96 <__udivmoddi4+0x62>
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b88:	f080 80ea 	bcs.w	8000d60 <__udivmoddi4+0x22c>
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	f240 80e7 	bls.w	8000d60 <__udivmoddi4+0x22c>
 8000b92:	3902      	subs	r1, #2
 8000b94:	443b      	add	r3, r7
 8000b96:	1a9a      	subs	r2, r3, r2
 8000b98:	b2a3      	uxth	r3, r4
 8000b9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ba2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ba6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000baa:	459c      	cmp	ip, r3
 8000bac:	d909      	bls.n	8000bc2 <__udivmoddi4+0x8e>
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bb4:	f080 80d6 	bcs.w	8000d64 <__udivmoddi4+0x230>
 8000bb8:	459c      	cmp	ip, r3
 8000bba:	f240 80d3 	bls.w	8000d64 <__udivmoddi4+0x230>
 8000bbe:	443b      	add	r3, r7
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc6:	eba3 030c 	sub.w	r3, r3, ip
 8000bca:	2100      	movs	r1, #0
 8000bcc:	b11d      	cbz	r5, 8000bd6 <__udivmoddi4+0xa2>
 8000bce:	40f3      	lsrs	r3, r6
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d905      	bls.n	8000bea <__udivmoddi4+0xb6>
 8000bde:	b10d      	cbz	r5, 8000be4 <__udivmoddi4+0xb0>
 8000be0:	e9c5 0100 	strd	r0, r1, [r5]
 8000be4:	2100      	movs	r1, #0
 8000be6:	4608      	mov	r0, r1
 8000be8:	e7f5      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000bea:	fab3 f183 	clz	r1, r3
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d146      	bne.n	8000c80 <__udivmoddi4+0x14c>
 8000bf2:	4573      	cmp	r3, lr
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xc8>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 8105 	bhi.w	8000e06 <__udivmoddi4+0x2d2>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4690      	mov	r8, r2
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d0e5      	beq.n	8000bd6 <__udivmoddi4+0xa2>
 8000c0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c0e:	e7e2      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	f000 8090 	beq.w	8000d36 <__udivmoddi4+0x202>
 8000c16:	fab2 f682 	clz	r6, r2
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f040 80a4 	bne.w	8000d68 <__udivmoddi4+0x234>
 8000c20:	1a8a      	subs	r2, r1, r2
 8000c22:	0c03      	lsrs	r3, r0, #16
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	b280      	uxth	r0, r0
 8000c2a:	b2bc      	uxth	r4, r7
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x11e>
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x11c>
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	f200 80e0 	bhi.w	8000e10 <__udivmoddi4+0x2dc>
 8000c50:	46c4      	mov	ip, r8
 8000c52:	1a9b      	subs	r3, r3, r2
 8000c54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c60:	fb02 f404 	mul.w	r4, r2, r4
 8000c64:	429c      	cmp	r4, r3
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x144>
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x142>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f200 80ca 	bhi.w	8000e0a <__udivmoddi4+0x2d6>
 8000c76:	4602      	mov	r2, r0
 8000c78:	1b1b      	subs	r3, r3, r4
 8000c7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c7e:	e7a5      	b.n	8000bcc <__udivmoddi4+0x98>
 8000c80:	f1c1 0620 	rsb	r6, r1, #32
 8000c84:	408b      	lsls	r3, r1
 8000c86:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8a:	431f      	orrs	r7, r3
 8000c8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c90:	fa20 f306 	lsr.w	r3, r0, r6
 8000c94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c9c:	4323      	orrs	r3, r4
 8000c9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ca2:	fa1f fc87 	uxth.w	ip, r7
 8000ca6:	fbbe f0f9 	udiv	r0, lr, r9
 8000caa:	0c1c      	lsrs	r4, r3, #16
 8000cac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	d909      	bls.n	8000cd4 <__udivmoddi4+0x1a0>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cc6:	f080 809c 	bcs.w	8000e02 <__udivmoddi4+0x2ce>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f240 8099 	bls.w	8000e02 <__udivmoddi4+0x2ce>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	443c      	add	r4, r7
 8000cd4:	eba4 040e 	sub.w	r4, r4, lr
 8000cd8:	fa1f fe83 	uxth.w	lr, r3
 8000cdc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x1ce>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cf6:	f080 8082 	bcs.w	8000dfe <__udivmoddi4+0x2ca>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d97f      	bls.n	8000dfe <__udivmoddi4+0x2ca>
 8000cfe:	3b02      	subs	r3, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d06:	eba4 040c 	sub.w	r4, r4, ip
 8000d0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d0e:	4564      	cmp	r4, ip
 8000d10:	4673      	mov	r3, lr
 8000d12:	46e1      	mov	r9, ip
 8000d14:	d362      	bcc.n	8000ddc <__udivmoddi4+0x2a8>
 8000d16:	d05f      	beq.n	8000dd8 <__udivmoddi4+0x2a4>
 8000d18:	b15d      	cbz	r5, 8000d32 <__udivmoddi4+0x1fe>
 8000d1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d22:	fa04 f606 	lsl.w	r6, r4, r6
 8000d26:	fa22 f301 	lsr.w	r3, r2, r1
 8000d2a:	431e      	orrs	r6, r3
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d32:	2100      	movs	r1, #0
 8000d34:	e74f      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000d36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d3a:	0c01      	lsrs	r1, r0, #16
 8000d3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d40:	b280      	uxth	r0, r0
 8000d42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d46:	463b      	mov	r3, r7
 8000d48:	4638      	mov	r0, r7
 8000d4a:	463c      	mov	r4, r7
 8000d4c:	46b8      	mov	r8, r7
 8000d4e:	46be      	mov	lr, r7
 8000d50:	2620      	movs	r6, #32
 8000d52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d56:	eba2 0208 	sub.w	r2, r2, r8
 8000d5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d5e:	e766      	b.n	8000c2e <__udivmoddi4+0xfa>
 8000d60:	4601      	mov	r1, r0
 8000d62:	e718      	b.n	8000b96 <__udivmoddi4+0x62>
 8000d64:	4610      	mov	r0, r2
 8000d66:	e72c      	b.n	8000bc2 <__udivmoddi4+0x8e>
 8000d68:	f1c6 0220 	rsb	r2, r6, #32
 8000d6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000d70:	40b7      	lsls	r7, r6
 8000d72:	40b1      	lsls	r1, r6
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d82:	b2bc      	uxth	r4, r7
 8000d84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d88:	0c11      	lsrs	r1, r2, #16
 8000d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8e:	fb08 f904 	mul.w	r9, r8, r4
 8000d92:	40b0      	lsls	r0, r6
 8000d94:	4589      	cmp	r9, r1
 8000d96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d9a:	b280      	uxth	r0, r0
 8000d9c:	d93e      	bls.n	8000e1c <__udivmoddi4+0x2e8>
 8000d9e:	1879      	adds	r1, r7, r1
 8000da0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000da4:	d201      	bcs.n	8000daa <__udivmoddi4+0x276>
 8000da6:	4589      	cmp	r9, r1
 8000da8:	d81f      	bhi.n	8000dea <__udivmoddi4+0x2b6>
 8000daa:	eba1 0109 	sub.w	r1, r1, r9
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fb09 f804 	mul.w	r8, r9, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	b292      	uxth	r2, r2
 8000dbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dc0:	4542      	cmp	r2, r8
 8000dc2:	d229      	bcs.n	8000e18 <__udivmoddi4+0x2e4>
 8000dc4:	18ba      	adds	r2, r7, r2
 8000dc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000dca:	d2c4      	bcs.n	8000d56 <__udivmoddi4+0x222>
 8000dcc:	4542      	cmp	r2, r8
 8000dce:	d2c2      	bcs.n	8000d56 <__udivmoddi4+0x222>
 8000dd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000dd4:	443a      	add	r2, r7
 8000dd6:	e7be      	b.n	8000d56 <__udivmoddi4+0x222>
 8000dd8:	45f0      	cmp	r8, lr
 8000dda:	d29d      	bcs.n	8000d18 <__udivmoddi4+0x1e4>
 8000ddc:	ebbe 0302 	subs.w	r3, lr, r2
 8000de0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000de4:	3801      	subs	r0, #1
 8000de6:	46e1      	mov	r9, ip
 8000de8:	e796      	b.n	8000d18 <__udivmoddi4+0x1e4>
 8000dea:	eba7 0909 	sub.w	r9, r7, r9
 8000dee:	4449      	add	r1, r9
 8000df0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000df4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df8:	fb09 f804 	mul.w	r8, r9, r4
 8000dfc:	e7db      	b.n	8000db6 <__udivmoddi4+0x282>
 8000dfe:	4673      	mov	r3, lr
 8000e00:	e77f      	b.n	8000d02 <__udivmoddi4+0x1ce>
 8000e02:	4650      	mov	r0, sl
 8000e04:	e766      	b.n	8000cd4 <__udivmoddi4+0x1a0>
 8000e06:	4608      	mov	r0, r1
 8000e08:	e6fd      	b.n	8000c06 <__udivmoddi4+0xd2>
 8000e0a:	443b      	add	r3, r7
 8000e0c:	3a02      	subs	r2, #2
 8000e0e:	e733      	b.n	8000c78 <__udivmoddi4+0x144>
 8000e10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e14:	443b      	add	r3, r7
 8000e16:	e71c      	b.n	8000c52 <__udivmoddi4+0x11e>
 8000e18:	4649      	mov	r1, r9
 8000e1a:	e79c      	b.n	8000d56 <__udivmoddi4+0x222>
 8000e1c:	eba1 0109 	sub.w	r1, r1, r9
 8000e20:	46c4      	mov	ip, r8
 8000e22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e26:	fb09 f804 	mul.w	r8, r9, r4
 8000e2a:	e7c4      	b.n	8000db6 <__udivmoddi4+0x282>

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <calcsin>:
/* USER CODE BEGIN 0 */
uint16_t sinwave[SAMPLE] = {0};
uint16_t triwave[SAMPLE] = {0};

void calcsin()
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
	for (int i=0; i < SAMPLE; i++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	e03b      	b.n	8000eb4 <calcsin+0x84>
	{
		sinwave[i] = ((sin((i*2*PI)/SAMPLE) + 1)*(4096/2));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fb13 	bl	800046c <__aeabi_i2d>
 8000e46:	a324      	add	r3, pc, #144	@ (adr r3, 8000ed8 <calcsin+0xa8>)
 8000e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4c:	f7ff fb78 	bl	8000540 <__aeabi_dmul>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	4610      	mov	r0, r2
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 0200 	mov.w	r2, #0
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <calcsin+0x98>)
 8000e5e:	f7ff fc99 	bl	8000794 <__aeabi_ddiv>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	ec43 2b17 	vmov	d7, r2, r3
 8000e6a:	eeb0 0a47 	vmov.f32	s0, s14
 8000e6e:	eef0 0a67 	vmov.f32	s1, s15
 8000e72:	f003 f86d 	bl	8003f50 <sin>
 8000e76:	ec51 0b10 	vmov	r0, r1, d0
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <calcsin+0x9c>)
 8000e80:	f7ff f9a8 	bl	80001d4 <__adddf3>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <calcsin+0xa0>)
 8000e92:	f7ff fb55 	bl	8000540 <__aeabi_dmul>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f7ff fe11 	bl	8000ac4 <__aeabi_d2uiz>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	b299      	uxth	r1, r3
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed4 <calcsin+0xa4>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i < SAMPLE; i++)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2bc7      	cmp	r3, #199	@ 0xc7
 8000eb8:	ddc0      	ble.n	8000e3c <calcsin+0xc>
	}
}
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	40690000 	.word	0x40690000
 8000ecc:	3ff00000 	.word	0x3ff00000
 8000ed0:	40a00000 	.word	0x40a00000
 8000ed4:	2000018c 	.word	0x2000018c
 8000ed8:	4d12d84a 	.word	0x4d12d84a
 8000edc:	400921fb 	.word	0x400921fb

08000ee0 <calctriangle>:

void calctriangle()
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
    for (int i = 0; i < SAMPLE; i++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	e031      	b.n	8000f50 <calctriangle+0x70>
    {
        if (i < SAMPLE/2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b63      	cmp	r3, #99	@ 0x63
 8000ef0:	dc14      	bgt.n	8000f1c <calctriangle+0x3c>
        {
            // İlk yarı: 0 → maksimum
            triwave[i] = (uint16_t)(i * (4095.0 / (SAMPLE/2)));
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff faba 	bl	800046c <__aeabi_i2d>
 8000ef8:	a319      	add	r3, pc, #100	@ (adr r3, 8000f60 <calctriangle+0x80>)
 8000efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efe:	f7ff fb1f 	bl	8000540 <__aeabi_dmul>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4610      	mov	r0, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f7ff fddb 	bl	8000ac4 <__aeabi_d2uiz>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	b299      	uxth	r1, r3
 8000f12:	4a15      	ldr	r2, [pc, #84]	@ (8000f68 <calctriangle+0x88>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f1a:	e016      	b.n	8000f4a <calctriangle+0x6a>
        }
        else
        {
            // İkinci yarı: maksimum → 0
            triwave[i] = (uint16_t)((SAMPLE - i) * (4095.0 / (SAMPLE/2)));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff faa2 	bl	800046c <__aeabi_i2d>
 8000f28:	a30d      	add	r3, pc, #52	@ (adr r3, 8000f60 <calctriangle+0x80>)
 8000f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2e:	f7ff fb07 	bl	8000540 <__aeabi_dmul>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f7ff fdc3 	bl	8000ac4 <__aeabi_d2uiz>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	b299      	uxth	r1, r3
 8000f42:	4a09      	ldr	r2, [pc, #36]	@ (8000f68 <calctriangle+0x88>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < SAMPLE; i++)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2bc7      	cmp	r3, #199	@ 0xc7
 8000f54:	ddca      	ble.n	8000eec <calctriangle+0xc>
        }
    }
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	9999999a 	.word	0x9999999a
 8000f64:	40447999 	.word	0x40447999
 8000f68:	2000031c 	.word	0x2000031c

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f72:	f000 fbaf 	bl	80016d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f76:	f000 f831 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7a:	f000 f99b 	bl	80012b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7e:	f000 f971 	bl	8001264 <MX_DMA_Init>
  MX_DAC_Init();
 8000f82:	f000 f895 	bl	80010b0 <MX_DAC_Init>
  MX_TIM2_Init();
 8000f86:	f000 f8c7 	bl	8001118 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f8a:	f000 f911 	bl	80011b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000f8e:	480e      	ldr	r0, [pc, #56]	@ (8000fc8 <main+0x5c>)
 8000f90:	f002 f8c8 	bl	8003124 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 8000f94:	210c      	movs	r1, #12
 8000f96:	480d      	ldr	r0, [pc, #52]	@ (8000fcc <main+0x60>)
 8000f98:	f002 f97c 	bl	8003294 <HAL_TIM_PWM_Start_IT>
  calcsin();
 8000f9c:	f7ff ff48 	bl	8000e30 <calcsin>
  calctriangle();
 8000fa0:	f7ff ff9e 	bl	8000ee0 <calctriangle>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sinwave, SAMPLE, DAC_ALIGN_12B_R);
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	23c8      	movs	r3, #200	@ 0xc8
 8000faa:	4a09      	ldr	r2, [pc, #36]	@ (8000fd0 <main+0x64>)
 8000fac:	2100      	movs	r1, #0
 8000fae:	4809      	ldr	r0, [pc, #36]	@ (8000fd4 <main+0x68>)
 8000fb0:	f000 fd36 	bl	8001a20 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, triwave, SAMPLE, DAC_ALIGN_12B_R);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	23c8      	movs	r3, #200	@ 0xc8
 8000fba:	4a07      	ldr	r2, [pc, #28]	@ (8000fd8 <main+0x6c>)
 8000fbc:	2110      	movs	r1, #16
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <main+0x68>)
 8000fc0:	f000 fd2e 	bl	8001a20 <HAL_DAC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <main+0x58>
 8000fc8:	200000fc 	.word	0x200000fc
 8000fcc:	20000144 	.word	0x20000144
 8000fd0:	2000018c 	.word	0x2000018c
 8000fd4:	20000028 	.word	0x20000028
 8000fd8:	2000031c 	.word	0x2000031c

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b094      	sub	sp, #80	@ 0x50
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	2230      	movs	r2, #48	@ 0x30
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 ff84 	bl	8003ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	4b28      	ldr	r3, [pc, #160]	@ (80010a8 <SystemClock_Config+0xcc>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001008:	4a27      	ldr	r2, [pc, #156]	@ (80010a8 <SystemClock_Config+0xcc>)
 800100a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800100e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001010:	4b25      	ldr	r3, [pc, #148]	@ (80010a8 <SystemClock_Config+0xcc>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	4b22      	ldr	r3, [pc, #136]	@ (80010ac <SystemClock_Config+0xd0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a21      	ldr	r2, [pc, #132]	@ (80010ac <SystemClock_Config+0xd0>)
 8001026:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <SystemClock_Config+0xd0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001038:	2301      	movs	r3, #1
 800103a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800103c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001042:	2302      	movs	r3, #2
 8001044:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001046:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800104a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800104c:	2304      	movs	r3, #4
 800104e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001050:	23a8      	movs	r3, #168	@ 0xa8
 8001052:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001054:	2302      	movs	r3, #2
 8001056:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001058:	2304      	movs	r3, #4
 800105a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fbab 	bl	80027bc <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800106c:	f000 f958 	bl	8001320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001070:	230f      	movs	r3, #15
 8001072:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001074:	2302      	movs	r3, #2
 8001076:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800107c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001080:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001082:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001086:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2105      	movs	r1, #5
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fe0c 	bl	8002cac <HAL_RCC_ClockConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800109a:	f000 f941 	bl	8001320 <Error_Handler>
  }
}
 800109e:	bf00      	nop
 80010a0:	3750      	adds	r7, #80	@ 0x50
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40007000 	.word	0x40007000

080010b0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010b6:	463b      	mov	r3, r7
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010be:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <MX_DAC_Init+0x60>)
 80010c0:	4a14      	ldr	r2, [pc, #80]	@ (8001114 <MX_DAC_Init+0x64>)
 80010c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80010c4:	4812      	ldr	r0, [pc, #72]	@ (8001110 <MX_DAC_Init+0x60>)
 80010c6:	f000 fc88 	bl	80019da <HAL_DAC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80010d0:	f000 f926 	bl	8001320 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80010d4:	2324      	movs	r3, #36	@ 0x24
 80010d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	480b      	ldr	r0, [pc, #44]	@ (8001110 <MX_DAC_Init+0x60>)
 80010e4:	f000 fd7a 	bl	8001bdc <HAL_DAC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80010ee:	f000 f917 	bl	8001320 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	2210      	movs	r2, #16
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	@ (8001110 <MX_DAC_Init+0x60>)
 80010fa:	f000 fd6f 	bl	8001bdc <HAL_DAC_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001104:	f000 f90c 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000028 	.word	0x20000028
 8001114:	40007400 	.word	0x40007400

08001118 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001134:	4b1d      	ldr	r3, [pc, #116]	@ (80011ac <MX_TIM2_Init+0x94>)
 8001136:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800113a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <MX_TIM2_Init+0x94>)
 800113e:	2253      	movs	r2, #83	@ 0x53
 8001140:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001142:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <MX_TIM2_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5-1;
 8001148:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <MX_TIM2_Init+0x94>)
 800114a:	2204      	movs	r2, #4
 800114c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114e:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <MX_TIM2_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001154:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <MX_TIM2_Init+0x94>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800115a:	4814      	ldr	r0, [pc, #80]	@ (80011ac <MX_TIM2_Init+0x94>)
 800115c:	f001 ff92 	bl	8003084 <HAL_TIM_Base_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001166:	f000 f8db 	bl	8001320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800116e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	4619      	mov	r1, r3
 8001176:	480d      	ldr	r0, [pc, #52]	@ (80011ac <MX_TIM2_Init+0x94>)
 8001178:	f002 fa64 	bl	8003644 <HAL_TIM_ConfigClockSource>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001182:	f000 f8cd 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001186:	2320      	movs	r3, #32
 8001188:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	4619      	mov	r1, r3
 8001192:	4806      	ldr	r0, [pc, #24]	@ (80011ac <MX_TIM2_Init+0x94>)
 8001194:	f002 fe34 	bl	8003e00 <HAL_TIMEx_MasterConfigSynchronization>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800119e:	f000 f8bf 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200000fc 	.word	0x200000fc

080011b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	@ 0x28
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011d2:	4b22      	ldr	r3, [pc, #136]	@ (800125c <MX_TIM3_Init+0xac>)
 80011d4:	4a22      	ldr	r2, [pc, #136]	@ (8001260 <MX_TIM3_Init+0xb0>)
 80011d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80011d8:	4b20      	ldr	r3, [pc, #128]	@ (800125c <MX_TIM3_Init+0xac>)
 80011da:	2253      	movs	r2, #83	@ 0x53
 80011dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <MX_TIM3_Init+0xac>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80011e4:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <MX_TIM3_Init+0xac>)
 80011e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <MX_TIM3_Init+0xac>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_TIM3_Init+0xac>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011f8:	4818      	ldr	r0, [pc, #96]	@ (800125c <MX_TIM3_Init+0xac>)
 80011fa:	f001 fffb 	bl	80031f4 <HAL_TIM_PWM_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001204:	f000 f88c 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001210:	f107 0320 	add.w	r3, r7, #32
 8001214:	4619      	mov	r1, r3
 8001216:	4811      	ldr	r0, [pc, #68]	@ (800125c <MX_TIM3_Init+0xac>)
 8001218:	f002 fdf2 	bl	8003e00 <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001222:	f000 f87d 	bl	8001320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001226:	2360      	movs	r3, #96	@ 0x60
 8001228:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800122a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800122e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	220c      	movs	r2, #12
 800123c:	4619      	mov	r1, r3
 800123e:	4807      	ldr	r0, [pc, #28]	@ (800125c <MX_TIM3_Init+0xac>)
 8001240:	f002 f93e 	bl	80034c0 <HAL_TIM_PWM_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800124a:	f000 f869 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800124e:	4803      	ldr	r0, [pc, #12]	@ (800125c <MX_TIM3_Init+0xac>)
 8001250:	f000 f986 	bl	8001560 <HAL_TIM_MspPostInit>

}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	@ 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000144 	.word	0x20000144
 8001260:	40000400 	.word	0x40000400

08001264 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <MX_DMA_Init+0x4c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a0f      	ldr	r2, [pc, #60]	@ (80012b0 <MX_DMA_Init+0x4c>)
 8001274:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <MX_DMA_Init+0x4c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2010      	movs	r0, #16
 800128c:	f000 fb6f 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001290:	2010      	movs	r0, #16
 8001292:	f000 fb88 	bl	80019a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	2011      	movs	r0, #17
 800129c:	f000 fb67 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012a0:	2011      	movs	r0, #17
 80012a2:	f000 fb80 	bl	80019a6 <HAL_NVIC_EnableIRQ>

}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b17      	ldr	r3, [pc, #92]	@ (800131c <MX_GPIO_Init+0x68>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a16      	ldr	r2, [pc, #88]	@ (800131c <MX_GPIO_Init+0x68>)
 80012c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b14      	ldr	r3, [pc, #80]	@ (800131c <MX_GPIO_Init+0x68>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b10      	ldr	r3, [pc, #64]	@ (800131c <MX_GPIO_Init+0x68>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a0f      	ldr	r2, [pc, #60]	@ (800131c <MX_GPIO_Init+0x68>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <MX_GPIO_Init+0x68>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <MX_GPIO_Init+0x68>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a08      	ldr	r2, [pc, #32]	@ (800131c <MX_GPIO_Init+0x68>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <MX_GPIO_Init+0x68>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <Error_Handler+0x8>

0800132c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	4a0f      	ldr	r2, [pc, #60]	@ (8001378 <HAL_MspInit+0x4c>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001340:	6453      	str	r3, [r2, #68]	@ 0x44
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <HAL_MspInit+0x4c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	4a08      	ldr	r2, [pc, #32]	@ (8001378 <HAL_MspInit+0x4c>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800135c:	6413      	str	r3, [r2, #64]	@ 0x40
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800

0800137c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	@ 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a49      	ldr	r2, [pc, #292]	@ (80014c0 <HAL_DAC_MspInit+0x144>)
 800139a:	4293      	cmp	r3, r2
 800139c:	f040 808c 	bne.w	80014b8 <HAL_DAC_MspInit+0x13c>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	4b47      	ldr	r3, [pc, #284]	@ (80014c4 <HAL_DAC_MspInit+0x148>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	4a46      	ldr	r2, [pc, #280]	@ (80014c4 <HAL_DAC_MspInit+0x148>)
 80013aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80013ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b0:	4b44      	ldr	r3, [pc, #272]	@ (80014c4 <HAL_DAC_MspInit+0x148>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	4b40      	ldr	r3, [pc, #256]	@ (80014c4 <HAL_DAC_MspInit+0x148>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c4:	4a3f      	ldr	r2, [pc, #252]	@ (80014c4 <HAL_DAC_MspInit+0x148>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80013cc:	4b3d      	ldr	r3, [pc, #244]	@ (80014c4 <HAL_DAC_MspInit+0x148>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013d8:	2330      	movs	r3, #48	@ 0x30
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013dc:	2303      	movs	r3, #3
 80013de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	4837      	ldr	r0, [pc, #220]	@ (80014c8 <HAL_DAC_MspInit+0x14c>)
 80013ec:	f001 f84a 	bl	8002484 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80013f0:	4b36      	ldr	r3, [pc, #216]	@ (80014cc <HAL_DAC_MspInit+0x150>)
 80013f2:	4a37      	ldr	r2, [pc, #220]	@ (80014d0 <HAL_DAC_MspInit+0x154>)
 80013f4:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80013f6:	4b35      	ldr	r3, [pc, #212]	@ (80014cc <HAL_DAC_MspInit+0x150>)
 80013f8:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80013fc:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013fe:	4b33      	ldr	r3, [pc, #204]	@ (80014cc <HAL_DAC_MspInit+0x150>)
 8001400:	2240      	movs	r2, #64	@ 0x40
 8001402:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001404:	4b31      	ldr	r3, [pc, #196]	@ (80014cc <HAL_DAC_MspInit+0x150>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800140a:	4b30      	ldr	r3, [pc, #192]	@ (80014cc <HAL_DAC_MspInit+0x150>)
 800140c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001410:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001412:	4b2e      	ldr	r3, [pc, #184]	@ (80014cc <HAL_DAC_MspInit+0x150>)
 8001414:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001418:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800141a:	4b2c      	ldr	r3, [pc, #176]	@ (80014cc <HAL_DAC_MspInit+0x150>)
 800141c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001420:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001422:	4b2a      	ldr	r3, [pc, #168]	@ (80014cc <HAL_DAC_MspInit+0x150>)
 8001424:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001428:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800142a:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <HAL_DAC_MspInit+0x150>)
 800142c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001430:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001432:	4b26      	ldr	r3, [pc, #152]	@ (80014cc <HAL_DAC_MspInit+0x150>)
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001438:	4824      	ldr	r0, [pc, #144]	@ (80014cc <HAL_DAC_MspInit+0x150>)
 800143a:	f000 fcb3 	bl	8001da4 <HAL_DMA_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8001444:	f7ff ff6c 	bl	8001320 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a20      	ldr	r2, [pc, #128]	@ (80014cc <HAL_DAC_MspInit+0x150>)
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	4a1f      	ldr	r2, [pc, #124]	@ (80014cc <HAL_DAC_MspInit+0x150>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8001454:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <HAL_DAC_MspInit+0x158>)
 8001456:	4a20      	ldr	r2, [pc, #128]	@ (80014d8 <HAL_DAC_MspInit+0x15c>)
 8001458:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 800145a:	4b1e      	ldr	r3, [pc, #120]	@ (80014d4 <HAL_DAC_MspInit+0x158>)
 800145c:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001460:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001462:	4b1c      	ldr	r3, [pc, #112]	@ (80014d4 <HAL_DAC_MspInit+0x158>)
 8001464:	2240      	movs	r2, #64	@ 0x40
 8001466:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001468:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <HAL_DAC_MspInit+0x158>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 800146e:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <HAL_DAC_MspInit+0x158>)
 8001470:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001474:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001476:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <HAL_DAC_MspInit+0x158>)
 8001478:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800147c:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <HAL_DAC_MspInit+0x158>)
 8001480:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001484:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8001486:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <HAL_DAC_MspInit+0x158>)
 8001488:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800148c:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_HIGH;
 800148e:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <HAL_DAC_MspInit+0x158>)
 8001490:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001494:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001496:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <HAL_DAC_MspInit+0x158>)
 8001498:	2200      	movs	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 800149c:	480d      	ldr	r0, [pc, #52]	@ (80014d4 <HAL_DAC_MspInit+0x158>)
 800149e:	f000 fc81 	bl	8001da4 <HAL_DMA_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_DAC_MspInit+0x130>
    {
      Error_Handler();
 80014a8:	f7ff ff3a 	bl	8001320 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a09      	ldr	r2, [pc, #36]	@ (80014d4 <HAL_DAC_MspInit+0x158>)
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	4a08      	ldr	r2, [pc, #32]	@ (80014d4 <HAL_DAC_MspInit+0x158>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	@ 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40007400 	.word	0x40007400
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020000 	.word	0x40020000
 80014cc:	2000003c 	.word	0x2000003c
 80014d0:	40026088 	.word	0x40026088
 80014d4:	2000009c 	.word	0x2000009c
 80014d8:	400260a0 	.word	0x400260a0

080014dc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014ec:	d10d      	bne.n	800150a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_TIM_Base_MspInit+0x3c>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	4a08      	ldr	r2, [pc, #32]	@ (8001518 <HAL_TIM_Base_MspInit+0x3c>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_TIM_Base_MspInit+0x3c>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800

0800151c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0b      	ldr	r2, [pc, #44]	@ (8001558 <HAL_TIM_PWM_MspInit+0x3c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d10d      	bne.n	800154a <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <HAL_TIM_PWM_MspInit+0x40>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	4a09      	ldr	r2, [pc, #36]	@ (800155c <HAL_TIM_PWM_MspInit+0x40>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6413      	str	r3, [r2, #64]	@ 0x40
 800153e:	4b07      	ldr	r3, [pc, #28]	@ (800155c <HAL_TIM_PWM_MspInit+0x40>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40000400 	.word	0x40000400
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a12      	ldr	r2, [pc, #72]	@ (80015c8 <HAL_TIM_MspPostInit+0x68>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d11d      	bne.n	80015be <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <HAL_TIM_MspPostInit+0x6c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a10      	ldr	r2, [pc, #64]	@ (80015cc <HAL_TIM_MspPostInit+0x6c>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <HAL_TIM_MspPostInit+0x6c>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800159e:	2302      	movs	r3, #2
 80015a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <HAL_TIM_MspPostInit+0x70>)
 80015ba:	f000 ff63 	bl	8002484 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3720      	adds	r7, #32
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40000400 	.word	0x40000400
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020400 	.word	0x40020400

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <NMI_Handler+0x4>

080015dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <MemManage_Handler+0x4>

080015ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162a:	f000 f8a5 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <DMA1_Stream5_IRQHandler+0x10>)
 800163a:	f000 fcb9 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000003c 	.word	0x2000003c

08001648 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <DMA1_Stream6_IRQHandler+0x10>)
 800164e:	f000 fcaf 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000009c 	.word	0x2000009c

0800165c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <SystemInit+0x20>)
 8001662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001666:	4a05      	ldr	r2, [pc, #20]	@ (800167c <SystemInit+0x20>)
 8001668:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800166c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001680:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001684:	f7ff ffea 	bl	800165c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001688:	480c      	ldr	r0, [pc, #48]	@ (80016bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800168a:	490d      	ldr	r1, [pc, #52]	@ (80016c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800168c:	4a0d      	ldr	r2, [pc, #52]	@ (80016c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0a      	ldr	r2, [pc, #40]	@ (80016c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a0:	4c0a      	ldr	r4, [pc, #40]	@ (80016cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ae:	f002 fc2b 	bl	8003f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b2:	f7ff fc5b 	bl	8000f6c <main>
  bx  lr    
 80016b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016c4:	080051b0 	.word	0x080051b0
  ldr r2, =_sbss
 80016c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016cc:	200004b0 	.word	0x200004b0

080016d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC_IRQHandler>
	...

080016d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <HAL_Init+0x40>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001714 <HAL_Init+0x40>)
 80016de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <HAL_Init+0x40>)
 80016ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f0:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a07      	ldr	r2, [pc, #28]	@ (8001714 <HAL_Init+0x40>)
 80016f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fc:	2003      	movs	r0, #3
 80016fe:	f000 f92b 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001702:	200f      	movs	r0, #15
 8001704:	f000 f808 	bl	8001718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001708:	f7ff fe10 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023c00 	.word	0x40023c00

08001718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_InitTick+0x54>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_InitTick+0x58>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f943 	bl	80019c2 <HAL_SYSTICK_Config>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e00e      	b.n	8001764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d80a      	bhi.n	8001762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f000 f90b 	bl	800196e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001758:	4a06      	ldr	r2, [pc, #24]	@ (8001774 <HAL_InitTick+0x5c>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e000      	b.n	8001764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000000 	.word	0x20000000
 8001770:	20000008 	.word	0x20000008
 8001774:	20000004 	.word	0x20000004

08001778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_IncTick+0x20>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_IncTick+0x24>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a04      	ldr	r2, [pc, #16]	@ (800179c <HAL_IncTick+0x24>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000008 	.word	0x20000008
 800179c:	200004ac 	.word	0x200004ac

080017a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b03      	ldr	r3, [pc, #12]	@ (80017b4 <HAL_GetTick+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	200004ac 	.word	0x200004ac

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	@ (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	@ (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	@ (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	@ 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	@ 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7ff ff8e 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff29 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001980:	f7ff ff3e 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	6978      	ldr	r0, [r7, #20]
 800198c:	f7ff ff8e 	bl	80018ac <NVIC_EncodePriority>
 8001990:	4602      	mov	r2, r0
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff5d 	bl	8001858 <__NVIC_SetPriority>
}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff31 	bl	800181c <__NVIC_EnableIRQ>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffa2 	bl	8001914 <SysTick_Config>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e014      	b.n	8001a16 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	791b      	ldrb	r3, [r3, #4]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d105      	bne.n	8001a02 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff fcbd 	bl	800137c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2202      	movs	r2, #2
 8001a06:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
#endif /* DAC_CHANNEL2_SUPPORT */
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0a2      	b.n	8001b7e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	795b      	ldrb	r3, [r3, #5]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_DAC_Start_DMA+0x24>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e09c      	b.n	8001b7e <HAL_DAC_Start_DMA+0x15e>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2201      	movs	r2, #1
 8001a48:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d129      	bne.n	8001aaa <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	4a4b      	ldr	r2, [pc, #300]	@ (8001b88 <HAL_DAC_Start_DMA+0x168>)
 8001a5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4a4a      	ldr	r2, [pc, #296]	@ (8001b8c <HAL_DAC_Start_DMA+0x16c>)
 8001a64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	4a49      	ldr	r2, [pc, #292]	@ (8001b90 <HAL_DAC_Start_DMA+0x170>)
 8001a6c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001a7c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_DAC_Start_DMA+0x6c>
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d005      	beq.n	8001a96 <HAL_DAC_Start_DMA+0x76>
 8001a8a:	e009      	b.n	8001aa0 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3308      	adds	r3, #8
 8001a92:	613b      	str	r3, [r7, #16]
        break;
 8001a94:	e033      	b.n	8001afe <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	330c      	adds	r3, #12
 8001a9c:	613b      	str	r3, [r7, #16]
        break;
 8001a9e:	e02e      	b.n	8001afe <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	3310      	adds	r3, #16
 8001aa6:	613b      	str	r3, [r7, #16]
        break;
 8001aa8:	e029      	b.n	8001afe <HAL_DAC_Start_DMA+0xde>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	4a39      	ldr	r2, [pc, #228]	@ (8001b94 <HAL_DAC_Start_DMA+0x174>)
 8001ab0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	4a38      	ldr	r2, [pc, #224]	@ (8001b98 <HAL_DAC_Start_DMA+0x178>)
 8001ab8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	4a37      	ldr	r2, [pc, #220]	@ (8001b9c <HAL_DAC_Start_DMA+0x17c>)
 8001ac0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001ad0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_DAC_Start_DMA+0xc0>
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d005      	beq.n	8001aea <HAL_DAC_Start_DMA+0xca>
 8001ade:	e009      	b.n	8001af4 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	3314      	adds	r3, #20
 8001ae6:	613b      	str	r3, [r7, #16]
        break;
 8001ae8:	e009      	b.n	8001afe <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3318      	adds	r3, #24
 8001af0:	613b      	str	r3, [r7, #16]
        break;
 8001af2:	e004      	b.n	8001afe <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	331c      	adds	r3, #28
 8001afa:	613b      	str	r3, [r7, #16]
        break;
 8001afc:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d111      	bne.n	8001b28 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b12:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6898      	ldr	r0, [r3, #8]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	f000 f9ef 	bl	8001f00 <HAL_DMA_Start_IT>
 8001b22:	4603      	mov	r3, r0
 8001b24:	75fb      	strb	r3, [r7, #23]
 8001b26:	e010      	b.n	8001b4a <HAL_DAC_Start_DMA+0x12a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001b36:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	68d8      	ldr	r0, [r3, #12]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	f000 f9dd 	bl	8001f00 <HAL_DMA_Start_IT>
 8001b46:	4603      	mov	r3, r0
 8001b48:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10c      	bne.n	8001b70 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6819      	ldr	r1, [r3, #0]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	2201      	movs	r2, #1
 8001b64:	409a      	lsls	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e005      	b.n	8001b7c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	f043 0204 	orr.w	r2, r3, #4
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	08001c8f 	.word	0x08001c8f
 8001b8c:	08001cb1 	.word	0x08001cb1
 8001b90:	08001ccd 	.word	0x08001ccd
 8001b94:	08001d37 	.word	0x08001d37
 8001b98:	08001d59 	.word	0x08001d59
 8001b9c:	08001d75 	.word	0x08001d75

08001ba0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	@ 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <HAL_DAC_ConfigChannel+0x1c>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e042      	b.n	8001c82 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	795b      	ldrb	r3, [r3, #5]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_DAC_ConfigChannel+0x2c>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e03c      	b.n	8001c82 <HAL_DAC_ConfigChannel+0xa6>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2202      	movs	r2, #2
 8001c12:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6819      	ldr	r1, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	22c0      	movs	r2, #192	@ 0xc0
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	400a      	ands	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001c80:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3724      	adds	r7, #36	@ 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c9a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f7ff ff7f 	bl	8001ba0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	711a      	strb	r2, [r3, #4]
}
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cbc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f7ff ff78 	bl	8001bb4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f043 0204 	orr.w	r2, r3, #4
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f7ff ff6e 	bl	8001bc8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	711a      	strb	r2, [r3, #4]
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d42:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f7ff ffd8 	bl	8001cfa <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	711a      	strb	r2, [r3, #4]
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d64:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f7ff ffd1 	bl	8001d0e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	f043 0204 	orr.w	r2, r3, #4
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f7ff ffc7 	bl	8001d22 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2201      	movs	r2, #1
 8001d98:	711a      	strb	r2, [r3, #4]
}
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001db0:	f7ff fcf6 	bl	80017a0 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e099      	b.n	8001ef4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de0:	e00f      	b.n	8001e02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de2:	f7ff fcdd 	bl	80017a0 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d908      	bls.n	8001e02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2220      	movs	r2, #32
 8001df4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2203      	movs	r2, #3
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e078      	b.n	8001ef4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1e8      	bne.n	8001de2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	4b38      	ldr	r3, [pc, #224]	@ (8001efc <HAL_DMA_Init+0x158>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d107      	bne.n	8001e6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e64:	4313      	orrs	r3, r2
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f023 0307 	bic.w	r3, r3, #7
 8001e82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d117      	bne.n	8001ec6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00e      	beq.n	8001ec6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fa6f 	bl	800238c <DMA_CheckFifoParam>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2240      	movs	r2, #64	@ 0x40
 8001eb8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e016      	b.n	8001ef4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fa26 	bl	8002320 <DMA_CalcBaseAndBitshift>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001edc:	223f      	movs	r2, #63	@ 0x3f
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	f010803f 	.word	0xf010803f

08001f00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_DMA_Start_IT+0x26>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e040      	b.n	8001fa8 <HAL_DMA_Start_IT+0xa8>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d12f      	bne.n	8001f9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f9b8 	bl	80022c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f58:	223f      	movs	r2, #63	@ 0x3f
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0216 	orr.w	r2, r2, #22
 8001f6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d007      	beq.n	8001f88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0208 	orr.w	r2, r2, #8
 8001f86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e005      	b.n	8001fa6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fbc:	4b8e      	ldr	r3, [pc, #568]	@ (80021f8 <HAL_DMA_IRQHandler+0x248>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a8e      	ldr	r2, [pc, #568]	@ (80021fc <HAL_DMA_IRQHandler+0x24c>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	0a9b      	lsrs	r3, r3, #10
 8001fc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fda:	2208      	movs	r2, #8
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d01a      	beq.n	800201c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d013      	beq.n	800201c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0204 	bic.w	r2, r2, #4
 8002002:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002008:	2208      	movs	r2, #8
 800200a:	409a      	lsls	r2, r3
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002020:	2201      	movs	r2, #1
 8002022:	409a      	lsls	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d012      	beq.n	8002052 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203e:	2201      	movs	r2, #1
 8002040:	409a      	lsls	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204a:	f043 0202 	orr.w	r2, r3, #2
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002056:	2204      	movs	r2, #4
 8002058:	409a      	lsls	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d012      	beq.n	8002088 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00b      	beq.n	8002088 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002074:	2204      	movs	r2, #4
 8002076:	409a      	lsls	r2, r3
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002080:	f043 0204 	orr.w	r2, r3, #4
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208c:	2210      	movs	r2, #16
 800208e:	409a      	lsls	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d043      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d03c      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020aa:	2210      	movs	r2, #16
 80020ac:	409a      	lsls	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d018      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d108      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d024      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	4798      	blx	r3
 80020de:	e01f      	b.n	8002120 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01b      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
 80020f0:	e016      	b.n	8002120 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d107      	bne.n	8002110 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0208 	bic.w	r2, r2, #8
 800210e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002124:	2220      	movs	r2, #32
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 808f 	beq.w	8002250 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 8087 	beq.w	8002250 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002146:	2220      	movs	r2, #32
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b05      	cmp	r3, #5
 8002158:	d136      	bne.n	80021c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0216 	bic.w	r2, r2, #22
 8002168:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002178:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d103      	bne.n	800218a <HAL_DMA_IRQHandler+0x1da>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0208 	bic.w	r2, r2, #8
 8002198:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219e:	223f      	movs	r2, #63	@ 0x3f
 80021a0:	409a      	lsls	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d07e      	beq.n	80022bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4798      	blx	r3
        }
        return;
 80021c6:	e079      	b.n	80022bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d01d      	beq.n	8002212 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10d      	bne.n	8002200 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d031      	beq.n	8002250 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
 80021f4:	e02c      	b.n	8002250 <HAL_DMA_IRQHandler+0x2a0>
 80021f6:	bf00      	nop
 80021f8:	20000000 	.word	0x20000000
 80021fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002204:	2b00      	cmp	r3, #0
 8002206:	d023      	beq.n	8002250 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4798      	blx	r3
 8002210:	e01e      	b.n	8002250 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10f      	bne.n	8002240 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0210 	bic.w	r2, r2, #16
 800222e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002254:	2b00      	cmp	r3, #0
 8002256:	d032      	beq.n	80022be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d022      	beq.n	80022aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2205      	movs	r2, #5
 8002268:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0201 	bic.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	3301      	adds	r3, #1
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	429a      	cmp	r2, r3
 8002286:	d307      	bcc.n	8002298 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f2      	bne.n	800227c <HAL_DMA_IRQHandler+0x2cc>
 8002296:	e000      	b.n	800229a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002298:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	4798      	blx	r3
 80022ba:	e000      	b.n	80022be <HAL_DMA_IRQHandler+0x30e>
        return;
 80022bc:	bf00      	nop
    }
  }
}
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b40      	cmp	r3, #64	@ 0x40
 80022f0:	d108      	bne.n	8002304 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002302:	e007      	b.n	8002314 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	60da      	str	r2, [r3, #12]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	3b10      	subs	r3, #16
 8002330:	4a14      	ldr	r2, [pc, #80]	@ (8002384 <DMA_CalcBaseAndBitshift+0x64>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800233a:	4a13      	ldr	r2, [pc, #76]	@ (8002388 <DMA_CalcBaseAndBitshift+0x68>)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4413      	add	r3, r2
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d909      	bls.n	8002362 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002356:	f023 0303 	bic.w	r3, r3, #3
 800235a:	1d1a      	adds	r2, r3, #4
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002360:	e007      	b.n	8002372 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800236a:	f023 0303 	bic.w	r3, r3, #3
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002376:	4618      	mov	r0, r3
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	aaaaaaab 	.word	0xaaaaaaab
 8002388:	08004fc0 	.word	0x08004fc0

0800238c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d11f      	bne.n	80023e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d856      	bhi.n	800245a <DMA_CheckFifoParam+0xce>
 80023ac:	a201      	add	r2, pc, #4	@ (adr r2, 80023b4 <DMA_CheckFifoParam+0x28>)
 80023ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b2:	bf00      	nop
 80023b4:	080023c5 	.word	0x080023c5
 80023b8:	080023d7 	.word	0x080023d7
 80023bc:	080023c5 	.word	0x080023c5
 80023c0:	0800245b 	.word	0x0800245b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d046      	beq.n	800245e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d4:	e043      	b.n	800245e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023de:	d140      	bne.n	8002462 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e4:	e03d      	b.n	8002462 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023ee:	d121      	bne.n	8002434 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d837      	bhi.n	8002466 <DMA_CheckFifoParam+0xda>
 80023f6:	a201      	add	r2, pc, #4	@ (adr r2, 80023fc <DMA_CheckFifoParam+0x70>)
 80023f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fc:	0800240d 	.word	0x0800240d
 8002400:	08002413 	.word	0x08002413
 8002404:	0800240d 	.word	0x0800240d
 8002408:	08002425 	.word	0x08002425
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
      break;
 8002410:	e030      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002416:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d025      	beq.n	800246a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002422:	e022      	b.n	800246a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002428:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800242c:	d11f      	bne.n	800246e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002432:	e01c      	b.n	800246e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d903      	bls.n	8002442 <DMA_CheckFifoParam+0xb6>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d003      	beq.n	8002448 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002440:	e018      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
      break;
 8002446:	e015      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00e      	beq.n	8002472 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
      break;
 8002458:	e00b      	b.n	8002472 <DMA_CheckFifoParam+0xe6>
      break;
 800245a:	bf00      	nop
 800245c:	e00a      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
      break;
 800245e:	bf00      	nop
 8002460:	e008      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
      break;
 8002462:	bf00      	nop
 8002464:	e006      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
      break;
 8002466:	bf00      	nop
 8002468:	e004      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
      break;
 800246a:	bf00      	nop
 800246c:	e002      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
      break;   
 800246e:	bf00      	nop
 8002470:	e000      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
      break;
 8002472:	bf00      	nop
    }
  } 
  
  return status; 
 8002474:	7bfb      	ldrb	r3, [r7, #15]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop

08002484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	@ 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002496:	2300      	movs	r3, #0
 8002498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	e16b      	b.n	8002778 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024a0:	2201      	movs	r2, #1
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	f040 815a 	bne.w	8002772 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d005      	beq.n	80024d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d130      	bne.n	8002538 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	2203      	movs	r2, #3
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800250c:	2201      	movs	r2, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 0201 	and.w	r2, r3, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b03      	cmp	r3, #3
 8002542:	d017      	beq.n	8002574 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d123      	bne.n	80025c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	08da      	lsrs	r2, r3, #3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3208      	adds	r2, #8
 8002588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	220f      	movs	r2, #15
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	08da      	lsrs	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3208      	adds	r2, #8
 80025c2:	69b9      	ldr	r1, [r7, #24]
 80025c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0203 	and.w	r2, r3, #3
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80b4 	beq.w	8002772 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	4b60      	ldr	r3, [pc, #384]	@ (8002790 <HAL_GPIO_Init+0x30c>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	4a5f      	ldr	r2, [pc, #380]	@ (8002790 <HAL_GPIO_Init+0x30c>)
 8002614:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002618:	6453      	str	r3, [r2, #68]	@ 0x44
 800261a:	4b5d      	ldr	r3, [pc, #372]	@ (8002790 <HAL_GPIO_Init+0x30c>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002626:	4a5b      	ldr	r2, [pc, #364]	@ (8002794 <HAL_GPIO_Init+0x310>)
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	3302      	adds	r3, #2
 800262e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	220f      	movs	r2, #15
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a52      	ldr	r2, [pc, #328]	@ (8002798 <HAL_GPIO_Init+0x314>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d02b      	beq.n	80026aa <HAL_GPIO_Init+0x226>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a51      	ldr	r2, [pc, #324]	@ (800279c <HAL_GPIO_Init+0x318>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d025      	beq.n	80026a6 <HAL_GPIO_Init+0x222>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a50      	ldr	r2, [pc, #320]	@ (80027a0 <HAL_GPIO_Init+0x31c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d01f      	beq.n	80026a2 <HAL_GPIO_Init+0x21e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4f      	ldr	r2, [pc, #316]	@ (80027a4 <HAL_GPIO_Init+0x320>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d019      	beq.n	800269e <HAL_GPIO_Init+0x21a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4e      	ldr	r2, [pc, #312]	@ (80027a8 <HAL_GPIO_Init+0x324>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <HAL_GPIO_Init+0x216>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4d      	ldr	r2, [pc, #308]	@ (80027ac <HAL_GPIO_Init+0x328>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00d      	beq.n	8002696 <HAL_GPIO_Init+0x212>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4c      	ldr	r2, [pc, #304]	@ (80027b0 <HAL_GPIO_Init+0x32c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d007      	beq.n	8002692 <HAL_GPIO_Init+0x20e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4b      	ldr	r2, [pc, #300]	@ (80027b4 <HAL_GPIO_Init+0x330>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_GPIO_Init+0x20a>
 800268a:	2307      	movs	r3, #7
 800268c:	e00e      	b.n	80026ac <HAL_GPIO_Init+0x228>
 800268e:	2308      	movs	r3, #8
 8002690:	e00c      	b.n	80026ac <HAL_GPIO_Init+0x228>
 8002692:	2306      	movs	r3, #6
 8002694:	e00a      	b.n	80026ac <HAL_GPIO_Init+0x228>
 8002696:	2305      	movs	r3, #5
 8002698:	e008      	b.n	80026ac <HAL_GPIO_Init+0x228>
 800269a:	2304      	movs	r3, #4
 800269c:	e006      	b.n	80026ac <HAL_GPIO_Init+0x228>
 800269e:	2303      	movs	r3, #3
 80026a0:	e004      	b.n	80026ac <HAL_GPIO_Init+0x228>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e002      	b.n	80026ac <HAL_GPIO_Init+0x228>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_GPIO_Init+0x228>
 80026aa:	2300      	movs	r3, #0
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	f002 0203 	and.w	r2, r2, #3
 80026b2:	0092      	lsls	r2, r2, #2
 80026b4:	4093      	lsls	r3, r2
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026bc:	4935      	ldr	r1, [pc, #212]	@ (8002794 <HAL_GPIO_Init+0x310>)
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	089b      	lsrs	r3, r3, #2
 80026c2:	3302      	adds	r3, #2
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ca:	4b3b      	ldr	r3, [pc, #236]	@ (80027b8 <HAL_GPIO_Init+0x334>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ee:	4a32      	ldr	r2, [pc, #200]	@ (80027b8 <HAL_GPIO_Init+0x334>)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f4:	4b30      	ldr	r3, [pc, #192]	@ (80027b8 <HAL_GPIO_Init+0x334>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002718:	4a27      	ldr	r2, [pc, #156]	@ (80027b8 <HAL_GPIO_Init+0x334>)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800271e:	4b26      	ldr	r3, [pc, #152]	@ (80027b8 <HAL_GPIO_Init+0x334>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002742:	4a1d      	ldr	r2, [pc, #116]	@ (80027b8 <HAL_GPIO_Init+0x334>)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002748:	4b1b      	ldr	r3, [pc, #108]	@ (80027b8 <HAL_GPIO_Init+0x334>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800276c:	4a12      	ldr	r2, [pc, #72]	@ (80027b8 <HAL_GPIO_Init+0x334>)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3301      	adds	r3, #1
 8002776:	61fb      	str	r3, [r7, #28]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	2b0f      	cmp	r3, #15
 800277c:	f67f ae90 	bls.w	80024a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3724      	adds	r7, #36	@ 0x24
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800
 8002794:	40013800 	.word	0x40013800
 8002798:	40020000 	.word	0x40020000
 800279c:	40020400 	.word	0x40020400
 80027a0:	40020800 	.word	0x40020800
 80027a4:	40020c00 	.word	0x40020c00
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40021400 	.word	0x40021400
 80027b0:	40021800 	.word	0x40021800
 80027b4:	40021c00 	.word	0x40021c00
 80027b8:	40013c00 	.word	0x40013c00

080027bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e267      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d075      	beq.n	80028c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027da:	4b88      	ldr	r3, [pc, #544]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d00c      	beq.n	8002800 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e6:	4b85      	ldr	r3, [pc, #532]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d112      	bne.n	8002818 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027f2:	4b82      	ldr	r3, [pc, #520]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027fe:	d10b      	bne.n	8002818 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002800:	4b7e      	ldr	r3, [pc, #504]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d05b      	beq.n	80028c4 <HAL_RCC_OscConfig+0x108>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d157      	bne.n	80028c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e242      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002820:	d106      	bne.n	8002830 <HAL_RCC_OscConfig+0x74>
 8002822:	4b76      	ldr	r3, [pc, #472]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a75      	ldr	r2, [pc, #468]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e01d      	b.n	800286c <HAL_RCC_OscConfig+0xb0>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0x98>
 800283a:	4b70      	ldr	r3, [pc, #448]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a6f      	ldr	r2, [pc, #444]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4b6d      	ldr	r3, [pc, #436]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a6c      	ldr	r2, [pc, #432]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0xb0>
 8002854:	4b69      	ldr	r3, [pc, #420]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a68      	ldr	r2, [pc, #416]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800285a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b66      	ldr	r3, [pc, #408]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a65      	ldr	r2, [pc, #404]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800286a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d013      	beq.n	800289c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe ff94 	bl	80017a0 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7fe ff90 	bl	80017a0 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	@ 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e207      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b5b      	ldr	r3, [pc, #364]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0xc0>
 800289a:	e014      	b.n	80028c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7fe ff80 	bl	80017a0 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7fe ff7c 	bl	80017a0 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	@ 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e1f3      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	4b51      	ldr	r3, [pc, #324]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0xe8>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d063      	beq.n	800299a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028d2:	4b4a      	ldr	r3, [pc, #296]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028de:	4b47      	ldr	r3, [pc, #284]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d11c      	bne.n	8002924 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ea:	4b44      	ldr	r3, [pc, #272]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d116      	bne.n	8002924 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f6:	4b41      	ldr	r3, [pc, #260]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_RCC_OscConfig+0x152>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e1c7      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	4b3b      	ldr	r3, [pc, #236]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4937      	ldr	r1, [pc, #220]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002922:	e03a      	b.n	800299a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292c:	4b34      	ldr	r3, [pc, #208]	@ (8002a00 <HAL_RCC_OscConfig+0x244>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002932:	f7fe ff35 	bl	80017a0 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800293a:	f7fe ff31 	bl	80017a0 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e1a8      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	4b2b      	ldr	r3, [pc, #172]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002958:	4b28      	ldr	r3, [pc, #160]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4925      	ldr	r1, [pc, #148]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002968:	4313      	orrs	r3, r2
 800296a:	600b      	str	r3, [r1, #0]
 800296c:	e015      	b.n	800299a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296e:	4b24      	ldr	r3, [pc, #144]	@ (8002a00 <HAL_RCC_OscConfig+0x244>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe ff14 	bl	80017a0 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297c:	f7fe ff10 	bl	80017a0 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e187      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	4b1b      	ldr	r3, [pc, #108]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d036      	beq.n	8002a14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d016      	beq.n	80029dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ae:	4b15      	ldr	r3, [pc, #84]	@ (8002a04 <HAL_RCC_OscConfig+0x248>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7fe fef4 	bl	80017a0 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029bc:	f7fe fef0 	bl	80017a0 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e167      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ce:	4b0b      	ldr	r3, [pc, #44]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80029d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x200>
 80029da:	e01b      	b.n	8002a14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029dc:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <HAL_RCC_OscConfig+0x248>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e2:	f7fe fedd 	bl	80017a0 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e8:	e00e      	b.n	8002a08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ea:	f7fe fed9 	bl	80017a0 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d907      	bls.n	8002a08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e150      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
 80029fc:	40023800 	.word	0x40023800
 8002a00:	42470000 	.word	0x42470000
 8002a04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	4b88      	ldr	r3, [pc, #544]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ea      	bne.n	80029ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8097 	beq.w	8002b50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a26:	4b81      	ldr	r3, [pc, #516]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10f      	bne.n	8002a52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	4b7d      	ldr	r3, [pc, #500]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	4a7c      	ldr	r2, [pc, #496]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a42:	4b7a      	ldr	r3, [pc, #488]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a52:	4b77      	ldr	r3, [pc, #476]	@ (8002c30 <HAL_RCC_OscConfig+0x474>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d118      	bne.n	8002a90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5e:	4b74      	ldr	r3, [pc, #464]	@ (8002c30 <HAL_RCC_OscConfig+0x474>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a73      	ldr	r2, [pc, #460]	@ (8002c30 <HAL_RCC_OscConfig+0x474>)
 8002a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6a:	f7fe fe99 	bl	80017a0 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a72:	f7fe fe95 	bl	80017a0 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e10c      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a84:	4b6a      	ldr	r3, [pc, #424]	@ (8002c30 <HAL_RCC_OscConfig+0x474>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x2ea>
 8002a98:	4b64      	ldr	r3, [pc, #400]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9c:	4a63      	ldr	r2, [pc, #396]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa4:	e01c      	b.n	8002ae0 <HAL_RCC_OscConfig+0x324>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b05      	cmp	r3, #5
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x30c>
 8002aae:	4b5f      	ldr	r3, [pc, #380]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ab4:	f043 0304 	orr.w	r3, r3, #4
 8002ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aba:	4b5c      	ldr	r3, [pc, #368]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abe:	4a5b      	ldr	r2, [pc, #364]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCC_OscConfig+0x324>
 8002ac8:	4b58      	ldr	r3, [pc, #352]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002acc:	4a57      	ldr	r2, [pc, #348]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad4:	4b55      	ldr	r3, [pc, #340]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad8:	4a54      	ldr	r2, [pc, #336]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ada:	f023 0304 	bic.w	r3, r3, #4
 8002ade:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d015      	beq.n	8002b14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7fe fe5a 	bl	80017a0 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af0:	f7fe fe56 	bl	80017a0 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e0cb      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b06:	4b49      	ldr	r3, [pc, #292]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0ee      	beq.n	8002af0 <HAL_RCC_OscConfig+0x334>
 8002b12:	e014      	b.n	8002b3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b14:	f7fe fe44 	bl	80017a0 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7fe fe40 	bl	80017a0 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e0b5      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b32:	4b3e      	ldr	r3, [pc, #248]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1ee      	bne.n	8002b1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d105      	bne.n	8002b50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b44:	4b39      	ldr	r3, [pc, #228]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	4a38      	ldr	r2, [pc, #224]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80a1 	beq.w	8002c9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b5a:	4b34      	ldr	r3, [pc, #208]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d05c      	beq.n	8002c20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d141      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6e:	4b31      	ldr	r3, [pc, #196]	@ (8002c34 <HAL_RCC_OscConfig+0x478>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe fe14 	bl	80017a0 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe fe10 	bl	80017a0 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e087      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8e:	4b27      	ldr	r3, [pc, #156]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	019b      	lsls	r3, r3, #6
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb0:	085b      	lsrs	r3, r3, #1
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	041b      	lsls	r3, r3, #16
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbc:	061b      	lsls	r3, r3, #24
 8002bbe:	491b      	ldr	r1, [pc, #108]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c34 <HAL_RCC_OscConfig+0x478>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7fe fde9 	bl	80017a0 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7fe fde5 	bl	80017a0 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e05c      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be4:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x416>
 8002bf0:	e054      	b.n	8002c9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	4b10      	ldr	r3, [pc, #64]	@ (8002c34 <HAL_RCC_OscConfig+0x478>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fdd2 	bl	80017a0 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe fdce 	bl	80017a0 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e045      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x444>
 8002c1e:	e03d      	b.n	8002c9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e038      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40007000 	.word	0x40007000
 8002c34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ec>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d028      	beq.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d121      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d11a      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c68:	4013      	ands	r3, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d111      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	3b01      	subs	r3, #1
 8002c82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d107      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800

08002cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0cc      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b68      	ldr	r3, [pc, #416]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d90c      	bls.n	8002ce8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b65      	ldr	r3, [pc, #404]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b63      	ldr	r3, [pc, #396]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0b8      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d020      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d00:	4b59      	ldr	r3, [pc, #356]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4a58      	ldr	r2, [pc, #352]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d18:	4b53      	ldr	r3, [pc, #332]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a52      	ldr	r2, [pc, #328]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d24:	4b50      	ldr	r3, [pc, #320]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	494d      	ldr	r1, [pc, #308]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d044      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	4b47      	ldr	r3, [pc, #284]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d119      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e07f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d003      	beq.n	8002d6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e06f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e067      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d8a:	4b37      	ldr	r3, [pc, #220]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f023 0203 	bic.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4934      	ldr	r1, [pc, #208]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d9c:	f7fe fd00 	bl	80017a0 <HAL_GetTick>
 8002da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	e00a      	b.n	8002dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da4:	f7fe fcfc 	bl	80017a0 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e04f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dba:	4b2b      	ldr	r3, [pc, #172]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 020c 	and.w	r2, r3, #12
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d1eb      	bne.n	8002da4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b25      	ldr	r3, [pc, #148]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d20c      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b22      	ldr	r3, [pc, #136]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b20      	ldr	r3, [pc, #128]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e032      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e00:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4916      	ldr	r1, [pc, #88]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e1e:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	490e      	ldr	r1, [pc, #56]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e32:	f000 f821 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	490a      	ldr	r1, [pc, #40]	@ (8002e6c <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	5ccb      	ldrb	r3, [r1, r3]
 8002e46:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4a:	4a09      	ldr	r2, [pc, #36]	@ (8002e70 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e4e:	4b09      	ldr	r3, [pc, #36]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fc60 	bl	8001718 <HAL_InitTick>

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023c00 	.word	0x40023c00
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	08004fb0 	.word	0x08004fb0
 8002e70:	20000000 	.word	0x20000000
 8002e74:	20000004 	.word	0x20000004

08002e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e7c:	b094      	sub	sp, #80	@ 0x50
 8002e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e90:	4b79      	ldr	r3, [pc, #484]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d00d      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	f200 80e1 	bhi.w	8003064 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0x34>
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d003      	beq.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eaa:	e0db      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eac:	4b73      	ldr	r3, [pc, #460]	@ (800307c <HAL_RCC_GetSysClockFreq+0x204>)
 8002eae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eb0:	e0db      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eb2:	4b73      	ldr	r3, [pc, #460]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x208>)
 8002eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eb6:	e0d8      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb8:	4b6f      	ldr	r3, [pc, #444]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ec0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec2:	4b6d      	ldr	r3, [pc, #436]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d063      	beq.n	8002f96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ece:	4b6a      	ldr	r3, [pc, #424]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	099b      	lsrs	r3, r3, #6
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ed8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ee6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002eea:	4622      	mov	r2, r4
 8002eec:	462b      	mov	r3, r5
 8002eee:	f04f 0000 	mov.w	r0, #0
 8002ef2:	f04f 0100 	mov.w	r1, #0
 8002ef6:	0159      	lsls	r1, r3, #5
 8002ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002efc:	0150      	lsls	r0, r2, #5
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4621      	mov	r1, r4
 8002f04:	1a51      	subs	r1, r2, r1
 8002f06:	6139      	str	r1, [r7, #16]
 8002f08:	4629      	mov	r1, r5
 8002f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f1c:	4659      	mov	r1, fp
 8002f1e:	018b      	lsls	r3, r1, #6
 8002f20:	4651      	mov	r1, sl
 8002f22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f26:	4651      	mov	r1, sl
 8002f28:	018a      	lsls	r2, r1, #6
 8002f2a:	4651      	mov	r1, sl
 8002f2c:	ebb2 0801 	subs.w	r8, r2, r1
 8002f30:	4659      	mov	r1, fp
 8002f32:	eb63 0901 	sbc.w	r9, r3, r1
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f4a:	4690      	mov	r8, r2
 8002f4c:	4699      	mov	r9, r3
 8002f4e:	4623      	mov	r3, r4
 8002f50:	eb18 0303 	adds.w	r3, r8, r3
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	462b      	mov	r3, r5
 8002f58:	eb49 0303 	adc.w	r3, r9, r3
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f6a:	4629      	mov	r1, r5
 8002f6c:	024b      	lsls	r3, r1, #9
 8002f6e:	4621      	mov	r1, r4
 8002f70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f74:	4621      	mov	r1, r4
 8002f76:	024a      	lsls	r2, r1, #9
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f7e:	2200      	movs	r2, #0
 8002f80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f88:	f7fd fdbc 	bl	8000b04 <__aeabi_uldivmod>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4613      	mov	r3, r2
 8002f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f94:	e058      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f96:	4b38      	ldr	r3, [pc, #224]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	099b      	lsrs	r3, r3, #6
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fa6:	623b      	str	r3, [r7, #32]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fb0:	4642      	mov	r2, r8
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	f04f 0000 	mov.w	r0, #0
 8002fb8:	f04f 0100 	mov.w	r1, #0
 8002fbc:	0159      	lsls	r1, r3, #5
 8002fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc2:	0150      	lsls	r0, r2, #5
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4641      	mov	r1, r8
 8002fca:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fce:	4649      	mov	r1, r9
 8002fd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fe0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fe4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fe8:	ebb2 040a 	subs.w	r4, r2, sl
 8002fec:	eb63 050b 	sbc.w	r5, r3, fp
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	00eb      	lsls	r3, r5, #3
 8002ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ffe:	00e2      	lsls	r2, r4, #3
 8003000:	4614      	mov	r4, r2
 8003002:	461d      	mov	r5, r3
 8003004:	4643      	mov	r3, r8
 8003006:	18e3      	adds	r3, r4, r3
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	464b      	mov	r3, r9
 800300c:	eb45 0303 	adc.w	r3, r5, r3
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800301e:	4629      	mov	r1, r5
 8003020:	028b      	lsls	r3, r1, #10
 8003022:	4621      	mov	r1, r4
 8003024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003028:	4621      	mov	r1, r4
 800302a:	028a      	lsls	r2, r1, #10
 800302c:	4610      	mov	r0, r2
 800302e:	4619      	mov	r1, r3
 8003030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003032:	2200      	movs	r2, #0
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	61fa      	str	r2, [r7, #28]
 8003038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800303c:	f7fd fd62 	bl	8000b04 <__aeabi_uldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4613      	mov	r3, r2
 8003046:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003048:	4b0b      	ldr	r3, [pc, #44]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	3301      	adds	r3, #1
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003058:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800305a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800305c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003060:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003062:	e002      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003064:	4b05      	ldr	r3, [pc, #20]	@ (800307c <HAL_RCC_GetSysClockFreq+0x204>)
 8003066:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800306a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800306c:	4618      	mov	r0, r3
 800306e:	3750      	adds	r7, #80	@ 0x50
 8003070:	46bd      	mov	sp, r7
 8003072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	00f42400 	.word	0x00f42400
 8003080:	007a1200 	.word	0x007a1200

08003084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e041      	b.n	800311a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fe fa16 	bl	80014dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3304      	adds	r3, #4
 80030c0:	4619      	mov	r1, r3
 80030c2:	4610      	mov	r0, r2
 80030c4:	f000 fb86 	bl	80037d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d001      	beq.n	800313c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e046      	b.n	80031ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a23      	ldr	r2, [pc, #140]	@ (80031d8 <HAL_TIM_Base_Start+0xb4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d022      	beq.n	8003194 <HAL_TIM_Base_Start+0x70>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003156:	d01d      	beq.n	8003194 <HAL_TIM_Base_Start+0x70>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1f      	ldr	r2, [pc, #124]	@ (80031dc <HAL_TIM_Base_Start+0xb8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d018      	beq.n	8003194 <HAL_TIM_Base_Start+0x70>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1e      	ldr	r2, [pc, #120]	@ (80031e0 <HAL_TIM_Base_Start+0xbc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d013      	beq.n	8003194 <HAL_TIM_Base_Start+0x70>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1c      	ldr	r2, [pc, #112]	@ (80031e4 <HAL_TIM_Base_Start+0xc0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00e      	beq.n	8003194 <HAL_TIM_Base_Start+0x70>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1b      	ldr	r2, [pc, #108]	@ (80031e8 <HAL_TIM_Base_Start+0xc4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d009      	beq.n	8003194 <HAL_TIM_Base_Start+0x70>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a19      	ldr	r2, [pc, #100]	@ (80031ec <HAL_TIM_Base_Start+0xc8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_TIM_Base_Start+0x70>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a18      	ldr	r2, [pc, #96]	@ (80031f0 <HAL_TIM_Base_Start+0xcc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d111      	bne.n	80031b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d010      	beq.n	80031c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0201 	orr.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b6:	e007      	b.n	80031c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40010000 	.word	0x40010000
 80031dc:	40000400 	.word	0x40000400
 80031e0:	40000800 	.word	0x40000800
 80031e4:	40000c00 	.word	0x40000c00
 80031e8:	40010400 	.word	0x40010400
 80031ec:	40014000 	.word	0x40014000
 80031f0:	40001800 	.word	0x40001800

080031f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e041      	b.n	800328a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fe f97e 	bl	800151c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f000 face 	bl	80037d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d109      	bne.n	80032bc <HAL_TIM_PWM_Start_IT+0x28>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	e022      	b.n	8003302 <HAL_TIM_PWM_Start_IT+0x6e>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d109      	bne.n	80032d6 <HAL_TIM_PWM_Start_IT+0x42>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	bf14      	ite	ne
 80032ce:	2301      	movne	r3, #1
 80032d0:	2300      	moveq	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	e015      	b.n	8003302 <HAL_TIM_PWM_Start_IT+0x6e>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d109      	bne.n	80032f0 <HAL_TIM_PWM_Start_IT+0x5c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e008      	b.n	8003302 <HAL_TIM_PWM_Start_IT+0x6e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e0c7      	b.n	800349a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d104      	bne.n	800331a <HAL_TIM_PWM_Start_IT+0x86>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003318:	e013      	b.n	8003342 <HAL_TIM_PWM_Start_IT+0xae>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b04      	cmp	r3, #4
 800331e:	d104      	bne.n	800332a <HAL_TIM_PWM_Start_IT+0x96>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003328:	e00b      	b.n	8003342 <HAL_TIM_PWM_Start_IT+0xae>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d104      	bne.n	800333a <HAL_TIM_PWM_Start_IT+0xa6>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003338:	e003      	b.n	8003342 <HAL_TIM_PWM_Start_IT+0xae>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2202      	movs	r2, #2
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b0c      	cmp	r3, #12
 8003346:	d841      	bhi.n	80033cc <HAL_TIM_PWM_Start_IT+0x138>
 8003348:	a201      	add	r2, pc, #4	@ (adr r2, 8003350 <HAL_TIM_PWM_Start_IT+0xbc>)
 800334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334e:	bf00      	nop
 8003350:	08003385 	.word	0x08003385
 8003354:	080033cd 	.word	0x080033cd
 8003358:	080033cd 	.word	0x080033cd
 800335c:	080033cd 	.word	0x080033cd
 8003360:	08003397 	.word	0x08003397
 8003364:	080033cd 	.word	0x080033cd
 8003368:	080033cd 	.word	0x080033cd
 800336c:	080033cd 	.word	0x080033cd
 8003370:	080033a9 	.word	0x080033a9
 8003374:	080033cd 	.word	0x080033cd
 8003378:	080033cd 	.word	0x080033cd
 800337c:	080033cd 	.word	0x080033cd
 8003380:	080033bb 	.word	0x080033bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0202 	orr.w	r2, r2, #2
 8003392:	60da      	str	r2, [r3, #12]
      break;
 8003394:	e01d      	b.n	80033d2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0204 	orr.w	r2, r2, #4
 80033a4:	60da      	str	r2, [r3, #12]
      break;
 80033a6:	e014      	b.n	80033d2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0208 	orr.w	r2, r2, #8
 80033b6:	60da      	str	r2, [r3, #12]
      break;
 80033b8:	e00b      	b.n	80033d2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0210 	orr.w	r2, r2, #16
 80033c8:	60da      	str	r2, [r3, #12]
      break;
 80033ca:	e002      	b.n	80033d2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	73fb      	strb	r3, [r7, #15]
      break;
 80033d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d15f      	bne.n	8003498 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2201      	movs	r2, #1
 80033de:	6839      	ldr	r1, [r7, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fce7 	bl	8003db4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2e      	ldr	r2, [pc, #184]	@ (80034a4 <HAL_TIM_PWM_Start_IT+0x210>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d004      	beq.n	80033fa <HAL_TIM_PWM_Start_IT+0x166>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2c      	ldr	r2, [pc, #176]	@ (80034a8 <HAL_TIM_PWM_Start_IT+0x214>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_TIM_PWM_Start_IT+0x16a>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_TIM_PWM_Start_IT+0x16c>
 80033fe:	2300      	movs	r3, #0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d007      	beq.n	8003414 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003412:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a22      	ldr	r2, [pc, #136]	@ (80034a4 <HAL_TIM_PWM_Start_IT+0x210>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d022      	beq.n	8003464 <HAL_TIM_PWM_Start_IT+0x1d0>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003426:	d01d      	beq.n	8003464 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1f      	ldr	r2, [pc, #124]	@ (80034ac <HAL_TIM_PWM_Start_IT+0x218>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d018      	beq.n	8003464 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1e      	ldr	r2, [pc, #120]	@ (80034b0 <HAL_TIM_PWM_Start_IT+0x21c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d013      	beq.n	8003464 <HAL_TIM_PWM_Start_IT+0x1d0>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1c      	ldr	r2, [pc, #112]	@ (80034b4 <HAL_TIM_PWM_Start_IT+0x220>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00e      	beq.n	8003464 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a17      	ldr	r2, [pc, #92]	@ (80034a8 <HAL_TIM_PWM_Start_IT+0x214>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d009      	beq.n	8003464 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a18      	ldr	r2, [pc, #96]	@ (80034b8 <HAL_TIM_PWM_Start_IT+0x224>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_TIM_PWM_Start_IT+0x1d0>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a17      	ldr	r2, [pc, #92]	@ (80034bc <HAL_TIM_PWM_Start_IT+0x228>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d111      	bne.n	8003488 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b06      	cmp	r3, #6
 8003474:	d010      	beq.n	8003498 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003486:	e007      	b.n	8003498 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003498:	7bfb      	ldrb	r3, [r7, #15]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40010000 	.word	0x40010000
 80034a8:	40010400 	.word	0x40010400
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40000800 	.word	0x40000800
 80034b4:	40000c00 	.word	0x40000c00
 80034b8:	40014000 	.word	0x40014000
 80034bc:	40001800 	.word	0x40001800

080034c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034da:	2302      	movs	r3, #2
 80034dc:	e0ae      	b.n	800363c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b0c      	cmp	r3, #12
 80034ea:	f200 809f 	bhi.w	800362c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034ee:	a201      	add	r2, pc, #4	@ (adr r2, 80034f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f4:	08003529 	.word	0x08003529
 80034f8:	0800362d 	.word	0x0800362d
 80034fc:	0800362d 	.word	0x0800362d
 8003500:	0800362d 	.word	0x0800362d
 8003504:	08003569 	.word	0x08003569
 8003508:	0800362d 	.word	0x0800362d
 800350c:	0800362d 	.word	0x0800362d
 8003510:	0800362d 	.word	0x0800362d
 8003514:	080035ab 	.word	0x080035ab
 8003518:	0800362d 	.word	0x0800362d
 800351c:	0800362d 	.word	0x0800362d
 8003520:	0800362d 	.word	0x0800362d
 8003524:	080035eb 	.word	0x080035eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f9f6 	bl	8003920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0208 	orr.w	r2, r2, #8
 8003542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0204 	bic.w	r2, r2, #4
 8003552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6999      	ldr	r1, [r3, #24]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	619a      	str	r2, [r3, #24]
      break;
 8003566:	e064      	b.n	8003632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fa46 	bl	8003a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6999      	ldr	r1, [r3, #24]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	021a      	lsls	r2, r3, #8
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	619a      	str	r2, [r3, #24]
      break;
 80035a8:	e043      	b.n	8003632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68b9      	ldr	r1, [r7, #8]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fa9b 	bl	8003aec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69da      	ldr	r2, [r3, #28]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0208 	orr.w	r2, r2, #8
 80035c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0204 	bic.w	r2, r2, #4
 80035d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69d9      	ldr	r1, [r3, #28]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	61da      	str	r2, [r3, #28]
      break;
 80035e8:	e023      	b.n	8003632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 faef 	bl	8003bd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69da      	ldr	r2, [r3, #28]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69d9      	ldr	r1, [r3, #28]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	021a      	lsls	r2, r3, #8
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	61da      	str	r2, [r3, #28]
      break;
 800362a:	e002      	b.n	8003632 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	75fb      	strb	r3, [r7, #23]
      break;
 8003630:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800363a:	7dfb      	ldrb	r3, [r7, #23]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_TIM_ConfigClockSource+0x1c>
 800365c:	2302      	movs	r3, #2
 800365e:	e0b4      	b.n	80037ca <HAL_TIM_ConfigClockSource+0x186>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800367e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003698:	d03e      	beq.n	8003718 <HAL_TIM_ConfigClockSource+0xd4>
 800369a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800369e:	f200 8087 	bhi.w	80037b0 <HAL_TIM_ConfigClockSource+0x16c>
 80036a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a6:	f000 8086 	beq.w	80037b6 <HAL_TIM_ConfigClockSource+0x172>
 80036aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ae:	d87f      	bhi.n	80037b0 <HAL_TIM_ConfigClockSource+0x16c>
 80036b0:	2b70      	cmp	r3, #112	@ 0x70
 80036b2:	d01a      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0xa6>
 80036b4:	2b70      	cmp	r3, #112	@ 0x70
 80036b6:	d87b      	bhi.n	80037b0 <HAL_TIM_ConfigClockSource+0x16c>
 80036b8:	2b60      	cmp	r3, #96	@ 0x60
 80036ba:	d050      	beq.n	800375e <HAL_TIM_ConfigClockSource+0x11a>
 80036bc:	2b60      	cmp	r3, #96	@ 0x60
 80036be:	d877      	bhi.n	80037b0 <HAL_TIM_ConfigClockSource+0x16c>
 80036c0:	2b50      	cmp	r3, #80	@ 0x50
 80036c2:	d03c      	beq.n	800373e <HAL_TIM_ConfigClockSource+0xfa>
 80036c4:	2b50      	cmp	r3, #80	@ 0x50
 80036c6:	d873      	bhi.n	80037b0 <HAL_TIM_ConfigClockSource+0x16c>
 80036c8:	2b40      	cmp	r3, #64	@ 0x40
 80036ca:	d058      	beq.n	800377e <HAL_TIM_ConfigClockSource+0x13a>
 80036cc:	2b40      	cmp	r3, #64	@ 0x40
 80036ce:	d86f      	bhi.n	80037b0 <HAL_TIM_ConfigClockSource+0x16c>
 80036d0:	2b30      	cmp	r3, #48	@ 0x30
 80036d2:	d064      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x15a>
 80036d4:	2b30      	cmp	r3, #48	@ 0x30
 80036d6:	d86b      	bhi.n	80037b0 <HAL_TIM_ConfigClockSource+0x16c>
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d060      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x15a>
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d867      	bhi.n	80037b0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d05c      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x15a>
 80036e4:	2b10      	cmp	r3, #16
 80036e6:	d05a      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x15a>
 80036e8:	e062      	b.n	80037b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036fa:	f000 fb3b 	bl	8003d74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800370c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	609a      	str	r2, [r3, #8]
      break;
 8003716:	e04f      	b.n	80037b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003728:	f000 fb24 	bl	8003d74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800373a:	609a      	str	r2, [r3, #8]
      break;
 800373c:	e03c      	b.n	80037b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800374a:	461a      	mov	r2, r3
 800374c:	f000 fa98 	bl	8003c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2150      	movs	r1, #80	@ 0x50
 8003756:	4618      	mov	r0, r3
 8003758:	f000 faf1 	bl	8003d3e <TIM_ITRx_SetConfig>
      break;
 800375c:	e02c      	b.n	80037b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800376a:	461a      	mov	r2, r3
 800376c:	f000 fab7 	bl	8003cde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2160      	movs	r1, #96	@ 0x60
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fae1 	bl	8003d3e <TIM_ITRx_SetConfig>
      break;
 800377c:	e01c      	b.n	80037b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800378a:	461a      	mov	r2, r3
 800378c:	f000 fa78 	bl	8003c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2140      	movs	r1, #64	@ 0x40
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fad1 	bl	8003d3e <TIM_ITRx_SetConfig>
      break;
 800379c:	e00c      	b.n	80037b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4619      	mov	r1, r3
 80037a8:	4610      	mov	r0, r2
 80037aa:	f000 fac8 	bl	8003d3e <TIM_ITRx_SetConfig>
      break;
 80037ae:	e003      	b.n	80037b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
      break;
 80037b4:	e000      	b.n	80037b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a43      	ldr	r2, [pc, #268]	@ (80038f4 <TIM_Base_SetConfig+0x120>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d013      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f2:	d00f      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a40      	ldr	r2, [pc, #256]	@ (80038f8 <TIM_Base_SetConfig+0x124>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00b      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a3f      	ldr	r2, [pc, #252]	@ (80038fc <TIM_Base_SetConfig+0x128>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d007      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a3e      	ldr	r2, [pc, #248]	@ (8003900 <TIM_Base_SetConfig+0x12c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a3d      	ldr	r2, [pc, #244]	@ (8003904 <TIM_Base_SetConfig+0x130>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d108      	bne.n	8003826 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800381a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a32      	ldr	r2, [pc, #200]	@ (80038f4 <TIM_Base_SetConfig+0x120>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d02b      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003834:	d027      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a2f      	ldr	r2, [pc, #188]	@ (80038f8 <TIM_Base_SetConfig+0x124>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d023      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2e      	ldr	r2, [pc, #184]	@ (80038fc <TIM_Base_SetConfig+0x128>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01f      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a2d      	ldr	r2, [pc, #180]	@ (8003900 <TIM_Base_SetConfig+0x12c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d01b      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2c      	ldr	r2, [pc, #176]	@ (8003904 <TIM_Base_SetConfig+0x130>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d017      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2b      	ldr	r2, [pc, #172]	@ (8003908 <TIM_Base_SetConfig+0x134>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a2a      	ldr	r2, [pc, #168]	@ (800390c <TIM_Base_SetConfig+0x138>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00f      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a29      	ldr	r2, [pc, #164]	@ (8003910 <TIM_Base_SetConfig+0x13c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00b      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a28      	ldr	r2, [pc, #160]	@ (8003914 <TIM_Base_SetConfig+0x140>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d007      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a27      	ldr	r2, [pc, #156]	@ (8003918 <TIM_Base_SetConfig+0x144>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d003      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a26      	ldr	r2, [pc, #152]	@ (800391c <TIM_Base_SetConfig+0x148>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d108      	bne.n	8003898 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800388c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a0e      	ldr	r2, [pc, #56]	@ (80038f4 <TIM_Base_SetConfig+0x120>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d003      	beq.n	80038c6 <TIM_Base_SetConfig+0xf2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a10      	ldr	r2, [pc, #64]	@ (8003904 <TIM_Base_SetConfig+0x130>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d103      	bne.n	80038ce <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f043 0204 	orr.w	r2, r3, #4
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	601a      	str	r2, [r3, #0]
}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40010000 	.word	0x40010000
 80038f8:	40000400 	.word	0x40000400
 80038fc:	40000800 	.word	0x40000800
 8003900:	40000c00 	.word	0x40000c00
 8003904:	40010400 	.word	0x40010400
 8003908:	40014000 	.word	0x40014000
 800390c:	40014400 	.word	0x40014400
 8003910:	40014800 	.word	0x40014800
 8003914:	40001800 	.word	0x40001800
 8003918:	40001c00 	.word	0x40001c00
 800391c:	40002000 	.word	0x40002000

08003920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f023 0201 	bic.w	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800394e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0303 	bic.w	r3, r3, #3
 8003956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f023 0302 	bic.w	r3, r3, #2
 8003968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a20      	ldr	r2, [pc, #128]	@ (80039f8 <TIM_OC1_SetConfig+0xd8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d003      	beq.n	8003984 <TIM_OC1_SetConfig+0x64>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a1f      	ldr	r2, [pc, #124]	@ (80039fc <TIM_OC1_SetConfig+0xdc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d10c      	bne.n	800399e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f023 0308 	bic.w	r3, r3, #8
 800398a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f023 0304 	bic.w	r3, r3, #4
 800399c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a15      	ldr	r2, [pc, #84]	@ (80039f8 <TIM_OC1_SetConfig+0xd8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d003      	beq.n	80039ae <TIM_OC1_SetConfig+0x8e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a14      	ldr	r2, [pc, #80]	@ (80039fc <TIM_OC1_SetConfig+0xdc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d111      	bne.n	80039d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	621a      	str	r2, [r3, #32]
}
 80039ec:	bf00      	nop
 80039ee:	371c      	adds	r7, #28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40010400 	.word	0x40010400

08003a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f023 0210 	bic.w	r2, r3, #16
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	021b      	lsls	r3, r3, #8
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f023 0320 	bic.w	r3, r3, #32
 8003a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a22      	ldr	r2, [pc, #136]	@ (8003ae4 <TIM_OC2_SetConfig+0xe4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d003      	beq.n	8003a68 <TIM_OC2_SetConfig+0x68>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a21      	ldr	r2, [pc, #132]	@ (8003ae8 <TIM_OC2_SetConfig+0xe8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d10d      	bne.n	8003a84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a17      	ldr	r2, [pc, #92]	@ (8003ae4 <TIM_OC2_SetConfig+0xe4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <TIM_OC2_SetConfig+0x94>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a16      	ldr	r2, [pc, #88]	@ (8003ae8 <TIM_OC2_SetConfig+0xe8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d113      	bne.n	8003abc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40010000 	.word	0x40010000
 8003ae8:	40010400 	.word	0x40010400

08003aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0303 	bic.w	r3, r3, #3
 8003b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a21      	ldr	r2, [pc, #132]	@ (8003bcc <TIM_OC3_SetConfig+0xe0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d003      	beq.n	8003b52 <TIM_OC3_SetConfig+0x66>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a20      	ldr	r2, [pc, #128]	@ (8003bd0 <TIM_OC3_SetConfig+0xe4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10d      	bne.n	8003b6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a16      	ldr	r2, [pc, #88]	@ (8003bcc <TIM_OC3_SetConfig+0xe0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d003      	beq.n	8003b7e <TIM_OC3_SetConfig+0x92>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a15      	ldr	r2, [pc, #84]	@ (8003bd0 <TIM_OC3_SetConfig+0xe4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d113      	bne.n	8003ba6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	621a      	str	r2, [r3, #32]
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	40010000 	.word	0x40010000
 8003bd0:	40010400 	.word	0x40010400

08003bd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	031b      	lsls	r3, r3, #12
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a12      	ldr	r2, [pc, #72]	@ (8003c78 <TIM_OC4_SetConfig+0xa4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_OC4_SetConfig+0x68>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a11      	ldr	r2, [pc, #68]	@ (8003c7c <TIM_OC4_SetConfig+0xa8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d109      	bne.n	8003c50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	019b      	lsls	r3, r3, #6
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	40010400 	.word	0x40010400

08003c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f023 0201 	bic.w	r2, r3, #1
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f023 030a 	bic.w	r3, r3, #10
 8003cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	621a      	str	r2, [r3, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b087      	sub	sp, #28
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f023 0210 	bic.w	r2, r3, #16
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	031b      	lsls	r3, r3, #12
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b085      	sub	sp, #20
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f043 0307 	orr.w	r3, r3, #7
 8003d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	609a      	str	r2, [r3, #8]
}
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	021a      	lsls	r2, r3, #8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	609a      	str	r2, [r3, #8]
}
 8003da8:	bf00      	nop
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a1a      	ldr	r2, [r3, #32]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a1a      	ldr	r2, [r3, #32]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dec:	431a      	orrs	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e05a      	b.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a21      	ldr	r2, [pc, #132]	@ (8003edc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d022      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e64:	d01d      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d018      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1b      	ldr	r2, [pc, #108]	@ (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d013      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00e      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a18      	ldr	r2, [pc, #96]	@ (8003eec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d009      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a17      	ldr	r2, [pc, #92]	@ (8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d004      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a15      	ldr	r2, [pc, #84]	@ (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d10c      	bne.n	8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ea8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	40000400 	.word	0x40000400
 8003ee4:	40000800 	.word	0x40000800
 8003ee8:	40000c00 	.word	0x40000c00
 8003eec:	40010400 	.word	0x40010400
 8003ef0:	40014000 	.word	0x40014000
 8003ef4:	40001800 	.word	0x40001800

08003ef8 <memset>:
 8003ef8:	4402      	add	r2, r0
 8003efa:	4603      	mov	r3, r0
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d100      	bne.n	8003f02 <memset+0xa>
 8003f00:	4770      	bx	lr
 8003f02:	f803 1b01 	strb.w	r1, [r3], #1
 8003f06:	e7f9      	b.n	8003efc <memset+0x4>

08003f08 <__libc_init_array>:
 8003f08:	b570      	push	{r4, r5, r6, lr}
 8003f0a:	4d0d      	ldr	r5, [pc, #52]	@ (8003f40 <__libc_init_array+0x38>)
 8003f0c:	4c0d      	ldr	r4, [pc, #52]	@ (8003f44 <__libc_init_array+0x3c>)
 8003f0e:	1b64      	subs	r4, r4, r5
 8003f10:	10a4      	asrs	r4, r4, #2
 8003f12:	2600      	movs	r6, #0
 8003f14:	42a6      	cmp	r6, r4
 8003f16:	d109      	bne.n	8003f2c <__libc_init_array+0x24>
 8003f18:	4d0b      	ldr	r5, [pc, #44]	@ (8003f48 <__libc_init_array+0x40>)
 8003f1a:	4c0c      	ldr	r4, [pc, #48]	@ (8003f4c <__libc_init_array+0x44>)
 8003f1c:	f001 f83c 	bl	8004f98 <_init>
 8003f20:	1b64      	subs	r4, r4, r5
 8003f22:	10a4      	asrs	r4, r4, #2
 8003f24:	2600      	movs	r6, #0
 8003f26:	42a6      	cmp	r6, r4
 8003f28:	d105      	bne.n	8003f36 <__libc_init_array+0x2e>
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}
 8003f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f30:	4798      	blx	r3
 8003f32:	3601      	adds	r6, #1
 8003f34:	e7ee      	b.n	8003f14 <__libc_init_array+0xc>
 8003f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f3a:	4798      	blx	r3
 8003f3c:	3601      	adds	r6, #1
 8003f3e:	e7f2      	b.n	8003f26 <__libc_init_array+0x1e>
 8003f40:	080051a8 	.word	0x080051a8
 8003f44:	080051a8 	.word	0x080051a8
 8003f48:	080051a8 	.word	0x080051a8
 8003f4c:	080051ac 	.word	0x080051ac

08003f50 <sin>:
 8003f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f52:	ec53 2b10 	vmov	r2, r3, d0
 8003f56:	4826      	ldr	r0, [pc, #152]	@ (8003ff0 <sin+0xa0>)
 8003f58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003f5c:	4281      	cmp	r1, r0
 8003f5e:	d807      	bhi.n	8003f70 <sin+0x20>
 8003f60:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003fe8 <sin+0x98>
 8003f64:	2000      	movs	r0, #0
 8003f66:	b005      	add	sp, #20
 8003f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f6c:	f000 b90c 	b.w	8004188 <__kernel_sin>
 8003f70:	4820      	ldr	r0, [pc, #128]	@ (8003ff4 <sin+0xa4>)
 8003f72:	4281      	cmp	r1, r0
 8003f74:	d908      	bls.n	8003f88 <sin+0x38>
 8003f76:	4610      	mov	r0, r2
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f7fc f929 	bl	80001d0 <__aeabi_dsub>
 8003f7e:	ec41 0b10 	vmov	d0, r0, r1
 8003f82:	b005      	add	sp, #20
 8003f84:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f88:	4668      	mov	r0, sp
 8003f8a:	f000 f9b9 	bl	8004300 <__ieee754_rem_pio2>
 8003f8e:	f000 0003 	and.w	r0, r0, #3
 8003f92:	2801      	cmp	r0, #1
 8003f94:	d00c      	beq.n	8003fb0 <sin+0x60>
 8003f96:	2802      	cmp	r0, #2
 8003f98:	d011      	beq.n	8003fbe <sin+0x6e>
 8003f9a:	b9e8      	cbnz	r0, 8003fd8 <sin+0x88>
 8003f9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003fa0:	ed9d 0b00 	vldr	d0, [sp]
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	f000 f8ef 	bl	8004188 <__kernel_sin>
 8003faa:	ec51 0b10 	vmov	r0, r1, d0
 8003fae:	e7e6      	b.n	8003f7e <sin+0x2e>
 8003fb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003fb4:	ed9d 0b00 	vldr	d0, [sp]
 8003fb8:	f000 f81e 	bl	8003ff8 <__kernel_cos>
 8003fbc:	e7f5      	b.n	8003faa <sin+0x5a>
 8003fbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003fc2:	ed9d 0b00 	vldr	d0, [sp]
 8003fc6:	2001      	movs	r0, #1
 8003fc8:	f000 f8de 	bl	8004188 <__kernel_sin>
 8003fcc:	ec53 2b10 	vmov	r2, r3, d0
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003fd6:	e7d2      	b.n	8003f7e <sin+0x2e>
 8003fd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003fdc:	ed9d 0b00 	vldr	d0, [sp]
 8003fe0:	f000 f80a 	bl	8003ff8 <__kernel_cos>
 8003fe4:	e7f2      	b.n	8003fcc <sin+0x7c>
 8003fe6:	bf00      	nop
	...
 8003ff0:	3fe921fb 	.word	0x3fe921fb
 8003ff4:	7fefffff 	.word	0x7fefffff

08003ff8 <__kernel_cos>:
 8003ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ffc:	ec57 6b10 	vmov	r6, r7, d0
 8004000:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004004:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8004008:	ed8d 1b00 	vstr	d1, [sp]
 800400c:	d206      	bcs.n	800401c <__kernel_cos+0x24>
 800400e:	4630      	mov	r0, r6
 8004010:	4639      	mov	r1, r7
 8004012:	f7fc fd2f 	bl	8000a74 <__aeabi_d2iz>
 8004016:	2800      	cmp	r0, #0
 8004018:	f000 8088 	beq.w	800412c <__kernel_cos+0x134>
 800401c:	4632      	mov	r2, r6
 800401e:	463b      	mov	r3, r7
 8004020:	4630      	mov	r0, r6
 8004022:	4639      	mov	r1, r7
 8004024:	f7fc fa8c 	bl	8000540 <__aeabi_dmul>
 8004028:	4b51      	ldr	r3, [pc, #324]	@ (8004170 <__kernel_cos+0x178>)
 800402a:	2200      	movs	r2, #0
 800402c:	4604      	mov	r4, r0
 800402e:	460d      	mov	r5, r1
 8004030:	f7fc fa86 	bl	8000540 <__aeabi_dmul>
 8004034:	a340      	add	r3, pc, #256	@ (adr r3, 8004138 <__kernel_cos+0x140>)
 8004036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403a:	4682      	mov	sl, r0
 800403c:	468b      	mov	fp, r1
 800403e:	4620      	mov	r0, r4
 8004040:	4629      	mov	r1, r5
 8004042:	f7fc fa7d 	bl	8000540 <__aeabi_dmul>
 8004046:	a33e      	add	r3, pc, #248	@ (adr r3, 8004140 <__kernel_cos+0x148>)
 8004048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404c:	f7fc f8c2 	bl	80001d4 <__adddf3>
 8004050:	4622      	mov	r2, r4
 8004052:	462b      	mov	r3, r5
 8004054:	f7fc fa74 	bl	8000540 <__aeabi_dmul>
 8004058:	a33b      	add	r3, pc, #236	@ (adr r3, 8004148 <__kernel_cos+0x150>)
 800405a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405e:	f7fc f8b7 	bl	80001d0 <__aeabi_dsub>
 8004062:	4622      	mov	r2, r4
 8004064:	462b      	mov	r3, r5
 8004066:	f7fc fa6b 	bl	8000540 <__aeabi_dmul>
 800406a:	a339      	add	r3, pc, #228	@ (adr r3, 8004150 <__kernel_cos+0x158>)
 800406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004070:	f7fc f8b0 	bl	80001d4 <__adddf3>
 8004074:	4622      	mov	r2, r4
 8004076:	462b      	mov	r3, r5
 8004078:	f7fc fa62 	bl	8000540 <__aeabi_dmul>
 800407c:	a336      	add	r3, pc, #216	@ (adr r3, 8004158 <__kernel_cos+0x160>)
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	f7fc f8a5 	bl	80001d0 <__aeabi_dsub>
 8004086:	4622      	mov	r2, r4
 8004088:	462b      	mov	r3, r5
 800408a:	f7fc fa59 	bl	8000540 <__aeabi_dmul>
 800408e:	a334      	add	r3, pc, #208	@ (adr r3, 8004160 <__kernel_cos+0x168>)
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	f7fc f89e 	bl	80001d4 <__adddf3>
 8004098:	4622      	mov	r2, r4
 800409a:	462b      	mov	r3, r5
 800409c:	f7fc fa50 	bl	8000540 <__aeabi_dmul>
 80040a0:	4622      	mov	r2, r4
 80040a2:	462b      	mov	r3, r5
 80040a4:	f7fc fa4c 	bl	8000540 <__aeabi_dmul>
 80040a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040ac:	4604      	mov	r4, r0
 80040ae:	460d      	mov	r5, r1
 80040b0:	4630      	mov	r0, r6
 80040b2:	4639      	mov	r1, r7
 80040b4:	f7fc fa44 	bl	8000540 <__aeabi_dmul>
 80040b8:	460b      	mov	r3, r1
 80040ba:	4602      	mov	r2, r0
 80040bc:	4629      	mov	r1, r5
 80040be:	4620      	mov	r0, r4
 80040c0:	f7fc f886 	bl	80001d0 <__aeabi_dsub>
 80040c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004174 <__kernel_cos+0x17c>)
 80040c6:	4598      	cmp	r8, r3
 80040c8:	4606      	mov	r6, r0
 80040ca:	460f      	mov	r7, r1
 80040cc:	d810      	bhi.n	80040f0 <__kernel_cos+0xf8>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4650      	mov	r0, sl
 80040d4:	4659      	mov	r1, fp
 80040d6:	f7fc f87b 	bl	80001d0 <__aeabi_dsub>
 80040da:	460b      	mov	r3, r1
 80040dc:	4926      	ldr	r1, [pc, #152]	@ (8004178 <__kernel_cos+0x180>)
 80040de:	4602      	mov	r2, r0
 80040e0:	2000      	movs	r0, #0
 80040e2:	f7fc f875 	bl	80001d0 <__aeabi_dsub>
 80040e6:	ec41 0b10 	vmov	d0, r0, r1
 80040ea:	b003      	add	sp, #12
 80040ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f0:	4b22      	ldr	r3, [pc, #136]	@ (800417c <__kernel_cos+0x184>)
 80040f2:	4921      	ldr	r1, [pc, #132]	@ (8004178 <__kernel_cos+0x180>)
 80040f4:	4598      	cmp	r8, r3
 80040f6:	bf8c      	ite	hi
 80040f8:	4d21      	ldrhi	r5, [pc, #132]	@ (8004180 <__kernel_cos+0x188>)
 80040fa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80040fe:	2400      	movs	r4, #0
 8004100:	4622      	mov	r2, r4
 8004102:	462b      	mov	r3, r5
 8004104:	2000      	movs	r0, #0
 8004106:	f7fc f863 	bl	80001d0 <__aeabi_dsub>
 800410a:	4622      	mov	r2, r4
 800410c:	4680      	mov	r8, r0
 800410e:	4689      	mov	r9, r1
 8004110:	462b      	mov	r3, r5
 8004112:	4650      	mov	r0, sl
 8004114:	4659      	mov	r1, fp
 8004116:	f7fc f85b 	bl	80001d0 <__aeabi_dsub>
 800411a:	4632      	mov	r2, r6
 800411c:	463b      	mov	r3, r7
 800411e:	f7fc f857 	bl	80001d0 <__aeabi_dsub>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4640      	mov	r0, r8
 8004128:	4649      	mov	r1, r9
 800412a:	e7da      	b.n	80040e2 <__kernel_cos+0xea>
 800412c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8004168 <__kernel_cos+0x170>
 8004130:	e7db      	b.n	80040ea <__kernel_cos+0xf2>
 8004132:	bf00      	nop
 8004134:	f3af 8000 	nop.w
 8004138:	be8838d4 	.word	0xbe8838d4
 800413c:	bda8fae9 	.word	0xbda8fae9
 8004140:	bdb4b1c4 	.word	0xbdb4b1c4
 8004144:	3e21ee9e 	.word	0x3e21ee9e
 8004148:	809c52ad 	.word	0x809c52ad
 800414c:	3e927e4f 	.word	0x3e927e4f
 8004150:	19cb1590 	.word	0x19cb1590
 8004154:	3efa01a0 	.word	0x3efa01a0
 8004158:	16c15177 	.word	0x16c15177
 800415c:	3f56c16c 	.word	0x3f56c16c
 8004160:	5555554c 	.word	0x5555554c
 8004164:	3fa55555 	.word	0x3fa55555
 8004168:	00000000 	.word	0x00000000
 800416c:	3ff00000 	.word	0x3ff00000
 8004170:	3fe00000 	.word	0x3fe00000
 8004174:	3fd33332 	.word	0x3fd33332
 8004178:	3ff00000 	.word	0x3ff00000
 800417c:	3fe90000 	.word	0x3fe90000
 8004180:	3fd20000 	.word	0x3fd20000
 8004184:	00000000 	.word	0x00000000

08004188 <__kernel_sin>:
 8004188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418c:	ec55 4b10 	vmov	r4, r5, d0
 8004190:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004194:	b085      	sub	sp, #20
 8004196:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800419a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800419e:	4680      	mov	r8, r0
 80041a0:	d205      	bcs.n	80041ae <__kernel_sin+0x26>
 80041a2:	4620      	mov	r0, r4
 80041a4:	4629      	mov	r1, r5
 80041a6:	f7fc fc65 	bl	8000a74 <__aeabi_d2iz>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d052      	beq.n	8004254 <__kernel_sin+0xcc>
 80041ae:	4622      	mov	r2, r4
 80041b0:	462b      	mov	r3, r5
 80041b2:	4620      	mov	r0, r4
 80041b4:	4629      	mov	r1, r5
 80041b6:	f7fc f9c3 	bl	8000540 <__aeabi_dmul>
 80041ba:	4682      	mov	sl, r0
 80041bc:	468b      	mov	fp, r1
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4620      	mov	r0, r4
 80041c4:	4629      	mov	r1, r5
 80041c6:	f7fc f9bb 	bl	8000540 <__aeabi_dmul>
 80041ca:	a342      	add	r3, pc, #264	@ (adr r3, 80042d4 <__kernel_sin+0x14c>)
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	e9cd 0100 	strd	r0, r1, [sp]
 80041d4:	4650      	mov	r0, sl
 80041d6:	4659      	mov	r1, fp
 80041d8:	f7fc f9b2 	bl	8000540 <__aeabi_dmul>
 80041dc:	a33f      	add	r3, pc, #252	@ (adr r3, 80042dc <__kernel_sin+0x154>)
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	f7fb fff5 	bl	80001d0 <__aeabi_dsub>
 80041e6:	4652      	mov	r2, sl
 80041e8:	465b      	mov	r3, fp
 80041ea:	f7fc f9a9 	bl	8000540 <__aeabi_dmul>
 80041ee:	a33d      	add	r3, pc, #244	@ (adr r3, 80042e4 <__kernel_sin+0x15c>)
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f7fb ffee 	bl	80001d4 <__adddf3>
 80041f8:	4652      	mov	r2, sl
 80041fa:	465b      	mov	r3, fp
 80041fc:	f7fc f9a0 	bl	8000540 <__aeabi_dmul>
 8004200:	a33a      	add	r3, pc, #232	@ (adr r3, 80042ec <__kernel_sin+0x164>)
 8004202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004206:	f7fb ffe3 	bl	80001d0 <__aeabi_dsub>
 800420a:	4652      	mov	r2, sl
 800420c:	465b      	mov	r3, fp
 800420e:	f7fc f997 	bl	8000540 <__aeabi_dmul>
 8004212:	a338      	add	r3, pc, #224	@ (adr r3, 80042f4 <__kernel_sin+0x16c>)
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f7fb ffdc 	bl	80001d4 <__adddf3>
 800421c:	4606      	mov	r6, r0
 800421e:	460f      	mov	r7, r1
 8004220:	f1b8 0f00 	cmp.w	r8, #0
 8004224:	d11b      	bne.n	800425e <__kernel_sin+0xd6>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4650      	mov	r0, sl
 800422c:	4659      	mov	r1, fp
 800422e:	f7fc f987 	bl	8000540 <__aeabi_dmul>
 8004232:	a325      	add	r3, pc, #148	@ (adr r3, 80042c8 <__kernel_sin+0x140>)
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	f7fb ffca 	bl	80001d0 <__aeabi_dsub>
 800423c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004240:	f7fc f97e 	bl	8000540 <__aeabi_dmul>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4620      	mov	r0, r4
 800424a:	4629      	mov	r1, r5
 800424c:	f7fb ffc2 	bl	80001d4 <__adddf3>
 8004250:	4604      	mov	r4, r0
 8004252:	460d      	mov	r5, r1
 8004254:	ec45 4b10 	vmov	d0, r4, r5
 8004258:	b005      	add	sp, #20
 800425a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800425e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004262:	4b1b      	ldr	r3, [pc, #108]	@ (80042d0 <__kernel_sin+0x148>)
 8004264:	2200      	movs	r2, #0
 8004266:	f7fc f96b 	bl	8000540 <__aeabi_dmul>
 800426a:	4632      	mov	r2, r6
 800426c:	4680      	mov	r8, r0
 800426e:	4689      	mov	r9, r1
 8004270:	463b      	mov	r3, r7
 8004272:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004276:	f7fc f963 	bl	8000540 <__aeabi_dmul>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4640      	mov	r0, r8
 8004280:	4649      	mov	r1, r9
 8004282:	f7fb ffa5 	bl	80001d0 <__aeabi_dsub>
 8004286:	4652      	mov	r2, sl
 8004288:	465b      	mov	r3, fp
 800428a:	f7fc f959 	bl	8000540 <__aeabi_dmul>
 800428e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004292:	f7fb ff9d 	bl	80001d0 <__aeabi_dsub>
 8004296:	a30c      	add	r3, pc, #48	@ (adr r3, 80042c8 <__kernel_sin+0x140>)
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	4606      	mov	r6, r0
 800429e:	460f      	mov	r7, r1
 80042a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042a4:	f7fc f94c 	bl	8000540 <__aeabi_dmul>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4630      	mov	r0, r6
 80042ae:	4639      	mov	r1, r7
 80042b0:	f7fb ff90 	bl	80001d4 <__adddf3>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4620      	mov	r0, r4
 80042ba:	4629      	mov	r1, r5
 80042bc:	f7fb ff88 	bl	80001d0 <__aeabi_dsub>
 80042c0:	e7c6      	b.n	8004250 <__kernel_sin+0xc8>
 80042c2:	bf00      	nop
 80042c4:	f3af 8000 	nop.w
 80042c8:	55555549 	.word	0x55555549
 80042cc:	3fc55555 	.word	0x3fc55555
 80042d0:	3fe00000 	.word	0x3fe00000
 80042d4:	5acfd57c 	.word	0x5acfd57c
 80042d8:	3de5d93a 	.word	0x3de5d93a
 80042dc:	8a2b9ceb 	.word	0x8a2b9ceb
 80042e0:	3e5ae5e6 	.word	0x3e5ae5e6
 80042e4:	57b1fe7d 	.word	0x57b1fe7d
 80042e8:	3ec71de3 	.word	0x3ec71de3
 80042ec:	19c161d5 	.word	0x19c161d5
 80042f0:	3f2a01a0 	.word	0x3f2a01a0
 80042f4:	1110f8a6 	.word	0x1110f8a6
 80042f8:	3f811111 	.word	0x3f811111
 80042fc:	00000000 	.word	0x00000000

08004300 <__ieee754_rem_pio2>:
 8004300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004304:	ec57 6b10 	vmov	r6, r7, d0
 8004308:	4bc5      	ldr	r3, [pc, #788]	@ (8004620 <__ieee754_rem_pio2+0x320>)
 800430a:	b08d      	sub	sp, #52	@ 0x34
 800430c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004310:	4598      	cmp	r8, r3
 8004312:	4604      	mov	r4, r0
 8004314:	9704      	str	r7, [sp, #16]
 8004316:	d807      	bhi.n	8004328 <__ieee754_rem_pio2+0x28>
 8004318:	2200      	movs	r2, #0
 800431a:	2300      	movs	r3, #0
 800431c:	ed80 0b00 	vstr	d0, [r0]
 8004320:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004324:	2500      	movs	r5, #0
 8004326:	e028      	b.n	800437a <__ieee754_rem_pio2+0x7a>
 8004328:	4bbe      	ldr	r3, [pc, #760]	@ (8004624 <__ieee754_rem_pio2+0x324>)
 800432a:	4598      	cmp	r8, r3
 800432c:	d878      	bhi.n	8004420 <__ieee754_rem_pio2+0x120>
 800432e:	9b04      	ldr	r3, [sp, #16]
 8004330:	4dbd      	ldr	r5, [pc, #756]	@ (8004628 <__ieee754_rem_pio2+0x328>)
 8004332:	2b00      	cmp	r3, #0
 8004334:	4630      	mov	r0, r6
 8004336:	a3ac      	add	r3, pc, #688	@ (adr r3, 80045e8 <__ieee754_rem_pio2+0x2e8>)
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	4639      	mov	r1, r7
 800433e:	dd38      	ble.n	80043b2 <__ieee754_rem_pio2+0xb2>
 8004340:	f7fb ff46 	bl	80001d0 <__aeabi_dsub>
 8004344:	45a8      	cmp	r8, r5
 8004346:	4606      	mov	r6, r0
 8004348:	460f      	mov	r7, r1
 800434a:	d01a      	beq.n	8004382 <__ieee754_rem_pio2+0x82>
 800434c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80045f0 <__ieee754_rem_pio2+0x2f0>)
 800434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004352:	f7fb ff3d 	bl	80001d0 <__aeabi_dsub>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4680      	mov	r8, r0
 800435c:	4689      	mov	r9, r1
 800435e:	4630      	mov	r0, r6
 8004360:	4639      	mov	r1, r7
 8004362:	f7fb ff35 	bl	80001d0 <__aeabi_dsub>
 8004366:	a3a2      	add	r3, pc, #648	@ (adr r3, 80045f0 <__ieee754_rem_pio2+0x2f0>)
 8004368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436c:	f7fb ff30 	bl	80001d0 <__aeabi_dsub>
 8004370:	e9c4 8900 	strd	r8, r9, [r4]
 8004374:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004378:	2501      	movs	r5, #1
 800437a:	4628      	mov	r0, r5
 800437c:	b00d      	add	sp, #52	@ 0x34
 800437e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004382:	a39d      	add	r3, pc, #628	@ (adr r3, 80045f8 <__ieee754_rem_pio2+0x2f8>)
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	f7fb ff22 	bl	80001d0 <__aeabi_dsub>
 800438c:	a39c      	add	r3, pc, #624	@ (adr r3, 8004600 <__ieee754_rem_pio2+0x300>)
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	4606      	mov	r6, r0
 8004394:	460f      	mov	r7, r1
 8004396:	f7fb ff1b 	bl	80001d0 <__aeabi_dsub>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4680      	mov	r8, r0
 80043a0:	4689      	mov	r9, r1
 80043a2:	4630      	mov	r0, r6
 80043a4:	4639      	mov	r1, r7
 80043a6:	f7fb ff13 	bl	80001d0 <__aeabi_dsub>
 80043aa:	a395      	add	r3, pc, #596	@ (adr r3, 8004600 <__ieee754_rem_pio2+0x300>)
 80043ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b0:	e7dc      	b.n	800436c <__ieee754_rem_pio2+0x6c>
 80043b2:	f7fb ff0f 	bl	80001d4 <__adddf3>
 80043b6:	45a8      	cmp	r8, r5
 80043b8:	4606      	mov	r6, r0
 80043ba:	460f      	mov	r7, r1
 80043bc:	d018      	beq.n	80043f0 <__ieee754_rem_pio2+0xf0>
 80043be:	a38c      	add	r3, pc, #560	@ (adr r3, 80045f0 <__ieee754_rem_pio2+0x2f0>)
 80043c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c4:	f7fb ff06 	bl	80001d4 <__adddf3>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4680      	mov	r8, r0
 80043ce:	4689      	mov	r9, r1
 80043d0:	4630      	mov	r0, r6
 80043d2:	4639      	mov	r1, r7
 80043d4:	f7fb fefc 	bl	80001d0 <__aeabi_dsub>
 80043d8:	a385      	add	r3, pc, #532	@ (adr r3, 80045f0 <__ieee754_rem_pio2+0x2f0>)
 80043da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043de:	f7fb fef9 	bl	80001d4 <__adddf3>
 80043e2:	f04f 35ff 	mov.w	r5, #4294967295
 80043e6:	e9c4 8900 	strd	r8, r9, [r4]
 80043ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80043ee:	e7c4      	b.n	800437a <__ieee754_rem_pio2+0x7a>
 80043f0:	a381      	add	r3, pc, #516	@ (adr r3, 80045f8 <__ieee754_rem_pio2+0x2f8>)
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	f7fb feed 	bl	80001d4 <__adddf3>
 80043fa:	a381      	add	r3, pc, #516	@ (adr r3, 8004600 <__ieee754_rem_pio2+0x300>)
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	4606      	mov	r6, r0
 8004402:	460f      	mov	r7, r1
 8004404:	f7fb fee6 	bl	80001d4 <__adddf3>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4680      	mov	r8, r0
 800440e:	4689      	mov	r9, r1
 8004410:	4630      	mov	r0, r6
 8004412:	4639      	mov	r1, r7
 8004414:	f7fb fedc 	bl	80001d0 <__aeabi_dsub>
 8004418:	a379      	add	r3, pc, #484	@ (adr r3, 8004600 <__ieee754_rem_pio2+0x300>)
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	e7de      	b.n	80043de <__ieee754_rem_pio2+0xde>
 8004420:	4b82      	ldr	r3, [pc, #520]	@ (800462c <__ieee754_rem_pio2+0x32c>)
 8004422:	4598      	cmp	r8, r3
 8004424:	f200 80d1 	bhi.w	80045ca <__ieee754_rem_pio2+0x2ca>
 8004428:	f000 f966 	bl	80046f8 <fabs>
 800442c:	ec57 6b10 	vmov	r6, r7, d0
 8004430:	a375      	add	r3, pc, #468	@ (adr r3, 8004608 <__ieee754_rem_pio2+0x308>)
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	4630      	mov	r0, r6
 8004438:	4639      	mov	r1, r7
 800443a:	f7fc f881 	bl	8000540 <__aeabi_dmul>
 800443e:	4b7c      	ldr	r3, [pc, #496]	@ (8004630 <__ieee754_rem_pio2+0x330>)
 8004440:	2200      	movs	r2, #0
 8004442:	f7fb fec7 	bl	80001d4 <__adddf3>
 8004446:	f7fc fb15 	bl	8000a74 <__aeabi_d2iz>
 800444a:	4605      	mov	r5, r0
 800444c:	f7fc f80e 	bl	800046c <__aeabi_i2d>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004458:	a363      	add	r3, pc, #396	@ (adr r3, 80045e8 <__ieee754_rem_pio2+0x2e8>)
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	f7fc f86f 	bl	8000540 <__aeabi_dmul>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4630      	mov	r0, r6
 8004468:	4639      	mov	r1, r7
 800446a:	f7fb feb1 	bl	80001d0 <__aeabi_dsub>
 800446e:	a360      	add	r3, pc, #384	@ (adr r3, 80045f0 <__ieee754_rem_pio2+0x2f0>)
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	4682      	mov	sl, r0
 8004476:	468b      	mov	fp, r1
 8004478:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800447c:	f7fc f860 	bl	8000540 <__aeabi_dmul>
 8004480:	2d1f      	cmp	r5, #31
 8004482:	4606      	mov	r6, r0
 8004484:	460f      	mov	r7, r1
 8004486:	dc0c      	bgt.n	80044a2 <__ieee754_rem_pio2+0x1a2>
 8004488:	4b6a      	ldr	r3, [pc, #424]	@ (8004634 <__ieee754_rem_pio2+0x334>)
 800448a:	1e6a      	subs	r2, r5, #1
 800448c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004490:	4543      	cmp	r3, r8
 8004492:	d006      	beq.n	80044a2 <__ieee754_rem_pio2+0x1a2>
 8004494:	4632      	mov	r2, r6
 8004496:	463b      	mov	r3, r7
 8004498:	4650      	mov	r0, sl
 800449a:	4659      	mov	r1, fp
 800449c:	f7fb fe98 	bl	80001d0 <__aeabi_dsub>
 80044a0:	e00e      	b.n	80044c0 <__ieee754_rem_pio2+0x1c0>
 80044a2:	463b      	mov	r3, r7
 80044a4:	4632      	mov	r2, r6
 80044a6:	4650      	mov	r0, sl
 80044a8:	4659      	mov	r1, fp
 80044aa:	f7fb fe91 	bl	80001d0 <__aeabi_dsub>
 80044ae:	ea4f 5328 	mov.w	r3, r8, asr #20
 80044b2:	9305      	str	r3, [sp, #20]
 80044b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80044b8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80044bc:	2b10      	cmp	r3, #16
 80044be:	dc02      	bgt.n	80044c6 <__ieee754_rem_pio2+0x1c6>
 80044c0:	e9c4 0100 	strd	r0, r1, [r4]
 80044c4:	e039      	b.n	800453a <__ieee754_rem_pio2+0x23a>
 80044c6:	a34c      	add	r3, pc, #304	@ (adr r3, 80045f8 <__ieee754_rem_pio2+0x2f8>)
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044d0:	f7fc f836 	bl	8000540 <__aeabi_dmul>
 80044d4:	4606      	mov	r6, r0
 80044d6:	460f      	mov	r7, r1
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4650      	mov	r0, sl
 80044de:	4659      	mov	r1, fp
 80044e0:	f7fb fe76 	bl	80001d0 <__aeabi_dsub>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4680      	mov	r8, r0
 80044ea:	4689      	mov	r9, r1
 80044ec:	4650      	mov	r0, sl
 80044ee:	4659      	mov	r1, fp
 80044f0:	f7fb fe6e 	bl	80001d0 <__aeabi_dsub>
 80044f4:	4632      	mov	r2, r6
 80044f6:	463b      	mov	r3, r7
 80044f8:	f7fb fe6a 	bl	80001d0 <__aeabi_dsub>
 80044fc:	a340      	add	r3, pc, #256	@ (adr r3, 8004600 <__ieee754_rem_pio2+0x300>)
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	4606      	mov	r6, r0
 8004504:	460f      	mov	r7, r1
 8004506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800450a:	f7fc f819 	bl	8000540 <__aeabi_dmul>
 800450e:	4632      	mov	r2, r6
 8004510:	463b      	mov	r3, r7
 8004512:	f7fb fe5d 	bl	80001d0 <__aeabi_dsub>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	4606      	mov	r6, r0
 800451c:	460f      	mov	r7, r1
 800451e:	4640      	mov	r0, r8
 8004520:	4649      	mov	r1, r9
 8004522:	f7fb fe55 	bl	80001d0 <__aeabi_dsub>
 8004526:	9a05      	ldr	r2, [sp, #20]
 8004528:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b31      	cmp	r3, #49	@ 0x31
 8004530:	dc20      	bgt.n	8004574 <__ieee754_rem_pio2+0x274>
 8004532:	e9c4 0100 	strd	r0, r1, [r4]
 8004536:	46c2      	mov	sl, r8
 8004538:	46cb      	mov	fp, r9
 800453a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800453e:	4650      	mov	r0, sl
 8004540:	4642      	mov	r2, r8
 8004542:	464b      	mov	r3, r9
 8004544:	4659      	mov	r1, fp
 8004546:	f7fb fe43 	bl	80001d0 <__aeabi_dsub>
 800454a:	463b      	mov	r3, r7
 800454c:	4632      	mov	r2, r6
 800454e:	f7fb fe3f 	bl	80001d0 <__aeabi_dsub>
 8004552:	9b04      	ldr	r3, [sp, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800455a:	f6bf af0e 	bge.w	800437a <__ieee754_rem_pio2+0x7a>
 800455e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004562:	6063      	str	r3, [r4, #4]
 8004564:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004568:	f8c4 8000 	str.w	r8, [r4]
 800456c:	60a0      	str	r0, [r4, #8]
 800456e:	60e3      	str	r3, [r4, #12]
 8004570:	426d      	negs	r5, r5
 8004572:	e702      	b.n	800437a <__ieee754_rem_pio2+0x7a>
 8004574:	a326      	add	r3, pc, #152	@ (adr r3, 8004610 <__ieee754_rem_pio2+0x310>)
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800457e:	f7fb ffdf 	bl	8000540 <__aeabi_dmul>
 8004582:	4606      	mov	r6, r0
 8004584:	460f      	mov	r7, r1
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4640      	mov	r0, r8
 800458c:	4649      	mov	r1, r9
 800458e:	f7fb fe1f 	bl	80001d0 <__aeabi_dsub>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4682      	mov	sl, r0
 8004598:	468b      	mov	fp, r1
 800459a:	4640      	mov	r0, r8
 800459c:	4649      	mov	r1, r9
 800459e:	f7fb fe17 	bl	80001d0 <__aeabi_dsub>
 80045a2:	4632      	mov	r2, r6
 80045a4:	463b      	mov	r3, r7
 80045a6:	f7fb fe13 	bl	80001d0 <__aeabi_dsub>
 80045aa:	a31b      	add	r3, pc, #108	@ (adr r3, 8004618 <__ieee754_rem_pio2+0x318>)
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	4606      	mov	r6, r0
 80045b2:	460f      	mov	r7, r1
 80045b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045b8:	f7fb ffc2 	bl	8000540 <__aeabi_dmul>
 80045bc:	4632      	mov	r2, r6
 80045be:	463b      	mov	r3, r7
 80045c0:	f7fb fe06 	bl	80001d0 <__aeabi_dsub>
 80045c4:	4606      	mov	r6, r0
 80045c6:	460f      	mov	r7, r1
 80045c8:	e764      	b.n	8004494 <__ieee754_rem_pio2+0x194>
 80045ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004638 <__ieee754_rem_pio2+0x338>)
 80045cc:	4598      	cmp	r8, r3
 80045ce:	d935      	bls.n	800463c <__ieee754_rem_pio2+0x33c>
 80045d0:	4632      	mov	r2, r6
 80045d2:	463b      	mov	r3, r7
 80045d4:	4630      	mov	r0, r6
 80045d6:	4639      	mov	r1, r7
 80045d8:	f7fb fdfa 	bl	80001d0 <__aeabi_dsub>
 80045dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80045e0:	e9c4 0100 	strd	r0, r1, [r4]
 80045e4:	e69e      	b.n	8004324 <__ieee754_rem_pio2+0x24>
 80045e6:	bf00      	nop
 80045e8:	54400000 	.word	0x54400000
 80045ec:	3ff921fb 	.word	0x3ff921fb
 80045f0:	1a626331 	.word	0x1a626331
 80045f4:	3dd0b461 	.word	0x3dd0b461
 80045f8:	1a600000 	.word	0x1a600000
 80045fc:	3dd0b461 	.word	0x3dd0b461
 8004600:	2e037073 	.word	0x2e037073
 8004604:	3ba3198a 	.word	0x3ba3198a
 8004608:	6dc9c883 	.word	0x6dc9c883
 800460c:	3fe45f30 	.word	0x3fe45f30
 8004610:	2e000000 	.word	0x2e000000
 8004614:	3ba3198a 	.word	0x3ba3198a
 8004618:	252049c1 	.word	0x252049c1
 800461c:	397b839a 	.word	0x397b839a
 8004620:	3fe921fb 	.word	0x3fe921fb
 8004624:	4002d97b 	.word	0x4002d97b
 8004628:	3ff921fb 	.word	0x3ff921fb
 800462c:	413921fb 	.word	0x413921fb
 8004630:	3fe00000 	.word	0x3fe00000
 8004634:	08004fc8 	.word	0x08004fc8
 8004638:	7fefffff 	.word	0x7fefffff
 800463c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004640:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004644:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004648:	4630      	mov	r0, r6
 800464a:	460f      	mov	r7, r1
 800464c:	f7fc fa12 	bl	8000a74 <__aeabi_d2iz>
 8004650:	f7fb ff0c 	bl	800046c <__aeabi_i2d>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4630      	mov	r0, r6
 800465a:	4639      	mov	r1, r7
 800465c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004660:	f7fb fdb6 	bl	80001d0 <__aeabi_dsub>
 8004664:	4b22      	ldr	r3, [pc, #136]	@ (80046f0 <__ieee754_rem_pio2+0x3f0>)
 8004666:	2200      	movs	r2, #0
 8004668:	f7fb ff6a 	bl	8000540 <__aeabi_dmul>
 800466c:	460f      	mov	r7, r1
 800466e:	4606      	mov	r6, r0
 8004670:	f7fc fa00 	bl	8000a74 <__aeabi_d2iz>
 8004674:	f7fb fefa 	bl	800046c <__aeabi_i2d>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4630      	mov	r0, r6
 800467e:	4639      	mov	r1, r7
 8004680:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004684:	f7fb fda4 	bl	80001d0 <__aeabi_dsub>
 8004688:	4b19      	ldr	r3, [pc, #100]	@ (80046f0 <__ieee754_rem_pio2+0x3f0>)
 800468a:	2200      	movs	r2, #0
 800468c:	f7fb ff58 	bl	8000540 <__aeabi_dmul>
 8004690:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8004694:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004698:	f04f 0803 	mov.w	r8, #3
 800469c:	2600      	movs	r6, #0
 800469e:	2700      	movs	r7, #0
 80046a0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80046a4:	4632      	mov	r2, r6
 80046a6:	463b      	mov	r3, r7
 80046a8:	46c2      	mov	sl, r8
 80046aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80046ae:	f7fc f9af 	bl	8000a10 <__aeabi_dcmpeq>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d1f4      	bne.n	80046a0 <__ieee754_rem_pio2+0x3a0>
 80046b6:	4b0f      	ldr	r3, [pc, #60]	@ (80046f4 <__ieee754_rem_pio2+0x3f4>)
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	2302      	movs	r3, #2
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	462a      	mov	r2, r5
 80046c0:	4653      	mov	r3, sl
 80046c2:	4621      	mov	r1, r4
 80046c4:	a806      	add	r0, sp, #24
 80046c6:	f000 f81f 	bl	8004708 <__kernel_rem_pio2>
 80046ca:	9b04      	ldr	r3, [sp, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	4605      	mov	r5, r0
 80046d0:	f6bf ae53 	bge.w	800437a <__ieee754_rem_pio2+0x7a>
 80046d4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80046d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80046dc:	e9c4 2300 	strd	r2, r3, [r4]
 80046e0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80046e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80046e8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80046ec:	e740      	b.n	8004570 <__ieee754_rem_pio2+0x270>
 80046ee:	bf00      	nop
 80046f0:	41700000 	.word	0x41700000
 80046f4:	08005048 	.word	0x08005048

080046f8 <fabs>:
 80046f8:	ec51 0b10 	vmov	r0, r1, d0
 80046fc:	4602      	mov	r2, r0
 80046fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004702:	ec43 2b10 	vmov	d0, r2, r3
 8004706:	4770      	bx	lr

08004708 <__kernel_rem_pio2>:
 8004708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470c:	ed2d 8b02 	vpush	{d8}
 8004710:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8004714:	f112 0f14 	cmn.w	r2, #20
 8004718:	9306      	str	r3, [sp, #24]
 800471a:	9104      	str	r1, [sp, #16]
 800471c:	4bc2      	ldr	r3, [pc, #776]	@ (8004a28 <__kernel_rem_pio2+0x320>)
 800471e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8004720:	9008      	str	r0, [sp, #32]
 8004722:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	9b06      	ldr	r3, [sp, #24]
 800472a:	f103 33ff 	add.w	r3, r3, #4294967295
 800472e:	bfa8      	it	ge
 8004730:	1ed4      	subge	r4, r2, #3
 8004732:	9305      	str	r3, [sp, #20]
 8004734:	bfb2      	itee	lt
 8004736:	2400      	movlt	r4, #0
 8004738:	2318      	movge	r3, #24
 800473a:	fb94 f4f3 	sdivge	r4, r4, r3
 800473e:	f06f 0317 	mvn.w	r3, #23
 8004742:	fb04 3303 	mla	r3, r4, r3, r3
 8004746:	eb03 0b02 	add.w	fp, r3, r2
 800474a:	9b00      	ldr	r3, [sp, #0]
 800474c:	9a05      	ldr	r2, [sp, #20]
 800474e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8004a18 <__kernel_rem_pio2+0x310>
 8004752:	eb03 0802 	add.w	r8, r3, r2
 8004756:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004758:	1aa7      	subs	r7, r4, r2
 800475a:	ae20      	add	r6, sp, #128	@ 0x80
 800475c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004760:	2500      	movs	r5, #0
 8004762:	4545      	cmp	r5, r8
 8004764:	dd12      	ble.n	800478c <__kernel_rem_pio2+0x84>
 8004766:	9b06      	ldr	r3, [sp, #24]
 8004768:	aa20      	add	r2, sp, #128	@ 0x80
 800476a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800476e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8004772:	2700      	movs	r7, #0
 8004774:	9b00      	ldr	r3, [sp, #0]
 8004776:	429f      	cmp	r7, r3
 8004778:	dc2e      	bgt.n	80047d8 <__kernel_rem_pio2+0xd0>
 800477a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8004a18 <__kernel_rem_pio2+0x310>
 800477e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004782:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004786:	46a8      	mov	r8, r5
 8004788:	2600      	movs	r6, #0
 800478a:	e01b      	b.n	80047c4 <__kernel_rem_pio2+0xbc>
 800478c:	42ef      	cmn	r7, r5
 800478e:	d407      	bmi.n	80047a0 <__kernel_rem_pio2+0x98>
 8004790:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004794:	f7fb fe6a 	bl	800046c <__aeabi_i2d>
 8004798:	e8e6 0102 	strd	r0, r1, [r6], #8
 800479c:	3501      	adds	r5, #1
 800479e:	e7e0      	b.n	8004762 <__kernel_rem_pio2+0x5a>
 80047a0:	ec51 0b18 	vmov	r0, r1, d8
 80047a4:	e7f8      	b.n	8004798 <__kernel_rem_pio2+0x90>
 80047a6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80047aa:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80047ae:	f7fb fec7 	bl	8000540 <__aeabi_dmul>
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047ba:	f7fb fd0b 	bl	80001d4 <__adddf3>
 80047be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047c2:	3601      	adds	r6, #1
 80047c4:	9b05      	ldr	r3, [sp, #20]
 80047c6:	429e      	cmp	r6, r3
 80047c8:	dded      	ble.n	80047a6 <__kernel_rem_pio2+0x9e>
 80047ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80047ce:	3701      	adds	r7, #1
 80047d0:	ecaa 7b02 	vstmia	sl!, {d7}
 80047d4:	3508      	adds	r5, #8
 80047d6:	e7cd      	b.n	8004774 <__kernel_rem_pio2+0x6c>
 80047d8:	9b00      	ldr	r3, [sp, #0]
 80047da:	f8dd 8000 	ldr.w	r8, [sp]
 80047de:	aa0c      	add	r2, sp, #48	@ 0x30
 80047e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80047e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80047e6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80047e8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80047ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80047ee:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80047f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80047f4:	ab98      	add	r3, sp, #608	@ 0x260
 80047f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80047fa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80047fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004802:	ac0c      	add	r4, sp, #48	@ 0x30
 8004804:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004806:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800480a:	46a1      	mov	r9, r4
 800480c:	46c2      	mov	sl, r8
 800480e:	f1ba 0f00 	cmp.w	sl, #0
 8004812:	dc77      	bgt.n	8004904 <__kernel_rem_pio2+0x1fc>
 8004814:	4658      	mov	r0, fp
 8004816:	ed9d 0b02 	vldr	d0, [sp, #8]
 800481a:	f000 fac5 	bl	8004da8 <scalbn>
 800481e:	ec57 6b10 	vmov	r6, r7, d0
 8004822:	2200      	movs	r2, #0
 8004824:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004828:	4630      	mov	r0, r6
 800482a:	4639      	mov	r1, r7
 800482c:	f7fb fe88 	bl	8000540 <__aeabi_dmul>
 8004830:	ec41 0b10 	vmov	d0, r0, r1
 8004834:	f000 fb34 	bl	8004ea0 <floor>
 8004838:	4b7c      	ldr	r3, [pc, #496]	@ (8004a2c <__kernel_rem_pio2+0x324>)
 800483a:	ec51 0b10 	vmov	r0, r1, d0
 800483e:	2200      	movs	r2, #0
 8004840:	f7fb fe7e 	bl	8000540 <__aeabi_dmul>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4630      	mov	r0, r6
 800484a:	4639      	mov	r1, r7
 800484c:	f7fb fcc0 	bl	80001d0 <__aeabi_dsub>
 8004850:	460f      	mov	r7, r1
 8004852:	4606      	mov	r6, r0
 8004854:	f7fc f90e 	bl	8000a74 <__aeabi_d2iz>
 8004858:	9002      	str	r0, [sp, #8]
 800485a:	f7fb fe07 	bl	800046c <__aeabi_i2d>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4630      	mov	r0, r6
 8004864:	4639      	mov	r1, r7
 8004866:	f7fb fcb3 	bl	80001d0 <__aeabi_dsub>
 800486a:	f1bb 0f00 	cmp.w	fp, #0
 800486e:	4606      	mov	r6, r0
 8004870:	460f      	mov	r7, r1
 8004872:	dd6c      	ble.n	800494e <__kernel_rem_pio2+0x246>
 8004874:	f108 31ff 	add.w	r1, r8, #4294967295
 8004878:	ab0c      	add	r3, sp, #48	@ 0x30
 800487a:	9d02      	ldr	r5, [sp, #8]
 800487c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004880:	f1cb 0018 	rsb	r0, fp, #24
 8004884:	fa43 f200 	asr.w	r2, r3, r0
 8004888:	4415      	add	r5, r2
 800488a:	4082      	lsls	r2, r0
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	aa0c      	add	r2, sp, #48	@ 0x30
 8004890:	9502      	str	r5, [sp, #8]
 8004892:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004896:	f1cb 0217 	rsb	r2, fp, #23
 800489a:	fa43 f902 	asr.w	r9, r3, r2
 800489e:	f1b9 0f00 	cmp.w	r9, #0
 80048a2:	dd64      	ble.n	800496e <__kernel_rem_pio2+0x266>
 80048a4:	9b02      	ldr	r3, [sp, #8]
 80048a6:	2200      	movs	r2, #0
 80048a8:	3301      	adds	r3, #1
 80048aa:	9302      	str	r3, [sp, #8]
 80048ac:	4615      	mov	r5, r2
 80048ae:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80048b2:	4590      	cmp	r8, r2
 80048b4:	f300 80a1 	bgt.w	80049fa <__kernel_rem_pio2+0x2f2>
 80048b8:	f1bb 0f00 	cmp.w	fp, #0
 80048bc:	dd07      	ble.n	80048ce <__kernel_rem_pio2+0x1c6>
 80048be:	f1bb 0f01 	cmp.w	fp, #1
 80048c2:	f000 80c1 	beq.w	8004a48 <__kernel_rem_pio2+0x340>
 80048c6:	f1bb 0f02 	cmp.w	fp, #2
 80048ca:	f000 80c8 	beq.w	8004a5e <__kernel_rem_pio2+0x356>
 80048ce:	f1b9 0f02 	cmp.w	r9, #2
 80048d2:	d14c      	bne.n	800496e <__kernel_rem_pio2+0x266>
 80048d4:	4632      	mov	r2, r6
 80048d6:	463b      	mov	r3, r7
 80048d8:	4955      	ldr	r1, [pc, #340]	@ (8004a30 <__kernel_rem_pio2+0x328>)
 80048da:	2000      	movs	r0, #0
 80048dc:	f7fb fc78 	bl	80001d0 <__aeabi_dsub>
 80048e0:	4606      	mov	r6, r0
 80048e2:	460f      	mov	r7, r1
 80048e4:	2d00      	cmp	r5, #0
 80048e6:	d042      	beq.n	800496e <__kernel_rem_pio2+0x266>
 80048e8:	4658      	mov	r0, fp
 80048ea:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8004a20 <__kernel_rem_pio2+0x318>
 80048ee:	f000 fa5b 	bl	8004da8 <scalbn>
 80048f2:	4630      	mov	r0, r6
 80048f4:	4639      	mov	r1, r7
 80048f6:	ec53 2b10 	vmov	r2, r3, d0
 80048fa:	f7fb fc69 	bl	80001d0 <__aeabi_dsub>
 80048fe:	4606      	mov	r6, r0
 8004900:	460f      	mov	r7, r1
 8004902:	e034      	b.n	800496e <__kernel_rem_pio2+0x266>
 8004904:	4b4b      	ldr	r3, [pc, #300]	@ (8004a34 <__kernel_rem_pio2+0x32c>)
 8004906:	2200      	movs	r2, #0
 8004908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800490c:	f7fb fe18 	bl	8000540 <__aeabi_dmul>
 8004910:	f7fc f8b0 	bl	8000a74 <__aeabi_d2iz>
 8004914:	f7fb fdaa 	bl	800046c <__aeabi_i2d>
 8004918:	4b47      	ldr	r3, [pc, #284]	@ (8004a38 <__kernel_rem_pio2+0x330>)
 800491a:	2200      	movs	r2, #0
 800491c:	4606      	mov	r6, r0
 800491e:	460f      	mov	r7, r1
 8004920:	f7fb fe0e 	bl	8000540 <__aeabi_dmul>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800492c:	f7fb fc50 	bl	80001d0 <__aeabi_dsub>
 8004930:	f7fc f8a0 	bl	8000a74 <__aeabi_d2iz>
 8004934:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004938:	f849 0b04 	str.w	r0, [r9], #4
 800493c:	4639      	mov	r1, r7
 800493e:	4630      	mov	r0, r6
 8004940:	f7fb fc48 	bl	80001d4 <__adddf3>
 8004944:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004948:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800494c:	e75f      	b.n	800480e <__kernel_rem_pio2+0x106>
 800494e:	d107      	bne.n	8004960 <__kernel_rem_pio2+0x258>
 8004950:	f108 33ff 	add.w	r3, r8, #4294967295
 8004954:	aa0c      	add	r2, sp, #48	@ 0x30
 8004956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800495e:	e79e      	b.n	800489e <__kernel_rem_pio2+0x196>
 8004960:	4b36      	ldr	r3, [pc, #216]	@ (8004a3c <__kernel_rem_pio2+0x334>)
 8004962:	2200      	movs	r2, #0
 8004964:	f7fc f872 	bl	8000a4c <__aeabi_dcmpge>
 8004968:	2800      	cmp	r0, #0
 800496a:	d143      	bne.n	80049f4 <__kernel_rem_pio2+0x2ec>
 800496c:	4681      	mov	r9, r0
 800496e:	2200      	movs	r2, #0
 8004970:	2300      	movs	r3, #0
 8004972:	4630      	mov	r0, r6
 8004974:	4639      	mov	r1, r7
 8004976:	f7fc f84b 	bl	8000a10 <__aeabi_dcmpeq>
 800497a:	2800      	cmp	r0, #0
 800497c:	f000 80c1 	beq.w	8004b02 <__kernel_rem_pio2+0x3fa>
 8004980:	f108 33ff 	add.w	r3, r8, #4294967295
 8004984:	2200      	movs	r2, #0
 8004986:	9900      	ldr	r1, [sp, #0]
 8004988:	428b      	cmp	r3, r1
 800498a:	da70      	bge.n	8004a6e <__kernel_rem_pio2+0x366>
 800498c:	2a00      	cmp	r2, #0
 800498e:	f000 808b 	beq.w	8004aa8 <__kernel_rem_pio2+0x3a0>
 8004992:	f108 38ff 	add.w	r8, r8, #4294967295
 8004996:	ab0c      	add	r3, sp, #48	@ 0x30
 8004998:	f1ab 0b18 	sub.w	fp, fp, #24
 800499c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f6      	beq.n	8004992 <__kernel_rem_pio2+0x28a>
 80049a4:	4658      	mov	r0, fp
 80049a6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8004a20 <__kernel_rem_pio2+0x318>
 80049aa:	f000 f9fd 	bl	8004da8 <scalbn>
 80049ae:	f108 0301 	add.w	r3, r8, #1
 80049b2:	00da      	lsls	r2, r3, #3
 80049b4:	9205      	str	r2, [sp, #20]
 80049b6:	ec55 4b10 	vmov	r4, r5, d0
 80049ba:	aa70      	add	r2, sp, #448	@ 0x1c0
 80049bc:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8004a34 <__kernel_rem_pio2+0x32c>
 80049c0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80049c4:	4646      	mov	r6, r8
 80049c6:	f04f 0a00 	mov.w	sl, #0
 80049ca:	2e00      	cmp	r6, #0
 80049cc:	f280 80d1 	bge.w	8004b72 <__kernel_rem_pio2+0x46a>
 80049d0:	4644      	mov	r4, r8
 80049d2:	2c00      	cmp	r4, #0
 80049d4:	f2c0 80ff 	blt.w	8004bd6 <__kernel_rem_pio2+0x4ce>
 80049d8:	4b19      	ldr	r3, [pc, #100]	@ (8004a40 <__kernel_rem_pio2+0x338>)
 80049da:	461f      	mov	r7, r3
 80049dc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80049de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049e2:	9306      	str	r3, [sp, #24]
 80049e4:	f04f 0a00 	mov.w	sl, #0
 80049e8:	f04f 0b00 	mov.w	fp, #0
 80049ec:	2600      	movs	r6, #0
 80049ee:	eba8 0504 	sub.w	r5, r8, r4
 80049f2:	e0e4      	b.n	8004bbe <__kernel_rem_pio2+0x4b6>
 80049f4:	f04f 0902 	mov.w	r9, #2
 80049f8:	e754      	b.n	80048a4 <__kernel_rem_pio2+0x19c>
 80049fa:	f854 3b04 	ldr.w	r3, [r4], #4
 80049fe:	bb0d      	cbnz	r5, 8004a44 <__kernel_rem_pio2+0x33c>
 8004a00:	b123      	cbz	r3, 8004a0c <__kernel_rem_pio2+0x304>
 8004a02:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004a06:	f844 3c04 	str.w	r3, [r4, #-4]
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	3201      	adds	r2, #1
 8004a0e:	461d      	mov	r5, r3
 8004a10:	e74f      	b.n	80048b2 <__kernel_rem_pio2+0x1aa>
 8004a12:	bf00      	nop
 8004a14:	f3af 8000 	nop.w
	...
 8004a24:	3ff00000 	.word	0x3ff00000
 8004a28:	08005190 	.word	0x08005190
 8004a2c:	40200000 	.word	0x40200000
 8004a30:	3ff00000 	.word	0x3ff00000
 8004a34:	3e700000 	.word	0x3e700000
 8004a38:	41700000 	.word	0x41700000
 8004a3c:	3fe00000 	.word	0x3fe00000
 8004a40:	08005150 	.word	0x08005150
 8004a44:	1acb      	subs	r3, r1, r3
 8004a46:	e7de      	b.n	8004a06 <__kernel_rem_pio2+0x2fe>
 8004a48:	f108 32ff 	add.w	r2, r8, #4294967295
 8004a4c:	ab0c      	add	r3, sp, #48	@ 0x30
 8004a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a52:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004a56:	a90c      	add	r1, sp, #48	@ 0x30
 8004a58:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004a5c:	e737      	b.n	80048ce <__kernel_rem_pio2+0x1c6>
 8004a5e:	f108 32ff 	add.w	r2, r8, #4294967295
 8004a62:	ab0c      	add	r3, sp, #48	@ 0x30
 8004a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a68:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004a6c:	e7f3      	b.n	8004a56 <__kernel_rem_pio2+0x34e>
 8004a6e:	a90c      	add	r1, sp, #48	@ 0x30
 8004a70:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004a74:	3b01      	subs	r3, #1
 8004a76:	430a      	orrs	r2, r1
 8004a78:	e785      	b.n	8004986 <__kernel_rem_pio2+0x27e>
 8004a7a:	3401      	adds	r4, #1
 8004a7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004a80:	2a00      	cmp	r2, #0
 8004a82:	d0fa      	beq.n	8004a7a <__kernel_rem_pio2+0x372>
 8004a84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a86:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004a8a:	eb0d 0503 	add.w	r5, sp, r3
 8004a8e:	9b06      	ldr	r3, [sp, #24]
 8004a90:	aa20      	add	r2, sp, #128	@ 0x80
 8004a92:	4443      	add	r3, r8
 8004a94:	f108 0701 	add.w	r7, r8, #1
 8004a98:	3d98      	subs	r5, #152	@ 0x98
 8004a9a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8004a9e:	4444      	add	r4, r8
 8004aa0:	42bc      	cmp	r4, r7
 8004aa2:	da04      	bge.n	8004aae <__kernel_rem_pio2+0x3a6>
 8004aa4:	46a0      	mov	r8, r4
 8004aa6:	e6a2      	b.n	80047ee <__kernel_rem_pio2+0xe6>
 8004aa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004aaa:	2401      	movs	r4, #1
 8004aac:	e7e6      	b.n	8004a7c <__kernel_rem_pio2+0x374>
 8004aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ab0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8004ab4:	f7fb fcda 	bl	800046c <__aeabi_i2d>
 8004ab8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8004d78 <__kernel_rem_pio2+0x670>
 8004abc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004ac0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004ac4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ac8:	46b2      	mov	sl, r6
 8004aca:	f04f 0800 	mov.w	r8, #0
 8004ace:	9b05      	ldr	r3, [sp, #20]
 8004ad0:	4598      	cmp	r8, r3
 8004ad2:	dd05      	ble.n	8004ae0 <__kernel_rem_pio2+0x3d8>
 8004ad4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ad8:	3701      	adds	r7, #1
 8004ada:	eca5 7b02 	vstmia	r5!, {d7}
 8004ade:	e7df      	b.n	8004aa0 <__kernel_rem_pio2+0x398>
 8004ae0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8004ae4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004ae8:	f7fb fd2a 	bl	8000540 <__aeabi_dmul>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004af4:	f7fb fb6e 	bl	80001d4 <__adddf3>
 8004af8:	f108 0801 	add.w	r8, r8, #1
 8004afc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b00:	e7e5      	b.n	8004ace <__kernel_rem_pio2+0x3c6>
 8004b02:	f1cb 0000 	rsb	r0, fp, #0
 8004b06:	ec47 6b10 	vmov	d0, r6, r7
 8004b0a:	f000 f94d 	bl	8004da8 <scalbn>
 8004b0e:	ec55 4b10 	vmov	r4, r5, d0
 8004b12:	4b9b      	ldr	r3, [pc, #620]	@ (8004d80 <__kernel_rem_pio2+0x678>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	4620      	mov	r0, r4
 8004b18:	4629      	mov	r1, r5
 8004b1a:	f7fb ff97 	bl	8000a4c <__aeabi_dcmpge>
 8004b1e:	b300      	cbz	r0, 8004b62 <__kernel_rem_pio2+0x45a>
 8004b20:	4b98      	ldr	r3, [pc, #608]	@ (8004d84 <__kernel_rem_pio2+0x67c>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	4620      	mov	r0, r4
 8004b26:	4629      	mov	r1, r5
 8004b28:	f7fb fd0a 	bl	8000540 <__aeabi_dmul>
 8004b2c:	f7fb ffa2 	bl	8000a74 <__aeabi_d2iz>
 8004b30:	4606      	mov	r6, r0
 8004b32:	f7fb fc9b 	bl	800046c <__aeabi_i2d>
 8004b36:	4b92      	ldr	r3, [pc, #584]	@ (8004d80 <__kernel_rem_pio2+0x678>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f7fb fd01 	bl	8000540 <__aeabi_dmul>
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4602      	mov	r2, r0
 8004b42:	4629      	mov	r1, r5
 8004b44:	4620      	mov	r0, r4
 8004b46:	f7fb fb43 	bl	80001d0 <__aeabi_dsub>
 8004b4a:	f7fb ff93 	bl	8000a74 <__aeabi_d2iz>
 8004b4e:	ab0c      	add	r3, sp, #48	@ 0x30
 8004b50:	f10b 0b18 	add.w	fp, fp, #24
 8004b54:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004b58:	f108 0801 	add.w	r8, r8, #1
 8004b5c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004b60:	e720      	b.n	80049a4 <__kernel_rem_pio2+0x29c>
 8004b62:	4620      	mov	r0, r4
 8004b64:	4629      	mov	r1, r5
 8004b66:	f7fb ff85 	bl	8000a74 <__aeabi_d2iz>
 8004b6a:	ab0c      	add	r3, sp, #48	@ 0x30
 8004b6c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004b70:	e718      	b.n	80049a4 <__kernel_rem_pio2+0x29c>
 8004b72:	ab0c      	add	r3, sp, #48	@ 0x30
 8004b74:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004b78:	f7fb fc78 	bl	800046c <__aeabi_i2d>
 8004b7c:	4622      	mov	r2, r4
 8004b7e:	462b      	mov	r3, r5
 8004b80:	f7fb fcde 	bl	8000540 <__aeabi_dmul>
 8004b84:	4652      	mov	r2, sl
 8004b86:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8004b8a:	465b      	mov	r3, fp
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	4629      	mov	r1, r5
 8004b90:	f7fb fcd6 	bl	8000540 <__aeabi_dmul>
 8004b94:	3e01      	subs	r6, #1
 8004b96:	4604      	mov	r4, r0
 8004b98:	460d      	mov	r5, r1
 8004b9a:	e716      	b.n	80049ca <__kernel_rem_pio2+0x2c2>
 8004b9c:	9906      	ldr	r1, [sp, #24]
 8004b9e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8004ba2:	9106      	str	r1, [sp, #24]
 8004ba4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004ba8:	f7fb fcca 	bl	8000540 <__aeabi_dmul>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4650      	mov	r0, sl
 8004bb2:	4659      	mov	r1, fp
 8004bb4:	f7fb fb0e 	bl	80001d4 <__adddf3>
 8004bb8:	3601      	adds	r6, #1
 8004bba:	4682      	mov	sl, r0
 8004bbc:	468b      	mov	fp, r1
 8004bbe:	9b00      	ldr	r3, [sp, #0]
 8004bc0:	429e      	cmp	r6, r3
 8004bc2:	dc01      	bgt.n	8004bc8 <__kernel_rem_pio2+0x4c0>
 8004bc4:	42ae      	cmp	r6, r5
 8004bc6:	dde9      	ble.n	8004b9c <__kernel_rem_pio2+0x494>
 8004bc8:	ab48      	add	r3, sp, #288	@ 0x120
 8004bca:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004bce:	e9c5 ab00 	strd	sl, fp, [r5]
 8004bd2:	3c01      	subs	r4, #1
 8004bd4:	e6fd      	b.n	80049d2 <__kernel_rem_pio2+0x2ca>
 8004bd6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	dc0b      	bgt.n	8004bf4 <__kernel_rem_pio2+0x4ec>
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	dc35      	bgt.n	8004c4c <__kernel_rem_pio2+0x544>
 8004be0:	d059      	beq.n	8004c96 <__kernel_rem_pio2+0x58e>
 8004be2:	9b02      	ldr	r3, [sp, #8]
 8004be4:	f003 0007 	and.w	r0, r3, #7
 8004be8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8004bec:	ecbd 8b02 	vpop	{d8}
 8004bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d1f3      	bne.n	8004be2 <__kernel_rem_pio2+0x4da>
 8004bfa:	9b05      	ldr	r3, [sp, #20]
 8004bfc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004c00:	eb0d 0403 	add.w	r4, sp, r3
 8004c04:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004c08:	4625      	mov	r5, r4
 8004c0a:	46c2      	mov	sl, r8
 8004c0c:	f1ba 0f00 	cmp.w	sl, #0
 8004c10:	dc69      	bgt.n	8004ce6 <__kernel_rem_pio2+0x5de>
 8004c12:	4645      	mov	r5, r8
 8004c14:	2d01      	cmp	r5, #1
 8004c16:	f300 8087 	bgt.w	8004d28 <__kernel_rem_pio2+0x620>
 8004c1a:	9c05      	ldr	r4, [sp, #20]
 8004c1c:	ab48      	add	r3, sp, #288	@ 0x120
 8004c1e:	441c      	add	r4, r3
 8004c20:	2000      	movs	r0, #0
 8004c22:	2100      	movs	r1, #0
 8004c24:	f1b8 0f01 	cmp.w	r8, #1
 8004c28:	f300 809c 	bgt.w	8004d64 <__kernel_rem_pio2+0x65c>
 8004c2c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8004c30:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8004c34:	f1b9 0f00 	cmp.w	r9, #0
 8004c38:	f040 80a6 	bne.w	8004d88 <__kernel_rem_pio2+0x680>
 8004c3c:	9b04      	ldr	r3, [sp, #16]
 8004c3e:	e9c3 5600 	strd	r5, r6, [r3]
 8004c42:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004c46:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004c4a:	e7ca      	b.n	8004be2 <__kernel_rem_pio2+0x4da>
 8004c4c:	9d05      	ldr	r5, [sp, #20]
 8004c4e:	ab48      	add	r3, sp, #288	@ 0x120
 8004c50:	441d      	add	r5, r3
 8004c52:	4644      	mov	r4, r8
 8004c54:	2000      	movs	r0, #0
 8004c56:	2100      	movs	r1, #0
 8004c58:	2c00      	cmp	r4, #0
 8004c5a:	da35      	bge.n	8004cc8 <__kernel_rem_pio2+0x5c0>
 8004c5c:	f1b9 0f00 	cmp.w	r9, #0
 8004c60:	d038      	beq.n	8004cd4 <__kernel_rem_pio2+0x5cc>
 8004c62:	4602      	mov	r2, r0
 8004c64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004c68:	9c04      	ldr	r4, [sp, #16]
 8004c6a:	e9c4 2300 	strd	r2, r3, [r4]
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004c76:	f7fb faab 	bl	80001d0 <__aeabi_dsub>
 8004c7a:	ad4a      	add	r5, sp, #296	@ 0x128
 8004c7c:	2401      	movs	r4, #1
 8004c7e:	45a0      	cmp	r8, r4
 8004c80:	da2b      	bge.n	8004cda <__kernel_rem_pio2+0x5d2>
 8004c82:	f1b9 0f00 	cmp.w	r9, #0
 8004c86:	d002      	beq.n	8004c8e <__kernel_rem_pio2+0x586>
 8004c88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	9b04      	ldr	r3, [sp, #16]
 8004c90:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004c94:	e7a5      	b.n	8004be2 <__kernel_rem_pio2+0x4da>
 8004c96:	9c05      	ldr	r4, [sp, #20]
 8004c98:	ab48      	add	r3, sp, #288	@ 0x120
 8004c9a:	441c      	add	r4, r3
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	f1b8 0f00 	cmp.w	r8, #0
 8004ca4:	da09      	bge.n	8004cba <__kernel_rem_pio2+0x5b2>
 8004ca6:	f1b9 0f00 	cmp.w	r9, #0
 8004caa:	d002      	beq.n	8004cb2 <__kernel_rem_pio2+0x5aa>
 8004cac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	9b04      	ldr	r3, [sp, #16]
 8004cb4:	e9c3 0100 	strd	r0, r1, [r3]
 8004cb8:	e793      	b.n	8004be2 <__kernel_rem_pio2+0x4da>
 8004cba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004cbe:	f7fb fa89 	bl	80001d4 <__adddf3>
 8004cc2:	f108 38ff 	add.w	r8, r8, #4294967295
 8004cc6:	e7eb      	b.n	8004ca0 <__kernel_rem_pio2+0x598>
 8004cc8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004ccc:	f7fb fa82 	bl	80001d4 <__adddf3>
 8004cd0:	3c01      	subs	r4, #1
 8004cd2:	e7c1      	b.n	8004c58 <__kernel_rem_pio2+0x550>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	e7c6      	b.n	8004c68 <__kernel_rem_pio2+0x560>
 8004cda:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004cde:	f7fb fa79 	bl	80001d4 <__adddf3>
 8004ce2:	3401      	adds	r4, #1
 8004ce4:	e7cb      	b.n	8004c7e <__kernel_rem_pio2+0x576>
 8004ce6:	ed35 7b02 	vldmdb	r5!, {d7}
 8004cea:	ed8d 7b00 	vstr	d7, [sp]
 8004cee:	ed95 7b02 	vldr	d7, [r5, #8]
 8004cf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cf6:	ec53 2b17 	vmov	r2, r3, d7
 8004cfa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004cfe:	f7fb fa69 	bl	80001d4 <__adddf3>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4606      	mov	r6, r0
 8004d08:	460f      	mov	r7, r1
 8004d0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d0e:	f7fb fa5f 	bl	80001d0 <__aeabi_dsub>
 8004d12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d16:	f7fb fa5d 	bl	80001d4 <__adddf3>
 8004d1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d1e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004d22:	e9c5 6700 	strd	r6, r7, [r5]
 8004d26:	e771      	b.n	8004c0c <__kernel_rem_pio2+0x504>
 8004d28:	ed34 7b02 	vldmdb	r4!, {d7}
 8004d2c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004d30:	ec51 0b17 	vmov	r0, r1, d7
 8004d34:	4652      	mov	r2, sl
 8004d36:	465b      	mov	r3, fp
 8004d38:	ed8d 7b00 	vstr	d7, [sp]
 8004d3c:	f7fb fa4a 	bl	80001d4 <__adddf3>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4606      	mov	r6, r0
 8004d46:	460f      	mov	r7, r1
 8004d48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d4c:	f7fb fa40 	bl	80001d0 <__aeabi_dsub>
 8004d50:	4652      	mov	r2, sl
 8004d52:	465b      	mov	r3, fp
 8004d54:	f7fb fa3e 	bl	80001d4 <__adddf3>
 8004d58:	3d01      	subs	r5, #1
 8004d5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d5e:	e9c4 6700 	strd	r6, r7, [r4]
 8004d62:	e757      	b.n	8004c14 <__kernel_rem_pio2+0x50c>
 8004d64:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004d68:	f7fb fa34 	bl	80001d4 <__adddf3>
 8004d6c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d70:	e758      	b.n	8004c24 <__kernel_rem_pio2+0x51c>
 8004d72:	bf00      	nop
 8004d74:	f3af 8000 	nop.w
	...
 8004d80:	41700000 	.word	0x41700000
 8004d84:	3e700000 	.word	0x3e700000
 8004d88:	9b04      	ldr	r3, [sp, #16]
 8004d8a:	9a04      	ldr	r2, [sp, #16]
 8004d8c:	601d      	str	r5, [r3, #0]
 8004d8e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8004d92:	605c      	str	r4, [r3, #4]
 8004d94:	609f      	str	r7, [r3, #8]
 8004d96:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8004d9a:	60d3      	str	r3, [r2, #12]
 8004d9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004da0:	6110      	str	r0, [r2, #16]
 8004da2:	6153      	str	r3, [r2, #20]
 8004da4:	e71d      	b.n	8004be2 <__kernel_rem_pio2+0x4da>
 8004da6:	bf00      	nop

08004da8 <scalbn>:
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	ec55 4b10 	vmov	r4, r5, d0
 8004dae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004db2:	4606      	mov	r6, r0
 8004db4:	462b      	mov	r3, r5
 8004db6:	b991      	cbnz	r1, 8004dde <scalbn+0x36>
 8004db8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004dbc:	4323      	orrs	r3, r4
 8004dbe:	d03b      	beq.n	8004e38 <scalbn+0x90>
 8004dc0:	4b33      	ldr	r3, [pc, #204]	@ (8004e90 <scalbn+0xe8>)
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f7fb fbba 	bl	8000540 <__aeabi_dmul>
 8004dcc:	4b31      	ldr	r3, [pc, #196]	@ (8004e94 <scalbn+0xec>)
 8004dce:	429e      	cmp	r6, r3
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	460d      	mov	r5, r1
 8004dd4:	da0f      	bge.n	8004df6 <scalbn+0x4e>
 8004dd6:	a326      	add	r3, pc, #152	@ (adr r3, 8004e70 <scalbn+0xc8>)
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	e01e      	b.n	8004e1c <scalbn+0x74>
 8004dde:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004de2:	4291      	cmp	r1, r2
 8004de4:	d10b      	bne.n	8004dfe <scalbn+0x56>
 8004de6:	4622      	mov	r2, r4
 8004de8:	4620      	mov	r0, r4
 8004dea:	4629      	mov	r1, r5
 8004dec:	f7fb f9f2 	bl	80001d4 <__adddf3>
 8004df0:	4604      	mov	r4, r0
 8004df2:	460d      	mov	r5, r1
 8004df4:	e020      	b.n	8004e38 <scalbn+0x90>
 8004df6:	460b      	mov	r3, r1
 8004df8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004dfc:	3936      	subs	r1, #54	@ 0x36
 8004dfe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004e02:	4296      	cmp	r6, r2
 8004e04:	dd0d      	ble.n	8004e22 <scalbn+0x7a>
 8004e06:	2d00      	cmp	r5, #0
 8004e08:	a11b      	add	r1, pc, #108	@ (adr r1, 8004e78 <scalbn+0xd0>)
 8004e0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e0e:	da02      	bge.n	8004e16 <scalbn+0x6e>
 8004e10:	a11b      	add	r1, pc, #108	@ (adr r1, 8004e80 <scalbn+0xd8>)
 8004e12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e16:	a318      	add	r3, pc, #96	@ (adr r3, 8004e78 <scalbn+0xd0>)
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	f7fb fb90 	bl	8000540 <__aeabi_dmul>
 8004e20:	e7e6      	b.n	8004df0 <scalbn+0x48>
 8004e22:	1872      	adds	r2, r6, r1
 8004e24:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004e28:	428a      	cmp	r2, r1
 8004e2a:	dcec      	bgt.n	8004e06 <scalbn+0x5e>
 8004e2c:	2a00      	cmp	r2, #0
 8004e2e:	dd06      	ble.n	8004e3e <scalbn+0x96>
 8004e30:	f36f 531e 	bfc	r3, #20, #11
 8004e34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004e38:	ec45 4b10 	vmov	d0, r4, r5
 8004e3c:	bd70      	pop	{r4, r5, r6, pc}
 8004e3e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004e42:	da08      	bge.n	8004e56 <scalbn+0xae>
 8004e44:	2d00      	cmp	r5, #0
 8004e46:	a10a      	add	r1, pc, #40	@ (adr r1, 8004e70 <scalbn+0xc8>)
 8004e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e4c:	dac3      	bge.n	8004dd6 <scalbn+0x2e>
 8004e4e:	a10e      	add	r1, pc, #56	@ (adr r1, 8004e88 <scalbn+0xe0>)
 8004e50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e54:	e7bf      	b.n	8004dd6 <scalbn+0x2e>
 8004e56:	3236      	adds	r2, #54	@ 0x36
 8004e58:	f36f 531e 	bfc	r3, #20, #11
 8004e5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004e60:	4620      	mov	r0, r4
 8004e62:	4b0d      	ldr	r3, [pc, #52]	@ (8004e98 <scalbn+0xf0>)
 8004e64:	4629      	mov	r1, r5
 8004e66:	2200      	movs	r2, #0
 8004e68:	e7d8      	b.n	8004e1c <scalbn+0x74>
 8004e6a:	bf00      	nop
 8004e6c:	f3af 8000 	nop.w
 8004e70:	c2f8f359 	.word	0xc2f8f359
 8004e74:	01a56e1f 	.word	0x01a56e1f
 8004e78:	8800759c 	.word	0x8800759c
 8004e7c:	7e37e43c 	.word	0x7e37e43c
 8004e80:	8800759c 	.word	0x8800759c
 8004e84:	fe37e43c 	.word	0xfe37e43c
 8004e88:	c2f8f359 	.word	0xc2f8f359
 8004e8c:	81a56e1f 	.word	0x81a56e1f
 8004e90:	43500000 	.word	0x43500000
 8004e94:	ffff3cb0 	.word	0xffff3cb0
 8004e98:	3c900000 	.word	0x3c900000
 8004e9c:	00000000 	.word	0x00000000

08004ea0 <floor>:
 8004ea0:	ec51 0b10 	vmov	r0, r1, d0
 8004ea4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eac:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004eb0:	2e13      	cmp	r6, #19
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	4680      	mov	r8, r0
 8004eb8:	dc34      	bgt.n	8004f24 <floor+0x84>
 8004eba:	2e00      	cmp	r6, #0
 8004ebc:	da17      	bge.n	8004eee <floor+0x4e>
 8004ebe:	a332      	add	r3, pc, #200	@ (adr r3, 8004f88 <floor+0xe8>)
 8004ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec4:	f7fb f986 	bl	80001d4 <__adddf3>
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2300      	movs	r3, #0
 8004ecc:	f7fb fdc8 	bl	8000a60 <__aeabi_dcmpgt>
 8004ed0:	b150      	cbz	r0, 8004ee8 <floor+0x48>
 8004ed2:	2c00      	cmp	r4, #0
 8004ed4:	da55      	bge.n	8004f82 <floor+0xe2>
 8004ed6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004eda:	432c      	orrs	r4, r5
 8004edc:	2500      	movs	r5, #0
 8004ede:	42ac      	cmp	r4, r5
 8004ee0:	4c2b      	ldr	r4, [pc, #172]	@ (8004f90 <floor+0xf0>)
 8004ee2:	bf08      	it	eq
 8004ee4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4628      	mov	r0, r5
 8004eec:	e023      	b.n	8004f36 <floor+0x96>
 8004eee:	4f29      	ldr	r7, [pc, #164]	@ (8004f94 <floor+0xf4>)
 8004ef0:	4137      	asrs	r7, r6
 8004ef2:	ea01 0307 	and.w	r3, r1, r7
 8004ef6:	4303      	orrs	r3, r0
 8004ef8:	d01d      	beq.n	8004f36 <floor+0x96>
 8004efa:	a323      	add	r3, pc, #140	@ (adr r3, 8004f88 <floor+0xe8>)
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f7fb f968 	bl	80001d4 <__adddf3>
 8004f04:	2200      	movs	r2, #0
 8004f06:	2300      	movs	r3, #0
 8004f08:	f7fb fdaa 	bl	8000a60 <__aeabi_dcmpgt>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d0eb      	beq.n	8004ee8 <floor+0x48>
 8004f10:	2c00      	cmp	r4, #0
 8004f12:	bfbe      	ittt	lt
 8004f14:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004f18:	4133      	asrlt	r3, r6
 8004f1a:	18e4      	addlt	r4, r4, r3
 8004f1c:	ea24 0407 	bic.w	r4, r4, r7
 8004f20:	2500      	movs	r5, #0
 8004f22:	e7e1      	b.n	8004ee8 <floor+0x48>
 8004f24:	2e33      	cmp	r6, #51	@ 0x33
 8004f26:	dd0a      	ble.n	8004f3e <floor+0x9e>
 8004f28:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004f2c:	d103      	bne.n	8004f36 <floor+0x96>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	f7fb f94f 	bl	80001d4 <__adddf3>
 8004f36:	ec41 0b10 	vmov	d0, r0, r1
 8004f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f3e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004f42:	f04f 37ff 	mov.w	r7, #4294967295
 8004f46:	40df      	lsrs	r7, r3
 8004f48:	4207      	tst	r7, r0
 8004f4a:	d0f4      	beq.n	8004f36 <floor+0x96>
 8004f4c:	a30e      	add	r3, pc, #56	@ (adr r3, 8004f88 <floor+0xe8>)
 8004f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f52:	f7fb f93f 	bl	80001d4 <__adddf3>
 8004f56:	2200      	movs	r2, #0
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f7fb fd81 	bl	8000a60 <__aeabi_dcmpgt>
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	d0c2      	beq.n	8004ee8 <floor+0x48>
 8004f62:	2c00      	cmp	r4, #0
 8004f64:	da0a      	bge.n	8004f7c <floor+0xdc>
 8004f66:	2e14      	cmp	r6, #20
 8004f68:	d101      	bne.n	8004f6e <floor+0xce>
 8004f6a:	3401      	adds	r4, #1
 8004f6c:	e006      	b.n	8004f7c <floor+0xdc>
 8004f6e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004f72:	2301      	movs	r3, #1
 8004f74:	40b3      	lsls	r3, r6
 8004f76:	441d      	add	r5, r3
 8004f78:	4545      	cmp	r5, r8
 8004f7a:	d3f6      	bcc.n	8004f6a <floor+0xca>
 8004f7c:	ea25 0507 	bic.w	r5, r5, r7
 8004f80:	e7b2      	b.n	8004ee8 <floor+0x48>
 8004f82:	2500      	movs	r5, #0
 8004f84:	462c      	mov	r4, r5
 8004f86:	e7af      	b.n	8004ee8 <floor+0x48>
 8004f88:	8800759c 	.word	0x8800759c
 8004f8c:	7e37e43c 	.word	0x7e37e43c
 8004f90:	bff00000 	.word	0xbff00000
 8004f94:	000fffff 	.word	0x000fffff

08004f98 <_init>:
 8004f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9a:	bf00      	nop
 8004f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9e:	bc08      	pop	{r3}
 8004fa0:	469e      	mov	lr, r3
 8004fa2:	4770      	bx	lr

08004fa4 <_fini>:
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	bf00      	nop
 8004fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004faa:	bc08      	pop	{r3}
 8004fac:	469e      	mov	lr, r3
 8004fae:	4770      	bx	lr
