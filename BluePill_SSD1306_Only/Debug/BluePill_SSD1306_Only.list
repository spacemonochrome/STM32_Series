
BluePill_SSD1306_Only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075ac  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011dc  080076c0  080076c0  000086c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800889c  0800889c  0000a1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800889c  0800889c  0000989c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088a4  080088a4  0000a1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088a4  080088a4  000098a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088a8  080088a8  000098a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080088ac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  200001e4  08008a90  0000a1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c0  08008a90  0000a7c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007485  00000000  00000000  0000a20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b4  00000000  00000000  00011692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  00012f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000668  00000000  00000000  000137b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e81  00000000  00000000  00013e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae16  00000000  00000000  0002bca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000844e6  00000000  00000000  00036ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000baf9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000366c  00000000  00000000  000bafe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000be64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080076a4 	.word	0x080076a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080076a4 	.word	0x080076a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd8:	f000 fd56 	bl	8001688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bdc:	f000 f860 	bl	8000ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be0:	f000 f8d2 	bl	8000d88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000be4:	f000 f8a2 	bl	8000d2c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init (); // initialise the display
 8000be8:	f000 f902 	bl	8000df0 <SSD1306_Init>
  SSD1306_GotoXY (10,10); // goto 10, 10
 8000bec:	210a      	movs	r1, #10
 8000bee:	200a      	movs	r0, #10
 8000bf0:	f000 fa66 	bl	80010c0 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4922      	ldr	r1, [pc, #136]	@ (8000c80 <main+0xac>)
 8000bf8:	4822      	ldr	r0, [pc, #136]	@ (8000c84 <main+0xb0>)
 8000bfa:	f000 faf5 	bl	80011e8 <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 8000bfe:	211e      	movs	r1, #30
 8000c00:	200a      	movs	r0, #10
 8000c02:	f000 fa5d 	bl	80010c0 <SSD1306_GotoXY>
  SSD1306_Puts ("WORLD !!", &Font_11x18, 1);
 8000c06:	2201      	movs	r2, #1
 8000c08:	491d      	ldr	r1, [pc, #116]	@ (8000c80 <main+0xac>)
 8000c0a:	481f      	ldr	r0, [pc, #124]	@ (8000c88 <main+0xb4>)
 8000c0c:	f000 faec 	bl	80011e8 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 8000c10:	f000 f9b2 	bl	8000f78 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 8000c14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c18:	f000 fd98 	bl	800174c <HAL_Delay>

  SSD1306_Clear();
 8000c1c:	f000 fb09 	bl	8001232 <SSD1306_Clear>

  sprintf (buffer, "number %d", num);
 8000c20:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <main+0xb8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	491a      	ldr	r1, [pc, #104]	@ (8000c90 <main+0xbc>)
 8000c28:	481a      	ldr	r0, [pc, #104]	@ (8000c94 <main+0xc0>)
 8000c2a:	f003 f907 	bl	8003e3c <siprintf>
  SSD1306_GotoXY (10,10);
 8000c2e:	210a      	movs	r1, #10
 8000c30:	200a      	movs	r0, #10
 8000c32:	f000 fa45 	bl	80010c0 <SSD1306_GotoXY>
  SSD1306_Puts (buffer, &Font_11x18, 1);
 8000c36:	2201      	movs	r2, #1
 8000c38:	4911      	ldr	r1, [pc, #68]	@ (8000c80 <main+0xac>)
 8000c3a:	4816      	ldr	r0, [pc, #88]	@ (8000c94 <main+0xc0>)
 8000c3c:	f000 fad4 	bl	80011e8 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000c40:	f000 f99a 	bl	8000f78 <SSD1306_UpdateScreen>

  memset(buffer, 0, sizeof(buffer));
 8000c44:	2210      	movs	r2, #16
 8000c46:	2100      	movs	r1, #0
 8000c48:	4812      	ldr	r0, [pc, #72]	@ (8000c94 <main+0xc0>)
 8000c4a:	f003 f95c 	bl	8003f06 <memset>
  sprintf (buffer, "float %.2f", flt);
 8000c4e:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <main+0xc4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fbe8 	bl	8000428 <__aeabi_f2d>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	490f      	ldr	r1, [pc, #60]	@ (8000c9c <main+0xc8>)
 8000c5e:	480d      	ldr	r0, [pc, #52]	@ (8000c94 <main+0xc0>)
 8000c60:	f003 f8ec 	bl	8003e3c <siprintf>
  SSD1306_GotoXY (10,30);
 8000c64:	211e      	movs	r1, #30
 8000c66:	200a      	movs	r0, #10
 8000c68:	f000 fa2a 	bl	80010c0 <SSD1306_GotoXY>
  SSD1306_Puts (buffer, &Font_11x18, 1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4904      	ldr	r1, [pc, #16]	@ (8000c80 <main+0xac>)
 8000c70:	4808      	ldr	r0, [pc, #32]	@ (8000c94 <main+0xc0>)
 8000c72:	f000 fab9 	bl	80011e8 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000c76:	f000 f97f 	bl	8000f78 <SSD1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c7a:	bf00      	nop
 8000c7c:	e7fd      	b.n	8000c7a <main+0xa6>
 8000c7e:	bf00      	nop
 8000c80:	20000000 	.word	0x20000000
 8000c84:	080076c0 	.word	0x080076c0
 8000c88:	080076c8 	.word	0x080076c8
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	080076d4 	.word	0x080076d4
 8000c94:	20000254 	.word	0x20000254
 8000c98:	2000000c 	.word	0x2000000c
 8000c9c:	080076e0 	.word	0x080076e0

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b090      	sub	sp, #64	@ 0x40
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	f107 0318 	add.w	r3, r7, #24
 8000caa:	2228      	movs	r2, #40	@ 0x28
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 f929 	bl	8003f06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cde:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	f107 0318 	add.w	r3, r7, #24
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 fd85 	bl	80027f8 <HAL_RCC_OscConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cf4:	f000 f876 	bl	8000de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2102      	movs	r1, #2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 fff2 	bl	8002cfc <HAL_RCC_ClockConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d1e:	f000 f861 	bl	8000de4 <Error_Handler>
  }
}
 8000d22:	bf00      	nop
 8000d24:	3740      	adds	r7, #64	@ 0x40
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d32:	4a13      	ldr	r2, [pc, #76]	@ (8000d80 <MX_I2C1_Init+0x54>)
 8000d34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d38:	4a12      	ldr	r2, [pc, #72]	@ (8000d84 <MX_I2C1_Init+0x58>)
 8000d3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d68:	4804      	ldr	r0, [pc, #16]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d6a:	f000 ff7b 	bl	8001c64 <HAL_I2C_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d74:	f000 f836 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000200 	.word	0x20000200
 8000d80:	40005400 	.word	0x40005400
 8000d84:	00061a80 	.word	0x00061a80

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8e:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_GPIO_Init+0x58>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4a13      	ldr	r2, [pc, #76]	@ (8000de0 <MX_GPIO_Init+0x58>)
 8000d94:	f043 0320 	orr.w	r3, r3, #32
 8000d98:	6193      	str	r3, [r2, #24]
 8000d9a:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <MX_GPIO_Init+0x58>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	f003 0320 	and.w	r3, r3, #32
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <MX_GPIO_Init+0x58>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	4a0d      	ldr	r2, [pc, #52]	@ (8000de0 <MX_GPIO_Init+0x58>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	6193      	str	r3, [r2, #24]
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <MX_GPIO_Init+0x58>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <MX_GPIO_Init+0x58>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	4a07      	ldr	r2, [pc, #28]	@ (8000de0 <MX_GPIO_Init+0x58>)
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	6193      	str	r3, [r2, #24]
 8000dca:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <MX_GPIO_Init+0x58>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	40021000 	.word	0x40021000

08000de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de8:	b672      	cpsid	i
}
 8000dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <Error_Handler+0x8>

08000df0 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000df6:	f000 fa25 	bl	8001244 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000dfa:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2178      	movs	r1, #120	@ 0x78
 8000e02:	485b      	ldr	r0, [pc, #364]	@ (8000f70 <SSD1306_Init+0x180>)
 8000e04:	f001 f970 	bl	80020e8 <HAL_I2C_IsDeviceReady>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e0a9      	b.n	8000f66 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000e12:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000e16:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e18:	e002      	b.n	8000e20 <SSD1306_Init+0x30>
		p--;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f9      	bne.n	8000e1a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000e26:	22ae      	movs	r2, #174	@ 0xae
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2078      	movs	r0, #120	@ 0x78
 8000e2c:	f000 fa84 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000e30:	2220      	movs	r2, #32
 8000e32:	2100      	movs	r1, #0
 8000e34:	2078      	movs	r0, #120	@ 0x78
 8000e36:	f000 fa7f 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000e3a:	2210      	movs	r2, #16
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2078      	movs	r0, #120	@ 0x78
 8000e40:	f000 fa7a 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e44:	22b0      	movs	r2, #176	@ 0xb0
 8000e46:	2100      	movs	r1, #0
 8000e48:	2078      	movs	r0, #120	@ 0x78
 8000e4a:	f000 fa75 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000e4e:	22c8      	movs	r2, #200	@ 0xc8
 8000e50:	2100      	movs	r1, #0
 8000e52:	2078      	movs	r0, #120	@ 0x78
 8000e54:	f000 fa70 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2078      	movs	r0, #120	@ 0x78
 8000e5e:	f000 fa6b 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000e62:	2210      	movs	r2, #16
 8000e64:	2100      	movs	r1, #0
 8000e66:	2078      	movs	r0, #120	@ 0x78
 8000e68:	f000 fa66 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000e6c:	2240      	movs	r2, #64	@ 0x40
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2078      	movs	r0, #120	@ 0x78
 8000e72:	f000 fa61 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000e76:	2281      	movs	r2, #129	@ 0x81
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2078      	movs	r0, #120	@ 0x78
 8000e7c:	f000 fa5c 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000e80:	22ff      	movs	r2, #255	@ 0xff
 8000e82:	2100      	movs	r1, #0
 8000e84:	2078      	movs	r0, #120	@ 0x78
 8000e86:	f000 fa57 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000e8a:	22a1      	movs	r2, #161	@ 0xa1
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2078      	movs	r0, #120	@ 0x78
 8000e90:	f000 fa52 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000e94:	22a6      	movs	r2, #166	@ 0xa6
 8000e96:	2100      	movs	r1, #0
 8000e98:	2078      	movs	r0, #120	@ 0x78
 8000e9a:	f000 fa4d 	bl	8001338 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000e9e:	22a8      	movs	r2, #168	@ 0xa8
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2078      	movs	r0, #120	@ 0x78
 8000ea4:	f000 fa48 	bl	8001338 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8000ea8:	223f      	movs	r2, #63	@ 0x3f
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2078      	movs	r0, #120	@ 0x78
 8000eae:	f000 fa43 	bl	8001338 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000eb2:	22a4      	movs	r2, #164	@ 0xa4
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2078      	movs	r0, #120	@ 0x78
 8000eb8:	f000 fa3e 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000ebc:	22d3      	movs	r2, #211	@ 0xd3
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2078      	movs	r0, #120	@ 0x78
 8000ec2:	f000 fa39 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2078      	movs	r0, #120	@ 0x78
 8000ecc:	f000 fa34 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ed0:	22d5      	movs	r2, #213	@ 0xd5
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2078      	movs	r0, #120	@ 0x78
 8000ed6:	f000 fa2f 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000eda:	22f0      	movs	r2, #240	@ 0xf0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2078      	movs	r0, #120	@ 0x78
 8000ee0:	f000 fa2a 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000ee4:	22d9      	movs	r2, #217	@ 0xd9
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2078      	movs	r0, #120	@ 0x78
 8000eea:	f000 fa25 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000eee:	2222      	movs	r2, #34	@ 0x22
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2078      	movs	r0, #120	@ 0x78
 8000ef4:	f000 fa20 	bl	8001338 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000ef8:	22da      	movs	r2, #218	@ 0xda
 8000efa:	2100      	movs	r1, #0
 8000efc:	2078      	movs	r0, #120	@ 0x78
 8000efe:	f000 fa1b 	bl	8001338 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8000f02:	2212      	movs	r2, #18
 8000f04:	2100      	movs	r1, #0
 8000f06:	2078      	movs	r0, #120	@ 0x78
 8000f08:	f000 fa16 	bl	8001338 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000f0c:	22db      	movs	r2, #219	@ 0xdb
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2078      	movs	r0, #120	@ 0x78
 8000f12:	f000 fa11 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000f16:	2220      	movs	r2, #32
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2078      	movs	r0, #120	@ 0x78
 8000f1c:	f000 fa0c 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000f20:	228d      	movs	r2, #141	@ 0x8d
 8000f22:	2100      	movs	r1, #0
 8000f24:	2078      	movs	r0, #120	@ 0x78
 8000f26:	f000 fa07 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000f2a:	2214      	movs	r2, #20
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2078      	movs	r0, #120	@ 0x78
 8000f30:	f000 fa02 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000f34:	22af      	movs	r2, #175	@ 0xaf
 8000f36:	2100      	movs	r1, #0
 8000f38:	2078      	movs	r0, #120	@ 0x78
 8000f3a:	f000 f9fd 	bl	8001338 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000f3e:	222e      	movs	r2, #46	@ 0x2e
 8000f40:	2100      	movs	r1, #0
 8000f42:	2078      	movs	r0, #120	@ 0x78
 8000f44:	f000 f9f8 	bl	8001338 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f000 f843 	bl	8000fd4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000f4e:	f000 f813 	bl	8000f78 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <SSD1306_Init+0x184>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <SSD1306_Init+0x184>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <SSD1306_Init+0x184>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000f64:	2301      	movs	r3, #1
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000200 	.word	0x20000200
 8000f74:	20000664 	.word	0x20000664

08000f78 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000f7e:	2300      	movs	r3, #0
 8000f80:	71fb      	strb	r3, [r7, #7]
 8000f82:	e01d      	b.n	8000fc0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	3b50      	subs	r3, #80	@ 0x50
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2078      	movs	r0, #120	@ 0x78
 8000f90:	f000 f9d2 	bl	8001338 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2100      	movs	r1, #0
 8000f98:	2078      	movs	r0, #120	@ 0x78
 8000f9a:	f000 f9cd 	bl	8001338 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000f9e:	2210      	movs	r2, #16
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2078      	movs	r0, #120	@ 0x78
 8000fa4:	f000 f9c8 	bl	8001338 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	01db      	lsls	r3, r3, #7
 8000fac:	4a08      	ldr	r2, [pc, #32]	@ (8000fd0 <SSD1306_UpdateScreen+0x58>)
 8000fae:	441a      	add	r2, r3
 8000fb0:	2380      	movs	r3, #128	@ 0x80
 8000fb2:	2140      	movs	r1, #64	@ 0x40
 8000fb4:	2078      	movs	r0, #120	@ 0x78
 8000fb6:	f000 f959 	bl	800126c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	71fb      	strb	r3, [r7, #7]
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2b07      	cmp	r3, #7
 8000fc4:	d9de      	bls.n	8000f84 <SSD1306_UpdateScreen+0xc>
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000264 	.word	0x20000264

08000fd4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <SSD1306_Fill+0x14>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e000      	b.n	8000fea <SSD1306_Fill+0x16>
 8000fe8:	23ff      	movs	r3, #255	@ 0xff
 8000fea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4803      	ldr	r0, [pc, #12]	@ (8001000 <SSD1306_Fill+0x2c>)
 8000ff2:	f002 ff88 	bl	8003f06 <memset>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000264 	.word	0x20000264

08001004 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	80fb      	strh	r3, [r7, #6]
 800100e:	460b      	mov	r3, r1
 8001010:	80bb      	strh	r3, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	70fb      	strb	r3, [r7, #3]
	if (
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	2b7f      	cmp	r3, #127	@ 0x7f
 800101a:	d848      	bhi.n	80010ae <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800101c:	88bb      	ldrh	r3, [r7, #4]
 800101e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001020:	d845      	bhi.n	80010ae <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001022:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <SSD1306_DrawPixel+0xb4>)
 8001024:	791b      	ldrb	r3, [r3, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d006      	beq.n	8001038 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	2b00      	cmp	r3, #0
 800102e:	bf0c      	ite	eq
 8001030:	2301      	moveq	r3, #1
 8001032:	2300      	movne	r3, #0
 8001034:	b2db      	uxtb	r3, r3
 8001036:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d11a      	bne.n	8001074 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800103e:	88fa      	ldrh	r2, [r7, #6]
 8001040:	88bb      	ldrh	r3, [r7, #4]
 8001042:	08db      	lsrs	r3, r3, #3
 8001044:	b298      	uxth	r0, r3
 8001046:	4603      	mov	r3, r0
 8001048:	01db      	lsls	r3, r3, #7
 800104a:	4413      	add	r3, r2
 800104c:	4a1b      	ldr	r2, [pc, #108]	@ (80010bc <SSD1306_DrawPixel+0xb8>)
 800104e:	5cd3      	ldrb	r3, [r2, r3]
 8001050:	b25a      	sxtb	r2, r3
 8001052:	88bb      	ldrh	r3, [r7, #4]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	2101      	movs	r1, #1
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	b25b      	sxtb	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	b259      	sxtb	r1, r3
 8001064:	88fa      	ldrh	r2, [r7, #6]
 8001066:	4603      	mov	r3, r0
 8001068:	01db      	lsls	r3, r3, #7
 800106a:	4413      	add	r3, r2
 800106c:	b2c9      	uxtb	r1, r1
 800106e:	4a13      	ldr	r2, [pc, #76]	@ (80010bc <SSD1306_DrawPixel+0xb8>)
 8001070:	54d1      	strb	r1, [r2, r3]
 8001072:	e01d      	b.n	80010b0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001074:	88fa      	ldrh	r2, [r7, #6]
 8001076:	88bb      	ldrh	r3, [r7, #4]
 8001078:	08db      	lsrs	r3, r3, #3
 800107a:	b298      	uxth	r0, r3
 800107c:	4603      	mov	r3, r0
 800107e:	01db      	lsls	r3, r3, #7
 8001080:	4413      	add	r3, r2
 8001082:	4a0e      	ldr	r2, [pc, #56]	@ (80010bc <SSD1306_DrawPixel+0xb8>)
 8001084:	5cd3      	ldrb	r3, [r2, r3]
 8001086:	b25a      	sxtb	r2, r3
 8001088:	88bb      	ldrh	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	2101      	movs	r1, #1
 8001090:	fa01 f303 	lsl.w	r3, r1, r3
 8001094:	b25b      	sxtb	r3, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	b25b      	sxtb	r3, r3
 800109a:	4013      	ands	r3, r2
 800109c:	b259      	sxtb	r1, r3
 800109e:	88fa      	ldrh	r2, [r7, #6]
 80010a0:	4603      	mov	r3, r0
 80010a2:	01db      	lsls	r3, r3, #7
 80010a4:	4413      	add	r3, r2
 80010a6:	b2c9      	uxtb	r1, r1
 80010a8:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <SSD1306_DrawPixel+0xb8>)
 80010aa:	54d1      	strb	r1, [r2, r3]
 80010ac:	e000      	b.n	80010b0 <SSD1306_DrawPixel+0xac>
		return;
 80010ae:	bf00      	nop
	}
}
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	20000664 	.word	0x20000664
 80010bc:	20000264 	.word	0x20000264

080010c0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	460a      	mov	r2, r1
 80010ca:	80fb      	strh	r3, [r7, #6]
 80010cc:	4613      	mov	r3, r2
 80010ce:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80010d0:	4a05      	ldr	r2, [pc, #20]	@ (80010e8 <SSD1306_GotoXY+0x28>)
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80010d6:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <SSD1306_GotoXY+0x28>)
 80010d8:	88bb      	ldrh	r3, [r7, #4]
 80010da:	8053      	strh	r3, [r2, #2]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000664 	.word	0x20000664

080010ec <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80010fc:	4b39      	ldr	r3, [pc, #228]	@ (80011e4 <SSD1306_Putc+0xf8>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
	if (
 8001108:	2b7f      	cmp	r3, #127	@ 0x7f
 800110a:	dc07      	bgt.n	800111c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800110c:	4b35      	ldr	r3, [pc, #212]	@ (80011e4 <SSD1306_Putc+0xf8>)
 800110e:	885b      	ldrh	r3, [r3, #2]
 8001110:	461a      	mov	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	785b      	ldrb	r3, [r3, #1]
 8001116:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001118:	2b3f      	cmp	r3, #63	@ 0x3f
 800111a:	dd01      	ble.n	8001120 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800111c:	2300      	movs	r3, #0
 800111e:	e05d      	b.n	80011dc <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	e04b      	b.n	80011be <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	3b20      	subs	r3, #32
 800112e:	6839      	ldr	r1, [r7, #0]
 8001130:	7849      	ldrb	r1, [r1, #1]
 8001132:	fb01 f303 	mul.w	r3, r1, r3
 8001136:	4619      	mov	r1, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	440b      	add	r3, r1
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	e030      	b.n	80011ac <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d010      	beq.n	800117c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800115a:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <SSD1306_Putc+0xf8>)
 800115c:	881a      	ldrh	r2, [r3, #0]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	b29b      	uxth	r3, r3
 8001162:	4413      	add	r3, r2
 8001164:	b298      	uxth	r0, r3
 8001166:	4b1f      	ldr	r3, [pc, #124]	@ (80011e4 <SSD1306_Putc+0xf8>)
 8001168:	885a      	ldrh	r2, [r3, #2]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	b29b      	uxth	r3, r3
 800116e:	4413      	add	r3, r2
 8001170:	b29b      	uxth	r3, r3
 8001172:	79ba      	ldrb	r2, [r7, #6]
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff ff45 	bl	8001004 <SSD1306_DrawPixel>
 800117a:	e014      	b.n	80011a6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800117c:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <SSD1306_Putc+0xf8>)
 800117e:	881a      	ldrh	r2, [r3, #0]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	b29b      	uxth	r3, r3
 8001184:	4413      	add	r3, r2
 8001186:	b298      	uxth	r0, r3
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <SSD1306_Putc+0xf8>)
 800118a:	885a      	ldrh	r2, [r3, #2]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	b29b      	uxth	r3, r3
 8001190:	4413      	add	r3, r2
 8001192:	b299      	uxth	r1, r3
 8001194:	79bb      	ldrb	r3, [r7, #6]
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf0c      	ite	eq
 800119a:	2301      	moveq	r3, #1
 800119c:	2300      	movne	r3, #0
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	f7ff ff2f 	bl	8001004 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	3301      	adds	r3, #1
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d3c8      	bcc.n	800114a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3301      	adds	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	785b      	ldrb	r3, [r3, #1]
 80011c2:	461a      	mov	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d3ad      	bcc.n	8001126 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <SSD1306_Putc+0xf8>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	7812      	ldrb	r2, [r2, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <SSD1306_Putc+0xf8>)
 80011d8:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80011da:	79fb      	ldrb	r3, [r7, #7]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000664 	.word	0x20000664

080011e8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	4613      	mov	r3, r2
 80011f4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80011f6:	e012      	b.n	800121e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	68b9      	ldr	r1, [r7, #8]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff73 	bl	80010ec <SSD1306_Putc>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d002      	beq.n	8001218 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	e008      	b.n	800122a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3301      	adds	r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1e8      	bne.n	80011f8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	781b      	ldrb	r3, [r3, #0]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff fecc 	bl	8000fd4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800123c:	f7ff fe9c 	bl	8000f78 <SSD1306_UpdateScreen>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800124a:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <ssd1306_I2C_Init+0x24>)
 800124c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800124e:	e002      	b.n	8001256 <ssd1306_I2C_Init+0x12>
		p--;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f9      	bne.n	8001250 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	0003d090 	.word	0x0003d090

0800126c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b0c7      	sub	sp, #284	@ 0x11c
 8001270:	af02      	add	r7, sp, #8
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800127a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800127e:	600a      	str	r2, [r1, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001286:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800128a:	4622      	mov	r2, r4
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001292:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001296:	4602      	mov	r2, r0
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800129e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012a2:	460a      	mov	r2, r1
 80012a4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80012a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012ae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012b2:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80012b6:	7812      	ldrb	r2, [r2, #0]
 80012b8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80012c0:	e015      	b.n	80012ee <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80012c2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012c6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012ca:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	441a      	add	r2, r3
 80012d2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012d6:	3301      	adds	r3, #1
 80012d8:	7811      	ldrb	r1, [r2, #0]
 80012da:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012de:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80012e2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80012e4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012e8:	3301      	adds	r3, #1
 80012ea:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80012ee:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012f8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80012fc:	8812      	ldrh	r2, [r2, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d8df      	bhi.n	80012c2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8001302:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001306:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b299      	uxth	r1, r3
 800130e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001312:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	b29b      	uxth	r3, r3
 800131c:	f107 020c 	add.w	r2, r7, #12
 8001320:	200a      	movs	r0, #10
 8001322:	9000      	str	r0, [sp, #0]
 8001324:	4803      	ldr	r0, [pc, #12]	@ (8001334 <ssd1306_I2C_WriteMulti+0xc8>)
 8001326:	f000 fde1 	bl	8001eec <HAL_I2C_Master_Transmit>
}
 800132a:	bf00      	nop
 800132c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001330:	46bd      	mov	sp, r7
 8001332:	bd90      	pop	{r4, r7, pc}
 8001334:	20000200 	.word	0x20000200

08001338 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af02      	add	r7, sp, #8
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
 8001342:	460b      	mov	r3, r1
 8001344:	71bb      	strb	r3, [r7, #6]
 8001346:	4613      	mov	r3, r2
 8001348:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800134a:	79bb      	ldrb	r3, [r7, #6]
 800134c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800134e:	797b      	ldrb	r3, [r7, #5]
 8001350:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	b299      	uxth	r1, r3
 8001356:	f107 020c 	add.w	r2, r7, #12
 800135a:	230a      	movs	r3, #10
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2302      	movs	r3, #2
 8001360:	4803      	ldr	r0, [pc, #12]	@ (8001370 <ssd1306_I2C_Write+0x38>)
 8001362:	f000 fdc3 	bl	8001eec <HAL_I2C_Master_Transmit>
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000200 	.word	0x20000200

08001374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800137a:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <HAL_MspInit+0x5c>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	4a14      	ldr	r2, [pc, #80]	@ (80013d0 <HAL_MspInit+0x5c>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6193      	str	r3, [r2, #24]
 8001386:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <HAL_MspInit+0x5c>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <HAL_MspInit+0x5c>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4a0e      	ldr	r2, [pc, #56]	@ (80013d0 <HAL_MspInit+0x5c>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800139c:	61d3      	str	r3, [r2, #28]
 800139e:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <HAL_MspInit+0x5c>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <HAL_MspInit+0x60>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <HAL_MspInit+0x60>)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010000 	.word	0x40010000

080013d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a15      	ldr	r2, [pc, #84]	@ (8001448 <HAL_I2C_MspInit+0x70>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d123      	bne.n	8001440 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f8:	4b14      	ldr	r3, [pc, #80]	@ (800144c <HAL_I2C_MspInit+0x74>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a13      	ldr	r2, [pc, #76]	@ (800144c <HAL_I2C_MspInit+0x74>)
 80013fe:	f043 0308 	orr.w	r3, r3, #8
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <HAL_I2C_MspInit+0x74>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001410:	23c0      	movs	r3, #192	@ 0xc0
 8001412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001414:	2312      	movs	r3, #18
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4619      	mov	r1, r3
 8001422:	480b      	ldr	r0, [pc, #44]	@ (8001450 <HAL_I2C_MspInit+0x78>)
 8001424:	f000 fa9a 	bl	800195c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001428:	4b08      	ldr	r3, [pc, #32]	@ (800144c <HAL_I2C_MspInit+0x74>)
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	4a07      	ldr	r2, [pc, #28]	@ (800144c <HAL_I2C_MspInit+0x74>)
 800142e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001432:	61d3      	str	r3, [r2, #28]
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <HAL_I2C_MspInit+0x74>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001440:	bf00      	nop
 8001442:	3720      	adds	r7, #32
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40005400 	.word	0x40005400
 800144c:	40021000 	.word	0x40021000
 8001450:	40010c00 	.word	0x40010c00

08001454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <NMI_Handler+0x4>

0800145c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <HardFault_Handler+0x4>

08001464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <MemManage_Handler+0x4>

0800146c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <UsageFault_Handler+0x4>

0800147c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a4:	f000 f936 	bl	8001714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return 1;
 80014b0:	2301      	movs	r3, #1
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <_kill>:

int _kill(int pid, int sig)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014c4:	f002 fd72 	bl	8003fac <__errno>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2216      	movs	r2, #22
 80014cc:	601a      	str	r2, [r3, #0]
  return -1;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <_exit>:

void _exit (int status)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014e2:	f04f 31ff 	mov.w	r1, #4294967295
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffe7 	bl	80014ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <_exit+0x12>

080014f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e00a      	b.n	8001518 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001502:	f3af 8000 	nop.w
 8001506:	4601      	mov	r1, r0
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60ba      	str	r2, [r7, #8]
 800150e:	b2ca      	uxtb	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	dbf0      	blt.n	8001502 <_read+0x12>
  }

  return len;
 8001520:	687b      	ldr	r3, [r7, #4]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	e009      	b.n	8001550 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	60ba      	str	r2, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf1      	blt.n	800153c <_write+0x12>
  }
  return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_close>:

int _close(int file)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001588:	605a      	str	r2, [r3, #4]
  return 0;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <_isatty>:

int _isatty(int file)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b085      	sub	sp, #20
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
	...

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	@ (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	@ (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f002 fcda 	bl	8003fac <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <_sbrk+0x64>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20005000 	.word	0x20005000
 8001624:	00000400 	.word	0x00000400
 8001628:	2000066c 	.word	0x2000066c
 800162c:	200007c0 	.word	0x200007c0

08001630 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800163c:	f7ff fff8 	bl	8001630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001640:	480b      	ldr	r0, [pc, #44]	@ (8001670 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001642:	490c      	ldr	r1, [pc, #48]	@ (8001674 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001644:	4a0c      	ldr	r2, [pc, #48]	@ (8001678 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a09      	ldr	r2, [pc, #36]	@ (800167c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001658:	4c09      	ldr	r4, [pc, #36]	@ (8001680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001666:	f002 fca7 	bl	8003fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800166a:	f7ff fab3 	bl	8000bd4 <main>
  bx lr
 800166e:	4770      	bx	lr
  ldr r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001674:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001678:	080088ac 	.word	0x080088ac
  ldr r2, =_sbss
 800167c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001680:	200007c0 	.word	0x200007c0

08001684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC1_2_IRQHandler>
	...

08001688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168c:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <HAL_Init+0x28>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a07      	ldr	r2, [pc, #28]	@ (80016b0 <HAL_Init+0x28>)
 8001692:	f043 0310 	orr.w	r3, r3, #16
 8001696:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001698:	2003      	movs	r0, #3
 800169a:	f000 f92b 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169e:	200f      	movs	r0, #15
 80016a0:	f000 f808 	bl	80016b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a4:	f7ff fe66 	bl	8001374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40022000 	.word	0x40022000

080016b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016bc:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <HAL_InitTick+0x54>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b12      	ldr	r3, [pc, #72]	@ (800170c <HAL_InitTick+0x58>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f935 	bl	8001942 <HAL_SYSTICK_Config>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00e      	b.n	8001700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d80a      	bhi.n	80016fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e8:	2200      	movs	r2, #0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f000 f90b 	bl	800190a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f4:	4a06      	ldr	r2, [pc, #24]	@ (8001710 <HAL_InitTick+0x5c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000010 	.word	0x20000010
 800170c:	20000018 	.word	0x20000018
 8001710:	20000014 	.word	0x20000014

08001714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <HAL_IncTick+0x1c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <HAL_IncTick+0x20>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a03      	ldr	r2, [pc, #12]	@ (8001734 <HAL_IncTick+0x20>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	20000018 	.word	0x20000018
 8001734:	20000670 	.word	0x20000670

08001738 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b02      	ldr	r3, [pc, #8]	@ (8001748 <HAL_GetTick+0x10>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	20000670 	.word	0x20000670

0800174c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff fff0 	bl	8001738 <HAL_GetTick>
 8001758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001764:	d005      	beq.n	8001772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001766:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <HAL_Delay+0x44>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001772:	bf00      	nop
 8001774:	f7ff ffe0 	bl	8001738 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	d8f7      	bhi.n	8001774 <HAL_Delay+0x28>
  {
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000018 	.word	0x20000018

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	@ (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	@ (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	@ 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	@ 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018c0:	d301      	bcc.n	80018c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00f      	b.n	80018e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c6:	4a0a      	ldr	r2, [pc, #40]	@ (80018f0 <SysTick_Config+0x40>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ce:	210f      	movs	r1, #15
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f7ff ff90 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <SysTick_Config+0x40>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018de:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <SysTick_Config+0x40>)
 80018e0:	2207      	movs	r2, #7
 80018e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff49 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800191c:	f7ff ff5e 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	6978      	ldr	r0, [r7, #20]
 8001928:	f7ff ff90 	bl	800184c <NVIC_EncodePriority>
 800192c:	4602      	mov	r2, r0
 800192e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff5f 	bl	80017f8 <__NVIC_SetPriority>
}
 800193a:	bf00      	nop
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ffb0 	bl	80018b0 <SysTick_Config>
 8001950:	4603      	mov	r3, r0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800195c:	b480      	push	{r7}
 800195e:	b08b      	sub	sp, #44	@ 0x2c
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196e:	e169      	b.n	8001c44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001970:	2201      	movs	r2, #1
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	429a      	cmp	r2, r3
 800198a:	f040 8158 	bne.w	8001c3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4a9a      	ldr	r2, [pc, #616]	@ (8001bfc <HAL_GPIO_Init+0x2a0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d05e      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
 8001998:	4a98      	ldr	r2, [pc, #608]	@ (8001bfc <HAL_GPIO_Init+0x2a0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d875      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 800199e:	4a98      	ldr	r2, [pc, #608]	@ (8001c00 <HAL_GPIO_Init+0x2a4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d058      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
 80019a4:	4a96      	ldr	r2, [pc, #600]	@ (8001c00 <HAL_GPIO_Init+0x2a4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d86f      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 80019aa:	4a96      	ldr	r2, [pc, #600]	@ (8001c04 <HAL_GPIO_Init+0x2a8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d052      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
 80019b0:	4a94      	ldr	r2, [pc, #592]	@ (8001c04 <HAL_GPIO_Init+0x2a8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d869      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 80019b6:	4a94      	ldr	r2, [pc, #592]	@ (8001c08 <HAL_GPIO_Init+0x2ac>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d04c      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
 80019bc:	4a92      	ldr	r2, [pc, #584]	@ (8001c08 <HAL_GPIO_Init+0x2ac>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d863      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 80019c2:	4a92      	ldr	r2, [pc, #584]	@ (8001c0c <HAL_GPIO_Init+0x2b0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d046      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
 80019c8:	4a90      	ldr	r2, [pc, #576]	@ (8001c0c <HAL_GPIO_Init+0x2b0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d85d      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 80019ce:	2b12      	cmp	r3, #18
 80019d0:	d82a      	bhi.n	8001a28 <HAL_GPIO_Init+0xcc>
 80019d2:	2b12      	cmp	r3, #18
 80019d4:	d859      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 80019d6:	a201      	add	r2, pc, #4	@ (adr r2, 80019dc <HAL_GPIO_Init+0x80>)
 80019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019dc:	08001a57 	.word	0x08001a57
 80019e0:	08001a31 	.word	0x08001a31
 80019e4:	08001a43 	.word	0x08001a43
 80019e8:	08001a85 	.word	0x08001a85
 80019ec:	08001a8b 	.word	0x08001a8b
 80019f0:	08001a8b 	.word	0x08001a8b
 80019f4:	08001a8b 	.word	0x08001a8b
 80019f8:	08001a8b 	.word	0x08001a8b
 80019fc:	08001a8b 	.word	0x08001a8b
 8001a00:	08001a8b 	.word	0x08001a8b
 8001a04:	08001a8b 	.word	0x08001a8b
 8001a08:	08001a8b 	.word	0x08001a8b
 8001a0c:	08001a8b 	.word	0x08001a8b
 8001a10:	08001a8b 	.word	0x08001a8b
 8001a14:	08001a8b 	.word	0x08001a8b
 8001a18:	08001a8b 	.word	0x08001a8b
 8001a1c:	08001a8b 	.word	0x08001a8b
 8001a20:	08001a39 	.word	0x08001a39
 8001a24:	08001a4d 	.word	0x08001a4d
 8001a28:	4a79      	ldr	r2, [pc, #484]	@ (8001c10 <HAL_GPIO_Init+0x2b4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d013      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a2e:	e02c      	b.n	8001a8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	623b      	str	r3, [r7, #32]
          break;
 8001a36:	e029      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	623b      	str	r3, [r7, #32]
          break;
 8001a40:	e024      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	3308      	adds	r3, #8
 8001a48:	623b      	str	r3, [r7, #32]
          break;
 8001a4a:	e01f      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	330c      	adds	r3, #12
 8001a52:	623b      	str	r3, [r7, #32]
          break;
 8001a54:	e01a      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d102      	bne.n	8001a64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a5e:	2304      	movs	r3, #4
 8001a60:	623b      	str	r3, [r7, #32]
          break;
 8001a62:	e013      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d105      	bne.n	8001a78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	611a      	str	r2, [r3, #16]
          break;
 8001a76:	e009      	b.n	8001a8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a78:	2308      	movs	r3, #8
 8001a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	615a      	str	r2, [r3, #20]
          break;
 8001a82:	e003      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
          break;
 8001a88:	e000      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          break;
 8001a8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2bff      	cmp	r3, #255	@ 0xff
 8001a90:	d801      	bhi.n	8001a96 <HAL_GPIO_Init+0x13a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	e001      	b.n	8001a9a <HAL_GPIO_Init+0x13e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2bff      	cmp	r3, #255	@ 0xff
 8001aa0:	d802      	bhi.n	8001aa8 <HAL_GPIO_Init+0x14c>
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	e002      	b.n	8001aae <HAL_GPIO_Init+0x152>
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	3b08      	subs	r3, #8
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	210f      	movs	r1, #15
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	401a      	ands	r2, r3
 8001ac0:	6a39      	ldr	r1, [r7, #32]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 80b1 	beq.w	8001c3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001adc:	4b4d      	ldr	r3, [pc, #308]	@ (8001c14 <HAL_GPIO_Init+0x2b8>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4a4c      	ldr	r2, [pc, #304]	@ (8001c14 <HAL_GPIO_Init+0x2b8>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6193      	str	r3, [r2, #24]
 8001ae8:	4b4a      	ldr	r3, [pc, #296]	@ (8001c14 <HAL_GPIO_Init+0x2b8>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001af4:	4a48      	ldr	r2, [pc, #288]	@ (8001c18 <HAL_GPIO_Init+0x2bc>)
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	089b      	lsrs	r3, r3, #2
 8001afa:	3302      	adds	r3, #2
 8001afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4013      	ands	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a40      	ldr	r2, [pc, #256]	@ (8001c1c <HAL_GPIO_Init+0x2c0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d013      	beq.n	8001b48 <HAL_GPIO_Init+0x1ec>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a3f      	ldr	r2, [pc, #252]	@ (8001c20 <HAL_GPIO_Init+0x2c4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d00d      	beq.n	8001b44 <HAL_GPIO_Init+0x1e8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c24 <HAL_GPIO_Init+0x2c8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d007      	beq.n	8001b40 <HAL_GPIO_Init+0x1e4>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a3d      	ldr	r2, [pc, #244]	@ (8001c28 <HAL_GPIO_Init+0x2cc>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d101      	bne.n	8001b3c <HAL_GPIO_Init+0x1e0>
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e006      	b.n	8001b4a <HAL_GPIO_Init+0x1ee>
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	e004      	b.n	8001b4a <HAL_GPIO_Init+0x1ee>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e002      	b.n	8001b4a <HAL_GPIO_Init+0x1ee>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_GPIO_Init+0x1ee>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b4c:	f002 0203 	and.w	r2, r2, #3
 8001b50:	0092      	lsls	r2, r2, #2
 8001b52:	4093      	lsls	r3, r2
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b5a:	492f      	ldr	r1, [pc, #188]	@ (8001c18 <HAL_GPIO_Init+0x2bc>)
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3302      	adds	r3, #2
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b74:	4b2d      	ldr	r3, [pc, #180]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	492c      	ldr	r1, [pc, #176]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	608b      	str	r3, [r1, #8]
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b82:	4b2a      	ldr	r3, [pc, #168]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	4928      	ldr	r1, [pc, #160]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b9c:	4b23      	ldr	r3, [pc, #140]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	4922      	ldr	r1, [pc, #136]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60cb      	str	r3, [r1, #12]
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001baa:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	491e      	ldr	r1, [pc, #120]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d006      	beq.n	8001bd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bc4:	4b19      	ldr	r3, [pc, #100]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	4918      	ldr	r1, [pc, #96]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bd2:	4b16      	ldr	r3, [pc, #88]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	4914      	ldr	r1, [pc, #80]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d021      	beq.n	8001c30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bec:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	490e      	ldr	r1, [pc, #56]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	600b      	str	r3, [r1, #0]
 8001bf8:	e021      	b.n	8001c3e <HAL_GPIO_Init+0x2e2>
 8001bfa:	bf00      	nop
 8001bfc:	10320000 	.word	0x10320000
 8001c00:	10310000 	.word	0x10310000
 8001c04:	10220000 	.word	0x10220000
 8001c08:	10210000 	.word	0x10210000
 8001c0c:	10120000 	.word	0x10120000
 8001c10:	10110000 	.word	0x10110000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40010000 	.word	0x40010000
 8001c1c:	40010800 	.word	0x40010800
 8001c20:	40010c00 	.word	0x40010c00
 8001c24:	40011000 	.word	0x40011000
 8001c28:	40011400 	.word	0x40011400
 8001c2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c30:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <HAL_GPIO_Init+0x304>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	4909      	ldr	r1, [pc, #36]	@ (8001c60 <HAL_GPIO_Init+0x304>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	3301      	adds	r3, #1
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f47f ae8e 	bne.w	8001970 <HAL_GPIO_Init+0x14>
  }
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	372c      	adds	r7, #44	@ 0x2c
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	40010400 	.word	0x40010400

08001c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e12b      	b.n	8001ece <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d106      	bne.n	8001c90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fba4 	bl	80013d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2224      	movs	r2, #36	@ 0x24
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cc8:	f001 f960 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8001ccc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	4a81      	ldr	r2, [pc, #516]	@ (8001ed8 <HAL_I2C_Init+0x274>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d807      	bhi.n	8001ce8 <HAL_I2C_Init+0x84>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4a80      	ldr	r2, [pc, #512]	@ (8001edc <HAL_I2C_Init+0x278>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	bf94      	ite	ls
 8001ce0:	2301      	movls	r3, #1
 8001ce2:	2300      	movhi	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	e006      	b.n	8001cf6 <HAL_I2C_Init+0x92>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4a7d      	ldr	r2, [pc, #500]	@ (8001ee0 <HAL_I2C_Init+0x27c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	bf94      	ite	ls
 8001cf0:	2301      	movls	r3, #1
 8001cf2:	2300      	movhi	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e0e7      	b.n	8001ece <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4a78      	ldr	r2, [pc, #480]	@ (8001ee4 <HAL_I2C_Init+0x280>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	0c9b      	lsrs	r3, r3, #18
 8001d08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ed8 <HAL_I2C_Init+0x274>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d802      	bhi.n	8001d38 <HAL_I2C_Init+0xd4>
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3301      	adds	r3, #1
 8001d36:	e009      	b.n	8001d4c <HAL_I2C_Init+0xe8>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	4a69      	ldr	r2, [pc, #420]	@ (8001ee8 <HAL_I2C_Init+0x284>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	099b      	lsrs	r3, r3, #6
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	430b      	orrs	r3, r1
 8001d52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	495c      	ldr	r1, [pc, #368]	@ (8001ed8 <HAL_I2C_Init+0x274>)
 8001d68:	428b      	cmp	r3, r1
 8001d6a:	d819      	bhi.n	8001da0 <HAL_I2C_Init+0x13c>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	1e59      	subs	r1, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d7a:	1c59      	adds	r1, r3, #1
 8001d7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d80:	400b      	ands	r3, r1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00a      	beq.n	8001d9c <HAL_I2C_Init+0x138>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1e59      	subs	r1, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d94:	3301      	adds	r3, #1
 8001d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9a:	e051      	b.n	8001e40 <HAL_I2C_Init+0x1dc>
 8001d9c:	2304      	movs	r3, #4
 8001d9e:	e04f      	b.n	8001e40 <HAL_I2C_Init+0x1dc>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d111      	bne.n	8001dcc <HAL_I2C_Init+0x168>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1e58      	subs	r0, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	440b      	add	r3, r1
 8001db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	e012      	b.n	8001df2 <HAL_I2C_Init+0x18e>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1e58      	subs	r0, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	0099      	lsls	r1, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf0c      	ite	eq
 8001dec:	2301      	moveq	r3, #1
 8001dee:	2300      	movne	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_Init+0x196>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e022      	b.n	8001e40 <HAL_I2C_Init+0x1dc>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10e      	bne.n	8001e20 <HAL_I2C_Init+0x1bc>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1e58      	subs	r0, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6859      	ldr	r1, [r3, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	440b      	add	r3, r1
 8001e10:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e14:	3301      	adds	r3, #1
 8001e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e1e:	e00f      	b.n	8001e40 <HAL_I2C_Init+0x1dc>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1e58      	subs	r0, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	0099      	lsls	r1, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e36:	3301      	adds	r3, #1
 8001e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	6809      	ldr	r1, [r1, #0]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69da      	ldr	r2, [r3, #28]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6911      	ldr	r1, [r2, #16]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68d2      	ldr	r2, [r2, #12]
 8001e7a:	4311      	orrs	r1, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	430b      	orrs	r3, r1
 8001e82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	000186a0 	.word	0x000186a0
 8001edc:	001e847f 	.word	0x001e847f
 8001ee0:	003d08ff 	.word	0x003d08ff
 8001ee4:	431bde83 	.word	0x431bde83
 8001ee8:	10624dd3 	.word	0x10624dd3

08001eec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	460b      	mov	r3, r1
 8001efa:	817b      	strh	r3, [r7, #10]
 8001efc:	4613      	mov	r3, r2
 8001efe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f00:	f7ff fc1a 	bl	8001738 <HAL_GetTick>
 8001f04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	f040 80e0 	bne.w	80020d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2319      	movs	r3, #25
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4970      	ldr	r1, [pc, #448]	@ (80020e0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fa92 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e0d3      	b.n	80020d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_I2C_Master_Transmit+0x50>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e0cc      	b.n	80020d6 <HAL_I2C_Master_Transmit+0x1ea>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d007      	beq.n	8001f62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0201 	orr.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2221      	movs	r2, #33	@ 0x21
 8001f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2210      	movs	r2, #16
 8001f7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	893a      	ldrh	r2, [r7, #8]
 8001f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4a50      	ldr	r2, [pc, #320]	@ (80020e4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fa4:	8979      	ldrh	r1, [r7, #10]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	6a3a      	ldr	r2, [r7, #32]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f9ca 	bl	8002344 <I2C_MasterRequestWrite>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e08d      	b.n	80020d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fd0:	e066      	b.n	80020a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	6a39      	ldr	r1, [r7, #32]
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 fb50 	bl	800267c <I2C_WaitOnTXEFlagUntilTimeout>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00d      	beq.n	8001ffe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d107      	bne.n	8001ffa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ff8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e06b      	b.n	80020d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002002:	781a      	ldrb	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b04      	cmp	r3, #4
 800203a:	d11b      	bne.n	8002074 <HAL_I2C_Master_Transmit+0x188>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	d017      	beq.n	8002074 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002048:	781a      	ldrb	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	6a39      	ldr	r1, [r7, #32]
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 fb47 	bl	800270c <I2C_WaitOnBTFFlagUntilTimeout>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00d      	beq.n	80020a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	2b04      	cmp	r3, #4
 800208a:	d107      	bne.n	800209c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800209a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e01a      	b.n	80020d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d194      	bne.n	8001fd2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e000      	b.n	80020d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020d4:	2302      	movs	r3, #2
  }
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	00100002 	.word	0x00100002
 80020e4:	ffff0000 	.word	0xffff0000

080020e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	460b      	mov	r3, r1
 80020f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80020f8:	f7ff fb1e 	bl	8001738 <HAL_GetTick>
 80020fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b20      	cmp	r3, #32
 800210c:	f040 8111 	bne.w	8002332 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	2319      	movs	r3, #25
 8002116:	2201      	movs	r2, #1
 8002118:	4988      	ldr	r1, [pc, #544]	@ (800233c <HAL_I2C_IsDeviceReady+0x254>)
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f994 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002126:	2302      	movs	r3, #2
 8002128:	e104      	b.n	8002334 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_I2C_IsDeviceReady+0x50>
 8002134:	2302      	movs	r3, #2
 8002136:	e0fd      	b.n	8002334 <HAL_I2C_IsDeviceReady+0x24c>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d007      	beq.n	800215e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800216c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2224      	movs	r2, #36	@ 0x24
 8002172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4a70      	ldr	r2, [pc, #448]	@ (8002340 <HAL_I2C_IsDeviceReady+0x258>)
 8002180:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002190:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2200      	movs	r2, #0
 800219a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 f952 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00d      	beq.n	80021c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021b8:	d103      	bne.n	80021c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021c0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e0b6      	b.n	8002334 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021c6:	897b      	ldrh	r3, [r7, #10]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80021d6:	f7ff faaf 	bl	8001738 <HAL_GetTick>
 80021da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002200:	bf0c      	ite	eq
 8002202:	2301      	moveq	r3, #1
 8002204:	2300      	movne	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800220a:	e025      	b.n	8002258 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800220c:	f7ff fa94 	bl	8001738 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d302      	bcc.n	8002222 <HAL_I2C_IsDeviceReady+0x13a>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d103      	bne.n	800222a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	22a0      	movs	r2, #160	@ 0xa0
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b02      	cmp	r3, #2
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800224e:	bf0c      	ite	eq
 8002250:	2301      	moveq	r3, #1
 8002252:	2300      	movne	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2ba0      	cmp	r3, #160	@ 0xa0
 8002262:	d005      	beq.n	8002270 <HAL_I2C_IsDeviceReady+0x188>
 8002264:	7dfb      	ldrb	r3, [r7, #23]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <HAL_I2C_IsDeviceReady+0x188>
 800226a:	7dbb      	ldrb	r3, [r7, #22]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0cd      	beq.n	800220c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b02      	cmp	r3, #2
 8002284:	d129      	bne.n	80022da <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002294:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	2319      	movs	r3, #25
 80022b2:	2201      	movs	r2, #1
 80022b4:	4921      	ldr	r1, [pc, #132]	@ (800233c <HAL_I2C_IsDeviceReady+0x254>)
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f8c6 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e036      	b.n	8002334 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2220      	movs	r2, #32
 80022ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e02c      	b.n	8002334 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022e8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022f2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	2319      	movs	r3, #25
 80022fa:	2201      	movs	r2, #1
 80022fc:	490f      	ldr	r1, [pc, #60]	@ (800233c <HAL_I2C_IsDeviceReady+0x254>)
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f8a2 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e012      	b.n	8002334 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	3301      	adds	r3, #1
 8002312:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	f4ff af32 	bcc.w	8002182 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002332:	2302      	movs	r3, #2
  }
}
 8002334:	4618      	mov	r0, r3
 8002336:	3720      	adds	r7, #32
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	00100002 	.word	0x00100002
 8002340:	ffff0000 	.word	0xffff0000

08002344 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af02      	add	r7, sp, #8
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	460b      	mov	r3, r1
 8002352:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002358:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b08      	cmp	r3, #8
 800235e:	d006      	beq.n	800236e <I2C_MasterRequestWrite+0x2a>
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d003      	beq.n	800236e <I2C_MasterRequestWrite+0x2a>
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800236c:	d108      	bne.n	8002380 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e00b      	b.n	8002398 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002384:	2b12      	cmp	r3, #18
 8002386:	d107      	bne.n	8002398 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002396:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f84f 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00d      	beq.n	80023cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023be:	d103      	bne.n	80023c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e035      	b.n	8002438 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023d4:	d108      	bne.n	80023e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023d6:	897b      	ldrh	r3, [r7, #10]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80023e4:	611a      	str	r2, [r3, #16]
 80023e6:	e01b      	b.n	8002420 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023e8:	897b      	ldrh	r3, [r7, #10]
 80023ea:	11db      	asrs	r3, r3, #7
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f003 0306 	and.w	r3, r3, #6
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	f063 030f 	orn	r3, r3, #15
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	490e      	ldr	r1, [pc, #56]	@ (8002440 <I2C_MasterRequestWrite+0xfc>)
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 f898 	bl	800253c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e010      	b.n	8002438 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002416:	897b      	ldrh	r3, [r7, #10]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	4907      	ldr	r1, [pc, #28]	@ (8002444 <I2C_MasterRequestWrite+0x100>)
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f888 	bl	800253c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	00010008 	.word	0x00010008
 8002444:	00010002 	.word	0x00010002

08002448 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	4613      	mov	r3, r2
 8002456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002458:	e048      	b.n	80024ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d044      	beq.n	80024ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002462:	f7ff f969 	bl	8001738 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d302      	bcc.n	8002478 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d139      	bne.n	80024ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	0c1b      	lsrs	r3, r3, #16
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d10d      	bne.n	800249e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	43da      	mvns	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4013      	ands	r3, r2
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	e00c      	b.n	80024b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	43da      	mvns	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4013      	ands	r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d116      	bne.n	80024ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d8:	f043 0220 	orr.w	r2, r3, #32
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e023      	b.n	8002534 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	0c1b      	lsrs	r3, r3, #16
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d10d      	bne.n	8002512 <I2C_WaitOnFlagUntilTimeout+0xca>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	43da      	mvns	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	4013      	ands	r3, r2
 8002502:	b29b      	uxth	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	bf0c      	ite	eq
 8002508:	2301      	moveq	r3, #1
 800250a:	2300      	movne	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	e00c      	b.n	800252c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	43da      	mvns	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	4013      	ands	r3, r2
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf0c      	ite	eq
 8002524:	2301      	moveq	r3, #1
 8002526:	2300      	movne	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	429a      	cmp	r2, r3
 8002530:	d093      	beq.n	800245a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800254a:	e071      	b.n	8002630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800255a:	d123      	bne.n	80025a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800256a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002574:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002590:	f043 0204 	orr.w	r2, r3, #4
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e067      	b.n	8002674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025aa:	d041      	beq.n	8002630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ac:	f7ff f8c4 	bl	8001738 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d302      	bcc.n	80025c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d136      	bne.n	8002630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	0c1b      	lsrs	r3, r3, #16
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d10c      	bne.n	80025e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	43da      	mvns	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4013      	ands	r3, r2
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bf14      	ite	ne
 80025de:	2301      	movne	r3, #1
 80025e0:	2300      	moveq	r3, #0
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	e00b      	b.n	80025fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	43da      	mvns	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	4013      	ands	r3, r2
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d016      	beq.n	8002630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e021      	b.n	8002674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	0c1b      	lsrs	r3, r3, #16
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b01      	cmp	r3, #1
 8002638:	d10c      	bne.n	8002654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	43da      	mvns	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	4013      	ands	r3, r2
 8002646:	b29b      	uxth	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf14      	ite	ne
 800264c:	2301      	movne	r3, #1
 800264e:	2300      	moveq	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	e00b      	b.n	800266c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4013      	ands	r3, r2
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	bf14      	ite	ne
 8002666:	2301      	movne	r3, #1
 8002668:	2300      	moveq	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	f47f af6d 	bne.w	800254c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002688:	e034      	b.n	80026f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f886 	bl	800279c <I2C_IsAcknowledgeFailed>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e034      	b.n	8002704 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d028      	beq.n	80026f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a2:	f7ff f849 	bl	8001738 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d302      	bcc.n	80026b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d11d      	bne.n	80026f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c2:	2b80      	cmp	r3, #128	@ 0x80
 80026c4:	d016      	beq.n	80026f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	f043 0220 	orr.w	r2, r3, #32
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e007      	b.n	8002704 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fe:	2b80      	cmp	r3, #128	@ 0x80
 8002700:	d1c3      	bne.n	800268a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002718:	e034      	b.n	8002784 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f83e 	bl	800279c <I2C_IsAcknowledgeFailed>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e034      	b.n	8002794 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d028      	beq.n	8002784 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002732:	f7ff f801 	bl	8001738 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	429a      	cmp	r2, r3
 8002740:	d302      	bcc.n	8002748 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d11d      	bne.n	8002784 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b04      	cmp	r3, #4
 8002754:	d016      	beq.n	8002784 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	f043 0220 	orr.w	r2, r3, #32
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e007      	b.n	8002794 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b04      	cmp	r3, #4
 8002790:	d1c3      	bne.n	800271a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027b2:	d11b      	bne.n	80027ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	f043 0204 	orr.w	r2, r3, #4
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e272      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8087 	beq.w	8002926 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002818:	4b92      	ldr	r3, [pc, #584]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b04      	cmp	r3, #4
 8002822:	d00c      	beq.n	800283e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002824:	4b8f      	ldr	r3, [pc, #572]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d112      	bne.n	8002856 <HAL_RCC_OscConfig+0x5e>
 8002830:	4b8c      	ldr	r3, [pc, #560]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800283c:	d10b      	bne.n	8002856 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283e:	4b89      	ldr	r3, [pc, #548]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d06c      	beq.n	8002924 <HAL_RCC_OscConfig+0x12c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d168      	bne.n	8002924 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e24c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x76>
 8002860:	4b80      	ldr	r3, [pc, #512]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a7f      	ldr	r2, [pc, #508]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	e02e      	b.n	80028cc <HAL_RCC_OscConfig+0xd4>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x98>
 8002876:	4b7b      	ldr	r3, [pc, #492]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a7a      	ldr	r2, [pc, #488]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800287c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b78      	ldr	r3, [pc, #480]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a77      	ldr	r2, [pc, #476]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002888:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e01d      	b.n	80028cc <HAL_RCC_OscConfig+0xd4>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0xbc>
 800289a:	4b72      	ldr	r3, [pc, #456]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a71      	ldr	r2, [pc, #452]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a6e      	ldr	r2, [pc, #440]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e00b      	b.n	80028cc <HAL_RCC_OscConfig+0xd4>
 80028b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a6a      	ldr	r2, [pc, #424]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	4b68      	ldr	r3, [pc, #416]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a67      	ldr	r2, [pc, #412]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d013      	beq.n	80028fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe ff30 	bl	8001738 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe ff2c 	bl	8001738 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	@ 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e200      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0xe4>
 80028fa:	e014      	b.n	8002926 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7fe ff1c 	bl	8001738 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002904:	f7fe ff18 	bl	8001738 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	@ 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e1ec      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002916:	4b53      	ldr	r3, [pc, #332]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x10c>
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d063      	beq.n	80029fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002932:	4b4c      	ldr	r3, [pc, #304]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800293e:	4b49      	ldr	r3, [pc, #292]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b08      	cmp	r3, #8
 8002948:	d11c      	bne.n	8002984 <HAL_RCC_OscConfig+0x18c>
 800294a:	4b46      	ldr	r3, [pc, #280]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d116      	bne.n	8002984 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002956:	4b43      	ldr	r3, [pc, #268]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <HAL_RCC_OscConfig+0x176>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d001      	beq.n	800296e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e1c0      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4939      	ldr	r1, [pc, #228]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002982:	e03a      	b.n	80029fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d020      	beq.n	80029ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800298c:	4b36      	ldr	r3, [pc, #216]	@ (8002a68 <HAL_RCC_OscConfig+0x270>)
 800298e:	2201      	movs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002992:	f7fe fed1 	bl	8001738 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299a:	f7fe fecd 	bl	8001738 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e1a1      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4927      	ldr	r1, [pc, #156]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]
 80029cc:	e015      	b.n	80029fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ce:	4b26      	ldr	r3, [pc, #152]	@ (8002a68 <HAL_RCC_OscConfig+0x270>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe feb0 	bl	8001738 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029dc:	f7fe feac 	bl	8001738 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e180      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d03a      	beq.n	8002a7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d019      	beq.n	8002a42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a0e:	4b17      	ldr	r3, [pc, #92]	@ (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a14:	f7fe fe90 	bl	8001738 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1c:	f7fe fe8c 	bl	8001738 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e160      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f000 faba 	bl	8002fb4 <RCC_Delay>
 8002a40:	e01c      	b.n	8002a7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a42:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a48:	f7fe fe76 	bl	8001738 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4e:	e00f      	b.n	8002a70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a50:	f7fe fe72 	bl	8001738 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d908      	bls.n	8002a70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e146      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000
 8002a68:	42420000 	.word	0x42420000
 8002a6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a70:	4b92      	ldr	r3, [pc, #584]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1e9      	bne.n	8002a50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80a6 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8e:	4b8b      	ldr	r3, [pc, #556]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10d      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	4b88      	ldr	r3, [pc, #544]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	4a87      	ldr	r2, [pc, #540]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aa4:	61d3      	str	r3, [r2, #28]
 8002aa6:	4b85      	ldr	r3, [pc, #532]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab6:	4b82      	ldr	r3, [pc, #520]	@ (8002cc0 <HAL_RCC_OscConfig+0x4c8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d118      	bne.n	8002af4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac2:	4b7f      	ldr	r3, [pc, #508]	@ (8002cc0 <HAL_RCC_OscConfig+0x4c8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a7e      	ldr	r2, [pc, #504]	@ (8002cc0 <HAL_RCC_OscConfig+0x4c8>)
 8002ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ace:	f7fe fe33 	bl	8001738 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad6:	f7fe fe2f 	bl	8001738 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	@ 0x64
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e103      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	4b75      	ldr	r3, [pc, #468]	@ (8002cc0 <HAL_RCC_OscConfig+0x4c8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x312>
 8002afc:	4b6f      	ldr	r3, [pc, #444]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	4a6e      	ldr	r2, [pc, #440]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6213      	str	r3, [r2, #32]
 8002b08:	e02d      	b.n	8002b66 <HAL_RCC_OscConfig+0x36e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x334>
 8002b12:	4b6a      	ldr	r3, [pc, #424]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a69      	ldr	r2, [pc, #420]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	6213      	str	r3, [r2, #32]
 8002b1e:	4b67      	ldr	r3, [pc, #412]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	4a66      	ldr	r2, [pc, #408]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	f023 0304 	bic.w	r3, r3, #4
 8002b28:	6213      	str	r3, [r2, #32]
 8002b2a:	e01c      	b.n	8002b66 <HAL_RCC_OscConfig+0x36e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d10c      	bne.n	8002b4e <HAL_RCC_OscConfig+0x356>
 8002b34:	4b61      	ldr	r3, [pc, #388]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	4a60      	ldr	r2, [pc, #384]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	6213      	str	r3, [r2, #32]
 8002b40:	4b5e      	ldr	r3, [pc, #376]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4a5d      	ldr	r2, [pc, #372]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6213      	str	r3, [r2, #32]
 8002b4c:	e00b      	b.n	8002b66 <HAL_RCC_OscConfig+0x36e>
 8002b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4a5a      	ldr	r2, [pc, #360]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	6213      	str	r3, [r2, #32]
 8002b5a:	4b58      	ldr	r3, [pc, #352]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	4a57      	ldr	r2, [pc, #348]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d015      	beq.n	8002b9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6e:	f7fe fde3 	bl	8001738 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b76:	f7fe fddf 	bl	8001738 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e0b1      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ee      	beq.n	8002b76 <HAL_RCC_OscConfig+0x37e>
 8002b98:	e014      	b.n	8002bc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7fe fdcd 	bl	8001738 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba0:	e00a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba2:	f7fe fdc9 	bl	8001738 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e09b      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb8:	4b40      	ldr	r3, [pc, #256]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ee      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d105      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bca:	4b3c      	ldr	r3, [pc, #240]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	4a3b      	ldr	r2, [pc, #236]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8087 	beq.w	8002cee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be0:	4b36      	ldr	r3, [pc, #216]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d061      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d146      	bne.n	8002c82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf4:	4b33      	ldr	r3, [pc, #204]	@ (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fe fd9d 	bl	8001738 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fe fd99 	bl	8001738 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e06d      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c14:	4b29      	ldr	r3, [pc, #164]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f0      	bne.n	8002c02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c28:	d108      	bne.n	8002c3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c2a:	4b24      	ldr	r3, [pc, #144]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	4921      	ldr	r1, [pc, #132]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a19      	ldr	r1, [r3, #32]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	491b      	ldr	r1, [pc, #108]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c54:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5a:	f7fe fd6d 	bl	8001738 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c62:	f7fe fd69 	bl	8001738 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e03d      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c74:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x46a>
 8002c80:	e035      	b.n	8002cee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c82:	4b10      	ldr	r3, [pc, #64]	@ (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe fd56 	bl	8001738 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c90:	f7fe fd52 	bl	8001738 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e026      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca2:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x498>
 8002cae:	e01e      	b.n	8002cee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e019      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <HAL_RCC_OscConfig+0x500>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d001      	beq.n	8002cee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000

08002cfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0d0      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b6a      	ldr	r3, [pc, #424]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d910      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b67      	ldr	r3, [pc, #412]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 0207 	bic.w	r2, r3, #7
 8002d26:	4965      	ldr	r1, [pc, #404]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b63      	ldr	r3, [pc, #396]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0b8      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d58:	4b59      	ldr	r3, [pc, #356]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a58      	ldr	r2, [pc, #352]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d70:	4b53      	ldr	r3, [pc, #332]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4a52      	ldr	r2, [pc, #328]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	4b50      	ldr	r3, [pc, #320]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	494d      	ldr	r1, [pc, #308]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d040      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	4b47      	ldr	r3, [pc, #284]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d115      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e07f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	4b41      	ldr	r3, [pc, #260]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e073      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dca:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e06b      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dda:	4b39      	ldr	r3, [pc, #228]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4936      	ldr	r1, [pc, #216]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dec:	f7fe fca4 	bl	8001738 <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df4:	f7fe fca0 	bl	8001738 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e053      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 020c 	and.w	r2, r3, #12
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d1eb      	bne.n	8002df4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b27      	ldr	r3, [pc, #156]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d210      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b24      	ldr	r3, [pc, #144]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 0207 	bic.w	r2, r3, #7
 8002e32:	4922      	ldr	r1, [pc, #136]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b20      	ldr	r3, [pc, #128]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e032      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	4b19      	ldr	r3, [pc, #100]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4916      	ldr	r1, [pc, #88]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e76:	4b12      	ldr	r3, [pc, #72]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	490e      	ldr	r1, [pc, #56]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e8a:	f000 f821 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	490a      	ldr	r1, [pc, #40]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9c:	5ccb      	ldrb	r3, [r1, r3]
 8002e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea2:	4a09      	ldr	r2, [pc, #36]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <HAL_RCC_ClockConfig+0x1d0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe fc02 	bl	80016b4 <HAL_InitTick>

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40022000 	.word	0x40022000
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	08008448 	.word	0x08008448
 8002ec8:	20000010 	.word	0x20000010
 8002ecc:	20000014 	.word	0x20000014

08002ed0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002eea:	4b1e      	ldr	r3, [pc, #120]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d002      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x30>
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d003      	beq.n	8002f06 <HAL_RCC_GetSysClockFreq+0x36>
 8002efe:	e027      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f00:	4b19      	ldr	r3, [pc, #100]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f02:	613b      	str	r3, [r7, #16]
      break;
 8002f04:	e027      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	0c9b      	lsrs	r3, r3, #18
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	4a17      	ldr	r2, [pc, #92]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f10:	5cd3      	ldrb	r3, [r2, r3]
 8002f12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d010      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f1e:	4b11      	ldr	r3, [pc, #68]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	0c5b      	lsrs	r3, r3, #17
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	4a11      	ldr	r2, [pc, #68]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f2a:	5cd3      	ldrb	r3, [r2, r3]
 8002f2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a0d      	ldr	r2, [pc, #52]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f32:	fb03 f202 	mul.w	r2, r3, r2
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	e004      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a0c      	ldr	r2, [pc, #48]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f44:	fb02 f303 	mul.w	r3, r2, r3
 8002f48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	613b      	str	r3, [r7, #16]
      break;
 8002f4e:	e002      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f50:	4b05      	ldr	r3, [pc, #20]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f52:	613b      	str	r3, [r7, #16]
      break;
 8002f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f56:	693b      	ldr	r3, [r7, #16]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000
 8002f68:	007a1200 	.word	0x007a1200
 8002f6c:	08008460 	.word	0x08008460
 8002f70:	08008470 	.word	0x08008470
 8002f74:	003d0900 	.word	0x003d0900

08002f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f7c:	4b02      	ldr	r3, [pc, #8]	@ (8002f88 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	20000010 	.word	0x20000010

08002f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f90:	f7ff fff2 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b05      	ldr	r3, [pc, #20]	@ (8002fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	4903      	ldr	r1, [pc, #12]	@ (8002fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa2:	5ccb      	ldrb	r3, [r1, r3]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	08008458 	.word	0x08008458

08002fb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe8 <RCC_Delay+0x34>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002fec <RCC_Delay+0x38>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	0a5b      	lsrs	r3, r3, #9
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	fb02 f303 	mul.w	r3, r2, r3
 8002fce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fd0:	bf00      	nop
  }
  while (Delay --);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1e5a      	subs	r2, r3, #1
 8002fd6:	60fa      	str	r2, [r7, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f9      	bne.n	8002fd0 <RCC_Delay+0x1c>
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	20000010 	.word	0x20000010
 8002fec:	10624dd3 	.word	0x10624dd3

08002ff0 <__cvt>:
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff6:	461d      	mov	r5, r3
 8002ff8:	bfbb      	ittet	lt
 8002ffa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002ffe:	461d      	movlt	r5, r3
 8003000:	2300      	movge	r3, #0
 8003002:	232d      	movlt	r3, #45	@ 0x2d
 8003004:	b088      	sub	sp, #32
 8003006:	4614      	mov	r4, r2
 8003008:	bfb8      	it	lt
 800300a:	4614      	movlt	r4, r2
 800300c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800300e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003010:	7013      	strb	r3, [r2, #0]
 8003012:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003014:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003018:	f023 0820 	bic.w	r8, r3, #32
 800301c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003020:	d005      	beq.n	800302e <__cvt+0x3e>
 8003022:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003026:	d100      	bne.n	800302a <__cvt+0x3a>
 8003028:	3601      	adds	r6, #1
 800302a:	2302      	movs	r3, #2
 800302c:	e000      	b.n	8003030 <__cvt+0x40>
 800302e:	2303      	movs	r3, #3
 8003030:	aa07      	add	r2, sp, #28
 8003032:	9204      	str	r2, [sp, #16]
 8003034:	aa06      	add	r2, sp, #24
 8003036:	e9cd a202 	strd	sl, r2, [sp, #8]
 800303a:	e9cd 3600 	strd	r3, r6, [sp]
 800303e:	4622      	mov	r2, r4
 8003040:	462b      	mov	r3, r5
 8003042:	f001 f87d 	bl	8004140 <_dtoa_r>
 8003046:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800304a:	4607      	mov	r7, r0
 800304c:	d119      	bne.n	8003082 <__cvt+0x92>
 800304e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003050:	07db      	lsls	r3, r3, #31
 8003052:	d50e      	bpl.n	8003072 <__cvt+0x82>
 8003054:	eb00 0906 	add.w	r9, r0, r6
 8003058:	2200      	movs	r2, #0
 800305a:	2300      	movs	r3, #0
 800305c:	4620      	mov	r0, r4
 800305e:	4629      	mov	r1, r5
 8003060:	f7fd fca2 	bl	80009a8 <__aeabi_dcmpeq>
 8003064:	b108      	cbz	r0, 800306a <__cvt+0x7a>
 8003066:	f8cd 901c 	str.w	r9, [sp, #28]
 800306a:	2230      	movs	r2, #48	@ 0x30
 800306c:	9b07      	ldr	r3, [sp, #28]
 800306e:	454b      	cmp	r3, r9
 8003070:	d31e      	bcc.n	80030b0 <__cvt+0xc0>
 8003072:	4638      	mov	r0, r7
 8003074:	9b07      	ldr	r3, [sp, #28]
 8003076:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003078:	1bdb      	subs	r3, r3, r7
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	b008      	add	sp, #32
 800307e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003082:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003086:	eb00 0906 	add.w	r9, r0, r6
 800308a:	d1e5      	bne.n	8003058 <__cvt+0x68>
 800308c:	7803      	ldrb	r3, [r0, #0]
 800308e:	2b30      	cmp	r3, #48	@ 0x30
 8003090:	d10a      	bne.n	80030a8 <__cvt+0xb8>
 8003092:	2200      	movs	r2, #0
 8003094:	2300      	movs	r3, #0
 8003096:	4620      	mov	r0, r4
 8003098:	4629      	mov	r1, r5
 800309a:	f7fd fc85 	bl	80009a8 <__aeabi_dcmpeq>
 800309e:	b918      	cbnz	r0, 80030a8 <__cvt+0xb8>
 80030a0:	f1c6 0601 	rsb	r6, r6, #1
 80030a4:	f8ca 6000 	str.w	r6, [sl]
 80030a8:	f8da 3000 	ldr.w	r3, [sl]
 80030ac:	4499      	add	r9, r3
 80030ae:	e7d3      	b.n	8003058 <__cvt+0x68>
 80030b0:	1c59      	adds	r1, r3, #1
 80030b2:	9107      	str	r1, [sp, #28]
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	e7d9      	b.n	800306c <__cvt+0x7c>

080030b8 <__exponent>:
 80030b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030ba:	2900      	cmp	r1, #0
 80030bc:	bfb6      	itet	lt
 80030be:	232d      	movlt	r3, #45	@ 0x2d
 80030c0:	232b      	movge	r3, #43	@ 0x2b
 80030c2:	4249      	neglt	r1, r1
 80030c4:	2909      	cmp	r1, #9
 80030c6:	7002      	strb	r2, [r0, #0]
 80030c8:	7043      	strb	r3, [r0, #1]
 80030ca:	dd29      	ble.n	8003120 <__exponent+0x68>
 80030cc:	f10d 0307 	add.w	r3, sp, #7
 80030d0:	461d      	mov	r5, r3
 80030d2:	270a      	movs	r7, #10
 80030d4:	fbb1 f6f7 	udiv	r6, r1, r7
 80030d8:	461a      	mov	r2, r3
 80030da:	fb07 1416 	mls	r4, r7, r6, r1
 80030de:	3430      	adds	r4, #48	@ 0x30
 80030e0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80030e4:	460c      	mov	r4, r1
 80030e6:	2c63      	cmp	r4, #99	@ 0x63
 80030e8:	4631      	mov	r1, r6
 80030ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80030ee:	dcf1      	bgt.n	80030d4 <__exponent+0x1c>
 80030f0:	3130      	adds	r1, #48	@ 0x30
 80030f2:	1e94      	subs	r4, r2, #2
 80030f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80030f8:	4623      	mov	r3, r4
 80030fa:	1c41      	adds	r1, r0, #1
 80030fc:	42ab      	cmp	r3, r5
 80030fe:	d30a      	bcc.n	8003116 <__exponent+0x5e>
 8003100:	f10d 0309 	add.w	r3, sp, #9
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	42ac      	cmp	r4, r5
 8003108:	bf88      	it	hi
 800310a:	2300      	movhi	r3, #0
 800310c:	3302      	adds	r3, #2
 800310e:	4403      	add	r3, r0
 8003110:	1a18      	subs	r0, r3, r0
 8003112:	b003      	add	sp, #12
 8003114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003116:	f813 6b01 	ldrb.w	r6, [r3], #1
 800311a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800311e:	e7ed      	b.n	80030fc <__exponent+0x44>
 8003120:	2330      	movs	r3, #48	@ 0x30
 8003122:	3130      	adds	r1, #48	@ 0x30
 8003124:	7083      	strb	r3, [r0, #2]
 8003126:	70c1      	strb	r1, [r0, #3]
 8003128:	1d03      	adds	r3, r0, #4
 800312a:	e7f1      	b.n	8003110 <__exponent+0x58>

0800312c <_printf_float>:
 800312c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003130:	b091      	sub	sp, #68	@ 0x44
 8003132:	460c      	mov	r4, r1
 8003134:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003138:	4616      	mov	r6, r2
 800313a:	461f      	mov	r7, r3
 800313c:	4605      	mov	r5, r0
 800313e:	f000 feeb 	bl	8003f18 <_localeconv_r>
 8003142:	6803      	ldr	r3, [r0, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	9308      	str	r3, [sp, #32]
 8003148:	f7fd f802 	bl	8000150 <strlen>
 800314c:	2300      	movs	r3, #0
 800314e:	930e      	str	r3, [sp, #56]	@ 0x38
 8003150:	f8d8 3000 	ldr.w	r3, [r8]
 8003154:	9009      	str	r0, [sp, #36]	@ 0x24
 8003156:	3307      	adds	r3, #7
 8003158:	f023 0307 	bic.w	r3, r3, #7
 800315c:	f103 0208 	add.w	r2, r3, #8
 8003160:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003164:	f8d4 b000 	ldr.w	fp, [r4]
 8003168:	f8c8 2000 	str.w	r2, [r8]
 800316c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003170:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003174:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003176:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800317a:	f04f 32ff 	mov.w	r2, #4294967295
 800317e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003182:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003186:	4b9c      	ldr	r3, [pc, #624]	@ (80033f8 <_printf_float+0x2cc>)
 8003188:	f7fd fc40 	bl	8000a0c <__aeabi_dcmpun>
 800318c:	bb70      	cbnz	r0, 80031ec <_printf_float+0xc0>
 800318e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003192:	f04f 32ff 	mov.w	r2, #4294967295
 8003196:	4b98      	ldr	r3, [pc, #608]	@ (80033f8 <_printf_float+0x2cc>)
 8003198:	f7fd fc1a 	bl	80009d0 <__aeabi_dcmple>
 800319c:	bb30      	cbnz	r0, 80031ec <_printf_float+0xc0>
 800319e:	2200      	movs	r2, #0
 80031a0:	2300      	movs	r3, #0
 80031a2:	4640      	mov	r0, r8
 80031a4:	4649      	mov	r1, r9
 80031a6:	f7fd fc09 	bl	80009bc <__aeabi_dcmplt>
 80031aa:	b110      	cbz	r0, 80031b2 <_printf_float+0x86>
 80031ac:	232d      	movs	r3, #45	@ 0x2d
 80031ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031b2:	4a92      	ldr	r2, [pc, #584]	@ (80033fc <_printf_float+0x2d0>)
 80031b4:	4b92      	ldr	r3, [pc, #584]	@ (8003400 <_printf_float+0x2d4>)
 80031b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80031ba:	bf8c      	ite	hi
 80031bc:	4690      	movhi	r8, r2
 80031be:	4698      	movls	r8, r3
 80031c0:	2303      	movs	r3, #3
 80031c2:	f04f 0900 	mov.w	r9, #0
 80031c6:	6123      	str	r3, [r4, #16]
 80031c8:	f02b 0304 	bic.w	r3, fp, #4
 80031cc:	6023      	str	r3, [r4, #0]
 80031ce:	4633      	mov	r3, r6
 80031d0:	4621      	mov	r1, r4
 80031d2:	4628      	mov	r0, r5
 80031d4:	9700      	str	r7, [sp, #0]
 80031d6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80031d8:	f000 f9d4 	bl	8003584 <_printf_common>
 80031dc:	3001      	adds	r0, #1
 80031de:	f040 8090 	bne.w	8003302 <_printf_float+0x1d6>
 80031e2:	f04f 30ff 	mov.w	r0, #4294967295
 80031e6:	b011      	add	sp, #68	@ 0x44
 80031e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ec:	4642      	mov	r2, r8
 80031ee:	464b      	mov	r3, r9
 80031f0:	4640      	mov	r0, r8
 80031f2:	4649      	mov	r1, r9
 80031f4:	f7fd fc0a 	bl	8000a0c <__aeabi_dcmpun>
 80031f8:	b148      	cbz	r0, 800320e <_printf_float+0xe2>
 80031fa:	464b      	mov	r3, r9
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bfb8      	it	lt
 8003200:	232d      	movlt	r3, #45	@ 0x2d
 8003202:	4a80      	ldr	r2, [pc, #512]	@ (8003404 <_printf_float+0x2d8>)
 8003204:	bfb8      	it	lt
 8003206:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800320a:	4b7f      	ldr	r3, [pc, #508]	@ (8003408 <_printf_float+0x2dc>)
 800320c:	e7d3      	b.n	80031b6 <_printf_float+0x8a>
 800320e:	6863      	ldr	r3, [r4, #4]
 8003210:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	d13f      	bne.n	8003298 <_printf_float+0x16c>
 8003218:	2306      	movs	r3, #6
 800321a:	6063      	str	r3, [r4, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003222:	6023      	str	r3, [r4, #0]
 8003224:	9206      	str	r2, [sp, #24]
 8003226:	aa0e      	add	r2, sp, #56	@ 0x38
 8003228:	e9cd a204 	strd	sl, r2, [sp, #16]
 800322c:	aa0d      	add	r2, sp, #52	@ 0x34
 800322e:	9203      	str	r2, [sp, #12]
 8003230:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003234:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003238:	6863      	ldr	r3, [r4, #4]
 800323a:	4642      	mov	r2, r8
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	4628      	mov	r0, r5
 8003240:	464b      	mov	r3, r9
 8003242:	910a      	str	r1, [sp, #40]	@ 0x28
 8003244:	f7ff fed4 	bl	8002ff0 <__cvt>
 8003248:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800324a:	4680      	mov	r8, r0
 800324c:	2947      	cmp	r1, #71	@ 0x47
 800324e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003250:	d128      	bne.n	80032a4 <_printf_float+0x178>
 8003252:	1cc8      	adds	r0, r1, #3
 8003254:	db02      	blt.n	800325c <_printf_float+0x130>
 8003256:	6863      	ldr	r3, [r4, #4]
 8003258:	4299      	cmp	r1, r3
 800325a:	dd40      	ble.n	80032de <_printf_float+0x1b2>
 800325c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003260:	fa5f fa8a 	uxtb.w	sl, sl
 8003264:	4652      	mov	r2, sl
 8003266:	3901      	subs	r1, #1
 8003268:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800326c:	910d      	str	r1, [sp, #52]	@ 0x34
 800326e:	f7ff ff23 	bl	80030b8 <__exponent>
 8003272:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003274:	4681      	mov	r9, r0
 8003276:	1813      	adds	r3, r2, r0
 8003278:	2a01      	cmp	r2, #1
 800327a:	6123      	str	r3, [r4, #16]
 800327c:	dc02      	bgt.n	8003284 <_printf_float+0x158>
 800327e:	6822      	ldr	r2, [r4, #0]
 8003280:	07d2      	lsls	r2, r2, #31
 8003282:	d501      	bpl.n	8003288 <_printf_float+0x15c>
 8003284:	3301      	adds	r3, #1
 8003286:	6123      	str	r3, [r4, #16]
 8003288:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800328c:	2b00      	cmp	r3, #0
 800328e:	d09e      	beq.n	80031ce <_printf_float+0xa2>
 8003290:	232d      	movs	r3, #45	@ 0x2d
 8003292:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003296:	e79a      	b.n	80031ce <_printf_float+0xa2>
 8003298:	2947      	cmp	r1, #71	@ 0x47
 800329a:	d1bf      	bne.n	800321c <_printf_float+0xf0>
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1bd      	bne.n	800321c <_printf_float+0xf0>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e7ba      	b.n	800321a <_printf_float+0xee>
 80032a4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80032a8:	d9dc      	bls.n	8003264 <_printf_float+0x138>
 80032aa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80032ae:	d118      	bne.n	80032e2 <_printf_float+0x1b6>
 80032b0:	2900      	cmp	r1, #0
 80032b2:	6863      	ldr	r3, [r4, #4]
 80032b4:	dd0b      	ble.n	80032ce <_printf_float+0x1a2>
 80032b6:	6121      	str	r1, [r4, #16]
 80032b8:	b913      	cbnz	r3, 80032c0 <_printf_float+0x194>
 80032ba:	6822      	ldr	r2, [r4, #0]
 80032bc:	07d0      	lsls	r0, r2, #31
 80032be:	d502      	bpl.n	80032c6 <_printf_float+0x19a>
 80032c0:	3301      	adds	r3, #1
 80032c2:	440b      	add	r3, r1
 80032c4:	6123      	str	r3, [r4, #16]
 80032c6:	f04f 0900 	mov.w	r9, #0
 80032ca:	65a1      	str	r1, [r4, #88]	@ 0x58
 80032cc:	e7dc      	b.n	8003288 <_printf_float+0x15c>
 80032ce:	b913      	cbnz	r3, 80032d6 <_printf_float+0x1aa>
 80032d0:	6822      	ldr	r2, [r4, #0]
 80032d2:	07d2      	lsls	r2, r2, #31
 80032d4:	d501      	bpl.n	80032da <_printf_float+0x1ae>
 80032d6:	3302      	adds	r3, #2
 80032d8:	e7f4      	b.n	80032c4 <_printf_float+0x198>
 80032da:	2301      	movs	r3, #1
 80032dc:	e7f2      	b.n	80032c4 <_printf_float+0x198>
 80032de:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80032e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80032e4:	4299      	cmp	r1, r3
 80032e6:	db05      	blt.n	80032f4 <_printf_float+0x1c8>
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	6121      	str	r1, [r4, #16]
 80032ec:	07d8      	lsls	r0, r3, #31
 80032ee:	d5ea      	bpl.n	80032c6 <_printf_float+0x19a>
 80032f0:	1c4b      	adds	r3, r1, #1
 80032f2:	e7e7      	b.n	80032c4 <_printf_float+0x198>
 80032f4:	2900      	cmp	r1, #0
 80032f6:	bfcc      	ite	gt
 80032f8:	2201      	movgt	r2, #1
 80032fa:	f1c1 0202 	rsble	r2, r1, #2
 80032fe:	4413      	add	r3, r2
 8003300:	e7e0      	b.n	80032c4 <_printf_float+0x198>
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	055a      	lsls	r2, r3, #21
 8003306:	d407      	bmi.n	8003318 <_printf_float+0x1ec>
 8003308:	6923      	ldr	r3, [r4, #16]
 800330a:	4642      	mov	r2, r8
 800330c:	4631      	mov	r1, r6
 800330e:	4628      	mov	r0, r5
 8003310:	47b8      	blx	r7
 8003312:	3001      	adds	r0, #1
 8003314:	d12b      	bne.n	800336e <_printf_float+0x242>
 8003316:	e764      	b.n	80031e2 <_printf_float+0xb6>
 8003318:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800331c:	f240 80dc 	bls.w	80034d8 <_printf_float+0x3ac>
 8003320:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003324:	2200      	movs	r2, #0
 8003326:	2300      	movs	r3, #0
 8003328:	f7fd fb3e 	bl	80009a8 <__aeabi_dcmpeq>
 800332c:	2800      	cmp	r0, #0
 800332e:	d033      	beq.n	8003398 <_printf_float+0x26c>
 8003330:	2301      	movs	r3, #1
 8003332:	4631      	mov	r1, r6
 8003334:	4628      	mov	r0, r5
 8003336:	4a35      	ldr	r2, [pc, #212]	@ (800340c <_printf_float+0x2e0>)
 8003338:	47b8      	blx	r7
 800333a:	3001      	adds	r0, #1
 800333c:	f43f af51 	beq.w	80031e2 <_printf_float+0xb6>
 8003340:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003344:	4543      	cmp	r3, r8
 8003346:	db02      	blt.n	800334e <_printf_float+0x222>
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	07d8      	lsls	r0, r3, #31
 800334c:	d50f      	bpl.n	800336e <_printf_float+0x242>
 800334e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003352:	4631      	mov	r1, r6
 8003354:	4628      	mov	r0, r5
 8003356:	47b8      	blx	r7
 8003358:	3001      	adds	r0, #1
 800335a:	f43f af42 	beq.w	80031e2 <_printf_float+0xb6>
 800335e:	f04f 0900 	mov.w	r9, #0
 8003362:	f108 38ff 	add.w	r8, r8, #4294967295
 8003366:	f104 0a1a 	add.w	sl, r4, #26
 800336a:	45c8      	cmp	r8, r9
 800336c:	dc09      	bgt.n	8003382 <_printf_float+0x256>
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	079b      	lsls	r3, r3, #30
 8003372:	f100 8102 	bmi.w	800357a <_printf_float+0x44e>
 8003376:	68e0      	ldr	r0, [r4, #12]
 8003378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800337a:	4298      	cmp	r0, r3
 800337c:	bfb8      	it	lt
 800337e:	4618      	movlt	r0, r3
 8003380:	e731      	b.n	80031e6 <_printf_float+0xba>
 8003382:	2301      	movs	r3, #1
 8003384:	4652      	mov	r2, sl
 8003386:	4631      	mov	r1, r6
 8003388:	4628      	mov	r0, r5
 800338a:	47b8      	blx	r7
 800338c:	3001      	adds	r0, #1
 800338e:	f43f af28 	beq.w	80031e2 <_printf_float+0xb6>
 8003392:	f109 0901 	add.w	r9, r9, #1
 8003396:	e7e8      	b.n	800336a <_printf_float+0x23e>
 8003398:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800339a:	2b00      	cmp	r3, #0
 800339c:	dc38      	bgt.n	8003410 <_printf_float+0x2e4>
 800339e:	2301      	movs	r3, #1
 80033a0:	4631      	mov	r1, r6
 80033a2:	4628      	mov	r0, r5
 80033a4:	4a19      	ldr	r2, [pc, #100]	@ (800340c <_printf_float+0x2e0>)
 80033a6:	47b8      	blx	r7
 80033a8:	3001      	adds	r0, #1
 80033aa:	f43f af1a 	beq.w	80031e2 <_printf_float+0xb6>
 80033ae:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80033b2:	ea59 0303 	orrs.w	r3, r9, r3
 80033b6:	d102      	bne.n	80033be <_printf_float+0x292>
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	07d9      	lsls	r1, r3, #31
 80033bc:	d5d7      	bpl.n	800336e <_printf_float+0x242>
 80033be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80033c2:	4631      	mov	r1, r6
 80033c4:	4628      	mov	r0, r5
 80033c6:	47b8      	blx	r7
 80033c8:	3001      	adds	r0, #1
 80033ca:	f43f af0a 	beq.w	80031e2 <_printf_float+0xb6>
 80033ce:	f04f 0a00 	mov.w	sl, #0
 80033d2:	f104 0b1a 	add.w	fp, r4, #26
 80033d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80033d8:	425b      	negs	r3, r3
 80033da:	4553      	cmp	r3, sl
 80033dc:	dc01      	bgt.n	80033e2 <_printf_float+0x2b6>
 80033de:	464b      	mov	r3, r9
 80033e0:	e793      	b.n	800330a <_printf_float+0x1de>
 80033e2:	2301      	movs	r3, #1
 80033e4:	465a      	mov	r2, fp
 80033e6:	4631      	mov	r1, r6
 80033e8:	4628      	mov	r0, r5
 80033ea:	47b8      	blx	r7
 80033ec:	3001      	adds	r0, #1
 80033ee:	f43f aef8 	beq.w	80031e2 <_printf_float+0xb6>
 80033f2:	f10a 0a01 	add.w	sl, sl, #1
 80033f6:	e7ee      	b.n	80033d6 <_printf_float+0x2aa>
 80033f8:	7fefffff 	.word	0x7fefffff
 80033fc:	08008476 	.word	0x08008476
 8003400:	08008472 	.word	0x08008472
 8003404:	0800847e 	.word	0x0800847e
 8003408:	0800847a 	.word	0x0800847a
 800340c:	08008482 	.word	0x08008482
 8003410:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003412:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003416:	4553      	cmp	r3, sl
 8003418:	bfa8      	it	ge
 800341a:	4653      	movge	r3, sl
 800341c:	2b00      	cmp	r3, #0
 800341e:	4699      	mov	r9, r3
 8003420:	dc36      	bgt.n	8003490 <_printf_float+0x364>
 8003422:	f04f 0b00 	mov.w	fp, #0
 8003426:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800342a:	f104 021a 	add.w	r2, r4, #26
 800342e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003430:	930a      	str	r3, [sp, #40]	@ 0x28
 8003432:	eba3 0309 	sub.w	r3, r3, r9
 8003436:	455b      	cmp	r3, fp
 8003438:	dc31      	bgt.n	800349e <_printf_float+0x372>
 800343a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800343c:	459a      	cmp	sl, r3
 800343e:	dc3a      	bgt.n	80034b6 <_printf_float+0x38a>
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	07da      	lsls	r2, r3, #31
 8003444:	d437      	bmi.n	80034b6 <_printf_float+0x38a>
 8003446:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003448:	ebaa 0903 	sub.w	r9, sl, r3
 800344c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800344e:	ebaa 0303 	sub.w	r3, sl, r3
 8003452:	4599      	cmp	r9, r3
 8003454:	bfa8      	it	ge
 8003456:	4699      	movge	r9, r3
 8003458:	f1b9 0f00 	cmp.w	r9, #0
 800345c:	dc33      	bgt.n	80034c6 <_printf_float+0x39a>
 800345e:	f04f 0800 	mov.w	r8, #0
 8003462:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003466:	f104 0b1a 	add.w	fp, r4, #26
 800346a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800346c:	ebaa 0303 	sub.w	r3, sl, r3
 8003470:	eba3 0309 	sub.w	r3, r3, r9
 8003474:	4543      	cmp	r3, r8
 8003476:	f77f af7a 	ble.w	800336e <_printf_float+0x242>
 800347a:	2301      	movs	r3, #1
 800347c:	465a      	mov	r2, fp
 800347e:	4631      	mov	r1, r6
 8003480:	4628      	mov	r0, r5
 8003482:	47b8      	blx	r7
 8003484:	3001      	adds	r0, #1
 8003486:	f43f aeac 	beq.w	80031e2 <_printf_float+0xb6>
 800348a:	f108 0801 	add.w	r8, r8, #1
 800348e:	e7ec      	b.n	800346a <_printf_float+0x33e>
 8003490:	4642      	mov	r2, r8
 8003492:	4631      	mov	r1, r6
 8003494:	4628      	mov	r0, r5
 8003496:	47b8      	blx	r7
 8003498:	3001      	adds	r0, #1
 800349a:	d1c2      	bne.n	8003422 <_printf_float+0x2f6>
 800349c:	e6a1      	b.n	80031e2 <_printf_float+0xb6>
 800349e:	2301      	movs	r3, #1
 80034a0:	4631      	mov	r1, r6
 80034a2:	4628      	mov	r0, r5
 80034a4:	920a      	str	r2, [sp, #40]	@ 0x28
 80034a6:	47b8      	blx	r7
 80034a8:	3001      	adds	r0, #1
 80034aa:	f43f ae9a 	beq.w	80031e2 <_printf_float+0xb6>
 80034ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80034b0:	f10b 0b01 	add.w	fp, fp, #1
 80034b4:	e7bb      	b.n	800342e <_printf_float+0x302>
 80034b6:	4631      	mov	r1, r6
 80034b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80034bc:	4628      	mov	r0, r5
 80034be:	47b8      	blx	r7
 80034c0:	3001      	adds	r0, #1
 80034c2:	d1c0      	bne.n	8003446 <_printf_float+0x31a>
 80034c4:	e68d      	b.n	80031e2 <_printf_float+0xb6>
 80034c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80034c8:	464b      	mov	r3, r9
 80034ca:	4631      	mov	r1, r6
 80034cc:	4628      	mov	r0, r5
 80034ce:	4442      	add	r2, r8
 80034d0:	47b8      	blx	r7
 80034d2:	3001      	adds	r0, #1
 80034d4:	d1c3      	bne.n	800345e <_printf_float+0x332>
 80034d6:	e684      	b.n	80031e2 <_printf_float+0xb6>
 80034d8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80034dc:	f1ba 0f01 	cmp.w	sl, #1
 80034e0:	dc01      	bgt.n	80034e6 <_printf_float+0x3ba>
 80034e2:	07db      	lsls	r3, r3, #31
 80034e4:	d536      	bpl.n	8003554 <_printf_float+0x428>
 80034e6:	2301      	movs	r3, #1
 80034e8:	4642      	mov	r2, r8
 80034ea:	4631      	mov	r1, r6
 80034ec:	4628      	mov	r0, r5
 80034ee:	47b8      	blx	r7
 80034f0:	3001      	adds	r0, #1
 80034f2:	f43f ae76 	beq.w	80031e2 <_printf_float+0xb6>
 80034f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80034fa:	4631      	mov	r1, r6
 80034fc:	4628      	mov	r0, r5
 80034fe:	47b8      	blx	r7
 8003500:	3001      	adds	r0, #1
 8003502:	f43f ae6e 	beq.w	80031e2 <_printf_float+0xb6>
 8003506:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800350a:	2200      	movs	r2, #0
 800350c:	2300      	movs	r3, #0
 800350e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003512:	f7fd fa49 	bl	80009a8 <__aeabi_dcmpeq>
 8003516:	b9c0      	cbnz	r0, 800354a <_printf_float+0x41e>
 8003518:	4653      	mov	r3, sl
 800351a:	f108 0201 	add.w	r2, r8, #1
 800351e:	4631      	mov	r1, r6
 8003520:	4628      	mov	r0, r5
 8003522:	47b8      	blx	r7
 8003524:	3001      	adds	r0, #1
 8003526:	d10c      	bne.n	8003542 <_printf_float+0x416>
 8003528:	e65b      	b.n	80031e2 <_printf_float+0xb6>
 800352a:	2301      	movs	r3, #1
 800352c:	465a      	mov	r2, fp
 800352e:	4631      	mov	r1, r6
 8003530:	4628      	mov	r0, r5
 8003532:	47b8      	blx	r7
 8003534:	3001      	adds	r0, #1
 8003536:	f43f ae54 	beq.w	80031e2 <_printf_float+0xb6>
 800353a:	f108 0801 	add.w	r8, r8, #1
 800353e:	45d0      	cmp	r8, sl
 8003540:	dbf3      	blt.n	800352a <_printf_float+0x3fe>
 8003542:	464b      	mov	r3, r9
 8003544:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003548:	e6e0      	b.n	800330c <_printf_float+0x1e0>
 800354a:	f04f 0800 	mov.w	r8, #0
 800354e:	f104 0b1a 	add.w	fp, r4, #26
 8003552:	e7f4      	b.n	800353e <_printf_float+0x412>
 8003554:	2301      	movs	r3, #1
 8003556:	4642      	mov	r2, r8
 8003558:	e7e1      	b.n	800351e <_printf_float+0x3f2>
 800355a:	2301      	movs	r3, #1
 800355c:	464a      	mov	r2, r9
 800355e:	4631      	mov	r1, r6
 8003560:	4628      	mov	r0, r5
 8003562:	47b8      	blx	r7
 8003564:	3001      	adds	r0, #1
 8003566:	f43f ae3c 	beq.w	80031e2 <_printf_float+0xb6>
 800356a:	f108 0801 	add.w	r8, r8, #1
 800356e:	68e3      	ldr	r3, [r4, #12]
 8003570:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003572:	1a5b      	subs	r3, r3, r1
 8003574:	4543      	cmp	r3, r8
 8003576:	dcf0      	bgt.n	800355a <_printf_float+0x42e>
 8003578:	e6fd      	b.n	8003376 <_printf_float+0x24a>
 800357a:	f04f 0800 	mov.w	r8, #0
 800357e:	f104 0919 	add.w	r9, r4, #25
 8003582:	e7f4      	b.n	800356e <_printf_float+0x442>

08003584 <_printf_common>:
 8003584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003588:	4616      	mov	r6, r2
 800358a:	4698      	mov	r8, r3
 800358c:	688a      	ldr	r2, [r1, #8]
 800358e:	690b      	ldr	r3, [r1, #16]
 8003590:	4607      	mov	r7, r0
 8003592:	4293      	cmp	r3, r2
 8003594:	bfb8      	it	lt
 8003596:	4613      	movlt	r3, r2
 8003598:	6033      	str	r3, [r6, #0]
 800359a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800359e:	460c      	mov	r4, r1
 80035a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80035a4:	b10a      	cbz	r2, 80035aa <_printf_common+0x26>
 80035a6:	3301      	adds	r3, #1
 80035a8:	6033      	str	r3, [r6, #0]
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	0699      	lsls	r1, r3, #26
 80035ae:	bf42      	ittt	mi
 80035b0:	6833      	ldrmi	r3, [r6, #0]
 80035b2:	3302      	addmi	r3, #2
 80035b4:	6033      	strmi	r3, [r6, #0]
 80035b6:	6825      	ldr	r5, [r4, #0]
 80035b8:	f015 0506 	ands.w	r5, r5, #6
 80035bc:	d106      	bne.n	80035cc <_printf_common+0x48>
 80035be:	f104 0a19 	add.w	sl, r4, #25
 80035c2:	68e3      	ldr	r3, [r4, #12]
 80035c4:	6832      	ldr	r2, [r6, #0]
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	42ab      	cmp	r3, r5
 80035ca:	dc2b      	bgt.n	8003624 <_printf_common+0xa0>
 80035cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035d0:	6822      	ldr	r2, [r4, #0]
 80035d2:	3b00      	subs	r3, #0
 80035d4:	bf18      	it	ne
 80035d6:	2301      	movne	r3, #1
 80035d8:	0692      	lsls	r2, r2, #26
 80035da:	d430      	bmi.n	800363e <_printf_common+0xba>
 80035dc:	4641      	mov	r1, r8
 80035de:	4638      	mov	r0, r7
 80035e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035e4:	47c8      	blx	r9
 80035e6:	3001      	adds	r0, #1
 80035e8:	d023      	beq.n	8003632 <_printf_common+0xae>
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	6922      	ldr	r2, [r4, #16]
 80035ee:	f003 0306 	and.w	r3, r3, #6
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	bf14      	ite	ne
 80035f6:	2500      	movne	r5, #0
 80035f8:	6833      	ldreq	r3, [r6, #0]
 80035fa:	f04f 0600 	mov.w	r6, #0
 80035fe:	bf08      	it	eq
 8003600:	68e5      	ldreq	r5, [r4, #12]
 8003602:	f104 041a 	add.w	r4, r4, #26
 8003606:	bf08      	it	eq
 8003608:	1aed      	subeq	r5, r5, r3
 800360a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800360e:	bf08      	it	eq
 8003610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003614:	4293      	cmp	r3, r2
 8003616:	bfc4      	itt	gt
 8003618:	1a9b      	subgt	r3, r3, r2
 800361a:	18ed      	addgt	r5, r5, r3
 800361c:	42b5      	cmp	r5, r6
 800361e:	d11a      	bne.n	8003656 <_printf_common+0xd2>
 8003620:	2000      	movs	r0, #0
 8003622:	e008      	b.n	8003636 <_printf_common+0xb2>
 8003624:	2301      	movs	r3, #1
 8003626:	4652      	mov	r2, sl
 8003628:	4641      	mov	r1, r8
 800362a:	4638      	mov	r0, r7
 800362c:	47c8      	blx	r9
 800362e:	3001      	adds	r0, #1
 8003630:	d103      	bne.n	800363a <_printf_common+0xb6>
 8003632:	f04f 30ff 	mov.w	r0, #4294967295
 8003636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800363a:	3501      	adds	r5, #1
 800363c:	e7c1      	b.n	80035c2 <_printf_common+0x3e>
 800363e:	2030      	movs	r0, #48	@ 0x30
 8003640:	18e1      	adds	r1, r4, r3
 8003642:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800364c:	4422      	add	r2, r4
 800364e:	3302      	adds	r3, #2
 8003650:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003654:	e7c2      	b.n	80035dc <_printf_common+0x58>
 8003656:	2301      	movs	r3, #1
 8003658:	4622      	mov	r2, r4
 800365a:	4641      	mov	r1, r8
 800365c:	4638      	mov	r0, r7
 800365e:	47c8      	blx	r9
 8003660:	3001      	adds	r0, #1
 8003662:	d0e6      	beq.n	8003632 <_printf_common+0xae>
 8003664:	3601      	adds	r6, #1
 8003666:	e7d9      	b.n	800361c <_printf_common+0x98>

08003668 <_printf_i>:
 8003668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800366c:	7e0f      	ldrb	r7, [r1, #24]
 800366e:	4691      	mov	r9, r2
 8003670:	2f78      	cmp	r7, #120	@ 0x78
 8003672:	4680      	mov	r8, r0
 8003674:	460c      	mov	r4, r1
 8003676:	469a      	mov	sl, r3
 8003678:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800367a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800367e:	d807      	bhi.n	8003690 <_printf_i+0x28>
 8003680:	2f62      	cmp	r7, #98	@ 0x62
 8003682:	d80a      	bhi.n	800369a <_printf_i+0x32>
 8003684:	2f00      	cmp	r7, #0
 8003686:	f000 80d1 	beq.w	800382c <_printf_i+0x1c4>
 800368a:	2f58      	cmp	r7, #88	@ 0x58
 800368c:	f000 80b8 	beq.w	8003800 <_printf_i+0x198>
 8003690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003694:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003698:	e03a      	b.n	8003710 <_printf_i+0xa8>
 800369a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800369e:	2b15      	cmp	r3, #21
 80036a0:	d8f6      	bhi.n	8003690 <_printf_i+0x28>
 80036a2:	a101      	add	r1, pc, #4	@ (adr r1, 80036a8 <_printf_i+0x40>)
 80036a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036a8:	08003701 	.word	0x08003701
 80036ac:	08003715 	.word	0x08003715
 80036b0:	08003691 	.word	0x08003691
 80036b4:	08003691 	.word	0x08003691
 80036b8:	08003691 	.word	0x08003691
 80036bc:	08003691 	.word	0x08003691
 80036c0:	08003715 	.word	0x08003715
 80036c4:	08003691 	.word	0x08003691
 80036c8:	08003691 	.word	0x08003691
 80036cc:	08003691 	.word	0x08003691
 80036d0:	08003691 	.word	0x08003691
 80036d4:	08003813 	.word	0x08003813
 80036d8:	0800373f 	.word	0x0800373f
 80036dc:	080037cd 	.word	0x080037cd
 80036e0:	08003691 	.word	0x08003691
 80036e4:	08003691 	.word	0x08003691
 80036e8:	08003835 	.word	0x08003835
 80036ec:	08003691 	.word	0x08003691
 80036f0:	0800373f 	.word	0x0800373f
 80036f4:	08003691 	.word	0x08003691
 80036f8:	08003691 	.word	0x08003691
 80036fc:	080037d5 	.word	0x080037d5
 8003700:	6833      	ldr	r3, [r6, #0]
 8003702:	1d1a      	adds	r2, r3, #4
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6032      	str	r2, [r6, #0]
 8003708:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800370c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003710:	2301      	movs	r3, #1
 8003712:	e09c      	b.n	800384e <_printf_i+0x1e6>
 8003714:	6833      	ldr	r3, [r6, #0]
 8003716:	6820      	ldr	r0, [r4, #0]
 8003718:	1d19      	adds	r1, r3, #4
 800371a:	6031      	str	r1, [r6, #0]
 800371c:	0606      	lsls	r6, r0, #24
 800371e:	d501      	bpl.n	8003724 <_printf_i+0xbc>
 8003720:	681d      	ldr	r5, [r3, #0]
 8003722:	e003      	b.n	800372c <_printf_i+0xc4>
 8003724:	0645      	lsls	r5, r0, #25
 8003726:	d5fb      	bpl.n	8003720 <_printf_i+0xb8>
 8003728:	f9b3 5000 	ldrsh.w	r5, [r3]
 800372c:	2d00      	cmp	r5, #0
 800372e:	da03      	bge.n	8003738 <_printf_i+0xd0>
 8003730:	232d      	movs	r3, #45	@ 0x2d
 8003732:	426d      	negs	r5, r5
 8003734:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003738:	230a      	movs	r3, #10
 800373a:	4858      	ldr	r0, [pc, #352]	@ (800389c <_printf_i+0x234>)
 800373c:	e011      	b.n	8003762 <_printf_i+0xfa>
 800373e:	6821      	ldr	r1, [r4, #0]
 8003740:	6833      	ldr	r3, [r6, #0]
 8003742:	0608      	lsls	r0, r1, #24
 8003744:	f853 5b04 	ldr.w	r5, [r3], #4
 8003748:	d402      	bmi.n	8003750 <_printf_i+0xe8>
 800374a:	0649      	lsls	r1, r1, #25
 800374c:	bf48      	it	mi
 800374e:	b2ad      	uxthmi	r5, r5
 8003750:	2f6f      	cmp	r7, #111	@ 0x6f
 8003752:	6033      	str	r3, [r6, #0]
 8003754:	bf14      	ite	ne
 8003756:	230a      	movne	r3, #10
 8003758:	2308      	moveq	r3, #8
 800375a:	4850      	ldr	r0, [pc, #320]	@ (800389c <_printf_i+0x234>)
 800375c:	2100      	movs	r1, #0
 800375e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003762:	6866      	ldr	r6, [r4, #4]
 8003764:	2e00      	cmp	r6, #0
 8003766:	60a6      	str	r6, [r4, #8]
 8003768:	db05      	blt.n	8003776 <_printf_i+0x10e>
 800376a:	6821      	ldr	r1, [r4, #0]
 800376c:	432e      	orrs	r6, r5
 800376e:	f021 0104 	bic.w	r1, r1, #4
 8003772:	6021      	str	r1, [r4, #0]
 8003774:	d04b      	beq.n	800380e <_printf_i+0x1a6>
 8003776:	4616      	mov	r6, r2
 8003778:	fbb5 f1f3 	udiv	r1, r5, r3
 800377c:	fb03 5711 	mls	r7, r3, r1, r5
 8003780:	5dc7      	ldrb	r7, [r0, r7]
 8003782:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003786:	462f      	mov	r7, r5
 8003788:	42bb      	cmp	r3, r7
 800378a:	460d      	mov	r5, r1
 800378c:	d9f4      	bls.n	8003778 <_printf_i+0x110>
 800378e:	2b08      	cmp	r3, #8
 8003790:	d10b      	bne.n	80037aa <_printf_i+0x142>
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	07df      	lsls	r7, r3, #31
 8003796:	d508      	bpl.n	80037aa <_printf_i+0x142>
 8003798:	6923      	ldr	r3, [r4, #16]
 800379a:	6861      	ldr	r1, [r4, #4]
 800379c:	4299      	cmp	r1, r3
 800379e:	bfde      	ittt	le
 80037a0:	2330      	movle	r3, #48	@ 0x30
 80037a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037aa:	1b92      	subs	r2, r2, r6
 80037ac:	6122      	str	r2, [r4, #16]
 80037ae:	464b      	mov	r3, r9
 80037b0:	4621      	mov	r1, r4
 80037b2:	4640      	mov	r0, r8
 80037b4:	f8cd a000 	str.w	sl, [sp]
 80037b8:	aa03      	add	r2, sp, #12
 80037ba:	f7ff fee3 	bl	8003584 <_printf_common>
 80037be:	3001      	adds	r0, #1
 80037c0:	d14a      	bne.n	8003858 <_printf_i+0x1f0>
 80037c2:	f04f 30ff 	mov.w	r0, #4294967295
 80037c6:	b004      	add	sp, #16
 80037c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	f043 0320 	orr.w	r3, r3, #32
 80037d2:	6023      	str	r3, [r4, #0]
 80037d4:	2778      	movs	r7, #120	@ 0x78
 80037d6:	4832      	ldr	r0, [pc, #200]	@ (80038a0 <_printf_i+0x238>)
 80037d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	6831      	ldr	r1, [r6, #0]
 80037e0:	061f      	lsls	r7, r3, #24
 80037e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80037e6:	d402      	bmi.n	80037ee <_printf_i+0x186>
 80037e8:	065f      	lsls	r7, r3, #25
 80037ea:	bf48      	it	mi
 80037ec:	b2ad      	uxthmi	r5, r5
 80037ee:	6031      	str	r1, [r6, #0]
 80037f0:	07d9      	lsls	r1, r3, #31
 80037f2:	bf44      	itt	mi
 80037f4:	f043 0320 	orrmi.w	r3, r3, #32
 80037f8:	6023      	strmi	r3, [r4, #0]
 80037fa:	b11d      	cbz	r5, 8003804 <_printf_i+0x19c>
 80037fc:	2310      	movs	r3, #16
 80037fe:	e7ad      	b.n	800375c <_printf_i+0xf4>
 8003800:	4826      	ldr	r0, [pc, #152]	@ (800389c <_printf_i+0x234>)
 8003802:	e7e9      	b.n	80037d8 <_printf_i+0x170>
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	f023 0320 	bic.w	r3, r3, #32
 800380a:	6023      	str	r3, [r4, #0]
 800380c:	e7f6      	b.n	80037fc <_printf_i+0x194>
 800380e:	4616      	mov	r6, r2
 8003810:	e7bd      	b.n	800378e <_printf_i+0x126>
 8003812:	6833      	ldr	r3, [r6, #0]
 8003814:	6825      	ldr	r5, [r4, #0]
 8003816:	1d18      	adds	r0, r3, #4
 8003818:	6961      	ldr	r1, [r4, #20]
 800381a:	6030      	str	r0, [r6, #0]
 800381c:	062e      	lsls	r6, r5, #24
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	d501      	bpl.n	8003826 <_printf_i+0x1be>
 8003822:	6019      	str	r1, [r3, #0]
 8003824:	e002      	b.n	800382c <_printf_i+0x1c4>
 8003826:	0668      	lsls	r0, r5, #25
 8003828:	d5fb      	bpl.n	8003822 <_printf_i+0x1ba>
 800382a:	8019      	strh	r1, [r3, #0]
 800382c:	2300      	movs	r3, #0
 800382e:	4616      	mov	r6, r2
 8003830:	6123      	str	r3, [r4, #16]
 8003832:	e7bc      	b.n	80037ae <_printf_i+0x146>
 8003834:	6833      	ldr	r3, [r6, #0]
 8003836:	2100      	movs	r1, #0
 8003838:	1d1a      	adds	r2, r3, #4
 800383a:	6032      	str	r2, [r6, #0]
 800383c:	681e      	ldr	r6, [r3, #0]
 800383e:	6862      	ldr	r2, [r4, #4]
 8003840:	4630      	mov	r0, r6
 8003842:	f000 fbe0 	bl	8004006 <memchr>
 8003846:	b108      	cbz	r0, 800384c <_printf_i+0x1e4>
 8003848:	1b80      	subs	r0, r0, r6
 800384a:	6060      	str	r0, [r4, #4]
 800384c:	6863      	ldr	r3, [r4, #4]
 800384e:	6123      	str	r3, [r4, #16]
 8003850:	2300      	movs	r3, #0
 8003852:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003856:	e7aa      	b.n	80037ae <_printf_i+0x146>
 8003858:	4632      	mov	r2, r6
 800385a:	4649      	mov	r1, r9
 800385c:	4640      	mov	r0, r8
 800385e:	6923      	ldr	r3, [r4, #16]
 8003860:	47d0      	blx	sl
 8003862:	3001      	adds	r0, #1
 8003864:	d0ad      	beq.n	80037c2 <_printf_i+0x15a>
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	079b      	lsls	r3, r3, #30
 800386a:	d413      	bmi.n	8003894 <_printf_i+0x22c>
 800386c:	68e0      	ldr	r0, [r4, #12]
 800386e:	9b03      	ldr	r3, [sp, #12]
 8003870:	4298      	cmp	r0, r3
 8003872:	bfb8      	it	lt
 8003874:	4618      	movlt	r0, r3
 8003876:	e7a6      	b.n	80037c6 <_printf_i+0x15e>
 8003878:	2301      	movs	r3, #1
 800387a:	4632      	mov	r2, r6
 800387c:	4649      	mov	r1, r9
 800387e:	4640      	mov	r0, r8
 8003880:	47d0      	blx	sl
 8003882:	3001      	adds	r0, #1
 8003884:	d09d      	beq.n	80037c2 <_printf_i+0x15a>
 8003886:	3501      	adds	r5, #1
 8003888:	68e3      	ldr	r3, [r4, #12]
 800388a:	9903      	ldr	r1, [sp, #12]
 800388c:	1a5b      	subs	r3, r3, r1
 800388e:	42ab      	cmp	r3, r5
 8003890:	dcf2      	bgt.n	8003878 <_printf_i+0x210>
 8003892:	e7eb      	b.n	800386c <_printf_i+0x204>
 8003894:	2500      	movs	r5, #0
 8003896:	f104 0619 	add.w	r6, r4, #25
 800389a:	e7f5      	b.n	8003888 <_printf_i+0x220>
 800389c:	08008484 	.word	0x08008484
 80038a0:	08008495 	.word	0x08008495

080038a4 <_scanf_float>:
 80038a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a8:	b087      	sub	sp, #28
 80038aa:	9303      	str	r3, [sp, #12]
 80038ac:	688b      	ldr	r3, [r1, #8]
 80038ae:	4691      	mov	r9, r2
 80038b0:	1e5a      	subs	r2, r3, #1
 80038b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80038b6:	bf82      	ittt	hi
 80038b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80038bc:	eb03 0b05 	addhi.w	fp, r3, r5
 80038c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80038c4:	460a      	mov	r2, r1
 80038c6:	f04f 0500 	mov.w	r5, #0
 80038ca:	bf88      	it	hi
 80038cc:	608b      	strhi	r3, [r1, #8]
 80038ce:	680b      	ldr	r3, [r1, #0]
 80038d0:	4680      	mov	r8, r0
 80038d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80038d6:	f842 3b1c 	str.w	r3, [r2], #28
 80038da:	460c      	mov	r4, r1
 80038dc:	bf98      	it	ls
 80038de:	f04f 0b00 	movls.w	fp, #0
 80038e2:	4616      	mov	r6, r2
 80038e4:	46aa      	mov	sl, r5
 80038e6:	462f      	mov	r7, r5
 80038e8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80038ec:	9201      	str	r2, [sp, #4]
 80038ee:	9502      	str	r5, [sp, #8]
 80038f0:	68a2      	ldr	r2, [r4, #8]
 80038f2:	b15a      	cbz	r2, 800390c <_scanf_float+0x68>
 80038f4:	f8d9 3000 	ldr.w	r3, [r9]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b4e      	cmp	r3, #78	@ 0x4e
 80038fc:	d862      	bhi.n	80039c4 <_scanf_float+0x120>
 80038fe:	2b40      	cmp	r3, #64	@ 0x40
 8003900:	d83a      	bhi.n	8003978 <_scanf_float+0xd4>
 8003902:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003906:	b2c8      	uxtb	r0, r1
 8003908:	280e      	cmp	r0, #14
 800390a:	d938      	bls.n	800397e <_scanf_float+0xda>
 800390c:	b11f      	cbz	r7, 8003916 <_scanf_float+0x72>
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003914:	6023      	str	r3, [r4, #0]
 8003916:	f10a 3aff 	add.w	sl, sl, #4294967295
 800391a:	f1ba 0f01 	cmp.w	sl, #1
 800391e:	f200 8114 	bhi.w	8003b4a <_scanf_float+0x2a6>
 8003922:	9b01      	ldr	r3, [sp, #4]
 8003924:	429e      	cmp	r6, r3
 8003926:	f200 8105 	bhi.w	8003b34 <_scanf_float+0x290>
 800392a:	2001      	movs	r0, #1
 800392c:	b007      	add	sp, #28
 800392e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003932:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003936:	2a0d      	cmp	r2, #13
 8003938:	d8e8      	bhi.n	800390c <_scanf_float+0x68>
 800393a:	a101      	add	r1, pc, #4	@ (adr r1, 8003940 <_scanf_float+0x9c>)
 800393c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003940:	08003a89 	.word	0x08003a89
 8003944:	0800390d 	.word	0x0800390d
 8003948:	0800390d 	.word	0x0800390d
 800394c:	0800390d 	.word	0x0800390d
 8003950:	08003ae5 	.word	0x08003ae5
 8003954:	08003abf 	.word	0x08003abf
 8003958:	0800390d 	.word	0x0800390d
 800395c:	0800390d 	.word	0x0800390d
 8003960:	08003a97 	.word	0x08003a97
 8003964:	0800390d 	.word	0x0800390d
 8003968:	0800390d 	.word	0x0800390d
 800396c:	0800390d 	.word	0x0800390d
 8003970:	0800390d 	.word	0x0800390d
 8003974:	08003a53 	.word	0x08003a53
 8003978:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800397c:	e7db      	b.n	8003936 <_scanf_float+0x92>
 800397e:	290e      	cmp	r1, #14
 8003980:	d8c4      	bhi.n	800390c <_scanf_float+0x68>
 8003982:	a001      	add	r0, pc, #4	@ (adr r0, 8003988 <_scanf_float+0xe4>)
 8003984:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003988:	08003a43 	.word	0x08003a43
 800398c:	0800390d 	.word	0x0800390d
 8003990:	08003a43 	.word	0x08003a43
 8003994:	08003ad3 	.word	0x08003ad3
 8003998:	0800390d 	.word	0x0800390d
 800399c:	080039e5 	.word	0x080039e5
 80039a0:	08003a29 	.word	0x08003a29
 80039a4:	08003a29 	.word	0x08003a29
 80039a8:	08003a29 	.word	0x08003a29
 80039ac:	08003a29 	.word	0x08003a29
 80039b0:	08003a29 	.word	0x08003a29
 80039b4:	08003a29 	.word	0x08003a29
 80039b8:	08003a29 	.word	0x08003a29
 80039bc:	08003a29 	.word	0x08003a29
 80039c0:	08003a29 	.word	0x08003a29
 80039c4:	2b6e      	cmp	r3, #110	@ 0x6e
 80039c6:	d809      	bhi.n	80039dc <_scanf_float+0x138>
 80039c8:	2b60      	cmp	r3, #96	@ 0x60
 80039ca:	d8b2      	bhi.n	8003932 <_scanf_float+0x8e>
 80039cc:	2b54      	cmp	r3, #84	@ 0x54
 80039ce:	d07b      	beq.n	8003ac8 <_scanf_float+0x224>
 80039d0:	2b59      	cmp	r3, #89	@ 0x59
 80039d2:	d19b      	bne.n	800390c <_scanf_float+0x68>
 80039d4:	2d07      	cmp	r5, #7
 80039d6:	d199      	bne.n	800390c <_scanf_float+0x68>
 80039d8:	2508      	movs	r5, #8
 80039da:	e02f      	b.n	8003a3c <_scanf_float+0x198>
 80039dc:	2b74      	cmp	r3, #116	@ 0x74
 80039de:	d073      	beq.n	8003ac8 <_scanf_float+0x224>
 80039e0:	2b79      	cmp	r3, #121	@ 0x79
 80039e2:	e7f6      	b.n	80039d2 <_scanf_float+0x12e>
 80039e4:	6821      	ldr	r1, [r4, #0]
 80039e6:	05c8      	lsls	r0, r1, #23
 80039e8:	d51e      	bpl.n	8003a28 <_scanf_float+0x184>
 80039ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80039ee:	6021      	str	r1, [r4, #0]
 80039f0:	3701      	adds	r7, #1
 80039f2:	f1bb 0f00 	cmp.w	fp, #0
 80039f6:	d003      	beq.n	8003a00 <_scanf_float+0x15c>
 80039f8:	3201      	adds	r2, #1
 80039fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80039fe:	60a2      	str	r2, [r4, #8]
 8003a00:	68a3      	ldr	r3, [r4, #8]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	60a3      	str	r3, [r4, #8]
 8003a06:	6923      	ldr	r3, [r4, #16]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	6123      	str	r3, [r4, #16]
 8003a0c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f8c9 3004 	str.w	r3, [r9, #4]
 8003a18:	f340 8083 	ble.w	8003b22 <_scanf_float+0x27e>
 8003a1c:	f8d9 3000 	ldr.w	r3, [r9]
 8003a20:	3301      	adds	r3, #1
 8003a22:	f8c9 3000 	str.w	r3, [r9]
 8003a26:	e763      	b.n	80038f0 <_scanf_float+0x4c>
 8003a28:	eb1a 0105 	adds.w	r1, sl, r5
 8003a2c:	f47f af6e 	bne.w	800390c <_scanf_float+0x68>
 8003a30:	460d      	mov	r5, r1
 8003a32:	468a      	mov	sl, r1
 8003a34:	6822      	ldr	r2, [r4, #0]
 8003a36:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003a3a:	6022      	str	r2, [r4, #0]
 8003a3c:	f806 3b01 	strb.w	r3, [r6], #1
 8003a40:	e7de      	b.n	8003a00 <_scanf_float+0x15c>
 8003a42:	6822      	ldr	r2, [r4, #0]
 8003a44:	0610      	lsls	r0, r2, #24
 8003a46:	f57f af61 	bpl.w	800390c <_scanf_float+0x68>
 8003a4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a4e:	6022      	str	r2, [r4, #0]
 8003a50:	e7f4      	b.n	8003a3c <_scanf_float+0x198>
 8003a52:	f1ba 0f00 	cmp.w	sl, #0
 8003a56:	d10c      	bne.n	8003a72 <_scanf_float+0x1ce>
 8003a58:	b977      	cbnz	r7, 8003a78 <_scanf_float+0x1d4>
 8003a5a:	6822      	ldr	r2, [r4, #0]
 8003a5c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003a60:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003a64:	d108      	bne.n	8003a78 <_scanf_float+0x1d4>
 8003a66:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003a6a:	f04f 0a01 	mov.w	sl, #1
 8003a6e:	6022      	str	r2, [r4, #0]
 8003a70:	e7e4      	b.n	8003a3c <_scanf_float+0x198>
 8003a72:	f1ba 0f02 	cmp.w	sl, #2
 8003a76:	d051      	beq.n	8003b1c <_scanf_float+0x278>
 8003a78:	2d01      	cmp	r5, #1
 8003a7a:	d002      	beq.n	8003a82 <_scanf_float+0x1de>
 8003a7c:	2d04      	cmp	r5, #4
 8003a7e:	f47f af45 	bne.w	800390c <_scanf_float+0x68>
 8003a82:	3501      	adds	r5, #1
 8003a84:	b2ed      	uxtb	r5, r5
 8003a86:	e7d9      	b.n	8003a3c <_scanf_float+0x198>
 8003a88:	f1ba 0f01 	cmp.w	sl, #1
 8003a8c:	f47f af3e 	bne.w	800390c <_scanf_float+0x68>
 8003a90:	f04f 0a02 	mov.w	sl, #2
 8003a94:	e7d2      	b.n	8003a3c <_scanf_float+0x198>
 8003a96:	b975      	cbnz	r5, 8003ab6 <_scanf_float+0x212>
 8003a98:	2f00      	cmp	r7, #0
 8003a9a:	f47f af38 	bne.w	800390e <_scanf_float+0x6a>
 8003a9e:	6822      	ldr	r2, [r4, #0]
 8003aa0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003aa4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003aa8:	f040 80ff 	bne.w	8003caa <_scanf_float+0x406>
 8003aac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003ab0:	2501      	movs	r5, #1
 8003ab2:	6022      	str	r2, [r4, #0]
 8003ab4:	e7c2      	b.n	8003a3c <_scanf_float+0x198>
 8003ab6:	2d03      	cmp	r5, #3
 8003ab8:	d0e3      	beq.n	8003a82 <_scanf_float+0x1de>
 8003aba:	2d05      	cmp	r5, #5
 8003abc:	e7df      	b.n	8003a7e <_scanf_float+0x1da>
 8003abe:	2d02      	cmp	r5, #2
 8003ac0:	f47f af24 	bne.w	800390c <_scanf_float+0x68>
 8003ac4:	2503      	movs	r5, #3
 8003ac6:	e7b9      	b.n	8003a3c <_scanf_float+0x198>
 8003ac8:	2d06      	cmp	r5, #6
 8003aca:	f47f af1f 	bne.w	800390c <_scanf_float+0x68>
 8003ace:	2507      	movs	r5, #7
 8003ad0:	e7b4      	b.n	8003a3c <_scanf_float+0x198>
 8003ad2:	6822      	ldr	r2, [r4, #0]
 8003ad4:	0591      	lsls	r1, r2, #22
 8003ad6:	f57f af19 	bpl.w	800390c <_scanf_float+0x68>
 8003ada:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003ade:	6022      	str	r2, [r4, #0]
 8003ae0:	9702      	str	r7, [sp, #8]
 8003ae2:	e7ab      	b.n	8003a3c <_scanf_float+0x198>
 8003ae4:	6822      	ldr	r2, [r4, #0]
 8003ae6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003aea:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003aee:	d005      	beq.n	8003afc <_scanf_float+0x258>
 8003af0:	0550      	lsls	r0, r2, #21
 8003af2:	f57f af0b 	bpl.w	800390c <_scanf_float+0x68>
 8003af6:	2f00      	cmp	r7, #0
 8003af8:	f000 80d7 	beq.w	8003caa <_scanf_float+0x406>
 8003afc:	0591      	lsls	r1, r2, #22
 8003afe:	bf58      	it	pl
 8003b00:	9902      	ldrpl	r1, [sp, #8]
 8003b02:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003b06:	bf58      	it	pl
 8003b08:	1a79      	subpl	r1, r7, r1
 8003b0a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003b0e:	f04f 0700 	mov.w	r7, #0
 8003b12:	bf58      	it	pl
 8003b14:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003b18:	6022      	str	r2, [r4, #0]
 8003b1a:	e78f      	b.n	8003a3c <_scanf_float+0x198>
 8003b1c:	f04f 0a03 	mov.w	sl, #3
 8003b20:	e78c      	b.n	8003a3c <_scanf_float+0x198>
 8003b22:	4649      	mov	r1, r9
 8003b24:	4640      	mov	r0, r8
 8003b26:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003b2a:	4798      	blx	r3
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	f43f aedf 	beq.w	80038f0 <_scanf_float+0x4c>
 8003b32:	e6eb      	b.n	800390c <_scanf_float+0x68>
 8003b34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003b38:	464a      	mov	r2, r9
 8003b3a:	4640      	mov	r0, r8
 8003b3c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003b40:	4798      	blx	r3
 8003b42:	6923      	ldr	r3, [r4, #16]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	6123      	str	r3, [r4, #16]
 8003b48:	e6eb      	b.n	8003922 <_scanf_float+0x7e>
 8003b4a:	1e6b      	subs	r3, r5, #1
 8003b4c:	2b06      	cmp	r3, #6
 8003b4e:	d824      	bhi.n	8003b9a <_scanf_float+0x2f6>
 8003b50:	2d02      	cmp	r5, #2
 8003b52:	d836      	bhi.n	8003bc2 <_scanf_float+0x31e>
 8003b54:	9b01      	ldr	r3, [sp, #4]
 8003b56:	429e      	cmp	r6, r3
 8003b58:	f67f aee7 	bls.w	800392a <_scanf_float+0x86>
 8003b5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003b60:	464a      	mov	r2, r9
 8003b62:	4640      	mov	r0, r8
 8003b64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003b68:	4798      	blx	r3
 8003b6a:	6923      	ldr	r3, [r4, #16]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	6123      	str	r3, [r4, #16]
 8003b70:	e7f0      	b.n	8003b54 <_scanf_float+0x2b0>
 8003b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003b76:	464a      	mov	r2, r9
 8003b78:	4640      	mov	r0, r8
 8003b7a:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003b7e:	4798      	blx	r3
 8003b80:	6923      	ldr	r3, [r4, #16]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	6123      	str	r3, [r4, #16]
 8003b86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b8a:	fa5f fa8a 	uxtb.w	sl, sl
 8003b8e:	f1ba 0f02 	cmp.w	sl, #2
 8003b92:	d1ee      	bne.n	8003b72 <_scanf_float+0x2ce>
 8003b94:	3d03      	subs	r5, #3
 8003b96:	b2ed      	uxtb	r5, r5
 8003b98:	1b76      	subs	r6, r6, r5
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	05da      	lsls	r2, r3, #23
 8003b9e:	d530      	bpl.n	8003c02 <_scanf_float+0x35e>
 8003ba0:	055b      	lsls	r3, r3, #21
 8003ba2:	d511      	bpl.n	8003bc8 <_scanf_float+0x324>
 8003ba4:	9b01      	ldr	r3, [sp, #4]
 8003ba6:	429e      	cmp	r6, r3
 8003ba8:	f67f aebf 	bls.w	800392a <_scanf_float+0x86>
 8003bac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003bb0:	464a      	mov	r2, r9
 8003bb2:	4640      	mov	r0, r8
 8003bb4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003bb8:	4798      	blx	r3
 8003bba:	6923      	ldr	r3, [r4, #16]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	6123      	str	r3, [r4, #16]
 8003bc0:	e7f0      	b.n	8003ba4 <_scanf_float+0x300>
 8003bc2:	46aa      	mov	sl, r5
 8003bc4:	46b3      	mov	fp, r6
 8003bc6:	e7de      	b.n	8003b86 <_scanf_float+0x2e2>
 8003bc8:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003bcc:	6923      	ldr	r3, [r4, #16]
 8003bce:	2965      	cmp	r1, #101	@ 0x65
 8003bd0:	f103 33ff 	add.w	r3, r3, #4294967295
 8003bd4:	f106 35ff 	add.w	r5, r6, #4294967295
 8003bd8:	6123      	str	r3, [r4, #16]
 8003bda:	d00c      	beq.n	8003bf6 <_scanf_float+0x352>
 8003bdc:	2945      	cmp	r1, #69	@ 0x45
 8003bde:	d00a      	beq.n	8003bf6 <_scanf_float+0x352>
 8003be0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003be4:	464a      	mov	r2, r9
 8003be6:	4640      	mov	r0, r8
 8003be8:	4798      	blx	r3
 8003bea:	6923      	ldr	r3, [r4, #16]
 8003bec:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	1eb5      	subs	r5, r6, #2
 8003bf4:	6123      	str	r3, [r4, #16]
 8003bf6:	464a      	mov	r2, r9
 8003bf8:	4640      	mov	r0, r8
 8003bfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003bfe:	4798      	blx	r3
 8003c00:	462e      	mov	r6, r5
 8003c02:	6822      	ldr	r2, [r4, #0]
 8003c04:	f012 0210 	ands.w	r2, r2, #16
 8003c08:	d001      	beq.n	8003c0e <_scanf_float+0x36a>
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	e68e      	b.n	800392c <_scanf_float+0x88>
 8003c0e:	7032      	strb	r2, [r6, #0]
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c1a:	d125      	bne.n	8003c68 <_scanf_float+0x3c4>
 8003c1c:	9b02      	ldr	r3, [sp, #8]
 8003c1e:	429f      	cmp	r7, r3
 8003c20:	d00a      	beq.n	8003c38 <_scanf_float+0x394>
 8003c22:	1bda      	subs	r2, r3, r7
 8003c24:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003c28:	429e      	cmp	r6, r3
 8003c2a:	bf28      	it	cs
 8003c2c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003c30:	4630      	mov	r0, r6
 8003c32:	491f      	ldr	r1, [pc, #124]	@ (8003cb0 <_scanf_float+0x40c>)
 8003c34:	f000 f902 	bl	8003e3c <siprintf>
 8003c38:	2200      	movs	r2, #0
 8003c3a:	4640      	mov	r0, r8
 8003c3c:	9901      	ldr	r1, [sp, #4]
 8003c3e:	f002 fbeb 	bl	8006418 <_strtod_r>
 8003c42:	9b03      	ldr	r3, [sp, #12]
 8003c44:	6825      	ldr	r5, [r4, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f015 0f02 	tst.w	r5, #2
 8003c4c:	4606      	mov	r6, r0
 8003c4e:	460f      	mov	r7, r1
 8003c50:	f103 0204 	add.w	r2, r3, #4
 8003c54:	d015      	beq.n	8003c82 <_scanf_float+0x3de>
 8003c56:	9903      	ldr	r1, [sp, #12]
 8003c58:	600a      	str	r2, [r1, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	e9c3 6700 	strd	r6, r7, [r3]
 8003c60:	68e3      	ldr	r3, [r4, #12]
 8003c62:	3301      	adds	r3, #1
 8003c64:	60e3      	str	r3, [r4, #12]
 8003c66:	e7d0      	b.n	8003c0a <_scanf_float+0x366>
 8003c68:	9b04      	ldr	r3, [sp, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0e4      	beq.n	8003c38 <_scanf_float+0x394>
 8003c6e:	9905      	ldr	r1, [sp, #20]
 8003c70:	230a      	movs	r3, #10
 8003c72:	4640      	mov	r0, r8
 8003c74:	3101      	adds	r1, #1
 8003c76:	f002 fc4f 	bl	8006518 <_strtol_r>
 8003c7a:	9b04      	ldr	r3, [sp, #16]
 8003c7c:	9e05      	ldr	r6, [sp, #20]
 8003c7e:	1ac2      	subs	r2, r0, r3
 8003c80:	e7d0      	b.n	8003c24 <_scanf_float+0x380>
 8003c82:	076d      	lsls	r5, r5, #29
 8003c84:	d4e7      	bmi.n	8003c56 <_scanf_float+0x3b2>
 8003c86:	9d03      	ldr	r5, [sp, #12]
 8003c88:	602a      	str	r2, [r5, #0]
 8003c8a:	681d      	ldr	r5, [r3, #0]
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	f7fc febc 	bl	8000a0c <__aeabi_dcmpun>
 8003c94:	b120      	cbz	r0, 8003ca0 <_scanf_float+0x3fc>
 8003c96:	4807      	ldr	r0, [pc, #28]	@ (8003cb4 <_scanf_float+0x410>)
 8003c98:	f000 f9c4 	bl	8004024 <nanf>
 8003c9c:	6028      	str	r0, [r5, #0]
 8003c9e:	e7df      	b.n	8003c60 <_scanf_float+0x3bc>
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	4639      	mov	r1, r7
 8003ca4:	f7fc ff10 	bl	8000ac8 <__aeabi_d2f>
 8003ca8:	e7f8      	b.n	8003c9c <_scanf_float+0x3f8>
 8003caa:	2700      	movs	r7, #0
 8003cac:	e633      	b.n	8003916 <_scanf_float+0x72>
 8003cae:	bf00      	nop
 8003cb0:	080084a6 	.word	0x080084a6
 8003cb4:	080085e7 	.word	0x080085e7

08003cb8 <std>:
 8003cb8:	2300      	movs	r3, #0
 8003cba:	b510      	push	{r4, lr}
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8003cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cc6:	6083      	str	r3, [r0, #8]
 8003cc8:	8181      	strh	r1, [r0, #12]
 8003cca:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ccc:	81c2      	strh	r2, [r0, #14]
 8003cce:	6183      	str	r3, [r0, #24]
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	305c      	adds	r0, #92	@ 0x5c
 8003cd6:	f000 f916 	bl	8003f06 <memset>
 8003cda:	4b0d      	ldr	r3, [pc, #52]	@ (8003d10 <std+0x58>)
 8003cdc:	6224      	str	r4, [r4, #32]
 8003cde:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d14 <std+0x5c>)
 8003ce2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d18 <std+0x60>)
 8003ce6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8003d1c <std+0x64>)
 8003cea:	6323      	str	r3, [r4, #48]	@ 0x30
 8003cec:	4b0c      	ldr	r3, [pc, #48]	@ (8003d20 <std+0x68>)
 8003cee:	429c      	cmp	r4, r3
 8003cf0:	d006      	beq.n	8003d00 <std+0x48>
 8003cf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003cf6:	4294      	cmp	r4, r2
 8003cf8:	d002      	beq.n	8003d00 <std+0x48>
 8003cfa:	33d0      	adds	r3, #208	@ 0xd0
 8003cfc:	429c      	cmp	r4, r3
 8003cfe:	d105      	bne.n	8003d0c <std+0x54>
 8003d00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d08:	f000 b97a 	b.w	8004000 <__retarget_lock_init_recursive>
 8003d0c:	bd10      	pop	{r4, pc}
 8003d0e:	bf00      	nop
 8003d10:	08003e81 	.word	0x08003e81
 8003d14:	08003ea3 	.word	0x08003ea3
 8003d18:	08003edb 	.word	0x08003edb
 8003d1c:	08003eff 	.word	0x08003eff
 8003d20:	20000674 	.word	0x20000674

08003d24 <stdio_exit_handler>:
 8003d24:	4a02      	ldr	r2, [pc, #8]	@ (8003d30 <stdio_exit_handler+0xc>)
 8003d26:	4903      	ldr	r1, [pc, #12]	@ (8003d34 <stdio_exit_handler+0x10>)
 8003d28:	4803      	ldr	r0, [pc, #12]	@ (8003d38 <stdio_exit_handler+0x14>)
 8003d2a:	f000 b869 	b.w	8003e00 <_fwalk_sglue>
 8003d2e:	bf00      	nop
 8003d30:	2000001c 	.word	0x2000001c
 8003d34:	080068cd 	.word	0x080068cd
 8003d38:	2000002c 	.word	0x2000002c

08003d3c <cleanup_stdio>:
 8003d3c:	6841      	ldr	r1, [r0, #4]
 8003d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d70 <cleanup_stdio+0x34>)
 8003d40:	b510      	push	{r4, lr}
 8003d42:	4299      	cmp	r1, r3
 8003d44:	4604      	mov	r4, r0
 8003d46:	d001      	beq.n	8003d4c <cleanup_stdio+0x10>
 8003d48:	f002 fdc0 	bl	80068cc <_fflush_r>
 8003d4c:	68a1      	ldr	r1, [r4, #8]
 8003d4e:	4b09      	ldr	r3, [pc, #36]	@ (8003d74 <cleanup_stdio+0x38>)
 8003d50:	4299      	cmp	r1, r3
 8003d52:	d002      	beq.n	8003d5a <cleanup_stdio+0x1e>
 8003d54:	4620      	mov	r0, r4
 8003d56:	f002 fdb9 	bl	80068cc <_fflush_r>
 8003d5a:	68e1      	ldr	r1, [r4, #12]
 8003d5c:	4b06      	ldr	r3, [pc, #24]	@ (8003d78 <cleanup_stdio+0x3c>)
 8003d5e:	4299      	cmp	r1, r3
 8003d60:	d004      	beq.n	8003d6c <cleanup_stdio+0x30>
 8003d62:	4620      	mov	r0, r4
 8003d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d68:	f002 bdb0 	b.w	80068cc <_fflush_r>
 8003d6c:	bd10      	pop	{r4, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000674 	.word	0x20000674
 8003d74:	200006dc 	.word	0x200006dc
 8003d78:	20000744 	.word	0x20000744

08003d7c <global_stdio_init.part.0>:
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003dac <global_stdio_init.part.0+0x30>)
 8003d80:	4c0b      	ldr	r4, [pc, #44]	@ (8003db0 <global_stdio_init.part.0+0x34>)
 8003d82:	4a0c      	ldr	r2, [pc, #48]	@ (8003db4 <global_stdio_init.part.0+0x38>)
 8003d84:	4620      	mov	r0, r4
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	2104      	movs	r1, #4
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f7ff ff94 	bl	8003cb8 <std>
 8003d90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d94:	2201      	movs	r2, #1
 8003d96:	2109      	movs	r1, #9
 8003d98:	f7ff ff8e 	bl	8003cb8 <std>
 8003d9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003da0:	2202      	movs	r2, #2
 8003da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003da6:	2112      	movs	r1, #18
 8003da8:	f7ff bf86 	b.w	8003cb8 <std>
 8003dac:	200007ac 	.word	0x200007ac
 8003db0:	20000674 	.word	0x20000674
 8003db4:	08003d25 	.word	0x08003d25

08003db8 <__sfp_lock_acquire>:
 8003db8:	4801      	ldr	r0, [pc, #4]	@ (8003dc0 <__sfp_lock_acquire+0x8>)
 8003dba:	f000 b922 	b.w	8004002 <__retarget_lock_acquire_recursive>
 8003dbe:	bf00      	nop
 8003dc0:	200007b5 	.word	0x200007b5

08003dc4 <__sfp_lock_release>:
 8003dc4:	4801      	ldr	r0, [pc, #4]	@ (8003dcc <__sfp_lock_release+0x8>)
 8003dc6:	f000 b91d 	b.w	8004004 <__retarget_lock_release_recursive>
 8003dca:	bf00      	nop
 8003dcc:	200007b5 	.word	0x200007b5

08003dd0 <__sinit>:
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	f7ff fff0 	bl	8003db8 <__sfp_lock_acquire>
 8003dd8:	6a23      	ldr	r3, [r4, #32]
 8003dda:	b11b      	cbz	r3, 8003de4 <__sinit+0x14>
 8003ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003de0:	f7ff bff0 	b.w	8003dc4 <__sfp_lock_release>
 8003de4:	4b04      	ldr	r3, [pc, #16]	@ (8003df8 <__sinit+0x28>)
 8003de6:	6223      	str	r3, [r4, #32]
 8003de8:	4b04      	ldr	r3, [pc, #16]	@ (8003dfc <__sinit+0x2c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f5      	bne.n	8003ddc <__sinit+0xc>
 8003df0:	f7ff ffc4 	bl	8003d7c <global_stdio_init.part.0>
 8003df4:	e7f2      	b.n	8003ddc <__sinit+0xc>
 8003df6:	bf00      	nop
 8003df8:	08003d3d 	.word	0x08003d3d
 8003dfc:	200007ac 	.word	0x200007ac

08003e00 <_fwalk_sglue>:
 8003e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e04:	4607      	mov	r7, r0
 8003e06:	4688      	mov	r8, r1
 8003e08:	4614      	mov	r4, r2
 8003e0a:	2600      	movs	r6, #0
 8003e0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e10:	f1b9 0901 	subs.w	r9, r9, #1
 8003e14:	d505      	bpl.n	8003e22 <_fwalk_sglue+0x22>
 8003e16:	6824      	ldr	r4, [r4, #0]
 8003e18:	2c00      	cmp	r4, #0
 8003e1a:	d1f7      	bne.n	8003e0c <_fwalk_sglue+0xc>
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e22:	89ab      	ldrh	r3, [r5, #12]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d907      	bls.n	8003e38 <_fwalk_sglue+0x38>
 8003e28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	d003      	beq.n	8003e38 <_fwalk_sglue+0x38>
 8003e30:	4629      	mov	r1, r5
 8003e32:	4638      	mov	r0, r7
 8003e34:	47c0      	blx	r8
 8003e36:	4306      	orrs	r6, r0
 8003e38:	3568      	adds	r5, #104	@ 0x68
 8003e3a:	e7e9      	b.n	8003e10 <_fwalk_sglue+0x10>

08003e3c <siprintf>:
 8003e3c:	b40e      	push	{r1, r2, r3}
 8003e3e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e42:	b510      	push	{r4, lr}
 8003e44:	2400      	movs	r4, #0
 8003e46:	b09d      	sub	sp, #116	@ 0x74
 8003e48:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003e4a:	9002      	str	r0, [sp, #8]
 8003e4c:	9006      	str	r0, [sp, #24]
 8003e4e:	9107      	str	r1, [sp, #28]
 8003e50:	9104      	str	r1, [sp, #16]
 8003e52:	4809      	ldr	r0, [pc, #36]	@ (8003e78 <siprintf+0x3c>)
 8003e54:	4909      	ldr	r1, [pc, #36]	@ (8003e7c <siprintf+0x40>)
 8003e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e5a:	9105      	str	r1, [sp, #20]
 8003e5c:	6800      	ldr	r0, [r0, #0]
 8003e5e:	a902      	add	r1, sp, #8
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003e64:	f002 fbb6 	bl	80065d4 <_svfiprintf_r>
 8003e68:	9b02      	ldr	r3, [sp, #8]
 8003e6a:	701c      	strb	r4, [r3, #0]
 8003e6c:	b01d      	add	sp, #116	@ 0x74
 8003e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e72:	b003      	add	sp, #12
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20000028 	.word	0x20000028
 8003e7c:	ffff0208 	.word	0xffff0208

08003e80 <__sread>:
 8003e80:	b510      	push	{r4, lr}
 8003e82:	460c      	mov	r4, r1
 8003e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e88:	f000 f86c 	bl	8003f64 <_read_r>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	bfab      	itete	ge
 8003e90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003e92:	89a3      	ldrhlt	r3, [r4, #12]
 8003e94:	181b      	addge	r3, r3, r0
 8003e96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e9a:	bfac      	ite	ge
 8003e9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e9e:	81a3      	strhlt	r3, [r4, #12]
 8003ea0:	bd10      	pop	{r4, pc}

08003ea2 <__swrite>:
 8003ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea6:	461f      	mov	r7, r3
 8003ea8:	898b      	ldrh	r3, [r1, #12]
 8003eaa:	4605      	mov	r5, r0
 8003eac:	05db      	lsls	r3, r3, #23
 8003eae:	460c      	mov	r4, r1
 8003eb0:	4616      	mov	r6, r2
 8003eb2:	d505      	bpl.n	8003ec0 <__swrite+0x1e>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ebc:	f000 f840 	bl	8003f40 <_lseek_r>
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	4632      	mov	r2, r6
 8003ec4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ec8:	81a3      	strh	r3, [r4, #12]
 8003eca:	4628      	mov	r0, r5
 8003ecc:	463b      	mov	r3, r7
 8003ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed6:	f000 b857 	b.w	8003f88 <_write_r>

08003eda <__sseek>:
 8003eda:	b510      	push	{r4, lr}
 8003edc:	460c      	mov	r4, r1
 8003ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee2:	f000 f82d 	bl	8003f40 <_lseek_r>
 8003ee6:	1c43      	adds	r3, r0, #1
 8003ee8:	89a3      	ldrh	r3, [r4, #12]
 8003eea:	bf15      	itete	ne
 8003eec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003eee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ef2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ef6:	81a3      	strheq	r3, [r4, #12]
 8003ef8:	bf18      	it	ne
 8003efa:	81a3      	strhne	r3, [r4, #12]
 8003efc:	bd10      	pop	{r4, pc}

08003efe <__sclose>:
 8003efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f02:	f000 b80d 	b.w	8003f20 <_close_r>

08003f06 <memset>:
 8003f06:	4603      	mov	r3, r0
 8003f08:	4402      	add	r2, r0
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d100      	bne.n	8003f10 <memset+0xa>
 8003f0e:	4770      	bx	lr
 8003f10:	f803 1b01 	strb.w	r1, [r3], #1
 8003f14:	e7f9      	b.n	8003f0a <memset+0x4>
	...

08003f18 <_localeconv_r>:
 8003f18:	4800      	ldr	r0, [pc, #0]	@ (8003f1c <_localeconv_r+0x4>)
 8003f1a:	4770      	bx	lr
 8003f1c:	20000168 	.word	0x20000168

08003f20 <_close_r>:
 8003f20:	b538      	push	{r3, r4, r5, lr}
 8003f22:	2300      	movs	r3, #0
 8003f24:	4d05      	ldr	r5, [pc, #20]	@ (8003f3c <_close_r+0x1c>)
 8003f26:	4604      	mov	r4, r0
 8003f28:	4608      	mov	r0, r1
 8003f2a:	602b      	str	r3, [r5, #0]
 8003f2c:	f7fd fb19 	bl	8001562 <_close>
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	d102      	bne.n	8003f3a <_close_r+0x1a>
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	b103      	cbz	r3, 8003f3a <_close_r+0x1a>
 8003f38:	6023      	str	r3, [r4, #0]
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}
 8003f3c:	200007b0 	.word	0x200007b0

08003f40 <_lseek_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	4604      	mov	r4, r0
 8003f44:	4608      	mov	r0, r1
 8003f46:	4611      	mov	r1, r2
 8003f48:	2200      	movs	r2, #0
 8003f4a:	4d05      	ldr	r5, [pc, #20]	@ (8003f60 <_lseek_r+0x20>)
 8003f4c:	602a      	str	r2, [r5, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f7fd fb2b 	bl	80015aa <_lseek>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d102      	bne.n	8003f5e <_lseek_r+0x1e>
 8003f58:	682b      	ldr	r3, [r5, #0]
 8003f5a:	b103      	cbz	r3, 8003f5e <_lseek_r+0x1e>
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	200007b0 	.word	0x200007b0

08003f64 <_read_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	4604      	mov	r4, r0
 8003f68:	4608      	mov	r0, r1
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	4d05      	ldr	r5, [pc, #20]	@ (8003f84 <_read_r+0x20>)
 8003f70:	602a      	str	r2, [r5, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f7fd fabc 	bl	80014f0 <_read>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d102      	bne.n	8003f82 <_read_r+0x1e>
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	b103      	cbz	r3, 8003f82 <_read_r+0x1e>
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	bd38      	pop	{r3, r4, r5, pc}
 8003f84:	200007b0 	.word	0x200007b0

08003f88 <_write_r>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	4611      	mov	r1, r2
 8003f90:	2200      	movs	r2, #0
 8003f92:	4d05      	ldr	r5, [pc, #20]	@ (8003fa8 <_write_r+0x20>)
 8003f94:	602a      	str	r2, [r5, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	f7fd fac7 	bl	800152a <_write>
 8003f9c:	1c43      	adds	r3, r0, #1
 8003f9e:	d102      	bne.n	8003fa6 <_write_r+0x1e>
 8003fa0:	682b      	ldr	r3, [r5, #0]
 8003fa2:	b103      	cbz	r3, 8003fa6 <_write_r+0x1e>
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
 8003fa8:	200007b0 	.word	0x200007b0

08003fac <__errno>:
 8003fac:	4b01      	ldr	r3, [pc, #4]	@ (8003fb4 <__errno+0x8>)
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20000028 	.word	0x20000028

08003fb8 <__libc_init_array>:
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	2600      	movs	r6, #0
 8003fbc:	4d0c      	ldr	r5, [pc, #48]	@ (8003ff0 <__libc_init_array+0x38>)
 8003fbe:	4c0d      	ldr	r4, [pc, #52]	@ (8003ff4 <__libc_init_array+0x3c>)
 8003fc0:	1b64      	subs	r4, r4, r5
 8003fc2:	10a4      	asrs	r4, r4, #2
 8003fc4:	42a6      	cmp	r6, r4
 8003fc6:	d109      	bne.n	8003fdc <__libc_init_array+0x24>
 8003fc8:	f003 fb6c 	bl	80076a4 <_init>
 8003fcc:	2600      	movs	r6, #0
 8003fce:	4d0a      	ldr	r5, [pc, #40]	@ (8003ff8 <__libc_init_array+0x40>)
 8003fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8003ffc <__libc_init_array+0x44>)
 8003fd2:	1b64      	subs	r4, r4, r5
 8003fd4:	10a4      	asrs	r4, r4, #2
 8003fd6:	42a6      	cmp	r6, r4
 8003fd8:	d105      	bne.n	8003fe6 <__libc_init_array+0x2e>
 8003fda:	bd70      	pop	{r4, r5, r6, pc}
 8003fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe0:	4798      	blx	r3
 8003fe2:	3601      	adds	r6, #1
 8003fe4:	e7ee      	b.n	8003fc4 <__libc_init_array+0xc>
 8003fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fea:	4798      	blx	r3
 8003fec:	3601      	adds	r6, #1
 8003fee:	e7f2      	b.n	8003fd6 <__libc_init_array+0x1e>
 8003ff0:	080088a4 	.word	0x080088a4
 8003ff4:	080088a4 	.word	0x080088a4
 8003ff8:	080088a4 	.word	0x080088a4
 8003ffc:	080088a8 	.word	0x080088a8

08004000 <__retarget_lock_init_recursive>:
 8004000:	4770      	bx	lr

08004002 <__retarget_lock_acquire_recursive>:
 8004002:	4770      	bx	lr

08004004 <__retarget_lock_release_recursive>:
 8004004:	4770      	bx	lr

08004006 <memchr>:
 8004006:	4603      	mov	r3, r0
 8004008:	b510      	push	{r4, lr}
 800400a:	b2c9      	uxtb	r1, r1
 800400c:	4402      	add	r2, r0
 800400e:	4293      	cmp	r3, r2
 8004010:	4618      	mov	r0, r3
 8004012:	d101      	bne.n	8004018 <memchr+0x12>
 8004014:	2000      	movs	r0, #0
 8004016:	e003      	b.n	8004020 <memchr+0x1a>
 8004018:	7804      	ldrb	r4, [r0, #0]
 800401a:	3301      	adds	r3, #1
 800401c:	428c      	cmp	r4, r1
 800401e:	d1f6      	bne.n	800400e <memchr+0x8>
 8004020:	bd10      	pop	{r4, pc}
	...

08004024 <nanf>:
 8004024:	4800      	ldr	r0, [pc, #0]	@ (8004028 <nanf+0x4>)
 8004026:	4770      	bx	lr
 8004028:	7fc00000 	.word	0x7fc00000

0800402c <quorem>:
 800402c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004030:	6903      	ldr	r3, [r0, #16]
 8004032:	690c      	ldr	r4, [r1, #16]
 8004034:	4607      	mov	r7, r0
 8004036:	42a3      	cmp	r3, r4
 8004038:	db7e      	blt.n	8004138 <quorem+0x10c>
 800403a:	3c01      	subs	r4, #1
 800403c:	00a3      	lsls	r3, r4, #2
 800403e:	f100 0514 	add.w	r5, r0, #20
 8004042:	f101 0814 	add.w	r8, r1, #20
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004052:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004056:	3301      	adds	r3, #1
 8004058:	429a      	cmp	r2, r3
 800405a:	fbb2 f6f3 	udiv	r6, r2, r3
 800405e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004062:	d32e      	bcc.n	80040c2 <quorem+0x96>
 8004064:	f04f 0a00 	mov.w	sl, #0
 8004068:	46c4      	mov	ip, r8
 800406a:	46ae      	mov	lr, r5
 800406c:	46d3      	mov	fp, sl
 800406e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004072:	b298      	uxth	r0, r3
 8004074:	fb06 a000 	mla	r0, r6, r0, sl
 8004078:	0c1b      	lsrs	r3, r3, #16
 800407a:	0c02      	lsrs	r2, r0, #16
 800407c:	fb06 2303 	mla	r3, r6, r3, r2
 8004080:	f8de 2000 	ldr.w	r2, [lr]
 8004084:	b280      	uxth	r0, r0
 8004086:	b292      	uxth	r2, r2
 8004088:	1a12      	subs	r2, r2, r0
 800408a:	445a      	add	r2, fp
 800408c:	f8de 0000 	ldr.w	r0, [lr]
 8004090:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004094:	b29b      	uxth	r3, r3
 8004096:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800409a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800409e:	b292      	uxth	r2, r2
 80040a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80040a4:	45e1      	cmp	r9, ip
 80040a6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80040aa:	f84e 2b04 	str.w	r2, [lr], #4
 80040ae:	d2de      	bcs.n	800406e <quorem+0x42>
 80040b0:	9b00      	ldr	r3, [sp, #0]
 80040b2:	58eb      	ldr	r3, [r5, r3]
 80040b4:	b92b      	cbnz	r3, 80040c2 <quorem+0x96>
 80040b6:	9b01      	ldr	r3, [sp, #4]
 80040b8:	3b04      	subs	r3, #4
 80040ba:	429d      	cmp	r5, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	d32f      	bcc.n	8004120 <quorem+0xf4>
 80040c0:	613c      	str	r4, [r7, #16]
 80040c2:	4638      	mov	r0, r7
 80040c4:	f001 f9ca 	bl	800545c <__mcmp>
 80040c8:	2800      	cmp	r0, #0
 80040ca:	db25      	blt.n	8004118 <quorem+0xec>
 80040cc:	4629      	mov	r1, r5
 80040ce:	2000      	movs	r0, #0
 80040d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80040d4:	f8d1 c000 	ldr.w	ip, [r1]
 80040d8:	fa1f fe82 	uxth.w	lr, r2
 80040dc:	fa1f f38c 	uxth.w	r3, ip
 80040e0:	eba3 030e 	sub.w	r3, r3, lr
 80040e4:	4403      	add	r3, r0
 80040e6:	0c12      	lsrs	r2, r2, #16
 80040e8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80040ec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040f6:	45c1      	cmp	r9, r8
 80040f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80040fc:	f841 3b04 	str.w	r3, [r1], #4
 8004100:	d2e6      	bcs.n	80040d0 <quorem+0xa4>
 8004102:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004106:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800410a:	b922      	cbnz	r2, 8004116 <quorem+0xea>
 800410c:	3b04      	subs	r3, #4
 800410e:	429d      	cmp	r5, r3
 8004110:	461a      	mov	r2, r3
 8004112:	d30b      	bcc.n	800412c <quorem+0x100>
 8004114:	613c      	str	r4, [r7, #16]
 8004116:	3601      	adds	r6, #1
 8004118:	4630      	mov	r0, r6
 800411a:	b003      	add	sp, #12
 800411c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004120:	6812      	ldr	r2, [r2, #0]
 8004122:	3b04      	subs	r3, #4
 8004124:	2a00      	cmp	r2, #0
 8004126:	d1cb      	bne.n	80040c0 <quorem+0x94>
 8004128:	3c01      	subs	r4, #1
 800412a:	e7c6      	b.n	80040ba <quorem+0x8e>
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	3b04      	subs	r3, #4
 8004130:	2a00      	cmp	r2, #0
 8004132:	d1ef      	bne.n	8004114 <quorem+0xe8>
 8004134:	3c01      	subs	r4, #1
 8004136:	e7ea      	b.n	800410e <quorem+0xe2>
 8004138:	2000      	movs	r0, #0
 800413a:	e7ee      	b.n	800411a <quorem+0xee>
 800413c:	0000      	movs	r0, r0
	...

08004140 <_dtoa_r>:
 8004140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004144:	4614      	mov	r4, r2
 8004146:	461d      	mov	r5, r3
 8004148:	69c7      	ldr	r7, [r0, #28]
 800414a:	b097      	sub	sp, #92	@ 0x5c
 800414c:	4681      	mov	r9, r0
 800414e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004152:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004154:	b97f      	cbnz	r7, 8004176 <_dtoa_r+0x36>
 8004156:	2010      	movs	r0, #16
 8004158:	f000 fe0e 	bl	8004d78 <malloc>
 800415c:	4602      	mov	r2, r0
 800415e:	f8c9 001c 	str.w	r0, [r9, #28]
 8004162:	b920      	cbnz	r0, 800416e <_dtoa_r+0x2e>
 8004164:	21ef      	movs	r1, #239	@ 0xef
 8004166:	4bac      	ldr	r3, [pc, #688]	@ (8004418 <_dtoa_r+0x2d8>)
 8004168:	48ac      	ldr	r0, [pc, #688]	@ (800441c <_dtoa_r+0x2dc>)
 800416a:	f002 fc27 	bl	80069bc <__assert_func>
 800416e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004172:	6007      	str	r7, [r0, #0]
 8004174:	60c7      	str	r7, [r0, #12]
 8004176:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800417a:	6819      	ldr	r1, [r3, #0]
 800417c:	b159      	cbz	r1, 8004196 <_dtoa_r+0x56>
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	2301      	movs	r3, #1
 8004182:	4093      	lsls	r3, r2
 8004184:	604a      	str	r2, [r1, #4]
 8004186:	608b      	str	r3, [r1, #8]
 8004188:	4648      	mov	r0, r9
 800418a:	f000 feeb 	bl	8004f64 <_Bfree>
 800418e:	2200      	movs	r2, #0
 8004190:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	1e2b      	subs	r3, r5, #0
 8004198:	bfaf      	iteee	ge
 800419a:	2300      	movge	r3, #0
 800419c:	2201      	movlt	r2, #1
 800419e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80041a2:	9307      	strlt	r3, [sp, #28]
 80041a4:	bfa8      	it	ge
 80041a6:	6033      	strge	r3, [r6, #0]
 80041a8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80041ac:	4b9c      	ldr	r3, [pc, #624]	@ (8004420 <_dtoa_r+0x2e0>)
 80041ae:	bfb8      	it	lt
 80041b0:	6032      	strlt	r2, [r6, #0]
 80041b2:	ea33 0308 	bics.w	r3, r3, r8
 80041b6:	d112      	bne.n	80041de <_dtoa_r+0x9e>
 80041b8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80041bc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80041c4:	4323      	orrs	r3, r4
 80041c6:	f000 855e 	beq.w	8004c86 <_dtoa_r+0xb46>
 80041ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80041cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004424 <_dtoa_r+0x2e4>
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 8560 	beq.w	8004c96 <_dtoa_r+0xb56>
 80041d6:	f10a 0303 	add.w	r3, sl, #3
 80041da:	f000 bd5a 	b.w	8004c92 <_dtoa_r+0xb52>
 80041de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80041e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80041ea:	2200      	movs	r2, #0
 80041ec:	2300      	movs	r3, #0
 80041ee:	f7fc fbdb 	bl	80009a8 <__aeabi_dcmpeq>
 80041f2:	4607      	mov	r7, r0
 80041f4:	b158      	cbz	r0, 800420e <_dtoa_r+0xce>
 80041f6:	2301      	movs	r3, #1
 80041f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80041fe:	b113      	cbz	r3, 8004206 <_dtoa_r+0xc6>
 8004200:	4b89      	ldr	r3, [pc, #548]	@ (8004428 <_dtoa_r+0x2e8>)
 8004202:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800442c <_dtoa_r+0x2ec>
 800420a:	f000 bd44 	b.w	8004c96 <_dtoa_r+0xb56>
 800420e:	ab14      	add	r3, sp, #80	@ 0x50
 8004210:	9301      	str	r3, [sp, #4]
 8004212:	ab15      	add	r3, sp, #84	@ 0x54
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	4648      	mov	r0, r9
 8004218:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800421c:	f001 fa36 	bl	800568c <__d2b>
 8004220:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004224:	9003      	str	r0, [sp, #12]
 8004226:	2e00      	cmp	r6, #0
 8004228:	d078      	beq.n	800431c <_dtoa_r+0x1dc>
 800422a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800422e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004230:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004238:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800423c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004240:	9712      	str	r7, [sp, #72]	@ 0x48
 8004242:	4619      	mov	r1, r3
 8004244:	2200      	movs	r2, #0
 8004246:	4b7a      	ldr	r3, [pc, #488]	@ (8004430 <_dtoa_r+0x2f0>)
 8004248:	f7fb ff8e 	bl	8000168 <__aeabi_dsub>
 800424c:	a36c      	add	r3, pc, #432	@ (adr r3, 8004400 <_dtoa_r+0x2c0>)
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	f7fc f941 	bl	80004d8 <__aeabi_dmul>
 8004256:	a36c      	add	r3, pc, #432	@ (adr r3, 8004408 <_dtoa_r+0x2c8>)
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	f7fb ff86 	bl	800016c <__adddf3>
 8004260:	4604      	mov	r4, r0
 8004262:	4630      	mov	r0, r6
 8004264:	460d      	mov	r5, r1
 8004266:	f7fc f8cd 	bl	8000404 <__aeabi_i2d>
 800426a:	a369      	add	r3, pc, #420	@ (adr r3, 8004410 <_dtoa_r+0x2d0>)
 800426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004270:	f7fc f932 	bl	80004d8 <__aeabi_dmul>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4620      	mov	r0, r4
 800427a:	4629      	mov	r1, r5
 800427c:	f7fb ff76 	bl	800016c <__adddf3>
 8004280:	4604      	mov	r4, r0
 8004282:	460d      	mov	r5, r1
 8004284:	f7fc fbd8 	bl	8000a38 <__aeabi_d2iz>
 8004288:	2200      	movs	r2, #0
 800428a:	4607      	mov	r7, r0
 800428c:	2300      	movs	r3, #0
 800428e:	4620      	mov	r0, r4
 8004290:	4629      	mov	r1, r5
 8004292:	f7fc fb93 	bl	80009bc <__aeabi_dcmplt>
 8004296:	b140      	cbz	r0, 80042aa <_dtoa_r+0x16a>
 8004298:	4638      	mov	r0, r7
 800429a:	f7fc f8b3 	bl	8000404 <__aeabi_i2d>
 800429e:	4622      	mov	r2, r4
 80042a0:	462b      	mov	r3, r5
 80042a2:	f7fc fb81 	bl	80009a8 <__aeabi_dcmpeq>
 80042a6:	b900      	cbnz	r0, 80042aa <_dtoa_r+0x16a>
 80042a8:	3f01      	subs	r7, #1
 80042aa:	2f16      	cmp	r7, #22
 80042ac:	d854      	bhi.n	8004358 <_dtoa_r+0x218>
 80042ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80042b2:	4b60      	ldr	r3, [pc, #384]	@ (8004434 <_dtoa_r+0x2f4>)
 80042b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f7fc fb7e 	bl	80009bc <__aeabi_dcmplt>
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d04b      	beq.n	800435c <_dtoa_r+0x21c>
 80042c4:	2300      	movs	r3, #0
 80042c6:	3f01      	subs	r7, #1
 80042c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80042ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80042cc:	1b9b      	subs	r3, r3, r6
 80042ce:	1e5a      	subs	r2, r3, #1
 80042d0:	bf49      	itett	mi
 80042d2:	f1c3 0301 	rsbmi	r3, r3, #1
 80042d6:	2300      	movpl	r3, #0
 80042d8:	9304      	strmi	r3, [sp, #16]
 80042da:	2300      	movmi	r3, #0
 80042dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80042de:	bf54      	ite	pl
 80042e0:	9304      	strpl	r3, [sp, #16]
 80042e2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80042e4:	2f00      	cmp	r7, #0
 80042e6:	db3b      	blt.n	8004360 <_dtoa_r+0x220>
 80042e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042ea:	970e      	str	r7, [sp, #56]	@ 0x38
 80042ec:	443b      	add	r3, r7
 80042ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80042f0:	2300      	movs	r3, #0
 80042f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80042f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80042f6:	2b09      	cmp	r3, #9
 80042f8:	d865      	bhi.n	80043c6 <_dtoa_r+0x286>
 80042fa:	2b05      	cmp	r3, #5
 80042fc:	bfc4      	itt	gt
 80042fe:	3b04      	subgt	r3, #4
 8004300:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004302:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004304:	bfc8      	it	gt
 8004306:	2400      	movgt	r4, #0
 8004308:	f1a3 0302 	sub.w	r3, r3, #2
 800430c:	bfd8      	it	le
 800430e:	2401      	movle	r4, #1
 8004310:	2b03      	cmp	r3, #3
 8004312:	d864      	bhi.n	80043de <_dtoa_r+0x29e>
 8004314:	e8df f003 	tbb	[pc, r3]
 8004318:	2c385553 	.word	0x2c385553
 800431c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004320:	441e      	add	r6, r3
 8004322:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004326:	2b20      	cmp	r3, #32
 8004328:	bfc1      	itttt	gt
 800432a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800432e:	fa08 f803 	lslgt.w	r8, r8, r3
 8004332:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004336:	fa24 f303 	lsrgt.w	r3, r4, r3
 800433a:	bfd6      	itet	le
 800433c:	f1c3 0320 	rsble	r3, r3, #32
 8004340:	ea48 0003 	orrgt.w	r0, r8, r3
 8004344:	fa04 f003 	lslle.w	r0, r4, r3
 8004348:	f7fc f84c 	bl	80003e4 <__aeabi_ui2d>
 800434c:	2201      	movs	r2, #1
 800434e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004352:	3e01      	subs	r6, #1
 8004354:	9212      	str	r2, [sp, #72]	@ 0x48
 8004356:	e774      	b.n	8004242 <_dtoa_r+0x102>
 8004358:	2301      	movs	r3, #1
 800435a:	e7b5      	b.n	80042c8 <_dtoa_r+0x188>
 800435c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800435e:	e7b4      	b.n	80042ca <_dtoa_r+0x18a>
 8004360:	9b04      	ldr	r3, [sp, #16]
 8004362:	1bdb      	subs	r3, r3, r7
 8004364:	9304      	str	r3, [sp, #16]
 8004366:	427b      	negs	r3, r7
 8004368:	930a      	str	r3, [sp, #40]	@ 0x28
 800436a:	2300      	movs	r3, #0
 800436c:	930e      	str	r3, [sp, #56]	@ 0x38
 800436e:	e7c1      	b.n	80042f4 <_dtoa_r+0x1b4>
 8004370:	2301      	movs	r3, #1
 8004372:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004374:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004376:	eb07 0b03 	add.w	fp, r7, r3
 800437a:	f10b 0301 	add.w	r3, fp, #1
 800437e:	2b01      	cmp	r3, #1
 8004380:	9308      	str	r3, [sp, #32]
 8004382:	bfb8      	it	lt
 8004384:	2301      	movlt	r3, #1
 8004386:	e006      	b.n	8004396 <_dtoa_r+0x256>
 8004388:	2301      	movs	r3, #1
 800438a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800438c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800438e:	2b00      	cmp	r3, #0
 8004390:	dd28      	ble.n	80043e4 <_dtoa_r+0x2a4>
 8004392:	469b      	mov	fp, r3
 8004394:	9308      	str	r3, [sp, #32]
 8004396:	2100      	movs	r1, #0
 8004398:	2204      	movs	r2, #4
 800439a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800439e:	f102 0514 	add.w	r5, r2, #20
 80043a2:	429d      	cmp	r5, r3
 80043a4:	d926      	bls.n	80043f4 <_dtoa_r+0x2b4>
 80043a6:	6041      	str	r1, [r0, #4]
 80043a8:	4648      	mov	r0, r9
 80043aa:	f000 fd9b 	bl	8004ee4 <_Balloc>
 80043ae:	4682      	mov	sl, r0
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d143      	bne.n	800443c <_dtoa_r+0x2fc>
 80043b4:	4602      	mov	r2, r0
 80043b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80043ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004438 <_dtoa_r+0x2f8>)
 80043bc:	e6d4      	b.n	8004168 <_dtoa_r+0x28>
 80043be:	2300      	movs	r3, #0
 80043c0:	e7e3      	b.n	800438a <_dtoa_r+0x24a>
 80043c2:	2300      	movs	r3, #0
 80043c4:	e7d5      	b.n	8004372 <_dtoa_r+0x232>
 80043c6:	2401      	movs	r4, #1
 80043c8:	2300      	movs	r3, #0
 80043ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80043cc:	9320      	str	r3, [sp, #128]	@ 0x80
 80043ce:	f04f 3bff 	mov.w	fp, #4294967295
 80043d2:	2200      	movs	r2, #0
 80043d4:	2312      	movs	r3, #18
 80043d6:	f8cd b020 	str.w	fp, [sp, #32]
 80043da:	9221      	str	r2, [sp, #132]	@ 0x84
 80043dc:	e7db      	b.n	8004396 <_dtoa_r+0x256>
 80043de:	2301      	movs	r3, #1
 80043e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043e2:	e7f4      	b.n	80043ce <_dtoa_r+0x28e>
 80043e4:	f04f 0b01 	mov.w	fp, #1
 80043e8:	465b      	mov	r3, fp
 80043ea:	f8cd b020 	str.w	fp, [sp, #32]
 80043ee:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80043f2:	e7d0      	b.n	8004396 <_dtoa_r+0x256>
 80043f4:	3101      	adds	r1, #1
 80043f6:	0052      	lsls	r2, r2, #1
 80043f8:	e7d1      	b.n	800439e <_dtoa_r+0x25e>
 80043fa:	bf00      	nop
 80043fc:	f3af 8000 	nop.w
 8004400:	636f4361 	.word	0x636f4361
 8004404:	3fd287a7 	.word	0x3fd287a7
 8004408:	8b60c8b3 	.word	0x8b60c8b3
 800440c:	3fc68a28 	.word	0x3fc68a28
 8004410:	509f79fb 	.word	0x509f79fb
 8004414:	3fd34413 	.word	0x3fd34413
 8004418:	080084b8 	.word	0x080084b8
 800441c:	080084cf 	.word	0x080084cf
 8004420:	7ff00000 	.word	0x7ff00000
 8004424:	080084b4 	.word	0x080084b4
 8004428:	08008483 	.word	0x08008483
 800442c:	08008482 	.word	0x08008482
 8004430:	3ff80000 	.word	0x3ff80000
 8004434:	08008680 	.word	0x08008680
 8004438:	08008527 	.word	0x08008527
 800443c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004440:	6018      	str	r0, [r3, #0]
 8004442:	9b08      	ldr	r3, [sp, #32]
 8004444:	2b0e      	cmp	r3, #14
 8004446:	f200 80a1 	bhi.w	800458c <_dtoa_r+0x44c>
 800444a:	2c00      	cmp	r4, #0
 800444c:	f000 809e 	beq.w	800458c <_dtoa_r+0x44c>
 8004450:	2f00      	cmp	r7, #0
 8004452:	dd33      	ble.n	80044bc <_dtoa_r+0x37c>
 8004454:	4b9c      	ldr	r3, [pc, #624]	@ (80046c8 <_dtoa_r+0x588>)
 8004456:	f007 020f 	and.w	r2, r7, #15
 800445a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800445e:	05f8      	lsls	r0, r7, #23
 8004460:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004464:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004468:	ea4f 1427 	mov.w	r4, r7, asr #4
 800446c:	d516      	bpl.n	800449c <_dtoa_r+0x35c>
 800446e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004472:	4b96      	ldr	r3, [pc, #600]	@ (80046cc <_dtoa_r+0x58c>)
 8004474:	2603      	movs	r6, #3
 8004476:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800447a:	f7fc f957 	bl	800072c <__aeabi_ddiv>
 800447e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004482:	f004 040f 	and.w	r4, r4, #15
 8004486:	4d91      	ldr	r5, [pc, #580]	@ (80046cc <_dtoa_r+0x58c>)
 8004488:	b954      	cbnz	r4, 80044a0 <_dtoa_r+0x360>
 800448a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800448e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004492:	f7fc f94b 	bl	800072c <__aeabi_ddiv>
 8004496:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800449a:	e028      	b.n	80044ee <_dtoa_r+0x3ae>
 800449c:	2602      	movs	r6, #2
 800449e:	e7f2      	b.n	8004486 <_dtoa_r+0x346>
 80044a0:	07e1      	lsls	r1, r4, #31
 80044a2:	d508      	bpl.n	80044b6 <_dtoa_r+0x376>
 80044a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80044a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80044ac:	f7fc f814 	bl	80004d8 <__aeabi_dmul>
 80044b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80044b4:	3601      	adds	r6, #1
 80044b6:	1064      	asrs	r4, r4, #1
 80044b8:	3508      	adds	r5, #8
 80044ba:	e7e5      	b.n	8004488 <_dtoa_r+0x348>
 80044bc:	f000 80af 	beq.w	800461e <_dtoa_r+0x4de>
 80044c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80044c4:	427c      	negs	r4, r7
 80044c6:	4b80      	ldr	r3, [pc, #512]	@ (80046c8 <_dtoa_r+0x588>)
 80044c8:	f004 020f 	and.w	r2, r4, #15
 80044cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	f7fc f800 	bl	80004d8 <__aeabi_dmul>
 80044d8:	2602      	movs	r6, #2
 80044da:	2300      	movs	r3, #0
 80044dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80044e0:	4d7a      	ldr	r5, [pc, #488]	@ (80046cc <_dtoa_r+0x58c>)
 80044e2:	1124      	asrs	r4, r4, #4
 80044e4:	2c00      	cmp	r4, #0
 80044e6:	f040 808f 	bne.w	8004608 <_dtoa_r+0x4c8>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1d3      	bne.n	8004496 <_dtoa_r+0x356>
 80044ee:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80044f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8094 	beq.w	8004622 <_dtoa_r+0x4e2>
 80044fa:	2200      	movs	r2, #0
 80044fc:	4620      	mov	r0, r4
 80044fe:	4629      	mov	r1, r5
 8004500:	4b73      	ldr	r3, [pc, #460]	@ (80046d0 <_dtoa_r+0x590>)
 8004502:	f7fc fa5b 	bl	80009bc <__aeabi_dcmplt>
 8004506:	2800      	cmp	r0, #0
 8004508:	f000 808b 	beq.w	8004622 <_dtoa_r+0x4e2>
 800450c:	9b08      	ldr	r3, [sp, #32]
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 8087 	beq.w	8004622 <_dtoa_r+0x4e2>
 8004514:	f1bb 0f00 	cmp.w	fp, #0
 8004518:	dd34      	ble.n	8004584 <_dtoa_r+0x444>
 800451a:	4620      	mov	r0, r4
 800451c:	2200      	movs	r2, #0
 800451e:	4629      	mov	r1, r5
 8004520:	4b6c      	ldr	r3, [pc, #432]	@ (80046d4 <_dtoa_r+0x594>)
 8004522:	f7fb ffd9 	bl	80004d8 <__aeabi_dmul>
 8004526:	465c      	mov	r4, fp
 8004528:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800452c:	f107 38ff 	add.w	r8, r7, #4294967295
 8004530:	3601      	adds	r6, #1
 8004532:	4630      	mov	r0, r6
 8004534:	f7fb ff66 	bl	8000404 <__aeabi_i2d>
 8004538:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800453c:	f7fb ffcc 	bl	80004d8 <__aeabi_dmul>
 8004540:	2200      	movs	r2, #0
 8004542:	4b65      	ldr	r3, [pc, #404]	@ (80046d8 <_dtoa_r+0x598>)
 8004544:	f7fb fe12 	bl	800016c <__adddf3>
 8004548:	4605      	mov	r5, r0
 800454a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800454e:	2c00      	cmp	r4, #0
 8004550:	d16a      	bne.n	8004628 <_dtoa_r+0x4e8>
 8004552:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004556:	2200      	movs	r2, #0
 8004558:	4b60      	ldr	r3, [pc, #384]	@ (80046dc <_dtoa_r+0x59c>)
 800455a:	f7fb fe05 	bl	8000168 <__aeabi_dsub>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004566:	462a      	mov	r2, r5
 8004568:	4633      	mov	r3, r6
 800456a:	f7fc fa45 	bl	80009f8 <__aeabi_dcmpgt>
 800456e:	2800      	cmp	r0, #0
 8004570:	f040 8298 	bne.w	8004aa4 <_dtoa_r+0x964>
 8004574:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004578:	462a      	mov	r2, r5
 800457a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800457e:	f7fc fa1d 	bl	80009bc <__aeabi_dcmplt>
 8004582:	bb38      	cbnz	r0, 80045d4 <_dtoa_r+0x494>
 8004584:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004588:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800458c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800458e:	2b00      	cmp	r3, #0
 8004590:	f2c0 8157 	blt.w	8004842 <_dtoa_r+0x702>
 8004594:	2f0e      	cmp	r7, #14
 8004596:	f300 8154 	bgt.w	8004842 <_dtoa_r+0x702>
 800459a:	4b4b      	ldr	r3, [pc, #300]	@ (80046c8 <_dtoa_r+0x588>)
 800459c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80045a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045a4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80045a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f280 80e5 	bge.w	800477a <_dtoa_r+0x63a>
 80045b0:	9b08      	ldr	r3, [sp, #32]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f300 80e1 	bgt.w	800477a <_dtoa_r+0x63a>
 80045b8:	d10c      	bne.n	80045d4 <_dtoa_r+0x494>
 80045ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045be:	2200      	movs	r2, #0
 80045c0:	4b46      	ldr	r3, [pc, #280]	@ (80046dc <_dtoa_r+0x59c>)
 80045c2:	f7fb ff89 	bl	80004d8 <__aeabi_dmul>
 80045c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80045ca:	f7fc fa0b 	bl	80009e4 <__aeabi_dcmpge>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	f000 8266 	beq.w	8004aa0 <_dtoa_r+0x960>
 80045d4:	2400      	movs	r4, #0
 80045d6:	4625      	mov	r5, r4
 80045d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80045da:	4656      	mov	r6, sl
 80045dc:	ea6f 0803 	mvn.w	r8, r3
 80045e0:	2700      	movs	r7, #0
 80045e2:	4621      	mov	r1, r4
 80045e4:	4648      	mov	r0, r9
 80045e6:	f000 fcbd 	bl	8004f64 <_Bfree>
 80045ea:	2d00      	cmp	r5, #0
 80045ec:	f000 80bd 	beq.w	800476a <_dtoa_r+0x62a>
 80045f0:	b12f      	cbz	r7, 80045fe <_dtoa_r+0x4be>
 80045f2:	42af      	cmp	r7, r5
 80045f4:	d003      	beq.n	80045fe <_dtoa_r+0x4be>
 80045f6:	4639      	mov	r1, r7
 80045f8:	4648      	mov	r0, r9
 80045fa:	f000 fcb3 	bl	8004f64 <_Bfree>
 80045fe:	4629      	mov	r1, r5
 8004600:	4648      	mov	r0, r9
 8004602:	f000 fcaf 	bl	8004f64 <_Bfree>
 8004606:	e0b0      	b.n	800476a <_dtoa_r+0x62a>
 8004608:	07e2      	lsls	r2, r4, #31
 800460a:	d505      	bpl.n	8004618 <_dtoa_r+0x4d8>
 800460c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004610:	f7fb ff62 	bl	80004d8 <__aeabi_dmul>
 8004614:	2301      	movs	r3, #1
 8004616:	3601      	adds	r6, #1
 8004618:	1064      	asrs	r4, r4, #1
 800461a:	3508      	adds	r5, #8
 800461c:	e762      	b.n	80044e4 <_dtoa_r+0x3a4>
 800461e:	2602      	movs	r6, #2
 8004620:	e765      	b.n	80044ee <_dtoa_r+0x3ae>
 8004622:	46b8      	mov	r8, r7
 8004624:	9c08      	ldr	r4, [sp, #32]
 8004626:	e784      	b.n	8004532 <_dtoa_r+0x3f2>
 8004628:	4b27      	ldr	r3, [pc, #156]	@ (80046c8 <_dtoa_r+0x588>)
 800462a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800462c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004630:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004634:	4454      	add	r4, sl
 8004636:	2900      	cmp	r1, #0
 8004638:	d054      	beq.n	80046e4 <_dtoa_r+0x5a4>
 800463a:	2000      	movs	r0, #0
 800463c:	4928      	ldr	r1, [pc, #160]	@ (80046e0 <_dtoa_r+0x5a0>)
 800463e:	f7fc f875 	bl	800072c <__aeabi_ddiv>
 8004642:	4633      	mov	r3, r6
 8004644:	462a      	mov	r2, r5
 8004646:	f7fb fd8f 	bl	8000168 <__aeabi_dsub>
 800464a:	4656      	mov	r6, sl
 800464c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004650:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004654:	f7fc f9f0 	bl	8000a38 <__aeabi_d2iz>
 8004658:	4605      	mov	r5, r0
 800465a:	f7fb fed3 	bl	8000404 <__aeabi_i2d>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004666:	f7fb fd7f 	bl	8000168 <__aeabi_dsub>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	3530      	adds	r5, #48	@ 0x30
 8004670:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004674:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004678:	f806 5b01 	strb.w	r5, [r6], #1
 800467c:	f7fc f99e 	bl	80009bc <__aeabi_dcmplt>
 8004680:	2800      	cmp	r0, #0
 8004682:	d172      	bne.n	800476a <_dtoa_r+0x62a>
 8004684:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004688:	2000      	movs	r0, #0
 800468a:	4911      	ldr	r1, [pc, #68]	@ (80046d0 <_dtoa_r+0x590>)
 800468c:	f7fb fd6c 	bl	8000168 <__aeabi_dsub>
 8004690:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004694:	f7fc f992 	bl	80009bc <__aeabi_dcmplt>
 8004698:	2800      	cmp	r0, #0
 800469a:	f040 80b4 	bne.w	8004806 <_dtoa_r+0x6c6>
 800469e:	42a6      	cmp	r6, r4
 80046a0:	f43f af70 	beq.w	8004584 <_dtoa_r+0x444>
 80046a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80046a8:	2200      	movs	r2, #0
 80046aa:	4b0a      	ldr	r3, [pc, #40]	@ (80046d4 <_dtoa_r+0x594>)
 80046ac:	f7fb ff14 	bl	80004d8 <__aeabi_dmul>
 80046b0:	2200      	movs	r2, #0
 80046b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80046b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046ba:	4b06      	ldr	r3, [pc, #24]	@ (80046d4 <_dtoa_r+0x594>)
 80046bc:	f7fb ff0c 	bl	80004d8 <__aeabi_dmul>
 80046c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80046c4:	e7c4      	b.n	8004650 <_dtoa_r+0x510>
 80046c6:	bf00      	nop
 80046c8:	08008680 	.word	0x08008680
 80046cc:	08008658 	.word	0x08008658
 80046d0:	3ff00000 	.word	0x3ff00000
 80046d4:	40240000 	.word	0x40240000
 80046d8:	401c0000 	.word	0x401c0000
 80046dc:	40140000 	.word	0x40140000
 80046e0:	3fe00000 	.word	0x3fe00000
 80046e4:	4631      	mov	r1, r6
 80046e6:	4628      	mov	r0, r5
 80046e8:	f7fb fef6 	bl	80004d8 <__aeabi_dmul>
 80046ec:	4656      	mov	r6, sl
 80046ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80046f2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80046f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046f8:	f7fc f99e 	bl	8000a38 <__aeabi_d2iz>
 80046fc:	4605      	mov	r5, r0
 80046fe:	f7fb fe81 	bl	8000404 <__aeabi_i2d>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800470a:	f7fb fd2d 	bl	8000168 <__aeabi_dsub>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	3530      	adds	r5, #48	@ 0x30
 8004714:	f806 5b01 	strb.w	r5, [r6], #1
 8004718:	42a6      	cmp	r6, r4
 800471a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	d124      	bne.n	800476e <_dtoa_r+0x62e>
 8004724:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004728:	4bae      	ldr	r3, [pc, #696]	@ (80049e4 <_dtoa_r+0x8a4>)
 800472a:	f7fb fd1f 	bl	800016c <__adddf3>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004736:	f7fc f95f 	bl	80009f8 <__aeabi_dcmpgt>
 800473a:	2800      	cmp	r0, #0
 800473c:	d163      	bne.n	8004806 <_dtoa_r+0x6c6>
 800473e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004742:	2000      	movs	r0, #0
 8004744:	49a7      	ldr	r1, [pc, #668]	@ (80049e4 <_dtoa_r+0x8a4>)
 8004746:	f7fb fd0f 	bl	8000168 <__aeabi_dsub>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004752:	f7fc f933 	bl	80009bc <__aeabi_dcmplt>
 8004756:	2800      	cmp	r0, #0
 8004758:	f43f af14 	beq.w	8004584 <_dtoa_r+0x444>
 800475c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800475e:	1e73      	subs	r3, r6, #1
 8004760:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004762:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004766:	2b30      	cmp	r3, #48	@ 0x30
 8004768:	d0f8      	beq.n	800475c <_dtoa_r+0x61c>
 800476a:	4647      	mov	r7, r8
 800476c:	e03b      	b.n	80047e6 <_dtoa_r+0x6a6>
 800476e:	4b9e      	ldr	r3, [pc, #632]	@ (80049e8 <_dtoa_r+0x8a8>)
 8004770:	f7fb feb2 	bl	80004d8 <__aeabi_dmul>
 8004774:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004778:	e7bc      	b.n	80046f4 <_dtoa_r+0x5b4>
 800477a:	4656      	mov	r6, sl
 800477c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004784:	4620      	mov	r0, r4
 8004786:	4629      	mov	r1, r5
 8004788:	f7fb ffd0 	bl	800072c <__aeabi_ddiv>
 800478c:	f7fc f954 	bl	8000a38 <__aeabi_d2iz>
 8004790:	4680      	mov	r8, r0
 8004792:	f7fb fe37 	bl	8000404 <__aeabi_i2d>
 8004796:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800479a:	f7fb fe9d 	bl	80004d8 <__aeabi_dmul>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4620      	mov	r0, r4
 80047a4:	4629      	mov	r1, r5
 80047a6:	f7fb fcdf 	bl	8000168 <__aeabi_dsub>
 80047aa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80047ae:	9d08      	ldr	r5, [sp, #32]
 80047b0:	f806 4b01 	strb.w	r4, [r6], #1
 80047b4:	eba6 040a 	sub.w	r4, r6, sl
 80047b8:	42a5      	cmp	r5, r4
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	d133      	bne.n	8004828 <_dtoa_r+0x6e8>
 80047c0:	f7fb fcd4 	bl	800016c <__adddf3>
 80047c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047c8:	4604      	mov	r4, r0
 80047ca:	460d      	mov	r5, r1
 80047cc:	f7fc f914 	bl	80009f8 <__aeabi_dcmpgt>
 80047d0:	b9c0      	cbnz	r0, 8004804 <_dtoa_r+0x6c4>
 80047d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047d6:	4620      	mov	r0, r4
 80047d8:	4629      	mov	r1, r5
 80047da:	f7fc f8e5 	bl	80009a8 <__aeabi_dcmpeq>
 80047de:	b110      	cbz	r0, 80047e6 <_dtoa_r+0x6a6>
 80047e0:	f018 0f01 	tst.w	r8, #1
 80047e4:	d10e      	bne.n	8004804 <_dtoa_r+0x6c4>
 80047e6:	4648      	mov	r0, r9
 80047e8:	9903      	ldr	r1, [sp, #12]
 80047ea:	f000 fbbb 	bl	8004f64 <_Bfree>
 80047ee:	2300      	movs	r3, #0
 80047f0:	7033      	strb	r3, [r6, #0]
 80047f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80047f4:	3701      	adds	r7, #1
 80047f6:	601f      	str	r7, [r3, #0]
 80047f8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 824b 	beq.w	8004c96 <_dtoa_r+0xb56>
 8004800:	601e      	str	r6, [r3, #0]
 8004802:	e248      	b.n	8004c96 <_dtoa_r+0xb56>
 8004804:	46b8      	mov	r8, r7
 8004806:	4633      	mov	r3, r6
 8004808:	461e      	mov	r6, r3
 800480a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800480e:	2a39      	cmp	r2, #57	@ 0x39
 8004810:	d106      	bne.n	8004820 <_dtoa_r+0x6e0>
 8004812:	459a      	cmp	sl, r3
 8004814:	d1f8      	bne.n	8004808 <_dtoa_r+0x6c8>
 8004816:	2230      	movs	r2, #48	@ 0x30
 8004818:	f108 0801 	add.w	r8, r8, #1
 800481c:	f88a 2000 	strb.w	r2, [sl]
 8004820:	781a      	ldrb	r2, [r3, #0]
 8004822:	3201      	adds	r2, #1
 8004824:	701a      	strb	r2, [r3, #0]
 8004826:	e7a0      	b.n	800476a <_dtoa_r+0x62a>
 8004828:	2200      	movs	r2, #0
 800482a:	4b6f      	ldr	r3, [pc, #444]	@ (80049e8 <_dtoa_r+0x8a8>)
 800482c:	f7fb fe54 	bl	80004d8 <__aeabi_dmul>
 8004830:	2200      	movs	r2, #0
 8004832:	2300      	movs	r3, #0
 8004834:	4604      	mov	r4, r0
 8004836:	460d      	mov	r5, r1
 8004838:	f7fc f8b6 	bl	80009a8 <__aeabi_dcmpeq>
 800483c:	2800      	cmp	r0, #0
 800483e:	d09f      	beq.n	8004780 <_dtoa_r+0x640>
 8004840:	e7d1      	b.n	80047e6 <_dtoa_r+0x6a6>
 8004842:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004844:	2a00      	cmp	r2, #0
 8004846:	f000 80ea 	beq.w	8004a1e <_dtoa_r+0x8de>
 800484a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800484c:	2a01      	cmp	r2, #1
 800484e:	f300 80cd 	bgt.w	80049ec <_dtoa_r+0x8ac>
 8004852:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004854:	2a00      	cmp	r2, #0
 8004856:	f000 80c1 	beq.w	80049dc <_dtoa_r+0x89c>
 800485a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800485e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004860:	9e04      	ldr	r6, [sp, #16]
 8004862:	9a04      	ldr	r2, [sp, #16]
 8004864:	2101      	movs	r1, #1
 8004866:	441a      	add	r2, r3
 8004868:	9204      	str	r2, [sp, #16]
 800486a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800486c:	4648      	mov	r0, r9
 800486e:	441a      	add	r2, r3
 8004870:	9209      	str	r2, [sp, #36]	@ 0x24
 8004872:	f000 fc75 	bl	8005160 <__i2b>
 8004876:	4605      	mov	r5, r0
 8004878:	b166      	cbz	r6, 8004894 <_dtoa_r+0x754>
 800487a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800487c:	2b00      	cmp	r3, #0
 800487e:	dd09      	ble.n	8004894 <_dtoa_r+0x754>
 8004880:	42b3      	cmp	r3, r6
 8004882:	bfa8      	it	ge
 8004884:	4633      	movge	r3, r6
 8004886:	9a04      	ldr	r2, [sp, #16]
 8004888:	1af6      	subs	r6, r6, r3
 800488a:	1ad2      	subs	r2, r2, r3
 800488c:	9204      	str	r2, [sp, #16]
 800488e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	9309      	str	r3, [sp, #36]	@ 0x24
 8004894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004896:	b30b      	cbz	r3, 80048dc <_dtoa_r+0x79c>
 8004898:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 80c6 	beq.w	8004a2c <_dtoa_r+0x8ec>
 80048a0:	2c00      	cmp	r4, #0
 80048a2:	f000 80c0 	beq.w	8004a26 <_dtoa_r+0x8e6>
 80048a6:	4629      	mov	r1, r5
 80048a8:	4622      	mov	r2, r4
 80048aa:	4648      	mov	r0, r9
 80048ac:	f000 fd10 	bl	80052d0 <__pow5mult>
 80048b0:	9a03      	ldr	r2, [sp, #12]
 80048b2:	4601      	mov	r1, r0
 80048b4:	4605      	mov	r5, r0
 80048b6:	4648      	mov	r0, r9
 80048b8:	f000 fc68 	bl	800518c <__multiply>
 80048bc:	9903      	ldr	r1, [sp, #12]
 80048be:	4680      	mov	r8, r0
 80048c0:	4648      	mov	r0, r9
 80048c2:	f000 fb4f 	bl	8004f64 <_Bfree>
 80048c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048c8:	1b1b      	subs	r3, r3, r4
 80048ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80048cc:	f000 80b1 	beq.w	8004a32 <_dtoa_r+0x8f2>
 80048d0:	4641      	mov	r1, r8
 80048d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80048d4:	4648      	mov	r0, r9
 80048d6:	f000 fcfb 	bl	80052d0 <__pow5mult>
 80048da:	9003      	str	r0, [sp, #12]
 80048dc:	2101      	movs	r1, #1
 80048de:	4648      	mov	r0, r9
 80048e0:	f000 fc3e 	bl	8005160 <__i2b>
 80048e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80048e6:	4604      	mov	r4, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 81d8 	beq.w	8004c9e <_dtoa_r+0xb5e>
 80048ee:	461a      	mov	r2, r3
 80048f0:	4601      	mov	r1, r0
 80048f2:	4648      	mov	r0, r9
 80048f4:	f000 fcec 	bl	80052d0 <__pow5mult>
 80048f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80048fa:	4604      	mov	r4, r0
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	f300 809f 	bgt.w	8004a40 <_dtoa_r+0x900>
 8004902:	9b06      	ldr	r3, [sp, #24]
 8004904:	2b00      	cmp	r3, #0
 8004906:	f040 8097 	bne.w	8004a38 <_dtoa_r+0x8f8>
 800490a:	9b07      	ldr	r3, [sp, #28]
 800490c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004910:	2b00      	cmp	r3, #0
 8004912:	f040 8093 	bne.w	8004a3c <_dtoa_r+0x8fc>
 8004916:	9b07      	ldr	r3, [sp, #28]
 8004918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800491c:	0d1b      	lsrs	r3, r3, #20
 800491e:	051b      	lsls	r3, r3, #20
 8004920:	b133      	cbz	r3, 8004930 <_dtoa_r+0x7f0>
 8004922:	9b04      	ldr	r3, [sp, #16]
 8004924:	3301      	adds	r3, #1
 8004926:	9304      	str	r3, [sp, #16]
 8004928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800492a:	3301      	adds	r3, #1
 800492c:	9309      	str	r3, [sp, #36]	@ 0x24
 800492e:	2301      	movs	r3, #1
 8004930:	930a      	str	r3, [sp, #40]	@ 0x28
 8004932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 81b8 	beq.w	8004caa <_dtoa_r+0xb6a>
 800493a:	6923      	ldr	r3, [r4, #16]
 800493c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004940:	6918      	ldr	r0, [r3, #16]
 8004942:	f000 fbc1 	bl	80050c8 <__hi0bits>
 8004946:	f1c0 0020 	rsb	r0, r0, #32
 800494a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800494c:	4418      	add	r0, r3
 800494e:	f010 001f 	ands.w	r0, r0, #31
 8004952:	f000 8082 	beq.w	8004a5a <_dtoa_r+0x91a>
 8004956:	f1c0 0320 	rsb	r3, r0, #32
 800495a:	2b04      	cmp	r3, #4
 800495c:	dd73      	ble.n	8004a46 <_dtoa_r+0x906>
 800495e:	9b04      	ldr	r3, [sp, #16]
 8004960:	f1c0 001c 	rsb	r0, r0, #28
 8004964:	4403      	add	r3, r0
 8004966:	9304      	str	r3, [sp, #16]
 8004968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800496a:	4406      	add	r6, r0
 800496c:	4403      	add	r3, r0
 800496e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004970:	9b04      	ldr	r3, [sp, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	dd05      	ble.n	8004982 <_dtoa_r+0x842>
 8004976:	461a      	mov	r2, r3
 8004978:	4648      	mov	r0, r9
 800497a:	9903      	ldr	r1, [sp, #12]
 800497c:	f000 fd02 	bl	8005384 <__lshift>
 8004980:	9003      	str	r0, [sp, #12]
 8004982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004984:	2b00      	cmp	r3, #0
 8004986:	dd05      	ble.n	8004994 <_dtoa_r+0x854>
 8004988:	4621      	mov	r1, r4
 800498a:	461a      	mov	r2, r3
 800498c:	4648      	mov	r0, r9
 800498e:	f000 fcf9 	bl	8005384 <__lshift>
 8004992:	4604      	mov	r4, r0
 8004994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d061      	beq.n	8004a5e <_dtoa_r+0x91e>
 800499a:	4621      	mov	r1, r4
 800499c:	9803      	ldr	r0, [sp, #12]
 800499e:	f000 fd5d 	bl	800545c <__mcmp>
 80049a2:	2800      	cmp	r0, #0
 80049a4:	da5b      	bge.n	8004a5e <_dtoa_r+0x91e>
 80049a6:	2300      	movs	r3, #0
 80049a8:	220a      	movs	r2, #10
 80049aa:	4648      	mov	r0, r9
 80049ac:	9903      	ldr	r1, [sp, #12]
 80049ae:	f000 fafb 	bl	8004fa8 <__multadd>
 80049b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049b4:	f107 38ff 	add.w	r8, r7, #4294967295
 80049b8:	9003      	str	r0, [sp, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 8177 	beq.w	8004cae <_dtoa_r+0xb6e>
 80049c0:	4629      	mov	r1, r5
 80049c2:	2300      	movs	r3, #0
 80049c4:	220a      	movs	r2, #10
 80049c6:	4648      	mov	r0, r9
 80049c8:	f000 faee 	bl	8004fa8 <__multadd>
 80049cc:	f1bb 0f00 	cmp.w	fp, #0
 80049d0:	4605      	mov	r5, r0
 80049d2:	dc6f      	bgt.n	8004ab4 <_dtoa_r+0x974>
 80049d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	dc49      	bgt.n	8004a6e <_dtoa_r+0x92e>
 80049da:	e06b      	b.n	8004ab4 <_dtoa_r+0x974>
 80049dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80049de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80049e2:	e73c      	b.n	800485e <_dtoa_r+0x71e>
 80049e4:	3fe00000 	.word	0x3fe00000
 80049e8:	40240000 	.word	0x40240000
 80049ec:	9b08      	ldr	r3, [sp, #32]
 80049ee:	1e5c      	subs	r4, r3, #1
 80049f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049f2:	42a3      	cmp	r3, r4
 80049f4:	db09      	blt.n	8004a0a <_dtoa_r+0x8ca>
 80049f6:	1b1c      	subs	r4, r3, r4
 80049f8:	9b08      	ldr	r3, [sp, #32]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f6bf af30 	bge.w	8004860 <_dtoa_r+0x720>
 8004a00:	9b04      	ldr	r3, [sp, #16]
 8004a02:	9a08      	ldr	r2, [sp, #32]
 8004a04:	1a9e      	subs	r6, r3, r2
 8004a06:	2300      	movs	r3, #0
 8004a08:	e72b      	b.n	8004862 <_dtoa_r+0x722>
 8004a0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a0e:	1ae3      	subs	r3, r4, r3
 8004a10:	441a      	add	r2, r3
 8004a12:	940a      	str	r4, [sp, #40]	@ 0x28
 8004a14:	9e04      	ldr	r6, [sp, #16]
 8004a16:	2400      	movs	r4, #0
 8004a18:	9b08      	ldr	r3, [sp, #32]
 8004a1a:	920e      	str	r2, [sp, #56]	@ 0x38
 8004a1c:	e721      	b.n	8004862 <_dtoa_r+0x722>
 8004a1e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004a20:	9e04      	ldr	r6, [sp, #16]
 8004a22:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004a24:	e728      	b.n	8004878 <_dtoa_r+0x738>
 8004a26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004a2a:	e751      	b.n	80048d0 <_dtoa_r+0x790>
 8004a2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a2e:	9903      	ldr	r1, [sp, #12]
 8004a30:	e750      	b.n	80048d4 <_dtoa_r+0x794>
 8004a32:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a36:	e751      	b.n	80048dc <_dtoa_r+0x79c>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	e779      	b.n	8004930 <_dtoa_r+0x7f0>
 8004a3c:	9b06      	ldr	r3, [sp, #24]
 8004a3e:	e777      	b.n	8004930 <_dtoa_r+0x7f0>
 8004a40:	2300      	movs	r3, #0
 8004a42:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a44:	e779      	b.n	800493a <_dtoa_r+0x7fa>
 8004a46:	d093      	beq.n	8004970 <_dtoa_r+0x830>
 8004a48:	9a04      	ldr	r2, [sp, #16]
 8004a4a:	331c      	adds	r3, #28
 8004a4c:	441a      	add	r2, r3
 8004a4e:	9204      	str	r2, [sp, #16]
 8004a50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a52:	441e      	add	r6, r3
 8004a54:	441a      	add	r2, r3
 8004a56:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a58:	e78a      	b.n	8004970 <_dtoa_r+0x830>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	e7f4      	b.n	8004a48 <_dtoa_r+0x908>
 8004a5e:	9b08      	ldr	r3, [sp, #32]
 8004a60:	46b8      	mov	r8, r7
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	dc20      	bgt.n	8004aa8 <_dtoa_r+0x968>
 8004a66:	469b      	mov	fp, r3
 8004a68:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	dd1e      	ble.n	8004aac <_dtoa_r+0x96c>
 8004a6e:	f1bb 0f00 	cmp.w	fp, #0
 8004a72:	f47f adb1 	bne.w	80045d8 <_dtoa_r+0x498>
 8004a76:	4621      	mov	r1, r4
 8004a78:	465b      	mov	r3, fp
 8004a7a:	2205      	movs	r2, #5
 8004a7c:	4648      	mov	r0, r9
 8004a7e:	f000 fa93 	bl	8004fa8 <__multadd>
 8004a82:	4601      	mov	r1, r0
 8004a84:	4604      	mov	r4, r0
 8004a86:	9803      	ldr	r0, [sp, #12]
 8004a88:	f000 fce8 	bl	800545c <__mcmp>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	f77f ada3 	ble.w	80045d8 <_dtoa_r+0x498>
 8004a92:	4656      	mov	r6, sl
 8004a94:	2331      	movs	r3, #49	@ 0x31
 8004a96:	f108 0801 	add.w	r8, r8, #1
 8004a9a:	f806 3b01 	strb.w	r3, [r6], #1
 8004a9e:	e59f      	b.n	80045e0 <_dtoa_r+0x4a0>
 8004aa0:	46b8      	mov	r8, r7
 8004aa2:	9c08      	ldr	r4, [sp, #32]
 8004aa4:	4625      	mov	r5, r4
 8004aa6:	e7f4      	b.n	8004a92 <_dtoa_r+0x952>
 8004aa8:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004aac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 8101 	beq.w	8004cb6 <_dtoa_r+0xb76>
 8004ab4:	2e00      	cmp	r6, #0
 8004ab6:	dd05      	ble.n	8004ac4 <_dtoa_r+0x984>
 8004ab8:	4629      	mov	r1, r5
 8004aba:	4632      	mov	r2, r6
 8004abc:	4648      	mov	r0, r9
 8004abe:	f000 fc61 	bl	8005384 <__lshift>
 8004ac2:	4605      	mov	r5, r0
 8004ac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d05c      	beq.n	8004b84 <_dtoa_r+0xa44>
 8004aca:	4648      	mov	r0, r9
 8004acc:	6869      	ldr	r1, [r5, #4]
 8004ace:	f000 fa09 	bl	8004ee4 <_Balloc>
 8004ad2:	4606      	mov	r6, r0
 8004ad4:	b928      	cbnz	r0, 8004ae2 <_dtoa_r+0x9a2>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004adc:	4b80      	ldr	r3, [pc, #512]	@ (8004ce0 <_dtoa_r+0xba0>)
 8004ade:	f7ff bb43 	b.w	8004168 <_dtoa_r+0x28>
 8004ae2:	692a      	ldr	r2, [r5, #16]
 8004ae4:	f105 010c 	add.w	r1, r5, #12
 8004ae8:	3202      	adds	r2, #2
 8004aea:	0092      	lsls	r2, r2, #2
 8004aec:	300c      	adds	r0, #12
 8004aee:	f001 ff51 	bl	8006994 <memcpy>
 8004af2:	2201      	movs	r2, #1
 8004af4:	4631      	mov	r1, r6
 8004af6:	4648      	mov	r0, r9
 8004af8:	f000 fc44 	bl	8005384 <__lshift>
 8004afc:	462f      	mov	r7, r5
 8004afe:	4605      	mov	r5, r0
 8004b00:	f10a 0301 	add.w	r3, sl, #1
 8004b04:	9304      	str	r3, [sp, #16]
 8004b06:	eb0a 030b 	add.w	r3, sl, fp
 8004b0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b0c:	9b06      	ldr	r3, [sp, #24]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b14:	9b04      	ldr	r3, [sp, #16]
 8004b16:	4621      	mov	r1, r4
 8004b18:	9803      	ldr	r0, [sp, #12]
 8004b1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8004b1e:	f7ff fa85 	bl	800402c <quorem>
 8004b22:	4603      	mov	r3, r0
 8004b24:	4639      	mov	r1, r7
 8004b26:	3330      	adds	r3, #48	@ 0x30
 8004b28:	9006      	str	r0, [sp, #24]
 8004b2a:	9803      	ldr	r0, [sp, #12]
 8004b2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b2e:	f000 fc95 	bl	800545c <__mcmp>
 8004b32:	462a      	mov	r2, r5
 8004b34:	9008      	str	r0, [sp, #32]
 8004b36:	4621      	mov	r1, r4
 8004b38:	4648      	mov	r0, r9
 8004b3a:	f000 fcab 	bl	8005494 <__mdiff>
 8004b3e:	68c2      	ldr	r2, [r0, #12]
 8004b40:	4606      	mov	r6, r0
 8004b42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b44:	bb02      	cbnz	r2, 8004b88 <_dtoa_r+0xa48>
 8004b46:	4601      	mov	r1, r0
 8004b48:	9803      	ldr	r0, [sp, #12]
 8004b4a:	f000 fc87 	bl	800545c <__mcmp>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b52:	4631      	mov	r1, r6
 8004b54:	4648      	mov	r0, r9
 8004b56:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004b5a:	f000 fa03 	bl	8004f64 <_Bfree>
 8004b5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004b62:	9e04      	ldr	r6, [sp, #16]
 8004b64:	ea42 0103 	orr.w	r1, r2, r3
 8004b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b6a:	4319      	orrs	r1, r3
 8004b6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b6e:	d10d      	bne.n	8004b8c <_dtoa_r+0xa4c>
 8004b70:	2b39      	cmp	r3, #57	@ 0x39
 8004b72:	d027      	beq.n	8004bc4 <_dtoa_r+0xa84>
 8004b74:	9a08      	ldr	r2, [sp, #32]
 8004b76:	2a00      	cmp	r2, #0
 8004b78:	dd01      	ble.n	8004b7e <_dtoa_r+0xa3e>
 8004b7a:	9b06      	ldr	r3, [sp, #24]
 8004b7c:	3331      	adds	r3, #49	@ 0x31
 8004b7e:	f88b 3000 	strb.w	r3, [fp]
 8004b82:	e52e      	b.n	80045e2 <_dtoa_r+0x4a2>
 8004b84:	4628      	mov	r0, r5
 8004b86:	e7b9      	b.n	8004afc <_dtoa_r+0x9bc>
 8004b88:	2201      	movs	r2, #1
 8004b8a:	e7e2      	b.n	8004b52 <_dtoa_r+0xa12>
 8004b8c:	9908      	ldr	r1, [sp, #32]
 8004b8e:	2900      	cmp	r1, #0
 8004b90:	db04      	blt.n	8004b9c <_dtoa_r+0xa5c>
 8004b92:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004b94:	4301      	orrs	r1, r0
 8004b96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b98:	4301      	orrs	r1, r0
 8004b9a:	d120      	bne.n	8004bde <_dtoa_r+0xa9e>
 8004b9c:	2a00      	cmp	r2, #0
 8004b9e:	ddee      	ble.n	8004b7e <_dtoa_r+0xa3e>
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	9903      	ldr	r1, [sp, #12]
 8004ba4:	4648      	mov	r0, r9
 8004ba6:	9304      	str	r3, [sp, #16]
 8004ba8:	f000 fbec 	bl	8005384 <__lshift>
 8004bac:	4621      	mov	r1, r4
 8004bae:	9003      	str	r0, [sp, #12]
 8004bb0:	f000 fc54 	bl	800545c <__mcmp>
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	9b04      	ldr	r3, [sp, #16]
 8004bb8:	dc02      	bgt.n	8004bc0 <_dtoa_r+0xa80>
 8004bba:	d1e0      	bne.n	8004b7e <_dtoa_r+0xa3e>
 8004bbc:	07da      	lsls	r2, r3, #31
 8004bbe:	d5de      	bpl.n	8004b7e <_dtoa_r+0xa3e>
 8004bc0:	2b39      	cmp	r3, #57	@ 0x39
 8004bc2:	d1da      	bne.n	8004b7a <_dtoa_r+0xa3a>
 8004bc4:	2339      	movs	r3, #57	@ 0x39
 8004bc6:	f88b 3000 	strb.w	r3, [fp]
 8004bca:	4633      	mov	r3, r6
 8004bcc:	461e      	mov	r6, r3
 8004bce:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	2a39      	cmp	r2, #57	@ 0x39
 8004bd6:	d04e      	beq.n	8004c76 <_dtoa_r+0xb36>
 8004bd8:	3201      	adds	r2, #1
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	e501      	b.n	80045e2 <_dtoa_r+0x4a2>
 8004bde:	2a00      	cmp	r2, #0
 8004be0:	dd03      	ble.n	8004bea <_dtoa_r+0xaaa>
 8004be2:	2b39      	cmp	r3, #57	@ 0x39
 8004be4:	d0ee      	beq.n	8004bc4 <_dtoa_r+0xa84>
 8004be6:	3301      	adds	r3, #1
 8004be8:	e7c9      	b.n	8004b7e <_dtoa_r+0xa3e>
 8004bea:	9a04      	ldr	r2, [sp, #16]
 8004bec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004bee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004bf2:	428a      	cmp	r2, r1
 8004bf4:	d028      	beq.n	8004c48 <_dtoa_r+0xb08>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	220a      	movs	r2, #10
 8004bfa:	9903      	ldr	r1, [sp, #12]
 8004bfc:	4648      	mov	r0, r9
 8004bfe:	f000 f9d3 	bl	8004fa8 <__multadd>
 8004c02:	42af      	cmp	r7, r5
 8004c04:	9003      	str	r0, [sp, #12]
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	f04f 020a 	mov.w	r2, #10
 8004c0e:	4639      	mov	r1, r7
 8004c10:	4648      	mov	r0, r9
 8004c12:	d107      	bne.n	8004c24 <_dtoa_r+0xae4>
 8004c14:	f000 f9c8 	bl	8004fa8 <__multadd>
 8004c18:	4607      	mov	r7, r0
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	9b04      	ldr	r3, [sp, #16]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	9304      	str	r3, [sp, #16]
 8004c22:	e777      	b.n	8004b14 <_dtoa_r+0x9d4>
 8004c24:	f000 f9c0 	bl	8004fa8 <__multadd>
 8004c28:	4629      	mov	r1, r5
 8004c2a:	4607      	mov	r7, r0
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	220a      	movs	r2, #10
 8004c30:	4648      	mov	r0, r9
 8004c32:	f000 f9b9 	bl	8004fa8 <__multadd>
 8004c36:	4605      	mov	r5, r0
 8004c38:	e7f0      	b.n	8004c1c <_dtoa_r+0xadc>
 8004c3a:	f1bb 0f00 	cmp.w	fp, #0
 8004c3e:	bfcc      	ite	gt
 8004c40:	465e      	movgt	r6, fp
 8004c42:	2601      	movle	r6, #1
 8004c44:	2700      	movs	r7, #0
 8004c46:	4456      	add	r6, sl
 8004c48:	2201      	movs	r2, #1
 8004c4a:	9903      	ldr	r1, [sp, #12]
 8004c4c:	4648      	mov	r0, r9
 8004c4e:	9304      	str	r3, [sp, #16]
 8004c50:	f000 fb98 	bl	8005384 <__lshift>
 8004c54:	4621      	mov	r1, r4
 8004c56:	9003      	str	r0, [sp, #12]
 8004c58:	f000 fc00 	bl	800545c <__mcmp>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	dcb4      	bgt.n	8004bca <_dtoa_r+0xa8a>
 8004c60:	d102      	bne.n	8004c68 <_dtoa_r+0xb28>
 8004c62:	9b04      	ldr	r3, [sp, #16]
 8004c64:	07db      	lsls	r3, r3, #31
 8004c66:	d4b0      	bmi.n	8004bca <_dtoa_r+0xa8a>
 8004c68:	4633      	mov	r3, r6
 8004c6a:	461e      	mov	r6, r3
 8004c6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c70:	2a30      	cmp	r2, #48	@ 0x30
 8004c72:	d0fa      	beq.n	8004c6a <_dtoa_r+0xb2a>
 8004c74:	e4b5      	b.n	80045e2 <_dtoa_r+0x4a2>
 8004c76:	459a      	cmp	sl, r3
 8004c78:	d1a8      	bne.n	8004bcc <_dtoa_r+0xa8c>
 8004c7a:	2331      	movs	r3, #49	@ 0x31
 8004c7c:	f108 0801 	add.w	r8, r8, #1
 8004c80:	f88a 3000 	strb.w	r3, [sl]
 8004c84:	e4ad      	b.n	80045e2 <_dtoa_r+0x4a2>
 8004c86:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004c88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004ce4 <_dtoa_r+0xba4>
 8004c8c:	b11b      	cbz	r3, 8004c96 <_dtoa_r+0xb56>
 8004c8e:	f10a 0308 	add.w	r3, sl, #8
 8004c92:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	4650      	mov	r0, sl
 8004c98:	b017      	add	sp, #92	@ 0x5c
 8004c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	f77f ae2e 	ble.w	8004902 <_dtoa_r+0x7c2>
 8004ca6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ca8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004caa:	2001      	movs	r0, #1
 8004cac:	e64d      	b.n	800494a <_dtoa_r+0x80a>
 8004cae:	f1bb 0f00 	cmp.w	fp, #0
 8004cb2:	f77f aed9 	ble.w	8004a68 <_dtoa_r+0x928>
 8004cb6:	4656      	mov	r6, sl
 8004cb8:	4621      	mov	r1, r4
 8004cba:	9803      	ldr	r0, [sp, #12]
 8004cbc:	f7ff f9b6 	bl	800402c <quorem>
 8004cc0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004cc4:	f806 3b01 	strb.w	r3, [r6], #1
 8004cc8:	eba6 020a 	sub.w	r2, r6, sl
 8004ccc:	4593      	cmp	fp, r2
 8004cce:	ddb4      	ble.n	8004c3a <_dtoa_r+0xafa>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	220a      	movs	r2, #10
 8004cd4:	4648      	mov	r0, r9
 8004cd6:	9903      	ldr	r1, [sp, #12]
 8004cd8:	f000 f966 	bl	8004fa8 <__multadd>
 8004cdc:	9003      	str	r0, [sp, #12]
 8004cde:	e7eb      	b.n	8004cb8 <_dtoa_r+0xb78>
 8004ce0:	08008527 	.word	0x08008527
 8004ce4:	080084ab 	.word	0x080084ab

08004ce8 <_free_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	4605      	mov	r5, r0
 8004cec:	2900      	cmp	r1, #0
 8004cee:	d040      	beq.n	8004d72 <_free_r+0x8a>
 8004cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cf4:	1f0c      	subs	r4, r1, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bfb8      	it	lt
 8004cfa:	18e4      	addlt	r4, r4, r3
 8004cfc:	f000 f8e6 	bl	8004ecc <__malloc_lock>
 8004d00:	4a1c      	ldr	r2, [pc, #112]	@ (8004d74 <_free_r+0x8c>)
 8004d02:	6813      	ldr	r3, [r2, #0]
 8004d04:	b933      	cbnz	r3, 8004d14 <_free_r+0x2c>
 8004d06:	6063      	str	r3, [r4, #4]
 8004d08:	6014      	str	r4, [r2, #0]
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d10:	f000 b8e2 	b.w	8004ed8 <__malloc_unlock>
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	d908      	bls.n	8004d2a <_free_r+0x42>
 8004d18:	6820      	ldr	r0, [r4, #0]
 8004d1a:	1821      	adds	r1, r4, r0
 8004d1c:	428b      	cmp	r3, r1
 8004d1e:	bf01      	itttt	eq
 8004d20:	6819      	ldreq	r1, [r3, #0]
 8004d22:	685b      	ldreq	r3, [r3, #4]
 8004d24:	1809      	addeq	r1, r1, r0
 8004d26:	6021      	streq	r1, [r4, #0]
 8004d28:	e7ed      	b.n	8004d06 <_free_r+0x1e>
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	b10b      	cbz	r3, 8004d34 <_free_r+0x4c>
 8004d30:	42a3      	cmp	r3, r4
 8004d32:	d9fa      	bls.n	8004d2a <_free_r+0x42>
 8004d34:	6811      	ldr	r1, [r2, #0]
 8004d36:	1850      	adds	r0, r2, r1
 8004d38:	42a0      	cmp	r0, r4
 8004d3a:	d10b      	bne.n	8004d54 <_free_r+0x6c>
 8004d3c:	6820      	ldr	r0, [r4, #0]
 8004d3e:	4401      	add	r1, r0
 8004d40:	1850      	adds	r0, r2, r1
 8004d42:	4283      	cmp	r3, r0
 8004d44:	6011      	str	r1, [r2, #0]
 8004d46:	d1e0      	bne.n	8004d0a <_free_r+0x22>
 8004d48:	6818      	ldr	r0, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	4408      	add	r0, r1
 8004d4e:	6010      	str	r0, [r2, #0]
 8004d50:	6053      	str	r3, [r2, #4]
 8004d52:	e7da      	b.n	8004d0a <_free_r+0x22>
 8004d54:	d902      	bls.n	8004d5c <_free_r+0x74>
 8004d56:	230c      	movs	r3, #12
 8004d58:	602b      	str	r3, [r5, #0]
 8004d5a:	e7d6      	b.n	8004d0a <_free_r+0x22>
 8004d5c:	6820      	ldr	r0, [r4, #0]
 8004d5e:	1821      	adds	r1, r4, r0
 8004d60:	428b      	cmp	r3, r1
 8004d62:	bf01      	itttt	eq
 8004d64:	6819      	ldreq	r1, [r3, #0]
 8004d66:	685b      	ldreq	r3, [r3, #4]
 8004d68:	1809      	addeq	r1, r1, r0
 8004d6a:	6021      	streq	r1, [r4, #0]
 8004d6c:	6063      	str	r3, [r4, #4]
 8004d6e:	6054      	str	r4, [r2, #4]
 8004d70:	e7cb      	b.n	8004d0a <_free_r+0x22>
 8004d72:	bd38      	pop	{r3, r4, r5, pc}
 8004d74:	200007bc 	.word	0x200007bc

08004d78 <malloc>:
 8004d78:	4b02      	ldr	r3, [pc, #8]	@ (8004d84 <malloc+0xc>)
 8004d7a:	4601      	mov	r1, r0
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	f000 b825 	b.w	8004dcc <_malloc_r>
 8004d82:	bf00      	nop
 8004d84:	20000028 	.word	0x20000028

08004d88 <sbrk_aligned>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	4e0f      	ldr	r6, [pc, #60]	@ (8004dc8 <sbrk_aligned+0x40>)
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	6831      	ldr	r1, [r6, #0]
 8004d90:	4605      	mov	r5, r0
 8004d92:	b911      	cbnz	r1, 8004d9a <sbrk_aligned+0x12>
 8004d94:	f001 fdee 	bl	8006974 <_sbrk_r>
 8004d98:	6030      	str	r0, [r6, #0]
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	f001 fde9 	bl	8006974 <_sbrk_r>
 8004da2:	1c43      	adds	r3, r0, #1
 8004da4:	d103      	bne.n	8004dae <sbrk_aligned+0x26>
 8004da6:	f04f 34ff 	mov.w	r4, #4294967295
 8004daa:	4620      	mov	r0, r4
 8004dac:	bd70      	pop	{r4, r5, r6, pc}
 8004dae:	1cc4      	adds	r4, r0, #3
 8004db0:	f024 0403 	bic.w	r4, r4, #3
 8004db4:	42a0      	cmp	r0, r4
 8004db6:	d0f8      	beq.n	8004daa <sbrk_aligned+0x22>
 8004db8:	1a21      	subs	r1, r4, r0
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f001 fdda 	bl	8006974 <_sbrk_r>
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d1f2      	bne.n	8004daa <sbrk_aligned+0x22>
 8004dc4:	e7ef      	b.n	8004da6 <sbrk_aligned+0x1e>
 8004dc6:	bf00      	nop
 8004dc8:	200007b8 	.word	0x200007b8

08004dcc <_malloc_r>:
 8004dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dd0:	1ccd      	adds	r5, r1, #3
 8004dd2:	f025 0503 	bic.w	r5, r5, #3
 8004dd6:	3508      	adds	r5, #8
 8004dd8:	2d0c      	cmp	r5, #12
 8004dda:	bf38      	it	cc
 8004ddc:	250c      	movcc	r5, #12
 8004dde:	2d00      	cmp	r5, #0
 8004de0:	4606      	mov	r6, r0
 8004de2:	db01      	blt.n	8004de8 <_malloc_r+0x1c>
 8004de4:	42a9      	cmp	r1, r5
 8004de6:	d904      	bls.n	8004df2 <_malloc_r+0x26>
 8004de8:	230c      	movs	r3, #12
 8004dea:	6033      	str	r3, [r6, #0]
 8004dec:	2000      	movs	r0, #0
 8004dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004df2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ec8 <_malloc_r+0xfc>
 8004df6:	f000 f869 	bl	8004ecc <__malloc_lock>
 8004dfa:	f8d8 3000 	ldr.w	r3, [r8]
 8004dfe:	461c      	mov	r4, r3
 8004e00:	bb44      	cbnz	r4, 8004e54 <_malloc_r+0x88>
 8004e02:	4629      	mov	r1, r5
 8004e04:	4630      	mov	r0, r6
 8004e06:	f7ff ffbf 	bl	8004d88 <sbrk_aligned>
 8004e0a:	1c43      	adds	r3, r0, #1
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	d158      	bne.n	8004ec2 <_malloc_r+0xf6>
 8004e10:	f8d8 4000 	ldr.w	r4, [r8]
 8004e14:	4627      	mov	r7, r4
 8004e16:	2f00      	cmp	r7, #0
 8004e18:	d143      	bne.n	8004ea2 <_malloc_r+0xd6>
 8004e1a:	2c00      	cmp	r4, #0
 8004e1c:	d04b      	beq.n	8004eb6 <_malloc_r+0xea>
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	4639      	mov	r1, r7
 8004e22:	4630      	mov	r0, r6
 8004e24:	eb04 0903 	add.w	r9, r4, r3
 8004e28:	f001 fda4 	bl	8006974 <_sbrk_r>
 8004e2c:	4581      	cmp	r9, r0
 8004e2e:	d142      	bne.n	8004eb6 <_malloc_r+0xea>
 8004e30:	6821      	ldr	r1, [r4, #0]
 8004e32:	4630      	mov	r0, r6
 8004e34:	1a6d      	subs	r5, r5, r1
 8004e36:	4629      	mov	r1, r5
 8004e38:	f7ff ffa6 	bl	8004d88 <sbrk_aligned>
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d03a      	beq.n	8004eb6 <_malloc_r+0xea>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	442b      	add	r3, r5
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	f8d8 3000 	ldr.w	r3, [r8]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	bb62      	cbnz	r2, 8004ea8 <_malloc_r+0xdc>
 8004e4e:	f8c8 7000 	str.w	r7, [r8]
 8004e52:	e00f      	b.n	8004e74 <_malloc_r+0xa8>
 8004e54:	6822      	ldr	r2, [r4, #0]
 8004e56:	1b52      	subs	r2, r2, r5
 8004e58:	d420      	bmi.n	8004e9c <_malloc_r+0xd0>
 8004e5a:	2a0b      	cmp	r2, #11
 8004e5c:	d917      	bls.n	8004e8e <_malloc_r+0xc2>
 8004e5e:	1961      	adds	r1, r4, r5
 8004e60:	42a3      	cmp	r3, r4
 8004e62:	6025      	str	r5, [r4, #0]
 8004e64:	bf18      	it	ne
 8004e66:	6059      	strne	r1, [r3, #4]
 8004e68:	6863      	ldr	r3, [r4, #4]
 8004e6a:	bf08      	it	eq
 8004e6c:	f8c8 1000 	streq.w	r1, [r8]
 8004e70:	5162      	str	r2, [r4, r5]
 8004e72:	604b      	str	r3, [r1, #4]
 8004e74:	4630      	mov	r0, r6
 8004e76:	f000 f82f 	bl	8004ed8 <__malloc_unlock>
 8004e7a:	f104 000b 	add.w	r0, r4, #11
 8004e7e:	1d23      	adds	r3, r4, #4
 8004e80:	f020 0007 	bic.w	r0, r0, #7
 8004e84:	1ac2      	subs	r2, r0, r3
 8004e86:	bf1c      	itt	ne
 8004e88:	1a1b      	subne	r3, r3, r0
 8004e8a:	50a3      	strne	r3, [r4, r2]
 8004e8c:	e7af      	b.n	8004dee <_malloc_r+0x22>
 8004e8e:	6862      	ldr	r2, [r4, #4]
 8004e90:	42a3      	cmp	r3, r4
 8004e92:	bf0c      	ite	eq
 8004e94:	f8c8 2000 	streq.w	r2, [r8]
 8004e98:	605a      	strne	r2, [r3, #4]
 8004e9a:	e7eb      	b.n	8004e74 <_malloc_r+0xa8>
 8004e9c:	4623      	mov	r3, r4
 8004e9e:	6864      	ldr	r4, [r4, #4]
 8004ea0:	e7ae      	b.n	8004e00 <_malloc_r+0x34>
 8004ea2:	463c      	mov	r4, r7
 8004ea4:	687f      	ldr	r7, [r7, #4]
 8004ea6:	e7b6      	b.n	8004e16 <_malloc_r+0x4a>
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	42a3      	cmp	r3, r4
 8004eae:	d1fb      	bne.n	8004ea8 <_malloc_r+0xdc>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	6053      	str	r3, [r2, #4]
 8004eb4:	e7de      	b.n	8004e74 <_malloc_r+0xa8>
 8004eb6:	230c      	movs	r3, #12
 8004eb8:	4630      	mov	r0, r6
 8004eba:	6033      	str	r3, [r6, #0]
 8004ebc:	f000 f80c 	bl	8004ed8 <__malloc_unlock>
 8004ec0:	e794      	b.n	8004dec <_malloc_r+0x20>
 8004ec2:	6005      	str	r5, [r0, #0]
 8004ec4:	e7d6      	b.n	8004e74 <_malloc_r+0xa8>
 8004ec6:	bf00      	nop
 8004ec8:	200007bc 	.word	0x200007bc

08004ecc <__malloc_lock>:
 8004ecc:	4801      	ldr	r0, [pc, #4]	@ (8004ed4 <__malloc_lock+0x8>)
 8004ece:	f7ff b898 	b.w	8004002 <__retarget_lock_acquire_recursive>
 8004ed2:	bf00      	nop
 8004ed4:	200007b4 	.word	0x200007b4

08004ed8 <__malloc_unlock>:
 8004ed8:	4801      	ldr	r0, [pc, #4]	@ (8004ee0 <__malloc_unlock+0x8>)
 8004eda:	f7ff b893 	b.w	8004004 <__retarget_lock_release_recursive>
 8004ede:	bf00      	nop
 8004ee0:	200007b4 	.word	0x200007b4

08004ee4 <_Balloc>:
 8004ee4:	b570      	push	{r4, r5, r6, lr}
 8004ee6:	69c6      	ldr	r6, [r0, #28]
 8004ee8:	4604      	mov	r4, r0
 8004eea:	460d      	mov	r5, r1
 8004eec:	b976      	cbnz	r6, 8004f0c <_Balloc+0x28>
 8004eee:	2010      	movs	r0, #16
 8004ef0:	f7ff ff42 	bl	8004d78 <malloc>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	61e0      	str	r0, [r4, #28]
 8004ef8:	b920      	cbnz	r0, 8004f04 <_Balloc+0x20>
 8004efa:	216b      	movs	r1, #107	@ 0x6b
 8004efc:	4b17      	ldr	r3, [pc, #92]	@ (8004f5c <_Balloc+0x78>)
 8004efe:	4818      	ldr	r0, [pc, #96]	@ (8004f60 <_Balloc+0x7c>)
 8004f00:	f001 fd5c 	bl	80069bc <__assert_func>
 8004f04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f08:	6006      	str	r6, [r0, #0]
 8004f0a:	60c6      	str	r6, [r0, #12]
 8004f0c:	69e6      	ldr	r6, [r4, #28]
 8004f0e:	68f3      	ldr	r3, [r6, #12]
 8004f10:	b183      	cbz	r3, 8004f34 <_Balloc+0x50>
 8004f12:	69e3      	ldr	r3, [r4, #28]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f1a:	b9b8      	cbnz	r0, 8004f4c <_Balloc+0x68>
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	fa01 f605 	lsl.w	r6, r1, r5
 8004f22:	1d72      	adds	r2, r6, #5
 8004f24:	4620      	mov	r0, r4
 8004f26:	0092      	lsls	r2, r2, #2
 8004f28:	f001 fd66 	bl	80069f8 <_calloc_r>
 8004f2c:	b160      	cbz	r0, 8004f48 <_Balloc+0x64>
 8004f2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004f32:	e00e      	b.n	8004f52 <_Balloc+0x6e>
 8004f34:	2221      	movs	r2, #33	@ 0x21
 8004f36:	2104      	movs	r1, #4
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f001 fd5d 	bl	80069f8 <_calloc_r>
 8004f3e:	69e3      	ldr	r3, [r4, #28]
 8004f40:	60f0      	str	r0, [r6, #12]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e4      	bne.n	8004f12 <_Balloc+0x2e>
 8004f48:	2000      	movs	r0, #0
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	6802      	ldr	r2, [r0, #0]
 8004f4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004f52:	2300      	movs	r3, #0
 8004f54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f58:	e7f7      	b.n	8004f4a <_Balloc+0x66>
 8004f5a:	bf00      	nop
 8004f5c:	080084b8 	.word	0x080084b8
 8004f60:	08008538 	.word	0x08008538

08004f64 <_Bfree>:
 8004f64:	b570      	push	{r4, r5, r6, lr}
 8004f66:	69c6      	ldr	r6, [r0, #28]
 8004f68:	4605      	mov	r5, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	b976      	cbnz	r6, 8004f8c <_Bfree+0x28>
 8004f6e:	2010      	movs	r0, #16
 8004f70:	f7ff ff02 	bl	8004d78 <malloc>
 8004f74:	4602      	mov	r2, r0
 8004f76:	61e8      	str	r0, [r5, #28]
 8004f78:	b920      	cbnz	r0, 8004f84 <_Bfree+0x20>
 8004f7a:	218f      	movs	r1, #143	@ 0x8f
 8004f7c:	4b08      	ldr	r3, [pc, #32]	@ (8004fa0 <_Bfree+0x3c>)
 8004f7e:	4809      	ldr	r0, [pc, #36]	@ (8004fa4 <_Bfree+0x40>)
 8004f80:	f001 fd1c 	bl	80069bc <__assert_func>
 8004f84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f88:	6006      	str	r6, [r0, #0]
 8004f8a:	60c6      	str	r6, [r0, #12]
 8004f8c:	b13c      	cbz	r4, 8004f9e <_Bfree+0x3a>
 8004f8e:	69eb      	ldr	r3, [r5, #28]
 8004f90:	6862      	ldr	r2, [r4, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f98:	6021      	str	r1, [r4, #0]
 8004f9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}
 8004fa0:	080084b8 	.word	0x080084b8
 8004fa4:	08008538 	.word	0x08008538

08004fa8 <__multadd>:
 8004fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fac:	4607      	mov	r7, r0
 8004fae:	460c      	mov	r4, r1
 8004fb0:	461e      	mov	r6, r3
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	690d      	ldr	r5, [r1, #16]
 8004fb6:	f101 0c14 	add.w	ip, r1, #20
 8004fba:	f8dc 3000 	ldr.w	r3, [ip]
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	b299      	uxth	r1, r3
 8004fc2:	fb02 6101 	mla	r1, r2, r1, r6
 8004fc6:	0c1e      	lsrs	r6, r3, #16
 8004fc8:	0c0b      	lsrs	r3, r1, #16
 8004fca:	fb02 3306 	mla	r3, r2, r6, r3
 8004fce:	b289      	uxth	r1, r1
 8004fd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004fd4:	4285      	cmp	r5, r0
 8004fd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004fda:	f84c 1b04 	str.w	r1, [ip], #4
 8004fde:	dcec      	bgt.n	8004fba <__multadd+0x12>
 8004fe0:	b30e      	cbz	r6, 8005026 <__multadd+0x7e>
 8004fe2:	68a3      	ldr	r3, [r4, #8]
 8004fe4:	42ab      	cmp	r3, r5
 8004fe6:	dc19      	bgt.n	800501c <__multadd+0x74>
 8004fe8:	6861      	ldr	r1, [r4, #4]
 8004fea:	4638      	mov	r0, r7
 8004fec:	3101      	adds	r1, #1
 8004fee:	f7ff ff79 	bl	8004ee4 <_Balloc>
 8004ff2:	4680      	mov	r8, r0
 8004ff4:	b928      	cbnz	r0, 8005002 <__multadd+0x5a>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	21ba      	movs	r1, #186	@ 0xba
 8004ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800502c <__multadd+0x84>)
 8004ffc:	480c      	ldr	r0, [pc, #48]	@ (8005030 <__multadd+0x88>)
 8004ffe:	f001 fcdd 	bl	80069bc <__assert_func>
 8005002:	6922      	ldr	r2, [r4, #16]
 8005004:	f104 010c 	add.w	r1, r4, #12
 8005008:	3202      	adds	r2, #2
 800500a:	0092      	lsls	r2, r2, #2
 800500c:	300c      	adds	r0, #12
 800500e:	f001 fcc1 	bl	8006994 <memcpy>
 8005012:	4621      	mov	r1, r4
 8005014:	4638      	mov	r0, r7
 8005016:	f7ff ffa5 	bl	8004f64 <_Bfree>
 800501a:	4644      	mov	r4, r8
 800501c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005020:	3501      	adds	r5, #1
 8005022:	615e      	str	r6, [r3, #20]
 8005024:	6125      	str	r5, [r4, #16]
 8005026:	4620      	mov	r0, r4
 8005028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800502c:	08008527 	.word	0x08008527
 8005030:	08008538 	.word	0x08008538

08005034 <__s2b>:
 8005034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005038:	4615      	mov	r5, r2
 800503a:	2209      	movs	r2, #9
 800503c:	461f      	mov	r7, r3
 800503e:	3308      	adds	r3, #8
 8005040:	460c      	mov	r4, r1
 8005042:	fb93 f3f2 	sdiv	r3, r3, r2
 8005046:	4606      	mov	r6, r0
 8005048:	2201      	movs	r2, #1
 800504a:	2100      	movs	r1, #0
 800504c:	429a      	cmp	r2, r3
 800504e:	db09      	blt.n	8005064 <__s2b+0x30>
 8005050:	4630      	mov	r0, r6
 8005052:	f7ff ff47 	bl	8004ee4 <_Balloc>
 8005056:	b940      	cbnz	r0, 800506a <__s2b+0x36>
 8005058:	4602      	mov	r2, r0
 800505a:	21d3      	movs	r1, #211	@ 0xd3
 800505c:	4b18      	ldr	r3, [pc, #96]	@ (80050c0 <__s2b+0x8c>)
 800505e:	4819      	ldr	r0, [pc, #100]	@ (80050c4 <__s2b+0x90>)
 8005060:	f001 fcac 	bl	80069bc <__assert_func>
 8005064:	0052      	lsls	r2, r2, #1
 8005066:	3101      	adds	r1, #1
 8005068:	e7f0      	b.n	800504c <__s2b+0x18>
 800506a:	9b08      	ldr	r3, [sp, #32]
 800506c:	2d09      	cmp	r5, #9
 800506e:	6143      	str	r3, [r0, #20]
 8005070:	f04f 0301 	mov.w	r3, #1
 8005074:	6103      	str	r3, [r0, #16]
 8005076:	dd16      	ble.n	80050a6 <__s2b+0x72>
 8005078:	f104 0909 	add.w	r9, r4, #9
 800507c:	46c8      	mov	r8, r9
 800507e:	442c      	add	r4, r5
 8005080:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005084:	4601      	mov	r1, r0
 8005086:	220a      	movs	r2, #10
 8005088:	4630      	mov	r0, r6
 800508a:	3b30      	subs	r3, #48	@ 0x30
 800508c:	f7ff ff8c 	bl	8004fa8 <__multadd>
 8005090:	45a0      	cmp	r8, r4
 8005092:	d1f5      	bne.n	8005080 <__s2b+0x4c>
 8005094:	f1a5 0408 	sub.w	r4, r5, #8
 8005098:	444c      	add	r4, r9
 800509a:	1b2d      	subs	r5, r5, r4
 800509c:	1963      	adds	r3, r4, r5
 800509e:	42bb      	cmp	r3, r7
 80050a0:	db04      	blt.n	80050ac <__s2b+0x78>
 80050a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050a6:	2509      	movs	r5, #9
 80050a8:	340a      	adds	r4, #10
 80050aa:	e7f6      	b.n	800509a <__s2b+0x66>
 80050ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80050b0:	4601      	mov	r1, r0
 80050b2:	220a      	movs	r2, #10
 80050b4:	4630      	mov	r0, r6
 80050b6:	3b30      	subs	r3, #48	@ 0x30
 80050b8:	f7ff ff76 	bl	8004fa8 <__multadd>
 80050bc:	e7ee      	b.n	800509c <__s2b+0x68>
 80050be:	bf00      	nop
 80050c0:	08008527 	.word	0x08008527
 80050c4:	08008538 	.word	0x08008538

080050c8 <__hi0bits>:
 80050c8:	4603      	mov	r3, r0
 80050ca:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80050ce:	bf3a      	itte	cc
 80050d0:	0403      	lslcc	r3, r0, #16
 80050d2:	2010      	movcc	r0, #16
 80050d4:	2000      	movcs	r0, #0
 80050d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050da:	bf3c      	itt	cc
 80050dc:	021b      	lslcc	r3, r3, #8
 80050de:	3008      	addcc	r0, #8
 80050e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050e4:	bf3c      	itt	cc
 80050e6:	011b      	lslcc	r3, r3, #4
 80050e8:	3004      	addcc	r0, #4
 80050ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ee:	bf3c      	itt	cc
 80050f0:	009b      	lslcc	r3, r3, #2
 80050f2:	3002      	addcc	r0, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	db05      	blt.n	8005104 <__hi0bits+0x3c>
 80050f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80050fc:	f100 0001 	add.w	r0, r0, #1
 8005100:	bf08      	it	eq
 8005102:	2020      	moveq	r0, #32
 8005104:	4770      	bx	lr

08005106 <__lo0bits>:
 8005106:	6803      	ldr	r3, [r0, #0]
 8005108:	4602      	mov	r2, r0
 800510a:	f013 0007 	ands.w	r0, r3, #7
 800510e:	d00b      	beq.n	8005128 <__lo0bits+0x22>
 8005110:	07d9      	lsls	r1, r3, #31
 8005112:	d421      	bmi.n	8005158 <__lo0bits+0x52>
 8005114:	0798      	lsls	r0, r3, #30
 8005116:	bf49      	itett	mi
 8005118:	085b      	lsrmi	r3, r3, #1
 800511a:	089b      	lsrpl	r3, r3, #2
 800511c:	2001      	movmi	r0, #1
 800511e:	6013      	strmi	r3, [r2, #0]
 8005120:	bf5c      	itt	pl
 8005122:	2002      	movpl	r0, #2
 8005124:	6013      	strpl	r3, [r2, #0]
 8005126:	4770      	bx	lr
 8005128:	b299      	uxth	r1, r3
 800512a:	b909      	cbnz	r1, 8005130 <__lo0bits+0x2a>
 800512c:	2010      	movs	r0, #16
 800512e:	0c1b      	lsrs	r3, r3, #16
 8005130:	b2d9      	uxtb	r1, r3
 8005132:	b909      	cbnz	r1, 8005138 <__lo0bits+0x32>
 8005134:	3008      	adds	r0, #8
 8005136:	0a1b      	lsrs	r3, r3, #8
 8005138:	0719      	lsls	r1, r3, #28
 800513a:	bf04      	itt	eq
 800513c:	091b      	lsreq	r3, r3, #4
 800513e:	3004      	addeq	r0, #4
 8005140:	0799      	lsls	r1, r3, #30
 8005142:	bf04      	itt	eq
 8005144:	089b      	lsreq	r3, r3, #2
 8005146:	3002      	addeq	r0, #2
 8005148:	07d9      	lsls	r1, r3, #31
 800514a:	d403      	bmi.n	8005154 <__lo0bits+0x4e>
 800514c:	085b      	lsrs	r3, r3, #1
 800514e:	f100 0001 	add.w	r0, r0, #1
 8005152:	d003      	beq.n	800515c <__lo0bits+0x56>
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	4770      	bx	lr
 8005158:	2000      	movs	r0, #0
 800515a:	4770      	bx	lr
 800515c:	2020      	movs	r0, #32
 800515e:	4770      	bx	lr

08005160 <__i2b>:
 8005160:	b510      	push	{r4, lr}
 8005162:	460c      	mov	r4, r1
 8005164:	2101      	movs	r1, #1
 8005166:	f7ff febd 	bl	8004ee4 <_Balloc>
 800516a:	4602      	mov	r2, r0
 800516c:	b928      	cbnz	r0, 800517a <__i2b+0x1a>
 800516e:	f240 1145 	movw	r1, #325	@ 0x145
 8005172:	4b04      	ldr	r3, [pc, #16]	@ (8005184 <__i2b+0x24>)
 8005174:	4804      	ldr	r0, [pc, #16]	@ (8005188 <__i2b+0x28>)
 8005176:	f001 fc21 	bl	80069bc <__assert_func>
 800517a:	2301      	movs	r3, #1
 800517c:	6144      	str	r4, [r0, #20]
 800517e:	6103      	str	r3, [r0, #16]
 8005180:	bd10      	pop	{r4, pc}
 8005182:	bf00      	nop
 8005184:	08008527 	.word	0x08008527
 8005188:	08008538 	.word	0x08008538

0800518c <__multiply>:
 800518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005190:	4617      	mov	r7, r2
 8005192:	690a      	ldr	r2, [r1, #16]
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	4689      	mov	r9, r1
 8005198:	429a      	cmp	r2, r3
 800519a:	bfa2      	ittt	ge
 800519c:	463b      	movge	r3, r7
 800519e:	460f      	movge	r7, r1
 80051a0:	4699      	movge	r9, r3
 80051a2:	693d      	ldr	r5, [r7, #16]
 80051a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	eb05 060a 	add.w	r6, r5, sl
 80051b0:	42b3      	cmp	r3, r6
 80051b2:	b085      	sub	sp, #20
 80051b4:	bfb8      	it	lt
 80051b6:	3101      	addlt	r1, #1
 80051b8:	f7ff fe94 	bl	8004ee4 <_Balloc>
 80051bc:	b930      	cbnz	r0, 80051cc <__multiply+0x40>
 80051be:	4602      	mov	r2, r0
 80051c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80051c4:	4b40      	ldr	r3, [pc, #256]	@ (80052c8 <__multiply+0x13c>)
 80051c6:	4841      	ldr	r0, [pc, #260]	@ (80052cc <__multiply+0x140>)
 80051c8:	f001 fbf8 	bl	80069bc <__assert_func>
 80051cc:	f100 0414 	add.w	r4, r0, #20
 80051d0:	4623      	mov	r3, r4
 80051d2:	2200      	movs	r2, #0
 80051d4:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80051d8:	4573      	cmp	r3, lr
 80051da:	d320      	bcc.n	800521e <__multiply+0x92>
 80051dc:	f107 0814 	add.w	r8, r7, #20
 80051e0:	f109 0114 	add.w	r1, r9, #20
 80051e4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80051e8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80051ec:	9302      	str	r3, [sp, #8]
 80051ee:	1beb      	subs	r3, r5, r7
 80051f0:	3b15      	subs	r3, #21
 80051f2:	f023 0303 	bic.w	r3, r3, #3
 80051f6:	3304      	adds	r3, #4
 80051f8:	3715      	adds	r7, #21
 80051fa:	42bd      	cmp	r5, r7
 80051fc:	bf38      	it	cc
 80051fe:	2304      	movcc	r3, #4
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	9b02      	ldr	r3, [sp, #8]
 8005204:	9103      	str	r1, [sp, #12]
 8005206:	428b      	cmp	r3, r1
 8005208:	d80c      	bhi.n	8005224 <__multiply+0x98>
 800520a:	2e00      	cmp	r6, #0
 800520c:	dd03      	ble.n	8005216 <__multiply+0x8a>
 800520e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005212:	2b00      	cmp	r3, #0
 8005214:	d055      	beq.n	80052c2 <__multiply+0x136>
 8005216:	6106      	str	r6, [r0, #16]
 8005218:	b005      	add	sp, #20
 800521a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800521e:	f843 2b04 	str.w	r2, [r3], #4
 8005222:	e7d9      	b.n	80051d8 <__multiply+0x4c>
 8005224:	f8b1 a000 	ldrh.w	sl, [r1]
 8005228:	f1ba 0f00 	cmp.w	sl, #0
 800522c:	d01f      	beq.n	800526e <__multiply+0xe2>
 800522e:	46c4      	mov	ip, r8
 8005230:	46a1      	mov	r9, r4
 8005232:	2700      	movs	r7, #0
 8005234:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005238:	f8d9 3000 	ldr.w	r3, [r9]
 800523c:	fa1f fb82 	uxth.w	fp, r2
 8005240:	b29b      	uxth	r3, r3
 8005242:	fb0a 330b 	mla	r3, sl, fp, r3
 8005246:	443b      	add	r3, r7
 8005248:	f8d9 7000 	ldr.w	r7, [r9]
 800524c:	0c12      	lsrs	r2, r2, #16
 800524e:	0c3f      	lsrs	r7, r7, #16
 8005250:	fb0a 7202 	mla	r2, sl, r2, r7
 8005254:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005258:	b29b      	uxth	r3, r3
 800525a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800525e:	4565      	cmp	r5, ip
 8005260:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005264:	f849 3b04 	str.w	r3, [r9], #4
 8005268:	d8e4      	bhi.n	8005234 <__multiply+0xa8>
 800526a:	9b01      	ldr	r3, [sp, #4]
 800526c:	50e7      	str	r7, [r4, r3]
 800526e:	9b03      	ldr	r3, [sp, #12]
 8005270:	3104      	adds	r1, #4
 8005272:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005276:	f1b9 0f00 	cmp.w	r9, #0
 800527a:	d020      	beq.n	80052be <__multiply+0x132>
 800527c:	4647      	mov	r7, r8
 800527e:	46a4      	mov	ip, r4
 8005280:	f04f 0a00 	mov.w	sl, #0
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	f8b7 b000 	ldrh.w	fp, [r7]
 800528a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800528e:	b29b      	uxth	r3, r3
 8005290:	fb09 220b 	mla	r2, r9, fp, r2
 8005294:	4452      	add	r2, sl
 8005296:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800529a:	f84c 3b04 	str.w	r3, [ip], #4
 800529e:	f857 3b04 	ldr.w	r3, [r7], #4
 80052a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052a6:	f8bc 3000 	ldrh.w	r3, [ip]
 80052aa:	42bd      	cmp	r5, r7
 80052ac:	fb09 330a 	mla	r3, r9, sl, r3
 80052b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80052b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052b8:	d8e5      	bhi.n	8005286 <__multiply+0xfa>
 80052ba:	9a01      	ldr	r2, [sp, #4]
 80052bc:	50a3      	str	r3, [r4, r2]
 80052be:	3404      	adds	r4, #4
 80052c0:	e79f      	b.n	8005202 <__multiply+0x76>
 80052c2:	3e01      	subs	r6, #1
 80052c4:	e7a1      	b.n	800520a <__multiply+0x7e>
 80052c6:	bf00      	nop
 80052c8:	08008527 	.word	0x08008527
 80052cc:	08008538 	.word	0x08008538

080052d0 <__pow5mult>:
 80052d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052d4:	4615      	mov	r5, r2
 80052d6:	f012 0203 	ands.w	r2, r2, #3
 80052da:	4607      	mov	r7, r0
 80052dc:	460e      	mov	r6, r1
 80052de:	d007      	beq.n	80052f0 <__pow5mult+0x20>
 80052e0:	4c25      	ldr	r4, [pc, #148]	@ (8005378 <__pow5mult+0xa8>)
 80052e2:	3a01      	subs	r2, #1
 80052e4:	2300      	movs	r3, #0
 80052e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80052ea:	f7ff fe5d 	bl	8004fa8 <__multadd>
 80052ee:	4606      	mov	r6, r0
 80052f0:	10ad      	asrs	r5, r5, #2
 80052f2:	d03d      	beq.n	8005370 <__pow5mult+0xa0>
 80052f4:	69fc      	ldr	r4, [r7, #28]
 80052f6:	b97c      	cbnz	r4, 8005318 <__pow5mult+0x48>
 80052f8:	2010      	movs	r0, #16
 80052fa:	f7ff fd3d 	bl	8004d78 <malloc>
 80052fe:	4602      	mov	r2, r0
 8005300:	61f8      	str	r0, [r7, #28]
 8005302:	b928      	cbnz	r0, 8005310 <__pow5mult+0x40>
 8005304:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005308:	4b1c      	ldr	r3, [pc, #112]	@ (800537c <__pow5mult+0xac>)
 800530a:	481d      	ldr	r0, [pc, #116]	@ (8005380 <__pow5mult+0xb0>)
 800530c:	f001 fb56 	bl	80069bc <__assert_func>
 8005310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005314:	6004      	str	r4, [r0, #0]
 8005316:	60c4      	str	r4, [r0, #12]
 8005318:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800531c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005320:	b94c      	cbnz	r4, 8005336 <__pow5mult+0x66>
 8005322:	f240 2171 	movw	r1, #625	@ 0x271
 8005326:	4638      	mov	r0, r7
 8005328:	f7ff ff1a 	bl	8005160 <__i2b>
 800532c:	2300      	movs	r3, #0
 800532e:	4604      	mov	r4, r0
 8005330:	f8c8 0008 	str.w	r0, [r8, #8]
 8005334:	6003      	str	r3, [r0, #0]
 8005336:	f04f 0900 	mov.w	r9, #0
 800533a:	07eb      	lsls	r3, r5, #31
 800533c:	d50a      	bpl.n	8005354 <__pow5mult+0x84>
 800533e:	4631      	mov	r1, r6
 8005340:	4622      	mov	r2, r4
 8005342:	4638      	mov	r0, r7
 8005344:	f7ff ff22 	bl	800518c <__multiply>
 8005348:	4680      	mov	r8, r0
 800534a:	4631      	mov	r1, r6
 800534c:	4638      	mov	r0, r7
 800534e:	f7ff fe09 	bl	8004f64 <_Bfree>
 8005352:	4646      	mov	r6, r8
 8005354:	106d      	asrs	r5, r5, #1
 8005356:	d00b      	beq.n	8005370 <__pow5mult+0xa0>
 8005358:	6820      	ldr	r0, [r4, #0]
 800535a:	b938      	cbnz	r0, 800536c <__pow5mult+0x9c>
 800535c:	4622      	mov	r2, r4
 800535e:	4621      	mov	r1, r4
 8005360:	4638      	mov	r0, r7
 8005362:	f7ff ff13 	bl	800518c <__multiply>
 8005366:	6020      	str	r0, [r4, #0]
 8005368:	f8c0 9000 	str.w	r9, [r0]
 800536c:	4604      	mov	r4, r0
 800536e:	e7e4      	b.n	800533a <__pow5mult+0x6a>
 8005370:	4630      	mov	r0, r6
 8005372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005376:	bf00      	nop
 8005378:	08008648 	.word	0x08008648
 800537c:	080084b8 	.word	0x080084b8
 8005380:	08008538 	.word	0x08008538

08005384 <__lshift>:
 8005384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005388:	460c      	mov	r4, r1
 800538a:	4607      	mov	r7, r0
 800538c:	4691      	mov	r9, r2
 800538e:	6923      	ldr	r3, [r4, #16]
 8005390:	6849      	ldr	r1, [r1, #4]
 8005392:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005396:	68a3      	ldr	r3, [r4, #8]
 8005398:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800539c:	f108 0601 	add.w	r6, r8, #1
 80053a0:	42b3      	cmp	r3, r6
 80053a2:	db0b      	blt.n	80053bc <__lshift+0x38>
 80053a4:	4638      	mov	r0, r7
 80053a6:	f7ff fd9d 	bl	8004ee4 <_Balloc>
 80053aa:	4605      	mov	r5, r0
 80053ac:	b948      	cbnz	r0, 80053c2 <__lshift+0x3e>
 80053ae:	4602      	mov	r2, r0
 80053b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80053b4:	4b27      	ldr	r3, [pc, #156]	@ (8005454 <__lshift+0xd0>)
 80053b6:	4828      	ldr	r0, [pc, #160]	@ (8005458 <__lshift+0xd4>)
 80053b8:	f001 fb00 	bl	80069bc <__assert_func>
 80053bc:	3101      	adds	r1, #1
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	e7ee      	b.n	80053a0 <__lshift+0x1c>
 80053c2:	2300      	movs	r3, #0
 80053c4:	f100 0114 	add.w	r1, r0, #20
 80053c8:	f100 0210 	add.w	r2, r0, #16
 80053cc:	4618      	mov	r0, r3
 80053ce:	4553      	cmp	r3, sl
 80053d0:	db33      	blt.n	800543a <__lshift+0xb6>
 80053d2:	6920      	ldr	r0, [r4, #16]
 80053d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80053d8:	f104 0314 	add.w	r3, r4, #20
 80053dc:	f019 091f 	ands.w	r9, r9, #31
 80053e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80053e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80053e8:	d02b      	beq.n	8005442 <__lshift+0xbe>
 80053ea:	468a      	mov	sl, r1
 80053ec:	2200      	movs	r2, #0
 80053ee:	f1c9 0e20 	rsb	lr, r9, #32
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	fa00 f009 	lsl.w	r0, r0, r9
 80053f8:	4310      	orrs	r0, r2
 80053fa:	f84a 0b04 	str.w	r0, [sl], #4
 80053fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005402:	459c      	cmp	ip, r3
 8005404:	fa22 f20e 	lsr.w	r2, r2, lr
 8005408:	d8f3      	bhi.n	80053f2 <__lshift+0x6e>
 800540a:	ebac 0304 	sub.w	r3, ip, r4
 800540e:	3b15      	subs	r3, #21
 8005410:	f023 0303 	bic.w	r3, r3, #3
 8005414:	3304      	adds	r3, #4
 8005416:	f104 0015 	add.w	r0, r4, #21
 800541a:	4560      	cmp	r0, ip
 800541c:	bf88      	it	hi
 800541e:	2304      	movhi	r3, #4
 8005420:	50ca      	str	r2, [r1, r3]
 8005422:	b10a      	cbz	r2, 8005428 <__lshift+0xa4>
 8005424:	f108 0602 	add.w	r6, r8, #2
 8005428:	3e01      	subs	r6, #1
 800542a:	4638      	mov	r0, r7
 800542c:	4621      	mov	r1, r4
 800542e:	612e      	str	r6, [r5, #16]
 8005430:	f7ff fd98 	bl	8004f64 <_Bfree>
 8005434:	4628      	mov	r0, r5
 8005436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543a:	f842 0f04 	str.w	r0, [r2, #4]!
 800543e:	3301      	adds	r3, #1
 8005440:	e7c5      	b.n	80053ce <__lshift+0x4a>
 8005442:	3904      	subs	r1, #4
 8005444:	f853 2b04 	ldr.w	r2, [r3], #4
 8005448:	459c      	cmp	ip, r3
 800544a:	f841 2f04 	str.w	r2, [r1, #4]!
 800544e:	d8f9      	bhi.n	8005444 <__lshift+0xc0>
 8005450:	e7ea      	b.n	8005428 <__lshift+0xa4>
 8005452:	bf00      	nop
 8005454:	08008527 	.word	0x08008527
 8005458:	08008538 	.word	0x08008538

0800545c <__mcmp>:
 800545c:	4603      	mov	r3, r0
 800545e:	690a      	ldr	r2, [r1, #16]
 8005460:	6900      	ldr	r0, [r0, #16]
 8005462:	b530      	push	{r4, r5, lr}
 8005464:	1a80      	subs	r0, r0, r2
 8005466:	d10e      	bne.n	8005486 <__mcmp+0x2a>
 8005468:	3314      	adds	r3, #20
 800546a:	3114      	adds	r1, #20
 800546c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005470:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005474:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005478:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800547c:	4295      	cmp	r5, r2
 800547e:	d003      	beq.n	8005488 <__mcmp+0x2c>
 8005480:	d205      	bcs.n	800548e <__mcmp+0x32>
 8005482:	f04f 30ff 	mov.w	r0, #4294967295
 8005486:	bd30      	pop	{r4, r5, pc}
 8005488:	42a3      	cmp	r3, r4
 800548a:	d3f3      	bcc.n	8005474 <__mcmp+0x18>
 800548c:	e7fb      	b.n	8005486 <__mcmp+0x2a>
 800548e:	2001      	movs	r0, #1
 8005490:	e7f9      	b.n	8005486 <__mcmp+0x2a>
	...

08005494 <__mdiff>:
 8005494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005498:	4689      	mov	r9, r1
 800549a:	4606      	mov	r6, r0
 800549c:	4611      	mov	r1, r2
 800549e:	4648      	mov	r0, r9
 80054a0:	4614      	mov	r4, r2
 80054a2:	f7ff ffdb 	bl	800545c <__mcmp>
 80054a6:	1e05      	subs	r5, r0, #0
 80054a8:	d112      	bne.n	80054d0 <__mdiff+0x3c>
 80054aa:	4629      	mov	r1, r5
 80054ac:	4630      	mov	r0, r6
 80054ae:	f7ff fd19 	bl	8004ee4 <_Balloc>
 80054b2:	4602      	mov	r2, r0
 80054b4:	b928      	cbnz	r0, 80054c2 <__mdiff+0x2e>
 80054b6:	f240 2137 	movw	r1, #567	@ 0x237
 80054ba:	4b3e      	ldr	r3, [pc, #248]	@ (80055b4 <__mdiff+0x120>)
 80054bc:	483e      	ldr	r0, [pc, #248]	@ (80055b8 <__mdiff+0x124>)
 80054be:	f001 fa7d 	bl	80069bc <__assert_func>
 80054c2:	2301      	movs	r3, #1
 80054c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80054c8:	4610      	mov	r0, r2
 80054ca:	b003      	add	sp, #12
 80054cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d0:	bfbc      	itt	lt
 80054d2:	464b      	movlt	r3, r9
 80054d4:	46a1      	movlt	r9, r4
 80054d6:	4630      	mov	r0, r6
 80054d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80054dc:	bfba      	itte	lt
 80054de:	461c      	movlt	r4, r3
 80054e0:	2501      	movlt	r5, #1
 80054e2:	2500      	movge	r5, #0
 80054e4:	f7ff fcfe 	bl	8004ee4 <_Balloc>
 80054e8:	4602      	mov	r2, r0
 80054ea:	b918      	cbnz	r0, 80054f4 <__mdiff+0x60>
 80054ec:	f240 2145 	movw	r1, #581	@ 0x245
 80054f0:	4b30      	ldr	r3, [pc, #192]	@ (80055b4 <__mdiff+0x120>)
 80054f2:	e7e3      	b.n	80054bc <__mdiff+0x28>
 80054f4:	f100 0b14 	add.w	fp, r0, #20
 80054f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80054fc:	f109 0310 	add.w	r3, r9, #16
 8005500:	60c5      	str	r5, [r0, #12]
 8005502:	f04f 0c00 	mov.w	ip, #0
 8005506:	f109 0514 	add.w	r5, r9, #20
 800550a:	46d9      	mov	r9, fp
 800550c:	6926      	ldr	r6, [r4, #16]
 800550e:	f104 0e14 	add.w	lr, r4, #20
 8005512:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005516:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800551a:	9301      	str	r3, [sp, #4]
 800551c:	9b01      	ldr	r3, [sp, #4]
 800551e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005522:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005526:	b281      	uxth	r1, r0
 8005528:	9301      	str	r3, [sp, #4]
 800552a:	fa1f f38a 	uxth.w	r3, sl
 800552e:	1a5b      	subs	r3, r3, r1
 8005530:	0c00      	lsrs	r0, r0, #16
 8005532:	4463      	add	r3, ip
 8005534:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005538:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800553c:	b29b      	uxth	r3, r3
 800553e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005542:	4576      	cmp	r6, lr
 8005544:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005548:	f849 3b04 	str.w	r3, [r9], #4
 800554c:	d8e6      	bhi.n	800551c <__mdiff+0x88>
 800554e:	1b33      	subs	r3, r6, r4
 8005550:	3b15      	subs	r3, #21
 8005552:	f023 0303 	bic.w	r3, r3, #3
 8005556:	3415      	adds	r4, #21
 8005558:	3304      	adds	r3, #4
 800555a:	42a6      	cmp	r6, r4
 800555c:	bf38      	it	cc
 800555e:	2304      	movcc	r3, #4
 8005560:	441d      	add	r5, r3
 8005562:	445b      	add	r3, fp
 8005564:	461e      	mov	r6, r3
 8005566:	462c      	mov	r4, r5
 8005568:	4544      	cmp	r4, r8
 800556a:	d30e      	bcc.n	800558a <__mdiff+0xf6>
 800556c:	f108 0103 	add.w	r1, r8, #3
 8005570:	1b49      	subs	r1, r1, r5
 8005572:	f021 0103 	bic.w	r1, r1, #3
 8005576:	3d03      	subs	r5, #3
 8005578:	45a8      	cmp	r8, r5
 800557a:	bf38      	it	cc
 800557c:	2100      	movcc	r1, #0
 800557e:	440b      	add	r3, r1
 8005580:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005584:	b199      	cbz	r1, 80055ae <__mdiff+0x11a>
 8005586:	6117      	str	r7, [r2, #16]
 8005588:	e79e      	b.n	80054c8 <__mdiff+0x34>
 800558a:	46e6      	mov	lr, ip
 800558c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005590:	fa1f fc81 	uxth.w	ip, r1
 8005594:	44f4      	add	ip, lr
 8005596:	0c08      	lsrs	r0, r1, #16
 8005598:	4471      	add	r1, lr
 800559a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800559e:	b289      	uxth	r1, r1
 80055a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80055a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80055a8:	f846 1b04 	str.w	r1, [r6], #4
 80055ac:	e7dc      	b.n	8005568 <__mdiff+0xd4>
 80055ae:	3f01      	subs	r7, #1
 80055b0:	e7e6      	b.n	8005580 <__mdiff+0xec>
 80055b2:	bf00      	nop
 80055b4:	08008527 	.word	0x08008527
 80055b8:	08008538 	.word	0x08008538

080055bc <__ulp>:
 80055bc:	4b0e      	ldr	r3, [pc, #56]	@ (80055f8 <__ulp+0x3c>)
 80055be:	400b      	ands	r3, r1
 80055c0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	dc08      	bgt.n	80055da <__ulp+0x1e>
 80055c8:	425b      	negs	r3, r3
 80055ca:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80055ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 80055d2:	da04      	bge.n	80055de <__ulp+0x22>
 80055d4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80055d8:	4113      	asrs	r3, r2
 80055da:	2200      	movs	r2, #0
 80055dc:	e008      	b.n	80055f0 <__ulp+0x34>
 80055de:	f1a2 0314 	sub.w	r3, r2, #20
 80055e2:	2b1e      	cmp	r3, #30
 80055e4:	bfd6      	itet	le
 80055e6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80055ea:	2201      	movgt	r2, #1
 80055ec:	40da      	lsrle	r2, r3
 80055ee:	2300      	movs	r3, #0
 80055f0:	4619      	mov	r1, r3
 80055f2:	4610      	mov	r0, r2
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	7ff00000 	.word	0x7ff00000

080055fc <__b2d>:
 80055fc:	6902      	ldr	r2, [r0, #16]
 80055fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005600:	f100 0614 	add.w	r6, r0, #20
 8005604:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005608:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800560c:	4f1e      	ldr	r7, [pc, #120]	@ (8005688 <__b2d+0x8c>)
 800560e:	4620      	mov	r0, r4
 8005610:	f7ff fd5a 	bl	80050c8 <__hi0bits>
 8005614:	4603      	mov	r3, r0
 8005616:	f1c0 0020 	rsb	r0, r0, #32
 800561a:	2b0a      	cmp	r3, #10
 800561c:	f1a2 0504 	sub.w	r5, r2, #4
 8005620:	6008      	str	r0, [r1, #0]
 8005622:	dc12      	bgt.n	800564a <__b2d+0x4e>
 8005624:	42ae      	cmp	r6, r5
 8005626:	bf2c      	ite	cs
 8005628:	2200      	movcs	r2, #0
 800562a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800562e:	f1c3 0c0b 	rsb	ip, r3, #11
 8005632:	3315      	adds	r3, #21
 8005634:	fa24 fe0c 	lsr.w	lr, r4, ip
 8005638:	fa04 f303 	lsl.w	r3, r4, r3
 800563c:	fa22 f20c 	lsr.w	r2, r2, ip
 8005640:	ea4e 0107 	orr.w	r1, lr, r7
 8005644:	431a      	orrs	r2, r3
 8005646:	4610      	mov	r0, r2
 8005648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800564a:	42ae      	cmp	r6, r5
 800564c:	bf36      	itet	cc
 800564e:	f1a2 0508 	subcc.w	r5, r2, #8
 8005652:	2200      	movcs	r2, #0
 8005654:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005658:	3b0b      	subs	r3, #11
 800565a:	d012      	beq.n	8005682 <__b2d+0x86>
 800565c:	f1c3 0720 	rsb	r7, r3, #32
 8005660:	fa22 f107 	lsr.w	r1, r2, r7
 8005664:	409c      	lsls	r4, r3
 8005666:	430c      	orrs	r4, r1
 8005668:	42b5      	cmp	r5, r6
 800566a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800566e:	bf94      	ite	ls
 8005670:	2400      	movls	r4, #0
 8005672:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8005676:	409a      	lsls	r2, r3
 8005678:	40fc      	lsrs	r4, r7
 800567a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800567e:	4322      	orrs	r2, r4
 8005680:	e7e1      	b.n	8005646 <__b2d+0x4a>
 8005682:	ea44 0107 	orr.w	r1, r4, r7
 8005686:	e7de      	b.n	8005646 <__b2d+0x4a>
 8005688:	3ff00000 	.word	0x3ff00000

0800568c <__d2b>:
 800568c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005690:	2101      	movs	r1, #1
 8005692:	4690      	mov	r8, r2
 8005694:	4699      	mov	r9, r3
 8005696:	9e08      	ldr	r6, [sp, #32]
 8005698:	f7ff fc24 	bl	8004ee4 <_Balloc>
 800569c:	4604      	mov	r4, r0
 800569e:	b930      	cbnz	r0, 80056ae <__d2b+0x22>
 80056a0:	4602      	mov	r2, r0
 80056a2:	f240 310f 	movw	r1, #783	@ 0x30f
 80056a6:	4b23      	ldr	r3, [pc, #140]	@ (8005734 <__d2b+0xa8>)
 80056a8:	4823      	ldr	r0, [pc, #140]	@ (8005738 <__d2b+0xac>)
 80056aa:	f001 f987 	bl	80069bc <__assert_func>
 80056ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80056b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80056b6:	b10d      	cbz	r5, 80056bc <__d2b+0x30>
 80056b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	f1b8 0300 	subs.w	r3, r8, #0
 80056c2:	d024      	beq.n	800570e <__d2b+0x82>
 80056c4:	4668      	mov	r0, sp
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	f7ff fd1d 	bl	8005106 <__lo0bits>
 80056cc:	e9dd 1200 	ldrd	r1, r2, [sp]
 80056d0:	b1d8      	cbz	r0, 800570a <__d2b+0x7e>
 80056d2:	f1c0 0320 	rsb	r3, r0, #32
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	430b      	orrs	r3, r1
 80056dc:	40c2      	lsrs	r2, r0
 80056de:	6163      	str	r3, [r4, #20]
 80056e0:	9201      	str	r2, [sp, #4]
 80056e2:	9b01      	ldr	r3, [sp, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	bf0c      	ite	eq
 80056e8:	2201      	moveq	r2, #1
 80056ea:	2202      	movne	r2, #2
 80056ec:	61a3      	str	r3, [r4, #24]
 80056ee:	6122      	str	r2, [r4, #16]
 80056f0:	b1ad      	cbz	r5, 800571e <__d2b+0x92>
 80056f2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80056f6:	4405      	add	r5, r0
 80056f8:	6035      	str	r5, [r6, #0]
 80056fa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80056fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005700:	6018      	str	r0, [r3, #0]
 8005702:	4620      	mov	r0, r4
 8005704:	b002      	add	sp, #8
 8005706:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800570a:	6161      	str	r1, [r4, #20]
 800570c:	e7e9      	b.n	80056e2 <__d2b+0x56>
 800570e:	a801      	add	r0, sp, #4
 8005710:	f7ff fcf9 	bl	8005106 <__lo0bits>
 8005714:	9b01      	ldr	r3, [sp, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	6163      	str	r3, [r4, #20]
 800571a:	3020      	adds	r0, #32
 800571c:	e7e7      	b.n	80056ee <__d2b+0x62>
 800571e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005722:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005726:	6030      	str	r0, [r6, #0]
 8005728:	6918      	ldr	r0, [r3, #16]
 800572a:	f7ff fccd 	bl	80050c8 <__hi0bits>
 800572e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005732:	e7e4      	b.n	80056fe <__d2b+0x72>
 8005734:	08008527 	.word	0x08008527
 8005738:	08008538 	.word	0x08008538

0800573c <__ratio>:
 800573c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005740:	b085      	sub	sp, #20
 8005742:	e9cd 1000 	strd	r1, r0, [sp]
 8005746:	a902      	add	r1, sp, #8
 8005748:	f7ff ff58 	bl	80055fc <__b2d>
 800574c:	468b      	mov	fp, r1
 800574e:	4606      	mov	r6, r0
 8005750:	460f      	mov	r7, r1
 8005752:	9800      	ldr	r0, [sp, #0]
 8005754:	a903      	add	r1, sp, #12
 8005756:	f7ff ff51 	bl	80055fc <__b2d>
 800575a:	460d      	mov	r5, r1
 800575c:	9b01      	ldr	r3, [sp, #4]
 800575e:	4689      	mov	r9, r1
 8005760:	6919      	ldr	r1, [r3, #16]
 8005762:	9b00      	ldr	r3, [sp, #0]
 8005764:	4604      	mov	r4, r0
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	4630      	mov	r0, r6
 800576a:	1ac9      	subs	r1, r1, r3
 800576c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005776:	2b00      	cmp	r3, #0
 8005778:	bfcd      	iteet	gt
 800577a:	463a      	movgt	r2, r7
 800577c:	462a      	movle	r2, r5
 800577e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005782:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005786:	bfd8      	it	le
 8005788:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800578c:	464b      	mov	r3, r9
 800578e:	4622      	mov	r2, r4
 8005790:	4659      	mov	r1, fp
 8005792:	f7fa ffcb 	bl	800072c <__aeabi_ddiv>
 8005796:	b005      	add	sp, #20
 8005798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800579c <__copybits>:
 800579c:	3901      	subs	r1, #1
 800579e:	b570      	push	{r4, r5, r6, lr}
 80057a0:	1149      	asrs	r1, r1, #5
 80057a2:	6914      	ldr	r4, [r2, #16]
 80057a4:	3101      	adds	r1, #1
 80057a6:	f102 0314 	add.w	r3, r2, #20
 80057aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80057ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80057b2:	1f05      	subs	r5, r0, #4
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	d30c      	bcc.n	80057d2 <__copybits+0x36>
 80057b8:	1aa3      	subs	r3, r4, r2
 80057ba:	3b11      	subs	r3, #17
 80057bc:	f023 0303 	bic.w	r3, r3, #3
 80057c0:	3211      	adds	r2, #17
 80057c2:	42a2      	cmp	r2, r4
 80057c4:	bf88      	it	hi
 80057c6:	2300      	movhi	r3, #0
 80057c8:	4418      	add	r0, r3
 80057ca:	2300      	movs	r3, #0
 80057cc:	4288      	cmp	r0, r1
 80057ce:	d305      	bcc.n	80057dc <__copybits+0x40>
 80057d0:	bd70      	pop	{r4, r5, r6, pc}
 80057d2:	f853 6b04 	ldr.w	r6, [r3], #4
 80057d6:	f845 6f04 	str.w	r6, [r5, #4]!
 80057da:	e7eb      	b.n	80057b4 <__copybits+0x18>
 80057dc:	f840 3b04 	str.w	r3, [r0], #4
 80057e0:	e7f4      	b.n	80057cc <__copybits+0x30>

080057e2 <__any_on>:
 80057e2:	f100 0214 	add.w	r2, r0, #20
 80057e6:	6900      	ldr	r0, [r0, #16]
 80057e8:	114b      	asrs	r3, r1, #5
 80057ea:	4298      	cmp	r0, r3
 80057ec:	b510      	push	{r4, lr}
 80057ee:	db11      	blt.n	8005814 <__any_on+0x32>
 80057f0:	dd0a      	ble.n	8005808 <__any_on+0x26>
 80057f2:	f011 011f 	ands.w	r1, r1, #31
 80057f6:	d007      	beq.n	8005808 <__any_on+0x26>
 80057f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80057fc:	fa24 f001 	lsr.w	r0, r4, r1
 8005800:	fa00 f101 	lsl.w	r1, r0, r1
 8005804:	428c      	cmp	r4, r1
 8005806:	d10b      	bne.n	8005820 <__any_on+0x3e>
 8005808:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800580c:	4293      	cmp	r3, r2
 800580e:	d803      	bhi.n	8005818 <__any_on+0x36>
 8005810:	2000      	movs	r0, #0
 8005812:	bd10      	pop	{r4, pc}
 8005814:	4603      	mov	r3, r0
 8005816:	e7f7      	b.n	8005808 <__any_on+0x26>
 8005818:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800581c:	2900      	cmp	r1, #0
 800581e:	d0f5      	beq.n	800580c <__any_on+0x2a>
 8005820:	2001      	movs	r0, #1
 8005822:	e7f6      	b.n	8005812 <__any_on+0x30>

08005824 <sulp>:
 8005824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005828:	460f      	mov	r7, r1
 800582a:	4690      	mov	r8, r2
 800582c:	f7ff fec6 	bl	80055bc <__ulp>
 8005830:	4604      	mov	r4, r0
 8005832:	460d      	mov	r5, r1
 8005834:	f1b8 0f00 	cmp.w	r8, #0
 8005838:	d011      	beq.n	800585e <sulp+0x3a>
 800583a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800583e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005842:	2b00      	cmp	r3, #0
 8005844:	dd0b      	ble.n	800585e <sulp+0x3a>
 8005846:	2400      	movs	r4, #0
 8005848:	051b      	lsls	r3, r3, #20
 800584a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800584e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005852:	4622      	mov	r2, r4
 8005854:	462b      	mov	r3, r5
 8005856:	f7fa fe3f 	bl	80004d8 <__aeabi_dmul>
 800585a:	4604      	mov	r4, r0
 800585c:	460d      	mov	r5, r1
 800585e:	4620      	mov	r0, r4
 8005860:	4629      	mov	r1, r5
 8005862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005868 <_strtod_l>:
 8005868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586c:	b09f      	sub	sp, #124	@ 0x7c
 800586e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005870:	2200      	movs	r2, #0
 8005872:	460c      	mov	r4, r1
 8005874:	921a      	str	r2, [sp, #104]	@ 0x68
 8005876:	f04f 0a00 	mov.w	sl, #0
 800587a:	f04f 0b00 	mov.w	fp, #0
 800587e:	460a      	mov	r2, r1
 8005880:	9005      	str	r0, [sp, #20]
 8005882:	9219      	str	r2, [sp, #100]	@ 0x64
 8005884:	7811      	ldrb	r1, [r2, #0]
 8005886:	292b      	cmp	r1, #43	@ 0x2b
 8005888:	d048      	beq.n	800591c <_strtod_l+0xb4>
 800588a:	d836      	bhi.n	80058fa <_strtod_l+0x92>
 800588c:	290d      	cmp	r1, #13
 800588e:	d830      	bhi.n	80058f2 <_strtod_l+0x8a>
 8005890:	2908      	cmp	r1, #8
 8005892:	d830      	bhi.n	80058f6 <_strtod_l+0x8e>
 8005894:	2900      	cmp	r1, #0
 8005896:	d039      	beq.n	800590c <_strtod_l+0xa4>
 8005898:	2200      	movs	r2, #0
 800589a:	920e      	str	r2, [sp, #56]	@ 0x38
 800589c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800589e:	782a      	ldrb	r2, [r5, #0]
 80058a0:	2a30      	cmp	r2, #48	@ 0x30
 80058a2:	f040 80b0 	bne.w	8005a06 <_strtod_l+0x19e>
 80058a6:	786a      	ldrb	r2, [r5, #1]
 80058a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80058ac:	2a58      	cmp	r2, #88	@ 0x58
 80058ae:	d16c      	bne.n	800598a <_strtod_l+0x122>
 80058b0:	9302      	str	r3, [sp, #8]
 80058b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058b4:	4a8f      	ldr	r2, [pc, #572]	@ (8005af4 <_strtod_l+0x28c>)
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	ab1a      	add	r3, sp, #104	@ 0x68
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	9805      	ldr	r0, [sp, #20]
 80058be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80058c0:	a919      	add	r1, sp, #100	@ 0x64
 80058c2:	f001 f915 	bl	8006af0 <__gethex>
 80058c6:	f010 060f 	ands.w	r6, r0, #15
 80058ca:	4604      	mov	r4, r0
 80058cc:	d005      	beq.n	80058da <_strtod_l+0x72>
 80058ce:	2e06      	cmp	r6, #6
 80058d0:	d126      	bne.n	8005920 <_strtod_l+0xb8>
 80058d2:	2300      	movs	r3, #0
 80058d4:	3501      	adds	r5, #1
 80058d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80058d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80058da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f040 8582 	bne.w	80063e6 <_strtod_l+0xb7e>
 80058e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058e4:	b1bb      	cbz	r3, 8005916 <_strtod_l+0xae>
 80058e6:	4650      	mov	r0, sl
 80058e8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80058ec:	b01f      	add	sp, #124	@ 0x7c
 80058ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058f2:	2920      	cmp	r1, #32
 80058f4:	d1d0      	bne.n	8005898 <_strtod_l+0x30>
 80058f6:	3201      	adds	r2, #1
 80058f8:	e7c3      	b.n	8005882 <_strtod_l+0x1a>
 80058fa:	292d      	cmp	r1, #45	@ 0x2d
 80058fc:	d1cc      	bne.n	8005898 <_strtod_l+0x30>
 80058fe:	2101      	movs	r1, #1
 8005900:	910e      	str	r1, [sp, #56]	@ 0x38
 8005902:	1c51      	adds	r1, r2, #1
 8005904:	9119      	str	r1, [sp, #100]	@ 0x64
 8005906:	7852      	ldrb	r2, [r2, #1]
 8005908:	2a00      	cmp	r2, #0
 800590a:	d1c7      	bne.n	800589c <_strtod_l+0x34>
 800590c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800590e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005910:	2b00      	cmp	r3, #0
 8005912:	f040 8566 	bne.w	80063e2 <_strtod_l+0xb7a>
 8005916:	4650      	mov	r0, sl
 8005918:	4659      	mov	r1, fp
 800591a:	e7e7      	b.n	80058ec <_strtod_l+0x84>
 800591c:	2100      	movs	r1, #0
 800591e:	e7ef      	b.n	8005900 <_strtod_l+0x98>
 8005920:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005922:	b13a      	cbz	r2, 8005934 <_strtod_l+0xcc>
 8005924:	2135      	movs	r1, #53	@ 0x35
 8005926:	a81c      	add	r0, sp, #112	@ 0x70
 8005928:	f7ff ff38 	bl	800579c <__copybits>
 800592c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800592e:	9805      	ldr	r0, [sp, #20]
 8005930:	f7ff fb18 	bl	8004f64 <_Bfree>
 8005934:	3e01      	subs	r6, #1
 8005936:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005938:	2e04      	cmp	r6, #4
 800593a:	d806      	bhi.n	800594a <_strtod_l+0xe2>
 800593c:	e8df f006 	tbb	[pc, r6]
 8005940:	201d0314 	.word	0x201d0314
 8005944:	14          	.byte	0x14
 8005945:	00          	.byte	0x00
 8005946:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800594a:	05e1      	lsls	r1, r4, #23
 800594c:	bf48      	it	mi
 800594e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005952:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005956:	0d1b      	lsrs	r3, r3, #20
 8005958:	051b      	lsls	r3, r3, #20
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1bd      	bne.n	80058da <_strtod_l+0x72>
 800595e:	f7fe fb25 	bl	8003fac <__errno>
 8005962:	2322      	movs	r3, #34	@ 0x22
 8005964:	6003      	str	r3, [r0, #0]
 8005966:	e7b8      	b.n	80058da <_strtod_l+0x72>
 8005968:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800596c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005970:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005974:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005978:	e7e7      	b.n	800594a <_strtod_l+0xe2>
 800597a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005af8 <_strtod_l+0x290>
 800597e:	e7e4      	b.n	800594a <_strtod_l+0xe2>
 8005980:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005984:	f04f 3aff 	mov.w	sl, #4294967295
 8005988:	e7df      	b.n	800594a <_strtod_l+0xe2>
 800598a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	2b30      	cmp	r3, #48	@ 0x30
 8005994:	d0f9      	beq.n	800598a <_strtod_l+0x122>
 8005996:	2b00      	cmp	r3, #0
 8005998:	d09f      	beq.n	80058da <_strtod_l+0x72>
 800599a:	2301      	movs	r3, #1
 800599c:	2700      	movs	r7, #0
 800599e:	220a      	movs	r2, #10
 80059a0:	46b9      	mov	r9, r7
 80059a2:	9308      	str	r3, [sp, #32]
 80059a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80059a6:	970b      	str	r7, [sp, #44]	@ 0x2c
 80059a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80059aa:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80059ac:	7805      	ldrb	r5, [r0, #0]
 80059ae:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80059b2:	b2d9      	uxtb	r1, r3
 80059b4:	2909      	cmp	r1, #9
 80059b6:	d928      	bls.n	8005a0a <_strtod_l+0x1a2>
 80059b8:	2201      	movs	r2, #1
 80059ba:	4950      	ldr	r1, [pc, #320]	@ (8005afc <_strtod_l+0x294>)
 80059bc:	f000 ffc8 	bl	8006950 <strncmp>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d032      	beq.n	8005a2a <_strtod_l+0x1c2>
 80059c4:	2000      	movs	r0, #0
 80059c6:	462a      	mov	r2, r5
 80059c8:	4603      	mov	r3, r0
 80059ca:	464d      	mov	r5, r9
 80059cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80059ce:	2a65      	cmp	r2, #101	@ 0x65
 80059d0:	d001      	beq.n	80059d6 <_strtod_l+0x16e>
 80059d2:	2a45      	cmp	r2, #69	@ 0x45
 80059d4:	d114      	bne.n	8005a00 <_strtod_l+0x198>
 80059d6:	b91d      	cbnz	r5, 80059e0 <_strtod_l+0x178>
 80059d8:	9a08      	ldr	r2, [sp, #32]
 80059da:	4302      	orrs	r2, r0
 80059dc:	d096      	beq.n	800590c <_strtod_l+0xa4>
 80059de:	2500      	movs	r5, #0
 80059e0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80059e2:	1c62      	adds	r2, r4, #1
 80059e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80059e6:	7862      	ldrb	r2, [r4, #1]
 80059e8:	2a2b      	cmp	r2, #43	@ 0x2b
 80059ea:	d07a      	beq.n	8005ae2 <_strtod_l+0x27a>
 80059ec:	2a2d      	cmp	r2, #45	@ 0x2d
 80059ee:	d07e      	beq.n	8005aee <_strtod_l+0x286>
 80059f0:	f04f 0c00 	mov.w	ip, #0
 80059f4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80059f8:	2909      	cmp	r1, #9
 80059fa:	f240 8085 	bls.w	8005b08 <_strtod_l+0x2a0>
 80059fe:	9419      	str	r4, [sp, #100]	@ 0x64
 8005a00:	f04f 0800 	mov.w	r8, #0
 8005a04:	e0a5      	b.n	8005b52 <_strtod_l+0x2ea>
 8005a06:	2300      	movs	r3, #0
 8005a08:	e7c8      	b.n	800599c <_strtod_l+0x134>
 8005a0a:	f1b9 0f08 	cmp.w	r9, #8
 8005a0e:	bfd8      	it	le
 8005a10:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8005a12:	f100 0001 	add.w	r0, r0, #1
 8005a16:	bfd6      	itet	le
 8005a18:	fb02 3301 	mlale	r3, r2, r1, r3
 8005a1c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8005a20:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8005a22:	f109 0901 	add.w	r9, r9, #1
 8005a26:	9019      	str	r0, [sp, #100]	@ 0x64
 8005a28:	e7bf      	b.n	80059aa <_strtod_l+0x142>
 8005a2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a30:	785a      	ldrb	r2, [r3, #1]
 8005a32:	f1b9 0f00 	cmp.w	r9, #0
 8005a36:	d03b      	beq.n	8005ab0 <_strtod_l+0x248>
 8005a38:	464d      	mov	r5, r9
 8005a3a:	900a      	str	r0, [sp, #40]	@ 0x28
 8005a3c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005a40:	2b09      	cmp	r3, #9
 8005a42:	d912      	bls.n	8005a6a <_strtod_l+0x202>
 8005a44:	2301      	movs	r3, #1
 8005a46:	e7c2      	b.n	80059ce <_strtod_l+0x166>
 8005a48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a50:	785a      	ldrb	r2, [r3, #1]
 8005a52:	2a30      	cmp	r2, #48	@ 0x30
 8005a54:	d0f8      	beq.n	8005a48 <_strtod_l+0x1e0>
 8005a56:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	f200 84c8 	bhi.w	80063f0 <_strtod_l+0xb88>
 8005a60:	900a      	str	r0, [sp, #40]	@ 0x28
 8005a62:	2000      	movs	r0, #0
 8005a64:	4605      	mov	r5, r0
 8005a66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a68:	930c      	str	r3, [sp, #48]	@ 0x30
 8005a6a:	3a30      	subs	r2, #48	@ 0x30
 8005a6c:	f100 0301 	add.w	r3, r0, #1
 8005a70:	d018      	beq.n	8005aa4 <_strtod_l+0x23c>
 8005a72:	462e      	mov	r6, r5
 8005a74:	f04f 0e0a 	mov.w	lr, #10
 8005a78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a7a:	4419      	add	r1, r3
 8005a7c:	910a      	str	r1, [sp, #40]	@ 0x28
 8005a7e:	1c71      	adds	r1, r6, #1
 8005a80:	eba1 0c05 	sub.w	ip, r1, r5
 8005a84:	4563      	cmp	r3, ip
 8005a86:	dc15      	bgt.n	8005ab4 <_strtod_l+0x24c>
 8005a88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005a8c:	182b      	adds	r3, r5, r0
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	f105 0501 	add.w	r5, r5, #1
 8005a94:	4405      	add	r5, r0
 8005a96:	dc1a      	bgt.n	8005ace <_strtod_l+0x266>
 8005a98:	230a      	movs	r3, #10
 8005a9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005a9c:	fb03 2301 	mla	r3, r3, r1, r2
 8005aa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	1c51      	adds	r1, r2, #1
 8005aaa:	9119      	str	r1, [sp, #100]	@ 0x64
 8005aac:	7852      	ldrb	r2, [r2, #1]
 8005aae:	e7c5      	b.n	8005a3c <_strtod_l+0x1d4>
 8005ab0:	4648      	mov	r0, r9
 8005ab2:	e7ce      	b.n	8005a52 <_strtod_l+0x1ea>
 8005ab4:	2e08      	cmp	r6, #8
 8005ab6:	dc05      	bgt.n	8005ac4 <_strtod_l+0x25c>
 8005ab8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005aba:	fb0e f606 	mul.w	r6, lr, r6
 8005abe:	960b      	str	r6, [sp, #44]	@ 0x2c
 8005ac0:	460e      	mov	r6, r1
 8005ac2:	e7dc      	b.n	8005a7e <_strtod_l+0x216>
 8005ac4:	2910      	cmp	r1, #16
 8005ac6:	bfd8      	it	le
 8005ac8:	fb0e f707 	mulle.w	r7, lr, r7
 8005acc:	e7f8      	b.n	8005ac0 <_strtod_l+0x258>
 8005ace:	2b0f      	cmp	r3, #15
 8005ad0:	bfdc      	itt	le
 8005ad2:	230a      	movle	r3, #10
 8005ad4:	fb03 2707 	mlale	r7, r3, r7, r2
 8005ad8:	e7e3      	b.n	8005aa2 <_strtod_l+0x23a>
 8005ada:	2300      	movs	r3, #0
 8005adc:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e77a      	b.n	80059d8 <_strtod_l+0x170>
 8005ae2:	f04f 0c00 	mov.w	ip, #0
 8005ae6:	1ca2      	adds	r2, r4, #2
 8005ae8:	9219      	str	r2, [sp, #100]	@ 0x64
 8005aea:	78a2      	ldrb	r2, [r4, #2]
 8005aec:	e782      	b.n	80059f4 <_strtod_l+0x18c>
 8005aee:	f04f 0c01 	mov.w	ip, #1
 8005af2:	e7f8      	b.n	8005ae6 <_strtod_l+0x27e>
 8005af4:	0800875c 	.word	0x0800875c
 8005af8:	7ff00000 	.word	0x7ff00000
 8005afc:	08008591 	.word	0x08008591
 8005b00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005b02:	1c51      	adds	r1, r2, #1
 8005b04:	9119      	str	r1, [sp, #100]	@ 0x64
 8005b06:	7852      	ldrb	r2, [r2, #1]
 8005b08:	2a30      	cmp	r2, #48	@ 0x30
 8005b0a:	d0f9      	beq.n	8005b00 <_strtod_l+0x298>
 8005b0c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005b10:	2908      	cmp	r1, #8
 8005b12:	f63f af75 	bhi.w	8005a00 <_strtod_l+0x198>
 8005b16:	f04f 080a 	mov.w	r8, #10
 8005b1a:	3a30      	subs	r2, #48	@ 0x30
 8005b1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b1e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005b20:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005b22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005b24:	1c56      	adds	r6, r2, #1
 8005b26:	9619      	str	r6, [sp, #100]	@ 0x64
 8005b28:	7852      	ldrb	r2, [r2, #1]
 8005b2a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005b2e:	f1be 0f09 	cmp.w	lr, #9
 8005b32:	d939      	bls.n	8005ba8 <_strtod_l+0x340>
 8005b34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005b36:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005b3a:	1a76      	subs	r6, r6, r1
 8005b3c:	2e08      	cmp	r6, #8
 8005b3e:	dc03      	bgt.n	8005b48 <_strtod_l+0x2e0>
 8005b40:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b42:	4588      	cmp	r8, r1
 8005b44:	bfa8      	it	ge
 8005b46:	4688      	movge	r8, r1
 8005b48:	f1bc 0f00 	cmp.w	ip, #0
 8005b4c:	d001      	beq.n	8005b52 <_strtod_l+0x2ea>
 8005b4e:	f1c8 0800 	rsb	r8, r8, #0
 8005b52:	2d00      	cmp	r5, #0
 8005b54:	d14e      	bne.n	8005bf4 <_strtod_l+0x38c>
 8005b56:	9908      	ldr	r1, [sp, #32]
 8005b58:	4308      	orrs	r0, r1
 8005b5a:	f47f aebe 	bne.w	80058da <_strtod_l+0x72>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f47f aed4 	bne.w	800590c <_strtod_l+0xa4>
 8005b64:	2a69      	cmp	r2, #105	@ 0x69
 8005b66:	d028      	beq.n	8005bba <_strtod_l+0x352>
 8005b68:	dc25      	bgt.n	8005bb6 <_strtod_l+0x34e>
 8005b6a:	2a49      	cmp	r2, #73	@ 0x49
 8005b6c:	d025      	beq.n	8005bba <_strtod_l+0x352>
 8005b6e:	2a4e      	cmp	r2, #78	@ 0x4e
 8005b70:	f47f aecc 	bne.w	800590c <_strtod_l+0xa4>
 8005b74:	4999      	ldr	r1, [pc, #612]	@ (8005ddc <_strtod_l+0x574>)
 8005b76:	a819      	add	r0, sp, #100	@ 0x64
 8005b78:	f001 f9dc 	bl	8006f34 <__match>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	f43f aec5 	beq.w	800590c <_strtod_l+0xa4>
 8005b82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b28      	cmp	r3, #40	@ 0x28
 8005b88:	d12e      	bne.n	8005be8 <_strtod_l+0x380>
 8005b8a:	4995      	ldr	r1, [pc, #596]	@ (8005de0 <_strtod_l+0x578>)
 8005b8c:	aa1c      	add	r2, sp, #112	@ 0x70
 8005b8e:	a819      	add	r0, sp, #100	@ 0x64
 8005b90:	f001 f9e4 	bl	8006f5c <__hexnan>
 8005b94:	2805      	cmp	r0, #5
 8005b96:	d127      	bne.n	8005be8 <_strtod_l+0x380>
 8005b98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005b9a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005b9e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005ba2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005ba6:	e698      	b.n	80058da <_strtod_l+0x72>
 8005ba8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005baa:	fb08 2101 	mla	r1, r8, r1, r2
 8005bae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005bb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bb4:	e7b5      	b.n	8005b22 <_strtod_l+0x2ba>
 8005bb6:	2a6e      	cmp	r2, #110	@ 0x6e
 8005bb8:	e7da      	b.n	8005b70 <_strtod_l+0x308>
 8005bba:	498a      	ldr	r1, [pc, #552]	@ (8005de4 <_strtod_l+0x57c>)
 8005bbc:	a819      	add	r0, sp, #100	@ 0x64
 8005bbe:	f001 f9b9 	bl	8006f34 <__match>
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	f43f aea2 	beq.w	800590c <_strtod_l+0xa4>
 8005bc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bca:	4987      	ldr	r1, [pc, #540]	@ (8005de8 <_strtod_l+0x580>)
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	a819      	add	r0, sp, #100	@ 0x64
 8005bd0:	9319      	str	r3, [sp, #100]	@ 0x64
 8005bd2:	f001 f9af 	bl	8006f34 <__match>
 8005bd6:	b910      	cbnz	r0, 8005bde <_strtod_l+0x376>
 8005bd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bda:	3301      	adds	r3, #1
 8005bdc:	9319      	str	r3, [sp, #100]	@ 0x64
 8005bde:	f04f 0a00 	mov.w	sl, #0
 8005be2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8005dec <_strtod_l+0x584>
 8005be6:	e678      	b.n	80058da <_strtod_l+0x72>
 8005be8:	4881      	ldr	r0, [pc, #516]	@ (8005df0 <_strtod_l+0x588>)
 8005bea:	f000 fee1 	bl	80069b0 <nan>
 8005bee:	4682      	mov	sl, r0
 8005bf0:	468b      	mov	fp, r1
 8005bf2:	e672      	b.n	80058da <_strtod_l+0x72>
 8005bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bf6:	f1b9 0f00 	cmp.w	r9, #0
 8005bfa:	bf08      	it	eq
 8005bfc:	46a9      	moveq	r9, r5
 8005bfe:	eba8 0303 	sub.w	r3, r8, r3
 8005c02:	2d10      	cmp	r5, #16
 8005c04:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005c06:	462c      	mov	r4, r5
 8005c08:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c0a:	bfa8      	it	ge
 8005c0c:	2410      	movge	r4, #16
 8005c0e:	f7fa fbe9 	bl	80003e4 <__aeabi_ui2d>
 8005c12:	2d09      	cmp	r5, #9
 8005c14:	4682      	mov	sl, r0
 8005c16:	468b      	mov	fp, r1
 8005c18:	dc11      	bgt.n	8005c3e <_strtod_l+0x3d6>
 8005c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f43f ae5c 	beq.w	80058da <_strtod_l+0x72>
 8005c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c24:	dd76      	ble.n	8005d14 <_strtod_l+0x4ac>
 8005c26:	2b16      	cmp	r3, #22
 8005c28:	dc5d      	bgt.n	8005ce6 <_strtod_l+0x47e>
 8005c2a:	4972      	ldr	r1, [pc, #456]	@ (8005df4 <_strtod_l+0x58c>)
 8005c2c:	4652      	mov	r2, sl
 8005c2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c32:	465b      	mov	r3, fp
 8005c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c38:	f7fa fc4e 	bl	80004d8 <__aeabi_dmul>
 8005c3c:	e7d7      	b.n	8005bee <_strtod_l+0x386>
 8005c3e:	4b6d      	ldr	r3, [pc, #436]	@ (8005df4 <_strtod_l+0x58c>)
 8005c40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c44:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005c48:	f7fa fc46 	bl	80004d8 <__aeabi_dmul>
 8005c4c:	4682      	mov	sl, r0
 8005c4e:	4638      	mov	r0, r7
 8005c50:	468b      	mov	fp, r1
 8005c52:	f7fa fbc7 	bl	80003e4 <__aeabi_ui2d>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4650      	mov	r0, sl
 8005c5c:	4659      	mov	r1, fp
 8005c5e:	f7fa fa85 	bl	800016c <__adddf3>
 8005c62:	2d0f      	cmp	r5, #15
 8005c64:	4682      	mov	sl, r0
 8005c66:	468b      	mov	fp, r1
 8005c68:	ddd7      	ble.n	8005c1a <_strtod_l+0x3b2>
 8005c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c6c:	1b2c      	subs	r4, r5, r4
 8005c6e:	441c      	add	r4, r3
 8005c70:	2c00      	cmp	r4, #0
 8005c72:	f340 8093 	ble.w	8005d9c <_strtod_l+0x534>
 8005c76:	f014 030f 	ands.w	r3, r4, #15
 8005c7a:	d00a      	beq.n	8005c92 <_strtod_l+0x42a>
 8005c7c:	495d      	ldr	r1, [pc, #372]	@ (8005df4 <_strtod_l+0x58c>)
 8005c7e:	4652      	mov	r2, sl
 8005c80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c88:	465b      	mov	r3, fp
 8005c8a:	f7fa fc25 	bl	80004d8 <__aeabi_dmul>
 8005c8e:	4682      	mov	sl, r0
 8005c90:	468b      	mov	fp, r1
 8005c92:	f034 040f 	bics.w	r4, r4, #15
 8005c96:	d073      	beq.n	8005d80 <_strtod_l+0x518>
 8005c98:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005c9c:	dd49      	ble.n	8005d32 <_strtod_l+0x4ca>
 8005c9e:	2400      	movs	r4, #0
 8005ca0:	46a0      	mov	r8, r4
 8005ca2:	46a1      	mov	r9, r4
 8005ca4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005ca6:	2322      	movs	r3, #34	@ 0x22
 8005ca8:	f04f 0a00 	mov.w	sl, #0
 8005cac:	9a05      	ldr	r2, [sp, #20]
 8005cae:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8005dec <_strtod_l+0x584>
 8005cb2:	6013      	str	r3, [r2, #0]
 8005cb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f43f ae0f 	beq.w	80058da <_strtod_l+0x72>
 8005cbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005cbe:	9805      	ldr	r0, [sp, #20]
 8005cc0:	f7ff f950 	bl	8004f64 <_Bfree>
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	9805      	ldr	r0, [sp, #20]
 8005cc8:	f7ff f94c 	bl	8004f64 <_Bfree>
 8005ccc:	4641      	mov	r1, r8
 8005cce:	9805      	ldr	r0, [sp, #20]
 8005cd0:	f7ff f948 	bl	8004f64 <_Bfree>
 8005cd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005cd6:	9805      	ldr	r0, [sp, #20]
 8005cd8:	f7ff f944 	bl	8004f64 <_Bfree>
 8005cdc:	4621      	mov	r1, r4
 8005cde:	9805      	ldr	r0, [sp, #20]
 8005ce0:	f7ff f940 	bl	8004f64 <_Bfree>
 8005ce4:	e5f9      	b.n	80058da <_strtod_l+0x72>
 8005ce6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ce8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005cec:	4293      	cmp	r3, r2
 8005cee:	dbbc      	blt.n	8005c6a <_strtod_l+0x402>
 8005cf0:	4c40      	ldr	r4, [pc, #256]	@ (8005df4 <_strtod_l+0x58c>)
 8005cf2:	f1c5 050f 	rsb	r5, r5, #15
 8005cf6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005cfa:	4652      	mov	r2, sl
 8005cfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d00:	465b      	mov	r3, fp
 8005d02:	f7fa fbe9 	bl	80004d8 <__aeabi_dmul>
 8005d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d08:	1b5d      	subs	r5, r3, r5
 8005d0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005d0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005d12:	e791      	b.n	8005c38 <_strtod_l+0x3d0>
 8005d14:	3316      	adds	r3, #22
 8005d16:	dba8      	blt.n	8005c6a <_strtod_l+0x402>
 8005d18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d1a:	4650      	mov	r0, sl
 8005d1c:	eba3 0808 	sub.w	r8, r3, r8
 8005d20:	4b34      	ldr	r3, [pc, #208]	@ (8005df4 <_strtod_l+0x58c>)
 8005d22:	4659      	mov	r1, fp
 8005d24:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005d28:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005d2c:	f7fa fcfe 	bl	800072c <__aeabi_ddiv>
 8005d30:	e75d      	b.n	8005bee <_strtod_l+0x386>
 8005d32:	2300      	movs	r3, #0
 8005d34:	4650      	mov	r0, sl
 8005d36:	4659      	mov	r1, fp
 8005d38:	461e      	mov	r6, r3
 8005d3a:	4f2f      	ldr	r7, [pc, #188]	@ (8005df8 <_strtod_l+0x590>)
 8005d3c:	1124      	asrs	r4, r4, #4
 8005d3e:	2c01      	cmp	r4, #1
 8005d40:	dc21      	bgt.n	8005d86 <_strtod_l+0x51e>
 8005d42:	b10b      	cbz	r3, 8005d48 <_strtod_l+0x4e0>
 8005d44:	4682      	mov	sl, r0
 8005d46:	468b      	mov	fp, r1
 8005d48:	492b      	ldr	r1, [pc, #172]	@ (8005df8 <_strtod_l+0x590>)
 8005d4a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005d4e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005d52:	4652      	mov	r2, sl
 8005d54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d58:	465b      	mov	r3, fp
 8005d5a:	f7fa fbbd 	bl	80004d8 <__aeabi_dmul>
 8005d5e:	4b23      	ldr	r3, [pc, #140]	@ (8005dec <_strtod_l+0x584>)
 8005d60:	460a      	mov	r2, r1
 8005d62:	400b      	ands	r3, r1
 8005d64:	4925      	ldr	r1, [pc, #148]	@ (8005dfc <_strtod_l+0x594>)
 8005d66:	4682      	mov	sl, r0
 8005d68:	428b      	cmp	r3, r1
 8005d6a:	d898      	bhi.n	8005c9e <_strtod_l+0x436>
 8005d6c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005d70:	428b      	cmp	r3, r1
 8005d72:	bf86      	itte	hi
 8005d74:	f04f 3aff 	movhi.w	sl, #4294967295
 8005d78:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8005e00 <_strtod_l+0x598>
 8005d7c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005d80:	2300      	movs	r3, #0
 8005d82:	9308      	str	r3, [sp, #32]
 8005d84:	e076      	b.n	8005e74 <_strtod_l+0x60c>
 8005d86:	07e2      	lsls	r2, r4, #31
 8005d88:	d504      	bpl.n	8005d94 <_strtod_l+0x52c>
 8005d8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d8e:	f7fa fba3 	bl	80004d8 <__aeabi_dmul>
 8005d92:	2301      	movs	r3, #1
 8005d94:	3601      	adds	r6, #1
 8005d96:	1064      	asrs	r4, r4, #1
 8005d98:	3708      	adds	r7, #8
 8005d9a:	e7d0      	b.n	8005d3e <_strtod_l+0x4d6>
 8005d9c:	d0f0      	beq.n	8005d80 <_strtod_l+0x518>
 8005d9e:	4264      	negs	r4, r4
 8005da0:	f014 020f 	ands.w	r2, r4, #15
 8005da4:	d00a      	beq.n	8005dbc <_strtod_l+0x554>
 8005da6:	4b13      	ldr	r3, [pc, #76]	@ (8005df4 <_strtod_l+0x58c>)
 8005da8:	4650      	mov	r0, sl
 8005daa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dae:	4659      	mov	r1, fp
 8005db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db4:	f7fa fcba 	bl	800072c <__aeabi_ddiv>
 8005db8:	4682      	mov	sl, r0
 8005dba:	468b      	mov	fp, r1
 8005dbc:	1124      	asrs	r4, r4, #4
 8005dbe:	d0df      	beq.n	8005d80 <_strtod_l+0x518>
 8005dc0:	2c1f      	cmp	r4, #31
 8005dc2:	dd1f      	ble.n	8005e04 <_strtod_l+0x59c>
 8005dc4:	2400      	movs	r4, #0
 8005dc6:	46a0      	mov	r8, r4
 8005dc8:	46a1      	mov	r9, r4
 8005dca:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005dcc:	2322      	movs	r3, #34	@ 0x22
 8005dce:	9a05      	ldr	r2, [sp, #20]
 8005dd0:	f04f 0a00 	mov.w	sl, #0
 8005dd4:	f04f 0b00 	mov.w	fp, #0
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	e76b      	b.n	8005cb4 <_strtod_l+0x44c>
 8005ddc:	0800847f 	.word	0x0800847f
 8005de0:	08008748 	.word	0x08008748
 8005de4:	08008477 	.word	0x08008477
 8005de8:	080084ae 	.word	0x080084ae
 8005dec:	7ff00000 	.word	0x7ff00000
 8005df0:	080085e7 	.word	0x080085e7
 8005df4:	08008680 	.word	0x08008680
 8005df8:	08008658 	.word	0x08008658
 8005dfc:	7ca00000 	.word	0x7ca00000
 8005e00:	7fefffff 	.word	0x7fefffff
 8005e04:	f014 0310 	ands.w	r3, r4, #16
 8005e08:	bf18      	it	ne
 8005e0a:	236a      	movne	r3, #106	@ 0x6a
 8005e0c:	4650      	mov	r0, sl
 8005e0e:	9308      	str	r3, [sp, #32]
 8005e10:	4659      	mov	r1, fp
 8005e12:	2300      	movs	r3, #0
 8005e14:	4e77      	ldr	r6, [pc, #476]	@ (8005ff4 <_strtod_l+0x78c>)
 8005e16:	07e7      	lsls	r7, r4, #31
 8005e18:	d504      	bpl.n	8005e24 <_strtod_l+0x5bc>
 8005e1a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e1e:	f7fa fb5b 	bl	80004d8 <__aeabi_dmul>
 8005e22:	2301      	movs	r3, #1
 8005e24:	1064      	asrs	r4, r4, #1
 8005e26:	f106 0608 	add.w	r6, r6, #8
 8005e2a:	d1f4      	bne.n	8005e16 <_strtod_l+0x5ae>
 8005e2c:	b10b      	cbz	r3, 8005e32 <_strtod_l+0x5ca>
 8005e2e:	4682      	mov	sl, r0
 8005e30:	468b      	mov	fp, r1
 8005e32:	9b08      	ldr	r3, [sp, #32]
 8005e34:	b1b3      	cbz	r3, 8005e64 <_strtod_l+0x5fc>
 8005e36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005e3a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	4659      	mov	r1, fp
 8005e42:	dd0f      	ble.n	8005e64 <_strtod_l+0x5fc>
 8005e44:	2b1f      	cmp	r3, #31
 8005e46:	dd58      	ble.n	8005efa <_strtod_l+0x692>
 8005e48:	2b34      	cmp	r3, #52	@ 0x34
 8005e4a:	bfd8      	it	le
 8005e4c:	f04f 33ff 	movle.w	r3, #4294967295
 8005e50:	f04f 0a00 	mov.w	sl, #0
 8005e54:	bfcf      	iteee	gt
 8005e56:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005e5a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005e5e:	4093      	lslle	r3, r2
 8005e60:	ea03 0b01 	andle.w	fp, r3, r1
 8005e64:	2200      	movs	r2, #0
 8005e66:	2300      	movs	r3, #0
 8005e68:	4650      	mov	r0, sl
 8005e6a:	4659      	mov	r1, fp
 8005e6c:	f7fa fd9c 	bl	80009a8 <__aeabi_dcmpeq>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d1a7      	bne.n	8005dc4 <_strtod_l+0x55c>
 8005e74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e76:	464a      	mov	r2, r9
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005e7c:	462b      	mov	r3, r5
 8005e7e:	9805      	ldr	r0, [sp, #20]
 8005e80:	f7ff f8d8 	bl	8005034 <__s2b>
 8005e84:	900b      	str	r0, [sp, #44]	@ 0x2c
 8005e86:	2800      	cmp	r0, #0
 8005e88:	f43f af09 	beq.w	8005c9e <_strtod_l+0x436>
 8005e8c:	2400      	movs	r4, #0
 8005e8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e92:	2a00      	cmp	r2, #0
 8005e94:	eba3 0308 	sub.w	r3, r3, r8
 8005e98:	bfa8      	it	ge
 8005e9a:	2300      	movge	r3, #0
 8005e9c:	46a0      	mov	r8, r4
 8005e9e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005ea0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005ea4:	9316      	str	r3, [sp, #88]	@ 0x58
 8005ea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ea8:	9805      	ldr	r0, [sp, #20]
 8005eaa:	6859      	ldr	r1, [r3, #4]
 8005eac:	f7ff f81a 	bl	8004ee4 <_Balloc>
 8005eb0:	4681      	mov	r9, r0
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	f43f aef7 	beq.w	8005ca6 <_strtod_l+0x43e>
 8005eb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005eba:	300c      	adds	r0, #12
 8005ebc:	691a      	ldr	r2, [r3, #16]
 8005ebe:	f103 010c 	add.w	r1, r3, #12
 8005ec2:	3202      	adds	r2, #2
 8005ec4:	0092      	lsls	r2, r2, #2
 8005ec6:	f000 fd65 	bl	8006994 <memcpy>
 8005eca:	ab1c      	add	r3, sp, #112	@ 0x70
 8005ecc:	9301      	str	r3, [sp, #4]
 8005ece:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	4652      	mov	r2, sl
 8005ed4:	465b      	mov	r3, fp
 8005ed6:	9805      	ldr	r0, [sp, #20]
 8005ed8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005edc:	f7ff fbd6 	bl	800568c <__d2b>
 8005ee0:	901a      	str	r0, [sp, #104]	@ 0x68
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	f43f aedf 	beq.w	8005ca6 <_strtod_l+0x43e>
 8005ee8:	2101      	movs	r1, #1
 8005eea:	9805      	ldr	r0, [sp, #20]
 8005eec:	f7ff f938 	bl	8005160 <__i2b>
 8005ef0:	4680      	mov	r8, r0
 8005ef2:	b948      	cbnz	r0, 8005f08 <_strtod_l+0x6a0>
 8005ef4:	f04f 0800 	mov.w	r8, #0
 8005ef8:	e6d5      	b.n	8005ca6 <_strtod_l+0x43e>
 8005efa:	f04f 32ff 	mov.w	r2, #4294967295
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	ea03 0a0a 	and.w	sl, r3, sl
 8005f06:	e7ad      	b.n	8005e64 <_strtod_l+0x5fc>
 8005f08:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005f0a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005f0c:	2d00      	cmp	r5, #0
 8005f0e:	bfab      	itete	ge
 8005f10:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005f12:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005f14:	18ef      	addge	r7, r5, r3
 8005f16:	1b5e      	sublt	r6, r3, r5
 8005f18:	9b08      	ldr	r3, [sp, #32]
 8005f1a:	bfa8      	it	ge
 8005f1c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005f1e:	eba5 0503 	sub.w	r5, r5, r3
 8005f22:	4415      	add	r5, r2
 8005f24:	4b34      	ldr	r3, [pc, #208]	@ (8005ff8 <_strtod_l+0x790>)
 8005f26:	f105 35ff 	add.w	r5, r5, #4294967295
 8005f2a:	bfb8      	it	lt
 8005f2c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005f2e:	429d      	cmp	r5, r3
 8005f30:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005f34:	da50      	bge.n	8005fd8 <_strtod_l+0x770>
 8005f36:	1b5b      	subs	r3, r3, r5
 8005f38:	2b1f      	cmp	r3, #31
 8005f3a:	f04f 0101 	mov.w	r1, #1
 8005f3e:	eba2 0203 	sub.w	r2, r2, r3
 8005f42:	dc3d      	bgt.n	8005fc0 <_strtod_l+0x758>
 8005f44:	fa01 f303 	lsl.w	r3, r1, r3
 8005f48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	9310      	str	r3, [sp, #64]	@ 0x40
 8005f4e:	18bd      	adds	r5, r7, r2
 8005f50:	9b08      	ldr	r3, [sp, #32]
 8005f52:	42af      	cmp	r7, r5
 8005f54:	4416      	add	r6, r2
 8005f56:	441e      	add	r6, r3
 8005f58:	463b      	mov	r3, r7
 8005f5a:	bfa8      	it	ge
 8005f5c:	462b      	movge	r3, r5
 8005f5e:	42b3      	cmp	r3, r6
 8005f60:	bfa8      	it	ge
 8005f62:	4633      	movge	r3, r6
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bfc2      	ittt	gt
 8005f68:	1aed      	subgt	r5, r5, r3
 8005f6a:	1af6      	subgt	r6, r6, r3
 8005f6c:	1aff      	subgt	r7, r7, r3
 8005f6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	dd16      	ble.n	8005fa2 <_strtod_l+0x73a>
 8005f74:	4641      	mov	r1, r8
 8005f76:	461a      	mov	r2, r3
 8005f78:	9805      	ldr	r0, [sp, #20]
 8005f7a:	f7ff f9a9 	bl	80052d0 <__pow5mult>
 8005f7e:	4680      	mov	r8, r0
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d0b7      	beq.n	8005ef4 <_strtod_l+0x68c>
 8005f84:	4601      	mov	r1, r0
 8005f86:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005f88:	9805      	ldr	r0, [sp, #20]
 8005f8a:	f7ff f8ff 	bl	800518c <__multiply>
 8005f8e:	900a      	str	r0, [sp, #40]	@ 0x28
 8005f90:	2800      	cmp	r0, #0
 8005f92:	f43f ae88 	beq.w	8005ca6 <_strtod_l+0x43e>
 8005f96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f98:	9805      	ldr	r0, [sp, #20]
 8005f9a:	f7fe ffe3 	bl	8004f64 <_Bfree>
 8005f9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fa0:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fa2:	2d00      	cmp	r5, #0
 8005fa4:	dc1d      	bgt.n	8005fe2 <_strtod_l+0x77a>
 8005fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	dd27      	ble.n	8005ffc <_strtod_l+0x794>
 8005fac:	4649      	mov	r1, r9
 8005fae:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005fb0:	9805      	ldr	r0, [sp, #20]
 8005fb2:	f7ff f98d 	bl	80052d0 <__pow5mult>
 8005fb6:	4681      	mov	r9, r0
 8005fb8:	bb00      	cbnz	r0, 8005ffc <_strtod_l+0x794>
 8005fba:	f04f 0900 	mov.w	r9, #0
 8005fbe:	e672      	b.n	8005ca6 <_strtod_l+0x43e>
 8005fc0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005fc4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005fc8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005fcc:	35e2      	adds	r5, #226	@ 0xe2
 8005fce:	fa01 f305 	lsl.w	r3, r1, r5
 8005fd2:	9310      	str	r3, [sp, #64]	@ 0x40
 8005fd4:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005fd6:	e7ba      	b.n	8005f4e <_strtod_l+0x6e6>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	9310      	str	r3, [sp, #64]	@ 0x40
 8005fdc:	2301      	movs	r3, #1
 8005fde:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005fe0:	e7b5      	b.n	8005f4e <_strtod_l+0x6e6>
 8005fe2:	462a      	mov	r2, r5
 8005fe4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005fe6:	9805      	ldr	r0, [sp, #20]
 8005fe8:	f7ff f9cc 	bl	8005384 <__lshift>
 8005fec:	901a      	str	r0, [sp, #104]	@ 0x68
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d1d9      	bne.n	8005fa6 <_strtod_l+0x73e>
 8005ff2:	e658      	b.n	8005ca6 <_strtod_l+0x43e>
 8005ff4:	08008770 	.word	0x08008770
 8005ff8:	fffffc02 	.word	0xfffffc02
 8005ffc:	2e00      	cmp	r6, #0
 8005ffe:	dd07      	ble.n	8006010 <_strtod_l+0x7a8>
 8006000:	4649      	mov	r1, r9
 8006002:	4632      	mov	r2, r6
 8006004:	9805      	ldr	r0, [sp, #20]
 8006006:	f7ff f9bd 	bl	8005384 <__lshift>
 800600a:	4681      	mov	r9, r0
 800600c:	2800      	cmp	r0, #0
 800600e:	d0d4      	beq.n	8005fba <_strtod_l+0x752>
 8006010:	2f00      	cmp	r7, #0
 8006012:	dd08      	ble.n	8006026 <_strtod_l+0x7be>
 8006014:	4641      	mov	r1, r8
 8006016:	463a      	mov	r2, r7
 8006018:	9805      	ldr	r0, [sp, #20]
 800601a:	f7ff f9b3 	bl	8005384 <__lshift>
 800601e:	4680      	mov	r8, r0
 8006020:	2800      	cmp	r0, #0
 8006022:	f43f ae40 	beq.w	8005ca6 <_strtod_l+0x43e>
 8006026:	464a      	mov	r2, r9
 8006028:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800602a:	9805      	ldr	r0, [sp, #20]
 800602c:	f7ff fa32 	bl	8005494 <__mdiff>
 8006030:	4604      	mov	r4, r0
 8006032:	2800      	cmp	r0, #0
 8006034:	f43f ae37 	beq.w	8005ca6 <_strtod_l+0x43e>
 8006038:	68c3      	ldr	r3, [r0, #12]
 800603a:	4641      	mov	r1, r8
 800603c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800603e:	2300      	movs	r3, #0
 8006040:	60c3      	str	r3, [r0, #12]
 8006042:	f7ff fa0b 	bl	800545c <__mcmp>
 8006046:	2800      	cmp	r0, #0
 8006048:	da3d      	bge.n	80060c6 <_strtod_l+0x85e>
 800604a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800604c:	ea53 030a 	orrs.w	r3, r3, sl
 8006050:	d163      	bne.n	800611a <_strtod_l+0x8b2>
 8006052:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006056:	2b00      	cmp	r3, #0
 8006058:	d15f      	bne.n	800611a <_strtod_l+0x8b2>
 800605a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800605e:	0d1b      	lsrs	r3, r3, #20
 8006060:	051b      	lsls	r3, r3, #20
 8006062:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006066:	d958      	bls.n	800611a <_strtod_l+0x8b2>
 8006068:	6963      	ldr	r3, [r4, #20]
 800606a:	b913      	cbnz	r3, 8006072 <_strtod_l+0x80a>
 800606c:	6923      	ldr	r3, [r4, #16]
 800606e:	2b01      	cmp	r3, #1
 8006070:	dd53      	ble.n	800611a <_strtod_l+0x8b2>
 8006072:	4621      	mov	r1, r4
 8006074:	2201      	movs	r2, #1
 8006076:	9805      	ldr	r0, [sp, #20]
 8006078:	f7ff f984 	bl	8005384 <__lshift>
 800607c:	4641      	mov	r1, r8
 800607e:	4604      	mov	r4, r0
 8006080:	f7ff f9ec 	bl	800545c <__mcmp>
 8006084:	2800      	cmp	r0, #0
 8006086:	dd48      	ble.n	800611a <_strtod_l+0x8b2>
 8006088:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800608c:	9a08      	ldr	r2, [sp, #32]
 800608e:	0d1b      	lsrs	r3, r3, #20
 8006090:	051b      	lsls	r3, r3, #20
 8006092:	2a00      	cmp	r2, #0
 8006094:	d062      	beq.n	800615c <_strtod_l+0x8f4>
 8006096:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800609a:	d85f      	bhi.n	800615c <_strtod_l+0x8f4>
 800609c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80060a0:	f67f ae94 	bls.w	8005dcc <_strtod_l+0x564>
 80060a4:	4650      	mov	r0, sl
 80060a6:	4659      	mov	r1, fp
 80060a8:	4ba3      	ldr	r3, [pc, #652]	@ (8006338 <_strtod_l+0xad0>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	f7fa fa14 	bl	80004d8 <__aeabi_dmul>
 80060b0:	4ba2      	ldr	r3, [pc, #648]	@ (800633c <_strtod_l+0xad4>)
 80060b2:	4682      	mov	sl, r0
 80060b4:	400b      	ands	r3, r1
 80060b6:	468b      	mov	fp, r1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f47f adff 	bne.w	8005cbc <_strtod_l+0x454>
 80060be:	2322      	movs	r3, #34	@ 0x22
 80060c0:	9a05      	ldr	r2, [sp, #20]
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	e5fa      	b.n	8005cbc <_strtod_l+0x454>
 80060c6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80060ca:	d165      	bne.n	8006198 <_strtod_l+0x930>
 80060cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80060ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060d2:	b35a      	cbz	r2, 800612c <_strtod_l+0x8c4>
 80060d4:	4a9a      	ldr	r2, [pc, #616]	@ (8006340 <_strtod_l+0xad8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d12b      	bne.n	8006132 <_strtod_l+0x8ca>
 80060da:	9b08      	ldr	r3, [sp, #32]
 80060dc:	4651      	mov	r1, sl
 80060de:	b303      	cbz	r3, 8006122 <_strtod_l+0x8ba>
 80060e0:	465a      	mov	r2, fp
 80060e2:	4b96      	ldr	r3, [pc, #600]	@ (800633c <_strtod_l+0xad4>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80060ea:	f04f 32ff 	mov.w	r2, #4294967295
 80060ee:	d81b      	bhi.n	8006128 <_strtod_l+0x8c0>
 80060f0:	0d1b      	lsrs	r3, r3, #20
 80060f2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	4299      	cmp	r1, r3
 80060fc:	d119      	bne.n	8006132 <_strtod_l+0x8ca>
 80060fe:	4b91      	ldr	r3, [pc, #580]	@ (8006344 <_strtod_l+0xadc>)
 8006100:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006102:	429a      	cmp	r2, r3
 8006104:	d102      	bne.n	800610c <_strtod_l+0x8a4>
 8006106:	3101      	adds	r1, #1
 8006108:	f43f adcd 	beq.w	8005ca6 <_strtod_l+0x43e>
 800610c:	f04f 0a00 	mov.w	sl, #0
 8006110:	4b8a      	ldr	r3, [pc, #552]	@ (800633c <_strtod_l+0xad4>)
 8006112:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006114:	401a      	ands	r2, r3
 8006116:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800611a:	9b08      	ldr	r3, [sp, #32]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1c1      	bne.n	80060a4 <_strtod_l+0x83c>
 8006120:	e5cc      	b.n	8005cbc <_strtod_l+0x454>
 8006122:	f04f 33ff 	mov.w	r3, #4294967295
 8006126:	e7e8      	b.n	80060fa <_strtod_l+0x892>
 8006128:	4613      	mov	r3, r2
 800612a:	e7e6      	b.n	80060fa <_strtod_l+0x892>
 800612c:	ea53 030a 	orrs.w	r3, r3, sl
 8006130:	d0aa      	beq.n	8006088 <_strtod_l+0x820>
 8006132:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006134:	b1db      	cbz	r3, 800616e <_strtod_l+0x906>
 8006136:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006138:	4213      	tst	r3, r2
 800613a:	d0ee      	beq.n	800611a <_strtod_l+0x8b2>
 800613c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800613e:	4650      	mov	r0, sl
 8006140:	4659      	mov	r1, fp
 8006142:	9a08      	ldr	r2, [sp, #32]
 8006144:	b1bb      	cbz	r3, 8006176 <_strtod_l+0x90e>
 8006146:	f7ff fb6d 	bl	8005824 <sulp>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006152:	f7fa f80b 	bl	800016c <__adddf3>
 8006156:	4682      	mov	sl, r0
 8006158:	468b      	mov	fp, r1
 800615a:	e7de      	b.n	800611a <_strtod_l+0x8b2>
 800615c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006160:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006164:	f04f 3aff 	mov.w	sl, #4294967295
 8006168:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800616c:	e7d5      	b.n	800611a <_strtod_l+0x8b2>
 800616e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006170:	ea13 0f0a 	tst.w	r3, sl
 8006174:	e7e1      	b.n	800613a <_strtod_l+0x8d2>
 8006176:	f7ff fb55 	bl	8005824 <sulp>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006182:	f7f9 fff1 	bl	8000168 <__aeabi_dsub>
 8006186:	2200      	movs	r2, #0
 8006188:	2300      	movs	r3, #0
 800618a:	4682      	mov	sl, r0
 800618c:	468b      	mov	fp, r1
 800618e:	f7fa fc0b 	bl	80009a8 <__aeabi_dcmpeq>
 8006192:	2800      	cmp	r0, #0
 8006194:	d0c1      	beq.n	800611a <_strtod_l+0x8b2>
 8006196:	e619      	b.n	8005dcc <_strtod_l+0x564>
 8006198:	4641      	mov	r1, r8
 800619a:	4620      	mov	r0, r4
 800619c:	f7ff face 	bl	800573c <__ratio>
 80061a0:	2200      	movs	r2, #0
 80061a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80061a6:	4606      	mov	r6, r0
 80061a8:	460f      	mov	r7, r1
 80061aa:	f7fa fc11 	bl	80009d0 <__aeabi_dcmple>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d06d      	beq.n	800628e <_strtod_l+0xa26>
 80061b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d178      	bne.n	80062aa <_strtod_l+0xa42>
 80061b8:	f1ba 0f00 	cmp.w	sl, #0
 80061bc:	d156      	bne.n	800626c <_strtod_l+0xa04>
 80061be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d158      	bne.n	800627a <_strtod_l+0xa12>
 80061c8:	2200      	movs	r2, #0
 80061ca:	4630      	mov	r0, r6
 80061cc:	4639      	mov	r1, r7
 80061ce:	4b5e      	ldr	r3, [pc, #376]	@ (8006348 <_strtod_l+0xae0>)
 80061d0:	f7fa fbf4 	bl	80009bc <__aeabi_dcmplt>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d157      	bne.n	8006288 <_strtod_l+0xa20>
 80061d8:	4630      	mov	r0, r6
 80061da:	4639      	mov	r1, r7
 80061dc:	2200      	movs	r2, #0
 80061de:	4b5b      	ldr	r3, [pc, #364]	@ (800634c <_strtod_l+0xae4>)
 80061e0:	f7fa f97a 	bl	80004d8 <__aeabi_dmul>
 80061e4:	4606      	mov	r6, r0
 80061e6:	460f      	mov	r7, r1
 80061e8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80061ec:	9606      	str	r6, [sp, #24]
 80061ee:	9307      	str	r3, [sp, #28]
 80061f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061f4:	4d51      	ldr	r5, [pc, #324]	@ (800633c <_strtod_l+0xad4>)
 80061f6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80061fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061fc:	401d      	ands	r5, r3
 80061fe:	4b54      	ldr	r3, [pc, #336]	@ (8006350 <_strtod_l+0xae8>)
 8006200:	429d      	cmp	r5, r3
 8006202:	f040 80ab 	bne.w	800635c <_strtod_l+0xaf4>
 8006206:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006208:	4650      	mov	r0, sl
 800620a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800620e:	4659      	mov	r1, fp
 8006210:	f7ff f9d4 	bl	80055bc <__ulp>
 8006214:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006218:	f7fa f95e 	bl	80004d8 <__aeabi_dmul>
 800621c:	4652      	mov	r2, sl
 800621e:	465b      	mov	r3, fp
 8006220:	f7f9 ffa4 	bl	800016c <__adddf3>
 8006224:	460b      	mov	r3, r1
 8006226:	4945      	ldr	r1, [pc, #276]	@ (800633c <_strtod_l+0xad4>)
 8006228:	4a4a      	ldr	r2, [pc, #296]	@ (8006354 <_strtod_l+0xaec>)
 800622a:	4019      	ands	r1, r3
 800622c:	4291      	cmp	r1, r2
 800622e:	4682      	mov	sl, r0
 8006230:	d942      	bls.n	80062b8 <_strtod_l+0xa50>
 8006232:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006234:	4b43      	ldr	r3, [pc, #268]	@ (8006344 <_strtod_l+0xadc>)
 8006236:	429a      	cmp	r2, r3
 8006238:	d103      	bne.n	8006242 <_strtod_l+0x9da>
 800623a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800623c:	3301      	adds	r3, #1
 800623e:	f43f ad32 	beq.w	8005ca6 <_strtod_l+0x43e>
 8006242:	f04f 3aff 	mov.w	sl, #4294967295
 8006246:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8006344 <_strtod_l+0xadc>
 800624a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800624c:	9805      	ldr	r0, [sp, #20]
 800624e:	f7fe fe89 	bl	8004f64 <_Bfree>
 8006252:	4649      	mov	r1, r9
 8006254:	9805      	ldr	r0, [sp, #20]
 8006256:	f7fe fe85 	bl	8004f64 <_Bfree>
 800625a:	4641      	mov	r1, r8
 800625c:	9805      	ldr	r0, [sp, #20]
 800625e:	f7fe fe81 	bl	8004f64 <_Bfree>
 8006262:	4621      	mov	r1, r4
 8006264:	9805      	ldr	r0, [sp, #20]
 8006266:	f7fe fe7d 	bl	8004f64 <_Bfree>
 800626a:	e61c      	b.n	8005ea6 <_strtod_l+0x63e>
 800626c:	f1ba 0f01 	cmp.w	sl, #1
 8006270:	d103      	bne.n	800627a <_strtod_l+0xa12>
 8006272:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006274:	2b00      	cmp	r3, #0
 8006276:	f43f ada9 	beq.w	8005dcc <_strtod_l+0x564>
 800627a:	2200      	movs	r2, #0
 800627c:	4b36      	ldr	r3, [pc, #216]	@ (8006358 <_strtod_l+0xaf0>)
 800627e:	2600      	movs	r6, #0
 8006280:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006284:	4f30      	ldr	r7, [pc, #192]	@ (8006348 <_strtod_l+0xae0>)
 8006286:	e7b3      	b.n	80061f0 <_strtod_l+0x988>
 8006288:	2600      	movs	r6, #0
 800628a:	4f30      	ldr	r7, [pc, #192]	@ (800634c <_strtod_l+0xae4>)
 800628c:	e7ac      	b.n	80061e8 <_strtod_l+0x980>
 800628e:	4630      	mov	r0, r6
 8006290:	4639      	mov	r1, r7
 8006292:	4b2e      	ldr	r3, [pc, #184]	@ (800634c <_strtod_l+0xae4>)
 8006294:	2200      	movs	r2, #0
 8006296:	f7fa f91f 	bl	80004d8 <__aeabi_dmul>
 800629a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800629c:	4606      	mov	r6, r0
 800629e:	460f      	mov	r7, r1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0a1      	beq.n	80061e8 <_strtod_l+0x980>
 80062a4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80062a8:	e7a2      	b.n	80061f0 <_strtod_l+0x988>
 80062aa:	2200      	movs	r2, #0
 80062ac:	4b26      	ldr	r3, [pc, #152]	@ (8006348 <_strtod_l+0xae0>)
 80062ae:	4616      	mov	r6, r2
 80062b0:	461f      	mov	r7, r3
 80062b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80062b6:	e79b      	b.n	80061f0 <_strtod_l+0x988>
 80062b8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80062bc:	9b08      	ldr	r3, [sp, #32]
 80062be:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1c1      	bne.n	800624a <_strtod_l+0x9e2>
 80062c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80062ca:	0d1b      	lsrs	r3, r3, #20
 80062cc:	051b      	lsls	r3, r3, #20
 80062ce:	429d      	cmp	r5, r3
 80062d0:	d1bb      	bne.n	800624a <_strtod_l+0x9e2>
 80062d2:	4630      	mov	r0, r6
 80062d4:	4639      	mov	r1, r7
 80062d6:	f7fa fc47 	bl	8000b68 <__aeabi_d2lz>
 80062da:	f7fa f8cf 	bl	800047c <__aeabi_l2d>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4630      	mov	r0, r6
 80062e4:	4639      	mov	r1, r7
 80062e6:	f7f9 ff3f 	bl	8000168 <__aeabi_dsub>
 80062ea:	460b      	mov	r3, r1
 80062ec:	4602      	mov	r2, r0
 80062ee:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80062f2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80062f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062f8:	ea46 060a 	orr.w	r6, r6, sl
 80062fc:	431e      	orrs	r6, r3
 80062fe:	d06a      	beq.n	80063d6 <_strtod_l+0xb6e>
 8006300:	a309      	add	r3, pc, #36	@ (adr r3, 8006328 <_strtod_l+0xac0>)
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f7fa fb59 	bl	80009bc <__aeabi_dcmplt>
 800630a:	2800      	cmp	r0, #0
 800630c:	f47f acd6 	bne.w	8005cbc <_strtod_l+0x454>
 8006310:	a307      	add	r3, pc, #28	@ (adr r3, 8006330 <_strtod_l+0xac8>)
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800631a:	f7fa fb6d 	bl	80009f8 <__aeabi_dcmpgt>
 800631e:	2800      	cmp	r0, #0
 8006320:	d093      	beq.n	800624a <_strtod_l+0x9e2>
 8006322:	e4cb      	b.n	8005cbc <_strtod_l+0x454>
 8006324:	f3af 8000 	nop.w
 8006328:	94a03595 	.word	0x94a03595
 800632c:	3fdfffff 	.word	0x3fdfffff
 8006330:	35afe535 	.word	0x35afe535
 8006334:	3fe00000 	.word	0x3fe00000
 8006338:	39500000 	.word	0x39500000
 800633c:	7ff00000 	.word	0x7ff00000
 8006340:	000fffff 	.word	0x000fffff
 8006344:	7fefffff 	.word	0x7fefffff
 8006348:	3ff00000 	.word	0x3ff00000
 800634c:	3fe00000 	.word	0x3fe00000
 8006350:	7fe00000 	.word	0x7fe00000
 8006354:	7c9fffff 	.word	0x7c9fffff
 8006358:	bff00000 	.word	0xbff00000
 800635c:	9b08      	ldr	r3, [sp, #32]
 800635e:	b323      	cbz	r3, 80063aa <_strtod_l+0xb42>
 8006360:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006364:	d821      	bhi.n	80063aa <_strtod_l+0xb42>
 8006366:	a328      	add	r3, pc, #160	@ (adr r3, 8006408 <_strtod_l+0xba0>)
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	4630      	mov	r0, r6
 800636e:	4639      	mov	r1, r7
 8006370:	f7fa fb2e 	bl	80009d0 <__aeabi_dcmple>
 8006374:	b1a0      	cbz	r0, 80063a0 <_strtod_l+0xb38>
 8006376:	4639      	mov	r1, r7
 8006378:	4630      	mov	r0, r6
 800637a:	f7fa fb85 	bl	8000a88 <__aeabi_d2uiz>
 800637e:	2801      	cmp	r0, #1
 8006380:	bf38      	it	cc
 8006382:	2001      	movcc	r0, #1
 8006384:	f7fa f82e 	bl	80003e4 <__aeabi_ui2d>
 8006388:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800638a:	4606      	mov	r6, r0
 800638c:	460f      	mov	r7, r1
 800638e:	b9fb      	cbnz	r3, 80063d0 <_strtod_l+0xb68>
 8006390:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006394:	9014      	str	r0, [sp, #80]	@ 0x50
 8006396:	9315      	str	r3, [sp, #84]	@ 0x54
 8006398:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800639c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80063a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80063a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80063a6:	1b5b      	subs	r3, r3, r5
 80063a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80063aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80063b2:	f7ff f903 	bl	80055bc <__ulp>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4650      	mov	r0, sl
 80063bc:	4659      	mov	r1, fp
 80063be:	f7fa f88b 	bl	80004d8 <__aeabi_dmul>
 80063c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80063c6:	f7f9 fed1 	bl	800016c <__adddf3>
 80063ca:	4682      	mov	sl, r0
 80063cc:	468b      	mov	fp, r1
 80063ce:	e775      	b.n	80062bc <_strtod_l+0xa54>
 80063d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80063d4:	e7e0      	b.n	8006398 <_strtod_l+0xb30>
 80063d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006410 <_strtod_l+0xba8>)
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	f7fa faee 	bl	80009bc <__aeabi_dcmplt>
 80063e0:	e79d      	b.n	800631e <_strtod_l+0xab6>
 80063e2:	2300      	movs	r3, #0
 80063e4:	930e      	str	r3, [sp, #56]	@ 0x38
 80063e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063e8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	f7ff ba79 	b.w	80058e2 <_strtod_l+0x7a>
 80063f0:	2a65      	cmp	r2, #101	@ 0x65
 80063f2:	f43f ab72 	beq.w	8005ada <_strtod_l+0x272>
 80063f6:	2a45      	cmp	r2, #69	@ 0x45
 80063f8:	f43f ab6f 	beq.w	8005ada <_strtod_l+0x272>
 80063fc:	2301      	movs	r3, #1
 80063fe:	f7ff bbaa 	b.w	8005b56 <_strtod_l+0x2ee>
 8006402:	bf00      	nop
 8006404:	f3af 8000 	nop.w
 8006408:	ffc00000 	.word	0xffc00000
 800640c:	41dfffff 	.word	0x41dfffff
 8006410:	94a03595 	.word	0x94a03595
 8006414:	3fcfffff 	.word	0x3fcfffff

08006418 <_strtod_r>:
 8006418:	4b01      	ldr	r3, [pc, #4]	@ (8006420 <_strtod_r+0x8>)
 800641a:	f7ff ba25 	b.w	8005868 <_strtod_l>
 800641e:	bf00      	nop
 8006420:	20000078 	.word	0x20000078

08006424 <_strtol_l.isra.0>:
 8006424:	2b24      	cmp	r3, #36	@ 0x24
 8006426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800642a:	4686      	mov	lr, r0
 800642c:	4690      	mov	r8, r2
 800642e:	d801      	bhi.n	8006434 <_strtol_l.isra.0+0x10>
 8006430:	2b01      	cmp	r3, #1
 8006432:	d106      	bne.n	8006442 <_strtol_l.isra.0+0x1e>
 8006434:	f7fd fdba 	bl	8003fac <__errno>
 8006438:	2316      	movs	r3, #22
 800643a:	6003      	str	r3, [r0, #0]
 800643c:	2000      	movs	r0, #0
 800643e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006442:	460d      	mov	r5, r1
 8006444:	4833      	ldr	r0, [pc, #204]	@ (8006514 <_strtol_l.isra.0+0xf0>)
 8006446:	462a      	mov	r2, r5
 8006448:	f815 4b01 	ldrb.w	r4, [r5], #1
 800644c:	5d06      	ldrb	r6, [r0, r4]
 800644e:	f016 0608 	ands.w	r6, r6, #8
 8006452:	d1f8      	bne.n	8006446 <_strtol_l.isra.0+0x22>
 8006454:	2c2d      	cmp	r4, #45	@ 0x2d
 8006456:	d110      	bne.n	800647a <_strtol_l.isra.0+0x56>
 8006458:	2601      	movs	r6, #1
 800645a:	782c      	ldrb	r4, [r5, #0]
 800645c:	1c95      	adds	r5, r2, #2
 800645e:	f033 0210 	bics.w	r2, r3, #16
 8006462:	d115      	bne.n	8006490 <_strtol_l.isra.0+0x6c>
 8006464:	2c30      	cmp	r4, #48	@ 0x30
 8006466:	d10d      	bne.n	8006484 <_strtol_l.isra.0+0x60>
 8006468:	782a      	ldrb	r2, [r5, #0]
 800646a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800646e:	2a58      	cmp	r2, #88	@ 0x58
 8006470:	d108      	bne.n	8006484 <_strtol_l.isra.0+0x60>
 8006472:	786c      	ldrb	r4, [r5, #1]
 8006474:	3502      	adds	r5, #2
 8006476:	2310      	movs	r3, #16
 8006478:	e00a      	b.n	8006490 <_strtol_l.isra.0+0x6c>
 800647a:	2c2b      	cmp	r4, #43	@ 0x2b
 800647c:	bf04      	itt	eq
 800647e:	782c      	ldrbeq	r4, [r5, #0]
 8006480:	1c95      	addeq	r5, r2, #2
 8006482:	e7ec      	b.n	800645e <_strtol_l.isra.0+0x3a>
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1f6      	bne.n	8006476 <_strtol_l.isra.0+0x52>
 8006488:	2c30      	cmp	r4, #48	@ 0x30
 800648a:	bf14      	ite	ne
 800648c:	230a      	movne	r3, #10
 800648e:	2308      	moveq	r3, #8
 8006490:	2200      	movs	r2, #0
 8006492:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006496:	f10c 3cff 	add.w	ip, ip, #4294967295
 800649a:	fbbc f9f3 	udiv	r9, ip, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80064a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80064a8:	2f09      	cmp	r7, #9
 80064aa:	d80f      	bhi.n	80064cc <_strtol_l.isra.0+0xa8>
 80064ac:	463c      	mov	r4, r7
 80064ae:	42a3      	cmp	r3, r4
 80064b0:	dd1b      	ble.n	80064ea <_strtol_l.isra.0+0xc6>
 80064b2:	1c57      	adds	r7, r2, #1
 80064b4:	d007      	beq.n	80064c6 <_strtol_l.isra.0+0xa2>
 80064b6:	4581      	cmp	r9, r0
 80064b8:	d314      	bcc.n	80064e4 <_strtol_l.isra.0+0xc0>
 80064ba:	d101      	bne.n	80064c0 <_strtol_l.isra.0+0x9c>
 80064bc:	45a2      	cmp	sl, r4
 80064be:	db11      	blt.n	80064e4 <_strtol_l.isra.0+0xc0>
 80064c0:	2201      	movs	r2, #1
 80064c2:	fb00 4003 	mla	r0, r0, r3, r4
 80064c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064ca:	e7eb      	b.n	80064a4 <_strtol_l.isra.0+0x80>
 80064cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80064d0:	2f19      	cmp	r7, #25
 80064d2:	d801      	bhi.n	80064d8 <_strtol_l.isra.0+0xb4>
 80064d4:	3c37      	subs	r4, #55	@ 0x37
 80064d6:	e7ea      	b.n	80064ae <_strtol_l.isra.0+0x8a>
 80064d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80064dc:	2f19      	cmp	r7, #25
 80064de:	d804      	bhi.n	80064ea <_strtol_l.isra.0+0xc6>
 80064e0:	3c57      	subs	r4, #87	@ 0x57
 80064e2:	e7e4      	b.n	80064ae <_strtol_l.isra.0+0x8a>
 80064e4:	f04f 32ff 	mov.w	r2, #4294967295
 80064e8:	e7ed      	b.n	80064c6 <_strtol_l.isra.0+0xa2>
 80064ea:	1c53      	adds	r3, r2, #1
 80064ec:	d108      	bne.n	8006500 <_strtol_l.isra.0+0xdc>
 80064ee:	2322      	movs	r3, #34	@ 0x22
 80064f0:	4660      	mov	r0, ip
 80064f2:	f8ce 3000 	str.w	r3, [lr]
 80064f6:	f1b8 0f00 	cmp.w	r8, #0
 80064fa:	d0a0      	beq.n	800643e <_strtol_l.isra.0+0x1a>
 80064fc:	1e69      	subs	r1, r5, #1
 80064fe:	e006      	b.n	800650e <_strtol_l.isra.0+0xea>
 8006500:	b106      	cbz	r6, 8006504 <_strtol_l.isra.0+0xe0>
 8006502:	4240      	negs	r0, r0
 8006504:	f1b8 0f00 	cmp.w	r8, #0
 8006508:	d099      	beq.n	800643e <_strtol_l.isra.0+0x1a>
 800650a:	2a00      	cmp	r2, #0
 800650c:	d1f6      	bne.n	80064fc <_strtol_l.isra.0+0xd8>
 800650e:	f8c8 1000 	str.w	r1, [r8]
 8006512:	e794      	b.n	800643e <_strtol_l.isra.0+0x1a>
 8006514:	08008799 	.word	0x08008799

08006518 <_strtol_r>:
 8006518:	f7ff bf84 	b.w	8006424 <_strtol_l.isra.0>

0800651c <__ssputs_r>:
 800651c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006520:	461f      	mov	r7, r3
 8006522:	688e      	ldr	r6, [r1, #8]
 8006524:	4682      	mov	sl, r0
 8006526:	42be      	cmp	r6, r7
 8006528:	460c      	mov	r4, r1
 800652a:	4690      	mov	r8, r2
 800652c:	680b      	ldr	r3, [r1, #0]
 800652e:	d82d      	bhi.n	800658c <__ssputs_r+0x70>
 8006530:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006534:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006538:	d026      	beq.n	8006588 <__ssputs_r+0x6c>
 800653a:	6965      	ldr	r5, [r4, #20]
 800653c:	6909      	ldr	r1, [r1, #16]
 800653e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006542:	eba3 0901 	sub.w	r9, r3, r1
 8006546:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800654a:	1c7b      	adds	r3, r7, #1
 800654c:	444b      	add	r3, r9
 800654e:	106d      	asrs	r5, r5, #1
 8006550:	429d      	cmp	r5, r3
 8006552:	bf38      	it	cc
 8006554:	461d      	movcc	r5, r3
 8006556:	0553      	lsls	r3, r2, #21
 8006558:	d527      	bpl.n	80065aa <__ssputs_r+0x8e>
 800655a:	4629      	mov	r1, r5
 800655c:	f7fe fc36 	bl	8004dcc <_malloc_r>
 8006560:	4606      	mov	r6, r0
 8006562:	b360      	cbz	r0, 80065be <__ssputs_r+0xa2>
 8006564:	464a      	mov	r2, r9
 8006566:	6921      	ldr	r1, [r4, #16]
 8006568:	f000 fa14 	bl	8006994 <memcpy>
 800656c:	89a3      	ldrh	r3, [r4, #12]
 800656e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006576:	81a3      	strh	r3, [r4, #12]
 8006578:	6126      	str	r6, [r4, #16]
 800657a:	444e      	add	r6, r9
 800657c:	6026      	str	r6, [r4, #0]
 800657e:	463e      	mov	r6, r7
 8006580:	6165      	str	r5, [r4, #20]
 8006582:	eba5 0509 	sub.w	r5, r5, r9
 8006586:	60a5      	str	r5, [r4, #8]
 8006588:	42be      	cmp	r6, r7
 800658a:	d900      	bls.n	800658e <__ssputs_r+0x72>
 800658c:	463e      	mov	r6, r7
 800658e:	4632      	mov	r2, r6
 8006590:	4641      	mov	r1, r8
 8006592:	6820      	ldr	r0, [r4, #0]
 8006594:	f000 f9c2 	bl	800691c <memmove>
 8006598:	2000      	movs	r0, #0
 800659a:	68a3      	ldr	r3, [r4, #8]
 800659c:	1b9b      	subs	r3, r3, r6
 800659e:	60a3      	str	r3, [r4, #8]
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	4433      	add	r3, r6
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065aa:	462a      	mov	r2, r5
 80065ac:	f000 fd83 	bl	80070b6 <_realloc_r>
 80065b0:	4606      	mov	r6, r0
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d1e0      	bne.n	8006578 <__ssputs_r+0x5c>
 80065b6:	4650      	mov	r0, sl
 80065b8:	6921      	ldr	r1, [r4, #16]
 80065ba:	f7fe fb95 	bl	8004ce8 <_free_r>
 80065be:	230c      	movs	r3, #12
 80065c0:	f8ca 3000 	str.w	r3, [sl]
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065ce:	81a3      	strh	r3, [r4, #12]
 80065d0:	e7e9      	b.n	80065a6 <__ssputs_r+0x8a>
	...

080065d4 <_svfiprintf_r>:
 80065d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	4698      	mov	r8, r3
 80065da:	898b      	ldrh	r3, [r1, #12]
 80065dc:	4607      	mov	r7, r0
 80065de:	061b      	lsls	r3, r3, #24
 80065e0:	460d      	mov	r5, r1
 80065e2:	4614      	mov	r4, r2
 80065e4:	b09d      	sub	sp, #116	@ 0x74
 80065e6:	d510      	bpl.n	800660a <_svfiprintf_r+0x36>
 80065e8:	690b      	ldr	r3, [r1, #16]
 80065ea:	b973      	cbnz	r3, 800660a <_svfiprintf_r+0x36>
 80065ec:	2140      	movs	r1, #64	@ 0x40
 80065ee:	f7fe fbed 	bl	8004dcc <_malloc_r>
 80065f2:	6028      	str	r0, [r5, #0]
 80065f4:	6128      	str	r0, [r5, #16]
 80065f6:	b930      	cbnz	r0, 8006606 <_svfiprintf_r+0x32>
 80065f8:	230c      	movs	r3, #12
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006600:	b01d      	add	sp, #116	@ 0x74
 8006602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006606:	2340      	movs	r3, #64	@ 0x40
 8006608:	616b      	str	r3, [r5, #20]
 800660a:	2300      	movs	r3, #0
 800660c:	9309      	str	r3, [sp, #36]	@ 0x24
 800660e:	2320      	movs	r3, #32
 8006610:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006614:	2330      	movs	r3, #48	@ 0x30
 8006616:	f04f 0901 	mov.w	r9, #1
 800661a:	f8cd 800c 	str.w	r8, [sp, #12]
 800661e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80067b8 <_svfiprintf_r+0x1e4>
 8006622:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006626:	4623      	mov	r3, r4
 8006628:	469a      	mov	sl, r3
 800662a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800662e:	b10a      	cbz	r2, 8006634 <_svfiprintf_r+0x60>
 8006630:	2a25      	cmp	r2, #37	@ 0x25
 8006632:	d1f9      	bne.n	8006628 <_svfiprintf_r+0x54>
 8006634:	ebba 0b04 	subs.w	fp, sl, r4
 8006638:	d00b      	beq.n	8006652 <_svfiprintf_r+0x7e>
 800663a:	465b      	mov	r3, fp
 800663c:	4622      	mov	r2, r4
 800663e:	4629      	mov	r1, r5
 8006640:	4638      	mov	r0, r7
 8006642:	f7ff ff6b 	bl	800651c <__ssputs_r>
 8006646:	3001      	adds	r0, #1
 8006648:	f000 80a7 	beq.w	800679a <_svfiprintf_r+0x1c6>
 800664c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800664e:	445a      	add	r2, fp
 8006650:	9209      	str	r2, [sp, #36]	@ 0x24
 8006652:	f89a 3000 	ldrb.w	r3, [sl]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 809f 	beq.w	800679a <_svfiprintf_r+0x1c6>
 800665c:	2300      	movs	r3, #0
 800665e:	f04f 32ff 	mov.w	r2, #4294967295
 8006662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006666:	f10a 0a01 	add.w	sl, sl, #1
 800666a:	9304      	str	r3, [sp, #16]
 800666c:	9307      	str	r3, [sp, #28]
 800666e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006672:	931a      	str	r3, [sp, #104]	@ 0x68
 8006674:	4654      	mov	r4, sl
 8006676:	2205      	movs	r2, #5
 8006678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800667c:	484e      	ldr	r0, [pc, #312]	@ (80067b8 <_svfiprintf_r+0x1e4>)
 800667e:	f7fd fcc2 	bl	8004006 <memchr>
 8006682:	9a04      	ldr	r2, [sp, #16]
 8006684:	b9d8      	cbnz	r0, 80066be <_svfiprintf_r+0xea>
 8006686:	06d0      	lsls	r0, r2, #27
 8006688:	bf44      	itt	mi
 800668a:	2320      	movmi	r3, #32
 800668c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006690:	0711      	lsls	r1, r2, #28
 8006692:	bf44      	itt	mi
 8006694:	232b      	movmi	r3, #43	@ 0x2b
 8006696:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800669a:	f89a 3000 	ldrb.w	r3, [sl]
 800669e:	2b2a      	cmp	r3, #42	@ 0x2a
 80066a0:	d015      	beq.n	80066ce <_svfiprintf_r+0xfa>
 80066a2:	4654      	mov	r4, sl
 80066a4:	2000      	movs	r0, #0
 80066a6:	f04f 0c0a 	mov.w	ip, #10
 80066aa:	9a07      	ldr	r2, [sp, #28]
 80066ac:	4621      	mov	r1, r4
 80066ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066b2:	3b30      	subs	r3, #48	@ 0x30
 80066b4:	2b09      	cmp	r3, #9
 80066b6:	d94b      	bls.n	8006750 <_svfiprintf_r+0x17c>
 80066b8:	b1b0      	cbz	r0, 80066e8 <_svfiprintf_r+0x114>
 80066ba:	9207      	str	r2, [sp, #28]
 80066bc:	e014      	b.n	80066e8 <_svfiprintf_r+0x114>
 80066be:	eba0 0308 	sub.w	r3, r0, r8
 80066c2:	fa09 f303 	lsl.w	r3, r9, r3
 80066c6:	4313      	orrs	r3, r2
 80066c8:	46a2      	mov	sl, r4
 80066ca:	9304      	str	r3, [sp, #16]
 80066cc:	e7d2      	b.n	8006674 <_svfiprintf_r+0xa0>
 80066ce:	9b03      	ldr	r3, [sp, #12]
 80066d0:	1d19      	adds	r1, r3, #4
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	9103      	str	r1, [sp, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	bfbb      	ittet	lt
 80066da:	425b      	neglt	r3, r3
 80066dc:	f042 0202 	orrlt.w	r2, r2, #2
 80066e0:	9307      	strge	r3, [sp, #28]
 80066e2:	9307      	strlt	r3, [sp, #28]
 80066e4:	bfb8      	it	lt
 80066e6:	9204      	strlt	r2, [sp, #16]
 80066e8:	7823      	ldrb	r3, [r4, #0]
 80066ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80066ec:	d10a      	bne.n	8006704 <_svfiprintf_r+0x130>
 80066ee:	7863      	ldrb	r3, [r4, #1]
 80066f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80066f2:	d132      	bne.n	800675a <_svfiprintf_r+0x186>
 80066f4:	9b03      	ldr	r3, [sp, #12]
 80066f6:	3402      	adds	r4, #2
 80066f8:	1d1a      	adds	r2, r3, #4
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	9203      	str	r2, [sp, #12]
 80066fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006702:	9305      	str	r3, [sp, #20]
 8006704:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80067bc <_svfiprintf_r+0x1e8>
 8006708:	2203      	movs	r2, #3
 800670a:	4650      	mov	r0, sl
 800670c:	7821      	ldrb	r1, [r4, #0]
 800670e:	f7fd fc7a 	bl	8004006 <memchr>
 8006712:	b138      	cbz	r0, 8006724 <_svfiprintf_r+0x150>
 8006714:	2240      	movs	r2, #64	@ 0x40
 8006716:	9b04      	ldr	r3, [sp, #16]
 8006718:	eba0 000a 	sub.w	r0, r0, sl
 800671c:	4082      	lsls	r2, r0
 800671e:	4313      	orrs	r3, r2
 8006720:	3401      	adds	r4, #1
 8006722:	9304      	str	r3, [sp, #16]
 8006724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006728:	2206      	movs	r2, #6
 800672a:	4825      	ldr	r0, [pc, #148]	@ (80067c0 <_svfiprintf_r+0x1ec>)
 800672c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006730:	f7fd fc69 	bl	8004006 <memchr>
 8006734:	2800      	cmp	r0, #0
 8006736:	d036      	beq.n	80067a6 <_svfiprintf_r+0x1d2>
 8006738:	4b22      	ldr	r3, [pc, #136]	@ (80067c4 <_svfiprintf_r+0x1f0>)
 800673a:	bb1b      	cbnz	r3, 8006784 <_svfiprintf_r+0x1b0>
 800673c:	9b03      	ldr	r3, [sp, #12]
 800673e:	3307      	adds	r3, #7
 8006740:	f023 0307 	bic.w	r3, r3, #7
 8006744:	3308      	adds	r3, #8
 8006746:	9303      	str	r3, [sp, #12]
 8006748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800674a:	4433      	add	r3, r6
 800674c:	9309      	str	r3, [sp, #36]	@ 0x24
 800674e:	e76a      	b.n	8006626 <_svfiprintf_r+0x52>
 8006750:	460c      	mov	r4, r1
 8006752:	2001      	movs	r0, #1
 8006754:	fb0c 3202 	mla	r2, ip, r2, r3
 8006758:	e7a8      	b.n	80066ac <_svfiprintf_r+0xd8>
 800675a:	2300      	movs	r3, #0
 800675c:	f04f 0c0a 	mov.w	ip, #10
 8006760:	4619      	mov	r1, r3
 8006762:	3401      	adds	r4, #1
 8006764:	9305      	str	r3, [sp, #20]
 8006766:	4620      	mov	r0, r4
 8006768:	f810 2b01 	ldrb.w	r2, [r0], #1
 800676c:	3a30      	subs	r2, #48	@ 0x30
 800676e:	2a09      	cmp	r2, #9
 8006770:	d903      	bls.n	800677a <_svfiprintf_r+0x1a6>
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0c6      	beq.n	8006704 <_svfiprintf_r+0x130>
 8006776:	9105      	str	r1, [sp, #20]
 8006778:	e7c4      	b.n	8006704 <_svfiprintf_r+0x130>
 800677a:	4604      	mov	r4, r0
 800677c:	2301      	movs	r3, #1
 800677e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006782:	e7f0      	b.n	8006766 <_svfiprintf_r+0x192>
 8006784:	ab03      	add	r3, sp, #12
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	462a      	mov	r2, r5
 800678a:	4638      	mov	r0, r7
 800678c:	4b0e      	ldr	r3, [pc, #56]	@ (80067c8 <_svfiprintf_r+0x1f4>)
 800678e:	a904      	add	r1, sp, #16
 8006790:	f7fc fccc 	bl	800312c <_printf_float>
 8006794:	1c42      	adds	r2, r0, #1
 8006796:	4606      	mov	r6, r0
 8006798:	d1d6      	bne.n	8006748 <_svfiprintf_r+0x174>
 800679a:	89ab      	ldrh	r3, [r5, #12]
 800679c:	065b      	lsls	r3, r3, #25
 800679e:	f53f af2d 	bmi.w	80065fc <_svfiprintf_r+0x28>
 80067a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067a4:	e72c      	b.n	8006600 <_svfiprintf_r+0x2c>
 80067a6:	ab03      	add	r3, sp, #12
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	462a      	mov	r2, r5
 80067ac:	4638      	mov	r0, r7
 80067ae:	4b06      	ldr	r3, [pc, #24]	@ (80067c8 <_svfiprintf_r+0x1f4>)
 80067b0:	a904      	add	r1, sp, #16
 80067b2:	f7fc ff59 	bl	8003668 <_printf_i>
 80067b6:	e7ed      	b.n	8006794 <_svfiprintf_r+0x1c0>
 80067b8:	08008593 	.word	0x08008593
 80067bc:	08008599 	.word	0x08008599
 80067c0:	0800859d 	.word	0x0800859d
 80067c4:	0800312d 	.word	0x0800312d
 80067c8:	0800651d 	.word	0x0800651d

080067cc <__sflush_r>:
 80067cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d2:	0716      	lsls	r6, r2, #28
 80067d4:	4605      	mov	r5, r0
 80067d6:	460c      	mov	r4, r1
 80067d8:	d454      	bmi.n	8006884 <__sflush_r+0xb8>
 80067da:	684b      	ldr	r3, [r1, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	dc02      	bgt.n	80067e6 <__sflush_r+0x1a>
 80067e0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	dd48      	ble.n	8006878 <__sflush_r+0xac>
 80067e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067e8:	2e00      	cmp	r6, #0
 80067ea:	d045      	beq.n	8006878 <__sflush_r+0xac>
 80067ec:	2300      	movs	r3, #0
 80067ee:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80067f2:	682f      	ldr	r7, [r5, #0]
 80067f4:	6a21      	ldr	r1, [r4, #32]
 80067f6:	602b      	str	r3, [r5, #0]
 80067f8:	d030      	beq.n	800685c <__sflush_r+0x90>
 80067fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	0759      	lsls	r1, r3, #29
 8006800:	d505      	bpl.n	800680e <__sflush_r+0x42>
 8006802:	6863      	ldr	r3, [r4, #4]
 8006804:	1ad2      	subs	r2, r2, r3
 8006806:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006808:	b10b      	cbz	r3, 800680e <__sflush_r+0x42>
 800680a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800680c:	1ad2      	subs	r2, r2, r3
 800680e:	2300      	movs	r3, #0
 8006810:	4628      	mov	r0, r5
 8006812:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006814:	6a21      	ldr	r1, [r4, #32]
 8006816:	47b0      	blx	r6
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	d106      	bne.n	800682c <__sflush_r+0x60>
 800681e:	6829      	ldr	r1, [r5, #0]
 8006820:	291d      	cmp	r1, #29
 8006822:	d82b      	bhi.n	800687c <__sflush_r+0xb0>
 8006824:	4a28      	ldr	r2, [pc, #160]	@ (80068c8 <__sflush_r+0xfc>)
 8006826:	40ca      	lsrs	r2, r1
 8006828:	07d6      	lsls	r6, r2, #31
 800682a:	d527      	bpl.n	800687c <__sflush_r+0xb0>
 800682c:	2200      	movs	r2, #0
 800682e:	6062      	str	r2, [r4, #4]
 8006830:	6922      	ldr	r2, [r4, #16]
 8006832:	04d9      	lsls	r1, r3, #19
 8006834:	6022      	str	r2, [r4, #0]
 8006836:	d504      	bpl.n	8006842 <__sflush_r+0x76>
 8006838:	1c42      	adds	r2, r0, #1
 800683a:	d101      	bne.n	8006840 <__sflush_r+0x74>
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	b903      	cbnz	r3, 8006842 <__sflush_r+0x76>
 8006840:	6560      	str	r0, [r4, #84]	@ 0x54
 8006842:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006844:	602f      	str	r7, [r5, #0]
 8006846:	b1b9      	cbz	r1, 8006878 <__sflush_r+0xac>
 8006848:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800684c:	4299      	cmp	r1, r3
 800684e:	d002      	beq.n	8006856 <__sflush_r+0x8a>
 8006850:	4628      	mov	r0, r5
 8006852:	f7fe fa49 	bl	8004ce8 <_free_r>
 8006856:	2300      	movs	r3, #0
 8006858:	6363      	str	r3, [r4, #52]	@ 0x34
 800685a:	e00d      	b.n	8006878 <__sflush_r+0xac>
 800685c:	2301      	movs	r3, #1
 800685e:	4628      	mov	r0, r5
 8006860:	47b0      	blx	r6
 8006862:	4602      	mov	r2, r0
 8006864:	1c50      	adds	r0, r2, #1
 8006866:	d1c9      	bne.n	80067fc <__sflush_r+0x30>
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0c6      	beq.n	80067fc <__sflush_r+0x30>
 800686e:	2b1d      	cmp	r3, #29
 8006870:	d001      	beq.n	8006876 <__sflush_r+0xaa>
 8006872:	2b16      	cmp	r3, #22
 8006874:	d11d      	bne.n	80068b2 <__sflush_r+0xe6>
 8006876:	602f      	str	r7, [r5, #0]
 8006878:	2000      	movs	r0, #0
 800687a:	e021      	b.n	80068c0 <__sflush_r+0xf4>
 800687c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006880:	b21b      	sxth	r3, r3
 8006882:	e01a      	b.n	80068ba <__sflush_r+0xee>
 8006884:	690f      	ldr	r7, [r1, #16]
 8006886:	2f00      	cmp	r7, #0
 8006888:	d0f6      	beq.n	8006878 <__sflush_r+0xac>
 800688a:	0793      	lsls	r3, r2, #30
 800688c:	bf18      	it	ne
 800688e:	2300      	movne	r3, #0
 8006890:	680e      	ldr	r6, [r1, #0]
 8006892:	bf08      	it	eq
 8006894:	694b      	ldreq	r3, [r1, #20]
 8006896:	1bf6      	subs	r6, r6, r7
 8006898:	600f      	str	r7, [r1, #0]
 800689a:	608b      	str	r3, [r1, #8]
 800689c:	2e00      	cmp	r6, #0
 800689e:	ddeb      	ble.n	8006878 <__sflush_r+0xac>
 80068a0:	4633      	mov	r3, r6
 80068a2:	463a      	mov	r2, r7
 80068a4:	4628      	mov	r0, r5
 80068a6:	6a21      	ldr	r1, [r4, #32]
 80068a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80068ac:	47e0      	blx	ip
 80068ae:	2800      	cmp	r0, #0
 80068b0:	dc07      	bgt.n	80068c2 <__sflush_r+0xf6>
 80068b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068ba:	f04f 30ff 	mov.w	r0, #4294967295
 80068be:	81a3      	strh	r3, [r4, #12]
 80068c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c2:	4407      	add	r7, r0
 80068c4:	1a36      	subs	r6, r6, r0
 80068c6:	e7e9      	b.n	800689c <__sflush_r+0xd0>
 80068c8:	20400001 	.word	0x20400001

080068cc <_fflush_r>:
 80068cc:	b538      	push	{r3, r4, r5, lr}
 80068ce:	690b      	ldr	r3, [r1, #16]
 80068d0:	4605      	mov	r5, r0
 80068d2:	460c      	mov	r4, r1
 80068d4:	b913      	cbnz	r3, 80068dc <_fflush_r+0x10>
 80068d6:	2500      	movs	r5, #0
 80068d8:	4628      	mov	r0, r5
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	b118      	cbz	r0, 80068e6 <_fflush_r+0x1a>
 80068de:	6a03      	ldr	r3, [r0, #32]
 80068e0:	b90b      	cbnz	r3, 80068e6 <_fflush_r+0x1a>
 80068e2:	f7fd fa75 	bl	8003dd0 <__sinit>
 80068e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0f3      	beq.n	80068d6 <_fflush_r+0xa>
 80068ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80068f0:	07d0      	lsls	r0, r2, #31
 80068f2:	d404      	bmi.n	80068fe <_fflush_r+0x32>
 80068f4:	0599      	lsls	r1, r3, #22
 80068f6:	d402      	bmi.n	80068fe <_fflush_r+0x32>
 80068f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068fa:	f7fd fb82 	bl	8004002 <__retarget_lock_acquire_recursive>
 80068fe:	4628      	mov	r0, r5
 8006900:	4621      	mov	r1, r4
 8006902:	f7ff ff63 	bl	80067cc <__sflush_r>
 8006906:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006908:	4605      	mov	r5, r0
 800690a:	07da      	lsls	r2, r3, #31
 800690c:	d4e4      	bmi.n	80068d8 <_fflush_r+0xc>
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	059b      	lsls	r3, r3, #22
 8006912:	d4e1      	bmi.n	80068d8 <_fflush_r+0xc>
 8006914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006916:	f7fd fb75 	bl	8004004 <__retarget_lock_release_recursive>
 800691a:	e7dd      	b.n	80068d8 <_fflush_r+0xc>

0800691c <memmove>:
 800691c:	4288      	cmp	r0, r1
 800691e:	b510      	push	{r4, lr}
 8006920:	eb01 0402 	add.w	r4, r1, r2
 8006924:	d902      	bls.n	800692c <memmove+0x10>
 8006926:	4284      	cmp	r4, r0
 8006928:	4623      	mov	r3, r4
 800692a:	d807      	bhi.n	800693c <memmove+0x20>
 800692c:	1e43      	subs	r3, r0, #1
 800692e:	42a1      	cmp	r1, r4
 8006930:	d008      	beq.n	8006944 <memmove+0x28>
 8006932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006936:	f803 2f01 	strb.w	r2, [r3, #1]!
 800693a:	e7f8      	b.n	800692e <memmove+0x12>
 800693c:	4601      	mov	r1, r0
 800693e:	4402      	add	r2, r0
 8006940:	428a      	cmp	r2, r1
 8006942:	d100      	bne.n	8006946 <memmove+0x2a>
 8006944:	bd10      	pop	{r4, pc}
 8006946:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800694a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800694e:	e7f7      	b.n	8006940 <memmove+0x24>

08006950 <strncmp>:
 8006950:	b510      	push	{r4, lr}
 8006952:	b16a      	cbz	r2, 8006970 <strncmp+0x20>
 8006954:	3901      	subs	r1, #1
 8006956:	1884      	adds	r4, r0, r2
 8006958:	f810 2b01 	ldrb.w	r2, [r0], #1
 800695c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006960:	429a      	cmp	r2, r3
 8006962:	d103      	bne.n	800696c <strncmp+0x1c>
 8006964:	42a0      	cmp	r0, r4
 8006966:	d001      	beq.n	800696c <strncmp+0x1c>
 8006968:	2a00      	cmp	r2, #0
 800696a:	d1f5      	bne.n	8006958 <strncmp+0x8>
 800696c:	1ad0      	subs	r0, r2, r3
 800696e:	bd10      	pop	{r4, pc}
 8006970:	4610      	mov	r0, r2
 8006972:	e7fc      	b.n	800696e <strncmp+0x1e>

08006974 <_sbrk_r>:
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	2300      	movs	r3, #0
 8006978:	4d05      	ldr	r5, [pc, #20]	@ (8006990 <_sbrk_r+0x1c>)
 800697a:	4604      	mov	r4, r0
 800697c:	4608      	mov	r0, r1
 800697e:	602b      	str	r3, [r5, #0]
 8006980:	f7fa fe20 	bl	80015c4 <_sbrk>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d102      	bne.n	800698e <_sbrk_r+0x1a>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	b103      	cbz	r3, 800698e <_sbrk_r+0x1a>
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	200007b0 	.word	0x200007b0

08006994 <memcpy>:
 8006994:	440a      	add	r2, r1
 8006996:	4291      	cmp	r1, r2
 8006998:	f100 33ff 	add.w	r3, r0, #4294967295
 800699c:	d100      	bne.n	80069a0 <memcpy+0xc>
 800699e:	4770      	bx	lr
 80069a0:	b510      	push	{r4, lr}
 80069a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069a6:	4291      	cmp	r1, r2
 80069a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069ac:	d1f9      	bne.n	80069a2 <memcpy+0xe>
 80069ae:	bd10      	pop	{r4, pc}

080069b0 <nan>:
 80069b0:	2000      	movs	r0, #0
 80069b2:	4901      	ldr	r1, [pc, #4]	@ (80069b8 <nan+0x8>)
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	7ff80000 	.word	0x7ff80000

080069bc <__assert_func>:
 80069bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069be:	4614      	mov	r4, r2
 80069c0:	461a      	mov	r2, r3
 80069c2:	4b09      	ldr	r3, [pc, #36]	@ (80069e8 <__assert_func+0x2c>)
 80069c4:	4605      	mov	r5, r0
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68d8      	ldr	r0, [r3, #12]
 80069ca:	b14c      	cbz	r4, 80069e0 <__assert_func+0x24>
 80069cc:	4b07      	ldr	r3, [pc, #28]	@ (80069ec <__assert_func+0x30>)
 80069ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80069d2:	9100      	str	r1, [sp, #0]
 80069d4:	462b      	mov	r3, r5
 80069d6:	4906      	ldr	r1, [pc, #24]	@ (80069f0 <__assert_func+0x34>)
 80069d8:	f000 fba8 	bl	800712c <fiprintf>
 80069dc:	f000 fbb8 	bl	8007150 <abort>
 80069e0:	4b04      	ldr	r3, [pc, #16]	@ (80069f4 <__assert_func+0x38>)
 80069e2:	461c      	mov	r4, r3
 80069e4:	e7f3      	b.n	80069ce <__assert_func+0x12>
 80069e6:	bf00      	nop
 80069e8:	20000028 	.word	0x20000028
 80069ec:	080085ac 	.word	0x080085ac
 80069f0:	080085b9 	.word	0x080085b9
 80069f4:	080085e7 	.word	0x080085e7

080069f8 <_calloc_r>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	fba1 5402 	umull	r5, r4, r1, r2
 80069fe:	b934      	cbnz	r4, 8006a0e <_calloc_r+0x16>
 8006a00:	4629      	mov	r1, r5
 8006a02:	f7fe f9e3 	bl	8004dcc <_malloc_r>
 8006a06:	4606      	mov	r6, r0
 8006a08:	b928      	cbnz	r0, 8006a16 <_calloc_r+0x1e>
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	bd70      	pop	{r4, r5, r6, pc}
 8006a0e:	220c      	movs	r2, #12
 8006a10:	2600      	movs	r6, #0
 8006a12:	6002      	str	r2, [r0, #0]
 8006a14:	e7f9      	b.n	8006a0a <_calloc_r+0x12>
 8006a16:	462a      	mov	r2, r5
 8006a18:	4621      	mov	r1, r4
 8006a1a:	f7fd fa74 	bl	8003f06 <memset>
 8006a1e:	e7f4      	b.n	8006a0a <_calloc_r+0x12>

08006a20 <rshift>:
 8006a20:	6903      	ldr	r3, [r0, #16]
 8006a22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006a2a:	f100 0414 	add.w	r4, r0, #20
 8006a2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006a32:	dd46      	ble.n	8006ac2 <rshift+0xa2>
 8006a34:	f011 011f 	ands.w	r1, r1, #31
 8006a38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006a3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006a40:	d10c      	bne.n	8006a5c <rshift+0x3c>
 8006a42:	4629      	mov	r1, r5
 8006a44:	f100 0710 	add.w	r7, r0, #16
 8006a48:	42b1      	cmp	r1, r6
 8006a4a:	d335      	bcc.n	8006ab8 <rshift+0x98>
 8006a4c:	1a9b      	subs	r3, r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	1eea      	subs	r2, r5, #3
 8006a52:	4296      	cmp	r6, r2
 8006a54:	bf38      	it	cc
 8006a56:	2300      	movcc	r3, #0
 8006a58:	4423      	add	r3, r4
 8006a5a:	e015      	b.n	8006a88 <rshift+0x68>
 8006a5c:	46a1      	mov	r9, r4
 8006a5e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006a62:	f1c1 0820 	rsb	r8, r1, #32
 8006a66:	40cf      	lsrs	r7, r1
 8006a68:	f105 0e04 	add.w	lr, r5, #4
 8006a6c:	4576      	cmp	r6, lr
 8006a6e:	46f4      	mov	ip, lr
 8006a70:	d816      	bhi.n	8006aa0 <rshift+0x80>
 8006a72:	1a9a      	subs	r2, r3, r2
 8006a74:	0092      	lsls	r2, r2, #2
 8006a76:	3a04      	subs	r2, #4
 8006a78:	3501      	adds	r5, #1
 8006a7a:	42ae      	cmp	r6, r5
 8006a7c:	bf38      	it	cc
 8006a7e:	2200      	movcc	r2, #0
 8006a80:	18a3      	adds	r3, r4, r2
 8006a82:	50a7      	str	r7, [r4, r2]
 8006a84:	b107      	cbz	r7, 8006a88 <rshift+0x68>
 8006a86:	3304      	adds	r3, #4
 8006a88:	42a3      	cmp	r3, r4
 8006a8a:	eba3 0204 	sub.w	r2, r3, r4
 8006a8e:	bf08      	it	eq
 8006a90:	2300      	moveq	r3, #0
 8006a92:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006a96:	6102      	str	r2, [r0, #16]
 8006a98:	bf08      	it	eq
 8006a9a:	6143      	streq	r3, [r0, #20]
 8006a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006aa0:	f8dc c000 	ldr.w	ip, [ip]
 8006aa4:	fa0c fc08 	lsl.w	ip, ip, r8
 8006aa8:	ea4c 0707 	orr.w	r7, ip, r7
 8006aac:	f849 7b04 	str.w	r7, [r9], #4
 8006ab0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ab4:	40cf      	lsrs	r7, r1
 8006ab6:	e7d9      	b.n	8006a6c <rshift+0x4c>
 8006ab8:	f851 cb04 	ldr.w	ip, [r1], #4
 8006abc:	f847 cf04 	str.w	ip, [r7, #4]!
 8006ac0:	e7c2      	b.n	8006a48 <rshift+0x28>
 8006ac2:	4623      	mov	r3, r4
 8006ac4:	e7e0      	b.n	8006a88 <rshift+0x68>

08006ac6 <__hexdig_fun>:
 8006ac6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006aca:	2b09      	cmp	r3, #9
 8006acc:	d802      	bhi.n	8006ad4 <__hexdig_fun+0xe>
 8006ace:	3820      	subs	r0, #32
 8006ad0:	b2c0      	uxtb	r0, r0
 8006ad2:	4770      	bx	lr
 8006ad4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006ad8:	2b05      	cmp	r3, #5
 8006ada:	d801      	bhi.n	8006ae0 <__hexdig_fun+0x1a>
 8006adc:	3847      	subs	r0, #71	@ 0x47
 8006ade:	e7f7      	b.n	8006ad0 <__hexdig_fun+0xa>
 8006ae0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006ae4:	2b05      	cmp	r3, #5
 8006ae6:	d801      	bhi.n	8006aec <__hexdig_fun+0x26>
 8006ae8:	3827      	subs	r0, #39	@ 0x27
 8006aea:	e7f1      	b.n	8006ad0 <__hexdig_fun+0xa>
 8006aec:	2000      	movs	r0, #0
 8006aee:	4770      	bx	lr

08006af0 <__gethex>:
 8006af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af4:	468a      	mov	sl, r1
 8006af6:	4690      	mov	r8, r2
 8006af8:	b085      	sub	sp, #20
 8006afa:	9302      	str	r3, [sp, #8]
 8006afc:	680b      	ldr	r3, [r1, #0]
 8006afe:	9001      	str	r0, [sp, #4]
 8006b00:	1c9c      	adds	r4, r3, #2
 8006b02:	46a1      	mov	r9, r4
 8006b04:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006b08:	2830      	cmp	r0, #48	@ 0x30
 8006b0a:	d0fa      	beq.n	8006b02 <__gethex+0x12>
 8006b0c:	eba9 0303 	sub.w	r3, r9, r3
 8006b10:	f1a3 0b02 	sub.w	fp, r3, #2
 8006b14:	f7ff ffd7 	bl	8006ac6 <__hexdig_fun>
 8006b18:	4605      	mov	r5, r0
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d168      	bne.n	8006bf0 <__gethex+0x100>
 8006b1e:	2201      	movs	r2, #1
 8006b20:	4648      	mov	r0, r9
 8006b22:	499f      	ldr	r1, [pc, #636]	@ (8006da0 <__gethex+0x2b0>)
 8006b24:	f7ff ff14 	bl	8006950 <strncmp>
 8006b28:	4607      	mov	r7, r0
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d167      	bne.n	8006bfe <__gethex+0x10e>
 8006b2e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006b32:	4626      	mov	r6, r4
 8006b34:	f7ff ffc7 	bl	8006ac6 <__hexdig_fun>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d062      	beq.n	8006c02 <__gethex+0x112>
 8006b3c:	4623      	mov	r3, r4
 8006b3e:	7818      	ldrb	r0, [r3, #0]
 8006b40:	4699      	mov	r9, r3
 8006b42:	2830      	cmp	r0, #48	@ 0x30
 8006b44:	f103 0301 	add.w	r3, r3, #1
 8006b48:	d0f9      	beq.n	8006b3e <__gethex+0x4e>
 8006b4a:	f7ff ffbc 	bl	8006ac6 <__hexdig_fun>
 8006b4e:	fab0 f580 	clz	r5, r0
 8006b52:	f04f 0b01 	mov.w	fp, #1
 8006b56:	096d      	lsrs	r5, r5, #5
 8006b58:	464a      	mov	r2, r9
 8006b5a:	4616      	mov	r6, r2
 8006b5c:	7830      	ldrb	r0, [r6, #0]
 8006b5e:	3201      	adds	r2, #1
 8006b60:	f7ff ffb1 	bl	8006ac6 <__hexdig_fun>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d1f8      	bne.n	8006b5a <__gethex+0x6a>
 8006b68:	2201      	movs	r2, #1
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	498c      	ldr	r1, [pc, #560]	@ (8006da0 <__gethex+0x2b0>)
 8006b6e:	f7ff feef 	bl	8006950 <strncmp>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d13f      	bne.n	8006bf6 <__gethex+0x106>
 8006b76:	b944      	cbnz	r4, 8006b8a <__gethex+0x9a>
 8006b78:	1c74      	adds	r4, r6, #1
 8006b7a:	4622      	mov	r2, r4
 8006b7c:	4616      	mov	r6, r2
 8006b7e:	7830      	ldrb	r0, [r6, #0]
 8006b80:	3201      	adds	r2, #1
 8006b82:	f7ff ffa0 	bl	8006ac6 <__hexdig_fun>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d1f8      	bne.n	8006b7c <__gethex+0x8c>
 8006b8a:	1ba4      	subs	r4, r4, r6
 8006b8c:	00a7      	lsls	r7, r4, #2
 8006b8e:	7833      	ldrb	r3, [r6, #0]
 8006b90:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006b94:	2b50      	cmp	r3, #80	@ 0x50
 8006b96:	d13e      	bne.n	8006c16 <__gethex+0x126>
 8006b98:	7873      	ldrb	r3, [r6, #1]
 8006b9a:	2b2b      	cmp	r3, #43	@ 0x2b
 8006b9c:	d033      	beq.n	8006c06 <__gethex+0x116>
 8006b9e:	2b2d      	cmp	r3, #45	@ 0x2d
 8006ba0:	d034      	beq.n	8006c0c <__gethex+0x11c>
 8006ba2:	2400      	movs	r4, #0
 8006ba4:	1c71      	adds	r1, r6, #1
 8006ba6:	7808      	ldrb	r0, [r1, #0]
 8006ba8:	f7ff ff8d 	bl	8006ac6 <__hexdig_fun>
 8006bac:	1e43      	subs	r3, r0, #1
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b18      	cmp	r3, #24
 8006bb2:	d830      	bhi.n	8006c16 <__gethex+0x126>
 8006bb4:	f1a0 0210 	sub.w	r2, r0, #16
 8006bb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006bbc:	f7ff ff83 	bl	8006ac6 <__hexdig_fun>
 8006bc0:	f100 3cff 	add.w	ip, r0, #4294967295
 8006bc4:	fa5f fc8c 	uxtb.w	ip, ip
 8006bc8:	f1bc 0f18 	cmp.w	ip, #24
 8006bcc:	f04f 030a 	mov.w	r3, #10
 8006bd0:	d91e      	bls.n	8006c10 <__gethex+0x120>
 8006bd2:	b104      	cbz	r4, 8006bd6 <__gethex+0xe6>
 8006bd4:	4252      	negs	r2, r2
 8006bd6:	4417      	add	r7, r2
 8006bd8:	f8ca 1000 	str.w	r1, [sl]
 8006bdc:	b1ed      	cbz	r5, 8006c1a <__gethex+0x12a>
 8006bde:	f1bb 0f00 	cmp.w	fp, #0
 8006be2:	bf0c      	ite	eq
 8006be4:	2506      	moveq	r5, #6
 8006be6:	2500      	movne	r5, #0
 8006be8:	4628      	mov	r0, r5
 8006bea:	b005      	add	sp, #20
 8006bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf0:	2500      	movs	r5, #0
 8006bf2:	462c      	mov	r4, r5
 8006bf4:	e7b0      	b.n	8006b58 <__gethex+0x68>
 8006bf6:	2c00      	cmp	r4, #0
 8006bf8:	d1c7      	bne.n	8006b8a <__gethex+0x9a>
 8006bfa:	4627      	mov	r7, r4
 8006bfc:	e7c7      	b.n	8006b8e <__gethex+0x9e>
 8006bfe:	464e      	mov	r6, r9
 8006c00:	462f      	mov	r7, r5
 8006c02:	2501      	movs	r5, #1
 8006c04:	e7c3      	b.n	8006b8e <__gethex+0x9e>
 8006c06:	2400      	movs	r4, #0
 8006c08:	1cb1      	adds	r1, r6, #2
 8006c0a:	e7cc      	b.n	8006ba6 <__gethex+0xb6>
 8006c0c:	2401      	movs	r4, #1
 8006c0e:	e7fb      	b.n	8006c08 <__gethex+0x118>
 8006c10:	fb03 0002 	mla	r0, r3, r2, r0
 8006c14:	e7ce      	b.n	8006bb4 <__gethex+0xc4>
 8006c16:	4631      	mov	r1, r6
 8006c18:	e7de      	b.n	8006bd8 <__gethex+0xe8>
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	eba6 0309 	sub.w	r3, r6, r9
 8006c20:	3b01      	subs	r3, #1
 8006c22:	2b07      	cmp	r3, #7
 8006c24:	dc0a      	bgt.n	8006c3c <__gethex+0x14c>
 8006c26:	9801      	ldr	r0, [sp, #4]
 8006c28:	f7fe f95c 	bl	8004ee4 <_Balloc>
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	b940      	cbnz	r0, 8006c42 <__gethex+0x152>
 8006c30:	4602      	mov	r2, r0
 8006c32:	21e4      	movs	r1, #228	@ 0xe4
 8006c34:	4b5b      	ldr	r3, [pc, #364]	@ (8006da4 <__gethex+0x2b4>)
 8006c36:	485c      	ldr	r0, [pc, #368]	@ (8006da8 <__gethex+0x2b8>)
 8006c38:	f7ff fec0 	bl	80069bc <__assert_func>
 8006c3c:	3101      	adds	r1, #1
 8006c3e:	105b      	asrs	r3, r3, #1
 8006c40:	e7ef      	b.n	8006c22 <__gethex+0x132>
 8006c42:	2300      	movs	r3, #0
 8006c44:	f100 0a14 	add.w	sl, r0, #20
 8006c48:	4655      	mov	r5, sl
 8006c4a:	469b      	mov	fp, r3
 8006c4c:	45b1      	cmp	r9, r6
 8006c4e:	d337      	bcc.n	8006cc0 <__gethex+0x1d0>
 8006c50:	f845 bb04 	str.w	fp, [r5], #4
 8006c54:	eba5 050a 	sub.w	r5, r5, sl
 8006c58:	10ad      	asrs	r5, r5, #2
 8006c5a:	6125      	str	r5, [r4, #16]
 8006c5c:	4658      	mov	r0, fp
 8006c5e:	f7fe fa33 	bl	80050c8 <__hi0bits>
 8006c62:	016d      	lsls	r5, r5, #5
 8006c64:	f8d8 6000 	ldr.w	r6, [r8]
 8006c68:	1a2d      	subs	r5, r5, r0
 8006c6a:	42b5      	cmp	r5, r6
 8006c6c:	dd54      	ble.n	8006d18 <__gethex+0x228>
 8006c6e:	1bad      	subs	r5, r5, r6
 8006c70:	4629      	mov	r1, r5
 8006c72:	4620      	mov	r0, r4
 8006c74:	f7fe fdb5 	bl	80057e2 <__any_on>
 8006c78:	4681      	mov	r9, r0
 8006c7a:	b178      	cbz	r0, 8006c9c <__gethex+0x1ac>
 8006c7c:	f04f 0901 	mov.w	r9, #1
 8006c80:	1e6b      	subs	r3, r5, #1
 8006c82:	1159      	asrs	r1, r3, #5
 8006c84:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006c88:	f003 021f 	and.w	r2, r3, #31
 8006c8c:	fa09 f202 	lsl.w	r2, r9, r2
 8006c90:	420a      	tst	r2, r1
 8006c92:	d003      	beq.n	8006c9c <__gethex+0x1ac>
 8006c94:	454b      	cmp	r3, r9
 8006c96:	dc36      	bgt.n	8006d06 <__gethex+0x216>
 8006c98:	f04f 0902 	mov.w	r9, #2
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f7ff febe 	bl	8006a20 <rshift>
 8006ca4:	442f      	add	r7, r5
 8006ca6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006caa:	42bb      	cmp	r3, r7
 8006cac:	da42      	bge.n	8006d34 <__gethex+0x244>
 8006cae:	4621      	mov	r1, r4
 8006cb0:	9801      	ldr	r0, [sp, #4]
 8006cb2:	f7fe f957 	bl	8004f64 <_Bfree>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006cba:	25a3      	movs	r5, #163	@ 0xa3
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	e793      	b.n	8006be8 <__gethex+0xf8>
 8006cc0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006cc4:	2a2e      	cmp	r2, #46	@ 0x2e
 8006cc6:	d012      	beq.n	8006cee <__gethex+0x1fe>
 8006cc8:	2b20      	cmp	r3, #32
 8006cca:	d104      	bne.n	8006cd6 <__gethex+0x1e6>
 8006ccc:	f845 bb04 	str.w	fp, [r5], #4
 8006cd0:	f04f 0b00 	mov.w	fp, #0
 8006cd4:	465b      	mov	r3, fp
 8006cd6:	7830      	ldrb	r0, [r6, #0]
 8006cd8:	9303      	str	r3, [sp, #12]
 8006cda:	f7ff fef4 	bl	8006ac6 <__hexdig_fun>
 8006cde:	9b03      	ldr	r3, [sp, #12]
 8006ce0:	f000 000f 	and.w	r0, r0, #15
 8006ce4:	4098      	lsls	r0, r3
 8006ce6:	ea4b 0b00 	orr.w	fp, fp, r0
 8006cea:	3304      	adds	r3, #4
 8006cec:	e7ae      	b.n	8006c4c <__gethex+0x15c>
 8006cee:	45b1      	cmp	r9, r6
 8006cf0:	d8ea      	bhi.n	8006cc8 <__gethex+0x1d8>
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	492a      	ldr	r1, [pc, #168]	@ (8006da0 <__gethex+0x2b0>)
 8006cf8:	9303      	str	r3, [sp, #12]
 8006cfa:	f7ff fe29 	bl	8006950 <strncmp>
 8006cfe:	9b03      	ldr	r3, [sp, #12]
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d1e1      	bne.n	8006cc8 <__gethex+0x1d8>
 8006d04:	e7a2      	b.n	8006c4c <__gethex+0x15c>
 8006d06:	4620      	mov	r0, r4
 8006d08:	1ea9      	subs	r1, r5, #2
 8006d0a:	f7fe fd6a 	bl	80057e2 <__any_on>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d0c2      	beq.n	8006c98 <__gethex+0x1a8>
 8006d12:	f04f 0903 	mov.w	r9, #3
 8006d16:	e7c1      	b.n	8006c9c <__gethex+0x1ac>
 8006d18:	da09      	bge.n	8006d2e <__gethex+0x23e>
 8006d1a:	1b75      	subs	r5, r6, r5
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	462a      	mov	r2, r5
 8006d20:	9801      	ldr	r0, [sp, #4]
 8006d22:	f7fe fb2f 	bl	8005384 <__lshift>
 8006d26:	4604      	mov	r4, r0
 8006d28:	1b7f      	subs	r7, r7, r5
 8006d2a:	f100 0a14 	add.w	sl, r0, #20
 8006d2e:	f04f 0900 	mov.w	r9, #0
 8006d32:	e7b8      	b.n	8006ca6 <__gethex+0x1b6>
 8006d34:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006d38:	42bd      	cmp	r5, r7
 8006d3a:	dd6f      	ble.n	8006e1c <__gethex+0x32c>
 8006d3c:	1bed      	subs	r5, r5, r7
 8006d3e:	42ae      	cmp	r6, r5
 8006d40:	dc34      	bgt.n	8006dac <__gethex+0x2bc>
 8006d42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d022      	beq.n	8006d90 <__gethex+0x2a0>
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d024      	beq.n	8006d98 <__gethex+0x2a8>
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d115      	bne.n	8006d7e <__gethex+0x28e>
 8006d52:	42ae      	cmp	r6, r5
 8006d54:	d113      	bne.n	8006d7e <__gethex+0x28e>
 8006d56:	2e01      	cmp	r6, #1
 8006d58:	d10b      	bne.n	8006d72 <__gethex+0x282>
 8006d5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006d5e:	9a02      	ldr	r2, [sp, #8]
 8006d60:	2562      	movs	r5, #98	@ 0x62
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	2301      	movs	r3, #1
 8006d66:	6123      	str	r3, [r4, #16]
 8006d68:	f8ca 3000 	str.w	r3, [sl]
 8006d6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d6e:	601c      	str	r4, [r3, #0]
 8006d70:	e73a      	b.n	8006be8 <__gethex+0xf8>
 8006d72:	4620      	mov	r0, r4
 8006d74:	1e71      	subs	r1, r6, #1
 8006d76:	f7fe fd34 	bl	80057e2 <__any_on>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d1ed      	bne.n	8006d5a <__gethex+0x26a>
 8006d7e:	4621      	mov	r1, r4
 8006d80:	9801      	ldr	r0, [sp, #4]
 8006d82:	f7fe f8ef 	bl	8004f64 <_Bfree>
 8006d86:	2300      	movs	r3, #0
 8006d88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d8a:	2550      	movs	r5, #80	@ 0x50
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	e72b      	b.n	8006be8 <__gethex+0xf8>
 8006d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1f3      	bne.n	8006d7e <__gethex+0x28e>
 8006d96:	e7e0      	b.n	8006d5a <__gethex+0x26a>
 8006d98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1dd      	bne.n	8006d5a <__gethex+0x26a>
 8006d9e:	e7ee      	b.n	8006d7e <__gethex+0x28e>
 8006da0:	08008591 	.word	0x08008591
 8006da4:	08008527 	.word	0x08008527
 8006da8:	080085e8 	.word	0x080085e8
 8006dac:	1e6f      	subs	r7, r5, #1
 8006dae:	f1b9 0f00 	cmp.w	r9, #0
 8006db2:	d130      	bne.n	8006e16 <__gethex+0x326>
 8006db4:	b127      	cbz	r7, 8006dc0 <__gethex+0x2d0>
 8006db6:	4639      	mov	r1, r7
 8006db8:	4620      	mov	r0, r4
 8006dba:	f7fe fd12 	bl	80057e2 <__any_on>
 8006dbe:	4681      	mov	r9, r0
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	1b76      	subs	r6, r6, r5
 8006dc6:	2502      	movs	r5, #2
 8006dc8:	117a      	asrs	r2, r7, #5
 8006dca:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006dce:	f007 071f 	and.w	r7, r7, #31
 8006dd2:	40bb      	lsls	r3, r7
 8006dd4:	4213      	tst	r3, r2
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	bf18      	it	ne
 8006dda:	f049 0902 	orrne.w	r9, r9, #2
 8006dde:	f7ff fe1f 	bl	8006a20 <rshift>
 8006de2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006de6:	f1b9 0f00 	cmp.w	r9, #0
 8006dea:	d047      	beq.n	8006e7c <__gethex+0x38c>
 8006dec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d015      	beq.n	8006e20 <__gethex+0x330>
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d017      	beq.n	8006e28 <__gethex+0x338>
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d109      	bne.n	8006e10 <__gethex+0x320>
 8006dfc:	f019 0f02 	tst.w	r9, #2
 8006e00:	d006      	beq.n	8006e10 <__gethex+0x320>
 8006e02:	f8da 3000 	ldr.w	r3, [sl]
 8006e06:	ea49 0903 	orr.w	r9, r9, r3
 8006e0a:	f019 0f01 	tst.w	r9, #1
 8006e0e:	d10e      	bne.n	8006e2e <__gethex+0x33e>
 8006e10:	f045 0510 	orr.w	r5, r5, #16
 8006e14:	e032      	b.n	8006e7c <__gethex+0x38c>
 8006e16:	f04f 0901 	mov.w	r9, #1
 8006e1a:	e7d1      	b.n	8006dc0 <__gethex+0x2d0>
 8006e1c:	2501      	movs	r5, #1
 8006e1e:	e7e2      	b.n	8006de6 <__gethex+0x2f6>
 8006e20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e22:	f1c3 0301 	rsb	r3, r3, #1
 8006e26:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0f0      	beq.n	8006e10 <__gethex+0x320>
 8006e2e:	f04f 0c00 	mov.w	ip, #0
 8006e32:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006e36:	f104 0314 	add.w	r3, r4, #20
 8006e3a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006e3e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006e42:	4618      	mov	r0, r3
 8006e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e48:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006e4c:	d01b      	beq.n	8006e86 <__gethex+0x396>
 8006e4e:	3201      	adds	r2, #1
 8006e50:	6002      	str	r2, [r0, #0]
 8006e52:	2d02      	cmp	r5, #2
 8006e54:	f104 0314 	add.w	r3, r4, #20
 8006e58:	d13c      	bne.n	8006ed4 <__gethex+0x3e4>
 8006e5a:	f8d8 2000 	ldr.w	r2, [r8]
 8006e5e:	3a01      	subs	r2, #1
 8006e60:	42b2      	cmp	r2, r6
 8006e62:	d109      	bne.n	8006e78 <__gethex+0x388>
 8006e64:	2201      	movs	r2, #1
 8006e66:	1171      	asrs	r1, r6, #5
 8006e68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e6c:	f006 061f 	and.w	r6, r6, #31
 8006e70:	fa02 f606 	lsl.w	r6, r2, r6
 8006e74:	421e      	tst	r6, r3
 8006e76:	d13a      	bne.n	8006eee <__gethex+0x3fe>
 8006e78:	f045 0520 	orr.w	r5, r5, #32
 8006e7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e7e:	601c      	str	r4, [r3, #0]
 8006e80:	9b02      	ldr	r3, [sp, #8]
 8006e82:	601f      	str	r7, [r3, #0]
 8006e84:	e6b0      	b.n	8006be8 <__gethex+0xf8>
 8006e86:	4299      	cmp	r1, r3
 8006e88:	f843 cc04 	str.w	ip, [r3, #-4]
 8006e8c:	d8d9      	bhi.n	8006e42 <__gethex+0x352>
 8006e8e:	68a3      	ldr	r3, [r4, #8]
 8006e90:	459b      	cmp	fp, r3
 8006e92:	db17      	blt.n	8006ec4 <__gethex+0x3d4>
 8006e94:	6861      	ldr	r1, [r4, #4]
 8006e96:	9801      	ldr	r0, [sp, #4]
 8006e98:	3101      	adds	r1, #1
 8006e9a:	f7fe f823 	bl	8004ee4 <_Balloc>
 8006e9e:	4681      	mov	r9, r0
 8006ea0:	b918      	cbnz	r0, 8006eaa <__gethex+0x3ba>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	2184      	movs	r1, #132	@ 0x84
 8006ea6:	4b19      	ldr	r3, [pc, #100]	@ (8006f0c <__gethex+0x41c>)
 8006ea8:	e6c5      	b.n	8006c36 <__gethex+0x146>
 8006eaa:	6922      	ldr	r2, [r4, #16]
 8006eac:	f104 010c 	add.w	r1, r4, #12
 8006eb0:	3202      	adds	r2, #2
 8006eb2:	0092      	lsls	r2, r2, #2
 8006eb4:	300c      	adds	r0, #12
 8006eb6:	f7ff fd6d 	bl	8006994 <memcpy>
 8006eba:	4621      	mov	r1, r4
 8006ebc:	9801      	ldr	r0, [sp, #4]
 8006ebe:	f7fe f851 	bl	8004f64 <_Bfree>
 8006ec2:	464c      	mov	r4, r9
 8006ec4:	6923      	ldr	r3, [r4, #16]
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	6122      	str	r2, [r4, #16]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ed0:	615a      	str	r2, [r3, #20]
 8006ed2:	e7be      	b.n	8006e52 <__gethex+0x362>
 8006ed4:	6922      	ldr	r2, [r4, #16]
 8006ed6:	455a      	cmp	r2, fp
 8006ed8:	dd0b      	ble.n	8006ef2 <__gethex+0x402>
 8006eda:	2101      	movs	r1, #1
 8006edc:	4620      	mov	r0, r4
 8006ede:	f7ff fd9f 	bl	8006a20 <rshift>
 8006ee2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ee6:	3701      	adds	r7, #1
 8006ee8:	42bb      	cmp	r3, r7
 8006eea:	f6ff aee0 	blt.w	8006cae <__gethex+0x1be>
 8006eee:	2501      	movs	r5, #1
 8006ef0:	e7c2      	b.n	8006e78 <__gethex+0x388>
 8006ef2:	f016 061f 	ands.w	r6, r6, #31
 8006ef6:	d0fa      	beq.n	8006eee <__gethex+0x3fe>
 8006ef8:	4453      	add	r3, sl
 8006efa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006efe:	f7fe f8e3 	bl	80050c8 <__hi0bits>
 8006f02:	f1c6 0620 	rsb	r6, r6, #32
 8006f06:	42b0      	cmp	r0, r6
 8006f08:	dbe7      	blt.n	8006eda <__gethex+0x3ea>
 8006f0a:	e7f0      	b.n	8006eee <__gethex+0x3fe>
 8006f0c:	08008527 	.word	0x08008527

08006f10 <L_shift>:
 8006f10:	f1c2 0208 	rsb	r2, r2, #8
 8006f14:	0092      	lsls	r2, r2, #2
 8006f16:	b570      	push	{r4, r5, r6, lr}
 8006f18:	f1c2 0620 	rsb	r6, r2, #32
 8006f1c:	6843      	ldr	r3, [r0, #4]
 8006f1e:	6804      	ldr	r4, [r0, #0]
 8006f20:	fa03 f506 	lsl.w	r5, r3, r6
 8006f24:	432c      	orrs	r4, r5
 8006f26:	40d3      	lsrs	r3, r2
 8006f28:	6004      	str	r4, [r0, #0]
 8006f2a:	f840 3f04 	str.w	r3, [r0, #4]!
 8006f2e:	4288      	cmp	r0, r1
 8006f30:	d3f4      	bcc.n	8006f1c <L_shift+0xc>
 8006f32:	bd70      	pop	{r4, r5, r6, pc}

08006f34 <__match>:
 8006f34:	b530      	push	{r4, r5, lr}
 8006f36:	6803      	ldr	r3, [r0, #0]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f3e:	b914      	cbnz	r4, 8006f46 <__match+0x12>
 8006f40:	6003      	str	r3, [r0, #0]
 8006f42:	2001      	movs	r0, #1
 8006f44:	bd30      	pop	{r4, r5, pc}
 8006f46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f4a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8006f4e:	2d19      	cmp	r5, #25
 8006f50:	bf98      	it	ls
 8006f52:	3220      	addls	r2, #32
 8006f54:	42a2      	cmp	r2, r4
 8006f56:	d0f0      	beq.n	8006f3a <__match+0x6>
 8006f58:	2000      	movs	r0, #0
 8006f5a:	e7f3      	b.n	8006f44 <__match+0x10>

08006f5c <__hexnan>:
 8006f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f60:	2500      	movs	r5, #0
 8006f62:	680b      	ldr	r3, [r1, #0]
 8006f64:	4682      	mov	sl, r0
 8006f66:	115e      	asrs	r6, r3, #5
 8006f68:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006f6c:	f013 031f 	ands.w	r3, r3, #31
 8006f70:	bf18      	it	ne
 8006f72:	3604      	addne	r6, #4
 8006f74:	1f37      	subs	r7, r6, #4
 8006f76:	4690      	mov	r8, r2
 8006f78:	46b9      	mov	r9, r7
 8006f7a:	463c      	mov	r4, r7
 8006f7c:	46ab      	mov	fp, r5
 8006f7e:	b087      	sub	sp, #28
 8006f80:	6801      	ldr	r1, [r0, #0]
 8006f82:	9301      	str	r3, [sp, #4]
 8006f84:	f846 5c04 	str.w	r5, [r6, #-4]
 8006f88:	9502      	str	r5, [sp, #8]
 8006f8a:	784a      	ldrb	r2, [r1, #1]
 8006f8c:	1c4b      	adds	r3, r1, #1
 8006f8e:	9303      	str	r3, [sp, #12]
 8006f90:	b342      	cbz	r2, 8006fe4 <__hexnan+0x88>
 8006f92:	4610      	mov	r0, r2
 8006f94:	9105      	str	r1, [sp, #20]
 8006f96:	9204      	str	r2, [sp, #16]
 8006f98:	f7ff fd95 	bl	8006ac6 <__hexdig_fun>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d151      	bne.n	8007044 <__hexnan+0xe8>
 8006fa0:	9a04      	ldr	r2, [sp, #16]
 8006fa2:	9905      	ldr	r1, [sp, #20]
 8006fa4:	2a20      	cmp	r2, #32
 8006fa6:	d818      	bhi.n	8006fda <__hexnan+0x7e>
 8006fa8:	9b02      	ldr	r3, [sp, #8]
 8006faa:	459b      	cmp	fp, r3
 8006fac:	dd13      	ble.n	8006fd6 <__hexnan+0x7a>
 8006fae:	454c      	cmp	r4, r9
 8006fb0:	d206      	bcs.n	8006fc0 <__hexnan+0x64>
 8006fb2:	2d07      	cmp	r5, #7
 8006fb4:	dc04      	bgt.n	8006fc0 <__hexnan+0x64>
 8006fb6:	462a      	mov	r2, r5
 8006fb8:	4649      	mov	r1, r9
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f7ff ffa8 	bl	8006f10 <L_shift>
 8006fc0:	4544      	cmp	r4, r8
 8006fc2:	d952      	bls.n	800706a <__hexnan+0x10e>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f1a4 0904 	sub.w	r9, r4, #4
 8006fca:	f844 3c04 	str.w	r3, [r4, #-4]
 8006fce:	461d      	mov	r5, r3
 8006fd0:	464c      	mov	r4, r9
 8006fd2:	f8cd b008 	str.w	fp, [sp, #8]
 8006fd6:	9903      	ldr	r1, [sp, #12]
 8006fd8:	e7d7      	b.n	8006f8a <__hexnan+0x2e>
 8006fda:	2a29      	cmp	r2, #41	@ 0x29
 8006fdc:	d157      	bne.n	800708e <__hexnan+0x132>
 8006fde:	3102      	adds	r1, #2
 8006fe0:	f8ca 1000 	str.w	r1, [sl]
 8006fe4:	f1bb 0f00 	cmp.w	fp, #0
 8006fe8:	d051      	beq.n	800708e <__hexnan+0x132>
 8006fea:	454c      	cmp	r4, r9
 8006fec:	d206      	bcs.n	8006ffc <__hexnan+0xa0>
 8006fee:	2d07      	cmp	r5, #7
 8006ff0:	dc04      	bgt.n	8006ffc <__hexnan+0xa0>
 8006ff2:	462a      	mov	r2, r5
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f7ff ff8a 	bl	8006f10 <L_shift>
 8006ffc:	4544      	cmp	r4, r8
 8006ffe:	d936      	bls.n	800706e <__hexnan+0x112>
 8007000:	4623      	mov	r3, r4
 8007002:	f1a8 0204 	sub.w	r2, r8, #4
 8007006:	f853 1b04 	ldr.w	r1, [r3], #4
 800700a:	429f      	cmp	r7, r3
 800700c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007010:	d2f9      	bcs.n	8007006 <__hexnan+0xaa>
 8007012:	1b3b      	subs	r3, r7, r4
 8007014:	f023 0303 	bic.w	r3, r3, #3
 8007018:	3304      	adds	r3, #4
 800701a:	3401      	adds	r4, #1
 800701c:	3e03      	subs	r6, #3
 800701e:	42b4      	cmp	r4, r6
 8007020:	bf88      	it	hi
 8007022:	2304      	movhi	r3, #4
 8007024:	2200      	movs	r2, #0
 8007026:	4443      	add	r3, r8
 8007028:	f843 2b04 	str.w	r2, [r3], #4
 800702c:	429f      	cmp	r7, r3
 800702e:	d2fb      	bcs.n	8007028 <__hexnan+0xcc>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	b91b      	cbnz	r3, 800703c <__hexnan+0xe0>
 8007034:	4547      	cmp	r7, r8
 8007036:	d128      	bne.n	800708a <__hexnan+0x12e>
 8007038:	2301      	movs	r3, #1
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	2005      	movs	r0, #5
 800703e:	b007      	add	sp, #28
 8007040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007044:	3501      	adds	r5, #1
 8007046:	2d08      	cmp	r5, #8
 8007048:	f10b 0b01 	add.w	fp, fp, #1
 800704c:	dd06      	ble.n	800705c <__hexnan+0x100>
 800704e:	4544      	cmp	r4, r8
 8007050:	d9c1      	bls.n	8006fd6 <__hexnan+0x7a>
 8007052:	2300      	movs	r3, #0
 8007054:	2501      	movs	r5, #1
 8007056:	f844 3c04 	str.w	r3, [r4, #-4]
 800705a:	3c04      	subs	r4, #4
 800705c:	6822      	ldr	r2, [r4, #0]
 800705e:	f000 000f 	and.w	r0, r0, #15
 8007062:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007066:	6020      	str	r0, [r4, #0]
 8007068:	e7b5      	b.n	8006fd6 <__hexnan+0x7a>
 800706a:	2508      	movs	r5, #8
 800706c:	e7b3      	b.n	8006fd6 <__hexnan+0x7a>
 800706e:	9b01      	ldr	r3, [sp, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d0dd      	beq.n	8007030 <__hexnan+0xd4>
 8007074:	f04f 32ff 	mov.w	r2, #4294967295
 8007078:	f1c3 0320 	rsb	r3, r3, #32
 800707c:	40da      	lsrs	r2, r3
 800707e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007082:	4013      	ands	r3, r2
 8007084:	f846 3c04 	str.w	r3, [r6, #-4]
 8007088:	e7d2      	b.n	8007030 <__hexnan+0xd4>
 800708a:	3f04      	subs	r7, #4
 800708c:	e7d0      	b.n	8007030 <__hexnan+0xd4>
 800708e:	2004      	movs	r0, #4
 8007090:	e7d5      	b.n	800703e <__hexnan+0xe2>

08007092 <__ascii_mbtowc>:
 8007092:	b082      	sub	sp, #8
 8007094:	b901      	cbnz	r1, 8007098 <__ascii_mbtowc+0x6>
 8007096:	a901      	add	r1, sp, #4
 8007098:	b142      	cbz	r2, 80070ac <__ascii_mbtowc+0x1a>
 800709a:	b14b      	cbz	r3, 80070b0 <__ascii_mbtowc+0x1e>
 800709c:	7813      	ldrb	r3, [r2, #0]
 800709e:	600b      	str	r3, [r1, #0]
 80070a0:	7812      	ldrb	r2, [r2, #0]
 80070a2:	1e10      	subs	r0, r2, #0
 80070a4:	bf18      	it	ne
 80070a6:	2001      	movne	r0, #1
 80070a8:	b002      	add	sp, #8
 80070aa:	4770      	bx	lr
 80070ac:	4610      	mov	r0, r2
 80070ae:	e7fb      	b.n	80070a8 <__ascii_mbtowc+0x16>
 80070b0:	f06f 0001 	mvn.w	r0, #1
 80070b4:	e7f8      	b.n	80070a8 <__ascii_mbtowc+0x16>

080070b6 <_realloc_r>:
 80070b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ba:	4607      	mov	r7, r0
 80070bc:	4614      	mov	r4, r2
 80070be:	460d      	mov	r5, r1
 80070c0:	b921      	cbnz	r1, 80070cc <_realloc_r+0x16>
 80070c2:	4611      	mov	r1, r2
 80070c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070c8:	f7fd be80 	b.w	8004dcc <_malloc_r>
 80070cc:	b92a      	cbnz	r2, 80070da <_realloc_r+0x24>
 80070ce:	f7fd fe0b 	bl	8004ce8 <_free_r>
 80070d2:	4625      	mov	r5, r4
 80070d4:	4628      	mov	r0, r5
 80070d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070da:	f000 f840 	bl	800715e <_malloc_usable_size_r>
 80070de:	4284      	cmp	r4, r0
 80070e0:	4606      	mov	r6, r0
 80070e2:	d802      	bhi.n	80070ea <_realloc_r+0x34>
 80070e4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070e8:	d8f4      	bhi.n	80070d4 <_realloc_r+0x1e>
 80070ea:	4621      	mov	r1, r4
 80070ec:	4638      	mov	r0, r7
 80070ee:	f7fd fe6d 	bl	8004dcc <_malloc_r>
 80070f2:	4680      	mov	r8, r0
 80070f4:	b908      	cbnz	r0, 80070fa <_realloc_r+0x44>
 80070f6:	4645      	mov	r5, r8
 80070f8:	e7ec      	b.n	80070d4 <_realloc_r+0x1e>
 80070fa:	42b4      	cmp	r4, r6
 80070fc:	4622      	mov	r2, r4
 80070fe:	4629      	mov	r1, r5
 8007100:	bf28      	it	cs
 8007102:	4632      	movcs	r2, r6
 8007104:	f7ff fc46 	bl	8006994 <memcpy>
 8007108:	4629      	mov	r1, r5
 800710a:	4638      	mov	r0, r7
 800710c:	f7fd fdec 	bl	8004ce8 <_free_r>
 8007110:	e7f1      	b.n	80070f6 <_realloc_r+0x40>

08007112 <__ascii_wctomb>:
 8007112:	4603      	mov	r3, r0
 8007114:	4608      	mov	r0, r1
 8007116:	b141      	cbz	r1, 800712a <__ascii_wctomb+0x18>
 8007118:	2aff      	cmp	r2, #255	@ 0xff
 800711a:	d904      	bls.n	8007126 <__ascii_wctomb+0x14>
 800711c:	228a      	movs	r2, #138	@ 0x8a
 800711e:	f04f 30ff 	mov.w	r0, #4294967295
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	4770      	bx	lr
 8007126:	2001      	movs	r0, #1
 8007128:	700a      	strb	r2, [r1, #0]
 800712a:	4770      	bx	lr

0800712c <fiprintf>:
 800712c:	b40e      	push	{r1, r2, r3}
 800712e:	b503      	push	{r0, r1, lr}
 8007130:	4601      	mov	r1, r0
 8007132:	ab03      	add	r3, sp, #12
 8007134:	4805      	ldr	r0, [pc, #20]	@ (800714c <fiprintf+0x20>)
 8007136:	f853 2b04 	ldr.w	r2, [r3], #4
 800713a:	6800      	ldr	r0, [r0, #0]
 800713c:	9301      	str	r3, [sp, #4]
 800713e:	f000 f83d 	bl	80071bc <_vfiprintf_r>
 8007142:	b002      	add	sp, #8
 8007144:	f85d eb04 	ldr.w	lr, [sp], #4
 8007148:	b003      	add	sp, #12
 800714a:	4770      	bx	lr
 800714c:	20000028 	.word	0x20000028

08007150 <abort>:
 8007150:	2006      	movs	r0, #6
 8007152:	b508      	push	{r3, lr}
 8007154:	f000 fa06 	bl	8007564 <raise>
 8007158:	2001      	movs	r0, #1
 800715a:	f7fa f9be 	bl	80014da <_exit>

0800715e <_malloc_usable_size_r>:
 800715e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007162:	1f18      	subs	r0, r3, #4
 8007164:	2b00      	cmp	r3, #0
 8007166:	bfbc      	itt	lt
 8007168:	580b      	ldrlt	r3, [r1, r0]
 800716a:	18c0      	addlt	r0, r0, r3
 800716c:	4770      	bx	lr

0800716e <__sfputc_r>:
 800716e:	6893      	ldr	r3, [r2, #8]
 8007170:	b410      	push	{r4}
 8007172:	3b01      	subs	r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	6093      	str	r3, [r2, #8]
 8007178:	da07      	bge.n	800718a <__sfputc_r+0x1c>
 800717a:	6994      	ldr	r4, [r2, #24]
 800717c:	42a3      	cmp	r3, r4
 800717e:	db01      	blt.n	8007184 <__sfputc_r+0x16>
 8007180:	290a      	cmp	r1, #10
 8007182:	d102      	bne.n	800718a <__sfputc_r+0x1c>
 8007184:	bc10      	pop	{r4}
 8007186:	f000 b931 	b.w	80073ec <__swbuf_r>
 800718a:	6813      	ldr	r3, [r2, #0]
 800718c:	1c58      	adds	r0, r3, #1
 800718e:	6010      	str	r0, [r2, #0]
 8007190:	7019      	strb	r1, [r3, #0]
 8007192:	4608      	mov	r0, r1
 8007194:	bc10      	pop	{r4}
 8007196:	4770      	bx	lr

08007198 <__sfputs_r>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	4606      	mov	r6, r0
 800719c:	460f      	mov	r7, r1
 800719e:	4614      	mov	r4, r2
 80071a0:	18d5      	adds	r5, r2, r3
 80071a2:	42ac      	cmp	r4, r5
 80071a4:	d101      	bne.n	80071aa <__sfputs_r+0x12>
 80071a6:	2000      	movs	r0, #0
 80071a8:	e007      	b.n	80071ba <__sfputs_r+0x22>
 80071aa:	463a      	mov	r2, r7
 80071ac:	4630      	mov	r0, r6
 80071ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b2:	f7ff ffdc 	bl	800716e <__sfputc_r>
 80071b6:	1c43      	adds	r3, r0, #1
 80071b8:	d1f3      	bne.n	80071a2 <__sfputs_r+0xa>
 80071ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071bc <_vfiprintf_r>:
 80071bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c0:	460d      	mov	r5, r1
 80071c2:	4614      	mov	r4, r2
 80071c4:	4698      	mov	r8, r3
 80071c6:	4606      	mov	r6, r0
 80071c8:	b09d      	sub	sp, #116	@ 0x74
 80071ca:	b118      	cbz	r0, 80071d4 <_vfiprintf_r+0x18>
 80071cc:	6a03      	ldr	r3, [r0, #32]
 80071ce:	b90b      	cbnz	r3, 80071d4 <_vfiprintf_r+0x18>
 80071d0:	f7fc fdfe 	bl	8003dd0 <__sinit>
 80071d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071d6:	07d9      	lsls	r1, r3, #31
 80071d8:	d405      	bmi.n	80071e6 <_vfiprintf_r+0x2a>
 80071da:	89ab      	ldrh	r3, [r5, #12]
 80071dc:	059a      	lsls	r2, r3, #22
 80071de:	d402      	bmi.n	80071e6 <_vfiprintf_r+0x2a>
 80071e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071e2:	f7fc ff0e 	bl	8004002 <__retarget_lock_acquire_recursive>
 80071e6:	89ab      	ldrh	r3, [r5, #12]
 80071e8:	071b      	lsls	r3, r3, #28
 80071ea:	d501      	bpl.n	80071f0 <_vfiprintf_r+0x34>
 80071ec:	692b      	ldr	r3, [r5, #16]
 80071ee:	b99b      	cbnz	r3, 8007218 <_vfiprintf_r+0x5c>
 80071f0:	4629      	mov	r1, r5
 80071f2:	4630      	mov	r0, r6
 80071f4:	f000 f938 	bl	8007468 <__swsetup_r>
 80071f8:	b170      	cbz	r0, 8007218 <_vfiprintf_r+0x5c>
 80071fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071fc:	07dc      	lsls	r4, r3, #31
 80071fe:	d504      	bpl.n	800720a <_vfiprintf_r+0x4e>
 8007200:	f04f 30ff 	mov.w	r0, #4294967295
 8007204:	b01d      	add	sp, #116	@ 0x74
 8007206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720a:	89ab      	ldrh	r3, [r5, #12]
 800720c:	0598      	lsls	r0, r3, #22
 800720e:	d4f7      	bmi.n	8007200 <_vfiprintf_r+0x44>
 8007210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007212:	f7fc fef7 	bl	8004004 <__retarget_lock_release_recursive>
 8007216:	e7f3      	b.n	8007200 <_vfiprintf_r+0x44>
 8007218:	2300      	movs	r3, #0
 800721a:	9309      	str	r3, [sp, #36]	@ 0x24
 800721c:	2320      	movs	r3, #32
 800721e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007222:	2330      	movs	r3, #48	@ 0x30
 8007224:	f04f 0901 	mov.w	r9, #1
 8007228:	f8cd 800c 	str.w	r8, [sp, #12]
 800722c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80073d8 <_vfiprintf_r+0x21c>
 8007230:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007234:	4623      	mov	r3, r4
 8007236:	469a      	mov	sl, r3
 8007238:	f813 2b01 	ldrb.w	r2, [r3], #1
 800723c:	b10a      	cbz	r2, 8007242 <_vfiprintf_r+0x86>
 800723e:	2a25      	cmp	r2, #37	@ 0x25
 8007240:	d1f9      	bne.n	8007236 <_vfiprintf_r+0x7a>
 8007242:	ebba 0b04 	subs.w	fp, sl, r4
 8007246:	d00b      	beq.n	8007260 <_vfiprintf_r+0xa4>
 8007248:	465b      	mov	r3, fp
 800724a:	4622      	mov	r2, r4
 800724c:	4629      	mov	r1, r5
 800724e:	4630      	mov	r0, r6
 8007250:	f7ff ffa2 	bl	8007198 <__sfputs_r>
 8007254:	3001      	adds	r0, #1
 8007256:	f000 80a7 	beq.w	80073a8 <_vfiprintf_r+0x1ec>
 800725a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800725c:	445a      	add	r2, fp
 800725e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007260:	f89a 3000 	ldrb.w	r3, [sl]
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 809f 	beq.w	80073a8 <_vfiprintf_r+0x1ec>
 800726a:	2300      	movs	r3, #0
 800726c:	f04f 32ff 	mov.w	r2, #4294967295
 8007270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007274:	f10a 0a01 	add.w	sl, sl, #1
 8007278:	9304      	str	r3, [sp, #16]
 800727a:	9307      	str	r3, [sp, #28]
 800727c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007280:	931a      	str	r3, [sp, #104]	@ 0x68
 8007282:	4654      	mov	r4, sl
 8007284:	2205      	movs	r2, #5
 8007286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800728a:	4853      	ldr	r0, [pc, #332]	@ (80073d8 <_vfiprintf_r+0x21c>)
 800728c:	f7fc febb 	bl	8004006 <memchr>
 8007290:	9a04      	ldr	r2, [sp, #16]
 8007292:	b9d8      	cbnz	r0, 80072cc <_vfiprintf_r+0x110>
 8007294:	06d1      	lsls	r1, r2, #27
 8007296:	bf44      	itt	mi
 8007298:	2320      	movmi	r3, #32
 800729a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800729e:	0713      	lsls	r3, r2, #28
 80072a0:	bf44      	itt	mi
 80072a2:	232b      	movmi	r3, #43	@ 0x2b
 80072a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072a8:	f89a 3000 	ldrb.w	r3, [sl]
 80072ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80072ae:	d015      	beq.n	80072dc <_vfiprintf_r+0x120>
 80072b0:	4654      	mov	r4, sl
 80072b2:	2000      	movs	r0, #0
 80072b4:	f04f 0c0a 	mov.w	ip, #10
 80072b8:	9a07      	ldr	r2, [sp, #28]
 80072ba:	4621      	mov	r1, r4
 80072bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072c0:	3b30      	subs	r3, #48	@ 0x30
 80072c2:	2b09      	cmp	r3, #9
 80072c4:	d94b      	bls.n	800735e <_vfiprintf_r+0x1a2>
 80072c6:	b1b0      	cbz	r0, 80072f6 <_vfiprintf_r+0x13a>
 80072c8:	9207      	str	r2, [sp, #28]
 80072ca:	e014      	b.n	80072f6 <_vfiprintf_r+0x13a>
 80072cc:	eba0 0308 	sub.w	r3, r0, r8
 80072d0:	fa09 f303 	lsl.w	r3, r9, r3
 80072d4:	4313      	orrs	r3, r2
 80072d6:	46a2      	mov	sl, r4
 80072d8:	9304      	str	r3, [sp, #16]
 80072da:	e7d2      	b.n	8007282 <_vfiprintf_r+0xc6>
 80072dc:	9b03      	ldr	r3, [sp, #12]
 80072de:	1d19      	adds	r1, r3, #4
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	9103      	str	r1, [sp, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	bfbb      	ittet	lt
 80072e8:	425b      	neglt	r3, r3
 80072ea:	f042 0202 	orrlt.w	r2, r2, #2
 80072ee:	9307      	strge	r3, [sp, #28]
 80072f0:	9307      	strlt	r3, [sp, #28]
 80072f2:	bfb8      	it	lt
 80072f4:	9204      	strlt	r2, [sp, #16]
 80072f6:	7823      	ldrb	r3, [r4, #0]
 80072f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80072fa:	d10a      	bne.n	8007312 <_vfiprintf_r+0x156>
 80072fc:	7863      	ldrb	r3, [r4, #1]
 80072fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007300:	d132      	bne.n	8007368 <_vfiprintf_r+0x1ac>
 8007302:	9b03      	ldr	r3, [sp, #12]
 8007304:	3402      	adds	r4, #2
 8007306:	1d1a      	adds	r2, r3, #4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	9203      	str	r2, [sp, #12]
 800730c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007310:	9305      	str	r3, [sp, #20]
 8007312:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80073dc <_vfiprintf_r+0x220>
 8007316:	2203      	movs	r2, #3
 8007318:	4650      	mov	r0, sl
 800731a:	7821      	ldrb	r1, [r4, #0]
 800731c:	f7fc fe73 	bl	8004006 <memchr>
 8007320:	b138      	cbz	r0, 8007332 <_vfiprintf_r+0x176>
 8007322:	2240      	movs	r2, #64	@ 0x40
 8007324:	9b04      	ldr	r3, [sp, #16]
 8007326:	eba0 000a 	sub.w	r0, r0, sl
 800732a:	4082      	lsls	r2, r0
 800732c:	4313      	orrs	r3, r2
 800732e:	3401      	adds	r4, #1
 8007330:	9304      	str	r3, [sp, #16]
 8007332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007336:	2206      	movs	r2, #6
 8007338:	4829      	ldr	r0, [pc, #164]	@ (80073e0 <_vfiprintf_r+0x224>)
 800733a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800733e:	f7fc fe62 	bl	8004006 <memchr>
 8007342:	2800      	cmp	r0, #0
 8007344:	d03f      	beq.n	80073c6 <_vfiprintf_r+0x20a>
 8007346:	4b27      	ldr	r3, [pc, #156]	@ (80073e4 <_vfiprintf_r+0x228>)
 8007348:	bb1b      	cbnz	r3, 8007392 <_vfiprintf_r+0x1d6>
 800734a:	9b03      	ldr	r3, [sp, #12]
 800734c:	3307      	adds	r3, #7
 800734e:	f023 0307 	bic.w	r3, r3, #7
 8007352:	3308      	adds	r3, #8
 8007354:	9303      	str	r3, [sp, #12]
 8007356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007358:	443b      	add	r3, r7
 800735a:	9309      	str	r3, [sp, #36]	@ 0x24
 800735c:	e76a      	b.n	8007234 <_vfiprintf_r+0x78>
 800735e:	460c      	mov	r4, r1
 8007360:	2001      	movs	r0, #1
 8007362:	fb0c 3202 	mla	r2, ip, r2, r3
 8007366:	e7a8      	b.n	80072ba <_vfiprintf_r+0xfe>
 8007368:	2300      	movs	r3, #0
 800736a:	f04f 0c0a 	mov.w	ip, #10
 800736e:	4619      	mov	r1, r3
 8007370:	3401      	adds	r4, #1
 8007372:	9305      	str	r3, [sp, #20]
 8007374:	4620      	mov	r0, r4
 8007376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800737a:	3a30      	subs	r2, #48	@ 0x30
 800737c:	2a09      	cmp	r2, #9
 800737e:	d903      	bls.n	8007388 <_vfiprintf_r+0x1cc>
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0c6      	beq.n	8007312 <_vfiprintf_r+0x156>
 8007384:	9105      	str	r1, [sp, #20]
 8007386:	e7c4      	b.n	8007312 <_vfiprintf_r+0x156>
 8007388:	4604      	mov	r4, r0
 800738a:	2301      	movs	r3, #1
 800738c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007390:	e7f0      	b.n	8007374 <_vfiprintf_r+0x1b8>
 8007392:	ab03      	add	r3, sp, #12
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	462a      	mov	r2, r5
 8007398:	4630      	mov	r0, r6
 800739a:	4b13      	ldr	r3, [pc, #76]	@ (80073e8 <_vfiprintf_r+0x22c>)
 800739c:	a904      	add	r1, sp, #16
 800739e:	f7fb fec5 	bl	800312c <_printf_float>
 80073a2:	4607      	mov	r7, r0
 80073a4:	1c78      	adds	r0, r7, #1
 80073a6:	d1d6      	bne.n	8007356 <_vfiprintf_r+0x19a>
 80073a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073aa:	07d9      	lsls	r1, r3, #31
 80073ac:	d405      	bmi.n	80073ba <_vfiprintf_r+0x1fe>
 80073ae:	89ab      	ldrh	r3, [r5, #12]
 80073b0:	059a      	lsls	r2, r3, #22
 80073b2:	d402      	bmi.n	80073ba <_vfiprintf_r+0x1fe>
 80073b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073b6:	f7fc fe25 	bl	8004004 <__retarget_lock_release_recursive>
 80073ba:	89ab      	ldrh	r3, [r5, #12]
 80073bc:	065b      	lsls	r3, r3, #25
 80073be:	f53f af1f 	bmi.w	8007200 <_vfiprintf_r+0x44>
 80073c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073c4:	e71e      	b.n	8007204 <_vfiprintf_r+0x48>
 80073c6:	ab03      	add	r3, sp, #12
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	462a      	mov	r2, r5
 80073cc:	4630      	mov	r0, r6
 80073ce:	4b06      	ldr	r3, [pc, #24]	@ (80073e8 <_vfiprintf_r+0x22c>)
 80073d0:	a904      	add	r1, sp, #16
 80073d2:	f7fc f949 	bl	8003668 <_printf_i>
 80073d6:	e7e4      	b.n	80073a2 <_vfiprintf_r+0x1e6>
 80073d8:	08008593 	.word	0x08008593
 80073dc:	08008599 	.word	0x08008599
 80073e0:	0800859d 	.word	0x0800859d
 80073e4:	0800312d 	.word	0x0800312d
 80073e8:	08007199 	.word	0x08007199

080073ec <__swbuf_r>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	460e      	mov	r6, r1
 80073f0:	4614      	mov	r4, r2
 80073f2:	4605      	mov	r5, r0
 80073f4:	b118      	cbz	r0, 80073fe <__swbuf_r+0x12>
 80073f6:	6a03      	ldr	r3, [r0, #32]
 80073f8:	b90b      	cbnz	r3, 80073fe <__swbuf_r+0x12>
 80073fa:	f7fc fce9 	bl	8003dd0 <__sinit>
 80073fe:	69a3      	ldr	r3, [r4, #24]
 8007400:	60a3      	str	r3, [r4, #8]
 8007402:	89a3      	ldrh	r3, [r4, #12]
 8007404:	071a      	lsls	r2, r3, #28
 8007406:	d501      	bpl.n	800740c <__swbuf_r+0x20>
 8007408:	6923      	ldr	r3, [r4, #16]
 800740a:	b943      	cbnz	r3, 800741e <__swbuf_r+0x32>
 800740c:	4621      	mov	r1, r4
 800740e:	4628      	mov	r0, r5
 8007410:	f000 f82a 	bl	8007468 <__swsetup_r>
 8007414:	b118      	cbz	r0, 800741e <__swbuf_r+0x32>
 8007416:	f04f 37ff 	mov.w	r7, #4294967295
 800741a:	4638      	mov	r0, r7
 800741c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	6922      	ldr	r2, [r4, #16]
 8007422:	b2f6      	uxtb	r6, r6
 8007424:	1a98      	subs	r0, r3, r2
 8007426:	6963      	ldr	r3, [r4, #20]
 8007428:	4637      	mov	r7, r6
 800742a:	4283      	cmp	r3, r0
 800742c:	dc05      	bgt.n	800743a <__swbuf_r+0x4e>
 800742e:	4621      	mov	r1, r4
 8007430:	4628      	mov	r0, r5
 8007432:	f7ff fa4b 	bl	80068cc <_fflush_r>
 8007436:	2800      	cmp	r0, #0
 8007438:	d1ed      	bne.n	8007416 <__swbuf_r+0x2a>
 800743a:	68a3      	ldr	r3, [r4, #8]
 800743c:	3b01      	subs	r3, #1
 800743e:	60a3      	str	r3, [r4, #8]
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	6022      	str	r2, [r4, #0]
 8007446:	701e      	strb	r6, [r3, #0]
 8007448:	6962      	ldr	r2, [r4, #20]
 800744a:	1c43      	adds	r3, r0, #1
 800744c:	429a      	cmp	r2, r3
 800744e:	d004      	beq.n	800745a <__swbuf_r+0x6e>
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	07db      	lsls	r3, r3, #31
 8007454:	d5e1      	bpl.n	800741a <__swbuf_r+0x2e>
 8007456:	2e0a      	cmp	r6, #10
 8007458:	d1df      	bne.n	800741a <__swbuf_r+0x2e>
 800745a:	4621      	mov	r1, r4
 800745c:	4628      	mov	r0, r5
 800745e:	f7ff fa35 	bl	80068cc <_fflush_r>
 8007462:	2800      	cmp	r0, #0
 8007464:	d0d9      	beq.n	800741a <__swbuf_r+0x2e>
 8007466:	e7d6      	b.n	8007416 <__swbuf_r+0x2a>

08007468 <__swsetup_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	4b29      	ldr	r3, [pc, #164]	@ (8007510 <__swsetup_r+0xa8>)
 800746c:	4605      	mov	r5, r0
 800746e:	6818      	ldr	r0, [r3, #0]
 8007470:	460c      	mov	r4, r1
 8007472:	b118      	cbz	r0, 800747c <__swsetup_r+0x14>
 8007474:	6a03      	ldr	r3, [r0, #32]
 8007476:	b90b      	cbnz	r3, 800747c <__swsetup_r+0x14>
 8007478:	f7fc fcaa 	bl	8003dd0 <__sinit>
 800747c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007480:	0719      	lsls	r1, r3, #28
 8007482:	d422      	bmi.n	80074ca <__swsetup_r+0x62>
 8007484:	06da      	lsls	r2, r3, #27
 8007486:	d407      	bmi.n	8007498 <__swsetup_r+0x30>
 8007488:	2209      	movs	r2, #9
 800748a:	602a      	str	r2, [r5, #0]
 800748c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007490:	f04f 30ff 	mov.w	r0, #4294967295
 8007494:	81a3      	strh	r3, [r4, #12]
 8007496:	e033      	b.n	8007500 <__swsetup_r+0x98>
 8007498:	0758      	lsls	r0, r3, #29
 800749a:	d512      	bpl.n	80074c2 <__swsetup_r+0x5a>
 800749c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800749e:	b141      	cbz	r1, 80074b2 <__swsetup_r+0x4a>
 80074a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074a4:	4299      	cmp	r1, r3
 80074a6:	d002      	beq.n	80074ae <__swsetup_r+0x46>
 80074a8:	4628      	mov	r0, r5
 80074aa:	f7fd fc1d 	bl	8004ce8 <_free_r>
 80074ae:	2300      	movs	r3, #0
 80074b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80074b2:	89a3      	ldrh	r3, [r4, #12]
 80074b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80074b8:	81a3      	strh	r3, [r4, #12]
 80074ba:	2300      	movs	r3, #0
 80074bc:	6063      	str	r3, [r4, #4]
 80074be:	6923      	ldr	r3, [r4, #16]
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	f043 0308 	orr.w	r3, r3, #8
 80074c8:	81a3      	strh	r3, [r4, #12]
 80074ca:	6923      	ldr	r3, [r4, #16]
 80074cc:	b94b      	cbnz	r3, 80074e2 <__swsetup_r+0x7a>
 80074ce:	89a3      	ldrh	r3, [r4, #12]
 80074d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80074d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074d8:	d003      	beq.n	80074e2 <__swsetup_r+0x7a>
 80074da:	4621      	mov	r1, r4
 80074dc:	4628      	mov	r0, r5
 80074de:	f000 f882 	bl	80075e6 <__smakebuf_r>
 80074e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074e6:	f013 0201 	ands.w	r2, r3, #1
 80074ea:	d00a      	beq.n	8007502 <__swsetup_r+0x9a>
 80074ec:	2200      	movs	r2, #0
 80074ee:	60a2      	str	r2, [r4, #8]
 80074f0:	6962      	ldr	r2, [r4, #20]
 80074f2:	4252      	negs	r2, r2
 80074f4:	61a2      	str	r2, [r4, #24]
 80074f6:	6922      	ldr	r2, [r4, #16]
 80074f8:	b942      	cbnz	r2, 800750c <__swsetup_r+0xa4>
 80074fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80074fe:	d1c5      	bne.n	800748c <__swsetup_r+0x24>
 8007500:	bd38      	pop	{r3, r4, r5, pc}
 8007502:	0799      	lsls	r1, r3, #30
 8007504:	bf58      	it	pl
 8007506:	6962      	ldrpl	r2, [r4, #20]
 8007508:	60a2      	str	r2, [r4, #8]
 800750a:	e7f4      	b.n	80074f6 <__swsetup_r+0x8e>
 800750c:	2000      	movs	r0, #0
 800750e:	e7f7      	b.n	8007500 <__swsetup_r+0x98>
 8007510:	20000028 	.word	0x20000028

08007514 <_raise_r>:
 8007514:	291f      	cmp	r1, #31
 8007516:	b538      	push	{r3, r4, r5, lr}
 8007518:	4605      	mov	r5, r0
 800751a:	460c      	mov	r4, r1
 800751c:	d904      	bls.n	8007528 <_raise_r+0x14>
 800751e:	2316      	movs	r3, #22
 8007520:	6003      	str	r3, [r0, #0]
 8007522:	f04f 30ff 	mov.w	r0, #4294967295
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800752a:	b112      	cbz	r2, 8007532 <_raise_r+0x1e>
 800752c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007530:	b94b      	cbnz	r3, 8007546 <_raise_r+0x32>
 8007532:	4628      	mov	r0, r5
 8007534:	f000 f830 	bl	8007598 <_getpid_r>
 8007538:	4622      	mov	r2, r4
 800753a:	4601      	mov	r1, r0
 800753c:	4628      	mov	r0, r5
 800753e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007542:	f000 b817 	b.w	8007574 <_kill_r>
 8007546:	2b01      	cmp	r3, #1
 8007548:	d00a      	beq.n	8007560 <_raise_r+0x4c>
 800754a:	1c59      	adds	r1, r3, #1
 800754c:	d103      	bne.n	8007556 <_raise_r+0x42>
 800754e:	2316      	movs	r3, #22
 8007550:	6003      	str	r3, [r0, #0]
 8007552:	2001      	movs	r0, #1
 8007554:	e7e7      	b.n	8007526 <_raise_r+0x12>
 8007556:	2100      	movs	r1, #0
 8007558:	4620      	mov	r0, r4
 800755a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800755e:	4798      	blx	r3
 8007560:	2000      	movs	r0, #0
 8007562:	e7e0      	b.n	8007526 <_raise_r+0x12>

08007564 <raise>:
 8007564:	4b02      	ldr	r3, [pc, #8]	@ (8007570 <raise+0xc>)
 8007566:	4601      	mov	r1, r0
 8007568:	6818      	ldr	r0, [r3, #0]
 800756a:	f7ff bfd3 	b.w	8007514 <_raise_r>
 800756e:	bf00      	nop
 8007570:	20000028 	.word	0x20000028

08007574 <_kill_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	2300      	movs	r3, #0
 8007578:	4d06      	ldr	r5, [pc, #24]	@ (8007594 <_kill_r+0x20>)
 800757a:	4604      	mov	r4, r0
 800757c:	4608      	mov	r0, r1
 800757e:	4611      	mov	r1, r2
 8007580:	602b      	str	r3, [r5, #0]
 8007582:	f7f9 ff9a 	bl	80014ba <_kill>
 8007586:	1c43      	adds	r3, r0, #1
 8007588:	d102      	bne.n	8007590 <_kill_r+0x1c>
 800758a:	682b      	ldr	r3, [r5, #0]
 800758c:	b103      	cbz	r3, 8007590 <_kill_r+0x1c>
 800758e:	6023      	str	r3, [r4, #0]
 8007590:	bd38      	pop	{r3, r4, r5, pc}
 8007592:	bf00      	nop
 8007594:	200007b0 	.word	0x200007b0

08007598 <_getpid_r>:
 8007598:	f7f9 bf88 	b.w	80014ac <_getpid>

0800759c <__swhatbuf_r>:
 800759c:	b570      	push	{r4, r5, r6, lr}
 800759e:	460c      	mov	r4, r1
 80075a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a4:	4615      	mov	r5, r2
 80075a6:	2900      	cmp	r1, #0
 80075a8:	461e      	mov	r6, r3
 80075aa:	b096      	sub	sp, #88	@ 0x58
 80075ac:	da0c      	bge.n	80075c8 <__swhatbuf_r+0x2c>
 80075ae:	89a3      	ldrh	r3, [r4, #12]
 80075b0:	2100      	movs	r1, #0
 80075b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80075b6:	bf14      	ite	ne
 80075b8:	2340      	movne	r3, #64	@ 0x40
 80075ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80075be:	2000      	movs	r0, #0
 80075c0:	6031      	str	r1, [r6, #0]
 80075c2:	602b      	str	r3, [r5, #0]
 80075c4:	b016      	add	sp, #88	@ 0x58
 80075c6:	bd70      	pop	{r4, r5, r6, pc}
 80075c8:	466a      	mov	r2, sp
 80075ca:	f000 f849 	bl	8007660 <_fstat_r>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	dbed      	blt.n	80075ae <__swhatbuf_r+0x12>
 80075d2:	9901      	ldr	r1, [sp, #4]
 80075d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80075d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80075dc:	4259      	negs	r1, r3
 80075de:	4159      	adcs	r1, r3
 80075e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075e4:	e7eb      	b.n	80075be <__swhatbuf_r+0x22>

080075e6 <__smakebuf_r>:
 80075e6:	898b      	ldrh	r3, [r1, #12]
 80075e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075ea:	079d      	lsls	r5, r3, #30
 80075ec:	4606      	mov	r6, r0
 80075ee:	460c      	mov	r4, r1
 80075f0:	d507      	bpl.n	8007602 <__smakebuf_r+0x1c>
 80075f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80075f6:	6023      	str	r3, [r4, #0]
 80075f8:	6123      	str	r3, [r4, #16]
 80075fa:	2301      	movs	r3, #1
 80075fc:	6163      	str	r3, [r4, #20]
 80075fe:	b003      	add	sp, #12
 8007600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007602:	466a      	mov	r2, sp
 8007604:	ab01      	add	r3, sp, #4
 8007606:	f7ff ffc9 	bl	800759c <__swhatbuf_r>
 800760a:	9f00      	ldr	r7, [sp, #0]
 800760c:	4605      	mov	r5, r0
 800760e:	4639      	mov	r1, r7
 8007610:	4630      	mov	r0, r6
 8007612:	f7fd fbdb 	bl	8004dcc <_malloc_r>
 8007616:	b948      	cbnz	r0, 800762c <__smakebuf_r+0x46>
 8007618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800761c:	059a      	lsls	r2, r3, #22
 800761e:	d4ee      	bmi.n	80075fe <__smakebuf_r+0x18>
 8007620:	f023 0303 	bic.w	r3, r3, #3
 8007624:	f043 0302 	orr.w	r3, r3, #2
 8007628:	81a3      	strh	r3, [r4, #12]
 800762a:	e7e2      	b.n	80075f2 <__smakebuf_r+0xc>
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007636:	81a3      	strh	r3, [r4, #12]
 8007638:	9b01      	ldr	r3, [sp, #4]
 800763a:	6020      	str	r0, [r4, #0]
 800763c:	b15b      	cbz	r3, 8007656 <__smakebuf_r+0x70>
 800763e:	4630      	mov	r0, r6
 8007640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007644:	f000 f81e 	bl	8007684 <_isatty_r>
 8007648:	b128      	cbz	r0, 8007656 <__smakebuf_r+0x70>
 800764a:	89a3      	ldrh	r3, [r4, #12]
 800764c:	f023 0303 	bic.w	r3, r3, #3
 8007650:	f043 0301 	orr.w	r3, r3, #1
 8007654:	81a3      	strh	r3, [r4, #12]
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	431d      	orrs	r5, r3
 800765a:	81a5      	strh	r5, [r4, #12]
 800765c:	e7cf      	b.n	80075fe <__smakebuf_r+0x18>
	...

08007660 <_fstat_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	2300      	movs	r3, #0
 8007664:	4d06      	ldr	r5, [pc, #24]	@ (8007680 <_fstat_r+0x20>)
 8007666:	4604      	mov	r4, r0
 8007668:	4608      	mov	r0, r1
 800766a:	4611      	mov	r1, r2
 800766c:	602b      	str	r3, [r5, #0]
 800766e:	f7f9 ff83 	bl	8001578 <_fstat>
 8007672:	1c43      	adds	r3, r0, #1
 8007674:	d102      	bne.n	800767c <_fstat_r+0x1c>
 8007676:	682b      	ldr	r3, [r5, #0]
 8007678:	b103      	cbz	r3, 800767c <_fstat_r+0x1c>
 800767a:	6023      	str	r3, [r4, #0]
 800767c:	bd38      	pop	{r3, r4, r5, pc}
 800767e:	bf00      	nop
 8007680:	200007b0 	.word	0x200007b0

08007684 <_isatty_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	2300      	movs	r3, #0
 8007688:	4d05      	ldr	r5, [pc, #20]	@ (80076a0 <_isatty_r+0x1c>)
 800768a:	4604      	mov	r4, r0
 800768c:	4608      	mov	r0, r1
 800768e:	602b      	str	r3, [r5, #0]
 8007690:	f7f9 ff81 	bl	8001596 <_isatty>
 8007694:	1c43      	adds	r3, r0, #1
 8007696:	d102      	bne.n	800769e <_isatty_r+0x1a>
 8007698:	682b      	ldr	r3, [r5, #0]
 800769a:	b103      	cbz	r3, 800769e <_isatty_r+0x1a>
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	bd38      	pop	{r3, r4, r5, pc}
 80076a0:	200007b0 	.word	0x200007b0

080076a4 <_init>:
 80076a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a6:	bf00      	nop
 80076a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076aa:	bc08      	pop	{r3}
 80076ac:	469e      	mov	lr, r3
 80076ae:	4770      	bx	lr

080076b0 <_fini>:
 80076b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b2:	bf00      	nop
 80076b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b6:	bc08      	pop	{r3}
 80076b8:	469e      	mov	lr, r3
 80076ba:	4770      	bx	lr
