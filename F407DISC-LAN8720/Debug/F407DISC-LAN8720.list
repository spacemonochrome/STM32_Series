
F407DISC-LAN8720.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f224  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c1c  0800f3b4  0800f3b4  000103b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011fd0  08011fd0  00013088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011fd0  08011fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011fd8  08011fd8  00013088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011fd8  08011fd8  00012fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011fdc  08011fdc  00012fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08011fe0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013088  2**0
                  CONTENTS
 10 .bss          00008464  20000088  20000088  00013088  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  200084ec  200084ec  00013088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001717a  00000000  00000000  000130b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b37  00000000  00000000  0002a232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  0002ed70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e1d  00000000  00000000  0002ff28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002caa2  00000000  00000000  00030d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fcce  00000000  00000000  0005d7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8ce7  00000000  00000000  0007d4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015619c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ec4  00000000  00000000  001561e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0015b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f39c 	.word	0x0800f39c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800f39c 	.word	0x0800f39c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fd2e 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f80e 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f876 	bl	8000698 <MX_GPIO_Init>
  MX_LWIP_Init();
 80005ac:	f002 fde4 	bl	8003178 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_echoserver_init();
 80005b0:	f000 f9f0 	bl	8000994 <tcp_echoserver_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 80005b4:	f002 ff20 	bl	80033f8 <MX_LWIP_Process>
	  HAL_Delay(50);
 80005b8:	2032      	movs	r0, #50	@ 0x32
 80005ba:	f000 fd93 	bl	80010e4 <HAL_Delay>
	  MX_LWIP_Process();
 80005be:	bf00      	nop
 80005c0:	e7f8      	b.n	80005b4 <main+0x18>
	...

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	@ 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	@ 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f00e f83f 	bl	800e656 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	4a27      	ldr	r2, [pc, #156]	@ (8000690 <SystemClock_Config+0xcc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b22      	ldr	r3, [pc, #136]	@ (8000694 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a21      	ldr	r2, [pc, #132]	@ (8000694 <SystemClock_Config+0xd0>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000624:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000638:	23a8      	movs	r3, #168	@ 0xa8
 800063a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f002 f925 	bl	8002898 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 f864 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000664:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2105      	movs	r1, #5
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fb86 	bl	8002d88 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000682:	f000 f84d 	bl	8000720 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	@ 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <MX_GPIO_Init+0x84>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a1d      	ldr	r2, [pc, #116]	@ (800071c <MX_GPIO_Init+0x84>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <MX_GPIO_Init+0x84>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b17      	ldr	r3, [pc, #92]	@ (800071c <MX_GPIO_Init+0x84>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a16      	ldr	r2, [pc, #88]	@ (800071c <MX_GPIO_Init+0x84>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b14      	ldr	r3, [pc, #80]	@ (800071c <MX_GPIO_Init+0x84>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <MX_GPIO_Init+0x84>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a0f      	ldr	r2, [pc, #60]	@ (800071c <MX_GPIO_Init+0x84>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <MX_GPIO_Init+0x84>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_GPIO_Init+0x84>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a08      	ldr	r2, [pc, #32]	@ (800071c <MX_GPIO_Init+0x84>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_GPIO_Init+0x84>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800070e:	bf00      	nop
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <Error_Handler+0x8>

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <HAL_MspInit+0x4c>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800073a:	4a0f      	ldr	r2, [pc, #60]	@ (8000778 <HAL_MspInit+0x4c>)
 800073c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000740:	6453      	str	r3, [r2, #68]	@ 0x44
 8000742:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <HAL_MspInit+0x4c>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <HAL_MspInit+0x4c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000756:	4a08      	ldr	r2, [pc, #32]	@ (8000778 <HAL_MspInit+0x4c>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075c:	6413      	str	r3, [r2, #64]	@ 0x40
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <HAL_MspInit+0x4c>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <NMI_Handler+0x4>

08000784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <MemManage_Handler+0x4>

08000794 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <BusFault_Handler+0x4>

0800079c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <UsageFault_Handler+0x4>

080007a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d2:	f000 fc67 	bl	80010a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}

080007da <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  return 1;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
	...

080007ec <_kill>:

int _kill(int pid, int sig)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80007f6:	4b05      	ldr	r3, [pc, #20]	@ (800080c <_kill+0x20>)
 80007f8:	2216      	movs	r2, #22
 80007fa:	601a      	str	r2, [r3, #0]
  return -1;
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000800:	4618      	mov	r0, r3
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	200084dc 	.word	0x200084dc

08000810 <_exit>:

void _exit (int status)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000818:	f04f 31ff 	mov.w	r1, #4294967295
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ffe5 	bl	80007ec <_kill>
  while (1) {}    /* Make sure we hang here */
 8000822:	bf00      	nop
 8000824:	e7fd      	b.n	8000822 <_exit+0x12>

08000826 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	e00a      	b.n	800084e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000838:	f3af 8000 	nop.w
 800083c:	4601      	mov	r1, r0
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	1c5a      	adds	r2, r3, #1
 8000842:	60ba      	str	r2, [r7, #8]
 8000844:	b2ca      	uxtb	r2, r1
 8000846:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	3301      	adds	r3, #1
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	697a      	ldr	r2, [r7, #20]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	429a      	cmp	r2, r3
 8000854:	dbf0      	blt.n	8000838 <_read+0x12>
  }

  return len;
 8000856:	687b      	ldr	r3, [r7, #4]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	e009      	b.n	8000886 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	60ba      	str	r2, [r7, #8]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	4618      	mov	r0, r3
 800087c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	3301      	adds	r3, #1
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	429a      	cmp	r2, r3
 800088c:	dbf1      	blt.n	8000872 <_write+0x12>
  }
  return len;
 800088e:	687b      	ldr	r3, [r7, #4]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <_close>:

int _close(int file)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008c0:	605a      	str	r2, [r3, #4]
  return 0;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <_isatty>:

int _isatty(int file)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008d8:	2301      	movs	r3, #1
}
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b085      	sub	sp, #20
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000900:	b480      	push	{r7}
 8000902:	b087      	sub	sp, #28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000908:	4a14      	ldr	r2, [pc, #80]	@ (800095c <_sbrk+0x5c>)
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <_sbrk+0x60>)
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000914:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <_sbrk+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d102      	bne.n	8000922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <_sbrk+0x64>)
 800091e:	4a12      	ldr	r2, [pc, #72]	@ (8000968 <_sbrk+0x68>)
 8000920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000922:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	429a      	cmp	r2, r3
 800092e:	d205      	bcs.n	800093c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000930:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <_sbrk+0x6c>)
 8000932:	220c      	movs	r2, #12
 8000934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	e009      	b.n	8000950 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800093c:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000942:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <_sbrk+0x64>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	4a06      	ldr	r2, [pc, #24]	@ (8000964 <_sbrk+0x64>)
 800094c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800094e:	68fb      	ldr	r3, [r7, #12]
}
 8000950:	4618      	mov	r0, r3
 8000952:	371c      	adds	r7, #28
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	20020000 	.word	0x20020000
 8000960:	00004000 	.word	0x00004000
 8000964:	200000a4 	.word	0x200000a4
 8000968:	200084f0 	.word	0x200084f0
 800096c:	200084dc 	.word	0x200084dc

08000970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <SystemInit+0x20>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800097a:	4a05      	ldr	r2, [pc, #20]	@ (8000990 <SystemInit+0x20>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 800099a:	f006 fa89 	bl	8006eb0 <tcp_new>
 800099e:	4603      	mov	r3, r0
 80009a0:	4a16      	ldr	r2, [pc, #88]	@ (80009fc <tcp_echoserver_init+0x68>)
 80009a2:	6013      	str	r3, [r2, #0]

  if (tcp_echoserver_pcb != NULL)
 80009a4:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <tcp_echoserver_init+0x68>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d022      	beq.n	80009f2 <tcp_echoserver_init+0x5e>
  {
    err_t err;
    
    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 80009ac:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <tcp_echoserver_init+0x68>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2207      	movs	r2, #7
 80009b2:	4913      	ldr	r1, [pc, #76]	@ (8000a00 <tcp_echoserver_init+0x6c>)
 80009b4:	4618      	mov	r0, r3
 80009b6:	f005 f9d5 	bl	8005d64 <tcp_bind>
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d10f      	bne.n	80009e6 <tcp_echoserver_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <tcp_echoserver_init+0x68>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	21ff      	movs	r1, #255	@ 0xff
 80009cc:	4618      	mov	r0, r3
 80009ce:	f005 fa81 	bl	8005ed4 <tcp_listen_with_backlog>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4a09      	ldr	r2, [pc, #36]	@ (80009fc <tcp_echoserver_init+0x68>)
 80009d6:	6013      	str	r3, [r2, #0]
      
      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 80009d8:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <tcp_echoserver_init+0x68>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4909      	ldr	r1, [pc, #36]	@ (8000a04 <tcp_echoserver_init+0x70>)
 80009de:	4618      	mov	r0, r3
 80009e0:	f006 fae6 	bl	8006fb0 <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 80009e4:	e005      	b.n	80009f2 <tcp_echoserver_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 80009e6:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <tcp_echoserver_init+0x68>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4619      	mov	r1, r3
 80009ec:	2001      	movs	r0, #1
 80009ee:	f003 fd9f 	bl	8004530 <memp_free>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000a8 	.word	0x200000a8
 8000a00:	08011ee0 	.word	0x08011ee0
 8000a04:	08000a09 	.word	0x08000a09

08000a08 <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used 
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	4613      	mov	r3, r2
 8000a14:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8000a16:	2101      	movs	r1, #1
 8000a18:	68b8      	ldr	r0, [r7, #8]
 8000a1a:	f006 f857 	bl	8006acc <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8000a1e:	200c      	movs	r0, #12
 8000a20:	f003 fb86 	bl	8004130 <mem_malloc>
 8000a24:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d01f      	beq.n	8000a6c <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000a44:	6939      	ldr	r1, [r7, #16]
 8000a46:	68b8      	ldr	r0, [r7, #8]
 8000a48:	f006 fa3a 	bl	8006ec0 <tcp_arg>
    
    /* initialize lwip tcp_recv callback function for newpcb  */ 
    tcp_recv(newpcb, tcp_echoserver_recv);
 8000a4c:	490d      	ldr	r1, [pc, #52]	@ (8000a84 <tcp_echoserver_accept+0x7c>)
 8000a4e:	68b8      	ldr	r0, [r7, #8]
 8000a50:	f006 fa48 	bl	8006ee4 <tcp_recv>
    
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_echoserver_error);
 8000a54:	490c      	ldr	r1, [pc, #48]	@ (8000a88 <tcp_echoserver_accept+0x80>)
 8000a56:	68b8      	ldr	r0, [r7, #8]
 8000a58:	f006 fa88 	bl	8006f6c <tcp_err>
    
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	490b      	ldr	r1, [pc, #44]	@ (8000a8c <tcp_echoserver_accept+0x84>)
 8000a60:	68b8      	ldr	r0, [r7, #8]
 8000a62:	f006 fabd 	bl	8006fe0 <tcp_poll>
    
    ret_err = ERR_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	75fb      	strb	r3, [r7, #23]
 8000a6a:	e005      	b.n	8000a78 <tcp_echoserver_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_echoserver_connection_close(newpcb, es);
 8000a6c:	6939      	ldr	r1, [r7, #16]
 8000a6e:	68b8      	ldr	r0, [r7, #8]
 8000a70:	f000 f96f 	bl	8000d52 <tcp_echoserver_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000a74:	23ff      	movs	r3, #255	@ 0xff
 8000a76:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;  
 8000a78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	08000a91 	.word	0x08000a91
 8000a88:	08000bd9 	.word	0x08000bd9
 8000a8c:	08000bfd 	.word	0x08000bfd

08000a90 <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d105      	bne.n	8000ab0 <tcp_echoserver_recv+0x20>
 8000aa4:	4b47      	ldr	r3, [pc, #284]	@ (8000bc4 <tcp_echoserver_recv+0x134>)
 8000aa6:	22ad      	movs	r2, #173	@ 0xad
 8000aa8:	4947      	ldr	r1, [pc, #284]	@ (8000bc8 <tcp_echoserver_recv+0x138>)
 8000aaa:	4848      	ldr	r0, [pc, #288]	@ (8000bcc <tcp_echoserver_recv+0x13c>)
 8000aac:	f00d fd6e 	bl	800e58c <iprintf>
  
  es = (struct tcp_echoserver_struct *)arg;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d116      	bne.n	8000ae8 <tcp_echoserver_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	2203      	movs	r2, #3
 8000abe:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d104      	bne.n	8000ad2 <tcp_echoserver_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_echoserver_connection_close(tpcb, es);
 8000ac8:	69b9      	ldr	r1, [r7, #24]
 8000aca:	68b8      	ldr	r0, [r7, #8]
 8000acc:	f000 f941 	bl	8000d52 <tcp_echoserver_connection_close>
 8000ad0:	e007      	b.n	8000ae2 <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000ad2:	493f      	ldr	r1, [pc, #252]	@ (8000bd0 <tcp_echoserver_recv+0x140>)
 8000ad4:	68b8      	ldr	r0, [r7, #8]
 8000ad6:	f006 fa27 	bl	8006f28 <tcp_sent>
      
      /* send remaining data*/
      tcp_echoserver_send(tpcb, es);
 8000ada:	69b9      	ldr	r1, [r7, #24]
 8000adc:	68b8      	ldr	r0, [r7, #8]
 8000ade:	f000 f8e5 	bl	8000cac <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	77fb      	strb	r3, [r7, #31]
 8000ae6:	e067      	b.n	8000bb8 <tcp_echoserver_recv+0x128>
  }   
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d00b      	beq.n	8000b08 <tcp_echoserver_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d005      	beq.n	8000b02 <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f004 fb8d 	bl	800521c <pbuf_free>
    }
    ret_err = err;
 8000b02:	78fb      	ldrb	r3, [r7, #3]
 8000b04:	77fb      	strb	r3, [r7, #31]
 8000b06:	e057      	b.n	8000bb8 <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_ACCEPTED)
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d114      	bne.n	8000b3a <tcp_echoserver_recv+0xaa>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	2202      	movs	r2, #2
 8000b14:	701a      	strb	r2, [r3, #0]
    
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
    
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000b1c:	492c      	ldr	r1, [pc, #176]	@ (8000bd0 <tcp_echoserver_recv+0x140>)
 8000b1e:	68b8      	ldr	r0, [r7, #8]
 8000b20:	f006 fa02 	bl	8006f28 <tcp_sent>
    
    /* send back the received data (echo) */
    es->p->payload = "STM32F407\r\n";
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	4a2a      	ldr	r2, [pc, #168]	@ (8000bd4 <tcp_echoserver_recv+0x144>)
 8000b2a:	605a      	str	r2, [r3, #4]
    tcp_echoserver_send(tpcb, es);
 8000b2c:	69b9      	ldr	r1, [r7, #24]
 8000b2e:	68b8      	ldr	r0, [r7, #8]
 8000b30:	f000 f8bc 	bl	8000cac <tcp_echoserver_send>
    
    ret_err = ERR_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	77fb      	strb	r3, [r7, #31]
 8000b38:	e03e      	b.n	8000bb8 <tcp_echoserver_recv+0x128>
  }
  else if (es->state == ES_RECEIVED)
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d119      	bne.n	8000b76 <tcp_echoserver_recv+0xe6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d10b      	bne.n	8000b62 <tcp_echoserver_recv+0xd2>
    {
      es->p = p;
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
  
      /* send back received data */
      es->p->payload = "STM32F407\r\n";
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd4 <tcp_echoserver_recv+0x144>)
 8000b56:	605a      	str	r2, [r3, #4]
      tcp_echoserver_send(tpcb, es);
 8000b58:	69b9      	ldr	r1, [r7, #24]
 8000b5a:	68b8      	ldr	r0, [r7, #8]
 8000b5c:	f000 f8a6 	bl	8000cac <tcp_echoserver_send>
 8000b60:	e006      	b.n	8000b70 <tcp_echoserver_recv+0xe0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	6978      	ldr	r0, [r7, #20]
 8000b6c:	f004 fc6e 	bl	800544c <pbuf_chain>
    }
    ret_err = ERR_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	77fb      	strb	r3, [r7, #31]
 8000b74:	e020      	b.n	8000bb8 <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_CLOSING)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d10e      	bne.n	8000b9c <tcp_echoserver_recv+0x10c>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	891b      	ldrh	r3, [r3, #8]
 8000b82:	4619      	mov	r1, r3
 8000b84:	68b8      	ldr	r0, [r7, #8]
 8000b86:	f005 fabb 	bl	8006100 <tcp_recved>
    es->p = NULL;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f004 fb43 	bl	800521c <pbuf_free>
    ret_err = ERR_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	77fb      	strb	r3, [r7, #31]
 8000b9a:	e00d      	b.n	8000bb8 <tcp_echoserver_recv+0x128>
  }
  else
  {
    /* unkown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	891b      	ldrh	r3, [r3, #8]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	68b8      	ldr	r0, [r7, #8]
 8000ba4:	f005 faac 	bl	8006100 <tcp_recved>
    es->p = NULL;
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f004 fb34 	bl	800521c <pbuf_free>
    ret_err = ERR_OK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8000bb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3720      	adds	r7, #32
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	0800f3b4 	.word	0x0800f3b4
 8000bc8:	0800f3d4 	.word	0x0800f3d4
 8000bcc:	0800f3e0 	.word	0x0800f3e0
 8000bd0:	08000c5d 	.word	0x08000c5d
 8000bd4:	0800f408 	.word	0x0800f408

08000bd8 <tcp_echoserver_error>:
  * @param  arg: pointer on argument parameter 
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f003 f938 	bl	8003e64 <mem_free>
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d017      	beq.n	8000c40 <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d008      	beq.n	8000c2a <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000c18:	490f      	ldr	r1, [pc, #60]	@ (8000c58 <tcp_echoserver_poll+0x5c>)
 8000c1a:	6838      	ldr	r0, [r7, #0]
 8000c1c:	f006 f984 	bl	8006f28 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	6838      	ldr	r0, [r7, #0]
 8000c24:	f000 f842 	bl	8000cac <tcp_echoserver_send>
 8000c28:	e007      	b.n	8000c3a <tcp_echoserver_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	d103      	bne.n	8000c3a <tcp_echoserver_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
 8000c32:	68b9      	ldr	r1, [r7, #8]
 8000c34:	6838      	ldr	r0, [r7, #0]
 8000c36:	f000 f88c 	bl	8000d52 <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	73fb      	strb	r3, [r7, #15]
 8000c3e:	e004      	b.n	8000c4a <tcp_echoserver_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000c40:	6838      	ldr	r0, [r7, #0]
 8000c42:	f005 f883 	bl	8005d4c <tcp_abort>
    ret_err = ERR_ABRT;
 8000c46:	23f3      	movs	r3, #243	@ 0xf3
 8000c48:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	08000c5d 	.word	0x08000c5d

08000c5c <tcp_echoserver_sent>:
  *         is received from remote host for sent data) 
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	4613      	mov	r3, r2
 8000c68:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	2200      	movs	r2, #0
 8000c72:	705a      	strb	r2, [r3, #1]
  
  if(es->p != NULL)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d008      	beq.n	8000c8e <tcp_echoserver_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000c7c:	490a      	ldr	r1, [pc, #40]	@ (8000ca8 <tcp_echoserver_sent+0x4c>)
 8000c7e:	68b8      	ldr	r0, [r7, #8]
 8000c80:	f006 f952 	bl	8006f28 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 8000c84:	6979      	ldr	r1, [r7, #20]
 8000c86:	68b8      	ldr	r0, [r7, #8]
 8000c88:	f000 f810 	bl	8000cac <tcp_echoserver_send>
 8000c8c:	e007      	b.n	8000c9e <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d103      	bne.n	8000c9e <tcp_echoserver_sent+0x42>
      tcp_echoserver_connection_close(tpcb, es);
 8000c96:	6979      	ldr	r1, [r7, #20]
 8000c98:	68b8      	ldr	r0, [r7, #8]
 8000c9a:	f000 f85a 	bl	8000d52 <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	08000c5d 	.word	0x08000c5d

08000cac <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 8000cba:	e036      	b.n	8000d2a <tcp_echoserver_send+0x7e>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	6859      	ldr	r1, [r3, #4]
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	895a      	ldrh	r2, [r3, #10]
 8000cca:	2301      	movs	r3, #1
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f009 f833 	bl	8009d38 <tcp_write>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 8000cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d11d      	bne.n	8000d1a <tcp_echoserver_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	895b      	ldrh	r3, [r3, #10]
 8000ce2:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d004      	beq.n	8000cfe <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f004 fb2f 	bl	800535c <pbuf_ref>
      
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000cfe:	6938      	ldr	r0, [r7, #16]
 8000d00:	f004 fa8c 	bl	800521c <pbuf_free>
 8000d04:	4603      	mov	r3, r0
 8000d06:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000d08:	7b7b      	ldrb	r3, [r7, #13]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d0f7      	beq.n	8000cfe <tcp_echoserver_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8000d0e:	89fb      	ldrh	r3, [r7, #14]
 8000d10:	4619      	mov	r1, r3
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f005 f9f4 	bl	8006100 <tcp_recved>
 8000d18:	e007      	b.n	8000d2a <tcp_echoserver_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8000d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d22:	d102      	bne.n	8000d2a <tcp_echoserver_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	609a      	str	r2, [r3, #8]
         (es->p != NULL) && 
 8000d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10b      	bne.n	8000d4a <tcp_echoserver_send+0x9e>
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d007      	beq.n	8000d4a <tcp_echoserver_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	895a      	ldrh	r2, [r3, #10]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
         (es->p != NULL) && 
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d9b8      	bls.n	8000cbc <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f006 f8ae 	bl	8006ec0 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000d64:	2100      	movs	r1, #0
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f006 f8de 	bl	8006f28 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f006 f8b8 	bl	8006ee4 <tcp_recv>
  tcp_err(tpcb, NULL);
 8000d74:	2100      	movs	r1, #0
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f006 f8f8 	bl	8006f6c <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f006 f92d 	bl	8006fe0 <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d002      	beq.n	8000d92 <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8000d8c:	6838      	ldr	r0, [r7, #0]
 8000d8e:	f003 f869 	bl	8003e64 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f004 fef0 	bl	8005b78 <tcp_close>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000da4:	f7ff fde4 	bl	8000970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	@ (8000de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f00d fc91 	bl	800e6f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fbe3 	bl	800059c <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000de4:	08011fe0 	.word	0x08011fe0
  ldr r2, =_sbss
 8000de8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000dec:	200084ec 	.word	0x200084ec

08000df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>

08000df2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00b      	beq.n	8000e1a <LAN8742_RegisterBusIO+0x28>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d007      	beq.n	8000e1a <LAN8742_RegisterBusIO+0x28>
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <LAN8742_RegisterBusIO+0x28>
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d102      	bne.n	8000e20 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e014      	b.n	8000e4a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b086      	sub	sp, #24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d139      	bne.n	8000ee6 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d002      	beq.n	8000e80 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2220      	movs	r2, #32
 8000e84:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	e01c      	b.n	8000ec6 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	f107 020c 	add.w	r2, r7, #12
 8000e94:	2112      	movs	r1, #18
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	4798      	blx	r3
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	da03      	bge.n	8000ea8 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000ea0:	f06f 0304 	mvn.w	r3, #4
 8000ea4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000ea6:	e00b      	b.n	8000ec0 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 031f 	and.w	r3, r3, #31
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d105      	bne.n	8000ec0 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
         break;
 8000ebe:	e005      	b.n	8000ecc <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2b1f      	cmp	r3, #31
 8000eca:	d9df      	bls.n	8000e8c <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b1f      	cmp	r3, #31
 8000ed2:	d902      	bls.n	8000eda <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000ed4:	f06f 0302 	mvn.w	r3, #2
 8000ed8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000ee6:	693b      	ldr	r3, [r7, #16]
 }
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	6810      	ldr	r0, [r2, #0]
 8000f04:	f107 020c 	add.w	r2, r7, #12
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4798      	blx	r3
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	da02      	bge.n	8000f18 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f12:	f06f 0304 	mvn.w	r3, #4
 8000f16:	e06e      	b.n	8000ff6 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	6810      	ldr	r0, [r2, #0]
 8000f20:	f107 020c 	add.w	r2, r7, #12
 8000f24:	2101      	movs	r1, #1
 8000f26:	4798      	blx	r3
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	da02      	bge.n	8000f34 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f2e:	f06f 0304 	mvn.w	r3, #4
 8000f32:	e060      	b.n	8000ff6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e059      	b.n	8000ff6 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	6810      	ldr	r0, [r2, #0]
 8000f4a:	f107 020c 	add.w	r2, r7, #12
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4798      	blx	r3
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	da02      	bge.n	8000f5e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f58:	f06f 0304 	mvn.w	r3, #4
 8000f5c:	e04b      	b.n	8000ff6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d11b      	bne.n	8000fa0 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d006      	beq.n	8000f80 <LAN8742_GetLinkState+0x90>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e03a      	b.n	8000ff6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e033      	b.n	8000ff6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	e02c      	b.n	8000ff6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f9c:	2305      	movs	r3, #5
 8000f9e:	e02a      	b.n	8000ff6 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	6810      	ldr	r0, [r2, #0]
 8000fa8:	f107 020c 	add.w	r2, r7, #12
 8000fac:	211f      	movs	r1, #31
 8000fae:	4798      	blx	r3
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	da02      	bge.n	8000fbc <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000fb6:	f06f 0304 	mvn.w	r3, #4
 8000fba:	e01c      	b.n	8000ff6 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	e015      	b.n	8000ff6 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f003 031c 	and.w	r3, r3, #28
 8000fd0:	2b18      	cmp	r3, #24
 8000fd2:	d101      	bne.n	8000fd8 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e00e      	b.n	8000ff6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 031c 	and.w	r3, r3, #28
 8000fde:	2b08      	cmp	r3, #8
 8000fe0:	d101      	bne.n	8000fe6 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e007      	b.n	8000ff6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f003 031c 	and.w	r3, r3, #28
 8000fec:	2b14      	cmp	r3, #20
 8000fee:	d101      	bne.n	8000ff4 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	e000      	b.n	8000ff6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ff4:	2305      	movs	r3, #5
    }
  }
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001004:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0d      	ldr	r2, [pc, #52]	@ (8001040 <HAL_Init+0x40>)
 800100a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800100e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001010:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <HAL_Init+0x40>)
 8001016:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800101a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a07      	ldr	r2, [pc, #28]	@ (8001040 <HAL_Init+0x40>)
 8001022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001028:	2003      	movs	r0, #3
 800102a:	f000 f931 	bl	8001290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102e:	200f      	movs	r0, #15
 8001030:	f000 f808 	bl	8001044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001034:	f7ff fb7a 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023c00 	.word	0x40023c00

08001044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800104c:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <HAL_InitTick+0x54>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <HAL_InitTick+0x58>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105a:	fbb3 f3f1 	udiv	r3, r3, r1
 800105e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f93b 	bl	80012de <HAL_SYSTICK_Config>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e00e      	b.n	8001090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d80a      	bhi.n	800108e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001078:	2200      	movs	r2, #0
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f000 f911 	bl	80012a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001084:	4a06      	ldr	r2, [pc, #24]	@ (80010a0 <HAL_InitTick+0x5c>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e000      	b.n	8001090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000000 	.word	0x20000000
 800109c:	20000008 	.word	0x20000008
 80010a0:	20000004 	.word	0x20000004

080010a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_IncTick+0x20>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <HAL_IncTick+0x24>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <HAL_IncTick+0x24>)
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000008 	.word	0x20000008
 80010c8:	200000ac 	.word	0x200000ac

080010cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return uwTick;
 80010d0:	4b03      	ldr	r3, [pc, #12]	@ (80010e0 <HAL_GetTick+0x14>)
 80010d2:	681b      	ldr	r3, [r3, #0]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	200000ac 	.word	0x200000ac

080010e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff ffee 	bl	80010cc <HAL_GetTick>
 80010f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d005      	beq.n	800110a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <HAL_Delay+0x44>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800110a:	bf00      	nop
 800110c:	f7ff ffde 	bl	80010cc <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	429a      	cmp	r2, r3
 800111a:	d8f7      	bhi.n	800110c <HAL_Delay+0x28>
  {
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008

0800112c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001154:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	@ (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001178:	4b04      	ldr	r3, [pc, #16]	@ (800118c <__NVIC_GetPriorityGrouping+0x18>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	f003 0307 	and.w	r3, r3, #7
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	@ (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	@ (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	@ 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2b04      	cmp	r3, #4
 8001200:	bf28      	it	cs
 8001202:	2304      	movcs	r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3304      	adds	r3, #4
 800120a:	2b06      	cmp	r3, #6
 800120c:	d902      	bls.n	8001214 <NVIC_EncodePriority+0x30>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3b03      	subs	r3, #3
 8001212:	e000      	b.n	8001216 <NVIC_EncodePriority+0x32>
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122c:	f04f 31ff 	mov.w	r1, #4294967295
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43d9      	mvns	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
         );
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	@ 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800125c:	d301      	bcc.n	8001262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125e:	2301      	movs	r3, #1
 8001260:	e00f      	b.n	8001282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001262:	4a0a      	ldr	r2, [pc, #40]	@ (800128c <SysTick_Config+0x40>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126a:	210f      	movs	r1, #15
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f7ff ff8e 	bl	8001190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001274:	4b05      	ldr	r3, [pc, #20]	@ (800128c <SysTick_Config+0x40>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127a:	4b04      	ldr	r3, [pc, #16]	@ (800128c <SysTick_Config+0x40>)
 800127c:	2207      	movs	r2, #7
 800127e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	e000e010 	.word	0xe000e010

08001290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff47 	bl	800112c <__NVIC_SetPriorityGrouping>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b8:	f7ff ff5c 	bl	8001174 <__NVIC_GetPriorityGrouping>
 80012bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	68b9      	ldr	r1, [r7, #8]
 80012c2:	6978      	ldr	r0, [r7, #20]
 80012c4:	f7ff ff8e 	bl	80011e4 <NVIC_EncodePriority>
 80012c8:	4602      	mov	r2, r0
 80012ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff5d 	bl	8001190 <__NVIC_SetPriority>
}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffb0 	bl	800124c <SysTick_Config>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e08a      	b.n	8001420 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001310:	2b00      	cmp	r3, #0
 8001312:	d106      	bne.n	8001322 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2220      	movs	r2, #32
 8001318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f002 fa2f 	bl	8003780 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	4b40      	ldr	r3, [pc, #256]	@ (8001428 <HAL_ETH_Init+0x130>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	4a3f      	ldr	r2, [pc, #252]	@ (8001428 <HAL_ETH_Init+0x130>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001330:	6453      	str	r3, [r2, #68]	@ 0x44
 8001332:	4b3d      	ldr	r3, [pc, #244]	@ (8001428 <HAL_ETH_Init+0x130>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800133e:	4b3b      	ldr	r3, [pc, #236]	@ (800142c <HAL_ETH_Init+0x134>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	4a3a      	ldr	r2, [pc, #232]	@ (800142c <HAL_ETH_Init+0x134>)
 8001344:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001348:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800134a:	4b38      	ldr	r3, [pc, #224]	@ (800142c <HAL_ETH_Init+0x134>)
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	4936      	ldr	r1, [pc, #216]	@ (800142c <HAL_ETH_Init+0x134>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001358:	4b34      	ldr	r3, [pc, #208]	@ (800142c <HAL_ETH_Init+0x134>)
 800135a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001372:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001374:	f7ff feaa 	bl	80010cc <HAL_GetTick>
 8001378:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800137a:	e011      	b.n	80013a0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800137c:	f7ff fea6 	bl	80010cc <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800138a:	d909      	bls.n	80013a0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2204      	movs	r2, #4
 8001390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	22e0      	movs	r2, #224	@ 0xe0
 8001398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e03f      	b.n	8001420 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1e4      	bne.n	800137c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 fe16 	bl	8001fe4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 fec1 	bl	8002140 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 ff17 	bl	80021f2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	461a      	mov	r2, r3
 80013ca:	2100      	movs	r1, #0
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fe7f 	bl	80020d0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80013e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80013f6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800140a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2210      	movs	r2, #16
 800141a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40023800 	.word	0x40023800
 800142c:	40013800 	.word	0x40013800

08001430 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800143e:	2b10      	cmp	r3, #16
 8001440:	d150      	bne.n	80014e4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2220      	movs	r2, #32
 8001446:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2204      	movs	r2, #4
 800144e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 f9f8 	bl	8001846 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 0208 	orr.w	r2, r2, #8
 8001464:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff fe38 	bl	80010e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0204 	orr.w	r2, r2, #4
 800148a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001494:	2001      	movs	r0, #1
 8001496:	f7ff fe25 	bl	80010e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 fc3a 	bl	8001d1c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014be:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	f043 0302 	orr.w	r3, r3, #2
 80014d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014d6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2240      	movs	r2, #64	@ 0x40
 80014dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	e000      	b.n	80014e6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
  }
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014fc:	2b40      	cmp	r3, #64	@ 0x40
 80014fe:	d14a      	bne.n	8001596 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2220      	movs	r2, #32
 8001504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800151a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800151e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	f023 0302 	bic.w	r3, r3, #2
 8001532:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001536:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0204 	bic.w	r2, r2, #4
 8001546:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001550:	2001      	movs	r0, #1
 8001552:	f7ff fdc7 	bl	80010e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 fbdc 	bl	8001d1c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0208 	bic.w	r2, r2, #8
 8001572:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800157c:	2001      	movs	r0, #1
 800157e:	f7ff fdb1 	bl	80010e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2210      	movs	r2, #16
 800158e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
  }
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015b8:	f043 0201 	orr.w	r2, r3, #1
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e07c      	b.n	80016c0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015cc:	2b40      	cmp	r3, #64	@ 0x40
 80015ce:	d176      	bne.n	80016be <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80015d0:	2200      	movs	r2, #0
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f000 fe7b 	bl	80022d0 <ETH_Prepare_Tx_Descriptors>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d009      	beq.n	80015f4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015e6:	f043 0202 	orr.w	r2, r3, #2
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e065      	b.n	80016c0 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80015f4:	f3bf 8f4f 	dsb	sy
}
 80015f8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3206      	adds	r2, #6
 8001602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001606:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	629a      	str	r2, [r3, #40]	@ 0x28
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001616:	2b03      	cmp	r3, #3
 8001618:	d904      	bls.n	8001624 <HAL_ETH_Transmit+0x84>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161e:	1f1a      	subs	r2, r3, #4
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3106      	adds	r1, #6
 8001630:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001634:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001638:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800163a:	f7ff fd47 	bl	80010cc <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001640:	e037      	b.n	80016b2 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d011      	beq.n	8001678 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800165a:	f043 0208 	orr.w	r2, r3, #8
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e023      	b.n	80016c0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167e:	d018      	beq.n	80016b2 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001680:	f7ff fd24 	bl	80010cc <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	d302      	bcc.n	8001696 <HAL_ETH_Transmit+0xf6>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10d      	bne.n	80016b2 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800169c:	f043 0204 	orr.w	r2, r3, #4
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80016ac:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e006      	b.n	80016c0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	dbc3      	blt.n	8001642 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
  }
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d109      	bne.n	80016f4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e6:	f043 0201 	orr.w	r2, r3, #1
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0a4      	b.n	800183e <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016fa:	2b40      	cmp	r3, #64	@ 0x40
 80016fc:	d001      	beq.n	8001702 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e09d      	b.n	800183e <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001706:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	3212      	adds	r2, #18
 800170e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001712:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001718:	f1c3 0304 	rsb	r3, r3, #4
 800171c:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800171e:	e066      	b.n	80017ee <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d007      	beq.n	800173c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	69da      	ldr	r2, [r3, #28]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	699a      	ldr	r2, [r3, #24]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001744:	2b00      	cmp	r3, #0
 8001746:	d103      	bne.n	8001750 <HAL_ETH_ReadData+0x88>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800174c:	2b00      	cmp	r3, #0
 800174e:	d03c      	beq.n	80017ca <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	0c1b      	lsrs	r3, r3, #16
 800176e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001772:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001788:	2301      	movs	r3, #1
 800178a:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80017a4:	461a      	mov	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	f002 f999 	bl	8003ae0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	441a      	add	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3301      	adds	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d902      	bls.n	80017dc <HAL_ETH_ReadData+0x114>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3b04      	subs	r3, #4
 80017da:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	3212      	adds	r2, #18
 80017e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3301      	adds	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db06      	blt.n	8001804 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d202      	bcs.n	8001804 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80017fe:	7cfb      	ldrb	r3, [r7, #19]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d08d      	beq.n	8001720 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	441a      	add	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f814 	bl	8001846 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001824:	7cfb      	ldrb	r3, [r7, #19]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d108      	bne.n	800183c <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	e000      	b.n	800183e <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
}
 800183e:	4618      	mov	r0, r3
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b088      	sub	sp, #32
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001852:	2301      	movs	r3, #1
 8001854:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800185a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	3212      	adds	r2, #18
 8001862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001866:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800186c:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800186e:	e044      	b.n	80018fa <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d112      	bne.n	800189e <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001878:	f107 0308 	add.w	r3, r7, #8
 800187c:	4618      	mov	r0, r3
 800187e:	f002 f8ff 	bl	8003a80 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	74fb      	strb	r3, [r7, #19]
 800188c:	e007      	b.n	800189e <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	461a      	mov	r2, r3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	461a      	mov	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800189e:	7cfb      	ldrb	r3, [r7, #19]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d02a      	beq.n	80018fa <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d108      	bne.n	80018be <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	6053      	str	r3, [r2, #4]
 80018bc:	e005      	b.n	80018ca <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3301      	adds	r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d902      	bls.n	80018e8 <ETH_UpdateDescriptor+0xa2>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b04      	subs	r3, #4
 80018e6:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	3212      	adds	r2, #18
 80018ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f2:	617b      	str	r3, [r7, #20]
      desccount--;
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <ETH_UpdateDescriptor+0xc0>
 8001900:	7cfb      	ldrb	r3, [r7, #19]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1b4      	bne.n	8001870 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	429a      	cmp	r2, r3
 800190e:	d01a      	beq.n	8001946 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	3303      	adds	r3, #3
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800191a:	f3bf 8f5f 	dmb	sy
}
 800191e:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6919      	ldr	r1, [r3, #16]
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	18ca      	adds	r2, r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001938:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001946:	bf00      	nop
 8001948:	3720      	adds	r7, #32
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f003 031c 	and.w	r3, r3, #28
 800196a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	02db      	lsls	r3, r3, #11
 8001970:	b29b      	uxth	r3, r3
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4313      	orrs	r3, r2
 8001976:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	019b      	lsls	r3, r3, #6
 800197c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	4313      	orrs	r3, r2
 8001984:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f023 0302 	bic.w	r3, r3, #2
 800198c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800199e:	f7ff fb95 	bl	80010cc <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019a4:	e00d      	b.n	80019c2 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80019a6:	f7ff fb91 	bl	80010cc <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019b4:	d301      	bcc.n	80019ba <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e010      	b.n	80019dc <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1ec      	bne.n	80019a6 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f003 031c 	and.w	r3, r3, #28
 8001a00:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	02db      	lsls	r3, r3, #11
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	019b      	lsls	r3, r3, #6
 8001a12:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f043 0302 	orr.w	r3, r3, #2
 8001a22:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a3e:	f7ff fb45 	bl	80010cc <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a44:	e00d      	b.n	8001a62 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001a46:	f7ff fb41 	bl	80010cc <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a54:	d301      	bcc.n	8001a5a <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e009      	b.n	8001a6e <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ec      	bne.n	8001a46 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0e6      	b.n	8001c58 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	bf0c      	ite	eq
 8001ac2:	2301      	moveq	r3, #1
 8001ac4:	2300      	movne	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bf14      	ite	ne
 8001ade:	2301      	movne	r3, #1
 8001ae0:	2300      	moveq	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf0c      	ite	eq
 8001af8:	2301      	moveq	r3, #1
 8001afa:	2300      	movne	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	bf14      	ite	ne
 8001b12:	2301      	movne	r3, #1
 8001b14:	2300      	moveq	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf0c      	ite	eq
 8001b48:	2301      	moveq	r3, #1
 8001b4a:	2300      	movne	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	bf0c      	ite	eq
 8001b62:	2301      	moveq	r3, #1
 8001b64:	2300      	movne	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf14      	ite	ne
 8001b7c:	2301      	movne	r3, #1
 8001b7e:	2300      	moveq	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf14      	ite	ne
 8001ba4:	2301      	movne	r3, #1
 8001ba6:	2300      	moveq	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	bf14      	ite	ne
 8001bbe:	2301      	movne	r3, #1
 8001bc0:	2300      	moveq	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf14      	ite	ne
 8001bd8:	2301      	movne	r3, #1
 8001bda:	2300      	moveq	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	461a      	mov	r2, r3
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bf0c      	ite	eq
 8001bf4:	2301      	moveq	r3, #1
 8001bf6:	2300      	movne	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	0c1b      	lsrs	r3, r3, #16
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bf14      	ite	ne
 8001c2c:	2301      	movne	r3, #1
 8001c2e:	2300      	moveq	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf14      	ite	ne
 8001c48:	2301      	movne	r3, #1
 8001c4a:	2300      	moveq	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e00b      	b.n	8001c90 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c7e:	2b10      	cmp	r3, #16
 8001c80:	d105      	bne.n	8001c8e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001c82:	6839      	ldr	r1, [r7, #0]
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f86f 	bl	8001d68 <ETH_SetMACConfig>

    return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
  }
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f023 031c 	bic.w	r3, r3, #28
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001cb0:	f001 fa56 	bl	8003160 <HAL_RCC_GetHCLKFreq>
 8001cb4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	4a14      	ldr	r2, [pc, #80]	@ (8001d0c <HAL_ETH_SetMDIOClockRange+0x74>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d804      	bhi.n	8001cc8 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f043 0308 	orr.w	r3, r3, #8
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	e019      	b.n	8001cfc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4a11      	ldr	r2, [pc, #68]	@ (8001d10 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d204      	bcs.n	8001cda <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f043 030c 	orr.w	r3, r3, #12
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	e010      	b.n	8001cfc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d14 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d90c      	bls.n	8001cfc <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8001d18 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d804      	bhi.n	8001cf4 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	e003      	b.n	8001cfc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f043 0310 	orr.w	r3, r3, #16
 8001cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	611a      	str	r2, [r3, #16]
}
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	02160ebf 	.word	0x02160ebf
 8001d10:	03938700 	.word	0x03938700
 8001d14:	05f5e0ff 	.word	0x05f5e0ff
 8001d18:	08f0d17f 	.word	0x08f0d17f

08001d1c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d3e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f7ff f9c9 	bl	80010e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d5c:	6193      	str	r3, [r2, #24]
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4b53      	ldr	r3, [pc, #332]	@ (8001ecc <ETH_SetMACConfig+0x164>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	7b9b      	ldrb	r3, [r3, #14]
 8001d86:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	7c12      	ldrb	r2, [r2, #16]
 8001d8c:	2a00      	cmp	r2, #0
 8001d8e:	d102      	bne.n	8001d96 <ETH_SetMACConfig+0x2e>
 8001d90:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d94:	e000      	b.n	8001d98 <ETH_SetMACConfig+0x30>
 8001d96:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d98:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	7c52      	ldrb	r2, [r2, #17]
 8001d9e:	2a00      	cmp	r2, #0
 8001da0:	d102      	bne.n	8001da8 <ETH_SetMACConfig+0x40>
 8001da2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001da6:	e000      	b.n	8001daa <ETH_SetMACConfig+0x42>
 8001da8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001daa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001db0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	7fdb      	ldrb	r3, [r3, #31]
 8001db6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001db8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001dbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	7f92      	ldrb	r2, [r2, #30]
 8001dc4:	2a00      	cmp	r2, #0
 8001dc6:	d102      	bne.n	8001dce <ETH_SetMACConfig+0x66>
 8001dc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dcc:	e000      	b.n	8001dd0 <ETH_SetMACConfig+0x68>
 8001dce:	2200      	movs	r2, #0
                        macconf->Speed |
 8001dd0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	7f1b      	ldrb	r3, [r3, #28]
 8001dd6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001dd8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001dde:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	791b      	ldrb	r3, [r3, #4]
 8001de4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001de6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001dee:	2a00      	cmp	r2, #0
 8001df0:	d102      	bne.n	8001df8 <ETH_SetMACConfig+0x90>
 8001df2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df6:	e000      	b.n	8001dfa <ETH_SetMACConfig+0x92>
 8001df8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001dfa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	7bdb      	ldrb	r3, [r3, #15]
 8001e00:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e02:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001e10:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e12:	4313      	orrs	r3, r2
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f7ff f95a 	bl	80010e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001e46:	4013      	ands	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001e56:	2a00      	cmp	r2, #0
 8001e58:	d101      	bne.n	8001e5e <ETH_SetMACConfig+0xf6>
 8001e5a:	2280      	movs	r2, #128	@ 0x80
 8001e5c:	e000      	b.n	8001e60 <ETH_SetMACConfig+0xf8>
 8001e5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e60:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001e6e:	2a01      	cmp	r2, #1
 8001e70:	d101      	bne.n	8001e76 <ETH_SetMACConfig+0x10e>
 8001e72:	2208      	movs	r2, #8
 8001e74:	e000      	b.n	8001e78 <ETH_SetMACConfig+0x110>
 8001e76:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e78:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001e80:	2a01      	cmp	r2, #1
 8001e82:	d101      	bne.n	8001e88 <ETH_SetMACConfig+0x120>
 8001e84:	2204      	movs	r2, #4
 8001e86:	e000      	b.n	8001e8a <ETH_SetMACConfig+0x122>
 8001e88:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001e92:	2a01      	cmp	r2, #1
 8001e94:	d101      	bne.n	8001e9a <ETH_SetMACConfig+0x132>
 8001e96:	2202      	movs	r2, #2
 8001e98:	e000      	b.n	8001e9c <ETH_SetMACConfig+0x134>
 8001e9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f7ff f915 	bl	80010e4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	619a      	str	r2, [r3, #24]
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	fd20810f 	.word	0xfd20810f

08001ed0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe0 <ETH_SetDMAConfig+0x110>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	7b1b      	ldrb	r3, [r3, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d102      	bne.n	8001efc <ETH_SetDMAConfig+0x2c>
 8001ef6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001efa:	e000      	b.n	8001efe <ETH_SetDMAConfig+0x2e>
 8001efc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	7b5b      	ldrb	r3, [r3, #13]
 8001f02:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f04:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	7f52      	ldrb	r2, [r2, #29]
 8001f0a:	2a00      	cmp	r2, #0
 8001f0c:	d102      	bne.n	8001f14 <ETH_SetDMAConfig+0x44>
 8001f0e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001f12:	e000      	b.n	8001f16 <ETH_SetDMAConfig+0x46>
 8001f14:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	7b9b      	ldrb	r3, [r3, #14]
 8001f1c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f1e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f24:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	7f1b      	ldrb	r3, [r3, #28]
 8001f2a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001f2c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	7f9b      	ldrb	r3, [r3, #30]
 8001f32:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f34:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f3a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f42:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f44:	4313      	orrs	r3, r2
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f54:	461a      	mov	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f66:	2001      	movs	r0, #1
 8001f68:	f7ff f8bc 	bl	80010e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f74:	461a      	mov	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	791b      	ldrb	r3, [r3, #4]
 8001f7e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f84:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f8a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f90:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f98:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001f9a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001fa2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001fa8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fb2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fb6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f7ff f88d 	bl	80010e4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	f8de3f23 	.word	0xf8de3f23

08001fe4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b0a6      	sub	sp, #152	@ 0x98
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001fec:	2301      	movs	r3, #1
 8001fee:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002002:	2301      	movs	r3, #1
 8002004:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002014:	2301      	movs	r3, #1
 8002016:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002026:	2300      	movs	r3, #0
 8002028:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002030:	2300      	movs	r3, #0
 8002032:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800203a:	2300      	movs	r3, #0
 800203c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800204c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002050:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002052:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002056:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800205e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002062:	4619      	mov	r1, r3
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff fe7f 	bl	8001d68 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800206a:	2301      	movs	r3, #1
 800206c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800206e:	2301      	movs	r3, #1
 8002070:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002072:	2301      	movs	r3, #1
 8002074:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002078:	2301      	movs	r3, #1
 800207a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002090:	2301      	movs	r3, #1
 8002092:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002096:	2301      	movs	r3, #1
 8002098:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800209a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800209e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020a0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020a4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020aa:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80020ac:	2301      	movs	r3, #1
 80020ae:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80020ba:	f107 0308 	add.w	r3, r7, #8
 80020be:	4619      	mov	r1, r3
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff05 	bl	8001ed0 <ETH_SetDMAConfig>
}
 80020c6:	bf00      	nop
 80020c8:	3798      	adds	r7, #152	@ 0x98
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3305      	adds	r3, #5
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	3204      	adds	r2, #4
 80020e8:	7812      	ldrb	r2, [r2, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <ETH_MACAddressConfig+0x68>)
 80020f2:	4413      	add	r3, r2
 80020f4:	461a      	mov	r2, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3303      	adds	r3, #3
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	061a      	lsls	r2, r3, #24
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3302      	adds	r3, #2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	041b      	lsls	r3, r3, #16
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3301      	adds	r3, #1
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	4313      	orrs	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	7812      	ldrb	r2, [r2, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	4b06      	ldr	r3, [pc, #24]	@ (800213c <ETH_MACAddressConfig+0x6c>)
 8002122:	4413      	add	r3, r2
 8002124:	461a      	mov	r2, r3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	6013      	str	r3, [r2, #0]
}
 800212a:	bf00      	nop
 800212c:	371c      	adds	r7, #28
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40028040 	.word	0x40028040
 800213c:	40028044 	.word	0x40028044

08002140 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	e03e      	b.n	80021cc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68d9      	ldr	r1, [r3, #12]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	440b      	add	r3, r1
 800215e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2200      	movs	r2, #0
 800216a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2200      	movs	r2, #0
 8002176:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	3206      	adds	r2, #6
 8002180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d80c      	bhi.n	80021b0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68d9      	ldr	r1, [r3, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	461a      	mov	r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	e004      	b.n	80021ba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	461a      	mov	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	3301      	adds	r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d9bd      	bls.n	800214e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021e4:	611a      	str	r2, [r3, #16]
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b085      	sub	sp, #20
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	e048      	b.n	8002292 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6919      	ldr	r1, [r3, #16]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	440b      	add	r3, r1
 8002210:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2200      	movs	r2, #0
 800221c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2200      	movs	r2, #0
 800222e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800223c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	3212      	adds	r2, #18
 800225e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d80c      	bhi.n	8002282 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6919      	ldr	r1, [r3, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	461a      	mov	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	60da      	str	r2, [r3, #12]
 8002280:	e004      	b.n	800228c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3301      	adds	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d9b3      	bls.n	8002200 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022c2:	60da      	str	r2, [r3, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b091      	sub	sp, #68	@ 0x44
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3318      	adds	r3, #24
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80022e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fa:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800230e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002312:	d007      	beq.n	8002324 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002318:	3304      	adds	r3, #4
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002324:	2302      	movs	r3, #2
 8002326:	e115      	b.n	8002554 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8002328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800232a:	3301      	adds	r3, #1
 800232c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800232e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002336:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002340:	f023 031f 	bic.w	r3, r3, #31
 8002344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002346:	6852      	ldr	r2, [r2, #4]
 8002348:	431a      	orrs	r2, r3
 800234a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800235a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	431a      	orrs	r2, r3
 8002368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0320 	and.w	r3, r3, #32
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	431a      	orrs	r2, r3
 8002386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002388:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800239e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80023a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80023aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ac:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80023ae:	e084      	b.n	80024ba <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80023b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80023b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ba:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d006      	beq.n	80023d0 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80023ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	e005      	b.n	80023dc <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023da:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80023dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023de:	3301      	adds	r3, #1
 80023e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d902      	bls.n	80023ee <ETH_Prepare_Tx_Descriptors+0x11e>
 80023e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ea:	3b04      	subs	r3, #4
 80023ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80023f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002400:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002404:	d007      	beq.n	8002416 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800240a:	3304      	adds	r3, #4
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d029      	beq.n	800246a <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800241e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002422:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002424:	2300      	movs	r3, #0
 8002426:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002428:	e019      	b.n	800245e <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 800242a:	f3bf 8f5f 	dmb	sy
}
 800242e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800243c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800243e:	3301      	adds	r3, #1
 8002440:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002444:	2b03      	cmp	r3, #3
 8002446:	d902      	bls.n	800244e <ETH_Prepare_Tx_Descriptors+0x17e>
 8002448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800244a:	3b04      	subs	r3, #4
 800244c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002456:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800245a:	3301      	adds	r3, #1
 800245c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800245e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002462:	429a      	cmp	r2, r3
 8002464:	d3e1      	bcc.n	800242a <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8002466:	2302      	movs	r3, #2
 8002468:	e074      	b.n	8002554 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800246a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002474:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002478:	3301      	adds	r3, #1
 800247a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800247c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800248c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002494:	f023 031f 	bic.w	r3, r3, #31
 8002498:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800249a:	6852      	ldr	r2, [r2, #4]
 800249c:	431a      	orrs	r2, r3
 800249e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a0:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80024a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a4:	3301      	adds	r3, #1
 80024a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80024a8:	f3bf 8f5f 	dmb	sy
}
 80024ac:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80024ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b8:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80024ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f47f af76 	bne.w	80023b0 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d006      	beq.n	80024d8 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80024d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	e005      	b.n	80024e4 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e2:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80024ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ee:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	6a3a      	ldr	r2, [r7, #32]
 80024f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80024fa:	f3bf 8f5f 	dmb	sy
}
 80024fe:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800250a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002510:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002514:	3304      	adds	r3, #4
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002520:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002522:	f3ef 8310 	mrs	r3, PRIMASK
 8002526:	613b      	str	r3, [r7, #16]
  return(result);
 8002528:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	2301      	movs	r3, #1
 800252e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f383 8810 	msr	PRIMASK, r3
}
 8002536:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800253c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253e:	4413      	add	r3, r2
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	629a      	str	r2, [r3, #40]	@ 0x28
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f383 8810 	msr	PRIMASK, r3
}
 8002550:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3744      	adds	r7, #68	@ 0x44
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	@ 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	e16b      	b.n	8002854 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800257c:	2201      	movs	r2, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	429a      	cmp	r2, r3
 8002596:	f040 815a 	bne.w	800284e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d005      	beq.n	80025b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d130      	bne.n	8002614 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	2203      	movs	r2, #3
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e8:	2201      	movs	r2, #1
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 0201 	and.w	r2, r3, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b03      	cmp	r3, #3
 800261e:	d017      	beq.n	8002650 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d123      	bne.n	80026a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	08da      	lsrs	r2, r3, #3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3208      	adds	r2, #8
 8002664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	220f      	movs	r2, #15
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	08da      	lsrs	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3208      	adds	r2, #8
 800269e:	69b9      	ldr	r1, [r7, #24]
 80026a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0203 	and.w	r2, r3, #3
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80b4 	beq.w	800284e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b60      	ldr	r3, [pc, #384]	@ (800286c <HAL_GPIO_Init+0x30c>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	4a5f      	ldr	r2, [pc, #380]	@ (800286c <HAL_GPIO_Init+0x30c>)
 80026f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f6:	4b5d      	ldr	r3, [pc, #372]	@ (800286c <HAL_GPIO_Init+0x30c>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002702:	4a5b      	ldr	r2, [pc, #364]	@ (8002870 <HAL_GPIO_Init+0x310>)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	3302      	adds	r3, #2
 800270a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	220f      	movs	r2, #15
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a52      	ldr	r2, [pc, #328]	@ (8002874 <HAL_GPIO_Init+0x314>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d02b      	beq.n	8002786 <HAL_GPIO_Init+0x226>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a51      	ldr	r2, [pc, #324]	@ (8002878 <HAL_GPIO_Init+0x318>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d025      	beq.n	8002782 <HAL_GPIO_Init+0x222>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a50      	ldr	r2, [pc, #320]	@ (800287c <HAL_GPIO_Init+0x31c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01f      	beq.n	800277e <HAL_GPIO_Init+0x21e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4f      	ldr	r2, [pc, #316]	@ (8002880 <HAL_GPIO_Init+0x320>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d019      	beq.n	800277a <HAL_GPIO_Init+0x21a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4e      	ldr	r2, [pc, #312]	@ (8002884 <HAL_GPIO_Init+0x324>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <HAL_GPIO_Init+0x216>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4d      	ldr	r2, [pc, #308]	@ (8002888 <HAL_GPIO_Init+0x328>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00d      	beq.n	8002772 <HAL_GPIO_Init+0x212>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4c      	ldr	r2, [pc, #304]	@ (800288c <HAL_GPIO_Init+0x32c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d007      	beq.n	800276e <HAL_GPIO_Init+0x20e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a4b      	ldr	r2, [pc, #300]	@ (8002890 <HAL_GPIO_Init+0x330>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <HAL_GPIO_Init+0x20a>
 8002766:	2307      	movs	r3, #7
 8002768:	e00e      	b.n	8002788 <HAL_GPIO_Init+0x228>
 800276a:	2308      	movs	r3, #8
 800276c:	e00c      	b.n	8002788 <HAL_GPIO_Init+0x228>
 800276e:	2306      	movs	r3, #6
 8002770:	e00a      	b.n	8002788 <HAL_GPIO_Init+0x228>
 8002772:	2305      	movs	r3, #5
 8002774:	e008      	b.n	8002788 <HAL_GPIO_Init+0x228>
 8002776:	2304      	movs	r3, #4
 8002778:	e006      	b.n	8002788 <HAL_GPIO_Init+0x228>
 800277a:	2303      	movs	r3, #3
 800277c:	e004      	b.n	8002788 <HAL_GPIO_Init+0x228>
 800277e:	2302      	movs	r3, #2
 8002780:	e002      	b.n	8002788 <HAL_GPIO_Init+0x228>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_GPIO_Init+0x228>
 8002786:	2300      	movs	r3, #0
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	f002 0203 	and.w	r2, r2, #3
 800278e:	0092      	lsls	r2, r2, #2
 8002790:	4093      	lsls	r3, r2
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002798:	4935      	ldr	r1, [pc, #212]	@ (8002870 <HAL_GPIO_Init+0x310>)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	3302      	adds	r3, #2
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002894 <HAL_GPIO_Init+0x334>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ca:	4a32      	ldr	r2, [pc, #200]	@ (8002894 <HAL_GPIO_Init+0x334>)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d0:	4b30      	ldr	r3, [pc, #192]	@ (8002894 <HAL_GPIO_Init+0x334>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f4:	4a27      	ldr	r2, [pc, #156]	@ (8002894 <HAL_GPIO_Init+0x334>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027fa:	4b26      	ldr	r3, [pc, #152]	@ (8002894 <HAL_GPIO_Init+0x334>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800281e:	4a1d      	ldr	r2, [pc, #116]	@ (8002894 <HAL_GPIO_Init+0x334>)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002824:	4b1b      	ldr	r3, [pc, #108]	@ (8002894 <HAL_GPIO_Init+0x334>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002848:	4a12      	ldr	r2, [pc, #72]	@ (8002894 <HAL_GPIO_Init+0x334>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3301      	adds	r3, #1
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	2b0f      	cmp	r3, #15
 8002858:	f67f ae90 	bls.w	800257c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3724      	adds	r7, #36	@ 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800
 8002870:	40013800 	.word	0x40013800
 8002874:	40020000 	.word	0x40020000
 8002878:	40020400 	.word	0x40020400
 800287c:	40020800 	.word	0x40020800
 8002880:	40020c00 	.word	0x40020c00
 8002884:	40021000 	.word	0x40021000
 8002888:	40021400 	.word	0x40021400
 800288c:	40021800 	.word	0x40021800
 8002890:	40021c00 	.word	0x40021c00
 8002894:	40013c00 	.word	0x40013c00

08002898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e267      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d075      	beq.n	80029a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028b6:	4b88      	ldr	r3, [pc, #544]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d00c      	beq.n	80028dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c2:	4b85      	ldr	r3, [pc, #532]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d112      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ce:	4b82      	ldr	r3, [pc, #520]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028da:	d10b      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	4b7e      	ldr	r3, [pc, #504]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d05b      	beq.n	80029a0 <HAL_RCC_OscConfig+0x108>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d157      	bne.n	80029a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e242      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028fc:	d106      	bne.n	800290c <HAL_RCC_OscConfig+0x74>
 80028fe:	4b76      	ldr	r3, [pc, #472]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a75      	ldr	r2, [pc, #468]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e01d      	b.n	8002948 <HAL_RCC_OscConfig+0xb0>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x98>
 8002916:	4b70      	ldr	r3, [pc, #448]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a6f      	ldr	r2, [pc, #444]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800291c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b6d      	ldr	r3, [pc, #436]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a6c      	ldr	r2, [pc, #432]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0xb0>
 8002930:	4b69      	ldr	r3, [pc, #420]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a68      	ldr	r2, [pc, #416]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b66      	ldr	r3, [pc, #408]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a65      	ldr	r2, [pc, #404]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe fbbc 	bl	80010cc <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002958:	f7fe fbb8 	bl	80010cc <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	@ 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e207      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0xc0>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe fba8 	bl	80010cc <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002980:	f7fe fba4 	bl	80010cc <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	@ 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e1f3      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002992:	4b51      	ldr	r3, [pc, #324]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0xe8>
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d063      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029ae:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b47      	ldr	r3, [pc, #284]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d11c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c6:	4b44      	ldr	r3, [pc, #272]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d116      	bne.n	8002a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d2:	4b41      	ldr	r3, [pc, #260]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_RCC_OscConfig+0x152>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e1c7      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ea:	4b3b      	ldr	r3, [pc, #236]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4937      	ldr	r1, [pc, #220]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	e03a      	b.n	8002a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a08:	4b34      	ldr	r3, [pc, #208]	@ (8002adc <HAL_RCC_OscConfig+0x244>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fb5d 	bl	80010cc <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a16:	f7fe fb59 	bl	80010cc <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e1a8      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a28:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a34:	4b28      	ldr	r3, [pc, #160]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4925      	ldr	r1, [pc, #148]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4a:	4b24      	ldr	r3, [pc, #144]	@ (8002adc <HAL_RCC_OscConfig+0x244>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe fb3c 	bl	80010cc <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a58:	f7fe fb38 	bl	80010cc <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e187      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d036      	beq.n	8002af0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d016      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ae0 <HAL_RCC_OscConfig+0x248>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7fe fb1c 	bl	80010cc <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a98:	f7fe fb18 	bl	80010cc <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e167      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x200>
 8002ab6:	e01b      	b.n	8002af0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab8:	4b09      	ldr	r3, [pc, #36]	@ (8002ae0 <HAL_RCC_OscConfig+0x248>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7fe fb05 	bl	80010cc <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	e00e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fb01 	bl	80010cc <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d907      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e150      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	42470000 	.word	0x42470000
 8002ae0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	4b88      	ldr	r3, [pc, #544]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ea      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8097 	beq.w	8002c2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b02:	4b81      	ldr	r3, [pc, #516]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10f      	bne.n	8002b2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	4b7d      	ldr	r3, [pc, #500]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	4a7c      	ldr	r2, [pc, #496]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b1e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2e:	4b77      	ldr	r3, [pc, #476]	@ (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d118      	bne.n	8002b6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3a:	4b74      	ldr	r3, [pc, #464]	@ (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a73      	ldr	r2, [pc, #460]	@ (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b46:	f7fe fac1 	bl	80010cc <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4e:	f7fe fabd 	bl	80010cc <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e10c      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b60:	4b6a      	ldr	r3, [pc, #424]	@ (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d106      	bne.n	8002b82 <HAL_RCC_OscConfig+0x2ea>
 8002b74:	4b64      	ldr	r3, [pc, #400]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b78:	4a63      	ldr	r2, [pc, #396]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b80:	e01c      	b.n	8002bbc <HAL_RCC_OscConfig+0x324>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x30c>
 8002b8a:	4b5f      	ldr	r3, [pc, #380]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8e:	4a5e      	ldr	r2, [pc, #376]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b96:	4b5c      	ldr	r3, [pc, #368]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9a:	4a5b      	ldr	r2, [pc, #364]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCC_OscConfig+0x324>
 8002ba4:	4b58      	ldr	r3, [pc, #352]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba8:	4a57      	ldr	r2, [pc, #348]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bb0:	4b55      	ldr	r3, [pc, #340]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb4:	4a54      	ldr	r2, [pc, #336]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	f023 0304 	bic.w	r3, r3, #4
 8002bba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d015      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7fe fa82 	bl	80010cc <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bca:	e00a      	b.n	8002be2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bcc:	f7fe fa7e 	bl	80010cc <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e0cb      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be2:	4b49      	ldr	r3, [pc, #292]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0ee      	beq.n	8002bcc <HAL_RCC_OscConfig+0x334>
 8002bee:	e014      	b.n	8002c1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf0:	f7fe fa6c 	bl	80010cc <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7fe fa68 	bl	80010cc <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e0b5      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1ee      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c20:	4b39      	ldr	r3, [pc, #228]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c24:	4a38      	ldr	r2, [pc, #224]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80a1 	beq.w	8002d78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c36:	4b34      	ldr	r3, [pc, #208]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d05c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d141      	bne.n	8002cce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b31      	ldr	r3, [pc, #196]	@ (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe fa3c 	bl	80010cc <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe fa38 	bl	80010cc <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e087      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	4b27      	ldr	r3, [pc, #156]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	019b      	lsls	r3, r3, #6
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	491b      	ldr	r1, [pc, #108]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7fe fa11 	bl	80010cc <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cae:	f7fe fa0d 	bl	80010cc <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e05c      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc0:	4b11      	ldr	r3, [pc, #68]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x416>
 8002ccc:	e054      	b.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cce:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7fe f9fa 	bl	80010cc <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fe f9f6 	bl	80010cc <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e045      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cee:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x444>
 8002cfa:	e03d      	b.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e038      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40007000 	.word	0x40007000
 8002d10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d14:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <HAL_RCC_OscConfig+0x4ec>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d028      	beq.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d121      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d11a      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d44:	4013      	ands	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d111      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d107      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800

08002d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0cc      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b68      	ldr	r3, [pc, #416]	@ (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d90c      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b65      	ldr	r3, [pc, #404]	@ (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b63      	ldr	r3, [pc, #396]	@ (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0b8      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ddc:	4b59      	ldr	r3, [pc, #356]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4a58      	ldr	r2, [pc, #352]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002de6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df4:	4b53      	ldr	r3, [pc, #332]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a52      	ldr	r2, [pc, #328]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e00:	4b50      	ldr	r3, [pc, #320]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	494d      	ldr	r1, [pc, #308]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d044      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	4b47      	ldr	r3, [pc, #284]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d119      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e07f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	4b3f      	ldr	r3, [pc, #252]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e06f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e56:	4b3b      	ldr	r3, [pc, #236]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e067      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e66:	4b37      	ldr	r3, [pc, #220]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f023 0203 	bic.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4934      	ldr	r1, [pc, #208]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e78:	f7fe f928 	bl	80010cc <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e80:	f7fe f924 	bl	80010cc <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e04f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	4b2b      	ldr	r3, [pc, #172]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 020c 	and.w	r2, r3, #12
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d1eb      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b25      	ldr	r3, [pc, #148]	@ (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d20c      	bcs.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b22      	ldr	r3, [pc, #136]	@ (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b20      	ldr	r3, [pc, #128]	@ (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e032      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002edc:	4b19      	ldr	r3, [pc, #100]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4916      	ldr	r1, [pc, #88]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002efa:	4b12      	ldr	r3, [pc, #72]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	490e      	ldr	r1, [pc, #56]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f0e:	f000 f821 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002f12:	4602      	mov	r2, r0
 8002f14:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	490a      	ldr	r1, [pc, #40]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	5ccb      	ldrb	r3, [r1, r3]
 8002f22:	fa22 f303 	lsr.w	r3, r2, r3
 8002f26:	4a09      	ldr	r2, [pc, #36]	@ (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f2a:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe f888 	bl	8001044 <HAL_InitTick>

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023c00 	.word	0x40023c00
 8002f44:	40023800 	.word	0x40023800
 8002f48:	08011df4 	.word	0x08011df4
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	20000004 	.word	0x20000004

08002f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f58:	b094      	sub	sp, #80	@ 0x50
 8002f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f6c:	4b79      	ldr	r3, [pc, #484]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d00d      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x40>
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	f200 80e1 	bhi.w	8003140 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x34>
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f86:	e0db      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f88:	4b73      	ldr	r3, [pc, #460]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f8c:	e0db      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f8e:	4b73      	ldr	r3, [pc, #460]	@ (800315c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f92:	e0d8      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f94:	4b6f      	ldr	r3, [pc, #444]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f9e:	4b6d      	ldr	r3, [pc, #436]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d063      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002faa:	4b6a      	ldr	r3, [pc, #424]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	099b      	lsrs	r3, r3, #6
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002fc6:	4622      	mov	r2, r4
 8002fc8:	462b      	mov	r3, r5
 8002fca:	f04f 0000 	mov.w	r0, #0
 8002fce:	f04f 0100 	mov.w	r1, #0
 8002fd2:	0159      	lsls	r1, r3, #5
 8002fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd8:	0150      	lsls	r0, r2, #5
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4621      	mov	r1, r4
 8002fe0:	1a51      	subs	r1, r2, r1
 8002fe2:	6139      	str	r1, [r7, #16]
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ff8:	4659      	mov	r1, fp
 8002ffa:	018b      	lsls	r3, r1, #6
 8002ffc:	4651      	mov	r1, sl
 8002ffe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003002:	4651      	mov	r1, sl
 8003004:	018a      	lsls	r2, r1, #6
 8003006:	4651      	mov	r1, sl
 8003008:	ebb2 0801 	subs.w	r8, r2, r1
 800300c:	4659      	mov	r1, fp
 800300e:	eb63 0901 	sbc.w	r9, r3, r1
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800301e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003026:	4690      	mov	r8, r2
 8003028:	4699      	mov	r9, r3
 800302a:	4623      	mov	r3, r4
 800302c:	eb18 0303 	adds.w	r3, r8, r3
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	462b      	mov	r3, r5
 8003034:	eb49 0303 	adc.w	r3, r9, r3
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003046:	4629      	mov	r1, r5
 8003048:	024b      	lsls	r3, r1, #9
 800304a:	4621      	mov	r1, r4
 800304c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003050:	4621      	mov	r1, r4
 8003052:	024a      	lsls	r2, r1, #9
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800305a:	2200      	movs	r2, #0
 800305c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800305e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003060:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003064:	f7fd f904 	bl	8000270 <__aeabi_uldivmod>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4613      	mov	r3, r2
 800306e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003070:	e058      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003072:	4b38      	ldr	r3, [pc, #224]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	099b      	lsrs	r3, r3, #6
 8003078:	2200      	movs	r2, #0
 800307a:	4618      	mov	r0, r3
 800307c:	4611      	mov	r1, r2
 800307e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003082:	623b      	str	r3, [r7, #32]
 8003084:	2300      	movs	r3, #0
 8003086:	627b      	str	r3, [r7, #36]	@ 0x24
 8003088:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800308c:	4642      	mov	r2, r8
 800308e:	464b      	mov	r3, r9
 8003090:	f04f 0000 	mov.w	r0, #0
 8003094:	f04f 0100 	mov.w	r1, #0
 8003098:	0159      	lsls	r1, r3, #5
 800309a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800309e:	0150      	lsls	r0, r2, #5
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4641      	mov	r1, r8
 80030a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80030aa:	4649      	mov	r1, r9
 80030ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030c4:	ebb2 040a 	subs.w	r4, r2, sl
 80030c8:	eb63 050b 	sbc.w	r5, r3, fp
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	00eb      	lsls	r3, r5, #3
 80030d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030da:	00e2      	lsls	r2, r4, #3
 80030dc:	4614      	mov	r4, r2
 80030de:	461d      	mov	r5, r3
 80030e0:	4643      	mov	r3, r8
 80030e2:	18e3      	adds	r3, r4, r3
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	464b      	mov	r3, r9
 80030e8:	eb45 0303 	adc.w	r3, r5, r3
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030fa:	4629      	mov	r1, r5
 80030fc:	028b      	lsls	r3, r1, #10
 80030fe:	4621      	mov	r1, r4
 8003100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003104:	4621      	mov	r1, r4
 8003106:	028a      	lsls	r2, r1, #10
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800310e:	2200      	movs	r2, #0
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	61fa      	str	r2, [r7, #28]
 8003114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003118:	f7fd f8aa 	bl	8000270 <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4613      	mov	r3, r2
 8003122:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003124:	4b0b      	ldr	r3, [pc, #44]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	3301      	adds	r3, #1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003134:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003138:	fbb2 f3f3 	udiv	r3, r2, r3
 800313c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800313e:	e002      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b05      	ldr	r3, [pc, #20]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x204>)
 8003142:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003148:	4618      	mov	r0, r3
 800314a:	3750      	adds	r7, #80	@ 0x50
 800314c:	46bd      	mov	sp, r7
 800314e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800
 8003158:	00f42400 	.word	0x00f42400
 800315c:	007a1200 	.word	0x007a1200

08003160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003164:	4b03      	ldr	r3, [pc, #12]	@ (8003174 <HAL_RCC_GetHCLKFreq+0x14>)
 8003166:	681b      	ldr	r3, [r3, #0]
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000000 	.word	0x20000000

08003178 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800317e:	4b87      	ldr	r3, [pc, #540]	@ (800339c <MX_LWIP_Init+0x224>)
 8003180:	22c0      	movs	r2, #192	@ 0xc0
 8003182:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003184:	4b85      	ldr	r3, [pc, #532]	@ (800339c <MX_LWIP_Init+0x224>)
 8003186:	22a8      	movs	r2, #168	@ 0xa8
 8003188:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800318a:	4b84      	ldr	r3, [pc, #528]	@ (800339c <MX_LWIP_Init+0x224>)
 800318c:	2201      	movs	r2, #1
 800318e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 47;
 8003190:	4b82      	ldr	r3, [pc, #520]	@ (800339c <MX_LWIP_Init+0x224>)
 8003192:	222f      	movs	r2, #47	@ 0x2f
 8003194:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003196:	4b82      	ldr	r3, [pc, #520]	@ (80033a0 <MX_LWIP_Init+0x228>)
 8003198:	22ff      	movs	r2, #255	@ 0xff
 800319a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800319c:	4b80      	ldr	r3, [pc, #512]	@ (80033a0 <MX_LWIP_Init+0x228>)
 800319e:	22ff      	movs	r2, #255	@ 0xff
 80031a0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80031a2:	4b7f      	ldr	r3, [pc, #508]	@ (80033a0 <MX_LWIP_Init+0x228>)
 80031a4:	22ff      	movs	r2, #255	@ 0xff
 80031a6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80031a8:	4b7d      	ldr	r3, [pc, #500]	@ (80033a0 <MX_LWIP_Init+0x228>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80031ae:	4b7d      	ldr	r3, [pc, #500]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80031b4:	4b7b      	ldr	r3, [pc, #492]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80031ba:	4b7a      	ldr	r3, [pc, #488]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 80031bc:	2200      	movs	r2, #0
 80031be:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80031c0:	4b78      	ldr	r3, [pc, #480]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 80031c6:	f000 fcfa 	bl	8003bbe <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80031ca:	4b74      	ldr	r3, [pc, #464]	@ (800339c <MX_LWIP_Init+0x224>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	061a      	lsls	r2, r3, #24
 80031d0:	4b72      	ldr	r3, [pc, #456]	@ (800339c <MX_LWIP_Init+0x224>)
 80031d2:	785b      	ldrb	r3, [r3, #1]
 80031d4:	041b      	lsls	r3, r3, #16
 80031d6:	431a      	orrs	r2, r3
 80031d8:	4b70      	ldr	r3, [pc, #448]	@ (800339c <MX_LWIP_Init+0x224>)
 80031da:	789b      	ldrb	r3, [r3, #2]
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	4313      	orrs	r3, r2
 80031e0:	4a6e      	ldr	r2, [pc, #440]	@ (800339c <MX_LWIP_Init+0x224>)
 80031e2:	78d2      	ldrb	r2, [r2, #3]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	061a      	lsls	r2, r3, #24
 80031e8:	4b6c      	ldr	r3, [pc, #432]	@ (800339c <MX_LWIP_Init+0x224>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	0619      	lsls	r1, r3, #24
 80031ee:	4b6b      	ldr	r3, [pc, #428]	@ (800339c <MX_LWIP_Init+0x224>)
 80031f0:	785b      	ldrb	r3, [r3, #1]
 80031f2:	041b      	lsls	r3, r3, #16
 80031f4:	4319      	orrs	r1, r3
 80031f6:	4b69      	ldr	r3, [pc, #420]	@ (800339c <MX_LWIP_Init+0x224>)
 80031f8:	789b      	ldrb	r3, [r3, #2]
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	430b      	orrs	r3, r1
 80031fe:	4967      	ldr	r1, [pc, #412]	@ (800339c <MX_LWIP_Init+0x224>)
 8003200:	78c9      	ldrb	r1, [r1, #3]
 8003202:	430b      	orrs	r3, r1
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800320a:	431a      	orrs	r2, r3
 800320c:	4b63      	ldr	r3, [pc, #396]	@ (800339c <MX_LWIP_Init+0x224>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	0619      	lsls	r1, r3, #24
 8003212:	4b62      	ldr	r3, [pc, #392]	@ (800339c <MX_LWIP_Init+0x224>)
 8003214:	785b      	ldrb	r3, [r3, #1]
 8003216:	041b      	lsls	r3, r3, #16
 8003218:	4319      	orrs	r1, r3
 800321a:	4b60      	ldr	r3, [pc, #384]	@ (800339c <MX_LWIP_Init+0x224>)
 800321c:	789b      	ldrb	r3, [r3, #2]
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	430b      	orrs	r3, r1
 8003222:	495e      	ldr	r1, [pc, #376]	@ (800339c <MX_LWIP_Init+0x224>)
 8003224:	78c9      	ldrb	r1, [r1, #3]
 8003226:	430b      	orrs	r3, r1
 8003228:	0a1b      	lsrs	r3, r3, #8
 800322a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800322e:	431a      	orrs	r2, r3
 8003230:	4b5a      	ldr	r3, [pc, #360]	@ (800339c <MX_LWIP_Init+0x224>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	0619      	lsls	r1, r3, #24
 8003236:	4b59      	ldr	r3, [pc, #356]	@ (800339c <MX_LWIP_Init+0x224>)
 8003238:	785b      	ldrb	r3, [r3, #1]
 800323a:	041b      	lsls	r3, r3, #16
 800323c:	4319      	orrs	r1, r3
 800323e:	4b57      	ldr	r3, [pc, #348]	@ (800339c <MX_LWIP_Init+0x224>)
 8003240:	789b      	ldrb	r3, [r3, #2]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	430b      	orrs	r3, r1
 8003246:	4955      	ldr	r1, [pc, #340]	@ (800339c <MX_LWIP_Init+0x224>)
 8003248:	78c9      	ldrb	r1, [r1, #3]
 800324a:	430b      	orrs	r3, r1
 800324c:	0e1b      	lsrs	r3, r3, #24
 800324e:	4313      	orrs	r3, r2
 8003250:	4a55      	ldr	r2, [pc, #340]	@ (80033a8 <MX_LWIP_Init+0x230>)
 8003252:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003254:	4b52      	ldr	r3, [pc, #328]	@ (80033a0 <MX_LWIP_Init+0x228>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	061a      	lsls	r2, r3, #24
 800325a:	4b51      	ldr	r3, [pc, #324]	@ (80033a0 <MX_LWIP_Init+0x228>)
 800325c:	785b      	ldrb	r3, [r3, #1]
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	431a      	orrs	r2, r3
 8003262:	4b4f      	ldr	r3, [pc, #316]	@ (80033a0 <MX_LWIP_Init+0x228>)
 8003264:	789b      	ldrb	r3, [r3, #2]
 8003266:	021b      	lsls	r3, r3, #8
 8003268:	4313      	orrs	r3, r2
 800326a:	4a4d      	ldr	r2, [pc, #308]	@ (80033a0 <MX_LWIP_Init+0x228>)
 800326c:	78d2      	ldrb	r2, [r2, #3]
 800326e:	4313      	orrs	r3, r2
 8003270:	061a      	lsls	r2, r3, #24
 8003272:	4b4b      	ldr	r3, [pc, #300]	@ (80033a0 <MX_LWIP_Init+0x228>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	0619      	lsls	r1, r3, #24
 8003278:	4b49      	ldr	r3, [pc, #292]	@ (80033a0 <MX_LWIP_Init+0x228>)
 800327a:	785b      	ldrb	r3, [r3, #1]
 800327c:	041b      	lsls	r3, r3, #16
 800327e:	4319      	orrs	r1, r3
 8003280:	4b47      	ldr	r3, [pc, #284]	@ (80033a0 <MX_LWIP_Init+0x228>)
 8003282:	789b      	ldrb	r3, [r3, #2]
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	430b      	orrs	r3, r1
 8003288:	4945      	ldr	r1, [pc, #276]	@ (80033a0 <MX_LWIP_Init+0x228>)
 800328a:	78c9      	ldrb	r1, [r1, #3]
 800328c:	430b      	orrs	r3, r1
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003294:	431a      	orrs	r2, r3
 8003296:	4b42      	ldr	r3, [pc, #264]	@ (80033a0 <MX_LWIP_Init+0x228>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	0619      	lsls	r1, r3, #24
 800329c:	4b40      	ldr	r3, [pc, #256]	@ (80033a0 <MX_LWIP_Init+0x228>)
 800329e:	785b      	ldrb	r3, [r3, #1]
 80032a0:	041b      	lsls	r3, r3, #16
 80032a2:	4319      	orrs	r1, r3
 80032a4:	4b3e      	ldr	r3, [pc, #248]	@ (80033a0 <MX_LWIP_Init+0x228>)
 80032a6:	789b      	ldrb	r3, [r3, #2]
 80032a8:	021b      	lsls	r3, r3, #8
 80032aa:	430b      	orrs	r3, r1
 80032ac:	493c      	ldr	r1, [pc, #240]	@ (80033a0 <MX_LWIP_Init+0x228>)
 80032ae:	78c9      	ldrb	r1, [r1, #3]
 80032b0:	430b      	orrs	r3, r1
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80032b8:	431a      	orrs	r2, r3
 80032ba:	4b39      	ldr	r3, [pc, #228]	@ (80033a0 <MX_LWIP_Init+0x228>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	0619      	lsls	r1, r3, #24
 80032c0:	4b37      	ldr	r3, [pc, #220]	@ (80033a0 <MX_LWIP_Init+0x228>)
 80032c2:	785b      	ldrb	r3, [r3, #1]
 80032c4:	041b      	lsls	r3, r3, #16
 80032c6:	4319      	orrs	r1, r3
 80032c8:	4b35      	ldr	r3, [pc, #212]	@ (80033a0 <MX_LWIP_Init+0x228>)
 80032ca:	789b      	ldrb	r3, [r3, #2]
 80032cc:	021b      	lsls	r3, r3, #8
 80032ce:	430b      	orrs	r3, r1
 80032d0:	4933      	ldr	r1, [pc, #204]	@ (80033a0 <MX_LWIP_Init+0x228>)
 80032d2:	78c9      	ldrb	r1, [r1, #3]
 80032d4:	430b      	orrs	r3, r1
 80032d6:	0e1b      	lsrs	r3, r3, #24
 80032d8:	4313      	orrs	r3, r2
 80032da:	4a34      	ldr	r2, [pc, #208]	@ (80033ac <MX_LWIP_Init+0x234>)
 80032dc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80032de:	4b31      	ldr	r3, [pc, #196]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	061a      	lsls	r2, r3, #24
 80032e4:	4b2f      	ldr	r3, [pc, #188]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 80032e6:	785b      	ldrb	r3, [r3, #1]
 80032e8:	041b      	lsls	r3, r3, #16
 80032ea:	431a      	orrs	r2, r3
 80032ec:	4b2d      	ldr	r3, [pc, #180]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 80032ee:	789b      	ldrb	r3, [r3, #2]
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	4313      	orrs	r3, r2
 80032f4:	4a2b      	ldr	r2, [pc, #172]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 80032f6:	78d2      	ldrb	r2, [r2, #3]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	061a      	lsls	r2, r3, #24
 80032fc:	4b29      	ldr	r3, [pc, #164]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	0619      	lsls	r1, r3, #24
 8003302:	4b28      	ldr	r3, [pc, #160]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 8003304:	785b      	ldrb	r3, [r3, #1]
 8003306:	041b      	lsls	r3, r3, #16
 8003308:	4319      	orrs	r1, r3
 800330a:	4b26      	ldr	r3, [pc, #152]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 800330c:	789b      	ldrb	r3, [r3, #2]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	430b      	orrs	r3, r1
 8003312:	4924      	ldr	r1, [pc, #144]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 8003314:	78c9      	ldrb	r1, [r1, #3]
 8003316:	430b      	orrs	r3, r1
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800331e:	431a      	orrs	r2, r3
 8003320:	4b20      	ldr	r3, [pc, #128]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	0619      	lsls	r1, r3, #24
 8003326:	4b1f      	ldr	r3, [pc, #124]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 8003328:	785b      	ldrb	r3, [r3, #1]
 800332a:	041b      	lsls	r3, r3, #16
 800332c:	4319      	orrs	r1, r3
 800332e:	4b1d      	ldr	r3, [pc, #116]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 8003330:	789b      	ldrb	r3, [r3, #2]
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	430b      	orrs	r3, r1
 8003336:	491b      	ldr	r1, [pc, #108]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 8003338:	78c9      	ldrb	r1, [r1, #3]
 800333a:	430b      	orrs	r3, r1
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003342:	431a      	orrs	r2, r3
 8003344:	4b17      	ldr	r3, [pc, #92]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	0619      	lsls	r1, r3, #24
 800334a:	4b16      	ldr	r3, [pc, #88]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 800334c:	785b      	ldrb	r3, [r3, #1]
 800334e:	041b      	lsls	r3, r3, #16
 8003350:	4319      	orrs	r1, r3
 8003352:	4b14      	ldr	r3, [pc, #80]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 8003354:	789b      	ldrb	r3, [r3, #2]
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	430b      	orrs	r3, r1
 800335a:	4912      	ldr	r1, [pc, #72]	@ (80033a4 <MX_LWIP_Init+0x22c>)
 800335c:	78c9      	ldrb	r1, [r1, #3]
 800335e:	430b      	orrs	r3, r1
 8003360:	0e1b      	lsrs	r3, r3, #24
 8003362:	4313      	orrs	r3, r2
 8003364:	4a12      	ldr	r2, [pc, #72]	@ (80033b0 <MX_LWIP_Init+0x238>)
 8003366:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003368:	4b12      	ldr	r3, [pc, #72]	@ (80033b4 <MX_LWIP_Init+0x23c>)
 800336a:	9302      	str	r3, [sp, #8]
 800336c:	4b12      	ldr	r3, [pc, #72]	@ (80033b8 <MX_LWIP_Init+0x240>)
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	2300      	movs	r3, #0
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	4b0e      	ldr	r3, [pc, #56]	@ (80033b0 <MX_LWIP_Init+0x238>)
 8003376:	4a0d      	ldr	r2, [pc, #52]	@ (80033ac <MX_LWIP_Init+0x234>)
 8003378:	490b      	ldr	r1, [pc, #44]	@ (80033a8 <MX_LWIP_Init+0x230>)
 800337a:	4810      	ldr	r0, [pc, #64]	@ (80033bc <MX_LWIP_Init+0x244>)
 800337c:	f001 f90a 	bl	8004594 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003380:	480e      	ldr	r0, [pc, #56]	@ (80033bc <MX_LWIP_Init+0x244>)
 8003382:	f001 fab9 	bl	80048f8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003386:	480d      	ldr	r0, [pc, #52]	@ (80033bc <MX_LWIP_Init+0x244>)
 8003388:	f001 fac6 	bl	8004918 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800338c:	490c      	ldr	r1, [pc, #48]	@ (80033c0 <MX_LWIP_Init+0x248>)
 800338e:	480b      	ldr	r0, [pc, #44]	@ (80033bc <MX_LWIP_Init+0x244>)
 8003390:	f001 fbc4 	bl	8004b1c <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200000f4 	.word	0x200000f4
 80033a0:	200000f8 	.word	0x200000f8
 80033a4:	200000fc 	.word	0x200000fc
 80033a8:	200000e8 	.word	0x200000e8
 80033ac:	200000ec 	.word	0x200000ec
 80033b0:	200000f0 	.word	0x200000f0
 80033b4:	0800e1e1 	.word	0x0800e1e1
 80033b8:	080036e1 	.word	0x080036e1
 80033bc:	200000b4 	.word	0x200000b4
 80033c0:	08003415 	.word	0x08003415

080033c4 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80033cc:	f7fd fe7e 	bl	80010cc <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b08      	ldr	r3, [pc, #32]	@ (80033f4 <Ethernet_Link_Periodic_Handle+0x30>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b63      	cmp	r3, #99	@ 0x63
 80033da:	d907      	bls.n	80033ec <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80033dc:	f7fd fe76 	bl	80010cc <HAL_GetTick>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4a04      	ldr	r2, [pc, #16]	@ (80033f4 <Ethernet_Link_Periodic_Handle+0x30>)
 80033e4:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fabe 	bl	8003968 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	200000b0 	.word	0x200000b0

080033f8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80033fc:	4804      	ldr	r0, [pc, #16]	@ (8003410 <MX_LWIP_Process+0x18>)
 80033fe:	f000 f94f 	bl	80036a0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8003402:	f008 fb01 	bl	800ba08 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8003406:	4802      	ldr	r0, [pc, #8]	@ (8003410 <MX_LWIP_Process+0x18>)
 8003408:	f7ff ffdc 	bl	80033c4 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800340c:	bf00      	nop
 800340e:	bd80      	pop	{r7, pc}
 8003410:	200000b4 	.word	0x200000b4

08003414 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003434:	4b44      	ldr	r3, [pc, #272]	@ (8003548 <low_level_init+0x120>)
 8003436:	4a45      	ldr	r2, [pc, #276]	@ (800354c <low_level_init+0x124>)
 8003438:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800343a:	2300      	movs	r3, #0
 800343c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800343e:	2380      	movs	r3, #128	@ 0x80
 8003440:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003442:	23e1      	movs	r3, #225	@ 0xe1
 8003444:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003446:	2300      	movs	r3, #0
 8003448:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800344a:	2300      	movs	r3, #0
 800344c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800344e:	2300      	movs	r3, #0
 8003450:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003452:	4a3d      	ldr	r2, [pc, #244]	@ (8003548 <low_level_init+0x120>)
 8003454:	f107 0308 	add.w	r3, r7, #8
 8003458:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800345a:	4b3b      	ldr	r3, [pc, #236]	@ (8003548 <low_level_init+0x120>)
 800345c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003460:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003462:	4b39      	ldr	r3, [pc, #228]	@ (8003548 <low_level_init+0x120>)
 8003464:	4a3a      	ldr	r2, [pc, #232]	@ (8003550 <low_level_init+0x128>)
 8003466:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003468:	4b37      	ldr	r3, [pc, #220]	@ (8003548 <low_level_init+0x120>)
 800346a:	4a3a      	ldr	r2, [pc, #232]	@ (8003554 <low_level_init+0x12c>)
 800346c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800346e:	4b36      	ldr	r3, [pc, #216]	@ (8003548 <low_level_init+0x120>)
 8003470:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8003474:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003476:	4834      	ldr	r0, [pc, #208]	@ (8003548 <low_level_init+0x120>)
 8003478:	f7fd ff3e 	bl	80012f8 <HAL_ETH_Init>
 800347c:	4603      	mov	r3, r0
 800347e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003480:	2238      	movs	r2, #56	@ 0x38
 8003482:	2100      	movs	r1, #0
 8003484:	4834      	ldr	r0, [pc, #208]	@ (8003558 <low_level_init+0x130>)
 8003486:	f00b f8e6 	bl	800e656 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800348a:	4b33      	ldr	r3, [pc, #204]	@ (8003558 <low_level_init+0x130>)
 800348c:	2221      	movs	r2, #33	@ 0x21
 800348e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003490:	4b31      	ldr	r3, [pc, #196]	@ (8003558 <low_level_init+0x130>)
 8003492:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003496:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003498:	4b2f      	ldr	r3, [pc, #188]	@ (8003558 <low_level_init+0x130>)
 800349a:	2200      	movs	r2, #0
 800349c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800349e:	482f      	ldr	r0, [pc, #188]	@ (800355c <low_level_init+0x134>)
 80034a0:	f000 ff40 	bl	8004324 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2206      	movs	r2, #6
 80034a8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80034ac:	4b26      	ldr	r3, [pc, #152]	@ (8003548 <low_level_init+0x120>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	781a      	ldrb	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80034b8:	4b23      	ldr	r3, [pc, #140]	@ (8003548 <low_level_init+0x120>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	785a      	ldrb	r2, [r3, #1]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80034c4:	4b20      	ldr	r3, [pc, #128]	@ (8003548 <low_level_init+0x120>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	789a      	ldrb	r2, [r3, #2]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80034d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003548 <low_level_init+0x120>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	78da      	ldrb	r2, [r3, #3]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80034dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003548 <low_level_init+0x120>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	791a      	ldrb	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80034e8:	4b17      	ldr	r3, [pc, #92]	@ (8003548 <low_level_init+0x120>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	795a      	ldrb	r2, [r3, #5]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80034fa:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003502:	f043 030a 	orr.w	r3, r3, #10
 8003506:	b2da      	uxtb	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800350e:	4914      	ldr	r1, [pc, #80]	@ (8003560 <low_level_init+0x138>)
 8003510:	4814      	ldr	r0, [pc, #80]	@ (8003564 <low_level_init+0x13c>)
 8003512:	f7fd fc6e 	bl	8000df2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8003516:	4813      	ldr	r0, [pc, #76]	@ (8003564 <low_level_init+0x13c>)
 8003518:	f7fd fc9d 	bl	8000e56 <LAN8742_Init>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d006      	beq.n	8003530 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f001 faca 	bl	8004abc <netif_set_link_down>
    netif_set_down(netif);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f001 fa61 	bl	80049f0 <netif_set_down>
 800352e:	e008      	b.n	8003542 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d103      	bne.n	800353e <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fa16 	bl	8003968 <ethernet_link_check_state>
 800353c:	e001      	b.n	8003542 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800353e:	f7fd f8ef 	bl	8000720 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20004bcc 	.word	0x20004bcc
 800354c:	40028000 	.word	0x40028000
 8003550:	20004b2c 	.word	0x20004b2c
 8003554:	20004a8c 	.word	0x20004a8c
 8003558:	20004c7c 	.word	0x20004c7c
 800355c:	08011e04 	.word	0x08011e04
 8003560:	2000000c 	.word	0x2000000c
 8003564:	20004cb4 	.word	0x20004cb4

08003568 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b092      	sub	sp, #72	@ 0x48
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003580:	f107 030c 	add.w	r3, r7, #12
 8003584:	2230      	movs	r2, #48	@ 0x30
 8003586:	2100      	movs	r1, #0
 8003588:	4618      	mov	r0, r3
 800358a:	f00b f864 	bl	800e656 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800358e:	f107 030c 	add.w	r3, r7, #12
 8003592:	2230      	movs	r2, #48	@ 0x30
 8003594:	2100      	movs	r1, #0
 8003596:	4618      	mov	r0, r3
 8003598:	f00b f85d 	bl	800e656 <memset>

  for(q = p; q != NULL; q = q->next)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	643b      	str	r3, [r7, #64]	@ 0x40
 80035a0:	e045      	b.n	800362e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80035a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d902      	bls.n	80035ae <low_level_output+0x46>
      return ERR_IF;
 80035a8:	f06f 030b 	mvn.w	r3, #11
 80035ac:	e055      	b.n	800365a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80035ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035b0:	6859      	ldr	r1, [r3, #4]
 80035b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035b4:	4613      	mov	r3, r2
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	3348      	adds	r3, #72	@ 0x48
 80035be:	443b      	add	r3, r7
 80035c0:	3b3c      	subs	r3, #60	@ 0x3c
 80035c2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80035c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035c6:	895b      	ldrh	r3, [r3, #10]
 80035c8:	4619      	mov	r1, r3
 80035ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	3348      	adds	r3, #72	@ 0x48
 80035d6:	443b      	add	r3, r7
 80035d8:	3b38      	subs	r3, #56	@ 0x38
 80035da:	6019      	str	r1, [r3, #0]

    if(i>0)
 80035dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d011      	beq.n	8003606 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80035e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035e4:	1e5a      	subs	r2, r3, #1
 80035e6:	f107 000c 	add.w	r0, r7, #12
 80035ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80035ec:	460b      	mov	r3, r1
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	440b      	add	r3, r1
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	18c1      	adds	r1, r0, r3
 80035f6:	4613      	mov	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	3348      	adds	r3, #72	@ 0x48
 8003600:	443b      	add	r3, r7
 8003602:	3b34      	subs	r3, #52	@ 0x34
 8003604:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800360e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003610:	4613      	mov	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	3348      	adds	r3, #72	@ 0x48
 800361a:	443b      	add	r3, r7
 800361c:	3b34      	subs	r3, #52	@ 0x34
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003624:	3301      	adds	r3, #1
 8003626:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8003628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	643b      	str	r3, [r7, #64]	@ 0x40
 800362e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1b6      	bne.n	80035a2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	891b      	ldrh	r3, [r3, #8]
 8003638:	461a      	mov	r2, r3
 800363a:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <low_level_output+0xfc>)
 800363c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800363e:	4a09      	ldr	r2, [pc, #36]	@ (8003664 <low_level_output+0xfc>)
 8003640:	f107 030c 	add.w	r3, r7, #12
 8003644:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003646:	4a07      	ldr	r2, [pc, #28]	@ (8003664 <low_level_output+0xfc>)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800364c:	2214      	movs	r2, #20
 800364e:	4905      	ldr	r1, [pc, #20]	@ (8003664 <low_level_output+0xfc>)
 8003650:	4805      	ldr	r0, [pc, #20]	@ (8003668 <low_level_output+0x100>)
 8003652:	f7fd ffa5 	bl	80015a0 <HAL_ETH_Transmit>

  return errval;
 8003656:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800365a:	4618      	mov	r0, r3
 800365c:	3748      	adds	r7, #72	@ 0x48
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20004c7c 	.word	0x20004c7c
 8003668:	20004bcc 	.word	0x20004bcc

0800366c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003678:	4b07      	ldr	r3, [pc, #28]	@ (8003698 <low_level_input+0x2c>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d105      	bne.n	800368c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003680:	f107 030c 	add.w	r3, r7, #12
 8003684:	4619      	mov	r1, r3
 8003686:	4805      	ldr	r0, [pc, #20]	@ (800369c <low_level_input+0x30>)
 8003688:	f7fe f81e 	bl	80016c8 <HAL_ETH_ReadData>
  }

  return p;
 800368c:	68fb      	ldr	r3, [r7, #12]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20004a88 	.word	0x20004a88
 800369c:	20004bcc 	.word	0x20004bcc

080036a0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ffdd 	bl	800366c <low_level_input>
 80036b2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	4798      	blx	r3
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f001 fda6 	bl	800521c <pbuf_free>
      }
    }
  } while(p!=NULL);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1ea      	bne.n	80036ac <ethernetif_input+0xc>
}
 80036d6:	bf00      	nop
 80036d8:	bf00      	nop
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <ethernetif_init+0x1c>
 80036ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003728 <ethernetif_init+0x48>)
 80036f0:	f240 126f 	movw	r2, #367	@ 0x16f
 80036f4:	490d      	ldr	r1, [pc, #52]	@ (800372c <ethernetif_init+0x4c>)
 80036f6:	480e      	ldr	r0, [pc, #56]	@ (8003730 <ethernetif_init+0x50>)
 80036f8:	f00a ff48 	bl	800e58c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2273      	movs	r2, #115	@ 0x73
 8003700:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2274      	movs	r2, #116	@ 0x74
 8003708:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a09      	ldr	r2, [pc, #36]	@ (8003734 <ethernetif_init+0x54>)
 8003710:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a08      	ldr	r2, [pc, #32]	@ (8003738 <ethernetif_init+0x58>)
 8003716:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff fe85 	bl	8003428 <low_level_init>

  return ERR_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	0800f414 	.word	0x0800f414
 800372c:	0800f430 	.word	0x0800f430
 8003730:	0800f440 	.word	0x0800f440
 8003734:	0800c699 	.word	0x0800c699
 8003738:	08003569 	.word	0x08003569

0800373c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003748:	68f9      	ldr	r1, [r7, #12]
 800374a:	4807      	ldr	r0, [pc, #28]	@ (8003768 <pbuf_free_custom+0x2c>)
 800374c:	f000 fecc 	bl	80044e8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003750:	4b06      	ldr	r3, [pc, #24]	@ (800376c <pbuf_free_custom+0x30>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d102      	bne.n	800375e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003758:	4b04      	ldr	r3, [pc, #16]	@ (800376c <pbuf_free_custom+0x30>)
 800375a:	2200      	movs	r2, #0
 800375c:	701a      	strb	r2, [r3, #0]
  }
}
 800375e:	bf00      	nop
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	08011e04 	.word	0x08011e04
 800376c:	20004a88 	.word	0x20004a88

08003770 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003774:	f7fd fcaa 	bl	80010cc <HAL_GetTick>
 8003778:	4603      	mov	r3, r0
}
 800377a:	4618      	mov	r0, r3
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08e      	sub	sp, #56	@ 0x38
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a46      	ldr	r2, [pc, #280]	@ (80038b8 <HAL_ETH_MspInit+0x138>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	f040 8085 	bne.w	80038ae <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80037a4:	2300      	movs	r3, #0
 80037a6:	623b      	str	r3, [r7, #32]
 80037a8:	4b44      	ldr	r3, [pc, #272]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 80037aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ac:	4a43      	ldr	r2, [pc, #268]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 80037ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80037b4:	4b41      	ldr	r3, [pc, #260]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037bc:	623b      	str	r3, [r7, #32]
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	2300      	movs	r3, #0
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	4b3d      	ldr	r3, [pc, #244]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 80037c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c8:	4a3c      	ldr	r2, [pc, #240]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 80037ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80037d0:	4b3a      	ldr	r3, [pc, #232]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	2300      	movs	r3, #0
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	4b36      	ldr	r3, [pc, #216]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 80037e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e4:	4a35      	ldr	r2, [pc, #212]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 80037e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ec:	4b33      	ldr	r3, [pc, #204]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 80037ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	4b2f      	ldr	r3, [pc, #188]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003800:	4a2e      	ldr	r2, [pc, #184]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	6313      	str	r3, [r2, #48]	@ 0x30
 8003808:	4b2c      	ldr	r3, [pc, #176]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003814:	2300      	movs	r3, #0
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	4b28      	ldr	r3, [pc, #160]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381c:	4a27      	ldr	r2, [pc, #156]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	6313      	str	r3, [r2, #48]	@ 0x30
 8003824:	4b25      	ldr	r3, [pc, #148]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 8003826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	4b21      	ldr	r3, [pc, #132]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 8003836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003838:	4a20      	ldr	r2, [pc, #128]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 800383a:	f043 0302 	orr.w	r3, r3, #2
 800383e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003840:	4b1e      	ldr	r3, [pc, #120]	@ (80038bc <HAL_ETH_MspInit+0x13c>)
 8003842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800384c:	2332      	movs	r3, #50	@ 0x32
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003850:	2302      	movs	r3, #2
 8003852:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003854:	2300      	movs	r3, #0
 8003856:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003858:	2303      	movs	r3, #3
 800385a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800385c:	230b      	movs	r3, #11
 800385e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003860:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003864:	4619      	mov	r1, r3
 8003866:	4816      	ldr	r0, [pc, #88]	@ (80038c0 <HAL_ETH_MspInit+0x140>)
 8003868:	f7fe fe7a 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800386c:	2386      	movs	r3, #134	@ 0x86
 800386e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003870:	2302      	movs	r3, #2
 8003872:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003874:	2300      	movs	r3, #0
 8003876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003878:	2303      	movs	r3, #3
 800387a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800387c:	230b      	movs	r3, #11
 800387e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003880:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003884:	4619      	mov	r1, r3
 8003886:	480f      	ldr	r0, [pc, #60]	@ (80038c4 <HAL_ETH_MspInit+0x144>)
 8003888:	f7fe fe6a 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800388c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003890:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003892:	2302      	movs	r3, #2
 8003894:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003896:	2300      	movs	r3, #0
 8003898:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389a:	2303      	movs	r3, #3
 800389c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800389e:	230b      	movs	r3, #11
 80038a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038a6:	4619      	mov	r1, r3
 80038a8:	4807      	ldr	r0, [pc, #28]	@ (80038c8 <HAL_ETH_MspInit+0x148>)
 80038aa:	f7fe fe59 	bl	8002560 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80038ae:	bf00      	nop
 80038b0:	3738      	adds	r7, #56	@ 0x38
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40028000 	.word	0x40028000
 80038bc:	40023800 	.word	0x40023800
 80038c0:	40020800 	.word	0x40020800
 80038c4:	40020000 	.word	0x40020000
 80038c8:	40020400 	.word	0x40020400

080038cc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80038d0:	4802      	ldr	r0, [pc, #8]	@ (80038dc <ETH_PHY_IO_Init+0x10>)
 80038d2:	f7fe f9e1 	bl	8001c98 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20004bcc 	.word	0x20004bcc

080038e0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return 0;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	68f9      	ldr	r1, [r7, #12]
 8003902:	4807      	ldr	r0, [pc, #28]	@ (8003920 <ETH_PHY_IO_ReadReg+0x30>)
 8003904:	f7fe f823 	bl	800194e <HAL_ETH_ReadPHYRegister>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800390e:	f04f 33ff 	mov.w	r3, #4294967295
 8003912:	e000      	b.n	8003916 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20004bcc 	.word	0x20004bcc

08003924 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	68f9      	ldr	r1, [r7, #12]
 8003936:	4807      	ldr	r0, [pc, #28]	@ (8003954 <ETH_PHY_IO_WriteReg+0x30>)
 8003938:	f7fe f854 	bl	80019e4 <HAL_ETH_WritePHYRegister>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8003942:	f04f 33ff 	mov.w	r3, #4294967295
 8003946:	e000      	b.n	800394a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20004bcc 	.word	0x20004bcc

08003958 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800395c:	f7fd fbb6 	bl	80010cc <HAL_GetTick>
 8003960:	4603      	mov	r3, r0
}
 8003962:	4618      	mov	r0, r3
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b0a0      	sub	sp, #128	@ 0x80
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003970:	f107 030c 	add.w	r3, r7, #12
 8003974:	2264      	movs	r2, #100	@ 0x64
 8003976:	2100      	movs	r1, #0
 8003978:	4618      	mov	r0, r3
 800397a:	f00a fe6c 	bl	800e656 <memset>
  int32_t PHYLinkState = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003986:	2300      	movs	r3, #0
 8003988:	67bb      	str	r3, [r7, #120]	@ 0x78
 800398a:	2300      	movs	r3, #0
 800398c:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800398e:	483a      	ldr	r0, [pc, #232]	@ (8003a78 <ethernet_link_check_state+0x110>)
 8003990:	f7fd faae 	bl	8000ef0 <LAN8742_GetLinkState>
 8003994:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800399c:	089b      	lsrs	r3, r3, #2
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00c      	beq.n	80039c2 <ethernet_link_check_state+0x5a>
 80039a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	dc09      	bgt.n	80039c2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80039ae:	4833      	ldr	r0, [pc, #204]	@ (8003a7c <ethernet_link_check_state+0x114>)
 80039b0:	f7fd fd9d 	bl	80014ee <HAL_ETH_Stop>
    netif_set_down(netif);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f001 f81b 	bl	80049f0 <netif_set_down>
    netif_set_link_down(netif);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f001 f87e 	bl	8004abc <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80039c0:	e055      	b.n	8003a6e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d14e      	bne.n	8003a6e <ethernet_link_check_state+0x106>
 80039d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	dd4b      	ble.n	8003a6e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80039d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039d8:	3b02      	subs	r3, #2
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d82a      	bhi.n	8003a34 <ethernet_link_check_state+0xcc>
 80039de:	a201      	add	r2, pc, #4	@ (adr r2, 80039e4 <ethernet_link_check_state+0x7c>)
 80039e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e4:	080039f5 	.word	0x080039f5
 80039e8:	08003a07 	.word	0x08003a07
 80039ec:	08003a17 	.word	0x08003a17
 80039f0:	08003a27 	.word	0x08003a27
      duplex = ETH_FULLDUPLEX_MODE;
 80039f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80039f8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80039fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80039fe:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003a00:	2301      	movs	r3, #1
 8003a02:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003a04:	e017      	b.n	8003a36 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8003a0a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a0e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003a10:	2301      	movs	r3, #1
 8003a12:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003a14:	e00f      	b.n	8003a36 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8003a16:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a1a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003a20:	2301      	movs	r3, #1
 8003a22:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003a24:	e007      	b.n	8003a36 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003a26:	2300      	movs	r3, #0
 8003a28:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003a32:	e000      	b.n	8003a36 <ethernet_link_check_state+0xce>
      break;
 8003a34:	bf00      	nop
    if(linkchanged)
 8003a36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d018      	beq.n	8003a6e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003a3c:	f107 030c 	add.w	r3, r7, #12
 8003a40:	4619      	mov	r1, r3
 8003a42:	480e      	ldr	r0, [pc, #56]	@ (8003a7c <ethernet_link_check_state+0x114>)
 8003a44:	f7fe f817 	bl	8001a76 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003a48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a4a:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8003a4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a4e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003a50:	f107 030c 	add.w	r3, r7, #12
 8003a54:	4619      	mov	r1, r3
 8003a56:	4809      	ldr	r0, [pc, #36]	@ (8003a7c <ethernet_link_check_state+0x114>)
 8003a58:	f7fe f904 	bl	8001c64 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8003a5c:	4807      	ldr	r0, [pc, #28]	@ (8003a7c <ethernet_link_check_state+0x114>)
 8003a5e:	f7fd fce7 	bl	8001430 <HAL_ETH_Start>
      netif_set_up(netif);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 ff58 	bl	8004918 <netif_set_up>
      netif_set_link_up(netif);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fff3 	bl	8004a54 <netif_set_link_up>
}
 8003a6e:	bf00      	nop
 8003a70:	3780      	adds	r7, #128	@ 0x80
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20004cb4 	.word	0x20004cb4
 8003a7c:	20004bcc 	.word	0x20004bcc

08003a80 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8003a88:	4812      	ldr	r0, [pc, #72]	@ (8003ad4 <HAL_ETH_RxAllocateCallback+0x54>)
 8003a8a:	f000 fcbf 	bl	800440c <memp_malloc_pool>
 8003a8e:	60f8      	str	r0, [r7, #12]
  if (p)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d014      	beq.n	8003ac0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f103 0220 	add.w	r2, r3, #32
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad8 <HAL_ETH_RxAllocateCallback+0x58>)
 8003aa4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8003aae:	9201      	str	r2, [sp, #4]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2241      	movs	r2, #65	@ 0x41
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f001 f9f5 	bl	8004ea8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003abe:	e005      	b.n	8003acc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8003ac0:	4b06      	ldr	r3, [pc, #24]	@ (8003adc <HAL_ETH_RxAllocateCallback+0x5c>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	08011e04 	.word	0x08011e04
 8003ad8:	0800373d 	.word	0x0800373d
 8003adc:	20004a88 	.word	0x20004a88

08003ae0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b089      	sub	sp, #36	@ 0x24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3b20      	subs	r3, #32
 8003afe:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	887a      	ldrh	r2, [r7, #2]
 8003b10:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d103      	bne.n	8003b22 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	e003      	b.n	8003b2a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	e009      	b.n	8003b4c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	891a      	ldrh	r2, [r3, #8]
 8003b3c:	887b      	ldrh	r3, [r7, #2]
 8003b3e:	4413      	add	r3, r2
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f2      	bne.n	8003b38 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003b52:	bf00      	nop
 8003b54:	bf00      	nop
 8003b56:	3724      	adds	r7, #36	@ 0x24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	b21a      	sxth	r2, r3
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	0a1b      	lsrs	r3, r3, #8
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	b21b      	sxth	r3, r3
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	b21b      	sxth	r3, r3
 8003b7e:	b29b      	uxth	r3, r3
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	061a      	lsls	r2, r3, #24
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	0a1b      	lsrs	r3, r3, #8
 8003ba6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	0e1b      	lsrs	r3, r3, #24
 8003bb0:	4313      	orrs	r3, r2
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003bc8:	f000 f8d4 	bl	8003d74 <mem_init>
  memp_init();
 8003bcc:	f000 fbda 	bl	8004384 <memp_init>
  pbuf_init();
  netif_init();
 8003bd0:	f000 fcd8 	bl	8004584 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003bd4:	f007 ff5a 	bl	800ba8c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003bd8:	f001 fdbe 	bl	8005758 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003bdc:	f007 fecc 	bl	800b978 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003be0:	bf00      	nop
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003bf2:	4b05      	ldr	r3, [pc, #20]	@ (8003c08 <ptr_to_mem+0x20>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	4413      	add	r3, r2
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20005340 	.word	0x20005340

08003c0c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003c14:	4b05      	ldr	r3, [pc, #20]	@ (8003c2c <mem_to_ptr+0x20>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	b29b      	uxth	r3, r3
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20005340 	.word	0x20005340

08003c30 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003c30:	b590      	push	{r4, r7, lr}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003c38:	4b45      	ldr	r3, [pc, #276]	@ (8003d50 <plug_holes+0x120>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d206      	bcs.n	8003c50 <plug_holes+0x20>
 8003c42:	4b44      	ldr	r3, [pc, #272]	@ (8003d54 <plug_holes+0x124>)
 8003c44:	f240 12df 	movw	r2, #479	@ 0x1df
 8003c48:	4943      	ldr	r1, [pc, #268]	@ (8003d58 <plug_holes+0x128>)
 8003c4a:	4844      	ldr	r0, [pc, #272]	@ (8003d5c <plug_holes+0x12c>)
 8003c4c:	f00a fc9e 	bl	800e58c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003c50:	4b43      	ldr	r3, [pc, #268]	@ (8003d60 <plug_holes+0x130>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d306      	bcc.n	8003c68 <plug_holes+0x38>
 8003c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d54 <plug_holes+0x124>)
 8003c5c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003c60:	4940      	ldr	r1, [pc, #256]	@ (8003d64 <plug_holes+0x134>)
 8003c62:	483e      	ldr	r0, [pc, #248]	@ (8003d5c <plug_holes+0x12c>)
 8003c64:	f00a fc92 	bl	800e58c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	791b      	ldrb	r3, [r3, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d006      	beq.n	8003c7e <plug_holes+0x4e>
 8003c70:	4b38      	ldr	r3, [pc, #224]	@ (8003d54 <plug_holes+0x124>)
 8003c72:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8003c76:	493c      	ldr	r1, [pc, #240]	@ (8003d68 <plug_holes+0x138>)
 8003c78:	4838      	ldr	r0, [pc, #224]	@ (8003d5c <plug_holes+0x12c>)
 8003c7a:	f00a fc87 	bl	800e58c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003c86:	d906      	bls.n	8003c96 <plug_holes+0x66>
 8003c88:	4b32      	ldr	r3, [pc, #200]	@ (8003d54 <plug_holes+0x124>)
 8003c8a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8003c8e:	4937      	ldr	r1, [pc, #220]	@ (8003d6c <plug_holes+0x13c>)
 8003c90:	4832      	ldr	r0, [pc, #200]	@ (8003d5c <plug_holes+0x12c>)
 8003c92:	f00a fc7b 	bl	800e58c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff ffa4 	bl	8003be8 <ptr_to_mem>
 8003ca0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d024      	beq.n	8003cf4 <plug_holes+0xc4>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	791b      	ldrb	r3, [r3, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d120      	bne.n	8003cf4 <plug_holes+0xc4>
 8003cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d60 <plug_holes+0x130>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d01b      	beq.n	8003cf4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8003d70 <plug_holes+0x140>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d102      	bne.n	8003ccc <plug_holes+0x9c>
      lfree = mem;
 8003cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8003d70 <plug_holes+0x140>)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	881a      	ldrh	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003cdc:	d00a      	beq.n	8003cf4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff ff80 	bl	8003be8 <ptr_to_mem>
 8003ce8:	4604      	mov	r4, r0
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff ff8e 	bl	8003c0c <mem_to_ptr>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	885b      	ldrh	r3, [r3, #2]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff ff75 	bl	8003be8 <ptr_to_mem>
 8003cfe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d01f      	beq.n	8003d48 <plug_holes+0x118>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	791b      	ldrb	r3, [r3, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d11b      	bne.n	8003d48 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003d10:	4b17      	ldr	r3, [pc, #92]	@ (8003d70 <plug_holes+0x140>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d102      	bne.n	8003d20 <plug_holes+0xf0>
      lfree = pmem;
 8003d1a:	4a15      	ldr	r2, [pc, #84]	@ (8003d70 <plug_holes+0x140>)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003d30:	d00a      	beq.n	8003d48 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ff56 	bl	8003be8 <ptr_to_mem>
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	68b8      	ldr	r0, [r7, #8]
 8003d40:	f7ff ff64 	bl	8003c0c <mem_to_ptr>
 8003d44:	4603      	mov	r3, r0
 8003d46:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd90      	pop	{r4, r7, pc}
 8003d50:	20005340 	.word	0x20005340
 8003d54:	0800f468 	.word	0x0800f468
 8003d58:	0800f498 	.word	0x0800f498
 8003d5c:	0800f4b0 	.word	0x0800f4b0
 8003d60:	20005344 	.word	0x20005344
 8003d64:	0800f4d8 	.word	0x0800f4d8
 8003d68:	0800f4f4 	.word	0x0800f4f4
 8003d6c:	0800f510 	.word	0x0800f510
 8003d70:	20005348 	.word	0x20005348

08003d74 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003d7a:	4b18      	ldr	r3, [pc, #96]	@ (8003ddc <mem_init+0x68>)
 8003d7c:	3303      	adds	r3, #3
 8003d7e:	f023 0303 	bic.w	r3, r3, #3
 8003d82:	461a      	mov	r2, r3
 8003d84:	4b16      	ldr	r3, [pc, #88]	@ (8003de0 <mem_init+0x6c>)
 8003d86:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003d88:	4b15      	ldr	r3, [pc, #84]	@ (8003de0 <mem_init+0x6c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8003d94:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003da2:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8003da6:	f7ff ff1f 	bl	8003be8 <ptr_to_mem>
 8003daa:	4603      	mov	r3, r0
 8003dac:	4a0d      	ldr	r2, [pc, #52]	@ (8003de4 <mem_init+0x70>)
 8003dae:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003db0:	4b0c      	ldr	r3, [pc, #48]	@ (8003de4 <mem_init+0x70>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2201      	movs	r2, #1
 8003db6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003db8:	4b0a      	ldr	r3, [pc, #40]	@ (8003de4 <mem_init+0x70>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8003dc0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003dc2:	4b08      	ldr	r3, [pc, #32]	@ (8003de4 <mem_init+0x70>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8003dca:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003dcc:	4b04      	ldr	r3, [pc, #16]	@ (8003de0 <mem_init+0x6c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a05      	ldr	r2, [pc, #20]	@ (8003de8 <mem_init+0x74>)
 8003dd2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20004cec 	.word	0x20004cec
 8003de0:	20005340 	.word	0x20005340
 8003de4:	20005344 	.word	0x20005344
 8003de8:	20005348 	.word	0x20005348

08003dec <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ff09 	bl	8003c0c <mem_to_ptr>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff fef0 	bl	8003be8 <ptr_to_mem>
 8003e08:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	885b      	ldrh	r3, [r3, #2]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff feea 	bl	8003be8 <ptr_to_mem>
 8003e14:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003e1e:	d818      	bhi.n	8003e52 <mem_link_valid+0x66>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	885b      	ldrh	r3, [r3, #2]
 8003e24:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003e28:	d813      	bhi.n	8003e52 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003e2e:	8afa      	ldrh	r2, [r7, #22]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d004      	beq.n	8003e3e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	8afa      	ldrh	r2, [r7, #22]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d109      	bne.n	8003e52 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003e3e:	4b08      	ldr	r3, [pc, #32]	@ (8003e60 <mem_link_valid+0x74>)
 8003e40:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d006      	beq.n	8003e56 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	885b      	ldrh	r3, [r3, #2]
 8003e4c:	8afa      	ldrh	r2, [r7, #22]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d001      	beq.n	8003e56 <mem_link_valid+0x6a>
    return 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e000      	b.n	8003e58 <mem_link_valid+0x6c>
  }
  return 1;
 8003e56:	2301      	movs	r3, #1
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20005344 	.word	0x20005344

08003e64 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d04c      	beq.n	8003f0c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d007      	beq.n	8003e8c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003e7c:	4b25      	ldr	r3, [pc, #148]	@ (8003f14 <mem_free+0xb0>)
 8003e7e:	f240 2273 	movw	r2, #627	@ 0x273
 8003e82:	4925      	ldr	r1, [pc, #148]	@ (8003f18 <mem_free+0xb4>)
 8003e84:	4825      	ldr	r0, [pc, #148]	@ (8003f1c <mem_free+0xb8>)
 8003e86:	f00a fb81 	bl	800e58c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003e8a:	e040      	b.n	8003f0e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3b08      	subs	r3, #8
 8003e90:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003e92:	4b23      	ldr	r3, [pc, #140]	@ (8003f20 <mem_free+0xbc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d306      	bcc.n	8003eaa <mem_free+0x46>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f103 020c 	add.w	r2, r3, #12
 8003ea2:	4b20      	ldr	r3, [pc, #128]	@ (8003f24 <mem_free+0xc0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d907      	bls.n	8003eba <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8003f14 <mem_free+0xb0>)
 8003eac:	f240 227f 	movw	r2, #639	@ 0x27f
 8003eb0:	491d      	ldr	r1, [pc, #116]	@ (8003f28 <mem_free+0xc4>)
 8003eb2:	481a      	ldr	r0, [pc, #104]	@ (8003f1c <mem_free+0xb8>)
 8003eb4:	f00a fb6a 	bl	800e58c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003eb8:	e029      	b.n	8003f0e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	791b      	ldrb	r3, [r3, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d107      	bne.n	8003ed2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003ec2:	4b14      	ldr	r3, [pc, #80]	@ (8003f14 <mem_free+0xb0>)
 8003ec4:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8003ec8:	4918      	ldr	r1, [pc, #96]	@ (8003f2c <mem_free+0xc8>)
 8003eca:	4814      	ldr	r0, [pc, #80]	@ (8003f1c <mem_free+0xb8>)
 8003ecc:	f00a fb5e 	bl	800e58c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003ed0:	e01d      	b.n	8003f0e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7ff ff8a 	bl	8003dec <mem_link_valid>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d107      	bne.n	8003eee <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003ede:	4b0d      	ldr	r3, [pc, #52]	@ (8003f14 <mem_free+0xb0>)
 8003ee0:	f240 2295 	movw	r2, #661	@ 0x295
 8003ee4:	4912      	ldr	r1, [pc, #72]	@ (8003f30 <mem_free+0xcc>)
 8003ee6:	480d      	ldr	r0, [pc, #52]	@ (8003f1c <mem_free+0xb8>)
 8003ee8:	f00a fb50 	bl	800e58c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003eec:	e00f      	b.n	8003f0e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8003f34 <mem_free+0xd0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d202      	bcs.n	8003f04 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003efe:	4a0d      	ldr	r2, [pc, #52]	@ (8003f34 <mem_free+0xd0>)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f7ff fe93 	bl	8003c30 <plug_holes>
 8003f0a:	e000      	b.n	8003f0e <mem_free+0xaa>
    return;
 8003f0c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	0800f468 	.word	0x0800f468
 8003f18:	0800f53c 	.word	0x0800f53c
 8003f1c:	0800f4b0 	.word	0x0800f4b0
 8003f20:	20005340 	.word	0x20005340
 8003f24:	20005344 	.word	0x20005344
 8003f28:	0800f560 	.word	0x0800f560
 8003f2c:	0800f57c 	.word	0x0800f57c
 8003f30:	0800f5a4 	.word	0x0800f5a4
 8003f34:	20005348 	.word	0x20005348

08003f38 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003f44:	887b      	ldrh	r3, [r7, #2]
 8003f46:	3303      	adds	r3, #3
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	f023 0303 	bic.w	r3, r3, #3
 8003f4e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8003f50:	8bfb      	ldrh	r3, [r7, #30]
 8003f52:	2b0b      	cmp	r3, #11
 8003f54:	d801      	bhi.n	8003f5a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003f56:	230c      	movs	r3, #12
 8003f58:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003f5a:	8bfb      	ldrh	r3, [r7, #30]
 8003f5c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003f60:	d803      	bhi.n	8003f6a <mem_trim+0x32>
 8003f62:	8bfa      	ldrh	r2, [r7, #30]
 8003f64:	887b      	ldrh	r3, [r7, #2]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d201      	bcs.n	8003f6e <mem_trim+0x36>
    return NULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e0cc      	b.n	8004108 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003f6e:	4b68      	ldr	r3, [pc, #416]	@ (8004110 <mem_trim+0x1d8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d304      	bcc.n	8003f82 <mem_trim+0x4a>
 8003f78:	4b66      	ldr	r3, [pc, #408]	@ (8004114 <mem_trim+0x1dc>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d306      	bcc.n	8003f90 <mem_trim+0x58>
 8003f82:	4b65      	ldr	r3, [pc, #404]	@ (8004118 <mem_trim+0x1e0>)
 8003f84:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8003f88:	4964      	ldr	r1, [pc, #400]	@ (800411c <mem_trim+0x1e4>)
 8003f8a:	4865      	ldr	r0, [pc, #404]	@ (8004120 <mem_trim+0x1e8>)
 8003f8c:	f00a fafe 	bl	800e58c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003f90:	4b5f      	ldr	r3, [pc, #380]	@ (8004110 <mem_trim+0x1d8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d304      	bcc.n	8003fa4 <mem_trim+0x6c>
 8003f9a:	4b5e      	ldr	r3, [pc, #376]	@ (8004114 <mem_trim+0x1dc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d301      	bcc.n	8003fa8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	e0af      	b.n	8004108 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3b08      	subs	r3, #8
 8003fac:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003fae:	69b8      	ldr	r0, [r7, #24]
 8003fb0:	f7ff fe2c 	bl	8003c0c <mem_to_ptr>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	881a      	ldrh	r2, [r3, #0]
 8003fbc:	8afb      	ldrh	r3, [r7, #22]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b08      	subs	r3, #8
 8003fc4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003fc6:	8bfa      	ldrh	r2, [r7, #30]
 8003fc8:	8abb      	ldrh	r3, [r7, #20]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d906      	bls.n	8003fdc <mem_trim+0xa4>
 8003fce:	4b52      	ldr	r3, [pc, #328]	@ (8004118 <mem_trim+0x1e0>)
 8003fd0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8003fd4:	4953      	ldr	r1, [pc, #332]	@ (8004124 <mem_trim+0x1ec>)
 8003fd6:	4852      	ldr	r0, [pc, #328]	@ (8004120 <mem_trim+0x1e8>)
 8003fd8:	f00a fad8 	bl	800e58c <iprintf>
  if (newsize > size) {
 8003fdc:	8bfa      	ldrh	r2, [r7, #30]
 8003fde:	8abb      	ldrh	r3, [r7, #20]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d901      	bls.n	8003fe8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e08f      	b.n	8004108 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003fe8:	8bfa      	ldrh	r2, [r7, #30]
 8003fea:	8abb      	ldrh	r3, [r7, #20]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d101      	bne.n	8003ff4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	e089      	b.n	8004108 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff fdf5 	bl	8003be8 <ptr_to_mem>
 8003ffe:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	791b      	ldrb	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d13f      	bne.n	8004088 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	881b      	ldrh	r3, [r3, #0]
 800400c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004010:	d106      	bne.n	8004020 <mem_trim+0xe8>
 8004012:	4b41      	ldr	r3, [pc, #260]	@ (8004118 <mem_trim+0x1e0>)
 8004014:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8004018:	4943      	ldr	r1, [pc, #268]	@ (8004128 <mem_trim+0x1f0>)
 800401a:	4841      	ldr	r0, [pc, #260]	@ (8004120 <mem_trim+0x1e8>)
 800401c:	f00a fab6 	bl	800e58c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004026:	8afa      	ldrh	r2, [r7, #22]
 8004028:	8bfb      	ldrh	r3, [r7, #30]
 800402a:	4413      	add	r3, r2
 800402c:	b29b      	uxth	r3, r3
 800402e:	3308      	adds	r3, #8
 8004030:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004032:	4b3e      	ldr	r3, [pc, #248]	@ (800412c <mem_trim+0x1f4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	429a      	cmp	r2, r3
 800403a:	d106      	bne.n	800404a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800403c:	89fb      	ldrh	r3, [r7, #14]
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fdd2 	bl	8003be8 <ptr_to_mem>
 8004044:	4603      	mov	r3, r0
 8004046:	4a39      	ldr	r2, [pc, #228]	@ (800412c <mem_trim+0x1f4>)
 8004048:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800404a:	89fb      	ldrh	r3, [r7, #14]
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fdcb 	bl	8003be8 <ptr_to_mem>
 8004052:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	2200      	movs	r2, #0
 8004058:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	89ba      	ldrh	r2, [r7, #12]
 800405e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	8afa      	ldrh	r2, [r7, #22]
 8004064:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	89fa      	ldrh	r2, [r7, #14]
 800406a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004074:	d047      	beq.n	8004106 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fdb4 	bl	8003be8 <ptr_to_mem>
 8004080:	4602      	mov	r2, r0
 8004082:	89fb      	ldrh	r3, [r7, #14]
 8004084:	8053      	strh	r3, [r2, #2]
 8004086:	e03e      	b.n	8004106 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004088:	8bfb      	ldrh	r3, [r7, #30]
 800408a:	f103 0214 	add.w	r2, r3, #20
 800408e:	8abb      	ldrh	r3, [r7, #20]
 8004090:	429a      	cmp	r2, r3
 8004092:	d838      	bhi.n	8004106 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004094:	8afa      	ldrh	r2, [r7, #22]
 8004096:	8bfb      	ldrh	r3, [r7, #30]
 8004098:	4413      	add	r3, r2
 800409a:	b29b      	uxth	r3, r3
 800409c:	3308      	adds	r3, #8
 800409e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80040a8:	d106      	bne.n	80040b8 <mem_trim+0x180>
 80040aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004118 <mem_trim+0x1e0>)
 80040ac:	f240 3216 	movw	r2, #790	@ 0x316
 80040b0:	491d      	ldr	r1, [pc, #116]	@ (8004128 <mem_trim+0x1f0>)
 80040b2:	481b      	ldr	r0, [pc, #108]	@ (8004120 <mem_trim+0x1e8>)
 80040b4:	f00a fa6a 	bl	800e58c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80040b8:	89fb      	ldrh	r3, [r7, #14]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fd94 	bl	8003be8 <ptr_to_mem>
 80040c0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80040c2:	4b1a      	ldr	r3, [pc, #104]	@ (800412c <mem_trim+0x1f4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d202      	bcs.n	80040d2 <mem_trim+0x19a>
      lfree = mem2;
 80040cc:	4a17      	ldr	r2, [pc, #92]	@ (800412c <mem_trim+0x1f4>)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	2200      	movs	r2, #0
 80040d6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	8afa      	ldrh	r2, [r7, #22]
 80040e4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	89fa      	ldrh	r2, [r7, #14]
 80040ea:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80040f4:	d007      	beq.n	8004106 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fd74 	bl	8003be8 <ptr_to_mem>
 8004100:	4602      	mov	r2, r0
 8004102:	89fb      	ldrh	r3, [r7, #14]
 8004104:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004106:	687b      	ldr	r3, [r7, #4]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20005340 	.word	0x20005340
 8004114:	20005344 	.word	0x20005344
 8004118:	0800f468 	.word	0x0800f468
 800411c:	0800f5d8 	.word	0x0800f5d8
 8004120:	0800f4b0 	.word	0x0800f4b0
 8004124:	0800f5f0 	.word	0x0800f5f0
 8004128:	0800f610 	.word	0x0800f610
 800412c:	20005348 	.word	0x20005348

08004130 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800413a:	88fb      	ldrh	r3, [r7, #6]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <mem_malloc+0x14>
    return NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	e0d9      	b.n	80042f8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	3303      	adds	r3, #3
 8004148:	b29b      	uxth	r3, r3
 800414a:	f023 0303 	bic.w	r3, r3, #3
 800414e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004150:	8bbb      	ldrh	r3, [r7, #28]
 8004152:	2b0b      	cmp	r3, #11
 8004154:	d801      	bhi.n	800415a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004156:	230c      	movs	r3, #12
 8004158:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800415a:	8bbb      	ldrh	r3, [r7, #28]
 800415c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004160:	d803      	bhi.n	800416a <mem_malloc+0x3a>
 8004162:	8bba      	ldrh	r2, [r7, #28]
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	429a      	cmp	r2, r3
 8004168:	d201      	bcs.n	800416e <mem_malloc+0x3e>
    return NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	e0c4      	b.n	80042f8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800416e:	4b64      	ldr	r3, [pc, #400]	@ (8004300 <mem_malloc+0x1d0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fd4a 	bl	8003c0c <mem_to_ptr>
 8004178:	4603      	mov	r3, r0
 800417a:	83fb      	strh	r3, [r7, #30]
 800417c:	e0b4      	b.n	80042e8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800417e:	8bfb      	ldrh	r3, [r7, #30]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff fd31 	bl	8003be8 <ptr_to_mem>
 8004186:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	791b      	ldrb	r3, [r3, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	f040 80a4 	bne.w	80042da <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	8bfb      	ldrh	r3, [r7, #30]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	f1a3 0208 	sub.w	r2, r3, #8
 80041a0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80041a2:	429a      	cmp	r2, r3
 80041a4:	f0c0 8099 	bcc.w	80042da <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	8bfb      	ldrh	r3, [r7, #30]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	f1a3 0208 	sub.w	r2, r3, #8
 80041b6:	8bbb      	ldrh	r3, [r7, #28]
 80041b8:	3314      	adds	r3, #20
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d333      	bcc.n	8004226 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80041be:	8bfa      	ldrh	r2, [r7, #30]
 80041c0:	8bbb      	ldrh	r3, [r7, #28]
 80041c2:	4413      	add	r3, r2
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3308      	adds	r3, #8
 80041c8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80041ca:	8a7b      	ldrh	r3, [r7, #18]
 80041cc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80041d0:	d106      	bne.n	80041e0 <mem_malloc+0xb0>
 80041d2:	4b4c      	ldr	r3, [pc, #304]	@ (8004304 <mem_malloc+0x1d4>)
 80041d4:	f240 3287 	movw	r2, #903	@ 0x387
 80041d8:	494b      	ldr	r1, [pc, #300]	@ (8004308 <mem_malloc+0x1d8>)
 80041da:	484c      	ldr	r0, [pc, #304]	@ (800430c <mem_malloc+0x1dc>)
 80041dc:	f00a f9d6 	bl	800e58c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80041e0:	8a7b      	ldrh	r3, [r7, #18]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff fd00 	bl	8003be8 <ptr_to_mem>
 80041e8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	881a      	ldrh	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8bfa      	ldrh	r2, [r7, #30]
 80041fc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	8a7a      	ldrh	r2, [r7, #18]
 8004202:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2201      	movs	r2, #1
 8004208:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004212:	d00b      	beq.n	800422c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff fce5 	bl	8003be8 <ptr_to_mem>
 800421e:	4602      	mov	r2, r0
 8004220:	8a7b      	ldrh	r3, [r7, #18]
 8004222:	8053      	strh	r3, [r2, #2]
 8004224:	e002      	b.n	800422c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2201      	movs	r2, #1
 800422a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800422c:	4b34      	ldr	r3, [pc, #208]	@ (8004300 <mem_malloc+0x1d0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	429a      	cmp	r2, r3
 8004234:	d127      	bne.n	8004286 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004236:	4b32      	ldr	r3, [pc, #200]	@ (8004300 <mem_malloc+0x1d0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800423c:	e005      	b.n	800424a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fcd0 	bl	8003be8 <ptr_to_mem>
 8004248:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	791b      	ldrb	r3, [r3, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d004      	beq.n	800425c <mem_malloc+0x12c>
 8004252:	4b2f      	ldr	r3, [pc, #188]	@ (8004310 <mem_malloc+0x1e0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	429a      	cmp	r2, r3
 800425a:	d1f0      	bne.n	800423e <mem_malloc+0x10e>
          }
          lfree = cur;
 800425c:	4a28      	ldr	r2, [pc, #160]	@ (8004300 <mem_malloc+0x1d0>)
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004262:	4b27      	ldr	r3, [pc, #156]	@ (8004300 <mem_malloc+0x1d0>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b2a      	ldr	r3, [pc, #168]	@ (8004310 <mem_malloc+0x1e0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d00b      	beq.n	8004286 <mem_malloc+0x156>
 800426e:	4b24      	ldr	r3, [pc, #144]	@ (8004300 <mem_malloc+0x1d0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	791b      	ldrb	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d006      	beq.n	8004286 <mem_malloc+0x156>
 8004278:	4b22      	ldr	r3, [pc, #136]	@ (8004304 <mem_malloc+0x1d4>)
 800427a:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800427e:	4925      	ldr	r1, [pc, #148]	@ (8004314 <mem_malloc+0x1e4>)
 8004280:	4822      	ldr	r0, [pc, #136]	@ (800430c <mem_malloc+0x1dc>)
 8004282:	f00a f983 	bl	800e58c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004286:	8bba      	ldrh	r2, [r7, #28]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	4413      	add	r3, r2
 800428c:	3308      	adds	r3, #8
 800428e:	4a20      	ldr	r2, [pc, #128]	@ (8004310 <mem_malloc+0x1e0>)
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	4293      	cmp	r3, r2
 8004294:	d906      	bls.n	80042a4 <mem_malloc+0x174>
 8004296:	4b1b      	ldr	r3, [pc, #108]	@ (8004304 <mem_malloc+0x1d4>)
 8004298:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800429c:	491e      	ldr	r1, [pc, #120]	@ (8004318 <mem_malloc+0x1e8>)
 800429e:	481b      	ldr	r0, [pc, #108]	@ (800430c <mem_malloc+0x1dc>)
 80042a0:	f00a f974 	bl	800e58c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d006      	beq.n	80042bc <mem_malloc+0x18c>
 80042ae:	4b15      	ldr	r3, [pc, #84]	@ (8004304 <mem_malloc+0x1d4>)
 80042b0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80042b4:	4919      	ldr	r1, [pc, #100]	@ (800431c <mem_malloc+0x1ec>)
 80042b6:	4815      	ldr	r0, [pc, #84]	@ (800430c <mem_malloc+0x1dc>)
 80042b8:	f00a f968 	bl	800e58c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d006      	beq.n	80042d4 <mem_malloc+0x1a4>
 80042c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004304 <mem_malloc+0x1d4>)
 80042c8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80042cc:	4914      	ldr	r1, [pc, #80]	@ (8004320 <mem_malloc+0x1f0>)
 80042ce:	480f      	ldr	r0, [pc, #60]	@ (800430c <mem_malloc+0x1dc>)
 80042d0:	f00a f95c 	bl	800e58c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	3308      	adds	r3, #8
 80042d8:	e00e      	b.n	80042f8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80042da:	8bfb      	ldrh	r3, [r7, #30]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff fc83 	bl	8003be8 <ptr_to_mem>
 80042e2:	4603      	mov	r3, r0
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80042e8:	8bfa      	ldrh	r2, [r7, #30]
 80042ea:	8bbb      	ldrh	r3, [r7, #28]
 80042ec:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80042f0:	429a      	cmp	r2, r3
 80042f2:	f4ff af44 	bcc.w	800417e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3720      	adds	r7, #32
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20005348 	.word	0x20005348
 8004304:	0800f468 	.word	0x0800f468
 8004308:	0800f610 	.word	0x0800f610
 800430c:	0800f4b0 	.word	0x0800f4b0
 8004310:	20005344 	.word	0x20005344
 8004314:	0800f624 	.word	0x0800f624
 8004318:	0800f640 	.word	0x0800f640
 800431c:	0800f670 	.word	0x0800f670
 8004320:	0800f6a0 	.word	0x0800f6a0

08004324 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	3303      	adds	r3, #3
 800433a:	f023 0303 	bic.w	r3, r3, #3
 800433e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004340:	2300      	movs	r3, #0
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e011      	b.n	800436a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4413      	add	r3, r2
 8004362:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3301      	adds	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	885b      	ldrh	r3, [r3, #2]
 800436e:	461a      	mov	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4293      	cmp	r3, r2
 8004374:	dbe7      	blt.n	8004346 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004376:	bf00      	nop
 8004378:	bf00      	nop
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800438a:	2300      	movs	r3, #0
 800438c:	80fb      	strh	r3, [r7, #6]
 800438e:	e009      	b.n	80043a4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	4a08      	ldr	r2, [pc, #32]	@ (80043b4 <memp_init+0x30>)
 8004394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff ffc3 	bl	8004324 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	3301      	adds	r3, #1
 80043a2:	80fb      	strh	r3, [r7, #6]
 80043a4:	88fb      	ldrh	r3, [r7, #6]
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d9f2      	bls.n	8004390 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80043aa:	bf00      	nop
 80043ac:	bf00      	nop
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	08011e7c 	.word	0x08011e7c

080043b8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d012      	beq.n	80043f4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	6812      	ldr	r2, [r2, #0]
 80043d6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d006      	beq.n	80043f0 <do_memp_malloc_pool+0x38>
 80043e2:	4b07      	ldr	r3, [pc, #28]	@ (8004400 <do_memp_malloc_pool+0x48>)
 80043e4:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80043e8:	4906      	ldr	r1, [pc, #24]	@ (8004404 <do_memp_malloc_pool+0x4c>)
 80043ea:	4807      	ldr	r0, [pc, #28]	@ (8004408 <do_memp_malloc_pool+0x50>)
 80043ec:	f00a f8ce 	bl	800e58c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	e000      	b.n	80043f6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	0800f6c4 	.word	0x0800f6c4
 8004404:	0800f6f4 	.word	0x0800f6f4
 8004408:	0800f718 	.word	0x0800f718

0800440c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <memp_malloc_pool+0x1c>
 800441a:	4b0a      	ldr	r3, [pc, #40]	@ (8004444 <memp_malloc_pool+0x38>)
 800441c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8004420:	4909      	ldr	r1, [pc, #36]	@ (8004448 <memp_malloc_pool+0x3c>)
 8004422:	480a      	ldr	r0, [pc, #40]	@ (800444c <memp_malloc_pool+0x40>)
 8004424:	f00a f8b2 	bl	800e58c <iprintf>
  if (desc == NULL) {
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <memp_malloc_pool+0x26>
    return NULL;
 800442e:	2300      	movs	r3, #0
 8004430:	e003      	b.n	800443a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7ff ffc0 	bl	80043b8 <do_memp_malloc_pool>
 8004438:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	0800f6c4 	.word	0x0800f6c4
 8004448:	0800f740 	.word	0x0800f740
 800444c:	0800f718 	.word	0x0800f718

08004450 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	4603      	mov	r3, r0
 8004458:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d908      	bls.n	8004472 <memp_malloc+0x22>
 8004460:	4b0a      	ldr	r3, [pc, #40]	@ (800448c <memp_malloc+0x3c>)
 8004462:	f240 1257 	movw	r2, #343	@ 0x157
 8004466:	490a      	ldr	r1, [pc, #40]	@ (8004490 <memp_malloc+0x40>)
 8004468:	480a      	ldr	r0, [pc, #40]	@ (8004494 <memp_malloc+0x44>)
 800446a:	f00a f88f 	bl	800e58c <iprintf>
 800446e:	2300      	movs	r3, #0
 8004470:	e008      	b.n	8004484 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	4a08      	ldr	r2, [pc, #32]	@ (8004498 <memp_malloc+0x48>)
 8004476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff ff9c 	bl	80043b8 <do_memp_malloc_pool>
 8004480:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004482:	68fb      	ldr	r3, [r7, #12]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	0800f6c4 	.word	0x0800f6c4
 8004490:	0800f754 	.word	0x0800f754
 8004494:	0800f718 	.word	0x0800f718
 8004498:	08011e7c 	.word	0x08011e7c

0800449c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d006      	beq.n	80044be <do_memp_free_pool+0x22>
 80044b0:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <do_memp_free_pool+0x40>)
 80044b2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80044b6:	490a      	ldr	r1, [pc, #40]	@ (80044e0 <do_memp_free_pool+0x44>)
 80044b8:	480a      	ldr	r0, [pc, #40]	@ (80044e4 <do_memp_free_pool+0x48>)
 80044ba:	f00a f867 	bl	800e58c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	0800f6c4 	.word	0x0800f6c4
 80044e0:	0800f774 	.word	0x0800f774
 80044e4:	0800f718 	.word	0x0800f718

080044e8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d106      	bne.n	8004506 <memp_free_pool+0x1e>
 80044f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004524 <memp_free_pool+0x3c>)
 80044fa:	f240 1295 	movw	r2, #405	@ 0x195
 80044fe:	490a      	ldr	r1, [pc, #40]	@ (8004528 <memp_free_pool+0x40>)
 8004500:	480a      	ldr	r0, [pc, #40]	@ (800452c <memp_free_pool+0x44>)
 8004502:	f00a f843 	bl	800e58c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <memp_free_pool+0x34>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8004512:	6839      	ldr	r1, [r7, #0]
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff ffc1 	bl	800449c <do_memp_free_pool>
 800451a:	e000      	b.n	800451e <memp_free_pool+0x36>
    return;
 800451c:	bf00      	nop
}
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	0800f6c4 	.word	0x0800f6c4
 8004528:	0800f740 	.word	0x0800f740
 800452c:	0800f718 	.word	0x0800f718

08004530 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	6039      	str	r1, [r7, #0]
 800453a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	2b08      	cmp	r3, #8
 8004540:	d907      	bls.n	8004552 <memp_free+0x22>
 8004542:	4b0c      	ldr	r3, [pc, #48]	@ (8004574 <memp_free+0x44>)
 8004544:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8004548:	490b      	ldr	r1, [pc, #44]	@ (8004578 <memp_free+0x48>)
 800454a:	480c      	ldr	r0, [pc, #48]	@ (800457c <memp_free+0x4c>)
 800454c:	f00a f81e 	bl	800e58c <iprintf>
 8004550:	e00c      	b.n	800456c <memp_free+0x3c>

  if (mem == NULL) {
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004558:	79fb      	ldrb	r3, [r7, #7]
 800455a:	4a09      	ldr	r2, [pc, #36]	@ (8004580 <memp_free+0x50>)
 800455c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004560:	6839      	ldr	r1, [r7, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff ff9a 	bl	800449c <do_memp_free_pool>
 8004568:	e000      	b.n	800456c <memp_free+0x3c>
    return;
 800456a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	0800f6c4 	.word	0x0800f6c4
 8004578:	0800f794 	.word	0x0800f794
 800457c:	0800f718 	.word	0x0800f718
 8004580:	08011e7c 	.word	0x08011e7c

08004584 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004588:	bf00      	nop
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d108      	bne.n	80045ba <netif_add+0x26>
 80045a8:	4b57      	ldr	r3, [pc, #348]	@ (8004708 <netif_add+0x174>)
 80045aa:	f240 1227 	movw	r2, #295	@ 0x127
 80045ae:	4957      	ldr	r1, [pc, #348]	@ (800470c <netif_add+0x178>)
 80045b0:	4857      	ldr	r0, [pc, #348]	@ (8004710 <netif_add+0x17c>)
 80045b2:	f009 ffeb 	bl	800e58c <iprintf>
 80045b6:	2300      	movs	r3, #0
 80045b8:	e0a2      	b.n	8004700 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d108      	bne.n	80045d2 <netif_add+0x3e>
 80045c0:	4b51      	ldr	r3, [pc, #324]	@ (8004708 <netif_add+0x174>)
 80045c2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80045c6:	4953      	ldr	r1, [pc, #332]	@ (8004714 <netif_add+0x180>)
 80045c8:	4851      	ldr	r0, [pc, #324]	@ (8004710 <netif_add+0x17c>)
 80045ca:	f009 ffdf 	bl	800e58c <iprintf>
 80045ce:	2300      	movs	r3, #0
 80045d0:	e096      	b.n	8004700 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80045d8:	4b4f      	ldr	r3, [pc, #316]	@ (8004718 <netif_add+0x184>)
 80045da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80045e2:	4b4d      	ldr	r3, [pc, #308]	@ (8004718 <netif_add+0x184>)
 80045e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80045ec:	4b4a      	ldr	r3, [pc, #296]	@ (8004718 <netif_add+0x184>)
 80045ee:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4a45      	ldr	r2, [pc, #276]	@ (800471c <netif_add+0x188>)
 8004606:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a3a      	ldr	r2, [r7, #32]
 8004620:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004622:	4b3f      	ldr	r3, [pc, #252]	@ (8004720 <netif_add+0x18c>)
 8004624:	781a      	ldrb	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004630:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 f913 	bl	8004864 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	4798      	blx	r3
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <netif_add+0xba>
    return NULL;
 800464a:	2300      	movs	r3, #0
 800464c:	e058      	b.n	8004700 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004654:	2bff      	cmp	r3, #255	@ 0xff
 8004656:	d103      	bne.n	8004660 <netif_add+0xcc>
        netif->num = 0;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004664:	4b2f      	ldr	r3, [pc, #188]	@ (8004724 <netif_add+0x190>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	e02b      	b.n	80046c4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	429a      	cmp	r2, r3
 8004672:	d106      	bne.n	8004682 <netif_add+0xee>
 8004674:	4b24      	ldr	r3, [pc, #144]	@ (8004708 <netif_add+0x174>)
 8004676:	f240 128b 	movw	r2, #395	@ 0x18b
 800467a:	492b      	ldr	r1, [pc, #172]	@ (8004728 <netif_add+0x194>)
 800467c:	4824      	ldr	r0, [pc, #144]	@ (8004710 <netif_add+0x17c>)
 800467e:	f009 ff85 	bl	800e58c <iprintf>
        num_netifs++;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	3301      	adds	r3, #1
 8004686:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2bff      	cmp	r3, #255	@ 0xff
 800468c:	dd06      	ble.n	800469c <netif_add+0x108>
 800468e:	4b1e      	ldr	r3, [pc, #120]	@ (8004708 <netif_add+0x174>)
 8004690:	f240 128d 	movw	r2, #397	@ 0x18d
 8004694:	4925      	ldr	r1, [pc, #148]	@ (800472c <netif_add+0x198>)
 8004696:	481e      	ldr	r0, [pc, #120]	@ (8004710 <netif_add+0x17c>)
 8004698:	f009 ff78 	bl	800e58c <iprintf>
        if (netif2->num == netif->num) {
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d108      	bne.n	80046be <netif_add+0x12a>
          netif->num++;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046b2:	3301      	adds	r3, #1
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80046bc:	e005      	b.n	80046ca <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1d0      	bne.n	800466c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1be      	bne.n	800464e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046d6:	2bfe      	cmp	r3, #254	@ 0xfe
 80046d8:	d103      	bne.n	80046e2 <netif_add+0x14e>
    netif_num = 0;
 80046da:	4b11      	ldr	r3, [pc, #68]	@ (8004720 <netif_add+0x18c>)
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]
 80046e0:	e006      	b.n	80046f0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046e8:	3301      	adds	r3, #1
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <netif_add+0x18c>)
 80046ee:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80046f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004724 <netif_add+0x190>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80046f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004724 <netif_add+0x190>)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80046fe:	68fb      	ldr	r3, [r7, #12]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	0800f7b0 	.word	0x0800f7b0
 800470c:	0800f844 	.word	0x0800f844
 8004710:	0800f800 	.word	0x0800f800
 8004714:	0800f860 	.word	0x0800f860
 8004718:	08011ee0 	.word	0x08011ee0
 800471c:	08004b3f 	.word	0x08004b3f
 8004720:	20008240 	.word	0x20008240
 8004724:	20008238 	.word	0x20008238
 8004728:	0800f884 	.word	0x0800f884
 800472c:	0800f898 	.word	0x0800f898

08004730 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800473a:	6839      	ldr	r1, [r7, #0]
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f002 fdf5 	bl	800732c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004742:	6839      	ldr	r1, [r7, #0]
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f007 fb2b 	bl	800bda0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <netif_do_set_ipaddr+0x20>
 8004766:	4b1d      	ldr	r3, [pc, #116]	@ (80047dc <netif_do_set_ipaddr+0x88>)
 8004768:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800476c:	491c      	ldr	r1, [pc, #112]	@ (80047e0 <netif_do_set_ipaddr+0x8c>)
 800476e:	481d      	ldr	r0, [pc, #116]	@ (80047e4 <netif_do_set_ipaddr+0x90>)
 8004770:	f009 ff0c 	bl	800e58c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <netif_do_set_ipaddr+0x34>
 800477a:	4b18      	ldr	r3, [pc, #96]	@ (80047dc <netif_do_set_ipaddr+0x88>)
 800477c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8004780:	4917      	ldr	r1, [pc, #92]	@ (80047e0 <netif_do_set_ipaddr+0x8c>)
 8004782:	4818      	ldr	r0, [pc, #96]	@ (80047e4 <netif_do_set_ipaddr+0x90>)
 8004784:	f009 ff02 	bl	800e58c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	3304      	adds	r3, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d01c      	beq.n	80047d0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	3304      	adds	r3, #4
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80047a6:	f107 0314 	add.w	r3, r7, #20
 80047aa:	4619      	mov	r1, r3
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff ffbf 	bl	8004730 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <netif_do_set_ipaddr+0x6a>
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	e000      	b.n	80047c0 <netif_do_set_ipaddr+0x6c>
 80047be:	2300      	movs	r3, #0
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80047c4:	2101      	movs	r1, #1
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f8d2 	bl	8004970 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	0800f7b0 	.word	0x0800f7b0
 80047e0:	0800f8c8 	.word	0x0800f8c8
 80047e4:	0800f800 	.word	0x0800f800

080047e8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3308      	adds	r3, #8
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d00a      	beq.n	8004818 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <netif_do_set_netmask+0x26>
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	e000      	b.n	8004810 <netif_do_set_netmask+0x28>
 800480e:	2300      	movs	r3, #0
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004826:	b480      	push	{r7}
 8004828:	b085      	sub	sp, #20
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	330c      	adds	r3, #12
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d00a      	beq.n	8004856 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <netif_do_set_gw+0x26>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	e000      	b.n	800484e <netif_do_set_gw+0x28>
 800484c:	2300      	movs	r3, #0
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004872:	2300      	movs	r3, #0
 8004874:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004876:	2300      	movs	r3, #0
 8004878:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004880:	4b1c      	ldr	r3, [pc, #112]	@ (80048f4 <netif_set_addr+0x90>)
 8004882:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800488a:	4b1a      	ldr	r3, [pc, #104]	@ (80048f4 <netif_set_addr+0x90>)
 800488c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004894:	4b17      	ldr	r3, [pc, #92]	@ (80048f4 <netif_set_addr+0x90>)
 8004896:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <netif_set_addr+0x42>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <netif_set_addr+0x46>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <netif_set_addr+0x48>
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
  if (remove) {
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d006      	beq.n	80048c2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80048b4:	f107 0310 	add.w	r3, r7, #16
 80048b8:	461a      	mov	r2, r3
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7ff ff49 	bl	8004754 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f7ff ff8e 	bl	80047e8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	6839      	ldr	r1, [r7, #0]
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff ffa8 	bl	8004826 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d106      	bne.n	80048ea <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80048dc:	f107 0310 	add.w	r3, r7, #16
 80048e0:	461a      	mov	r2, r3
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7ff ff35 	bl	8004754 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80048ea:	bf00      	nop
 80048ec:	3720      	adds	r7, #32
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	08011ee0 	.word	0x08011ee0

080048f8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004900:	4a04      	ldr	r2, [pc, #16]	@ (8004914 <netif_set_default+0x1c>)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	2000823c 	.word	0x2000823c

08004918 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d107      	bne.n	8004936 <netif_set_up+0x1e>
 8004926:	4b0f      	ldr	r3, [pc, #60]	@ (8004964 <netif_set_up+0x4c>)
 8004928:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800492c:	490e      	ldr	r1, [pc, #56]	@ (8004968 <netif_set_up+0x50>)
 800492e:	480f      	ldr	r0, [pc, #60]	@ (800496c <netif_set_up+0x54>)
 8004930:	f009 fe2c 	bl	800e58c <iprintf>
 8004934:	e013      	b.n	800495e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10c      	bne.n	800495e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800494a:	f043 0301 	orr.w	r3, r3, #1
 800494e:	b2da      	uxtb	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004956:	2103      	movs	r1, #3
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f809 	bl	8004970 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	0800f7b0 	.word	0x0800f7b0
 8004968:	0800f938 	.word	0x0800f938
 800496c:	0800f800 	.word	0x0800f800

08004970 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <netif_issue_reports+0x20>
 8004982:	4b18      	ldr	r3, [pc, #96]	@ (80049e4 <netif_issue_reports+0x74>)
 8004984:	f240 326d 	movw	r2, #877	@ 0x36d
 8004988:	4917      	ldr	r1, [pc, #92]	@ (80049e8 <netif_issue_reports+0x78>)
 800498a:	4818      	ldr	r0, [pc, #96]	@ (80049ec <netif_issue_reports+0x7c>)
 800498c:	f009 fdfe 	bl	800e58c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d01e      	beq.n	80049dc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80049a4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d017      	beq.n	80049dc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d013      	beq.n	80049de <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3304      	adds	r3, #4
 80049ba:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00e      	beq.n	80049de <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3304      	adds	r3, #4
 80049d2:	4619      	mov	r1, r3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f008 f94d 	bl	800cc74 <etharp_request>
 80049da:	e000      	b.n	80049de <netif_issue_reports+0x6e>
    return;
 80049dc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	0800f7b0 	.word	0x0800f7b0
 80049e8:	0800f954 	.word	0x0800f954
 80049ec:	0800f800 	.word	0x0800f800

080049f0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d107      	bne.n	8004a0e <netif_set_down+0x1e>
 80049fe:	4b12      	ldr	r3, [pc, #72]	@ (8004a48 <netif_set_down+0x58>)
 8004a00:	f240 329b 	movw	r2, #923	@ 0x39b
 8004a04:	4911      	ldr	r1, [pc, #68]	@ (8004a4c <netif_set_down+0x5c>)
 8004a06:	4812      	ldr	r0, [pc, #72]	@ (8004a50 <netif_set_down+0x60>)
 8004a08:	f009 fdc0 	bl	800e58c <iprintf>
 8004a0c:	e019      	b.n	8004a42 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d012      	beq.n	8004a42 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f007 fcd7 	bl	800c3f0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	0800f7b0 	.word	0x0800f7b0
 8004a4c:	0800f978 	.word	0x0800f978
 8004a50:	0800f800 	.word	0x0800f800

08004a54 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d107      	bne.n	8004a72 <netif_set_link_up+0x1e>
 8004a62:	4b13      	ldr	r3, [pc, #76]	@ (8004ab0 <netif_set_link_up+0x5c>)
 8004a64:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8004a68:	4912      	ldr	r1, [pc, #72]	@ (8004ab4 <netif_set_link_up+0x60>)
 8004a6a:	4813      	ldr	r0, [pc, #76]	@ (8004ab8 <netif_set_link_up+0x64>)
 8004a6c:	f009 fd8e 	bl	800e58c <iprintf>
 8004a70:	e01b      	b.n	8004aaa <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d114      	bne.n	8004aaa <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004a86:	f043 0304 	orr.w	r3, r3, #4
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004a92:	2103      	movs	r1, #3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff ff6b 	bl	8004970 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <netif_set_link_up+0x56>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	0800f7b0 	.word	0x0800f7b0
 8004ab4:	0800f998 	.word	0x0800f998
 8004ab8:	0800f800 	.word	0x0800f800

08004abc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d107      	bne.n	8004ada <netif_set_link_down+0x1e>
 8004aca:	4b11      	ldr	r3, [pc, #68]	@ (8004b10 <netif_set_link_down+0x54>)
 8004acc:	f240 4206 	movw	r2, #1030	@ 0x406
 8004ad0:	4910      	ldr	r1, [pc, #64]	@ (8004b14 <netif_set_link_down+0x58>)
 8004ad2:	4811      	ldr	r0, [pc, #68]	@ (8004b18 <netif_set_link_down+0x5c>)
 8004ad4:	f009 fd5a 	bl	800e58c <iprintf>
 8004ad8:	e017      	b.n	8004b0a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d010      	beq.n	8004b0a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004aee:	f023 0304 	bic.w	r3, r3, #4
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <netif_set_link_down+0x4e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	0800f7b0 	.word	0x0800f7b0
 8004b14:	0800f9bc 	.word	0x0800f9bc
 8004b18:	0800f800 	.word	0x0800f800

08004b1c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	61da      	str	r2, [r3, #28]
  }
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b085      	sub	sp, #20
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004b4a:	f06f 030b 	mvn.w	r3, #11
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
	...

08004b5c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d013      	beq.n	8004b94 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba4 <netif_get_by_index+0x48>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	e00c      	b.n	8004b8e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	79fa      	ldrb	r2, [r7, #7]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d101      	bne.n	8004b88 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	e006      	b.n	8004b96 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1ef      	bne.n	8004b74 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20008238 	.word	0x20008238

08004ba8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004bae:	4b0c      	ldr	r3, [pc, #48]	@ (8004be0 <pbuf_free_ooseq+0x38>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004be4 <pbuf_free_ooseq+0x3c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	607b      	str	r3, [r7, #4]
 8004bba:	e00a      	b.n	8004bd2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f002 fbef 	bl	80073a8 <tcp_free_ooseq>
      return;
 8004bca:	e005      	b.n	8004bd8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	607b      	str	r3, [r7, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f1      	bne.n	8004bbc <pbuf_free_ooseq+0x14>
    }
  }
}
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20008241 	.word	0x20008241
 8004be4:	20008250 	.word	0x20008250

08004be8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004bec:	4b03      	ldr	r3, [pc, #12]	@ (8004bfc <pbuf_pool_is_empty+0x14>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004bf2:	bf00      	nop
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	20008241 	.word	0x20008241

08004c00 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	460b      	mov	r3, r1
 8004c10:	80fb      	strh	r3, [r7, #6]
 8004c12:	4613      	mov	r3, r2
 8004c14:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	88fa      	ldrh	r2, [r7, #6]
 8004c26:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88ba      	ldrh	r2, [r7, #4]
 8004c2c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004c2e:	8b3b      	ldrh	r3, [r7, #24]
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	7f3a      	ldrb	r2, [r7, #28]
 8004c3a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	73da      	strb	r2, [r3, #15]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08c      	sub	sp, #48	@ 0x30
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	71fb      	strb	r3, [r7, #7]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	80bb      	strh	r3, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004c6a:	887b      	ldrh	r3, [r7, #2]
 8004c6c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8004c70:	d07f      	beq.n	8004d72 <pbuf_alloc+0x11e>
 8004c72:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8004c76:	f300 80c8 	bgt.w	8004e0a <pbuf_alloc+0x1b6>
 8004c7a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8004c7e:	d010      	beq.n	8004ca2 <pbuf_alloc+0x4e>
 8004c80:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8004c84:	f300 80c1 	bgt.w	8004e0a <pbuf_alloc+0x1b6>
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d002      	beq.n	8004c92 <pbuf_alloc+0x3e>
 8004c8c:	2b41      	cmp	r3, #65	@ 0x41
 8004c8e:	f040 80bc 	bne.w	8004e0a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004c92:	887a      	ldrh	r2, [r7, #2]
 8004c94:	88bb      	ldrh	r3, [r7, #4]
 8004c96:	4619      	mov	r1, r3
 8004c98:	2000      	movs	r0, #0
 8004c9a:	f000 f8d1 	bl	8004e40 <pbuf_alloc_reference>
 8004c9e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8004ca0:	e0bd      	b.n	8004e1e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004caa:	88bb      	ldrh	r3, [r7, #4]
 8004cac:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004cae:	2008      	movs	r0, #8
 8004cb0:	f7ff fbce 	bl	8004450 <memp_malloc>
 8004cb4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d109      	bne.n	8004cd0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004cbc:	f7ff ff94 	bl	8004be8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <pbuf_alloc+0x78>
            pbuf_free(p);
 8004cc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cc8:	f000 faa8 	bl	800521c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	e0a7      	b.n	8004e20 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004cd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004cd2:	3303      	adds	r3, #3
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f023 0303 	bic.w	r3, r3, #3
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	8b7a      	ldrh	r2, [r7, #26]
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	bf28      	it	cs
 8004ce8:	4613      	movcs	r3, r2
 8004cea:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004cec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004cee:	3310      	adds	r3, #16
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3303      	adds	r3, #3
 8004cf6:	f023 0303 	bic.w	r3, r3, #3
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	89f9      	ldrh	r1, [r7, #14]
 8004cfe:	8b7a      	ldrh	r2, [r7, #26]
 8004d00:	2300      	movs	r3, #0
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	887b      	ldrh	r3, [r7, #2]
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4601      	mov	r1, r0
 8004d0c:	6938      	ldr	r0, [r7, #16]
 8004d0e:	f7ff ff77 	bl	8004c00 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d006      	beq.n	8004d2c <pbuf_alloc+0xd8>
 8004d1e:	4b42      	ldr	r3, [pc, #264]	@ (8004e28 <pbuf_alloc+0x1d4>)
 8004d20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d24:	4941      	ldr	r1, [pc, #260]	@ (8004e2c <pbuf_alloc+0x1d8>)
 8004d26:	4842      	ldr	r0, [pc, #264]	@ (8004e30 <pbuf_alloc+0x1dc>)
 8004d28:	f009 fc30 	bl	800e58c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004d2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004d2e:	3303      	adds	r3, #3
 8004d30:	f023 0303 	bic.w	r3, r3, #3
 8004d34:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8004d38:	d106      	bne.n	8004d48 <pbuf_alloc+0xf4>
 8004d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8004e28 <pbuf_alloc+0x1d4>)
 8004d3c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8004d40:	493c      	ldr	r1, [pc, #240]	@ (8004e34 <pbuf_alloc+0x1e0>)
 8004d42:	483b      	ldr	r0, [pc, #236]	@ (8004e30 <pbuf_alloc+0x1dc>)
 8004d44:	f009 fc22 	bl	800e58c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d102      	bne.n	8004d54 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d52:	e002      	b.n	8004d5a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004d5e:	8b7a      	ldrh	r2, [r7, #26]
 8004d60:	89fb      	ldrh	r3, [r7, #14]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8004d6a:	8b7b      	ldrh	r3, [r7, #26]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d19e      	bne.n	8004cae <pbuf_alloc+0x5a>
      break;
 8004d70:	e055      	b.n	8004e1e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004d72:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004d74:	3303      	adds	r3, #3
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	f023 0303 	bic.w	r3, r3, #3
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	88bb      	ldrh	r3, [r7, #4]
 8004d80:	3303      	adds	r3, #3
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	f023 0303 	bic.w	r3, r3, #3
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004d8e:	8b3b      	ldrh	r3, [r7, #24]
 8004d90:	3310      	adds	r3, #16
 8004d92:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004d94:	8b3a      	ldrh	r2, [r7, #24]
 8004d96:	88bb      	ldrh	r3, [r7, #4]
 8004d98:	3303      	adds	r3, #3
 8004d9a:	f023 0303 	bic.w	r3, r3, #3
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d306      	bcc.n	8004db0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004da2:	8afa      	ldrh	r2, [r7, #22]
 8004da4:	88bb      	ldrh	r3, [r7, #4]
 8004da6:	3303      	adds	r3, #3
 8004da8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d201      	bcs.n	8004db4 <pbuf_alloc+0x160>
        return NULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	e035      	b.n	8004e20 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004db4:	8afb      	ldrh	r3, [r7, #22]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff f9ba 	bl	8004130 <mem_malloc>
 8004dbc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <pbuf_alloc+0x174>
        return NULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e02b      	b.n	8004e20 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004dc8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004dca:	3310      	adds	r3, #16
 8004dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dce:	4413      	add	r3, r2
 8004dd0:	3303      	adds	r3, #3
 8004dd2:	f023 0303 	bic.w	r3, r3, #3
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	88b9      	ldrh	r1, [r7, #4]
 8004dda:	88ba      	ldrh	r2, [r7, #4]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	887b      	ldrh	r3, [r7, #2]
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	460b      	mov	r3, r1
 8004de6:	4601      	mov	r1, r0
 8004de8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004dea:	f7ff ff09 	bl	8004c00 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d010      	beq.n	8004e1c <pbuf_alloc+0x1c8>
 8004dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004e28 <pbuf_alloc+0x1d4>)
 8004dfc:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8004e00:	490d      	ldr	r1, [pc, #52]	@ (8004e38 <pbuf_alloc+0x1e4>)
 8004e02:	480b      	ldr	r0, [pc, #44]	@ (8004e30 <pbuf_alloc+0x1dc>)
 8004e04:	f009 fbc2 	bl	800e58c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004e08:	e008      	b.n	8004e1c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004e0a:	4b07      	ldr	r3, [pc, #28]	@ (8004e28 <pbuf_alloc+0x1d4>)
 8004e0c:	f240 1227 	movw	r2, #295	@ 0x127
 8004e10:	490a      	ldr	r1, [pc, #40]	@ (8004e3c <pbuf_alloc+0x1e8>)
 8004e12:	4807      	ldr	r0, [pc, #28]	@ (8004e30 <pbuf_alloc+0x1dc>)
 8004e14:	f009 fbba 	bl	800e58c <iprintf>
      return NULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	e001      	b.n	8004e20 <pbuf_alloc+0x1cc>
      break;
 8004e1c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3728      	adds	r7, #40	@ 0x28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	0800f9e0 	.word	0x0800f9e0
 8004e2c:	0800fa10 	.word	0x0800fa10
 8004e30:	0800fa40 	.word	0x0800fa40
 8004e34:	0800fa68 	.word	0x0800fa68
 8004e38:	0800fa9c 	.word	0x0800fa9c
 8004e3c:	0800fac8 	.word	0x0800fac8

08004e40 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	807b      	strh	r3, [r7, #2]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004e50:	883b      	ldrh	r3, [r7, #0]
 8004e52:	2b41      	cmp	r3, #65	@ 0x41
 8004e54:	d009      	beq.n	8004e6a <pbuf_alloc_reference+0x2a>
 8004e56:	883b      	ldrh	r3, [r7, #0]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d006      	beq.n	8004e6a <pbuf_alloc_reference+0x2a>
 8004e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e9c <pbuf_alloc_reference+0x5c>)
 8004e5e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8004e62:	490f      	ldr	r1, [pc, #60]	@ (8004ea0 <pbuf_alloc_reference+0x60>)
 8004e64:	480f      	ldr	r0, [pc, #60]	@ (8004ea4 <pbuf_alloc_reference+0x64>)
 8004e66:	f009 fb91 	bl	800e58c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004e6a:	2007      	movs	r0, #7
 8004e6c:	f7ff faf0 	bl	8004450 <memp_malloc>
 8004e70:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e00b      	b.n	8004e94 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004e7c:	8879      	ldrh	r1, [r7, #2]
 8004e7e:	887a      	ldrh	r2, [r7, #2]
 8004e80:	2300      	movs	r3, #0
 8004e82:	9301      	str	r3, [sp, #4]
 8004e84:	883b      	ldrh	r3, [r7, #0]
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f7ff feb7 	bl	8004c00 <pbuf_init_alloced_pbuf>
  return p;
 8004e92:	68fb      	ldr	r3, [r7, #12]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	0800f9e0 	.word	0x0800f9e0
 8004ea0:	0800fae4 	.word	0x0800fae4
 8004ea4:	0800fa40 	.word	0x0800fa40

08004ea8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	607b      	str	r3, [r7, #4]
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	73fb      	strb	r3, [r7, #15]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	81bb      	strh	r3, [r7, #12]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004ec0:	8a7b      	ldrh	r3, [r7, #18]
 8004ec2:	3303      	adds	r3, #3
 8004ec4:	f023 0203 	bic.w	r2, r3, #3
 8004ec8:	89bb      	ldrh	r3, [r7, #12]
 8004eca:	441a      	add	r2, r3
 8004ecc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d901      	bls.n	8004ed6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e018      	b.n	8004f08 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004edc:	8a7b      	ldrh	r3, [r7, #18]
 8004ede:	3303      	adds	r3, #3
 8004ee0:	f023 0303 	bic.w	r3, r3, #3
 8004ee4:	6a3a      	ldr	r2, [r7, #32]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	e001      	b.n	8004ef0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	89b9      	ldrh	r1, [r7, #12]
 8004ef4:	89ba      	ldrh	r2, [r7, #12]
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	897b      	ldrh	r3, [r7, #10]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	460b      	mov	r3, r1
 8004f00:	6979      	ldr	r1, [r7, #20]
 8004f02:	f7ff fe7d 	bl	8004c00 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004f06:	687b      	ldr	r3, [r7, #4]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <pbuf_realloc+0x20>
 8004f22:	4b3a      	ldr	r3, [pc, #232]	@ (800500c <pbuf_realloc+0xfc>)
 8004f24:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8004f28:	4939      	ldr	r1, [pc, #228]	@ (8005010 <pbuf_realloc+0x100>)
 8004f2a:	483a      	ldr	r0, [pc, #232]	@ (8005014 <pbuf_realloc+0x104>)
 8004f2c:	f009 fb2e 	bl	800e58c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	891b      	ldrh	r3, [r3, #8]
 8004f34:	887a      	ldrh	r2, [r7, #2]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d263      	bcs.n	8005002 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	891a      	ldrh	r2, [r3, #8]
 8004f3e:	887b      	ldrh	r3, [r7, #2]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004f44:	887b      	ldrh	r3, [r7, #2]
 8004f46:	817b      	strh	r3, [r7, #10]
  q = p;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004f4c:	e018      	b.n	8004f80 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	895b      	ldrh	r3, [r3, #10]
 8004f52:	897a      	ldrh	r2, [r7, #10]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	891a      	ldrh	r2, [r3, #8]
 8004f5c:	893b      	ldrh	r3, [r7, #8]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d106      	bne.n	8004f80 <pbuf_realloc+0x70>
 8004f72:	4b26      	ldr	r3, [pc, #152]	@ (800500c <pbuf_realloc+0xfc>)
 8004f74:	f240 12af 	movw	r2, #431	@ 0x1af
 8004f78:	4927      	ldr	r1, [pc, #156]	@ (8005018 <pbuf_realloc+0x108>)
 8004f7a:	4826      	ldr	r0, [pc, #152]	@ (8005014 <pbuf_realloc+0x104>)
 8004f7c:	f009 fb06 	bl	800e58c <iprintf>
  while (rem_len > q->len) {
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	895b      	ldrh	r3, [r3, #10]
 8004f84:	897a      	ldrh	r2, [r7, #10]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d8e1      	bhi.n	8004f4e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	7b1b      	ldrb	r3, [r3, #12]
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d121      	bne.n	8004fda <pbuf_realloc+0xca>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	895b      	ldrh	r3, [r3, #10]
 8004f9a:	897a      	ldrh	r2, [r7, #10]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d01c      	beq.n	8004fda <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	7b5b      	ldrb	r3, [r3, #13]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d116      	bne.n	8004fda <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	897b      	ldrh	r3, [r7, #10]
 8004fb8:	4413      	add	r3, r2
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f7fe ffba 	bl	8003f38 <mem_trim>
 8004fc4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d106      	bne.n	8004fda <pbuf_realloc+0xca>
 8004fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800500c <pbuf_realloc+0xfc>)
 8004fce:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8004fd2:	4912      	ldr	r1, [pc, #72]	@ (800501c <pbuf_realloc+0x10c>)
 8004fd4:	480f      	ldr	r0, [pc, #60]	@ (8005014 <pbuf_realloc+0x104>)
 8004fd6:	f009 fad9 	bl	800e58c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	897a      	ldrh	r2, [r7, #10]
 8004fde:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	895a      	ldrh	r2, [r3, #10]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d004      	beq.n	8004ffa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 f911 	bl	800521c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	e000      	b.n	8005004 <pbuf_realloc+0xf4>
    return;
 8005002:	bf00      	nop

}
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	0800f9e0 	.word	0x0800f9e0
 8005010:	0800faf8 	.word	0x0800faf8
 8005014:	0800fa40 	.word	0x0800fa40
 8005018:	0800fb10 	.word	0x0800fb10
 800501c:	0800fb28 	.word	0x0800fb28

08005020 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	4613      	mov	r3, r2
 800502c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d106      	bne.n	8005042 <pbuf_add_header_impl+0x22>
 8005034:	4b2b      	ldr	r3, [pc, #172]	@ (80050e4 <pbuf_add_header_impl+0xc4>)
 8005036:	f240 12df 	movw	r2, #479	@ 0x1df
 800503a:	492b      	ldr	r1, [pc, #172]	@ (80050e8 <pbuf_add_header_impl+0xc8>)
 800503c:	482b      	ldr	r0, [pc, #172]	@ (80050ec <pbuf_add_header_impl+0xcc>)
 800503e:	f009 faa5 	bl	800e58c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <pbuf_add_header_impl+0x30>
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800504e:	d301      	bcc.n	8005054 <pbuf_add_header_impl+0x34>
    return 1;
 8005050:	2301      	movs	r3, #1
 8005052:	e043      	b.n	80050dc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <pbuf_add_header_impl+0x3e>
    return 0;
 800505a:	2300      	movs	r3, #0
 800505c:	e03e      	b.n	80050dc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	891a      	ldrh	r2, [r3, #8]
 8005066:	8a7b      	ldrh	r3, [r7, #18]
 8005068:	4413      	add	r3, r2
 800506a:	b29b      	uxth	r3, r3
 800506c:	8a7a      	ldrh	r2, [r7, #18]
 800506e:	429a      	cmp	r2, r3
 8005070:	d901      	bls.n	8005076 <pbuf_add_header_impl+0x56>
    return 1;
 8005072:	2301      	movs	r3, #1
 8005074:	e032      	b.n	80050dc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	7b1b      	ldrb	r3, [r3, #12]
 800507a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800507c:	8a3b      	ldrh	r3, [r7, #16]
 800507e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00c      	beq.n	80050a0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	425b      	negs	r3, r3
 800508e:	4413      	add	r3, r2
 8005090:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3310      	adds	r3, #16
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	429a      	cmp	r2, r3
 800509a:	d20d      	bcs.n	80050b8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800509c:	2301      	movs	r3, #1
 800509e:	e01d      	b.n	80050dc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d006      	beq.n	80050b4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	425b      	negs	r3, r3
 80050ae:	4413      	add	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	e001      	b.n	80050b8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e011      	b.n	80050dc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	895a      	ldrh	r2, [r3, #10]
 80050c2:	8a7b      	ldrh	r3, [r7, #18]
 80050c4:	4413      	add	r3, r2
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	891a      	ldrh	r2, [r3, #8]
 80050d0:	8a7b      	ldrh	r3, [r7, #18]
 80050d2:	4413      	add	r3, r2
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	811a      	strh	r2, [r3, #8]


  return 0;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	0800f9e0 	.word	0x0800f9e0
 80050e8:	0800fb44 	.word	0x0800fb44
 80050ec:	0800fa40 	.word	0x0800fa40

080050f0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80050fa:	2200      	movs	r2, #0
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff ff8e 	bl	8005020 <pbuf_add_header_impl>
 8005104:	4603      	mov	r3, r0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d106      	bne.n	800512e <pbuf_remove_header+0x1e>
 8005120:	4b20      	ldr	r3, [pc, #128]	@ (80051a4 <pbuf_remove_header+0x94>)
 8005122:	f240 224b 	movw	r2, #587	@ 0x24b
 8005126:	4920      	ldr	r1, [pc, #128]	@ (80051a8 <pbuf_remove_header+0x98>)
 8005128:	4820      	ldr	r0, [pc, #128]	@ (80051ac <pbuf_remove_header+0x9c>)
 800512a:	f009 fa2f 	bl	800e58c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <pbuf_remove_header+0x2c>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800513a:	d301      	bcc.n	8005140 <pbuf_remove_header+0x30>
    return 1;
 800513c:	2301      	movs	r3, #1
 800513e:	e02c      	b.n	800519a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <pbuf_remove_header+0x3a>
    return 0;
 8005146:	2300      	movs	r3, #0
 8005148:	e027      	b.n	800519a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	895b      	ldrh	r3, [r3, #10]
 8005152:	89fa      	ldrh	r2, [r7, #14]
 8005154:	429a      	cmp	r2, r3
 8005156:	d908      	bls.n	800516a <pbuf_remove_header+0x5a>
 8005158:	4b12      	ldr	r3, [pc, #72]	@ (80051a4 <pbuf_remove_header+0x94>)
 800515a:	f240 2255 	movw	r2, #597	@ 0x255
 800515e:	4914      	ldr	r1, [pc, #80]	@ (80051b0 <pbuf_remove_header+0xa0>)
 8005160:	4812      	ldr	r0, [pc, #72]	@ (80051ac <pbuf_remove_header+0x9c>)
 8005162:	f009 fa13 	bl	800e58c <iprintf>
 8005166:	2301      	movs	r3, #1
 8005168:	e017      	b.n	800519a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	441a      	add	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	895a      	ldrh	r2, [r3, #10]
 8005180:	89fb      	ldrh	r3, [r7, #14]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	b29a      	uxth	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	891a      	ldrh	r2, [r3, #8]
 800518e:	89fb      	ldrh	r3, [r7, #14]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	b29a      	uxth	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	0800f9e0 	.word	0x0800f9e0
 80051a8:	0800fb44 	.word	0x0800fb44
 80051ac:	0800fa40 	.word	0x0800fa40
 80051b0:	0800fb50 	.word	0x0800fb50

080051b4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	807b      	strh	r3, [r7, #2]
 80051c0:	4613      	mov	r3, r2
 80051c2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80051c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	da08      	bge.n	80051de <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80051cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80051d0:	425b      	negs	r3, r3
 80051d2:	4619      	mov	r1, r3
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7ff ff9b 	bl	8005110 <pbuf_remove_header>
 80051da:	4603      	mov	r3, r0
 80051dc:	e007      	b.n	80051ee <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80051de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80051e2:	787a      	ldrb	r2, [r7, #1]
 80051e4:	4619      	mov	r1, r3
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff ff1a 	bl	8005020 <pbuf_add_header_impl>
 80051ec:	4603      	mov	r3, r0
  }
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	460b      	mov	r3, r1
 8005200:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005202:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005206:	2201      	movs	r2, #1
 8005208:	4619      	mov	r1, r3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff ffd2 	bl	80051b4 <pbuf_header_impl>
 8005210:	4603      	mov	r3, r0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10b      	bne.n	8005242 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d106      	bne.n	800523e <pbuf_free+0x22>
 8005230:	4b38      	ldr	r3, [pc, #224]	@ (8005314 <pbuf_free+0xf8>)
 8005232:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8005236:	4938      	ldr	r1, [pc, #224]	@ (8005318 <pbuf_free+0xfc>)
 8005238:	4838      	ldr	r0, [pc, #224]	@ (800531c <pbuf_free+0x100>)
 800523a:	f009 f9a7 	bl	800e58c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800523e:	2300      	movs	r3, #0
 8005240:	e063      	b.n	800530a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005246:	e05c      	b.n	8005302 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	7b9b      	ldrb	r3, [r3, #14]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d106      	bne.n	800525e <pbuf_free+0x42>
 8005250:	4b30      	ldr	r3, [pc, #192]	@ (8005314 <pbuf_free+0xf8>)
 8005252:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8005256:	4932      	ldr	r1, [pc, #200]	@ (8005320 <pbuf_free+0x104>)
 8005258:	4830      	ldr	r0, [pc, #192]	@ (800531c <pbuf_free+0x100>)
 800525a:	f009 f997 	bl	800e58c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	7b9b      	ldrb	r3, [r3, #14]
 8005262:	3b01      	subs	r3, #1
 8005264:	b2da      	uxtb	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	739a      	strb	r2, [r3, #14]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	7b9b      	ldrb	r3, [r3, #14]
 800526e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005270:	7dbb      	ldrb	r3, [r7, #22]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d143      	bne.n	80052fe <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	7b1b      	ldrb	r3, [r3, #12]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	7b5b      	ldrb	r3, [r3, #13]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d011      	beq.n	80052b6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <pbuf_free+0x90>
 800529e:	4b1d      	ldr	r3, [pc, #116]	@ (8005314 <pbuf_free+0xf8>)
 80052a0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80052a4:	491f      	ldr	r1, [pc, #124]	@ (8005324 <pbuf_free+0x108>)
 80052a6:	481d      	ldr	r0, [pc, #116]	@ (800531c <pbuf_free+0x100>)
 80052a8:	f009 f970 	bl	800e58c <iprintf>
        pc->custom_free_function(p);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	4798      	blx	r3
 80052b4:	e01d      	b.n	80052f2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d104      	bne.n	80052c6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	2008      	movs	r0, #8
 80052c0:	f7ff f936 	bl	8004530 <memp_free>
 80052c4:	e015      	b.n	80052f2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d104      	bne.n	80052d6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	2007      	movs	r0, #7
 80052d0:	f7ff f92e 	bl	8004530 <memp_free>
 80052d4:	e00d      	b.n	80052f2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d103      	bne.n	80052e4 <pbuf_free+0xc8>
          mem_free(p);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7fe fdc1 	bl	8003e64 <mem_free>
 80052e2:	e006      	b.n	80052f2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80052e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005314 <pbuf_free+0xf8>)
 80052e6:	f240 320f 	movw	r2, #783	@ 0x30f
 80052ea:	490f      	ldr	r1, [pc, #60]	@ (8005328 <pbuf_free+0x10c>)
 80052ec:	480b      	ldr	r0, [pc, #44]	@ (800531c <pbuf_free+0x100>)
 80052ee:	f009 f94d 	bl	800e58c <iprintf>
        }
      }
      count++;
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
 80052f4:	3301      	adds	r3, #1
 80052f6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	607b      	str	r3, [r7, #4]
 80052fc:	e001      	b.n	8005302 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80052fe:	2300      	movs	r3, #0
 8005300:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d19f      	bne.n	8005248 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005308:	7dfb      	ldrb	r3, [r7, #23]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	0800f9e0 	.word	0x0800f9e0
 8005318:	0800fb44 	.word	0x0800fb44
 800531c:	0800fa40 	.word	0x0800fa40
 8005320:	0800fb70 	.word	0x0800fb70
 8005324:	0800fb88 	.word	0x0800fb88
 8005328:	0800fbac 	.word	0x0800fbac

0800532c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005338:	e005      	b.n	8005346 <pbuf_clen+0x1a>
    ++len;
 800533a:	89fb      	ldrh	r3, [r7, #14]
 800533c:	3301      	adds	r3, #1
 800533e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f6      	bne.n	800533a <pbuf_clen+0xe>
  }
  return len;
 800534c:	89fb      	ldrh	r3, [r7, #14]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d010      	beq.n	800538c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	7b9b      	ldrb	r3, [r3, #14]
 800536e:	3301      	adds	r3, #1
 8005370:	b2da      	uxtb	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	7b9b      	ldrb	r3, [r3, #14]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <pbuf_ref+0x30>
 800537e:	4b05      	ldr	r3, [pc, #20]	@ (8005394 <pbuf_ref+0x38>)
 8005380:	f240 3242 	movw	r2, #834	@ 0x342
 8005384:	4904      	ldr	r1, [pc, #16]	@ (8005398 <pbuf_ref+0x3c>)
 8005386:	4805      	ldr	r0, [pc, #20]	@ (800539c <pbuf_ref+0x40>)
 8005388:	f009 f900 	bl	800e58c <iprintf>
  }
}
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	0800f9e0 	.word	0x0800f9e0
 8005398:	0800fbc0 	.word	0x0800fbc0
 800539c:	0800fa40 	.word	0x0800fa40

080053a0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <pbuf_cat+0x16>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d107      	bne.n	80053c6 <pbuf_cat+0x26>
 80053b6:	4b20      	ldr	r3, [pc, #128]	@ (8005438 <pbuf_cat+0x98>)
 80053b8:	f240 3259 	movw	r2, #857	@ 0x359
 80053bc:	491f      	ldr	r1, [pc, #124]	@ (800543c <pbuf_cat+0x9c>)
 80053be:	4820      	ldr	r0, [pc, #128]	@ (8005440 <pbuf_cat+0xa0>)
 80053c0:	f009 f8e4 	bl	800e58c <iprintf>
 80053c4:	e034      	b.n	8005430 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	e00a      	b.n	80053e2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	891a      	ldrh	r2, [r3, #8]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	891b      	ldrh	r3, [r3, #8]
 80053d4:	4413      	add	r3, r2
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f0      	bne.n	80053cc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	891a      	ldrh	r2, [r3, #8]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	895b      	ldrh	r3, [r3, #10]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d006      	beq.n	8005404 <pbuf_cat+0x64>
 80053f6:	4b10      	ldr	r3, [pc, #64]	@ (8005438 <pbuf_cat+0x98>)
 80053f8:	f240 3262 	movw	r2, #866	@ 0x362
 80053fc:	4911      	ldr	r1, [pc, #68]	@ (8005444 <pbuf_cat+0xa4>)
 80053fe:	4810      	ldr	r0, [pc, #64]	@ (8005440 <pbuf_cat+0xa0>)
 8005400:	f009 f8c4 	bl	800e58c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d006      	beq.n	800541a <pbuf_cat+0x7a>
 800540c:	4b0a      	ldr	r3, [pc, #40]	@ (8005438 <pbuf_cat+0x98>)
 800540e:	f240 3263 	movw	r2, #867	@ 0x363
 8005412:	490d      	ldr	r1, [pc, #52]	@ (8005448 <pbuf_cat+0xa8>)
 8005414:	480a      	ldr	r0, [pc, #40]	@ (8005440 <pbuf_cat+0xa0>)
 8005416:	f009 f8b9 	bl	800e58c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	891a      	ldrh	r2, [r3, #8]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	891b      	ldrh	r3, [r3, #8]
 8005422:	4413      	add	r3, r2
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	0800f9e0 	.word	0x0800f9e0
 800543c:	0800fbd4 	.word	0x0800fbd4
 8005440:	0800fa40 	.word	0x0800fa40
 8005444:	0800fc0c 	.word	0x0800fc0c
 8005448:	0800fc3c 	.word	0x0800fc3c

0800544c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff ffa1 	bl	80053a0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800545e:	6838      	ldr	r0, [r7, #0]
 8005460:	f7ff ff7c 	bl	800535c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005464:	bf00      	nop
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005476:	2300      	movs	r3, #0
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	2300      	movs	r3, #0
 800547c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d008      	beq.n	8005496 <pbuf_copy+0x2a>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <pbuf_copy+0x2a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	891a      	ldrh	r2, [r3, #8]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	891b      	ldrh	r3, [r3, #8]
 8005492:	429a      	cmp	r2, r3
 8005494:	d209      	bcs.n	80054aa <pbuf_copy+0x3e>
 8005496:	4b57      	ldr	r3, [pc, #348]	@ (80055f4 <pbuf_copy+0x188>)
 8005498:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800549c:	4956      	ldr	r1, [pc, #344]	@ (80055f8 <pbuf_copy+0x18c>)
 800549e:	4857      	ldr	r0, [pc, #348]	@ (80055fc <pbuf_copy+0x190>)
 80054a0:	f009 f874 	bl	800e58c <iprintf>
 80054a4:	f06f 030f 	mvn.w	r3, #15
 80054a8:	e09f      	b.n	80055ea <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	895b      	ldrh	r3, [r3, #10]
 80054ae:	461a      	mov	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	1ad2      	subs	r2, r2, r3
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	895b      	ldrh	r3, [r3, #10]
 80054b8:	4619      	mov	r1, r3
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1acb      	subs	r3, r1, r3
 80054be:	429a      	cmp	r2, r3
 80054c0:	d306      	bcc.n	80054d0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	895b      	ldrh	r3, [r3, #10]
 80054c6:	461a      	mov	r2, r3
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	e005      	b.n	80054dc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	895b      	ldrh	r3, [r3, #10]
 80054d4:	461a      	mov	r2, r3
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	18d0      	adds	r0, r2, r3
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4413      	add	r3, r2
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4619      	mov	r1, r3
 80054f0:	f009 f927 	bl	800e742 <memcpy>
    offset_to += len;
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4413      	add	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	895b      	ldrh	r3, [r3, #10]
 8005508:	461a      	mov	r2, r3
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	4293      	cmp	r3, r2
 800550e:	d906      	bls.n	800551e <pbuf_copy+0xb2>
 8005510:	4b38      	ldr	r3, [pc, #224]	@ (80055f4 <pbuf_copy+0x188>)
 8005512:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8005516:	493a      	ldr	r1, [pc, #232]	@ (8005600 <pbuf_copy+0x194>)
 8005518:	4838      	ldr	r0, [pc, #224]	@ (80055fc <pbuf_copy+0x190>)
 800551a:	f009 f837 	bl	800e58c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	895b      	ldrh	r3, [r3, #10]
 8005522:	461a      	mov	r2, r3
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	4293      	cmp	r3, r2
 8005528:	d906      	bls.n	8005538 <pbuf_copy+0xcc>
 800552a:	4b32      	ldr	r3, [pc, #200]	@ (80055f4 <pbuf_copy+0x188>)
 800552c:	f240 32da 	movw	r2, #986	@ 0x3da
 8005530:	4934      	ldr	r1, [pc, #208]	@ (8005604 <pbuf_copy+0x198>)
 8005532:	4832      	ldr	r0, [pc, #200]	@ (80055fc <pbuf_copy+0x190>)
 8005534:	f009 f82a 	bl	800e58c <iprintf>
    if (offset_from >= p_from->len) {
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	895b      	ldrh	r3, [r3, #10]
 800553c:	461a      	mov	r2, r3
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	4293      	cmp	r3, r2
 8005542:	d304      	bcc.n	800554e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	895b      	ldrh	r3, [r3, #10]
 8005552:	461a      	mov	r2, r3
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	4293      	cmp	r3, r2
 8005558:	d114      	bne.n	8005584 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800555a:	2300      	movs	r3, #0
 800555c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10c      	bne.n	8005584 <pbuf_copy+0x118>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d009      	beq.n	8005584 <pbuf_copy+0x118>
 8005570:	4b20      	ldr	r3, [pc, #128]	@ (80055f4 <pbuf_copy+0x188>)
 8005572:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8005576:	4924      	ldr	r1, [pc, #144]	@ (8005608 <pbuf_copy+0x19c>)
 8005578:	4820      	ldr	r0, [pc, #128]	@ (80055fc <pbuf_copy+0x190>)
 800557a:	f009 f807 	bl	800e58c <iprintf>
 800557e:	f06f 030f 	mvn.w	r3, #15
 8005582:	e032      	b.n	80055ea <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d013      	beq.n	80055b2 <pbuf_copy+0x146>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	895a      	ldrh	r2, [r3, #10]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	891b      	ldrh	r3, [r3, #8]
 8005592:	429a      	cmp	r2, r3
 8005594:	d10d      	bne.n	80055b2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d009      	beq.n	80055b2 <pbuf_copy+0x146>
 800559e:	4b15      	ldr	r3, [pc, #84]	@ (80055f4 <pbuf_copy+0x188>)
 80055a0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80055a4:	4919      	ldr	r1, [pc, #100]	@ (800560c <pbuf_copy+0x1a0>)
 80055a6:	4815      	ldr	r0, [pc, #84]	@ (80055fc <pbuf_copy+0x190>)
 80055a8:	f008 fff0 	bl	800e58c <iprintf>
 80055ac:	f06f 0305 	mvn.w	r3, #5
 80055b0:	e01b      	b.n	80055ea <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d013      	beq.n	80055e0 <pbuf_copy+0x174>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	895a      	ldrh	r2, [r3, #10]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	891b      	ldrh	r3, [r3, #8]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d10d      	bne.n	80055e0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d009      	beq.n	80055e0 <pbuf_copy+0x174>
 80055cc:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <pbuf_copy+0x188>)
 80055ce:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80055d2:	490e      	ldr	r1, [pc, #56]	@ (800560c <pbuf_copy+0x1a0>)
 80055d4:	4809      	ldr	r0, [pc, #36]	@ (80055fc <pbuf_copy+0x190>)
 80055d6:	f008 ffd9 	bl	800e58c <iprintf>
 80055da:	f06f 0305 	mvn.w	r3, #5
 80055de:	e004      	b.n	80055ea <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f47f af61 	bne.w	80054aa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	0800f9e0 	.word	0x0800f9e0
 80055f8:	0800fc88 	.word	0x0800fc88
 80055fc:	0800fa40 	.word	0x0800fa40
 8005600:	0800fcb8 	.word	0x0800fcb8
 8005604:	0800fcd0 	.word	0x0800fcd0
 8005608:	0800fcec 	.word	0x0800fcec
 800560c:	0800fcfc 	.word	0x0800fcfc

08005610 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	4611      	mov	r1, r2
 800561c:	461a      	mov	r2, r3
 800561e:	460b      	mov	r3, r1
 8005620:	80fb      	strh	r3, [r7, #6]
 8005622:	4613      	mov	r3, r2
 8005624:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005626:	2300      	movs	r3, #0
 8005628:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d108      	bne.n	8005646 <pbuf_copy_partial+0x36>
 8005634:	4b2b      	ldr	r3, [pc, #172]	@ (80056e4 <pbuf_copy_partial+0xd4>)
 8005636:	f240 420a 	movw	r2, #1034	@ 0x40a
 800563a:	492b      	ldr	r1, [pc, #172]	@ (80056e8 <pbuf_copy_partial+0xd8>)
 800563c:	482b      	ldr	r0, [pc, #172]	@ (80056ec <pbuf_copy_partial+0xdc>)
 800563e:	f008 ffa5 	bl	800e58c <iprintf>
 8005642:	2300      	movs	r3, #0
 8005644:	e04a      	b.n	80056dc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d108      	bne.n	800565e <pbuf_copy_partial+0x4e>
 800564c:	4b25      	ldr	r3, [pc, #148]	@ (80056e4 <pbuf_copy_partial+0xd4>)
 800564e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8005652:	4927      	ldr	r1, [pc, #156]	@ (80056f0 <pbuf_copy_partial+0xe0>)
 8005654:	4825      	ldr	r0, [pc, #148]	@ (80056ec <pbuf_copy_partial+0xdc>)
 8005656:	f008 ff99 	bl	800e58c <iprintf>
 800565a:	2300      	movs	r3, #0
 800565c:	e03e      	b.n	80056dc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	61fb      	str	r3, [r7, #28]
 8005662:	e034      	b.n	80056ce <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005664:	88bb      	ldrh	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <pbuf_copy_partial+0x70>
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	895b      	ldrh	r3, [r3, #10]
 800566e:	88ba      	ldrh	r2, [r7, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	d305      	bcc.n	8005680 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	895b      	ldrh	r3, [r3, #10]
 8005678:	88ba      	ldrh	r2, [r7, #4]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	80bb      	strh	r3, [r7, #4]
 800567e:	e023      	b.n	80056c8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	895a      	ldrh	r2, [r3, #10]
 8005684:	88bb      	ldrh	r3, [r7, #4]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800568a:	8b3a      	ldrh	r2, [r7, #24]
 800568c:	88fb      	ldrh	r3, [r7, #6]
 800568e:	429a      	cmp	r2, r3
 8005690:	d901      	bls.n	8005696 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005696:	8b7b      	ldrh	r3, [r7, #26]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	18d0      	adds	r0, r2, r3
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	88bb      	ldrh	r3, [r7, #4]
 80056a2:	4413      	add	r3, r2
 80056a4:	8b3a      	ldrh	r2, [r7, #24]
 80056a6:	4619      	mov	r1, r3
 80056a8:	f009 f84b 	bl	800e742 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80056ac:	8afa      	ldrh	r2, [r7, #22]
 80056ae:	8b3b      	ldrh	r3, [r7, #24]
 80056b0:	4413      	add	r3, r2
 80056b2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80056b4:	8b7a      	ldrh	r2, [r7, #26]
 80056b6:	8b3b      	ldrh	r3, [r7, #24]
 80056b8:	4413      	add	r3, r2
 80056ba:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80056bc:	88fa      	ldrh	r2, [r7, #6]
 80056be:	8b3b      	ldrh	r3, [r7, #24]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	88fb      	ldrh	r3, [r7, #6]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <pbuf_copy_partial+0xca>
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1c4      	bne.n	8005664 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80056da:	8afb      	ldrh	r3, [r7, #22]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3720      	adds	r7, #32
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	0800f9e0 	.word	0x0800f9e0
 80056e8:	0800fd28 	.word	0x0800fd28
 80056ec:	0800fa40 	.word	0x0800fa40
 80056f0:	0800fd48 	.word	0x0800fd48

080056f4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	603a      	str	r2, [r7, #0]
 80056fe:	71fb      	strb	r3, [r7, #7]
 8005700:	460b      	mov	r3, r1
 8005702:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	8919      	ldrh	r1, [r3, #8]
 8005708:	88ba      	ldrh	r2, [r7, #4]
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff faa1 	bl	8004c54 <pbuf_alloc>
 8005712:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <pbuf_clone+0x2a>
    return NULL;
 800571a:	2300      	movs	r3, #0
 800571c:	e011      	b.n	8005742 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800571e:	6839      	ldr	r1, [r7, #0]
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f7ff fea3 	bl	800546c <pbuf_copy>
 8005726:	4603      	mov	r3, r0
 8005728:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800572a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d006      	beq.n	8005740 <pbuf_clone+0x4c>
 8005732:	4b06      	ldr	r3, [pc, #24]	@ (800574c <pbuf_clone+0x58>)
 8005734:	f240 5224 	movw	r2, #1316	@ 0x524
 8005738:	4905      	ldr	r1, [pc, #20]	@ (8005750 <pbuf_clone+0x5c>)
 800573a:	4806      	ldr	r0, [pc, #24]	@ (8005754 <pbuf_clone+0x60>)
 800573c:	f008 ff26 	bl	800e58c <iprintf>
  return q;
 8005740:	68fb      	ldr	r3, [r7, #12]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	0800f9e0 	.word	0x0800f9e0
 8005750:	0800fe54 	.word	0x0800fe54
 8005754:	0800fa40 	.word	0x0800fa40

08005758 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800575c:	f008 fe16 	bl	800e38c <rand>
 8005760:	4603      	mov	r3, r0
 8005762:	b29b      	uxth	r3, r3
 8005764:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005768:	b29b      	uxth	r3, r3
 800576a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800576e:	b29a      	uxth	r2, r3
 8005770:	4b01      	ldr	r3, [pc, #4]	@ (8005778 <tcp_init+0x20>)
 8005772:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005774:	bf00      	nop
 8005776:	bd80      	pop	{r7, pc}
 8005778:	20000020 	.word	0x20000020

0800577c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	7d1b      	ldrb	r3, [r3, #20]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d105      	bne.n	8005798 <tcp_free+0x1c>
 800578c:	4b06      	ldr	r3, [pc, #24]	@ (80057a8 <tcp_free+0x2c>)
 800578e:	22d4      	movs	r2, #212	@ 0xd4
 8005790:	4906      	ldr	r1, [pc, #24]	@ (80057ac <tcp_free+0x30>)
 8005792:	4807      	ldr	r0, [pc, #28]	@ (80057b0 <tcp_free+0x34>)
 8005794:	f008 fefa 	bl	800e58c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	2001      	movs	r0, #1
 800579c:	f7fe fec8 	bl	8004530 <memp_free>
}
 80057a0:	bf00      	nop
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	0800fee0 	.word	0x0800fee0
 80057ac:	0800ff10 	.word	0x0800ff10
 80057b0:	0800ff24 	.word	0x0800ff24

080057b4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	7d1b      	ldrb	r3, [r3, #20]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d105      	bne.n	80057d0 <tcp_free_listen+0x1c>
 80057c4:	4b06      	ldr	r3, [pc, #24]	@ (80057e0 <tcp_free_listen+0x2c>)
 80057c6:	22df      	movs	r2, #223	@ 0xdf
 80057c8:	4906      	ldr	r1, [pc, #24]	@ (80057e4 <tcp_free_listen+0x30>)
 80057ca:	4807      	ldr	r0, [pc, #28]	@ (80057e8 <tcp_free_listen+0x34>)
 80057cc:	f008 fede 	bl	800e58c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	2002      	movs	r0, #2
 80057d4:	f7fe feac 	bl	8004530 <memp_free>
}
 80057d8:	bf00      	nop
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	0800fee0 	.word	0x0800fee0
 80057e4:	0800ff4c 	.word	0x0800ff4c
 80057e8:	0800ff24 	.word	0x0800ff24

080057ec <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80057f0:	f001 f85e 	bl	80068b0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80057f4:	4b07      	ldr	r3, [pc, #28]	@ (8005814 <tcp_tmr+0x28>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	3301      	adds	r3, #1
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	4b05      	ldr	r3, [pc, #20]	@ (8005814 <tcp_tmr+0x28>)
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	4b04      	ldr	r3, [pc, #16]	@ (8005814 <tcp_tmr+0x28>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800580c:	f000 fd0e 	bl	800622c <tcp_slowtmr>
  }
}
 8005810:	bf00      	nop
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20008259 	.word	0x20008259

08005818 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d105      	bne.n	8005834 <tcp_remove_listener+0x1c>
 8005828:	4b0d      	ldr	r3, [pc, #52]	@ (8005860 <tcp_remove_listener+0x48>)
 800582a:	22ff      	movs	r2, #255	@ 0xff
 800582c:	490d      	ldr	r1, [pc, #52]	@ (8005864 <tcp_remove_listener+0x4c>)
 800582e:	480e      	ldr	r0, [pc, #56]	@ (8005868 <tcp_remove_listener+0x50>)
 8005830:	f008 feac 	bl	800e58c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	e00a      	b.n	8005850 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d102      	bne.n	800584a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f1      	bne.n	800583a <tcp_remove_listener+0x22>
    }
  }
}
 8005856:	bf00      	nop
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	0800fee0 	.word	0x0800fee0
 8005864:	0800ff68 	.word	0x0800ff68
 8005868:	0800ff24 	.word	0x0800ff24

0800586c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <tcp_listen_closed+0x1c>
 800587a:	4b14      	ldr	r3, [pc, #80]	@ (80058cc <tcp_listen_closed+0x60>)
 800587c:	f240 1211 	movw	r2, #273	@ 0x111
 8005880:	4913      	ldr	r1, [pc, #76]	@ (80058d0 <tcp_listen_closed+0x64>)
 8005882:	4814      	ldr	r0, [pc, #80]	@ (80058d4 <tcp_listen_closed+0x68>)
 8005884:	f008 fe82 	bl	800e58c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	7d1b      	ldrb	r3, [r3, #20]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d006      	beq.n	800589e <tcp_listen_closed+0x32>
 8005890:	4b0e      	ldr	r3, [pc, #56]	@ (80058cc <tcp_listen_closed+0x60>)
 8005892:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8005896:	4910      	ldr	r1, [pc, #64]	@ (80058d8 <tcp_listen_closed+0x6c>)
 8005898:	480e      	ldr	r0, [pc, #56]	@ (80058d4 <tcp_listen_closed+0x68>)
 800589a:	f008 fe77 	bl	800e58c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800589e:	2301      	movs	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	e00b      	b.n	80058bc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80058a4:	4a0d      	ldr	r2, [pc, #52]	@ (80058dc <tcp_listen_closed+0x70>)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff ffb1 	bl	8005818 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3301      	adds	r3, #1
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d9f0      	bls.n	80058a4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80058c2:	bf00      	nop
 80058c4:	bf00      	nop
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	0800fee0 	.word	0x0800fee0
 80058d0:	0800ff90 	.word	0x0800ff90
 80058d4:	0800ff24 	.word	0x0800ff24
 80058d8:	0800ff9c 	.word	0x0800ff9c
 80058dc:	08011eb8 	.word	0x08011eb8

080058e0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80058e0:	b5b0      	push	{r4, r5, r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af04      	add	r7, sp, #16
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <tcp_close_shutdown+0x20>
 80058f2:	4b63      	ldr	r3, [pc, #396]	@ (8005a80 <tcp_close_shutdown+0x1a0>)
 80058f4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80058f8:	4962      	ldr	r1, [pc, #392]	@ (8005a84 <tcp_close_shutdown+0x1a4>)
 80058fa:	4863      	ldr	r0, [pc, #396]	@ (8005a88 <tcp_close_shutdown+0x1a8>)
 80058fc:	f008 fe46 	bl	800e58c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d066      	beq.n	80059d4 <tcp_close_shutdown+0xf4>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	7d1b      	ldrb	r3, [r3, #20]
 800590a:	2b04      	cmp	r3, #4
 800590c:	d003      	beq.n	8005916 <tcp_close_shutdown+0x36>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	7d1b      	ldrb	r3, [r3, #20]
 8005912:	2b07      	cmp	r3, #7
 8005914:	d15e      	bne.n	80059d4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800591a:	2b00      	cmp	r3, #0
 800591c:	d104      	bne.n	8005928 <tcp_close_shutdown+0x48>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005922:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8005926:	d055      	beq.n	80059d4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	8b5b      	ldrh	r3, [r3, #26]
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	d106      	bne.n	8005942 <tcp_close_shutdown+0x62>
 8005934:	4b52      	ldr	r3, [pc, #328]	@ (8005a80 <tcp_close_shutdown+0x1a0>)
 8005936:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800593a:	4954      	ldr	r1, [pc, #336]	@ (8005a8c <tcp_close_shutdown+0x1ac>)
 800593c:	4852      	ldr	r0, [pc, #328]	@ (8005a88 <tcp_close_shutdown+0x1a8>)
 800593e:	f008 fe25 	bl	800e58c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800594a:	687d      	ldr	r5, [r7, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	8ad2      	ldrh	r2, [r2, #22]
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	8b09      	ldrh	r1, [r1, #24]
 8005958:	9102      	str	r1, [sp, #8]
 800595a:	9201      	str	r2, [sp, #4]
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	462b      	mov	r3, r5
 8005960:	4622      	mov	r2, r4
 8005962:	4601      	mov	r1, r0
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f005 fd85 	bl	800b474 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f001 fb68 	bl	8007040 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005970:	4b47      	ldr	r3, [pc, #284]	@ (8005a90 <tcp_close_shutdown+0x1b0>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	429a      	cmp	r2, r3
 8005978:	d105      	bne.n	8005986 <tcp_close_shutdown+0xa6>
 800597a:	4b45      	ldr	r3, [pc, #276]	@ (8005a90 <tcp_close_shutdown+0x1b0>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	4a43      	ldr	r2, [pc, #268]	@ (8005a90 <tcp_close_shutdown+0x1b0>)
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	e013      	b.n	80059ae <tcp_close_shutdown+0xce>
 8005986:	4b42      	ldr	r3, [pc, #264]	@ (8005a90 <tcp_close_shutdown+0x1b0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	e00c      	b.n	80059a8 <tcp_close_shutdown+0xc8>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	429a      	cmp	r2, r3
 8005996:	d104      	bne.n	80059a2 <tcp_close_shutdown+0xc2>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	60da      	str	r2, [r3, #12]
 80059a0:	e005      	b.n	80059ae <tcp_close_shutdown+0xce>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1ef      	bne.n	800598e <tcp_close_shutdown+0xae>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	60da      	str	r2, [r3, #12]
 80059b4:	4b37      	ldr	r3, [pc, #220]	@ (8005a94 <tcp_close_shutdown+0x1b4>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80059ba:	4b37      	ldr	r3, [pc, #220]	@ (8005a98 <tcp_close_shutdown+0x1b8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d102      	bne.n	80059ca <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80059c4:	f003 fffc 	bl	80099c0 <tcp_trigger_input_pcb_close>
 80059c8:	e002      	b.n	80059d0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7ff fed6 	bl	800577c <tcp_free>
      }
      return ERR_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	e050      	b.n	8005a76 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	7d1b      	ldrb	r3, [r3, #20]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d03b      	beq.n	8005a54 <tcp_close_shutdown+0x174>
 80059dc:	2b02      	cmp	r3, #2
 80059de:	dc44      	bgt.n	8005a6a <tcp_close_shutdown+0x18a>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <tcp_close_shutdown+0x10a>
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d02a      	beq.n	8005a3e <tcp_close_shutdown+0x15e>
 80059e8:	e03f      	b.n	8005a6a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	8adb      	ldrh	r3, [r3, #22]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d021      	beq.n	8005a36 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80059f2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a9c <tcp_close_shutdown+0x1bc>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d105      	bne.n	8005a08 <tcp_close_shutdown+0x128>
 80059fc:	4b27      	ldr	r3, [pc, #156]	@ (8005a9c <tcp_close_shutdown+0x1bc>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	4a26      	ldr	r2, [pc, #152]	@ (8005a9c <tcp_close_shutdown+0x1bc>)
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	e013      	b.n	8005a30 <tcp_close_shutdown+0x150>
 8005a08:	4b24      	ldr	r3, [pc, #144]	@ (8005a9c <tcp_close_shutdown+0x1bc>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	60bb      	str	r3, [r7, #8]
 8005a0e:	e00c      	b.n	8005a2a <tcp_close_shutdown+0x14a>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d104      	bne.n	8005a24 <tcp_close_shutdown+0x144>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	60da      	str	r2, [r3, #12]
 8005a22:	e005      	b.n	8005a30 <tcp_close_shutdown+0x150>
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	60bb      	str	r3, [r7, #8]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1ef      	bne.n	8005a10 <tcp_close_shutdown+0x130>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff fea0 	bl	800577c <tcp_free>
      break;
 8005a3c:	e01a      	b.n	8005a74 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff ff14 	bl	800586c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	4816      	ldr	r0, [pc, #88]	@ (8005aa0 <tcp_close_shutdown+0x1c0>)
 8005a48:	f001 fb4a 	bl	80070e0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff feb1 	bl	80057b4 <tcp_free_listen>
      break;
 8005a52:	e00f      	b.n	8005a74 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	480e      	ldr	r0, [pc, #56]	@ (8005a90 <tcp_close_shutdown+0x1b0>)
 8005a58:	f001 fb42 	bl	80070e0 <tcp_pcb_remove>
 8005a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a94 <tcp_close_shutdown+0x1b4>)
 8005a5e:	2201      	movs	r2, #1
 8005a60:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7ff fe8a 	bl	800577c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005a68:	e004      	b.n	8005a74 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f81a 	bl	8005aa4 <tcp_close_shutdown_fin>
 8005a70:	4603      	mov	r3, r0
 8005a72:	e000      	b.n	8005a76 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	0800fee0 	.word	0x0800fee0
 8005a84:	0800ffb4 	.word	0x0800ffb4
 8005a88:	0800ff24 	.word	0x0800ff24
 8005a8c:	0800ffd4 	.word	0x0800ffd4
 8005a90:	20008250 	.word	0x20008250
 8005a94:	20008258 	.word	0x20008258
 8005a98:	20008290 	.word	0x20008290
 8005a9c:	20008248 	.word	0x20008248
 8005aa0:	2000824c 	.word	0x2000824c

08005aa4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <tcp_close_shutdown_fin+0x1c>
 8005ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8005b6c <tcp_close_shutdown_fin+0xc8>)
 8005ab4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8005ab8:	492d      	ldr	r1, [pc, #180]	@ (8005b70 <tcp_close_shutdown_fin+0xcc>)
 8005aba:	482e      	ldr	r0, [pc, #184]	@ (8005b74 <tcp_close_shutdown_fin+0xd0>)
 8005abc:	f008 fd66 	bl	800e58c <iprintf>

  switch (pcb->state) {
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	7d1b      	ldrb	r3, [r3, #20]
 8005ac4:	2b07      	cmp	r3, #7
 8005ac6:	d020      	beq.n	8005b0a <tcp_close_shutdown_fin+0x66>
 8005ac8:	2b07      	cmp	r3, #7
 8005aca:	dc2b      	bgt.n	8005b24 <tcp_close_shutdown_fin+0x80>
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d002      	beq.n	8005ad6 <tcp_close_shutdown_fin+0x32>
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	d00d      	beq.n	8005af0 <tcp_close_shutdown_fin+0x4c>
 8005ad4:	e026      	b.n	8005b24 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f004 fdda 	bl	800a690 <tcp_send_fin>
 8005adc:	4603      	mov	r3, r0
 8005ade:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d11f      	bne.n	8005b28 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2205      	movs	r2, #5
 8005aec:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005aee:	e01b      	b.n	8005b28 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f004 fdcd 	bl	800a690 <tcp_send_fin>
 8005af6:	4603      	mov	r3, r0
 8005af8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d114      	bne.n	8005b2c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2205      	movs	r2, #5
 8005b06:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005b08:	e010      	b.n	8005b2c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f004 fdc0 	bl	800a690 <tcp_send_fin>
 8005b10:	4603      	mov	r3, r0
 8005b12:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d109      	bne.n	8005b30 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2209      	movs	r2, #9
 8005b20:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005b22:	e005      	b.n	8005b30 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	e01c      	b.n	8005b62 <tcp_close_shutdown_fin+0xbe>
      break;
 8005b28:	bf00      	nop
 8005b2a:	e002      	b.n	8005b32 <tcp_close_shutdown_fin+0x8e>
      break;
 8005b2c:	bf00      	nop
 8005b2e:	e000      	b.n	8005b32 <tcp_close_shutdown_fin+0x8e>
      break;
 8005b30:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d103      	bne.n	8005b42 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f004 fee6 	bl	800a90c <tcp_output>
 8005b40:	e00d      	b.n	8005b5e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4a:	d108      	bne.n	8005b5e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8b5b      	ldrh	r3, [r3, #26]
 8005b50:	f043 0308 	orr.w	r3, r3, #8
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e001      	b.n	8005b62 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	0800fee0 	.word	0x0800fee0
 8005b70:	0800ff90 	.word	0x0800ff90
 8005b74:	0800ff24 	.word	0x0800ff24

08005b78 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d109      	bne.n	8005b9a <tcp_close+0x22>
 8005b86:	4b0f      	ldr	r3, [pc, #60]	@ (8005bc4 <tcp_close+0x4c>)
 8005b88:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8005b8c:	490e      	ldr	r1, [pc, #56]	@ (8005bc8 <tcp_close+0x50>)
 8005b8e:	480f      	ldr	r0, [pc, #60]	@ (8005bcc <tcp_close+0x54>)
 8005b90:	f008 fcfc 	bl	800e58c <iprintf>
 8005b94:	f06f 030f 	mvn.w	r3, #15
 8005b98:	e00f      	b.n	8005bba <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	7d1b      	ldrb	r3, [r3, #20]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d006      	beq.n	8005bb0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	8b5b      	ldrh	r3, [r3, #26]
 8005ba6:	f043 0310 	orr.w	r3, r3, #16
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff fe94 	bl	80058e0 <tcp_close_shutdown>
 8005bb8:	4603      	mov	r3, r0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	0800fee0 	.word	0x0800fee0
 8005bc8:	0800fff0 	.word	0x0800fff0
 8005bcc:	0800ff24 	.word	0x0800ff24

08005bd0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08e      	sub	sp, #56	@ 0x38
 8005bd4:	af04      	add	r7, sp, #16
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d107      	bne.n	8005bf0 <tcp_abandon+0x20>
 8005be0:	4b52      	ldr	r3, [pc, #328]	@ (8005d2c <tcp_abandon+0x15c>)
 8005be2:	f240 223d 	movw	r2, #573	@ 0x23d
 8005be6:	4952      	ldr	r1, [pc, #328]	@ (8005d30 <tcp_abandon+0x160>)
 8005be8:	4852      	ldr	r0, [pc, #328]	@ (8005d34 <tcp_abandon+0x164>)
 8005bea:	f008 fccf 	bl	800e58c <iprintf>
 8005bee:	e099      	b.n	8005d24 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	7d1b      	ldrb	r3, [r3, #20]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d106      	bne.n	8005c06 <tcp_abandon+0x36>
 8005bf8:	4b4c      	ldr	r3, [pc, #304]	@ (8005d2c <tcp_abandon+0x15c>)
 8005bfa:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8005bfe:	494e      	ldr	r1, [pc, #312]	@ (8005d38 <tcp_abandon+0x168>)
 8005c00:	484c      	ldr	r0, [pc, #304]	@ (8005d34 <tcp_abandon+0x164>)
 8005c02:	f008 fcc3 	bl	800e58c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	7d1b      	ldrb	r3, [r3, #20]
 8005c0a:	2b0a      	cmp	r3, #10
 8005c0c:	d107      	bne.n	8005c1e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	484a      	ldr	r0, [pc, #296]	@ (8005d3c <tcp_abandon+0x16c>)
 8005c12:	f001 fa65 	bl	80070e0 <tcp_pcb_remove>
    tcp_free(pcb);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7ff fdb0 	bl	800577c <tcp_free>
 8005c1c:	e082      	b.n	8005d24 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c2a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c30:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c38:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	7d1b      	ldrb	r3, [r3, #20]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d126      	bne.n	8005c96 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8adb      	ldrh	r3, [r3, #22]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d02e      	beq.n	8005cae <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005c50:	4b3b      	ldr	r3, [pc, #236]	@ (8005d40 <tcp_abandon+0x170>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d105      	bne.n	8005c66 <tcp_abandon+0x96>
 8005c5a:	4b39      	ldr	r3, [pc, #228]	@ (8005d40 <tcp_abandon+0x170>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	4a37      	ldr	r2, [pc, #220]	@ (8005d40 <tcp_abandon+0x170>)
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	e013      	b.n	8005c8e <tcp_abandon+0xbe>
 8005c66:	4b36      	ldr	r3, [pc, #216]	@ (8005d40 <tcp_abandon+0x170>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	61fb      	str	r3, [r7, #28]
 8005c6c:	e00c      	b.n	8005c88 <tcp_abandon+0xb8>
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d104      	bne.n	8005c82 <tcp_abandon+0xb2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	60da      	str	r2, [r3, #12]
 8005c80:	e005      	b.n	8005c8e <tcp_abandon+0xbe>
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	61fb      	str	r3, [r7, #28]
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1ef      	bne.n	8005c6e <tcp_abandon+0x9e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	60da      	str	r2, [r3, #12]
 8005c94:	e00b      	b.n	8005cae <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	8adb      	ldrh	r3, [r3, #22]
 8005c9e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	4828      	ldr	r0, [pc, #160]	@ (8005d44 <tcp_abandon+0x174>)
 8005ca4:	f001 fa1c 	bl	80070e0 <tcp_pcb_remove>
 8005ca8:	4b27      	ldr	r3, [pc, #156]	@ (8005d48 <tcp_abandon+0x178>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d004      	beq.n	8005cc0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fed8 	bl	8006a70 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fecf 	bl	8006a70 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d004      	beq.n	8005ce4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fec6 	bl	8006a70 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00e      	beq.n	8005d08 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3304      	adds	r3, #4
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	8b12      	ldrh	r2, [r2, #24]
 8005cf4:	9202      	str	r2, [sp, #8]
 8005cf6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005cf8:	9201      	str	r2, [sp, #4]
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	69b9      	ldr	r1, [r7, #24]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f005 fbb6 	bl	800b474 <tcp_rst>
    }
    last_state = pcb->state;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	7d1b      	ldrb	r3, [r3, #20]
 8005d0c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff fd34 	bl	800577c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d004      	beq.n	8005d24 <tcp_abandon+0x154>
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f06f 010c 	mvn.w	r1, #12
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	4798      	blx	r3
  }
}
 8005d24:	3728      	adds	r7, #40	@ 0x28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	0800fee0 	.word	0x0800fee0
 8005d30:	08010024 	.word	0x08010024
 8005d34:	0800ff24 	.word	0x0800ff24
 8005d38:	08010040 	.word	0x08010040
 8005d3c:	20008254 	.word	0x20008254
 8005d40:	20008248 	.word	0x20008248
 8005d44:	20008250 	.word	0x20008250
 8005d48:	20008258 	.word	0x20008258

08005d4c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005d54:	2101      	movs	r1, #1
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff ff3a 	bl	8005bd0 <tcp_abandon>
}
 8005d5c:	bf00      	nop
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b088      	sub	sp, #32
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8005d72:	2304      	movs	r3, #4
 8005d74:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8005d7c:	4b3e      	ldr	r3, [pc, #248]	@ (8005e78 <tcp_bind+0x114>)
 8005d7e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d109      	bne.n	8005d9a <tcp_bind+0x36>
 8005d86:	4b3d      	ldr	r3, [pc, #244]	@ (8005e7c <tcp_bind+0x118>)
 8005d88:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8005d8c:	493c      	ldr	r1, [pc, #240]	@ (8005e80 <tcp_bind+0x11c>)
 8005d8e:	483d      	ldr	r0, [pc, #244]	@ (8005e84 <tcp_bind+0x120>)
 8005d90:	f008 fbfc 	bl	800e58c <iprintf>
 8005d94:	f06f 030f 	mvn.w	r3, #15
 8005d98:	e06a      	b.n	8005e70 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	7d1b      	ldrb	r3, [r3, #20]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <tcp_bind+0x52>
 8005da2:	4b36      	ldr	r3, [pc, #216]	@ (8005e7c <tcp_bind+0x118>)
 8005da4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8005da8:	4937      	ldr	r1, [pc, #220]	@ (8005e88 <tcp_bind+0x124>)
 8005daa:	4836      	ldr	r0, [pc, #216]	@ (8005e84 <tcp_bind+0x120>)
 8005dac:	f008 fbee 	bl	800e58c <iprintf>
 8005db0:	f06f 0305 	mvn.w	r3, #5
 8005db4:	e05c      	b.n	8005e70 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8005db6:	88fb      	ldrh	r3, [r7, #6]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d109      	bne.n	8005dd0 <tcp_bind+0x6c>
    port = tcp_new_port();
 8005dbc:	f000 f9f0 	bl	80061a0 <tcp_new_port>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8005dc4:	88fb      	ldrh	r3, [r7, #6]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d135      	bne.n	8005e36 <tcp_bind+0xd2>
      return ERR_BUF;
 8005dca:	f06f 0301 	mvn.w	r3, #1
 8005dce:	e04f      	b.n	8005e70 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	61fb      	str	r3, [r7, #28]
 8005dd4:	e02b      	b.n	8005e2e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005dd6:	4a2d      	ldr	r2, [pc, #180]	@ (8005e8c <tcp_bind+0x128>)
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	e01e      	b.n	8005e22 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	8adb      	ldrh	r3, [r3, #22]
 8005de8:	88fa      	ldrh	r2, [r7, #6]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d116      	bne.n	8005e1c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8005dee:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d010      	beq.n	8005e16 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00c      	beq.n	8005e16 <tcp_bind+0xb2>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d005      	beq.n	8005e16 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d102      	bne.n	8005e1c <tcp_bind+0xb8>
              return ERR_USE;
 8005e16:	f06f 0307 	mvn.w	r3, #7
 8005e1a:	e029      	b.n	8005e70 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	61bb      	str	r3, [r7, #24]
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1dd      	bne.n	8005de4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	61fb      	str	r3, [r7, #28]
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	dbcf      	blt.n	8005dd6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00c      	beq.n	8005e56 <tcp_bind+0xf2>
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d008      	beq.n	8005e56 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <tcp_bind+0xec>
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	e000      	b.n	8005e52 <tcp_bind+0xee>
 8005e50:	2300      	movs	r3, #0
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	88fa      	ldrh	r2, [r7, #6]
 8005e5a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8005e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e90 <tcp_bind+0x12c>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	60da      	str	r2, [r3, #12]
 8005e64:	4a0a      	ldr	r2, [pc, #40]	@ (8005e90 <tcp_bind+0x12c>)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	f005 fcc5 	bl	800b7f8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3720      	adds	r7, #32
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	08011ee0 	.word	0x08011ee0
 8005e7c:	0800fee0 	.word	0x0800fee0
 8005e80:	08010074 	.word	0x08010074
 8005e84:	0800ff24 	.word	0x0800ff24
 8005e88:	0801008c 	.word	0x0801008c
 8005e8c:	08011eb8 	.word	0x08011eb8
 8005e90:	20008248 	.word	0x20008248

08005e94 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <tcp_accept_null+0x22>
 8005ea8:	4b07      	ldr	r3, [pc, #28]	@ (8005ec8 <tcp_accept_null+0x34>)
 8005eaa:	f240 320f 	movw	r2, #783	@ 0x30f
 8005eae:	4907      	ldr	r1, [pc, #28]	@ (8005ecc <tcp_accept_null+0x38>)
 8005eb0:	4807      	ldr	r0, [pc, #28]	@ (8005ed0 <tcp_accept_null+0x3c>)
 8005eb2:	f008 fb6b 	bl	800e58c <iprintf>

  tcp_abort(pcb);
 8005eb6:	68b8      	ldr	r0, [r7, #8]
 8005eb8:	f7ff ff48 	bl	8005d4c <tcp_abort>

  return ERR_ABRT;
 8005ebc:	f06f 030c 	mvn.w	r3, #12
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	0800fee0 	.word	0x0800fee0
 8005ecc:	080100b4 	.word	0x080100b4
 8005ed0:	0800ff24 	.word	0x0800ff24

08005ed4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f806 	bl	8005ef8 <tcp_listen_with_backlog_and_err>
 8005eec:	4603      	mov	r3, r0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	460b      	mov	r3, r1
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d109      	bne.n	8005f24 <tcp_listen_with_backlog_and_err+0x2c>
 8005f10:	4b47      	ldr	r3, [pc, #284]	@ (8006030 <tcp_listen_with_backlog_and_err+0x138>)
 8005f12:	f240 3259 	movw	r2, #857	@ 0x359
 8005f16:	4947      	ldr	r1, [pc, #284]	@ (8006034 <tcp_listen_with_backlog_and_err+0x13c>)
 8005f18:	4847      	ldr	r0, [pc, #284]	@ (8006038 <tcp_listen_with_backlog_and_err+0x140>)
 8005f1a:	f008 fb37 	bl	800e58c <iprintf>
 8005f1e:	23f0      	movs	r3, #240	@ 0xf0
 8005f20:	76fb      	strb	r3, [r7, #27]
 8005f22:	e079      	b.n	8006018 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	7d1b      	ldrb	r3, [r3, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d009      	beq.n	8005f40 <tcp_listen_with_backlog_and_err+0x48>
 8005f2c:	4b40      	ldr	r3, [pc, #256]	@ (8006030 <tcp_listen_with_backlog_and_err+0x138>)
 8005f2e:	f240 325a 	movw	r2, #858	@ 0x35a
 8005f32:	4942      	ldr	r1, [pc, #264]	@ (800603c <tcp_listen_with_backlog_and_err+0x144>)
 8005f34:	4840      	ldr	r0, [pc, #256]	@ (8006038 <tcp_listen_with_backlog_and_err+0x140>)
 8005f36:	f008 fb29 	bl	800e58c <iprintf>
 8005f3a:	23f1      	movs	r3, #241	@ 0xf1
 8005f3c:	76fb      	strb	r3, [r7, #27]
 8005f3e:	e06b      	b.n	8006018 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	7d1b      	ldrb	r3, [r3, #20]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d104      	bne.n	8005f52 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8005f4c:	23f7      	movs	r3, #247	@ 0xf7
 8005f4e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8005f50:	e062      	b.n	8006018 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8005f52:	2002      	movs	r0, #2
 8005f54:	f7fe fa7c 	bl	8004450 <memp_malloc>
 8005f58:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d102      	bne.n	8005f66 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8005f60:	23ff      	movs	r3, #255	@ 0xff
 8005f62:	76fb      	strb	r3, [r7, #27]
    goto done;
 8005f64:	e058      	b.n	8006018 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	691a      	ldr	r2, [r3, #16]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8ada      	ldrh	r2, [r3, #22]
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	7d5a      	ldrb	r2, [r3, #21]
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	7a5a      	ldrb	r2, [r3, #9]
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	7ada      	ldrb	r2, [r3, #11]
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	7a9a      	ldrb	r2, [r3, #10]
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8adb      	ldrh	r3, [r3, #22]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d021      	beq.n	8005ff6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8005fb2:	4b23      	ldr	r3, [pc, #140]	@ (8006040 <tcp_listen_with_backlog_and_err+0x148>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d105      	bne.n	8005fc8 <tcp_listen_with_backlog_and_err+0xd0>
 8005fbc:	4b20      	ldr	r3, [pc, #128]	@ (8006040 <tcp_listen_with_backlog_and_err+0x148>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8006040 <tcp_listen_with_backlog_and_err+0x148>)
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	e013      	b.n	8005ff0 <tcp_listen_with_backlog_and_err+0xf8>
 8005fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8006040 <tcp_listen_with_backlog_and_err+0x148>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	e00c      	b.n	8005fea <tcp_listen_with_backlog_and_err+0xf2>
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d104      	bne.n	8005fe4 <tcp_listen_with_backlog_and_err+0xec>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	60da      	str	r2, [r3, #12]
 8005fe2:	e005      	b.n	8005ff0 <tcp_listen_with_backlog_and_err+0xf8>
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	617b      	str	r3, [r7, #20]
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1ef      	bne.n	8005fd0 <tcp_listen_with_backlog_and_err+0xd8>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f7ff fbc0 	bl	800577c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	4a11      	ldr	r2, [pc, #68]	@ (8006044 <tcp_listen_with_backlog_and_err+0x14c>)
 8006000:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006002:	4b11      	ldr	r3, [pc, #68]	@ (8006048 <tcp_listen_with_backlog_and_err+0x150>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	60da      	str	r2, [r3, #12]
 800600a:	4a0f      	ldr	r2, [pc, #60]	@ (8006048 <tcp_listen_with_backlog_and_err+0x150>)
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	f005 fbf2 	bl	800b7f8 <tcp_timer_needed>
  res = ERR_OK;
 8006014:	2300      	movs	r3, #0
 8006016:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	7efa      	ldrb	r2, [r7, #27]
 8006022:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8006024:	69fb      	ldr	r3, [r7, #28]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3720      	adds	r7, #32
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	0800fee0 	.word	0x0800fee0
 8006034:	080100d4 	.word	0x080100d4
 8006038:	0800ff24 	.word	0x0800ff24
 800603c:	08010104 	.word	0x08010104
 8006040:	20008248 	.word	0x20008248
 8006044:	08005e95 	.word	0x08005e95
 8006048:	2000824c 	.word	0x2000824c

0800604c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <tcp_update_rcv_ann_wnd+0x1c>
 800605a:	4b25      	ldr	r3, [pc, #148]	@ (80060f0 <tcp_update_rcv_ann_wnd+0xa4>)
 800605c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8006060:	4924      	ldr	r1, [pc, #144]	@ (80060f4 <tcp_update_rcv_ann_wnd+0xa8>)
 8006062:	4825      	ldr	r0, [pc, #148]	@ (80060f8 <tcp_update_rcv_ann_wnd+0xac>)
 8006064:	f008 fa92 	bl	800e58c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006070:	4413      	add	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800607c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8006080:	bf28      	it	cs
 8006082:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8006086:	b292      	uxth	r2, r2
 8006088:	4413      	add	r3, r2
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	db08      	blt.n	80060a4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	e020      	b.n	80060e6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	dd03      	ble.n	80060ba <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80060b8:	e014      	b.n	80060e4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060cc:	d306      	bcc.n	80060dc <tcp_update_rcv_ann_wnd+0x90>
 80060ce:	4b08      	ldr	r3, [pc, #32]	@ (80060f0 <tcp_update_rcv_ann_wnd+0xa4>)
 80060d0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80060d4:	4909      	ldr	r1, [pc, #36]	@ (80060fc <tcp_update_rcv_ann_wnd+0xb0>)
 80060d6:	4808      	ldr	r0, [pc, #32]	@ (80060f8 <tcp_update_rcv_ann_wnd+0xac>)
 80060d8:	f008 fa58 	bl	800e58c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	b29a      	uxth	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80060e4:	2300      	movs	r3, #0
  }
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	0800fee0 	.word	0x0800fee0
 80060f4:	0801013c 	.word	0x0801013c
 80060f8:	0800ff24 	.word	0x0800ff24
 80060fc:	08010160 	.word	0x08010160

08006100 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d107      	bne.n	8006122 <tcp_recved+0x22>
 8006112:	4b1f      	ldr	r3, [pc, #124]	@ (8006190 <tcp_recved+0x90>)
 8006114:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8006118:	491e      	ldr	r1, [pc, #120]	@ (8006194 <tcp_recved+0x94>)
 800611a:	481f      	ldr	r0, [pc, #124]	@ (8006198 <tcp_recved+0x98>)
 800611c:	f008 fa36 	bl	800e58c <iprintf>
 8006120:	e032      	b.n	8006188 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	7d1b      	ldrb	r3, [r3, #20]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d106      	bne.n	8006138 <tcp_recved+0x38>
 800612a:	4b19      	ldr	r3, [pc, #100]	@ (8006190 <tcp_recved+0x90>)
 800612c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8006130:	491a      	ldr	r1, [pc, #104]	@ (800619c <tcp_recved+0x9c>)
 8006132:	4819      	ldr	r0, [pc, #100]	@ (8006198 <tcp_recved+0x98>)
 8006134:	f008 fa2a 	bl	800e58c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800613c:	887b      	ldrh	r3, [r7, #2]
 800613e:	4413      	add	r3, r2
 8006140:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006142:	89fb      	ldrh	r3, [r7, #14]
 8006144:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006148:	d804      	bhi.n	8006154 <tcp_recved+0x54>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800614e:	89fa      	ldrh	r2, [r7, #14]
 8006150:	429a      	cmp	r2, r3
 8006152:	d204      	bcs.n	800615e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800615a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800615c:	e002      	b.n	8006164 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	89fa      	ldrh	r2, [r7, #14]
 8006162:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff ff71 	bl	800604c <tcp_update_rcv_ann_wnd>
 800616a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8006172:	d309      	bcc.n	8006188 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	8b5b      	ldrh	r3, [r3, #26]
 8006178:	f043 0302 	orr.w	r3, r3, #2
 800617c:	b29a      	uxth	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f004 fbc2 	bl	800a90c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	0800fee0 	.word	0x0800fee0
 8006194:	0801017c 	.word	0x0801017c
 8006198:	0800ff24 	.word	0x0800ff24
 800619c:	08010194 	.word	0x08010194

080061a0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80061aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006224 <tcp_new_port+0x84>)
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	3301      	adds	r3, #1
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	4b1c      	ldr	r3, [pc, #112]	@ (8006224 <tcp_new_port+0x84>)
 80061b4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80061b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006224 <tcp_new_port+0x84>)
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80061be:	4293      	cmp	r3, r2
 80061c0:	d103      	bne.n	80061ca <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80061c2:	4b18      	ldr	r3, [pc, #96]	@ (8006224 <tcp_new_port+0x84>)
 80061c4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80061c8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80061ca:	2300      	movs	r3, #0
 80061cc:	71fb      	strb	r3, [r7, #7]
 80061ce:	e01e      	b.n	800620e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80061d0:	79fb      	ldrb	r3, [r7, #7]
 80061d2:	4a15      	ldr	r2, [pc, #84]	@ (8006228 <tcp_new_port+0x88>)
 80061d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	e011      	b.n	8006202 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	8ada      	ldrh	r2, [r3, #22]
 80061e2:	4b10      	ldr	r3, [pc, #64]	@ (8006224 <tcp_new_port+0x84>)
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d108      	bne.n	80061fc <tcp_new_port+0x5c>
        n++;
 80061ea:	88bb      	ldrh	r3, [r7, #4]
 80061ec:	3301      	adds	r3, #1
 80061ee:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80061f0:	88bb      	ldrh	r3, [r7, #4]
 80061f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061f6:	d3d8      	bcc.n	80061aa <tcp_new_port+0xa>
          return 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	e00d      	b.n	8006218 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	603b      	str	r3, [r7, #0]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1ea      	bne.n	80061de <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006208:	79fb      	ldrb	r3, [r7, #7]
 800620a:	3301      	adds	r3, #1
 800620c:	71fb      	strb	r3, [r7, #7]
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	2b03      	cmp	r3, #3
 8006212:	d9dd      	bls.n	80061d0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006214:	4b03      	ldr	r3, [pc, #12]	@ (8006224 <tcp_new_port+0x84>)
 8006216:	881b      	ldrh	r3, [r3, #0]
}
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	20000020 	.word	0x20000020
 8006228:	08011eb8 	.word	0x08011eb8

0800622c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800622c:	b5b0      	push	{r4, r5, r7, lr}
 800622e:	b090      	sub	sp, #64	@ 0x40
 8006230:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8006238:	4b95      	ldr	r3, [pc, #596]	@ (8006490 <tcp_slowtmr+0x264>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3301      	adds	r3, #1
 800623e:	4a94      	ldr	r2, [pc, #592]	@ (8006490 <tcp_slowtmr+0x264>)
 8006240:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006242:	4b94      	ldr	r3, [pc, #592]	@ (8006494 <tcp_slowtmr+0x268>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	3301      	adds	r3, #1
 8006248:	b2da      	uxtb	r2, r3
 800624a:	4b92      	ldr	r3, [pc, #584]	@ (8006494 <tcp_slowtmr+0x268>)
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	e000      	b.n	8006252 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8006250:	bf00      	nop
  prev = NULL;
 8006252:	2300      	movs	r3, #0
 8006254:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8006256:	4b90      	ldr	r3, [pc, #576]	@ (8006498 <tcp_slowtmr+0x26c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800625c:	e29f      	b.n	800679e <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800625e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006260:	7d1b      	ldrb	r3, [r3, #20]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <tcp_slowtmr+0x48>
 8006266:	4b8d      	ldr	r3, [pc, #564]	@ (800649c <tcp_slowtmr+0x270>)
 8006268:	f240 42be 	movw	r2, #1214	@ 0x4be
 800626c:	498c      	ldr	r1, [pc, #560]	@ (80064a0 <tcp_slowtmr+0x274>)
 800626e:	488d      	ldr	r0, [pc, #564]	@ (80064a4 <tcp_slowtmr+0x278>)
 8006270:	f008 f98c 	bl	800e58c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006276:	7d1b      	ldrb	r3, [r3, #20]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d106      	bne.n	800628a <tcp_slowtmr+0x5e>
 800627c:	4b87      	ldr	r3, [pc, #540]	@ (800649c <tcp_slowtmr+0x270>)
 800627e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8006282:	4989      	ldr	r1, [pc, #548]	@ (80064a8 <tcp_slowtmr+0x27c>)
 8006284:	4887      	ldr	r0, [pc, #540]	@ (80064a4 <tcp_slowtmr+0x278>)
 8006286:	f008 f981 	bl	800e58c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800628a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628c:	7d1b      	ldrb	r3, [r3, #20]
 800628e:	2b0a      	cmp	r3, #10
 8006290:	d106      	bne.n	80062a0 <tcp_slowtmr+0x74>
 8006292:	4b82      	ldr	r3, [pc, #520]	@ (800649c <tcp_slowtmr+0x270>)
 8006294:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8006298:	4984      	ldr	r1, [pc, #528]	@ (80064ac <tcp_slowtmr+0x280>)
 800629a:	4882      	ldr	r0, [pc, #520]	@ (80064a4 <tcp_slowtmr+0x278>)
 800629c:	f008 f976 	bl	800e58c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80062a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a2:	7f9a      	ldrb	r2, [r3, #30]
 80062a4:	4b7b      	ldr	r3, [pc, #492]	@ (8006494 <tcp_slowtmr+0x268>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d105      	bne.n	80062b8 <tcp_slowtmr+0x8c>
      prev = pcb;
 80062ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80062b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80062b6:	e272      	b.n	800679e <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 80062b8:	4b76      	ldr	r3, [pc, #472]	@ (8006494 <tcp_slowtmr+0x268>)
 80062ba:	781a      	ldrb	r2, [r3, #0]
 80062bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062be:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80062c0:	2300      	movs	r3, #0
 80062c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80062cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ce:	7d1b      	ldrb	r3, [r3, #20]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d10a      	bne.n	80062ea <tcp_slowtmr+0xbe>
 80062d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062da:	2b05      	cmp	r3, #5
 80062dc:	d905      	bls.n	80062ea <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80062de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062e2:	3301      	adds	r3, #1
 80062e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80062e8:	e11e      	b.n	8006528 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80062ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062f0:	2b0b      	cmp	r3, #11
 80062f2:	d905      	bls.n	8006300 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80062f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062f8:	3301      	adds	r3, #1
 80062fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80062fe:	e113      	b.n	8006528 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8006300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006302:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006306:	2b00      	cmp	r3, #0
 8006308:	d075      	beq.n	80063f6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800630a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800630e:	2b00      	cmp	r3, #0
 8006310:	d006      	beq.n	8006320 <tcp_slowtmr+0xf4>
 8006312:	4b62      	ldr	r3, [pc, #392]	@ (800649c <tcp_slowtmr+0x270>)
 8006314:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8006318:	4965      	ldr	r1, [pc, #404]	@ (80064b0 <tcp_slowtmr+0x284>)
 800631a:	4862      	ldr	r0, [pc, #392]	@ (80064a4 <tcp_slowtmr+0x278>)
 800631c:	f008 f936 	bl	800e58c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <tcp_slowtmr+0x10a>
 8006328:	4b5c      	ldr	r3, [pc, #368]	@ (800649c <tcp_slowtmr+0x270>)
 800632a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800632e:	4961      	ldr	r1, [pc, #388]	@ (80064b4 <tcp_slowtmr+0x288>)
 8006330:	485c      	ldr	r0, [pc, #368]	@ (80064a4 <tcp_slowtmr+0x278>)
 8006332:	f008 f92b 	bl	800e58c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006338:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800633c:	2b0b      	cmp	r3, #11
 800633e:	d905      	bls.n	800634c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8006340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006344:	3301      	adds	r3, #1
 8006346:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800634a:	e0ed      	b.n	8006528 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800634c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006352:	3b01      	subs	r3, #1
 8006354:	4a58      	ldr	r2, [pc, #352]	@ (80064b8 <tcp_slowtmr+0x28c>)
 8006356:	5cd3      	ldrb	r3, [r2, r3]
 8006358:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800635a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006360:	7c7a      	ldrb	r2, [r7, #17]
 8006362:	429a      	cmp	r2, r3
 8006364:	d907      	bls.n	8006376 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8006366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006368:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800636c:	3301      	adds	r3, #1
 800636e:	b2da      	uxtb	r2, r3
 8006370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006372:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8006376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006378:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800637c:	7c7a      	ldrb	r2, [r7, #17]
 800637e:	429a      	cmp	r2, r3
 8006380:	f200 80d2 	bhi.w	8006528 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8006384:	2301      	movs	r3, #1
 8006386:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8006388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800638e:	2b00      	cmp	r3, #0
 8006390:	d108      	bne.n	80063a4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006392:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006394:	f005 f962 	bl	800b65c <tcp_zero_window_probe>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d014      	beq.n	80063c8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800639e:	2300      	movs	r3, #0
 80063a0:	623b      	str	r3, [r7, #32]
 80063a2:	e011      	b.n	80063c8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80063a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80063aa:	4619      	mov	r1, r3
 80063ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80063ae:	f004 f827 	bl	800a400 <tcp_split_unsent_seg>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d107      	bne.n	80063c8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80063b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80063ba:	f004 faa7 	bl	800a90c <tcp_output>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 80ac 	beq.w	8006528 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80063d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80063d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063da:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80063de:	2b06      	cmp	r3, #6
 80063e0:	f200 80a2 	bhi.w	8006528 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80063e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80063ea:	3301      	adds	r3, #1
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80063f4:	e098      	b.n	8006528 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80063f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	db0f      	blt.n	8006420 <tcp_slowtmr+0x1f4>
 8006400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006402:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006406:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800640a:	4293      	cmp	r3, r2
 800640c:	d008      	beq.n	8006420 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800640e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006410:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006414:	b29b      	uxth	r3, r3
 8006416:	3301      	adds	r3, #1
 8006418:	b29b      	uxth	r3, r3
 800641a:	b21a      	sxth	r2, r3
 800641c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800641e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8006420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006422:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8006426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006428:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800642c:	429a      	cmp	r2, r3
 800642e:	db7b      	blt.n	8006528 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006430:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006432:	f004 fd5f 	bl	800aef4 <tcp_rexmit_rto_prepare>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d007      	beq.n	800644c <tcp_slowtmr+0x220>
 800643c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006440:	2b00      	cmp	r3, #0
 8006442:	d171      	bne.n	8006528 <tcp_slowtmr+0x2fc>
 8006444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006448:	2b00      	cmp	r3, #0
 800644a:	d06d      	beq.n	8006528 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800644c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644e:	7d1b      	ldrb	r3, [r3, #20]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d03a      	beq.n	80064ca <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006456:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800645a:	2b0c      	cmp	r3, #12
 800645c:	bf28      	it	cs
 800645e:	230c      	movcs	r3, #12
 8006460:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006464:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8006468:	10db      	asrs	r3, r3, #3
 800646a:	b21b      	sxth	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006470:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8006474:	4413      	add	r3, r2
 8006476:	7efa      	ldrb	r2, [r7, #27]
 8006478:	4910      	ldr	r1, [pc, #64]	@ (80064bc <tcp_slowtmr+0x290>)
 800647a:	5c8a      	ldrb	r2, [r1, r2]
 800647c:	4093      	lsls	r3, r2
 800647e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8006486:	4293      	cmp	r3, r2
 8006488:	dc1a      	bgt.n	80064c0 <tcp_slowtmr+0x294>
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	b21a      	sxth	r2, r3
 800648e:	e019      	b.n	80064c4 <tcp_slowtmr+0x298>
 8006490:	20008244 	.word	0x20008244
 8006494:	2000825a 	.word	0x2000825a
 8006498:	20008250 	.word	0x20008250
 800649c:	0800fee0 	.word	0x0800fee0
 80064a0:	08010224 	.word	0x08010224
 80064a4:	0800ff24 	.word	0x0800ff24
 80064a8:	08010250 	.word	0x08010250
 80064ac:	0801027c 	.word	0x0801027c
 80064b0:	080102ac 	.word	0x080102ac
 80064b4:	080102e0 	.word	0x080102e0
 80064b8:	08011eb0 	.word	0x08011eb0
 80064bc:	08011ea0 	.word	0x08011ea0
 80064c0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80064c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80064ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064cc:	2200      	movs	r2, #0
 80064ce:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80064d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80064d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80064dc:	4293      	cmp	r3, r2
 80064de:	bf28      	it	cs
 80064e0:	4613      	movcs	r3, r2
 80064e2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80064e4:	8a7b      	ldrh	r3, [r7, #18]
 80064e6:	085b      	lsrs	r3, r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ec:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80064f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80064f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	429a      	cmp	r2, r3
 8006500:	d206      	bcs.n	8006510 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006504:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800650c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8006510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006512:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8006514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006516:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800651a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651c:	2200      	movs	r2, #0
 800651e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8006522:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006524:	f004 fd56 	bl	800afd4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8006528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652a:	7d1b      	ldrb	r3, [r3, #20]
 800652c:	2b06      	cmp	r3, #6
 800652e:	d111      	bne.n	8006554 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8006530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006532:	8b5b      	ldrh	r3, [r3, #26]
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800653c:	4b9d      	ldr	r3, [pc, #628]	@ (80067b4 <tcp_slowtmr+0x588>)
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b28      	cmp	r3, #40	@ 0x28
 8006548:	d904      	bls.n	8006554 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800654a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800654e:	3301      	adds	r3, #1
 8006550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006556:	7a5b      	ldrb	r3, [r3, #9]
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b00      	cmp	r3, #0
 800655e:	d04c      	beq.n	80065fa <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8006560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006562:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006564:	2b04      	cmp	r3, #4
 8006566:	d003      	beq.n	8006570 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8006568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800656c:	2b07      	cmp	r3, #7
 800656e:	d144      	bne.n	80065fa <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006570:	4b90      	ldr	r3, [pc, #576]	@ (80067b4 <tcp_slowtmr+0x588>)
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800657a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006580:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8006584:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8006588:	498b      	ldr	r1, [pc, #556]	@ (80067b8 <tcp_slowtmr+0x58c>)
 800658a:	fba1 1303 	umull	r1, r3, r1, r3
 800658e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006590:	429a      	cmp	r2, r3
 8006592:	d90a      	bls.n	80065aa <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8006594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006598:	3301      	adds	r3, #1
 800659a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800659e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80065a2:	3301      	adds	r3, #1
 80065a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80065a8:	e027      	b.n	80065fa <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80065aa:	4b82      	ldr	r3, [pc, #520]	@ (80067b4 <tcp_slowtmr+0x588>)
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80065b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80065ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065bc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80065c0:	4618      	mov	r0, r3
 80065c2:	4b7e      	ldr	r3, [pc, #504]	@ (80067bc <tcp_slowtmr+0x590>)
 80065c4:	fb00 f303 	mul.w	r3, r0, r3
 80065c8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80065ca:	497b      	ldr	r1, [pc, #492]	@ (80067b8 <tcp_slowtmr+0x58c>)
 80065cc:	fba1 1303 	umull	r1, r3, r1, r3
 80065d0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d911      	bls.n	80065fa <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 80065d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80065d8:	f005 f800 	bl	800b5dc <tcp_keepalive>
 80065dc:	4603      	mov	r3, r0
 80065de:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80065e2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d107      	bne.n	80065fa <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 80065ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ec:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80065f0:	3301      	adds	r3, #1
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80065fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d011      	beq.n	8006626 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006602:	4b6c      	ldr	r3, [pc, #432]	@ (80067b4 <tcp_slowtmr+0x588>)
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	1ad2      	subs	r2, r2, r3
 800660c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006612:	4619      	mov	r1, r3
 8006614:	460b      	mov	r3, r1
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	440b      	add	r3, r1
 800661a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800661c:	429a      	cmp	r2, r3
 800661e:	d302      	bcc.n	8006626 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8006620:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006622:	f000 fec1 	bl	80073a8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8006626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006628:	7d1b      	ldrb	r3, [r3, #20]
 800662a:	2b03      	cmp	r3, #3
 800662c:	d10b      	bne.n	8006646 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800662e:	4b61      	ldr	r3, [pc, #388]	@ (80067b4 <tcp_slowtmr+0x588>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b28      	cmp	r3, #40	@ 0x28
 800663a:	d904      	bls.n	8006646 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800663c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006640:	3301      	adds	r3, #1
 8006642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8006646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006648:	7d1b      	ldrb	r3, [r3, #20]
 800664a:	2b09      	cmp	r3, #9
 800664c:	d10b      	bne.n	8006666 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800664e:	4b59      	ldr	r3, [pc, #356]	@ (80067b4 <tcp_slowtmr+0x588>)
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2bf0      	cmp	r3, #240	@ 0xf0
 800665a:	d904      	bls.n	8006666 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800665c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006660:	3301      	adds	r3, #1
 8006662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8006666:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800666a:	2b00      	cmp	r3, #0
 800666c:	d060      	beq.n	8006730 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800666e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006674:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8006676:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006678:	f000 fce2 	bl	8007040 <tcp_pcb_purge>
      if (prev != NULL) {
 800667c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667e:	2b00      	cmp	r3, #0
 8006680:	d010      	beq.n	80066a4 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006682:	4b4f      	ldr	r3, [pc, #316]	@ (80067c0 <tcp_slowtmr+0x594>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006688:	429a      	cmp	r2, r3
 800668a:	d106      	bne.n	800669a <tcp_slowtmr+0x46e>
 800668c:	4b4d      	ldr	r3, [pc, #308]	@ (80067c4 <tcp_slowtmr+0x598>)
 800668e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8006692:	494d      	ldr	r1, [pc, #308]	@ (80067c8 <tcp_slowtmr+0x59c>)
 8006694:	484d      	ldr	r0, [pc, #308]	@ (80067cc <tcp_slowtmr+0x5a0>)
 8006696:	f007 ff79 	bl	800e58c <iprintf>
        prev->next = pcb->next;
 800669a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a0:	60da      	str	r2, [r3, #12]
 80066a2:	e00f      	b.n	80066c4 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80066a4:	4b46      	ldr	r3, [pc, #280]	@ (80067c0 <tcp_slowtmr+0x594>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d006      	beq.n	80066bc <tcp_slowtmr+0x490>
 80066ae:	4b45      	ldr	r3, [pc, #276]	@ (80067c4 <tcp_slowtmr+0x598>)
 80066b0:	f240 5271 	movw	r2, #1393	@ 0x571
 80066b4:	4946      	ldr	r1, [pc, #280]	@ (80067d0 <tcp_slowtmr+0x5a4>)
 80066b6:	4845      	ldr	r0, [pc, #276]	@ (80067cc <tcp_slowtmr+0x5a0>)
 80066b8:	f007 ff68 	bl	800e58c <iprintf>
        tcp_active_pcbs = pcb->next;
 80066bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	4a3f      	ldr	r2, [pc, #252]	@ (80067c0 <tcp_slowtmr+0x594>)
 80066c2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80066c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d013      	beq.n	80066f4 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80066cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ce:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80066d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80066d4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80066d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d8:	3304      	adds	r3, #4
 80066da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066dc:	8ad2      	ldrh	r2, [r2, #22]
 80066de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066e0:	8b09      	ldrh	r1, [r1, #24]
 80066e2:	9102      	str	r1, [sp, #8]
 80066e4:	9201      	str	r2, [sp, #4]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	462b      	mov	r3, r5
 80066ea:	4622      	mov	r2, r4
 80066ec:	4601      	mov	r1, r0
 80066ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066f0:	f004 fec0 	bl	800b474 <tcp_rst>
      err_arg = pcb->callback_arg;
 80066f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80066fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066fc:	7d1b      	ldrb	r3, [r3, #20]
 80066fe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006702:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800670a:	6838      	ldr	r0, [r7, #0]
 800670c:	f7ff f836 	bl	800577c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8006710:	4b30      	ldr	r3, [pc, #192]	@ (80067d4 <tcp_slowtmr+0x5a8>)
 8006712:	2200      	movs	r2, #0
 8006714:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d004      	beq.n	8006726 <tcp_slowtmr+0x4fa>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f06f 010c 	mvn.w	r1, #12
 8006722:	68b8      	ldr	r0, [r7, #8]
 8006724:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006726:	4b2b      	ldr	r3, [pc, #172]	@ (80067d4 <tcp_slowtmr+0x5a8>)
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d037      	beq.n	800679e <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800672e:	e590      	b.n	8006252 <tcp_slowtmr+0x26>
      prev = pcb;
 8006730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006732:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800673a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673c:	7f1b      	ldrb	r3, [r3, #28]
 800673e:	3301      	adds	r3, #1
 8006740:	b2da      	uxtb	r2, r3
 8006742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006744:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006748:	7f1a      	ldrb	r2, [r3, #28]
 800674a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674c:	7f5b      	ldrb	r3, [r3, #29]
 800674e:	429a      	cmp	r2, r3
 8006750:	d325      	bcc.n	800679e <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8006752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006754:	2200      	movs	r2, #0
 8006756:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8006758:	4b1e      	ldr	r3, [pc, #120]	@ (80067d4 <tcp_slowtmr+0x5a8>)
 800675a:	2200      	movs	r2, #0
 800675c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800675e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00b      	beq.n	8006780 <tcp_slowtmr+0x554>
 8006768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800676e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006770:	6912      	ldr	r2, [r2, #16]
 8006772:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006774:	4610      	mov	r0, r2
 8006776:	4798      	blx	r3
 8006778:	4603      	mov	r3, r0
 800677a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800677e:	e002      	b.n	8006786 <tcp_slowtmr+0x55a>
 8006780:	2300      	movs	r3, #0
 8006782:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8006786:	4b13      	ldr	r3, [pc, #76]	@ (80067d4 <tcp_slowtmr+0x5a8>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	f47f ad60 	bne.w	8006250 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006790:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006794:	2b00      	cmp	r3, #0
 8006796:	d102      	bne.n	800679e <tcp_slowtmr+0x572>
          tcp_output(prev);
 8006798:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800679a:	f004 f8b7 	bl	800a90c <tcp_output>
  while (pcb != NULL) {
 800679e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f47f ad5c 	bne.w	800625e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80067aa:	4b0b      	ldr	r3, [pc, #44]	@ (80067d8 <tcp_slowtmr+0x5ac>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80067b0:	e067      	b.n	8006882 <tcp_slowtmr+0x656>
 80067b2:	bf00      	nop
 80067b4:	20008244 	.word	0x20008244
 80067b8:	10624dd3 	.word	0x10624dd3
 80067bc:	000124f8 	.word	0x000124f8
 80067c0:	20008250 	.word	0x20008250
 80067c4:	0800fee0 	.word	0x0800fee0
 80067c8:	08010318 	.word	0x08010318
 80067cc:	0800ff24 	.word	0x0800ff24
 80067d0:	08010344 	.word	0x08010344
 80067d4:	20008258 	.word	0x20008258
 80067d8:	20008254 	.word	0x20008254
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80067dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067de:	7d1b      	ldrb	r3, [r3, #20]
 80067e0:	2b0a      	cmp	r3, #10
 80067e2:	d006      	beq.n	80067f2 <tcp_slowtmr+0x5c6>
 80067e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006894 <tcp_slowtmr+0x668>)
 80067e6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80067ea:	492b      	ldr	r1, [pc, #172]	@ (8006898 <tcp_slowtmr+0x66c>)
 80067ec:	482b      	ldr	r0, [pc, #172]	@ (800689c <tcp_slowtmr+0x670>)
 80067ee:	f007 fecd 	bl	800e58c <iprintf>
    pcb_remove = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80067f8:	4b29      	ldr	r3, [pc, #164]	@ (80068a0 <tcp_slowtmr+0x674>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2bf0      	cmp	r3, #240	@ 0xf0
 8006804:	d904      	bls.n	8006810 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8006806:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800680a:	3301      	adds	r3, #1
 800680c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006814:	2b00      	cmp	r3, #0
 8006816:	d02f      	beq.n	8006878 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006818:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800681a:	f000 fc11 	bl	8007040 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800681e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006820:	2b00      	cmp	r3, #0
 8006822:	d010      	beq.n	8006846 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006824:	4b1f      	ldr	r3, [pc, #124]	@ (80068a4 <tcp_slowtmr+0x678>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800682a:	429a      	cmp	r2, r3
 800682c:	d106      	bne.n	800683c <tcp_slowtmr+0x610>
 800682e:	4b19      	ldr	r3, [pc, #100]	@ (8006894 <tcp_slowtmr+0x668>)
 8006830:	f240 52af 	movw	r2, #1455	@ 0x5af
 8006834:	491c      	ldr	r1, [pc, #112]	@ (80068a8 <tcp_slowtmr+0x67c>)
 8006836:	4819      	ldr	r0, [pc, #100]	@ (800689c <tcp_slowtmr+0x670>)
 8006838:	f007 fea8 	bl	800e58c <iprintf>
        prev->next = pcb->next;
 800683c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006842:	60da      	str	r2, [r3, #12]
 8006844:	e00f      	b.n	8006866 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006846:	4b17      	ldr	r3, [pc, #92]	@ (80068a4 <tcp_slowtmr+0x678>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800684c:	429a      	cmp	r2, r3
 800684e:	d006      	beq.n	800685e <tcp_slowtmr+0x632>
 8006850:	4b10      	ldr	r3, [pc, #64]	@ (8006894 <tcp_slowtmr+0x668>)
 8006852:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8006856:	4915      	ldr	r1, [pc, #84]	@ (80068ac <tcp_slowtmr+0x680>)
 8006858:	4810      	ldr	r0, [pc, #64]	@ (800689c <tcp_slowtmr+0x670>)
 800685a:	f007 fe97 	bl	800e58c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800685e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	4a10      	ldr	r2, [pc, #64]	@ (80068a4 <tcp_slowtmr+0x678>)
 8006864:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006868:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800686a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8006870:	69f8      	ldr	r0, [r7, #28]
 8006872:	f7fe ff83 	bl	800577c <tcp_free>
 8006876:	e004      	b.n	8006882 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8006878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800687c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8006882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1a9      	bne.n	80067dc <tcp_slowtmr+0x5b0>
    }
  }
}
 8006888:	bf00      	nop
 800688a:	bf00      	nop
 800688c:	3730      	adds	r7, #48	@ 0x30
 800688e:	46bd      	mov	sp, r7
 8006890:	bdb0      	pop	{r4, r5, r7, pc}
 8006892:	bf00      	nop
 8006894:	0800fee0 	.word	0x0800fee0
 8006898:	08010370 	.word	0x08010370
 800689c:	0800ff24 	.word	0x0800ff24
 80068a0:	20008244 	.word	0x20008244
 80068a4:	20008254 	.word	0x20008254
 80068a8:	080103a0 	.word	0x080103a0
 80068ac:	080103c8 	.word	0x080103c8

080068b0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80068b6:	4b2d      	ldr	r3, [pc, #180]	@ (800696c <tcp_fasttmr+0xbc>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	3301      	adds	r3, #1
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	4b2b      	ldr	r3, [pc, #172]	@ (800696c <tcp_fasttmr+0xbc>)
 80068c0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80068c2:	4b2b      	ldr	r3, [pc, #172]	@ (8006970 <tcp_fasttmr+0xc0>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80068c8:	e048      	b.n	800695c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	7f9a      	ldrb	r2, [r3, #30]
 80068ce:	4b27      	ldr	r3, [pc, #156]	@ (800696c <tcp_fasttmr+0xbc>)
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d03f      	beq.n	8006956 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80068d6:	4b25      	ldr	r3, [pc, #148]	@ (800696c <tcp_fasttmr+0xbc>)
 80068d8:	781a      	ldrb	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	8b5b      	ldrh	r3, [r3, #26]
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d010      	beq.n	800690c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	8b5b      	ldrh	r3, [r3, #26]
 80068ee:	f043 0302 	orr.w	r3, r3, #2
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f004 f807 	bl	800a90c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	8b5b      	ldrh	r3, [r3, #26]
 8006902:	f023 0303 	bic.w	r3, r3, #3
 8006906:	b29a      	uxth	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	8b5b      	ldrh	r3, [r3, #26]
 8006910:	f003 0308 	and.w	r3, r3, #8
 8006914:	2b00      	cmp	r3, #0
 8006916:	d009      	beq.n	800692c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	8b5b      	ldrh	r3, [r3, #26]
 800691c:	f023 0308 	bic.w	r3, r3, #8
 8006920:	b29a      	uxth	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7ff f8bc 	bl	8005aa4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800693a:	4b0e      	ldr	r3, [pc, #56]	@ (8006974 <tcp_fasttmr+0xc4>)
 800693c:	2200      	movs	r2, #0
 800693e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f819 	bl	8006978 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006946:	4b0b      	ldr	r3, [pc, #44]	@ (8006974 <tcp_fasttmr+0xc4>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d000      	beq.n	8006950 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800694e:	e7b8      	b.n	80068c2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	607b      	str	r3, [r7, #4]
 8006954:	e002      	b.n	800695c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1b3      	bne.n	80068ca <tcp_fasttmr+0x1a>
    }
  }
}
 8006962:	bf00      	nop
 8006964:	bf00      	nop
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	2000825a 	.word	0x2000825a
 8006970:	20008250 	.word	0x20008250
 8006974:	20008258 	.word	0x20008258

08006978 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006978:	b590      	push	{r4, r7, lr}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <tcp_process_refused_data+0x22>
 8006986:	4b37      	ldr	r3, [pc, #220]	@ (8006a64 <tcp_process_refused_data+0xec>)
 8006988:	f240 6209 	movw	r2, #1545	@ 0x609
 800698c:	4936      	ldr	r1, [pc, #216]	@ (8006a68 <tcp_process_refused_data+0xf0>)
 800698e:	4837      	ldr	r0, [pc, #220]	@ (8006a6c <tcp_process_refused_data+0xf4>)
 8006990:	f007 fdfc 	bl	800e58c <iprintf>
 8006994:	f06f 030f 	mvn.w	r3, #15
 8006998:	e060      	b.n	8006a5c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800699e:	7b5b      	ldrb	r3, [r3, #13]
 80069a0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069a6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <tcp_process_refused_data+0x58>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6918      	ldr	r0, [r3, #16]
 80069c2:	2300      	movs	r3, #0
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	6879      	ldr	r1, [r7, #4]
 80069c8:	47a0      	blx	r4
 80069ca:	4603      	mov	r3, r0
 80069cc:	73fb      	strb	r3, [r7, #15]
 80069ce:	e007      	b.n	80069e0 <tcp_process_refused_data+0x68>
 80069d0:	2300      	movs	r3, #0
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	2000      	movs	r0, #0
 80069d8:	f000 f8c2 	bl	8006b60 <tcp_recv_null>
 80069dc:	4603      	mov	r3, r0
 80069de:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80069e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d12a      	bne.n	8006a3e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80069e8:	7bbb      	ldrb	r3, [r7, #14]
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d033      	beq.n	8006a5a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069f6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80069fa:	d005      	beq.n	8006a08 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a00:	3301      	adds	r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <tcp_process_refused_data+0xb2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6918      	ldr	r0, [r3, #16]
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	2200      	movs	r2, #0
 8006a20:	6879      	ldr	r1, [r7, #4]
 8006a22:	47a0      	blx	r4
 8006a24:	4603      	mov	r3, r0
 8006a26:	73fb      	strb	r3, [r7, #15]
 8006a28:	e001      	b.n	8006a2e <tcp_process_refused_data+0xb6>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a32:	f113 0f0d 	cmn.w	r3, #13
 8006a36:	d110      	bne.n	8006a5a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006a38:	f06f 030c 	mvn.w	r3, #12
 8006a3c:	e00e      	b.n	8006a5c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a42:	f113 0f0d 	cmn.w	r3, #13
 8006a46:	d102      	bne.n	8006a4e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006a48:	f06f 030c 	mvn.w	r3, #12
 8006a4c:	e006      	b.n	8006a5c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8006a54:	f06f 0304 	mvn.w	r3, #4
 8006a58:	e000      	b.n	8006a5c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd90      	pop	{r4, r7, pc}
 8006a64:	0800fee0 	.word	0x0800fee0
 8006a68:	080103f0 	.word	0x080103f0
 8006a6c:	0800ff24 	.word	0x0800ff24

08006a70 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006a78:	e007      	b.n	8006a8a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f80a 	bl	8006a9a <tcp_seg_free>
    seg = next;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1f4      	bne.n	8006a7a <tcp_segs_free+0xa>
  }
}
 8006a90:	bf00      	nop
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00c      	beq.n	8006ac2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d004      	beq.n	8006aba <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fe fbb1 	bl	800521c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	2003      	movs	r0, #3
 8006abe:	f7fd fd37 	bl	8004530 <memp_free>
  }
}
 8006ac2:	bf00      	nop
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d107      	bne.n	8006aee <tcp_setprio+0x22>
 8006ade:	4b07      	ldr	r3, [pc, #28]	@ (8006afc <tcp_setprio+0x30>)
 8006ae0:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8006ae4:	4906      	ldr	r1, [pc, #24]	@ (8006b00 <tcp_setprio+0x34>)
 8006ae6:	4807      	ldr	r0, [pc, #28]	@ (8006b04 <tcp_setprio+0x38>)
 8006ae8:	f007 fd50 	bl	800e58c <iprintf>
 8006aec:	e002      	b.n	8006af4 <tcp_setprio+0x28>

  pcb->prio = prio;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	78fa      	ldrb	r2, [r7, #3]
 8006af2:	755a      	strb	r2, [r3, #21]
}
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	0800fee0 	.word	0x0800fee0
 8006b00:	08010418 	.word	0x08010418
 8006b04:	0800ff24 	.word	0x0800ff24

08006b08 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d106      	bne.n	8006b24 <tcp_seg_copy+0x1c>
 8006b16:	4b0f      	ldr	r3, [pc, #60]	@ (8006b54 <tcp_seg_copy+0x4c>)
 8006b18:	f240 6282 	movw	r2, #1666	@ 0x682
 8006b1c:	490e      	ldr	r1, [pc, #56]	@ (8006b58 <tcp_seg_copy+0x50>)
 8006b1e:	480f      	ldr	r0, [pc, #60]	@ (8006b5c <tcp_seg_copy+0x54>)
 8006b20:	f007 fd34 	bl	800e58c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006b24:	2003      	movs	r0, #3
 8006b26:	f7fd fc93 	bl	8004450 <memp_malloc>
 8006b2a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <tcp_seg_copy+0x2e>
    return NULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e00a      	b.n	8006b4c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006b36:	2210      	movs	r2, #16
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f007 fe01 	bl	800e742 <memcpy>
  pbuf_ref(cseg->p);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7fe fc09 	bl	800535c <pbuf_ref>
  return cseg;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	0800fee0 	.word	0x0800fee0
 8006b58:	08010434 	.word	0x08010434
 8006b5c:	0800ff24 	.word	0x0800ff24

08006b60 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d109      	bne.n	8006b88 <tcp_recv_null+0x28>
 8006b74:	4b12      	ldr	r3, [pc, #72]	@ (8006bc0 <tcp_recv_null+0x60>)
 8006b76:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8006b7a:	4912      	ldr	r1, [pc, #72]	@ (8006bc4 <tcp_recv_null+0x64>)
 8006b7c:	4812      	ldr	r0, [pc, #72]	@ (8006bc8 <tcp_recv_null+0x68>)
 8006b7e:	f007 fd05 	bl	800e58c <iprintf>
 8006b82:	f06f 030f 	mvn.w	r3, #15
 8006b86:	e016      	b.n	8006bb6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d009      	beq.n	8006ba2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	891b      	ldrh	r3, [r3, #8]
 8006b92:	4619      	mov	r1, r3
 8006b94:	68b8      	ldr	r0, [r7, #8]
 8006b96:	f7ff fab3 	bl	8006100 <tcp_recved>
    pbuf_free(p);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fe fb3e 	bl	800521c <pbuf_free>
 8006ba0:	e008      	b.n	8006bb4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006ba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d104      	bne.n	8006bb4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006baa:	68b8      	ldr	r0, [r7, #8]
 8006bac:	f7fe ffe4 	bl	8005b78 <tcp_close>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	e000      	b.n	8006bb6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	0800fee0 	.word	0x0800fee0
 8006bc4:	08010450 	.word	0x08010450
 8006bc8:	0800ff24 	.word	0x0800ff24

08006bcc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	db01      	blt.n	8006be2 <tcp_kill_prio+0x16>
 8006bde:	79fb      	ldrb	r3, [r7, #7]
 8006be0:	e000      	b.n	8006be4 <tcp_kill_prio+0x18>
 8006be2:	237f      	movs	r3, #127	@ 0x7f
 8006be4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006be6:	7afb      	ldrb	r3, [r7, #11]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d034      	beq.n	8006c56 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006bec:	7afb      	ldrb	r3, [r7, #11]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006bfa:	4b19      	ldr	r3, [pc, #100]	@ (8006c60 <tcp_kill_prio+0x94>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	e01f      	b.n	8006c42 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	7d5b      	ldrb	r3, [r3, #21]
 8006c06:	7afa      	ldrb	r2, [r7, #11]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d80c      	bhi.n	8006c26 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006c10:	7afa      	ldrb	r2, [r7, #11]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d112      	bne.n	8006c3c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006c16:	4b13      	ldr	r3, [pc, #76]	@ (8006c64 <tcp_kill_prio+0x98>)
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d80a      	bhi.n	8006c3c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006c26:	4b0f      	ldr	r3, [pc, #60]	@ (8006c64 <tcp_kill_prio+0x98>)
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	7d5b      	ldrb	r3, [r3, #21]
 8006c3a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1dc      	bne.n	8006c02 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d004      	beq.n	8006c58 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006c4e:	6938      	ldr	r0, [r7, #16]
 8006c50:	f7ff f87c 	bl	8005d4c <tcp_abort>
 8006c54:	e000      	b.n	8006c58 <tcp_kill_prio+0x8c>
    return;
 8006c56:	bf00      	nop
  }
}
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20008250 	.word	0x20008250
 8006c64:	20008244 	.word	0x20008244

08006c68 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006c72:	79fb      	ldrb	r3, [r7, #7]
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d009      	beq.n	8006c8c <tcp_kill_state+0x24>
 8006c78:	79fb      	ldrb	r3, [r7, #7]
 8006c7a:	2b09      	cmp	r3, #9
 8006c7c:	d006      	beq.n	8006c8c <tcp_kill_state+0x24>
 8006c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ce8 <tcp_kill_state+0x80>)
 8006c80:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8006c84:	4919      	ldr	r1, [pc, #100]	@ (8006cec <tcp_kill_state+0x84>)
 8006c86:	481a      	ldr	r0, [pc, #104]	@ (8006cf0 <tcp_kill_state+0x88>)
 8006c88:	f007 fc80 	bl	800e58c <iprintf>

  inactivity = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006c90:	2300      	movs	r3, #0
 8006c92:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c94:	4b17      	ldr	r3, [pc, #92]	@ (8006cf4 <tcp_kill_state+0x8c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	617b      	str	r3, [r7, #20]
 8006c9a:	e017      	b.n	8006ccc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	7d1b      	ldrb	r3, [r3, #20]
 8006ca0:	79fa      	ldrb	r2, [r7, #7]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d10f      	bne.n	8006cc6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006ca6:	4b14      	ldr	r3, [pc, #80]	@ (8006cf8 <tcp_kill_state+0x90>)
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d807      	bhi.n	8006cc6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006cb6:	4b10      	ldr	r3, [pc, #64]	@ (8006cf8 <tcp_kill_state+0x90>)
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1e4      	bne.n	8006c9c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006cd8:	2100      	movs	r1, #0
 8006cda:	6938      	ldr	r0, [r7, #16]
 8006cdc:	f7fe ff78 	bl	8005bd0 <tcp_abandon>
  }
}
 8006ce0:	bf00      	nop
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	0800fee0 	.word	0x0800fee0
 8006cec:	0801046c 	.word	0x0801046c
 8006cf0:	0800ff24 	.word	0x0800ff24
 8006cf4:	20008250 	.word	0x20008250
 8006cf8:	20008244 	.word	0x20008244

08006cfc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006d02:	2300      	movs	r3, #0
 8006d04:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d0a:	4b12      	ldr	r3, [pc, #72]	@ (8006d54 <tcp_kill_timewait+0x58>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	e012      	b.n	8006d38 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006d12:	4b11      	ldr	r3, [pc, #68]	@ (8006d58 <tcp_kill_timewait+0x5c>)
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d807      	bhi.n	8006d32 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006d22:	4b0d      	ldr	r3, [pc, #52]	@ (8006d58 <tcp_kill_timewait+0x5c>)
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e9      	bne.n	8006d12 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006d44:	68b8      	ldr	r0, [r7, #8]
 8006d46:	f7ff f801 	bl	8005d4c <tcp_abort>
  }
}
 8006d4a:	bf00      	nop
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	20008254 	.word	0x20008254
 8006d58:	20008244 	.word	0x20008244

08006d5c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006d62:	4b10      	ldr	r3, [pc, #64]	@ (8006da4 <tcp_handle_closepend+0x48>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006d68:	e014      	b.n	8006d94 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	8b5b      	ldrh	r3, [r3, #26]
 8006d74:	f003 0308 	and.w	r3, r3, #8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d009      	beq.n	8006d90 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	8b5b      	ldrh	r3, [r3, #26]
 8006d80:	f023 0308 	bic.w	r3, r3, #8
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7fe fe8a 	bl	8005aa4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1e7      	bne.n	8006d6a <tcp_handle_closepend+0xe>
  }
}
 8006d9a:	bf00      	nop
 8006d9c:	bf00      	nop
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20008250 	.word	0x20008250

08006da8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	4603      	mov	r3, r0
 8006db0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006db2:	2001      	movs	r0, #1
 8006db4:	f7fd fb4c 	bl	8004450 <memp_malloc>
 8006db8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d126      	bne.n	8006e0e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006dc0:	f7ff ffcc 	bl	8006d5c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006dc4:	f7ff ff9a 	bl	8006cfc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006dc8:	2001      	movs	r0, #1
 8006dca:	f7fd fb41 	bl	8004450 <memp_malloc>
 8006dce:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d11b      	bne.n	8006e0e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006dd6:	2009      	movs	r0, #9
 8006dd8:	f7ff ff46 	bl	8006c68 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ddc:	2001      	movs	r0, #1
 8006dde:	f7fd fb37 	bl	8004450 <memp_malloc>
 8006de2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d111      	bne.n	8006e0e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006dea:	2008      	movs	r0, #8
 8006dec:	f7ff ff3c 	bl	8006c68 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006df0:	2001      	movs	r0, #1
 8006df2:	f7fd fb2d 	bl	8004450 <memp_malloc>
 8006df6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d107      	bne.n	8006e0e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006dfe:	79fb      	ldrb	r3, [r7, #7]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff fee3 	bl	8006bcc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006e06:	2001      	movs	r0, #1
 8006e08:	f7fd fb22 	bl	8004450 <memp_malloc>
 8006e0c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d03f      	beq.n	8006e94 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006e14:	229c      	movs	r2, #156	@ 0x9c
 8006e16:	2100      	movs	r1, #0
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f007 fc1c 	bl	800e656 <memset>
    pcb->prio = prio;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	79fa      	ldrb	r2, [r7, #7]
 8006e22:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8006e2a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	22ff      	movs	r2, #255	@ 0xff
 8006e42:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8006e4a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2206      	movs	r2, #6
 8006e50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2206      	movs	r2, #6
 8006e58:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e60:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8006e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea0 <tcp_alloc+0xf8>)
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006e72:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea4 <tcp_alloc+0xfc>)
 8006e74:	781a      	ldrb	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8006e80:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4a08      	ldr	r2, [pc, #32]	@ (8006ea8 <tcp_alloc+0x100>)
 8006e88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4a07      	ldr	r2, [pc, #28]	@ (8006eac <tcp_alloc+0x104>)
 8006e90:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006e94:	68fb      	ldr	r3, [r7, #12]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20008244 	.word	0x20008244
 8006ea4:	2000825a 	.word	0x2000825a
 8006ea8:	08006b61 	.word	0x08006b61
 8006eac:	006ddd00 	.word	0x006ddd00

08006eb0 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8006eb4:	2040      	movs	r0, #64	@ 0x40
 8006eb6:	f7ff ff77 	bl	8006da8 <tcp_alloc>
 8006eba:	4603      	mov	r3, r0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	611a      	str	r2, [r3, #16]
  }
}
 8006ed6:	bf00      	nop
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
	...

08006ee4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00e      	beq.n	8006f12 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	7d1b      	ldrb	r3, [r3, #20]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d106      	bne.n	8006f0a <tcp_recv+0x26>
 8006efc:	4b07      	ldr	r3, [pc, #28]	@ (8006f1c <tcp_recv+0x38>)
 8006efe:	f240 72df 	movw	r2, #2015	@ 0x7df
 8006f02:	4907      	ldr	r1, [pc, #28]	@ (8006f20 <tcp_recv+0x3c>)
 8006f04:	4807      	ldr	r0, [pc, #28]	@ (8006f24 <tcp_recv+0x40>)
 8006f06:	f007 fb41 	bl	800e58c <iprintf>
    pcb->recv = recv;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8006f12:	bf00      	nop
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	0800fee0 	.word	0x0800fee0
 8006f20:	0801047c 	.word	0x0801047c
 8006f24:	0800ff24 	.word	0x0800ff24

08006f28 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00e      	beq.n	8006f56 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	7d1b      	ldrb	r3, [r3, #20]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d106      	bne.n	8006f4e <tcp_sent+0x26>
 8006f40:	4b07      	ldr	r3, [pc, #28]	@ (8006f60 <tcp_sent+0x38>)
 8006f42:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8006f46:	4907      	ldr	r1, [pc, #28]	@ (8006f64 <tcp_sent+0x3c>)
 8006f48:	4807      	ldr	r0, [pc, #28]	@ (8006f68 <tcp_sent+0x40>)
 8006f4a:	f007 fb1f 	bl	800e58c <iprintf>
    pcb->sent = sent;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8006f56:	bf00      	nop
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	0800fee0 	.word	0x0800fee0
 8006f64:	080104a4 	.word	0x080104a4
 8006f68:	0800ff24 	.word	0x0800ff24

08006f6c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00e      	beq.n	8006f9a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	7d1b      	ldrb	r3, [r3, #20]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d106      	bne.n	8006f92 <tcp_err+0x26>
 8006f84:	4b07      	ldr	r3, [pc, #28]	@ (8006fa4 <tcp_err+0x38>)
 8006f86:	f640 020d 	movw	r2, #2061	@ 0x80d
 8006f8a:	4907      	ldr	r1, [pc, #28]	@ (8006fa8 <tcp_err+0x3c>)
 8006f8c:	4807      	ldr	r0, [pc, #28]	@ (8006fac <tcp_err+0x40>)
 8006f8e:	f007 fafd 	bl	800e58c <iprintf>
    pcb->errf = err;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8006f9a:	bf00      	nop
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	0800fee0 	.word	0x0800fee0
 8006fa8:	080104cc 	.word	0x080104cc
 8006fac:	0800ff24 	.word	0x0800ff24

08006fb0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d008      	beq.n	8006fd2 <tcp_accept+0x22>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	7d1b      	ldrb	r3, [r3, #20]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d104      	bne.n	8006fd2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	619a      	str	r2, [r3, #24]
  }
}
 8006fd2:	bf00      	nop
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
	...

08006fe0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	4613      	mov	r3, r2
 8006fec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d107      	bne.n	8007004 <tcp_poll+0x24>
 8006ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8007030 <tcp_poll+0x50>)
 8006ff6:	f640 023d 	movw	r2, #2109	@ 0x83d
 8006ffa:	490e      	ldr	r1, [pc, #56]	@ (8007034 <tcp_poll+0x54>)
 8006ffc:	480e      	ldr	r0, [pc, #56]	@ (8007038 <tcp_poll+0x58>)
 8006ffe:	f007 fac5 	bl	800e58c <iprintf>
 8007002:	e011      	b.n	8007028 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	7d1b      	ldrb	r3, [r3, #20]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d106      	bne.n	800701a <tcp_poll+0x3a>
 800700c:	4b08      	ldr	r3, [pc, #32]	@ (8007030 <tcp_poll+0x50>)
 800700e:	f640 023e 	movw	r2, #2110	@ 0x83e
 8007012:	490a      	ldr	r1, [pc, #40]	@ (800703c <tcp_poll+0x5c>)
 8007014:	4808      	ldr	r0, [pc, #32]	@ (8007038 <tcp_poll+0x58>)
 8007016:	f007 fab9 	bl	800e58c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	79fa      	ldrb	r2, [r7, #7]
 8007026:	775a      	strb	r2, [r3, #29]
}
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	0800fee0 	.word	0x0800fee0
 8007034:	080104f4 	.word	0x080104f4
 8007038:	0800ff24 	.word	0x0800ff24
 800703c:	0801050c 	.word	0x0801050c

08007040 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d107      	bne.n	800705e <tcp_pcb_purge+0x1e>
 800704e:	4b21      	ldr	r3, [pc, #132]	@ (80070d4 <tcp_pcb_purge+0x94>)
 8007050:	f640 0251 	movw	r2, #2129	@ 0x851
 8007054:	4920      	ldr	r1, [pc, #128]	@ (80070d8 <tcp_pcb_purge+0x98>)
 8007056:	4821      	ldr	r0, [pc, #132]	@ (80070dc <tcp_pcb_purge+0x9c>)
 8007058:	f007 fa98 	bl	800e58c <iprintf>
 800705c:	e037      	b.n	80070ce <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	7d1b      	ldrb	r3, [r3, #20]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d033      	beq.n	80070ce <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800706a:	2b0a      	cmp	r3, #10
 800706c:	d02f      	beq.n	80070ce <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007072:	2b01      	cmp	r3, #1
 8007074:	d02b      	beq.n	80070ce <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800707a:	2b00      	cmp	r3, #0
 800707c:	d007      	beq.n	800708e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe f8ca 	bl	800521c <pbuf_free>
      pcb->refused_data = NULL;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f986 	bl	80073a8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80070a2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7ff fce1 	bl	8006a70 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff fcdc 	bl	8006a70 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	0800fee0 	.word	0x0800fee0
 80070d8:	0801052c 	.word	0x0801052c
 80070dc:	0800ff24 	.word	0x0800ff24

080070e0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d106      	bne.n	80070fe <tcp_pcb_remove+0x1e>
 80070f0:	4b3e      	ldr	r3, [pc, #248]	@ (80071ec <tcp_pcb_remove+0x10c>)
 80070f2:	f640 0283 	movw	r2, #2179	@ 0x883
 80070f6:	493e      	ldr	r1, [pc, #248]	@ (80071f0 <tcp_pcb_remove+0x110>)
 80070f8:	483e      	ldr	r0, [pc, #248]	@ (80071f4 <tcp_pcb_remove+0x114>)
 80070fa:	f007 fa47 	bl	800e58c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d106      	bne.n	8007112 <tcp_pcb_remove+0x32>
 8007104:	4b39      	ldr	r3, [pc, #228]	@ (80071ec <tcp_pcb_remove+0x10c>)
 8007106:	f640 0284 	movw	r2, #2180	@ 0x884
 800710a:	493b      	ldr	r1, [pc, #236]	@ (80071f8 <tcp_pcb_remove+0x118>)
 800710c:	4839      	ldr	r0, [pc, #228]	@ (80071f4 <tcp_pcb_remove+0x114>)
 800710e:	f007 fa3d 	bl	800e58c <iprintf>

  TCP_RMV(pcblist, pcb);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	429a      	cmp	r2, r3
 800711a:	d105      	bne.n	8007128 <tcp_pcb_remove+0x48>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	e013      	b.n	8007150 <tcp_pcb_remove+0x70>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	60fb      	str	r3, [r7, #12]
 800712e:	e00c      	b.n	800714a <tcp_pcb_remove+0x6a>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	429a      	cmp	r2, r3
 8007138:	d104      	bne.n	8007144 <tcp_pcb_remove+0x64>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	60da      	str	r2, [r3, #12]
 8007142:	e005      	b.n	8007150 <tcp_pcb_remove+0x70>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	60fb      	str	r3, [r7, #12]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1ef      	bne.n	8007130 <tcp_pcb_remove+0x50>
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2200      	movs	r2, #0
 8007154:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007156:	6838      	ldr	r0, [r7, #0]
 8007158:	f7ff ff72 	bl	8007040 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	7d1b      	ldrb	r3, [r3, #20]
 8007160:	2b0a      	cmp	r3, #10
 8007162:	d013      	beq.n	800718c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007168:	2b01      	cmp	r3, #1
 800716a:	d00f      	beq.n	800718c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	8b5b      	ldrh	r3, [r3, #26]
 8007170:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007174:	2b00      	cmp	r3, #0
 8007176:	d009      	beq.n	800718c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	8b5b      	ldrh	r3, [r3, #26]
 800717c:	f043 0302 	orr.w	r3, r3, #2
 8007180:	b29a      	uxth	r2, r3
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007186:	6838      	ldr	r0, [r7, #0]
 8007188:	f003 fbc0 	bl	800a90c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	7d1b      	ldrb	r3, [r3, #20]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d020      	beq.n	80071d6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007198:	2b00      	cmp	r3, #0
 800719a:	d006      	beq.n	80071aa <tcp_pcb_remove+0xca>
 800719c:	4b13      	ldr	r3, [pc, #76]	@ (80071ec <tcp_pcb_remove+0x10c>)
 800719e:	f640 0293 	movw	r2, #2195	@ 0x893
 80071a2:	4916      	ldr	r1, [pc, #88]	@ (80071fc <tcp_pcb_remove+0x11c>)
 80071a4:	4813      	ldr	r0, [pc, #76]	@ (80071f4 <tcp_pcb_remove+0x114>)
 80071a6:	f007 f9f1 	bl	800e58c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d006      	beq.n	80071c0 <tcp_pcb_remove+0xe0>
 80071b2:	4b0e      	ldr	r3, [pc, #56]	@ (80071ec <tcp_pcb_remove+0x10c>)
 80071b4:	f640 0294 	movw	r2, #2196	@ 0x894
 80071b8:	4911      	ldr	r1, [pc, #68]	@ (8007200 <tcp_pcb_remove+0x120>)
 80071ba:	480e      	ldr	r0, [pc, #56]	@ (80071f4 <tcp_pcb_remove+0x114>)
 80071bc:	f007 f9e6 	bl	800e58c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d006      	beq.n	80071d6 <tcp_pcb_remove+0xf6>
 80071c8:	4b08      	ldr	r3, [pc, #32]	@ (80071ec <tcp_pcb_remove+0x10c>)
 80071ca:	f640 0296 	movw	r2, #2198	@ 0x896
 80071ce:	490d      	ldr	r1, [pc, #52]	@ (8007204 <tcp_pcb_remove+0x124>)
 80071d0:	4808      	ldr	r0, [pc, #32]	@ (80071f4 <tcp_pcb_remove+0x114>)
 80071d2:	f007 f9db 	bl	800e58c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2200      	movs	r2, #0
 80071da:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2200      	movs	r2, #0
 80071e0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80071e2:	bf00      	nop
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	0800fee0 	.word	0x0800fee0
 80071f0:	08010548 	.word	0x08010548
 80071f4:	0800ff24 	.word	0x0800ff24
 80071f8:	08010564 	.word	0x08010564
 80071fc:	08010584 	.word	0x08010584
 8007200:	0801059c 	.word	0x0801059c
 8007204:	080105b8 	.word	0x080105b8

08007208 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d106      	bne.n	8007224 <tcp_next_iss+0x1c>
 8007216:	4b0a      	ldr	r3, [pc, #40]	@ (8007240 <tcp_next_iss+0x38>)
 8007218:	f640 02af 	movw	r2, #2223	@ 0x8af
 800721c:	4909      	ldr	r1, [pc, #36]	@ (8007244 <tcp_next_iss+0x3c>)
 800721e:	480a      	ldr	r0, [pc, #40]	@ (8007248 <tcp_next_iss+0x40>)
 8007220:	f007 f9b4 	bl	800e58c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007224:	4b09      	ldr	r3, [pc, #36]	@ (800724c <tcp_next_iss+0x44>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	4b09      	ldr	r3, [pc, #36]	@ (8007250 <tcp_next_iss+0x48>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4413      	add	r3, r2
 800722e:	4a07      	ldr	r2, [pc, #28]	@ (800724c <tcp_next_iss+0x44>)
 8007230:	6013      	str	r3, [r2, #0]
  return iss;
 8007232:	4b06      	ldr	r3, [pc, #24]	@ (800724c <tcp_next_iss+0x44>)
 8007234:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	0800fee0 	.word	0x0800fee0
 8007244:	080105d0 	.word	0x080105d0
 8007248:	0800ff24 	.word	0x0800ff24
 800724c:	20000024 	.word	0x20000024
 8007250:	20008244 	.word	0x20008244

08007254 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d106      	bne.n	8007276 <tcp_eff_send_mss_netif+0x22>
 8007268:	4b14      	ldr	r3, [pc, #80]	@ (80072bc <tcp_eff_send_mss_netif+0x68>)
 800726a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800726e:	4914      	ldr	r1, [pc, #80]	@ (80072c0 <tcp_eff_send_mss_netif+0x6c>)
 8007270:	4814      	ldr	r0, [pc, #80]	@ (80072c4 <tcp_eff_send_mss_netif+0x70>)
 8007272:	f007 f98b 	bl	800e58c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800727c:	89fb      	ldrh	r3, [r7, #14]
 800727e:	e019      	b.n	80072b4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007284:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007286:	8afb      	ldrh	r3, [r7, #22]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d012      	beq.n	80072b2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800728c:	2328      	movs	r3, #40	@ 0x28
 800728e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007290:	8afa      	ldrh	r2, [r7, #22]
 8007292:	8abb      	ldrh	r3, [r7, #20]
 8007294:	429a      	cmp	r2, r3
 8007296:	d904      	bls.n	80072a2 <tcp_eff_send_mss_netif+0x4e>
 8007298:	8afa      	ldrh	r2, [r7, #22]
 800729a:	8abb      	ldrh	r3, [r7, #20]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	b29b      	uxth	r3, r3
 80072a0:	e000      	b.n	80072a4 <tcp_eff_send_mss_netif+0x50>
 80072a2:	2300      	movs	r3, #0
 80072a4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80072a6:	8a7a      	ldrh	r2, [r7, #18]
 80072a8:	89fb      	ldrh	r3, [r7, #14]
 80072aa:	4293      	cmp	r3, r2
 80072ac:	bf28      	it	cs
 80072ae:	4613      	movcs	r3, r2
 80072b0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80072b2:	89fb      	ldrh	r3, [r7, #14]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	0800fee0 	.word	0x0800fee0
 80072c0:	080105ec 	.word	0x080105ec
 80072c4:	0800ff24 	.word	0x0800ff24

080072c8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d119      	bne.n	8007310 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80072dc:	4b10      	ldr	r3, [pc, #64]	@ (8007320 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80072de:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80072e2:	4910      	ldr	r1, [pc, #64]	@ (8007324 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80072e4:	4810      	ldr	r0, [pc, #64]	@ (8007328 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80072e6:	f007 f951 	bl	800e58c <iprintf>

  while (pcb != NULL) {
 80072ea:	e011      	b.n	8007310 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d108      	bne.n	800730a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f7fe fd24 	bl	8005d4c <tcp_abort>
      pcb = next;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	e002      	b.n	8007310 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1ea      	bne.n	80072ec <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007316:	bf00      	nop
 8007318:	bf00      	nop
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	0800fee0 	.word	0x0800fee0
 8007324:	08010614 	.word	0x08010614
 8007328:	0800ff24 	.word	0x0800ff24

0800732c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d02a      	beq.n	8007392 <tcp_netif_ip_addr_changed+0x66>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d026      	beq.n	8007392 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007344:	4b15      	ldr	r3, [pc, #84]	@ (800739c <tcp_netif_ip_addr_changed+0x70>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff ffbc 	bl	80072c8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007350:	4b13      	ldr	r3, [pc, #76]	@ (80073a0 <tcp_netif_ip_addr_changed+0x74>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7ff ffb6 	bl	80072c8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d017      	beq.n	8007392 <tcp_netif_ip_addr_changed+0x66>
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d013      	beq.n	8007392 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800736a:	4b0e      	ldr	r3, [pc, #56]	@ (80073a4 <tcp_netif_ip_addr_changed+0x78>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e00c      	b.n	800738c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	429a      	cmp	r2, r3
 800737c:	d103      	bne.n	8007386 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1ef      	bne.n	8007372 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007392:	bf00      	nop
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20008250 	.word	0x20008250
 80073a0:	20008248 	.word	0x20008248
 80073a4:	2000824c 	.word	0x2000824c

080073a8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d007      	beq.n	80073c8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff fb57 	bl	8006a70 <tcp_segs_free>
    pcb->ooseq = NULL;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80073d0:	b590      	push	{r4, r7, lr}
 80073d2:	b08d      	sub	sp, #52	@ 0x34
 80073d4:	af04      	add	r7, sp, #16
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d105      	bne.n	80073ec <tcp_input+0x1c>
 80073e0:	4b9b      	ldr	r3, [pc, #620]	@ (8007650 <tcp_input+0x280>)
 80073e2:	2283      	movs	r2, #131	@ 0x83
 80073e4:	499b      	ldr	r1, [pc, #620]	@ (8007654 <tcp_input+0x284>)
 80073e6:	489c      	ldr	r0, [pc, #624]	@ (8007658 <tcp_input+0x288>)
 80073e8:	f007 f8d0 	bl	800e58c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	4a9a      	ldr	r2, [pc, #616]	@ (800765c <tcp_input+0x28c>)
 80073f2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	895b      	ldrh	r3, [r3, #10]
 80073f8:	2b13      	cmp	r3, #19
 80073fa:	f240 83d1 	bls.w	8007ba0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80073fe:	4b98      	ldr	r3, [pc, #608]	@ (8007660 <tcp_input+0x290>)
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	4a97      	ldr	r2, [pc, #604]	@ (8007660 <tcp_input+0x290>)
 8007404:	6812      	ldr	r2, [r2, #0]
 8007406:	4611      	mov	r1, r2
 8007408:	4618      	mov	r0, r3
 800740a:	f006 f869 	bl	800d4e0 <ip4_addr_isbroadcast_u32>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	f040 83c7 	bne.w	8007ba4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007416:	4b92      	ldr	r3, [pc, #584]	@ (8007660 <tcp_input+0x290>)
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800741e:	2be0      	cmp	r3, #224	@ 0xe0
 8007420:	f000 83c0 	beq.w	8007ba4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007424:	4b8d      	ldr	r3, [pc, #564]	@ (800765c <tcp_input+0x28c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	899b      	ldrh	r3, [r3, #12]
 800742a:	b29b      	uxth	r3, r3
 800742c:	4618      	mov	r0, r3
 800742e:	f7fc fb97 	bl	8003b60 <lwip_htons>
 8007432:	4603      	mov	r3, r0
 8007434:	0b1b      	lsrs	r3, r3, #12
 8007436:	b29b      	uxth	r3, r3
 8007438:	b2db      	uxtb	r3, r3
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800743e:	7cbb      	ldrb	r3, [r7, #18]
 8007440:	2b13      	cmp	r3, #19
 8007442:	f240 83b1 	bls.w	8007ba8 <tcp_input+0x7d8>
 8007446:	7cbb      	ldrb	r3, [r7, #18]
 8007448:	b29a      	uxth	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	891b      	ldrh	r3, [r3, #8]
 800744e:	429a      	cmp	r2, r3
 8007450:	f200 83aa 	bhi.w	8007ba8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007454:	7cbb      	ldrb	r3, [r7, #18]
 8007456:	b29b      	uxth	r3, r3
 8007458:	3b14      	subs	r3, #20
 800745a:	b29a      	uxth	r2, r3
 800745c:	4b81      	ldr	r3, [pc, #516]	@ (8007664 <tcp_input+0x294>)
 800745e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007460:	4b81      	ldr	r3, [pc, #516]	@ (8007668 <tcp_input+0x298>)
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	895a      	ldrh	r2, [r3, #10]
 800746a:	7cbb      	ldrb	r3, [r7, #18]
 800746c:	b29b      	uxth	r3, r3
 800746e:	429a      	cmp	r2, r3
 8007470:	d309      	bcc.n	8007486 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007472:	4b7c      	ldr	r3, [pc, #496]	@ (8007664 <tcp_input+0x294>)
 8007474:	881a      	ldrh	r2, [r3, #0]
 8007476:	4b7d      	ldr	r3, [pc, #500]	@ (800766c <tcp_input+0x29c>)
 8007478:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800747a:	7cbb      	ldrb	r3, [r7, #18]
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7fd fe46 	bl	8005110 <pbuf_remove_header>
 8007484:	e04e      	b.n	8007524 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d105      	bne.n	800749a <tcp_input+0xca>
 800748e:	4b70      	ldr	r3, [pc, #448]	@ (8007650 <tcp_input+0x280>)
 8007490:	22c2      	movs	r2, #194	@ 0xc2
 8007492:	4977      	ldr	r1, [pc, #476]	@ (8007670 <tcp_input+0x2a0>)
 8007494:	4870      	ldr	r0, [pc, #448]	@ (8007658 <tcp_input+0x288>)
 8007496:	f007 f879 	bl	800e58c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800749a:	2114      	movs	r1, #20
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7fd fe37 	bl	8005110 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	895a      	ldrh	r2, [r3, #10]
 80074a6:	4b71      	ldr	r3, [pc, #452]	@ (800766c <tcp_input+0x29c>)
 80074a8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80074aa:	4b6e      	ldr	r3, [pc, #440]	@ (8007664 <tcp_input+0x294>)
 80074ac:	881a      	ldrh	r2, [r3, #0]
 80074ae:	4b6f      	ldr	r3, [pc, #444]	@ (800766c <tcp_input+0x29c>)
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80074b6:	4b6d      	ldr	r3, [pc, #436]	@ (800766c <tcp_input+0x29c>)
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7fd fe27 	bl	8005110 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	895b      	ldrh	r3, [r3, #10]
 80074c8:	8a3a      	ldrh	r2, [r7, #16]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	f200 836e 	bhi.w	8007bac <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	4a64      	ldr	r2, [pc, #400]	@ (8007668 <tcp_input+0x298>)
 80074d8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	8a3a      	ldrh	r2, [r7, #16]
 80074e0:	4611      	mov	r1, r2
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fd fe14 	bl	8005110 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	891a      	ldrh	r2, [r3, #8]
 80074ec:	8a3b      	ldrh	r3, [r7, #16]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	895b      	ldrh	r3, [r3, #10]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <tcp_input+0x13a>
 80074fe:	4b54      	ldr	r3, [pc, #336]	@ (8007650 <tcp_input+0x280>)
 8007500:	22df      	movs	r2, #223	@ 0xdf
 8007502:	495c      	ldr	r1, [pc, #368]	@ (8007674 <tcp_input+0x2a4>)
 8007504:	4854      	ldr	r0, [pc, #336]	@ (8007658 <tcp_input+0x288>)
 8007506:	f007 f841 	bl	800e58c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	891a      	ldrh	r2, [r3, #8]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	891b      	ldrh	r3, [r3, #8]
 8007514:	429a      	cmp	r2, r3
 8007516:	d005      	beq.n	8007524 <tcp_input+0x154>
 8007518:	4b4d      	ldr	r3, [pc, #308]	@ (8007650 <tcp_input+0x280>)
 800751a:	22e0      	movs	r2, #224	@ 0xe0
 800751c:	4956      	ldr	r1, [pc, #344]	@ (8007678 <tcp_input+0x2a8>)
 800751e:	484e      	ldr	r0, [pc, #312]	@ (8007658 <tcp_input+0x288>)
 8007520:	f007 f834 	bl	800e58c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007524:	4b4d      	ldr	r3, [pc, #308]	@ (800765c <tcp_input+0x28c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	b29b      	uxth	r3, r3
 800752c:	4a4b      	ldr	r2, [pc, #300]	@ (800765c <tcp_input+0x28c>)
 800752e:	6814      	ldr	r4, [r2, #0]
 8007530:	4618      	mov	r0, r3
 8007532:	f7fc fb15 	bl	8003b60 <lwip_htons>
 8007536:	4603      	mov	r3, r0
 8007538:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800753a:	4b48      	ldr	r3, [pc, #288]	@ (800765c <tcp_input+0x28c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	885b      	ldrh	r3, [r3, #2]
 8007540:	b29b      	uxth	r3, r3
 8007542:	4a46      	ldr	r2, [pc, #280]	@ (800765c <tcp_input+0x28c>)
 8007544:	6814      	ldr	r4, [r2, #0]
 8007546:	4618      	mov	r0, r3
 8007548:	f7fc fb0a 	bl	8003b60 <lwip_htons>
 800754c:	4603      	mov	r3, r0
 800754e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007550:	4b42      	ldr	r3, [pc, #264]	@ (800765c <tcp_input+0x28c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	4a41      	ldr	r2, [pc, #260]	@ (800765c <tcp_input+0x28c>)
 8007558:	6814      	ldr	r4, [r2, #0]
 800755a:	4618      	mov	r0, r3
 800755c:	f7fc fb16 	bl	8003b8c <lwip_htonl>
 8007560:	4603      	mov	r3, r0
 8007562:	6063      	str	r3, [r4, #4]
 8007564:	6863      	ldr	r3, [r4, #4]
 8007566:	4a45      	ldr	r2, [pc, #276]	@ (800767c <tcp_input+0x2ac>)
 8007568:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800756a:	4b3c      	ldr	r3, [pc, #240]	@ (800765c <tcp_input+0x28c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	4a3a      	ldr	r2, [pc, #232]	@ (800765c <tcp_input+0x28c>)
 8007572:	6814      	ldr	r4, [r2, #0]
 8007574:	4618      	mov	r0, r3
 8007576:	f7fc fb09 	bl	8003b8c <lwip_htonl>
 800757a:	4603      	mov	r3, r0
 800757c:	60a3      	str	r3, [r4, #8]
 800757e:	68a3      	ldr	r3, [r4, #8]
 8007580:	4a3f      	ldr	r2, [pc, #252]	@ (8007680 <tcp_input+0x2b0>)
 8007582:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007584:	4b35      	ldr	r3, [pc, #212]	@ (800765c <tcp_input+0x28c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	89db      	ldrh	r3, [r3, #14]
 800758a:	b29b      	uxth	r3, r3
 800758c:	4a33      	ldr	r2, [pc, #204]	@ (800765c <tcp_input+0x28c>)
 800758e:	6814      	ldr	r4, [r2, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f7fc fae5 	bl	8003b60 <lwip_htons>
 8007596:	4603      	mov	r3, r0
 8007598:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800759a:	4b30      	ldr	r3, [pc, #192]	@ (800765c <tcp_input+0x28c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	899b      	ldrh	r3, [r3, #12]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fc fadc 	bl	8003b60 <lwip_htons>
 80075a8:	4603      	mov	r3, r0
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	4b34      	ldr	r3, [pc, #208]	@ (8007684 <tcp_input+0x2b4>)
 80075b4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	891a      	ldrh	r2, [r3, #8]
 80075ba:	4b33      	ldr	r3, [pc, #204]	@ (8007688 <tcp_input+0x2b8>)
 80075bc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80075be:	4b31      	ldr	r3, [pc, #196]	@ (8007684 <tcp_input+0x2b4>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	f003 0303 	and.w	r3, r3, #3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00c      	beq.n	80075e4 <tcp_input+0x214>
    tcplen++;
 80075ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007688 <tcp_input+0x2b8>)
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	3301      	adds	r3, #1
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	4b2d      	ldr	r3, [pc, #180]	@ (8007688 <tcp_input+0x2b8>)
 80075d4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	891a      	ldrh	r2, [r3, #8]
 80075da:	4b2b      	ldr	r3, [pc, #172]	@ (8007688 <tcp_input+0x2b8>)
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	429a      	cmp	r2, r3
 80075e0:	f200 82e6 	bhi.w	8007bb0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80075e4:	2300      	movs	r3, #0
 80075e6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80075e8:	4b28      	ldr	r3, [pc, #160]	@ (800768c <tcp_input+0x2bc>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	61fb      	str	r3, [r7, #28]
 80075ee:	e09d      	b.n	800772c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	7d1b      	ldrb	r3, [r3, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d105      	bne.n	8007604 <tcp_input+0x234>
 80075f8:	4b15      	ldr	r3, [pc, #84]	@ (8007650 <tcp_input+0x280>)
 80075fa:	22fb      	movs	r2, #251	@ 0xfb
 80075fc:	4924      	ldr	r1, [pc, #144]	@ (8007690 <tcp_input+0x2c0>)
 80075fe:	4816      	ldr	r0, [pc, #88]	@ (8007658 <tcp_input+0x288>)
 8007600:	f006 ffc4 	bl	800e58c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	7d1b      	ldrb	r3, [r3, #20]
 8007608:	2b0a      	cmp	r3, #10
 800760a:	d105      	bne.n	8007618 <tcp_input+0x248>
 800760c:	4b10      	ldr	r3, [pc, #64]	@ (8007650 <tcp_input+0x280>)
 800760e:	22fc      	movs	r2, #252	@ 0xfc
 8007610:	4920      	ldr	r1, [pc, #128]	@ (8007694 <tcp_input+0x2c4>)
 8007612:	4811      	ldr	r0, [pc, #68]	@ (8007658 <tcp_input+0x288>)
 8007614:	f006 ffba 	bl	800e58c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	7d1b      	ldrb	r3, [r3, #20]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d105      	bne.n	800762c <tcp_input+0x25c>
 8007620:	4b0b      	ldr	r3, [pc, #44]	@ (8007650 <tcp_input+0x280>)
 8007622:	22fd      	movs	r2, #253	@ 0xfd
 8007624:	491c      	ldr	r1, [pc, #112]	@ (8007698 <tcp_input+0x2c8>)
 8007626:	480c      	ldr	r0, [pc, #48]	@ (8007658 <tcp_input+0x288>)
 8007628:	f006 ffb0 	bl	800e58c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	7a1b      	ldrb	r3, [r3, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d033      	beq.n	800769c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	7a1a      	ldrb	r2, [r3, #8]
 8007638:	4b09      	ldr	r3, [pc, #36]	@ (8007660 <tcp_input+0x290>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007640:	3301      	adds	r3, #1
 8007642:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007644:	429a      	cmp	r2, r3
 8007646:	d029      	beq.n	800769c <tcp_input+0x2cc>
      prev = pcb;
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	61bb      	str	r3, [r7, #24]
      continue;
 800764c:	e06b      	b.n	8007726 <tcp_input+0x356>
 800764e:	bf00      	nop
 8007650:	08010648 	.word	0x08010648
 8007654:	0801067c 	.word	0x0801067c
 8007658:	08010694 	.word	0x08010694
 800765c:	2000826c 	.word	0x2000826c
 8007660:	20004cd4 	.word	0x20004cd4
 8007664:	20008270 	.word	0x20008270
 8007668:	20008274 	.word	0x20008274
 800766c:	20008272 	.word	0x20008272
 8007670:	080106bc 	.word	0x080106bc
 8007674:	080106cc 	.word	0x080106cc
 8007678:	080106d8 	.word	0x080106d8
 800767c:	2000827c 	.word	0x2000827c
 8007680:	20008280 	.word	0x20008280
 8007684:	20008288 	.word	0x20008288
 8007688:	20008286 	.word	0x20008286
 800768c:	20008250 	.word	0x20008250
 8007690:	080106f8 	.word	0x080106f8
 8007694:	08010720 	.word	0x08010720
 8007698:	0801074c 	.word	0x0801074c
    }

    if (pcb->remote_port == tcphdr->src &&
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	8b1a      	ldrh	r2, [r3, #24]
 80076a0:	4b72      	ldr	r3, [pc, #456]	@ (800786c <tcp_input+0x49c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d13a      	bne.n	8007722 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	8ada      	ldrh	r2, [r3, #22]
 80076b0:	4b6e      	ldr	r3, [pc, #440]	@ (800786c <tcp_input+0x49c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	885b      	ldrh	r3, [r3, #2]
 80076b6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d132      	bne.n	8007722 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	4b6b      	ldr	r3, [pc, #428]	@ (8007870 <tcp_input+0x4a0>)
 80076c2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d12c      	bne.n	8007722 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	4b68      	ldr	r3, [pc, #416]	@ (8007870 <tcp_input+0x4a0>)
 80076ce:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d126      	bne.n	8007722 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	69fa      	ldr	r2, [r7, #28]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d106      	bne.n	80076ec <tcp_input+0x31c>
 80076de:	4b65      	ldr	r3, [pc, #404]	@ (8007874 <tcp_input+0x4a4>)
 80076e0:	f240 120d 	movw	r2, #269	@ 0x10d
 80076e4:	4964      	ldr	r1, [pc, #400]	@ (8007878 <tcp_input+0x4a8>)
 80076e6:	4865      	ldr	r0, [pc, #404]	@ (800787c <tcp_input+0x4ac>)
 80076e8:	f006 ff50 	bl	800e58c <iprintf>
      if (prev != NULL) {
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <tcp_input+0x338>
        prev->next = pcb->next;
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	68da      	ldr	r2, [r3, #12]
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80076fa:	4b61      	ldr	r3, [pc, #388]	@ (8007880 <tcp_input+0x4b0>)
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007702:	4a5f      	ldr	r2, [pc, #380]	@ (8007880 <tcp_input+0x4b0>)
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	69fa      	ldr	r2, [r7, #28]
 800770e:	429a      	cmp	r2, r3
 8007710:	d111      	bne.n	8007736 <tcp_input+0x366>
 8007712:	4b58      	ldr	r3, [pc, #352]	@ (8007874 <tcp_input+0x4a4>)
 8007714:	f240 1215 	movw	r2, #277	@ 0x115
 8007718:	495a      	ldr	r1, [pc, #360]	@ (8007884 <tcp_input+0x4b4>)
 800771a:	4858      	ldr	r0, [pc, #352]	@ (800787c <tcp_input+0x4ac>)
 800771c:	f006 ff36 	bl	800e58c <iprintf>
      break;
 8007720:	e009      	b.n	8007736 <tcp_input+0x366>
    }
    prev = pcb;
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	61fb      	str	r3, [r7, #28]
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	2b00      	cmp	r3, #0
 8007730:	f47f af5e 	bne.w	80075f0 <tcp_input+0x220>
 8007734:	e000      	b.n	8007738 <tcp_input+0x368>
      break;
 8007736:	bf00      	nop
  }

  if (pcb == NULL) {
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	2b00      	cmp	r3, #0
 800773c:	f040 80aa 	bne.w	8007894 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007740:	4b51      	ldr	r3, [pc, #324]	@ (8007888 <tcp_input+0x4b8>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	61fb      	str	r3, [r7, #28]
 8007746:	e03f      	b.n	80077c8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	7d1b      	ldrb	r3, [r3, #20]
 800774c:	2b0a      	cmp	r3, #10
 800774e:	d006      	beq.n	800775e <tcp_input+0x38e>
 8007750:	4b48      	ldr	r3, [pc, #288]	@ (8007874 <tcp_input+0x4a4>)
 8007752:	f240 121f 	movw	r2, #287	@ 0x11f
 8007756:	494d      	ldr	r1, [pc, #308]	@ (800788c <tcp_input+0x4bc>)
 8007758:	4848      	ldr	r0, [pc, #288]	@ (800787c <tcp_input+0x4ac>)
 800775a:	f006 ff17 	bl	800e58c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	7a1b      	ldrb	r3, [r3, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d009      	beq.n	800777a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	7a1a      	ldrb	r2, [r3, #8]
 800776a:	4b41      	ldr	r3, [pc, #260]	@ (8007870 <tcp_input+0x4a0>)
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007772:	3301      	adds	r3, #1
 8007774:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007776:	429a      	cmp	r2, r3
 8007778:	d122      	bne.n	80077c0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	8b1a      	ldrh	r2, [r3, #24]
 800777e:	4b3b      	ldr	r3, [pc, #236]	@ (800786c <tcp_input+0x49c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	b29b      	uxth	r3, r3
 8007786:	429a      	cmp	r2, r3
 8007788:	d11b      	bne.n	80077c2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	8ada      	ldrh	r2, [r3, #22]
 800778e:	4b37      	ldr	r3, [pc, #220]	@ (800786c <tcp_input+0x49c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	885b      	ldrh	r3, [r3, #2]
 8007794:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007796:	429a      	cmp	r2, r3
 8007798:	d113      	bne.n	80077c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	4b34      	ldr	r3, [pc, #208]	@ (8007870 <tcp_input+0x4a0>)
 80077a0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d10d      	bne.n	80077c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	4b31      	ldr	r3, [pc, #196]	@ (8007870 <tcp_input+0x4a0>)
 80077ac:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d107      	bne.n	80077c2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80077b2:	69f8      	ldr	r0, [r7, #28]
 80077b4:	f000 fb56 	bl	8007e64 <tcp_timewait_input>
        }
        pbuf_free(p);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7fd fd2f 	bl	800521c <pbuf_free>
        return;
 80077be:	e1fd      	b.n	8007bbc <tcp_input+0x7ec>
        continue;
 80077c0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	61fb      	str	r3, [r7, #28]
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1bc      	bne.n	8007748 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80077d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007890 <tcp_input+0x4c0>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	e02a      	b.n	8007830 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	7a1b      	ldrb	r3, [r3, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00c      	beq.n	80077fc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	7a1a      	ldrb	r2, [r3, #8]
 80077e6:	4b22      	ldr	r3, [pc, #136]	@ (8007870 <tcp_input+0x4a0>)
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80077ee:	3301      	adds	r3, #1
 80077f0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d002      	beq.n	80077fc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	61bb      	str	r3, [r7, #24]
        continue;
 80077fa:	e016      	b.n	800782a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	8ada      	ldrh	r2, [r3, #22]
 8007800:	4b1a      	ldr	r3, [pc, #104]	@ (800786c <tcp_input+0x49c>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	885b      	ldrh	r3, [r3, #2]
 8007806:	b29b      	uxth	r3, r3
 8007808:	429a      	cmp	r2, r3
 800780a:	d10c      	bne.n	8007826 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	4b17      	ldr	r3, [pc, #92]	@ (8007870 <tcp_input+0x4a0>)
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	429a      	cmp	r2, r3
 8007816:	d00f      	beq.n	8007838 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00d      	beq.n	800783a <tcp_input+0x46a>
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d009      	beq.n	800783a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	617b      	str	r3, [r7, #20]
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1d1      	bne.n	80077da <tcp_input+0x40a>
 8007836:	e000      	b.n	800783a <tcp_input+0x46a>
            break;
 8007838:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d029      	beq.n	8007894 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00a      	beq.n	800785c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	68da      	ldr	r2, [r3, #12]
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800784e:	4b10      	ldr	r3, [pc, #64]	@ (8007890 <tcp_input+0x4c0>)
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007856:	4a0e      	ldr	r2, [pc, #56]	@ (8007890 <tcp_input+0x4c0>)
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800785c:	6978      	ldr	r0, [r7, #20]
 800785e:	f000 fa03 	bl	8007c68 <tcp_listen_input>
      }
      pbuf_free(p);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7fd fcda 	bl	800521c <pbuf_free>
      return;
 8007868:	e1a8      	b.n	8007bbc <tcp_input+0x7ec>
 800786a:	bf00      	nop
 800786c:	2000826c 	.word	0x2000826c
 8007870:	20004cd4 	.word	0x20004cd4
 8007874:	08010648 	.word	0x08010648
 8007878:	08010774 	.word	0x08010774
 800787c:	08010694 	.word	0x08010694
 8007880:	20008250 	.word	0x20008250
 8007884:	080107a0 	.word	0x080107a0
 8007888:	20008254 	.word	0x20008254
 800788c:	080107cc 	.word	0x080107cc
 8007890:	2000824c 	.word	0x2000824c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 8158 	beq.w	8007b4c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800789c:	4b95      	ldr	r3, [pc, #596]	@ (8007af4 <tcp_input+0x724>)
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	891a      	ldrh	r2, [r3, #8]
 80078a6:	4b93      	ldr	r3, [pc, #588]	@ (8007af4 <tcp_input+0x724>)
 80078a8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80078aa:	4a92      	ldr	r2, [pc, #584]	@ (8007af4 <tcp_input+0x724>)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80078b0:	4b91      	ldr	r3, [pc, #580]	@ (8007af8 <tcp_input+0x728>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a8f      	ldr	r2, [pc, #572]	@ (8007af4 <tcp_input+0x724>)
 80078b6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80078b8:	4b90      	ldr	r3, [pc, #576]	@ (8007afc <tcp_input+0x72c>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80078be:	4b90      	ldr	r3, [pc, #576]	@ (8007b00 <tcp_input+0x730>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80078c4:	4b8f      	ldr	r3, [pc, #572]	@ (8007b04 <tcp_input+0x734>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80078ca:	4b8f      	ldr	r3, [pc, #572]	@ (8007b08 <tcp_input+0x738>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	f003 0308 	and.w	r3, r3, #8
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d006      	beq.n	80078e4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	7b5b      	ldrb	r3, [r3, #13]
 80078da:	f043 0301 	orr.w	r3, r3, #1
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d017      	beq.n	800791c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80078ec:	69f8      	ldr	r0, [r7, #28]
 80078ee:	f7ff f843 	bl	8006978 <tcp_process_refused_data>
 80078f2:	4603      	mov	r3, r0
 80078f4:	f113 0f0d 	cmn.w	r3, #13
 80078f8:	d007      	beq.n	800790a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00c      	beq.n	800791c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007902:	4b82      	ldr	r3, [pc, #520]	@ (8007b0c <tcp_input+0x73c>)
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d008      	beq.n	800791c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800790e:	2b00      	cmp	r3, #0
 8007910:	f040 80e3 	bne.w	8007ada <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007914:	69f8      	ldr	r0, [r7, #28]
 8007916:	f003 fdff 	bl	800b518 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800791a:	e0de      	b.n	8007ada <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800791c:	4a7c      	ldr	r2, [pc, #496]	@ (8007b10 <tcp_input+0x740>)
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007922:	69f8      	ldr	r0, [r7, #28]
 8007924:	f000 fb18 	bl	8007f58 <tcp_process>
 8007928:	4603      	mov	r3, r0
 800792a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800792c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007930:	f113 0f0d 	cmn.w	r3, #13
 8007934:	f000 80d3 	beq.w	8007ade <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007938:	4b71      	ldr	r3, [pc, #452]	@ (8007b00 <tcp_input+0x730>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	f003 0308 	and.w	r3, r3, #8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d015      	beq.n	8007970 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800794a:	2b00      	cmp	r3, #0
 800794c:	d008      	beq.n	8007960 <tcp_input+0x590>
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	6912      	ldr	r2, [r2, #16]
 8007958:	f06f 010d 	mvn.w	r1, #13
 800795c:	4610      	mov	r0, r2
 800795e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007960:	69f9      	ldr	r1, [r7, #28]
 8007962:	486c      	ldr	r0, [pc, #432]	@ (8007b14 <tcp_input+0x744>)
 8007964:	f7ff fbbc 	bl	80070e0 <tcp_pcb_remove>
        tcp_free(pcb);
 8007968:	69f8      	ldr	r0, [r7, #28]
 800796a:	f7fd ff07 	bl	800577c <tcp_free>
 800796e:	e0da      	b.n	8007b26 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007974:	4b63      	ldr	r3, [pc, #396]	@ (8007b04 <tcp_input+0x734>)
 8007976:	881b      	ldrh	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d01d      	beq.n	80079b8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800797c:	4b61      	ldr	r3, [pc, #388]	@ (8007b04 <tcp_input+0x734>)
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00a      	beq.n	80079a2 <tcp_input+0x5d2>
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007992:	69fa      	ldr	r2, [r7, #28]
 8007994:	6910      	ldr	r0, [r2, #16]
 8007996:	89fa      	ldrh	r2, [r7, #14]
 8007998:	69f9      	ldr	r1, [r7, #28]
 800799a:	4798      	blx	r3
 800799c:	4603      	mov	r3, r0
 800799e:	74fb      	strb	r3, [r7, #19]
 80079a0:	e001      	b.n	80079a6 <tcp_input+0x5d6>
 80079a2:	2300      	movs	r3, #0
 80079a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80079a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80079aa:	f113 0f0d 	cmn.w	r3, #13
 80079ae:	f000 8098 	beq.w	8007ae2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80079b2:	4b54      	ldr	r3, [pc, #336]	@ (8007b04 <tcp_input+0x734>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80079b8:	69f8      	ldr	r0, [r7, #28]
 80079ba:	f000 f915 	bl	8007be8 <tcp_input_delayed_close>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f040 8090 	bne.w	8007ae6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80079c6:	4b4d      	ldr	r3, [pc, #308]	@ (8007afc <tcp_input+0x72c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d041      	beq.n	8007a52 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d006      	beq.n	80079e4 <tcp_input+0x614>
 80079d6:	4b50      	ldr	r3, [pc, #320]	@ (8007b18 <tcp_input+0x748>)
 80079d8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80079dc:	494f      	ldr	r1, [pc, #316]	@ (8007b1c <tcp_input+0x74c>)
 80079de:	4850      	ldr	r0, [pc, #320]	@ (8007b20 <tcp_input+0x750>)
 80079e0:	f006 fdd4 	bl	800e58c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	8b5b      	ldrh	r3, [r3, #26]
 80079e8:	f003 0310 	and.w	r3, r3, #16
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d008      	beq.n	8007a02 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80079f0:	4b42      	ldr	r3, [pc, #264]	@ (8007afc <tcp_input+0x72c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fd fc11 	bl	800521c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80079fa:	69f8      	ldr	r0, [r7, #28]
 80079fc:	f7fe f9a6 	bl	8005d4c <tcp_abort>
            goto aborted;
 8007a00:	e091      	b.n	8007b26 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00c      	beq.n	8007a26 <tcp_input+0x656>
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	6918      	ldr	r0, [r3, #16]
 8007a16:	4b39      	ldr	r3, [pc, #228]	@ (8007afc <tcp_input+0x72c>)
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	69f9      	ldr	r1, [r7, #28]
 8007a1e:	47a0      	blx	r4
 8007a20:	4603      	mov	r3, r0
 8007a22:	74fb      	strb	r3, [r7, #19]
 8007a24:	e008      	b.n	8007a38 <tcp_input+0x668>
 8007a26:	4b35      	ldr	r3, [pc, #212]	@ (8007afc <tcp_input+0x72c>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	69f9      	ldr	r1, [r7, #28]
 8007a2e:	2000      	movs	r0, #0
 8007a30:	f7ff f896 	bl	8006b60 <tcp_recv_null>
 8007a34:	4603      	mov	r3, r0
 8007a36:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007a38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007a3c:	f113 0f0d 	cmn.w	r3, #13
 8007a40:	d053      	beq.n	8007aea <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007a42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8007afc <tcp_input+0x72c>)
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007a52:	4b2b      	ldr	r3, [pc, #172]	@ (8007b00 <tcp_input+0x730>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d030      	beq.n	8007ac0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d009      	beq.n	8007a7a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a6a:	7b5a      	ldrb	r2, [r3, #13]
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a70:	f042 0220 	orr.w	r2, r2, #32
 8007a74:	b2d2      	uxtb	r2, r2
 8007a76:	735a      	strb	r2, [r3, #13]
 8007a78:	e022      	b.n	8007ac0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a7e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007a82:	d005      	beq.n	8007a90 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a88:	3301      	adds	r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00b      	beq.n	8007ab2 <tcp_input+0x6e2>
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	6918      	ldr	r0, [r3, #16]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	69f9      	ldr	r1, [r7, #28]
 8007aaa:	47a0      	blx	r4
 8007aac:	4603      	mov	r3, r0
 8007aae:	74fb      	strb	r3, [r7, #19]
 8007ab0:	e001      	b.n	8007ab6 <tcp_input+0x6e6>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007ab6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007aba:	f113 0f0d 	cmn.w	r3, #13
 8007abe:	d016      	beq.n	8007aee <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007ac0:	4b13      	ldr	r3, [pc, #76]	@ (8007b10 <tcp_input+0x740>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007ac6:	69f8      	ldr	r0, [r7, #28]
 8007ac8:	f000 f88e 	bl	8007be8 <tcp_input_delayed_close>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d128      	bne.n	8007b24 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007ad2:	69f8      	ldr	r0, [r7, #28]
 8007ad4:	f002 ff1a 	bl	800a90c <tcp_output>
 8007ad8:	e025      	b.n	8007b26 <tcp_input+0x756>
        goto aborted;
 8007ada:	bf00      	nop
 8007adc:	e023      	b.n	8007b26 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007ade:	bf00      	nop
 8007ae0:	e021      	b.n	8007b26 <tcp_input+0x756>
              goto aborted;
 8007ae2:	bf00      	nop
 8007ae4:	e01f      	b.n	8007b26 <tcp_input+0x756>
          goto aborted;
 8007ae6:	bf00      	nop
 8007ae8:	e01d      	b.n	8007b26 <tcp_input+0x756>
            goto aborted;
 8007aea:	bf00      	nop
 8007aec:	e01b      	b.n	8007b26 <tcp_input+0x756>
              goto aborted;
 8007aee:	bf00      	nop
 8007af0:	e019      	b.n	8007b26 <tcp_input+0x756>
 8007af2:	bf00      	nop
 8007af4:	2000825c 	.word	0x2000825c
 8007af8:	2000826c 	.word	0x2000826c
 8007afc:	2000828c 	.word	0x2000828c
 8007b00:	20008289 	.word	0x20008289
 8007b04:	20008284 	.word	0x20008284
 8007b08:	20008288 	.word	0x20008288
 8007b0c:	20008286 	.word	0x20008286
 8007b10:	20008290 	.word	0x20008290
 8007b14:	20008250 	.word	0x20008250
 8007b18:	08010648 	.word	0x08010648
 8007b1c:	080107fc 	.word	0x080107fc
 8007b20:	08010694 	.word	0x08010694
          goto aborted;
 8007b24:	bf00      	nop
    tcp_input_pcb = NULL;
 8007b26:	4b27      	ldr	r3, [pc, #156]	@ (8007bc4 <tcp_input+0x7f4>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007b2c:	4b26      	ldr	r3, [pc, #152]	@ (8007bc8 <tcp_input+0x7f8>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007b32:	4b26      	ldr	r3, [pc, #152]	@ (8007bcc <tcp_input+0x7fc>)
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d03f      	beq.n	8007bba <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8007b3a:	4b24      	ldr	r3, [pc, #144]	@ (8007bcc <tcp_input+0x7fc>)
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fd fb6c 	bl	800521c <pbuf_free>
      inseg.p = NULL;
 8007b44:	4b21      	ldr	r3, [pc, #132]	@ (8007bcc <tcp_input+0x7fc>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007b4a:	e036      	b.n	8007bba <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007b4c:	4b20      	ldr	r3, [pc, #128]	@ (8007bd0 <tcp_input+0x800>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	899b      	ldrh	r3, [r3, #12]
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fc f803 	bl	8003b60 <lwip_htons>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	f003 0304 	and.w	r3, r3, #4
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d118      	bne.n	8007b98 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b66:	4b1b      	ldr	r3, [pc, #108]	@ (8007bd4 <tcp_input+0x804>)
 8007b68:	6819      	ldr	r1, [r3, #0]
 8007b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8007bd8 <tcp_input+0x808>)
 8007b6c:	881b      	ldrh	r3, [r3, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	4b1a      	ldr	r3, [pc, #104]	@ (8007bdc <tcp_input+0x80c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007b76:	4b16      	ldr	r3, [pc, #88]	@ (8007bd0 <tcp_input+0x800>)
 8007b78:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b7a:	885b      	ldrh	r3, [r3, #2]
 8007b7c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007b7e:	4a14      	ldr	r2, [pc, #80]	@ (8007bd0 <tcp_input+0x800>)
 8007b80:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b82:	8812      	ldrh	r2, [r2, #0]
 8007b84:	b292      	uxth	r2, r2
 8007b86:	9202      	str	r2, [sp, #8]
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	4b15      	ldr	r3, [pc, #84]	@ (8007be0 <tcp_input+0x810>)
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	4b15      	ldr	r3, [pc, #84]	@ (8007be4 <tcp_input+0x814>)
 8007b90:	4602      	mov	r2, r0
 8007b92:	2000      	movs	r0, #0
 8007b94:	f003 fc6e 	bl	800b474 <tcp_rst>
    pbuf_free(p);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7fd fb3f 	bl	800521c <pbuf_free>
  return;
 8007b9e:	e00c      	b.n	8007bba <tcp_input+0x7ea>
    goto dropped;
 8007ba0:	bf00      	nop
 8007ba2:	e006      	b.n	8007bb2 <tcp_input+0x7e2>
    goto dropped;
 8007ba4:	bf00      	nop
 8007ba6:	e004      	b.n	8007bb2 <tcp_input+0x7e2>
    goto dropped;
 8007ba8:	bf00      	nop
 8007baa:	e002      	b.n	8007bb2 <tcp_input+0x7e2>
      goto dropped;
 8007bac:	bf00      	nop
 8007bae:	e000      	b.n	8007bb2 <tcp_input+0x7e2>
      goto dropped;
 8007bb0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7fd fb32 	bl	800521c <pbuf_free>
 8007bb8:	e000      	b.n	8007bbc <tcp_input+0x7ec>
  return;
 8007bba:	bf00      	nop
}
 8007bbc:	3724      	adds	r7, #36	@ 0x24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd90      	pop	{r4, r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	20008290 	.word	0x20008290
 8007bc8:	2000828c 	.word	0x2000828c
 8007bcc:	2000825c 	.word	0x2000825c
 8007bd0:	2000826c 	.word	0x2000826c
 8007bd4:	20008280 	.word	0x20008280
 8007bd8:	20008286 	.word	0x20008286
 8007bdc:	2000827c 	.word	0x2000827c
 8007be0:	20004ce4 	.word	0x20004ce4
 8007be4:	20004ce8 	.word	0x20004ce8

08007be8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <tcp_input_delayed_close+0x1c>
 8007bf6:	4b17      	ldr	r3, [pc, #92]	@ (8007c54 <tcp_input_delayed_close+0x6c>)
 8007bf8:	f240 225a 	movw	r2, #602	@ 0x25a
 8007bfc:	4916      	ldr	r1, [pc, #88]	@ (8007c58 <tcp_input_delayed_close+0x70>)
 8007bfe:	4817      	ldr	r0, [pc, #92]	@ (8007c5c <tcp_input_delayed_close+0x74>)
 8007c00:	f006 fcc4 	bl	800e58c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007c04:	4b16      	ldr	r3, [pc, #88]	@ (8007c60 <tcp_input_delayed_close+0x78>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d01c      	beq.n	8007c4a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	8b5b      	ldrh	r3, [r3, #26]
 8007c14:	f003 0310 	and.w	r3, r3, #16
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10d      	bne.n	8007c38 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d008      	beq.n	8007c38 <tcp_input_delayed_close+0x50>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	6912      	ldr	r2, [r2, #16]
 8007c30:	f06f 010e 	mvn.w	r1, #14
 8007c34:	4610      	mov	r0, r2
 8007c36:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007c38:	6879      	ldr	r1, [r7, #4]
 8007c3a:	480a      	ldr	r0, [pc, #40]	@ (8007c64 <tcp_input_delayed_close+0x7c>)
 8007c3c:	f7ff fa50 	bl	80070e0 <tcp_pcb_remove>
    tcp_free(pcb);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7fd fd9b 	bl	800577c <tcp_free>
    return 1;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e000      	b.n	8007c4c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	08010648 	.word	0x08010648
 8007c58:	08010818 	.word	0x08010818
 8007c5c:	08010694 	.word	0x08010694
 8007c60:	20008289 	.word	0x20008289
 8007c64:	20008250 	.word	0x20008250

08007c68 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007c68:	b590      	push	{r4, r7, lr}
 8007c6a:	b08b      	sub	sp, #44	@ 0x2c
 8007c6c:	af04      	add	r7, sp, #16
 8007c6e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007c70:	4b6f      	ldr	r3, [pc, #444]	@ (8007e30 <tcp_listen_input+0x1c8>)
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f040 80d2 	bne.w	8007e22 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d106      	bne.n	8007c92 <tcp_listen_input+0x2a>
 8007c84:	4b6b      	ldr	r3, [pc, #428]	@ (8007e34 <tcp_listen_input+0x1cc>)
 8007c86:	f240 2281 	movw	r2, #641	@ 0x281
 8007c8a:	496b      	ldr	r1, [pc, #428]	@ (8007e38 <tcp_listen_input+0x1d0>)
 8007c8c:	486b      	ldr	r0, [pc, #428]	@ (8007e3c <tcp_listen_input+0x1d4>)
 8007c8e:	f006 fc7d 	bl	800e58c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007c92:	4b67      	ldr	r3, [pc, #412]	@ (8007e30 <tcp_listen_input+0x1c8>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	f003 0310 	and.w	r3, r3, #16
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d019      	beq.n	8007cd2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c9e:	4b68      	ldr	r3, [pc, #416]	@ (8007e40 <tcp_listen_input+0x1d8>)
 8007ca0:	6819      	ldr	r1, [r3, #0]
 8007ca2:	4b68      	ldr	r3, [pc, #416]	@ (8007e44 <tcp_listen_input+0x1dc>)
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	4b67      	ldr	r3, [pc, #412]	@ (8007e48 <tcp_listen_input+0x1e0>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007cae:	4b67      	ldr	r3, [pc, #412]	@ (8007e4c <tcp_listen_input+0x1e4>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007cb2:	885b      	ldrh	r3, [r3, #2]
 8007cb4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007cb6:	4a65      	ldr	r2, [pc, #404]	@ (8007e4c <tcp_listen_input+0x1e4>)
 8007cb8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007cba:	8812      	ldrh	r2, [r2, #0]
 8007cbc:	b292      	uxth	r2, r2
 8007cbe:	9202      	str	r2, [sp, #8]
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	4b63      	ldr	r3, [pc, #396]	@ (8007e50 <tcp_listen_input+0x1e8>)
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	4b63      	ldr	r3, [pc, #396]	@ (8007e54 <tcp_listen_input+0x1ec>)
 8007cc8:	4602      	mov	r2, r0
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f003 fbd2 	bl	800b474 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007cd0:	e0a9      	b.n	8007e26 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007cd2:	4b57      	ldr	r3, [pc, #348]	@ (8007e30 <tcp_listen_input+0x1c8>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	f003 0302 	and.w	r3, r3, #2
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 80a3 	beq.w	8007e26 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	7d5b      	ldrb	r3, [r3, #21]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7ff f85f 	bl	8006da8 <tcp_alloc>
 8007cea:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d111      	bne.n	8007d16 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00a      	beq.n	8007d10 <tcp_listen_input+0xa8>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	6910      	ldr	r0, [r2, #16]
 8007d02:	f04f 32ff 	mov.w	r2, #4294967295
 8007d06:	2100      	movs	r1, #0
 8007d08:	4798      	blx	r3
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	73bb      	strb	r3, [r7, #14]
      return;
 8007d0e:	e08b      	b.n	8007e28 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007d10:	23f0      	movs	r3, #240	@ 0xf0
 8007d12:	73bb      	strb	r3, [r7, #14]
      return;
 8007d14:	e088      	b.n	8007e28 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007d16:	4b50      	ldr	r3, [pc, #320]	@ (8007e58 <tcp_listen_input+0x1f0>)
 8007d18:	695a      	ldr	r2, [r3, #20]
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007d1e:	4b4e      	ldr	r3, [pc, #312]	@ (8007e58 <tcp_listen_input+0x1f0>)
 8007d20:	691a      	ldr	r2, [r3, #16]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	8ada      	ldrh	r2, [r3, #22]
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007d2e:	4b47      	ldr	r3, [pc, #284]	@ (8007e4c <tcp_listen_input+0x1e4>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007d40:	4b41      	ldr	r3, [pc, #260]	@ (8007e48 <tcp_listen_input+0x1e0>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8007d52:	6978      	ldr	r0, [r7, #20]
 8007d54:	f7ff fa58 	bl	8007208 <tcp_next_iss>
 8007d58:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007d72:	4b35      	ldr	r3, [pc, #212]	@ (8007e48 <tcp_listen_input+0x1e0>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	1e5a      	subs	r2, r3, #1
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	7a5b      	ldrb	r3, [r3, #9]
 8007d8e:	f003 030c 	and.w	r3, r3, #12
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	7a1a      	ldrb	r2, [r3, #8]
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007da0:	4b2e      	ldr	r3, [pc, #184]	@ (8007e5c <tcp_listen_input+0x1f4>)
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	60da      	str	r2, [r3, #12]
 8007da8:	4a2c      	ldr	r2, [pc, #176]	@ (8007e5c <tcp_listen_input+0x1f4>)
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	f003 fd23 	bl	800b7f8 <tcp_timer_needed>
 8007db2:	4b2b      	ldr	r3, [pc, #172]	@ (8007e60 <tcp_listen_input+0x1f8>)
 8007db4:	2201      	movs	r2, #1
 8007db6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007db8:	6978      	ldr	r0, [r7, #20]
 8007dba:	f001 fd8b 	bl	80098d4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007dbe:	4b23      	ldr	r3, [pc, #140]	@ (8007e4c <tcp_listen_input+0x1e4>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	89db      	ldrh	r3, [r3, #14]
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	3304      	adds	r3, #4
 8007de0:	4618      	mov	r0, r3
 8007de2:	f005 f8e7 	bl	800cfb4 <ip4_route>
 8007de6:	4601      	mov	r1, r0
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	3304      	adds	r3, #4
 8007dec:	461a      	mov	r2, r3
 8007dee:	4620      	mov	r0, r4
 8007df0:	f7ff fa30 	bl	8007254 <tcp_eff_send_mss_netif>
 8007df4:	4603      	mov	r3, r0
 8007df6:	461a      	mov	r2, r3
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007dfc:	2112      	movs	r1, #18
 8007dfe:	6978      	ldr	r0, [r7, #20]
 8007e00:	f002 fc96 	bl	800a730 <tcp_enqueue_flags>
 8007e04:	4603      	mov	r3, r0
 8007e06:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d004      	beq.n	8007e1a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007e10:	2100      	movs	r1, #0
 8007e12:	6978      	ldr	r0, [r7, #20]
 8007e14:	f7fd fedc 	bl	8005bd0 <tcp_abandon>
      return;
 8007e18:	e006      	b.n	8007e28 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007e1a:	6978      	ldr	r0, [r7, #20]
 8007e1c:	f002 fd76 	bl	800a90c <tcp_output>
  return;
 8007e20:	e001      	b.n	8007e26 <tcp_listen_input+0x1be>
    return;
 8007e22:	bf00      	nop
 8007e24:	e000      	b.n	8007e28 <tcp_listen_input+0x1c0>
  return;
 8007e26:	bf00      	nop
}
 8007e28:	371c      	adds	r7, #28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd90      	pop	{r4, r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20008288 	.word	0x20008288
 8007e34:	08010648 	.word	0x08010648
 8007e38:	08010840 	.word	0x08010840
 8007e3c:	08010694 	.word	0x08010694
 8007e40:	20008280 	.word	0x20008280
 8007e44:	20008286 	.word	0x20008286
 8007e48:	2000827c 	.word	0x2000827c
 8007e4c:	2000826c 	.word	0x2000826c
 8007e50:	20004ce4 	.word	0x20004ce4
 8007e54:	20004ce8 	.word	0x20004ce8
 8007e58:	20004cd4 	.word	0x20004cd4
 8007e5c:	20008250 	.word	0x20008250
 8007e60:	20008258 	.word	0x20008258

08007e64 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af04      	add	r7, sp, #16
 8007e6a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8007f2c <tcp_timewait_input+0xc8>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	f003 0304 	and.w	r3, r3, #4
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d153      	bne.n	8007f20 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d106      	bne.n	8007e8c <tcp_timewait_input+0x28>
 8007e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8007f30 <tcp_timewait_input+0xcc>)
 8007e80:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8007e84:	492b      	ldr	r1, [pc, #172]	@ (8007f34 <tcp_timewait_input+0xd0>)
 8007e86:	482c      	ldr	r0, [pc, #176]	@ (8007f38 <tcp_timewait_input+0xd4>)
 8007e88:	f006 fb80 	bl	800e58c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007e8c:	4b27      	ldr	r3, [pc, #156]	@ (8007f2c <tcp_timewait_input+0xc8>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d02a      	beq.n	8007eee <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007e98:	4b28      	ldr	r3, [pc, #160]	@ (8007f3c <tcp_timewait_input+0xd8>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	db2d      	blt.n	8007f02 <tcp_timewait_input+0x9e>
 8007ea6:	4b25      	ldr	r3, [pc, #148]	@ (8007f3c <tcp_timewait_input+0xd8>)
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007eb2:	440b      	add	r3, r1
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	dc23      	bgt.n	8007f02 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007eba:	4b21      	ldr	r3, [pc, #132]	@ (8007f40 <tcp_timewait_input+0xdc>)
 8007ebc:	6819      	ldr	r1, [r3, #0]
 8007ebe:	4b21      	ldr	r3, [pc, #132]	@ (8007f44 <tcp_timewait_input+0xe0>)
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8007f3c <tcp_timewait_input+0xd8>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007eca:	4b1f      	ldr	r3, [pc, #124]	@ (8007f48 <tcp_timewait_input+0xe4>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ece:	885b      	ldrh	r3, [r3, #2]
 8007ed0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8007f48 <tcp_timewait_input+0xe4>)
 8007ed4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ed6:	8812      	ldrh	r2, [r2, #0]
 8007ed8:	b292      	uxth	r2, r2
 8007eda:	9202      	str	r2, [sp, #8]
 8007edc:	9301      	str	r3, [sp, #4]
 8007ede:	4b1b      	ldr	r3, [pc, #108]	@ (8007f4c <tcp_timewait_input+0xe8>)
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f50 <tcp_timewait_input+0xec>)
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f003 fac4 	bl	800b474 <tcp_rst>
      return;
 8007eec:	e01b      	b.n	8007f26 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007eee:	4b0f      	ldr	r3, [pc, #60]	@ (8007f2c <tcp_timewait_input+0xc8>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007efa:	4b16      	ldr	r3, [pc, #88]	@ (8007f54 <tcp_timewait_input+0xf0>)
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007f02:	4b10      	ldr	r3, [pc, #64]	@ (8007f44 <tcp_timewait_input+0xe0>)
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00c      	beq.n	8007f24 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	8b5b      	ldrh	r3, [r3, #26]
 8007f0e:	f043 0302 	orr.w	r3, r3, #2
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f002 fcf7 	bl	800a90c <tcp_output>
  }
  return;
 8007f1e:	e001      	b.n	8007f24 <tcp_timewait_input+0xc0>
    return;
 8007f20:	bf00      	nop
 8007f22:	e000      	b.n	8007f26 <tcp_timewait_input+0xc2>
  return;
 8007f24:	bf00      	nop
}
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20008288 	.word	0x20008288
 8007f30:	08010648 	.word	0x08010648
 8007f34:	08010860 	.word	0x08010860
 8007f38:	08010694 	.word	0x08010694
 8007f3c:	2000827c 	.word	0x2000827c
 8007f40:	20008280 	.word	0x20008280
 8007f44:	20008286 	.word	0x20008286
 8007f48:	2000826c 	.word	0x2000826c
 8007f4c:	20004ce4 	.word	0x20004ce4
 8007f50:	20004ce8 	.word	0x20004ce8
 8007f54:	20008244 	.word	0x20008244

08007f58 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007f58:	b590      	push	{r4, r7, lr}
 8007f5a:	b08d      	sub	sp, #52	@ 0x34
 8007f5c:	af04      	add	r7, sp, #16
 8007f5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d106      	bne.n	8007f7c <tcp_process+0x24>
 8007f6e:	4b9d      	ldr	r3, [pc, #628]	@ (80081e4 <tcp_process+0x28c>)
 8007f70:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8007f74:	499c      	ldr	r1, [pc, #624]	@ (80081e8 <tcp_process+0x290>)
 8007f76:	489d      	ldr	r0, [pc, #628]	@ (80081ec <tcp_process+0x294>)
 8007f78:	f006 fb08 	bl	800e58c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007f7c:	4b9c      	ldr	r3, [pc, #624]	@ (80081f0 <tcp_process+0x298>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	f003 0304 	and.w	r3, r3, #4
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d04e      	beq.n	8008026 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	7d1b      	ldrb	r3, [r3, #20]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d108      	bne.n	8007fa2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f94:	4b97      	ldr	r3, [pc, #604]	@ (80081f4 <tcp_process+0x29c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d123      	bne.n	8007fe4 <tcp_process+0x8c>
        acceptable = 1;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	76fb      	strb	r3, [r7, #27]
 8007fa0:	e020      	b.n	8007fe4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fa6:	4b94      	ldr	r3, [pc, #592]	@ (80081f8 <tcp_process+0x2a0>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d102      	bne.n	8007fb4 <tcp_process+0x5c>
        acceptable = 1;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	76fb      	strb	r3, [r7, #27]
 8007fb2:	e017      	b.n	8007fe4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007fb4:	4b90      	ldr	r3, [pc, #576]	@ (80081f8 <tcp_process+0x2a0>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	db10      	blt.n	8007fe4 <tcp_process+0x8c>
 8007fc2:	4b8d      	ldr	r3, [pc, #564]	@ (80081f8 <tcp_process+0x2a0>)
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fca:	6879      	ldr	r1, [r7, #4]
 8007fcc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007fce:	440b      	add	r3, r1
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	dc06      	bgt.n	8007fe4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	8b5b      	ldrh	r3, [r3, #26]
 8007fda:	f043 0302 	orr.w	r3, r3, #2
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007fe4:	7efb      	ldrb	r3, [r7, #27]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d01b      	beq.n	8008022 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	7d1b      	ldrb	r3, [r3, #20]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d106      	bne.n	8008000 <tcp_process+0xa8>
 8007ff2:	4b7c      	ldr	r3, [pc, #496]	@ (80081e4 <tcp_process+0x28c>)
 8007ff4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8007ff8:	4980      	ldr	r1, [pc, #512]	@ (80081fc <tcp_process+0x2a4>)
 8007ffa:	487c      	ldr	r0, [pc, #496]	@ (80081ec <tcp_process+0x294>)
 8007ffc:	f006 fac6 	bl	800e58c <iprintf>
      recv_flags |= TF_RESET;
 8008000:	4b7f      	ldr	r3, [pc, #508]	@ (8008200 <tcp_process+0x2a8>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	f043 0308 	orr.w	r3, r3, #8
 8008008:	b2da      	uxtb	r2, r3
 800800a:	4b7d      	ldr	r3, [pc, #500]	@ (8008200 <tcp_process+0x2a8>)
 800800c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	8b5b      	ldrh	r3, [r3, #26]
 8008012:	f023 0301 	bic.w	r3, r3, #1
 8008016:	b29a      	uxth	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800801c:	f06f 030d 	mvn.w	r3, #13
 8008020:	e37a      	b.n	8008718 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	e378      	b.n	8008718 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008026:	4b72      	ldr	r3, [pc, #456]	@ (80081f0 <tcp_process+0x298>)
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d010      	beq.n	8008054 <tcp_process+0xfc>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	7d1b      	ldrb	r3, [r3, #20]
 8008036:	2b02      	cmp	r3, #2
 8008038:	d00c      	beq.n	8008054 <tcp_process+0xfc>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	7d1b      	ldrb	r3, [r3, #20]
 800803e:	2b03      	cmp	r3, #3
 8008040:	d008      	beq.n	8008054 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	8b5b      	ldrh	r3, [r3, #26]
 8008046:	f043 0302 	orr.w	r3, r3, #2
 800804a:	b29a      	uxth	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	e361      	b.n	8008718 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	8b5b      	ldrh	r3, [r3, #26]
 8008058:	f003 0310 	and.w	r3, r3, #16
 800805c:	2b00      	cmp	r3, #0
 800805e:	d103      	bne.n	8008068 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008060:	4b68      	ldr	r3, [pc, #416]	@ (8008204 <tcp_process+0x2ac>)
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 fc2b 	bl	80098d4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	7d1b      	ldrb	r3, [r3, #20]
 8008082:	3b02      	subs	r3, #2
 8008084:	2b07      	cmp	r3, #7
 8008086:	f200 8337 	bhi.w	80086f8 <tcp_process+0x7a0>
 800808a:	a201      	add	r2, pc, #4	@ (adr r2, 8008090 <tcp_process+0x138>)
 800808c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008090:	080080b1 	.word	0x080080b1
 8008094:	080082e1 	.word	0x080082e1
 8008098:	08008459 	.word	0x08008459
 800809c:	08008483 	.word	0x08008483
 80080a0:	080085a7 	.word	0x080085a7
 80080a4:	08008459 	.word	0x08008459
 80080a8:	08008633 	.word	0x08008633
 80080ac:	080086c3 	.word	0x080086c3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80080b0:	4b4f      	ldr	r3, [pc, #316]	@ (80081f0 <tcp_process+0x298>)
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	f003 0310 	and.w	r3, r3, #16
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 80e4 	beq.w	8008286 <tcp_process+0x32e>
 80080be:	4b4c      	ldr	r3, [pc, #304]	@ (80081f0 <tcp_process+0x298>)
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	f003 0302 	and.w	r3, r3, #2
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f000 80dd 	beq.w	8008286 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	4b48      	ldr	r3, [pc, #288]	@ (80081f4 <tcp_process+0x29c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	f040 80d5 	bne.w	8008286 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80080dc:	4b46      	ldr	r3, [pc, #280]	@ (80081f8 <tcp_process+0x2a0>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	1c5a      	adds	r2, r3, #1
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80080ee:	4b41      	ldr	r3, [pc, #260]	@ (80081f4 <tcp_process+0x29c>)
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80080f6:	4b44      	ldr	r3, [pc, #272]	@ (8008208 <tcp_process+0x2b0>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	89db      	ldrh	r3, [r3, #14]
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008110:	4b39      	ldr	r3, [pc, #228]	@ (80081f8 <tcp_process+0x2a0>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	1e5a      	subs	r2, r3, #1
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2204      	movs	r2, #4
 800811e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3304      	adds	r3, #4
 8008128:	4618      	mov	r0, r3
 800812a:	f004 ff43 	bl	800cfb4 <ip4_route>
 800812e:	4601      	mov	r1, r0
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	3304      	adds	r3, #4
 8008134:	461a      	mov	r2, r3
 8008136:	4620      	mov	r0, r4
 8008138:	f7ff f88c 	bl	8007254 <tcp_eff_send_mss_netif>
 800813c:	4603      	mov	r3, r0
 800813e:	461a      	mov	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008148:	009a      	lsls	r2, r3, #2
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800814e:	005b      	lsls	r3, r3, #1
 8008150:	f241 111c 	movw	r1, #4380	@ 0x111c
 8008154:	428b      	cmp	r3, r1
 8008156:	bf38      	it	cc
 8008158:	460b      	movcc	r3, r1
 800815a:	429a      	cmp	r2, r3
 800815c:	d204      	bcs.n	8008168 <tcp_process+0x210>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	b29b      	uxth	r3, r3
 8008166:	e00d      	b.n	8008184 <tcp_process+0x22c>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8008172:	4293      	cmp	r3, r2
 8008174:	d904      	bls.n	8008180 <tcp_process+0x228>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	b29b      	uxth	r3, r3
 800817e:	e001      	b.n	8008184 <tcp_process+0x22c>
 8008180:	f241 131c 	movw	r3, #4380	@ 0x111c
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008190:	2b00      	cmp	r3, #0
 8008192:	d106      	bne.n	80081a2 <tcp_process+0x24a>
 8008194:	4b13      	ldr	r3, [pc, #76]	@ (80081e4 <tcp_process+0x28c>)
 8008196:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800819a:	491c      	ldr	r1, [pc, #112]	@ (800820c <tcp_process+0x2b4>)
 800819c:	4813      	ldr	r0, [pc, #76]	@ (80081ec <tcp_process+0x294>)
 800819e:	f006 f9f5 	bl	800e58c <iprintf>
        --pcb->snd_queuelen;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80081a8:	3b01      	subs	r3, #1
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081b6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d12a      	bne.n	8008214 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081c2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d106      	bne.n	80081d8 <tcp_process+0x280>
 80081ca:	4b06      	ldr	r3, [pc, #24]	@ (80081e4 <tcp_process+0x28c>)
 80081cc:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80081d0:	490f      	ldr	r1, [pc, #60]	@ (8008210 <tcp_process+0x2b8>)
 80081d2:	4806      	ldr	r0, [pc, #24]	@ (80081ec <tcp_process+0x294>)
 80081d4:	f006 f9da 	bl	800e58c <iprintf>
          pcb->unsent = rseg->next;
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	66da      	str	r2, [r3, #108]	@ 0x6c
 80081e0:	e01c      	b.n	800821c <tcp_process+0x2c4>
 80081e2:	bf00      	nop
 80081e4:	08010648 	.word	0x08010648
 80081e8:	08010880 	.word	0x08010880
 80081ec:	08010694 	.word	0x08010694
 80081f0:	20008288 	.word	0x20008288
 80081f4:	20008280 	.word	0x20008280
 80081f8:	2000827c 	.word	0x2000827c
 80081fc:	0801089c 	.word	0x0801089c
 8008200:	20008289 	.word	0x20008289
 8008204:	20008244 	.word	0x20008244
 8008208:	2000826c 	.word	0x2000826c
 800820c:	080108bc 	.word	0x080108bc
 8008210:	080108d4 	.word	0x080108d4
        } else {
          pcb->unacked = rseg->next;
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800821c:	69f8      	ldr	r0, [r7, #28]
 800821e:	f7fe fc3c 	bl	8006a9a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008226:	2b00      	cmp	r3, #0
 8008228:	d104      	bne.n	8008234 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008230:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008232:	e006      	b.n	8008242 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00a      	beq.n	8008262 <tcp_process+0x30a>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	6910      	ldr	r0, [r2, #16]
 8008256:	2200      	movs	r2, #0
 8008258:	6879      	ldr	r1, [r7, #4]
 800825a:	4798      	blx	r3
 800825c:	4603      	mov	r3, r0
 800825e:	76bb      	strb	r3, [r7, #26]
 8008260:	e001      	b.n	8008266 <tcp_process+0x30e>
 8008262:	2300      	movs	r3, #0
 8008264:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008266:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800826a:	f113 0f0d 	cmn.w	r3, #13
 800826e:	d102      	bne.n	8008276 <tcp_process+0x31e>
          return ERR_ABRT;
 8008270:	f06f 030c 	mvn.w	r3, #12
 8008274:	e250      	b.n	8008718 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	8b5b      	ldrh	r3, [r3, #26]
 800827a:	f043 0302 	orr.w	r3, r3, #2
 800827e:	b29a      	uxth	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008284:	e23a      	b.n	80086fc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008286:	4b98      	ldr	r3, [pc, #608]	@ (80084e8 <tcp_process+0x590>)
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	f003 0310 	and.w	r3, r3, #16
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 8234 	beq.w	80086fc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008294:	4b95      	ldr	r3, [pc, #596]	@ (80084ec <tcp_process+0x594>)
 8008296:	6819      	ldr	r1, [r3, #0]
 8008298:	4b95      	ldr	r3, [pc, #596]	@ (80084f0 <tcp_process+0x598>)
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	461a      	mov	r2, r3
 800829e:	4b95      	ldr	r3, [pc, #596]	@ (80084f4 <tcp_process+0x59c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80082a4:	4b94      	ldr	r3, [pc, #592]	@ (80084f8 <tcp_process+0x5a0>)
 80082a6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80082a8:	885b      	ldrh	r3, [r3, #2]
 80082aa:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80082ac:	4a92      	ldr	r2, [pc, #584]	@ (80084f8 <tcp_process+0x5a0>)
 80082ae:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80082b0:	8812      	ldrh	r2, [r2, #0]
 80082b2:	b292      	uxth	r2, r2
 80082b4:	9202      	str	r2, [sp, #8]
 80082b6:	9301      	str	r3, [sp, #4]
 80082b8:	4b90      	ldr	r3, [pc, #576]	@ (80084fc <tcp_process+0x5a4>)
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	4b90      	ldr	r3, [pc, #576]	@ (8008500 <tcp_process+0x5a8>)
 80082be:	4602      	mov	r2, r0
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f003 f8d7 	bl	800b474 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082cc:	2b05      	cmp	r3, #5
 80082ce:	f200 8215 	bhi.w	80086fc <tcp_process+0x7a4>
          pcb->rtime = 0;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f002 fea3 	bl	800b024 <tcp_rexmit_rto>
      break;
 80082de:	e20d      	b.n	80086fc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80082e0:	4b81      	ldr	r3, [pc, #516]	@ (80084e8 <tcp_process+0x590>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	f003 0310 	and.w	r3, r3, #16
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 80a1 	beq.w	8008430 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80082ee:	4b7f      	ldr	r3, [pc, #508]	@ (80084ec <tcp_process+0x594>)
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	3b01      	subs	r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	db7e      	blt.n	80083fc <tcp_process+0x4a4>
 80082fe:	4b7b      	ldr	r3, [pc, #492]	@ (80084ec <tcp_process+0x594>)
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	2b00      	cmp	r3, #0
 800830a:	dc77      	bgt.n	80083fc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2204      	movs	r2, #4
 8008310:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008316:	2b00      	cmp	r3, #0
 8008318:	d102      	bne.n	8008320 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800831a:	23fa      	movs	r3, #250	@ 0xfa
 800831c:	76bb      	strb	r3, [r7, #26]
 800831e:	e01d      	b.n	800835c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d106      	bne.n	8008338 <tcp_process+0x3e0>
 800832a:	4b76      	ldr	r3, [pc, #472]	@ (8008504 <tcp_process+0x5ac>)
 800832c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8008330:	4975      	ldr	r1, [pc, #468]	@ (8008508 <tcp_process+0x5b0>)
 8008332:	4876      	ldr	r0, [pc, #472]	@ (800850c <tcp_process+0x5b4>)
 8008334:	f006 f92a 	bl	800e58c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <tcp_process+0x400>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	6910      	ldr	r0, [r2, #16]
 800834c:	2200      	movs	r2, #0
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	4798      	blx	r3
 8008352:	4603      	mov	r3, r0
 8008354:	76bb      	strb	r3, [r7, #26]
 8008356:	e001      	b.n	800835c <tcp_process+0x404>
 8008358:	23f0      	movs	r3, #240	@ 0xf0
 800835a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800835c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00a      	beq.n	800837a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008364:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008368:	f113 0f0d 	cmn.w	r3, #13
 800836c:	d002      	beq.n	8008374 <tcp_process+0x41c>
              tcp_abort(pcb);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7fd fcec 	bl	8005d4c <tcp_abort>
            }
            return ERR_ABRT;
 8008374:	f06f 030c 	mvn.w	r3, #12
 8008378:	e1ce      	b.n	8008718 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fae0 	bl	8008940 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008380:	4b63      	ldr	r3, [pc, #396]	@ (8008510 <tcp_process+0x5b8>)
 8008382:	881b      	ldrh	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d005      	beq.n	8008394 <tcp_process+0x43c>
            recv_acked--;
 8008388:	4b61      	ldr	r3, [pc, #388]	@ (8008510 <tcp_process+0x5b8>)
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	3b01      	subs	r3, #1
 800838e:	b29a      	uxth	r2, r3
 8008390:	4b5f      	ldr	r3, [pc, #380]	@ (8008510 <tcp_process+0x5b8>)
 8008392:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008398:	009a      	lsls	r2, r3, #2
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800839e:	005b      	lsls	r3, r3, #1
 80083a0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80083a4:	428b      	cmp	r3, r1
 80083a6:	bf38      	it	cc
 80083a8:	460b      	movcc	r3, r1
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d204      	bcs.n	80083b8 <tcp_process+0x460>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	e00d      	b.n	80083d4 <tcp_process+0x47c>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80083bc:	005b      	lsls	r3, r3, #1
 80083be:	f241 121c 	movw	r2, #4380	@ 0x111c
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d904      	bls.n	80083d0 <tcp_process+0x478>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	e001      	b.n	80083d4 <tcp_process+0x47c>
 80083d0:	f241 131c 	movw	r3, #4380	@ 0x111c
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80083da:	4b4e      	ldr	r3, [pc, #312]	@ (8008514 <tcp_process+0x5bc>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	f003 0320 	and.w	r3, r3, #32
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d037      	beq.n	8008456 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	8b5b      	ldrh	r3, [r3, #26]
 80083ea:	f043 0302 	orr.w	r3, r3, #2
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2207      	movs	r2, #7
 80083f8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80083fa:	e02c      	b.n	8008456 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083fc:	4b3b      	ldr	r3, [pc, #236]	@ (80084ec <tcp_process+0x594>)
 80083fe:	6819      	ldr	r1, [r3, #0]
 8008400:	4b3b      	ldr	r3, [pc, #236]	@ (80084f0 <tcp_process+0x598>)
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	461a      	mov	r2, r3
 8008406:	4b3b      	ldr	r3, [pc, #236]	@ (80084f4 <tcp_process+0x59c>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800840c:	4b3a      	ldr	r3, [pc, #232]	@ (80084f8 <tcp_process+0x5a0>)
 800840e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008410:	885b      	ldrh	r3, [r3, #2]
 8008412:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008414:	4a38      	ldr	r2, [pc, #224]	@ (80084f8 <tcp_process+0x5a0>)
 8008416:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008418:	8812      	ldrh	r2, [r2, #0]
 800841a:	b292      	uxth	r2, r2
 800841c:	9202      	str	r2, [sp, #8]
 800841e:	9301      	str	r3, [sp, #4]
 8008420:	4b36      	ldr	r3, [pc, #216]	@ (80084fc <tcp_process+0x5a4>)
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	4b36      	ldr	r3, [pc, #216]	@ (8008500 <tcp_process+0x5a8>)
 8008426:	4602      	mov	r2, r0
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f003 f823 	bl	800b474 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800842e:	e167      	b.n	8008700 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008430:	4b2d      	ldr	r3, [pc, #180]	@ (80084e8 <tcp_process+0x590>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 8161 	beq.w	8008700 <tcp_process+0x7a8>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008442:	1e5a      	subs	r2, r3, #1
 8008444:	4b2b      	ldr	r3, [pc, #172]	@ (80084f4 <tcp_process+0x59c>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	429a      	cmp	r2, r3
 800844a:	f040 8159 	bne.w	8008700 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f002 fe0a 	bl	800b068 <tcp_rexmit>
      break;
 8008454:	e154      	b.n	8008700 <tcp_process+0x7a8>
 8008456:	e153      	b.n	8008700 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fa71 	bl	8008940 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800845e:	4b2d      	ldr	r3, [pc, #180]	@ (8008514 <tcp_process+0x5bc>)
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	f003 0320 	and.w	r3, r3, #32
 8008466:	2b00      	cmp	r3, #0
 8008468:	f000 814c 	beq.w	8008704 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	8b5b      	ldrh	r3, [r3, #26]
 8008470:	f043 0302 	orr.w	r3, r3, #2
 8008474:	b29a      	uxth	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2207      	movs	r2, #7
 800847e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008480:	e140      	b.n	8008704 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fa5c 	bl	8008940 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008488:	4b22      	ldr	r3, [pc, #136]	@ (8008514 <tcp_process+0x5bc>)
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	f003 0320 	and.w	r3, r3, #32
 8008490:	2b00      	cmp	r3, #0
 8008492:	d071      	beq.n	8008578 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008494:	4b14      	ldr	r3, [pc, #80]	@ (80084e8 <tcp_process+0x590>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	f003 0310 	and.w	r3, r3, #16
 800849c:	2b00      	cmp	r3, #0
 800849e:	d060      	beq.n	8008562 <tcp_process+0x60a>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084a4:	4b11      	ldr	r3, [pc, #68]	@ (80084ec <tcp_process+0x594>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d15a      	bne.n	8008562 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d156      	bne.n	8008562 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	8b5b      	ldrh	r3, [r3, #26]
 80084b8:	f043 0302 	orr.w	r3, r3, #2
 80084bc:	b29a      	uxth	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7fe fdbc 	bl	8007040 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80084c8:	4b13      	ldr	r3, [pc, #76]	@ (8008518 <tcp_process+0x5c0>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d105      	bne.n	80084de <tcp_process+0x586>
 80084d2:	4b11      	ldr	r3, [pc, #68]	@ (8008518 <tcp_process+0x5c0>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	4a0f      	ldr	r2, [pc, #60]	@ (8008518 <tcp_process+0x5c0>)
 80084da:	6013      	str	r3, [r2, #0]
 80084dc:	e02e      	b.n	800853c <tcp_process+0x5e4>
 80084de:	4b0e      	ldr	r3, [pc, #56]	@ (8008518 <tcp_process+0x5c0>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	e027      	b.n	8008536 <tcp_process+0x5de>
 80084e6:	bf00      	nop
 80084e8:	20008288 	.word	0x20008288
 80084ec:	20008280 	.word	0x20008280
 80084f0:	20008286 	.word	0x20008286
 80084f4:	2000827c 	.word	0x2000827c
 80084f8:	2000826c 	.word	0x2000826c
 80084fc:	20004ce4 	.word	0x20004ce4
 8008500:	20004ce8 	.word	0x20004ce8
 8008504:	08010648 	.word	0x08010648
 8008508:	080108e8 	.word	0x080108e8
 800850c:	08010694 	.word	0x08010694
 8008510:	20008284 	.word	0x20008284
 8008514:	20008289 	.word	0x20008289
 8008518:	20008250 	.word	0x20008250
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	429a      	cmp	r2, r3
 8008524:	d104      	bne.n	8008530 <tcp_process+0x5d8>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	68da      	ldr	r2, [r3, #12]
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	60da      	str	r2, [r3, #12]
 800852e:	e005      	b.n	800853c <tcp_process+0x5e4>
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	617b      	str	r3, [r7, #20]
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1ef      	bne.n	800851c <tcp_process+0x5c4>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	60da      	str	r2, [r3, #12]
 8008542:	4b77      	ldr	r3, [pc, #476]	@ (8008720 <tcp_process+0x7c8>)
 8008544:	2201      	movs	r2, #1
 8008546:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	220a      	movs	r2, #10
 800854c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800854e:	4b75      	ldr	r3, [pc, #468]	@ (8008724 <tcp_process+0x7cc>)
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	60da      	str	r2, [r3, #12]
 8008556:	4a73      	ldr	r2, [pc, #460]	@ (8008724 <tcp_process+0x7cc>)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6013      	str	r3, [r2, #0]
 800855c:	f003 f94c 	bl	800b7f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008560:	e0d2      	b.n	8008708 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	8b5b      	ldrh	r3, [r3, #26]
 8008566:	f043 0302 	orr.w	r3, r3, #2
 800856a:	b29a      	uxth	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2208      	movs	r2, #8
 8008574:	751a      	strb	r2, [r3, #20]
      break;
 8008576:	e0c7      	b.n	8008708 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008578:	4b6b      	ldr	r3, [pc, #428]	@ (8008728 <tcp_process+0x7d0>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	f003 0310 	and.w	r3, r3, #16
 8008580:	2b00      	cmp	r3, #0
 8008582:	f000 80c1 	beq.w	8008708 <tcp_process+0x7b0>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800858a:	4b68      	ldr	r3, [pc, #416]	@ (800872c <tcp_process+0x7d4>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	429a      	cmp	r2, r3
 8008590:	f040 80ba 	bne.w	8008708 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008598:	2b00      	cmp	r3, #0
 800859a:	f040 80b5 	bne.w	8008708 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2206      	movs	r2, #6
 80085a2:	751a      	strb	r2, [r3, #20]
      break;
 80085a4:	e0b0      	b.n	8008708 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f9ca 	bl	8008940 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80085ac:	4b60      	ldr	r3, [pc, #384]	@ (8008730 <tcp_process+0x7d8>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	f003 0320 	and.w	r3, r3, #32
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 80a9 	beq.w	800870c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	8b5b      	ldrh	r3, [r3, #26]
 80085be:	f043 0302 	orr.w	r3, r3, #2
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7fe fd39 	bl	8007040 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80085ce:	4b59      	ldr	r3, [pc, #356]	@ (8008734 <tcp_process+0x7dc>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d105      	bne.n	80085e4 <tcp_process+0x68c>
 80085d8:	4b56      	ldr	r3, [pc, #344]	@ (8008734 <tcp_process+0x7dc>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	4a55      	ldr	r2, [pc, #340]	@ (8008734 <tcp_process+0x7dc>)
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	e013      	b.n	800860c <tcp_process+0x6b4>
 80085e4:	4b53      	ldr	r3, [pc, #332]	@ (8008734 <tcp_process+0x7dc>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	613b      	str	r3, [r7, #16]
 80085ea:	e00c      	b.n	8008606 <tcp_process+0x6ae>
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d104      	bne.n	8008600 <tcp_process+0x6a8>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	68da      	ldr	r2, [r3, #12]
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	60da      	str	r2, [r3, #12]
 80085fe:	e005      	b.n	800860c <tcp_process+0x6b4>
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	613b      	str	r3, [r7, #16]
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1ef      	bne.n	80085ec <tcp_process+0x694>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	60da      	str	r2, [r3, #12]
 8008612:	4b43      	ldr	r3, [pc, #268]	@ (8008720 <tcp_process+0x7c8>)
 8008614:	2201      	movs	r2, #1
 8008616:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	220a      	movs	r2, #10
 800861c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800861e:	4b41      	ldr	r3, [pc, #260]	@ (8008724 <tcp_process+0x7cc>)
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	60da      	str	r2, [r3, #12]
 8008626:	4a3f      	ldr	r2, [pc, #252]	@ (8008724 <tcp_process+0x7cc>)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	f003 f8e4 	bl	800b7f8 <tcp_timer_needed>
      }
      break;
 8008630:	e06c      	b.n	800870c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f984 	bl	8008940 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008638:	4b3b      	ldr	r3, [pc, #236]	@ (8008728 <tcp_process+0x7d0>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	f003 0310 	and.w	r3, r3, #16
 8008640:	2b00      	cmp	r3, #0
 8008642:	d065      	beq.n	8008710 <tcp_process+0x7b8>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008648:	4b38      	ldr	r3, [pc, #224]	@ (800872c <tcp_process+0x7d4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d15f      	bne.n	8008710 <tcp_process+0x7b8>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008654:	2b00      	cmp	r3, #0
 8008656:	d15b      	bne.n	8008710 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7fe fcf1 	bl	8007040 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800865e:	4b35      	ldr	r3, [pc, #212]	@ (8008734 <tcp_process+0x7dc>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	429a      	cmp	r2, r3
 8008666:	d105      	bne.n	8008674 <tcp_process+0x71c>
 8008668:	4b32      	ldr	r3, [pc, #200]	@ (8008734 <tcp_process+0x7dc>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	4a31      	ldr	r2, [pc, #196]	@ (8008734 <tcp_process+0x7dc>)
 8008670:	6013      	str	r3, [r2, #0]
 8008672:	e013      	b.n	800869c <tcp_process+0x744>
 8008674:	4b2f      	ldr	r3, [pc, #188]	@ (8008734 <tcp_process+0x7dc>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	60fb      	str	r3, [r7, #12]
 800867a:	e00c      	b.n	8008696 <tcp_process+0x73e>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	429a      	cmp	r2, r3
 8008684:	d104      	bne.n	8008690 <tcp_process+0x738>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68da      	ldr	r2, [r3, #12]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	60da      	str	r2, [r3, #12]
 800868e:	e005      	b.n	800869c <tcp_process+0x744>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1ef      	bne.n	800867c <tcp_process+0x724>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	60da      	str	r2, [r3, #12]
 80086a2:	4b1f      	ldr	r3, [pc, #124]	@ (8008720 <tcp_process+0x7c8>)
 80086a4:	2201      	movs	r2, #1
 80086a6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	220a      	movs	r2, #10
 80086ac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80086ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008724 <tcp_process+0x7cc>)
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	60da      	str	r2, [r3, #12]
 80086b6:	4a1b      	ldr	r2, [pc, #108]	@ (8008724 <tcp_process+0x7cc>)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	f003 f89c 	bl	800b7f8 <tcp_timer_needed>
      }
      break;
 80086c0:	e026      	b.n	8008710 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f93c 	bl	8008940 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80086c8:	4b17      	ldr	r3, [pc, #92]	@ (8008728 <tcp_process+0x7d0>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	f003 0310 	and.w	r3, r3, #16
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01f      	beq.n	8008714 <tcp_process+0x7bc>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086d8:	4b14      	ldr	r3, [pc, #80]	@ (800872c <tcp_process+0x7d4>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d119      	bne.n	8008714 <tcp_process+0x7bc>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d115      	bne.n	8008714 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80086e8:	4b11      	ldr	r3, [pc, #68]	@ (8008730 <tcp_process+0x7d8>)
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	f043 0310 	orr.w	r3, r3, #16
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	4b0f      	ldr	r3, [pc, #60]	@ (8008730 <tcp_process+0x7d8>)
 80086f4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80086f6:	e00d      	b.n	8008714 <tcp_process+0x7bc>
    default:
      break;
 80086f8:	bf00      	nop
 80086fa:	e00c      	b.n	8008716 <tcp_process+0x7be>
      break;
 80086fc:	bf00      	nop
 80086fe:	e00a      	b.n	8008716 <tcp_process+0x7be>
      break;
 8008700:	bf00      	nop
 8008702:	e008      	b.n	8008716 <tcp_process+0x7be>
      break;
 8008704:	bf00      	nop
 8008706:	e006      	b.n	8008716 <tcp_process+0x7be>
      break;
 8008708:	bf00      	nop
 800870a:	e004      	b.n	8008716 <tcp_process+0x7be>
      break;
 800870c:	bf00      	nop
 800870e:	e002      	b.n	8008716 <tcp_process+0x7be>
      break;
 8008710:	bf00      	nop
 8008712:	e000      	b.n	8008716 <tcp_process+0x7be>
      break;
 8008714:	bf00      	nop
  }
  return ERR_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3724      	adds	r7, #36	@ 0x24
 800871c:	46bd      	mov	sp, r7
 800871e:	bd90      	pop	{r4, r7, pc}
 8008720:	20008258 	.word	0x20008258
 8008724:	20008254 	.word	0x20008254
 8008728:	20008288 	.word	0x20008288
 800872c:	20008280 	.word	0x20008280
 8008730:	20008289 	.word	0x20008289
 8008734:	20008250 	.word	0x20008250

08008738 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008738:	b590      	push	{r4, r7, lr}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d106      	bne.n	8008756 <tcp_oos_insert_segment+0x1e>
 8008748:	4b3b      	ldr	r3, [pc, #236]	@ (8008838 <tcp_oos_insert_segment+0x100>)
 800874a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800874e:	493b      	ldr	r1, [pc, #236]	@ (800883c <tcp_oos_insert_segment+0x104>)
 8008750:	483b      	ldr	r0, [pc, #236]	@ (8008840 <tcp_oos_insert_segment+0x108>)
 8008752:	f005 ff1b 	bl	800e58c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	899b      	ldrh	r3, [r3, #12]
 800875c:	b29b      	uxth	r3, r3
 800875e:	4618      	mov	r0, r3
 8008760:	f7fb f9fe 	bl	8003b60 <lwip_htons>
 8008764:	4603      	mov	r3, r0
 8008766:	b2db      	uxtb	r3, r3
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d028      	beq.n	80087c2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008770:	6838      	ldr	r0, [r7, #0]
 8008772:	f7fe f97d 	bl	8006a70 <tcp_segs_free>
    next = NULL;
 8008776:	2300      	movs	r3, #0
 8008778:	603b      	str	r3, [r7, #0]
 800877a:	e056      	b.n	800882a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	899b      	ldrh	r3, [r3, #12]
 8008782:	b29b      	uxth	r3, r3
 8008784:	4618      	mov	r0, r3
 8008786:	f7fb f9eb 	bl	8003b60 <lwip_htons>
 800878a:	4603      	mov	r3, r0
 800878c:	b2db      	uxtb	r3, r3
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00d      	beq.n	80087b2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	899b      	ldrh	r3, [r3, #12]
 800879c:	b29c      	uxth	r4, r3
 800879e:	2001      	movs	r0, #1
 80087a0:	f7fb f9de 	bl	8003b60 <lwip_htons>
 80087a4:	4603      	mov	r3, r0
 80087a6:	461a      	mov	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	4322      	orrs	r2, r4
 80087ae:	b292      	uxth	r2, r2
 80087b0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f7fe f96c 	bl	8006a9a <tcp_seg_free>
    while (next &&
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00e      	beq.n	80087e6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	891b      	ldrh	r3, [r3, #8]
 80087cc:	461a      	mov	r2, r3
 80087ce:	4b1d      	ldr	r3, [pc, #116]	@ (8008844 <tcp_oos_insert_segment+0x10c>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	441a      	add	r2, r3
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	8909      	ldrh	r1, [r1, #8]
 80087de:	440b      	add	r3, r1
 80087e0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	daca      	bge.n	800877c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d01e      	beq.n	800882a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	891b      	ldrh	r3, [r3, #8]
 80087f0:	461a      	mov	r2, r3
 80087f2:	4b14      	ldr	r3, [pc, #80]	@ (8008844 <tcp_oos_insert_segment+0x10c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	441a      	add	r2, r3
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008800:	2b00      	cmp	r3, #0
 8008802:	dd12      	ble.n	800882a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	b29a      	uxth	r2, r3
 800880c:	4b0d      	ldr	r3, [pc, #52]	@ (8008844 <tcp_oos_insert_segment+0x10c>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	b29b      	uxth	r3, r3
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	b29a      	uxth	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	891b      	ldrh	r3, [r3, #8]
 8008822:	4619      	mov	r1, r3
 8008824:	4610      	mov	r0, r2
 8008826:	f7fc fb73 	bl	8004f10 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	601a      	str	r2, [r3, #0]
}
 8008830:	bf00      	nop
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	bd90      	pop	{r4, r7, pc}
 8008838:	08010648 	.word	0x08010648
 800883c:	08010908 	.word	0x08010908
 8008840:	08010694 	.word	0x08010694
 8008844:	2000827c 	.word	0x2000827c

08008848 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008848:	b5b0      	push	{r4, r5, r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
 8008854:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008856:	e03e      	b.n	80088d6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	4618      	mov	r0, r3
 8008868:	f7fc fd60 	bl	800532c <pbuf_clen>
 800886c:	4603      	mov	r3, r0
 800886e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008876:	8a7a      	ldrh	r2, [r7, #18]
 8008878:	429a      	cmp	r2, r3
 800887a:	d906      	bls.n	800888a <tcp_free_acked_segments+0x42>
 800887c:	4b2a      	ldr	r3, [pc, #168]	@ (8008928 <tcp_free_acked_segments+0xe0>)
 800887e:	f240 4257 	movw	r2, #1111	@ 0x457
 8008882:	492a      	ldr	r1, [pc, #168]	@ (800892c <tcp_free_acked_segments+0xe4>)
 8008884:	482a      	ldr	r0, [pc, #168]	@ (8008930 <tcp_free_acked_segments+0xe8>)
 8008886:	f005 fe81 	bl	800e58c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8008890:	8a7b      	ldrh	r3, [r7, #18]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	b29a      	uxth	r2, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	891a      	ldrh	r2, [r3, #8]
 80088a0:	4b24      	ldr	r3, [pc, #144]	@ (8008934 <tcp_free_acked_segments+0xec>)
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	4413      	add	r3, r2
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	4b22      	ldr	r3, [pc, #136]	@ (8008934 <tcp_free_acked_segments+0xec>)
 80088aa:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80088ac:	6978      	ldr	r0, [r7, #20]
 80088ae:	f7fe f8f4 	bl	8006a9a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00c      	beq.n	80088d6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d109      	bne.n	80088d6 <tcp_free_acked_segments+0x8e>
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d106      	bne.n	80088d6 <tcp_free_acked_segments+0x8e>
 80088c8:	4b17      	ldr	r3, [pc, #92]	@ (8008928 <tcp_free_acked_segments+0xe0>)
 80088ca:	f240 4261 	movw	r2, #1121	@ 0x461
 80088ce:	491a      	ldr	r1, [pc, #104]	@ (8008938 <tcp_free_acked_segments+0xf0>)
 80088d0:	4817      	ldr	r0, [pc, #92]	@ (8008930 <tcp_free_acked_segments+0xe8>)
 80088d2:	f005 fe5b 	bl	800e58c <iprintf>
  while (seg_list != NULL &&
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d020      	beq.n	800891e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fb f952 	bl	8003b8c <lwip_htonl>
 80088e8:	4604      	mov	r4, r0
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	891b      	ldrh	r3, [r3, #8]
 80088ee:	461d      	mov	r5, r3
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	899b      	ldrh	r3, [r3, #12]
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fb f931 	bl	8003b60 <lwip_htons>
 80088fe:	4603      	mov	r3, r0
 8008900:	b2db      	uxtb	r3, r3
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <tcp_free_acked_segments+0xc6>
 800890a:	2301      	movs	r3, #1
 800890c:	e000      	b.n	8008910 <tcp_free_acked_segments+0xc8>
 800890e:	2300      	movs	r3, #0
 8008910:	442b      	add	r3, r5
 8008912:	18e2      	adds	r2, r4, r3
 8008914:	4b09      	ldr	r3, [pc, #36]	@ (800893c <tcp_free_acked_segments+0xf4>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800891a:	2b00      	cmp	r3, #0
 800891c:	dd9c      	ble.n	8008858 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800891e:	68bb      	ldr	r3, [r7, #8]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3718      	adds	r7, #24
 8008924:	46bd      	mov	sp, r7
 8008926:	bdb0      	pop	{r4, r5, r7, pc}
 8008928:	08010648 	.word	0x08010648
 800892c:	08010930 	.word	0x08010930
 8008930:	08010694 	.word	0x08010694
 8008934:	20008284 	.word	0x20008284
 8008938:	08010958 	.word	0x08010958
 800893c:	20008280 	.word	0x20008280

08008940 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008940:	b5b0      	push	{r4, r5, r7, lr}
 8008942:	b094      	sub	sp, #80	@ 0x50
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d106      	bne.n	8008960 <tcp_receive+0x20>
 8008952:	4b91      	ldr	r3, [pc, #580]	@ (8008b98 <tcp_receive+0x258>)
 8008954:	f240 427b 	movw	r2, #1147	@ 0x47b
 8008958:	4990      	ldr	r1, [pc, #576]	@ (8008b9c <tcp_receive+0x25c>)
 800895a:	4891      	ldr	r0, [pc, #580]	@ (8008ba0 <tcp_receive+0x260>)
 800895c:	f005 fe16 	bl	800e58c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	7d1b      	ldrb	r3, [r3, #20]
 8008964:	2b03      	cmp	r3, #3
 8008966:	d806      	bhi.n	8008976 <tcp_receive+0x36>
 8008968:	4b8b      	ldr	r3, [pc, #556]	@ (8008b98 <tcp_receive+0x258>)
 800896a:	f240 427c 	movw	r2, #1148	@ 0x47c
 800896e:	498d      	ldr	r1, [pc, #564]	@ (8008ba4 <tcp_receive+0x264>)
 8008970:	488b      	ldr	r0, [pc, #556]	@ (8008ba0 <tcp_receive+0x260>)
 8008972:	f005 fe0b 	bl	800e58c <iprintf>

  if (flags & TCP_ACK) {
 8008976:	4b8c      	ldr	r3, [pc, #560]	@ (8008ba8 <tcp_receive+0x268>)
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	f003 0310 	and.w	r3, r3, #16
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 8264 	beq.w	8008e4c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800898a:	461a      	mov	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008990:	4413      	add	r3, r2
 8008992:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008998:	4b84      	ldr	r3, [pc, #528]	@ (8008bac <tcp_receive+0x26c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	2b00      	cmp	r3, #0
 80089a0:	db1b      	blt.n	80089da <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80089a6:	4b81      	ldr	r3, [pc, #516]	@ (8008bac <tcp_receive+0x26c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d106      	bne.n	80089bc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80089b2:	4b7f      	ldr	r3, [pc, #508]	@ (8008bb0 <tcp_receive+0x270>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	db0e      	blt.n	80089da <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80089c0:	4b7b      	ldr	r3, [pc, #492]	@ (8008bb0 <tcp_receive+0x270>)
 80089c2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d125      	bne.n	8008a14 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80089c8:	4b7a      	ldr	r3, [pc, #488]	@ (8008bb4 <tcp_receive+0x274>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	89db      	ldrh	r3, [r3, #14]
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d91c      	bls.n	8008a14 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80089da:	4b76      	ldr	r3, [pc, #472]	@ (8008bb4 <tcp_receive+0x274>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	89db      	ldrh	r3, [r3, #14]
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d205      	bcs.n	8008a04 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8008a04:	4b69      	ldr	r3, [pc, #420]	@ (8008bac <tcp_receive+0x26c>)
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8008a0c:	4b68      	ldr	r3, [pc, #416]	@ (8008bb0 <tcp_receive+0x270>)
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008a14:	4b66      	ldr	r3, [pc, #408]	@ (8008bb0 <tcp_receive+0x270>)
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	dc58      	bgt.n	8008ad4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008a22:	4b65      	ldr	r3, [pc, #404]	@ (8008bb8 <tcp_receive+0x278>)
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d14b      	bne.n	8008ac2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8008a34:	4413      	add	r3, r2
 8008a36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d142      	bne.n	8008ac2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	db3d      	blt.n	8008ac2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a4a:	4b59      	ldr	r3, [pc, #356]	@ (8008bb0 <tcp_receive+0x270>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d137      	bne.n	8008ac2 <tcp_receive+0x182>
              found_dupack = 1;
 8008a52:	2301      	movs	r3, #1
 8008a54:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a5c:	2bff      	cmp	r3, #255	@ 0xff
 8008a5e:	d007      	beq.n	8008a70 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a66:	3301      	adds	r3, #1
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d91b      	bls.n	8008ab2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008a84:	4413      	add	r3, r2
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d30a      	bcc.n	8008aa8 <tcp_receive+0x168>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008a9c:	4413      	add	r3, r2
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008aa6:	e004      	b.n	8008ab2 <tcp_receive+0x172>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008aae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d902      	bls.n	8008ac2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f002 fb3f 	bl	800b140 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f040 8161 	bne.w	8008d8c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ad2:	e15b      	b.n	8008d8c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008ad4:	4b36      	ldr	r3, [pc, #216]	@ (8008bb0 <tcp_receive+0x270>)
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f2c0 814e 	blt.w	8008d82 <tcp_receive+0x442>
 8008ae6:	4b32      	ldr	r3, [pc, #200]	@ (8008bb0 <tcp_receive+0x270>)
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aee:	1ad3      	subs	r3, r2, r3
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f300 8146 	bgt.w	8008d82 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	8b5b      	ldrh	r3, [r3, #26]
 8008afa:	f003 0304 	and.w	r3, r3, #4
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d010      	beq.n	8008b24 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	8b5b      	ldrh	r3, [r3, #26]
 8008b06:	f023 0304 	bic.w	r3, r3, #4
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008b32:	10db      	asrs	r3, r3, #3
 8008b34:	b21b      	sxth	r3, r3
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	4413      	add	r3, r2
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	b21a      	sxth	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008b4c:	4b18      	ldr	r3, [pc, #96]	@ (8008bb0 <tcp_receive+0x270>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8008b64:	4b12      	ldr	r3, [pc, #72]	@ (8008bb0 <tcp_receive+0x270>)
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	7d1b      	ldrb	r3, [r3, #20]
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	f240 8097 	bls.w	8008ca4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d245      	bcs.n	8008c12 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	8b5b      	ldrh	r3, [r3, #26]
 8008b8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d014      	beq.n	8008bbc <tcp_receive+0x27c>
 8008b92:	2301      	movs	r3, #1
 8008b94:	e013      	b.n	8008bbe <tcp_receive+0x27e>
 8008b96:	bf00      	nop
 8008b98:	08010648 	.word	0x08010648
 8008b9c:	08010978 	.word	0x08010978
 8008ba0:	08010694 	.word	0x08010694
 8008ba4:	08010994 	.word	0x08010994
 8008ba8:	20008288 	.word	0x20008288
 8008bac:	2000827c 	.word	0x2000827c
 8008bb0:	20008280 	.word	0x20008280
 8008bb4:	2000826c 	.word	0x2000826c
 8008bb8:	20008286 	.word	0x20008286
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008bc2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008bcc:	fb12 f303 	smulbb	r3, r2, r3
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	bf28      	it	cs
 8008bd8:	4613      	movcs	r3, r2
 8008bda:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008be2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008be4:	4413      	add	r3, r2
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d309      	bcc.n	8008c06 <tcp_receive+0x2c6>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008bf8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008bfa:	4413      	add	r3, r2
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008c04:	e04e      	b.n	8008ca4 <tcp_receive+0x364>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008c0c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008c10:	e048      	b.n	8008ca4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008c18:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008c1a:	4413      	add	r3, r2
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d309      	bcc.n	8008c3c <tcp_receive+0x2fc>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008c2e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008c30:	4413      	add	r3, r2
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008c3a:	e004      	b.n	8008c46 <tcp_receive+0x306>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008c42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d326      	bcc.n	8008ca4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008c76:	4413      	add	r3, r2
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d30a      	bcc.n	8008c9a <tcp_receive+0x35a>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008c8e:	4413      	add	r3, r2
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008c98:	e004      	b.n	8008ca4 <tcp_receive+0x364>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008ca0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cac:	4a98      	ldr	r2, [pc, #608]	@ (8008f10 <tcp_receive+0x5d0>)
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7ff fdca 	bl	8008848 <tcp_free_acked_segments>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cc2:	4a94      	ldr	r2, [pc, #592]	@ (8008f14 <tcp_receive+0x5d4>)
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f7ff fdbf 	bl	8008848 <tcp_free_acked_segments>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d104      	bne.n	8008ce2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008cde:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008ce0:	e002      	b.n	8008ce8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d103      	bne.n	8008cfe <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8008d04:	4b84      	ldr	r3, [pc, #528]	@ (8008f18 <tcp_receive+0x5d8>)
 8008d06:	881b      	ldrh	r3, [r3, #0]
 8008d08:	4413      	add	r3, r2
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	8b5b      	ldrh	r3, [r3, #26]
 8008d16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d035      	beq.n	8008d8a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d118      	bne.n	8008d58 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00c      	beq.n	8008d48 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fa ff26 	bl	8003b8c <lwip_htonl>
 8008d40:	4603      	mov	r3, r0
 8008d42:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	dc20      	bgt.n	8008d8a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	8b5b      	ldrh	r3, [r3, #26]
 8008d4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008d56:	e018      	b.n	8008d8a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fa ff11 	bl	8003b8c <lwip_htonl>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	1ae3      	subs	r3, r4, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	dc0b      	bgt.n	8008d8a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	8b5b      	ldrh	r3, [r3, #26]
 8008d76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008d80:	e003      	b.n	8008d8a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f002 fbc8 	bl	800b518 <tcp_send_empty_ack>
 8008d88:	e000      	b.n	8008d8c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008d8a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d05b      	beq.n	8008e4c <tcp_receive+0x50c>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d98:	4b60      	ldr	r3, [pc, #384]	@ (8008f1c <tcp_receive+0x5dc>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	da54      	bge.n	8008e4c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008da2:	4b5f      	ldr	r3, [pc, #380]	@ (8008f20 <tcp_receive+0x5e0>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008db6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008dc0:	10db      	asrs	r3, r3, #3
 8008dc2:	b21b      	sxth	r3, r3
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008dda:	4413      	add	r3, r2
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	b21a      	sxth	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8008de4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	da05      	bge.n	8008df8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8008dec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008df0:	425b      	negs	r3, r3
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008df8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008e02:	109b      	asrs	r3, r3, #2
 8008e04:	b21b      	sxth	r3, r3
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008e1c:	4413      	add	r3, r2
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	b21a      	sxth	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008e2c:	10db      	asrs	r3, r3, #3
 8008e2e:	b21b      	sxth	r3, r3
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	4413      	add	r3, r2
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	b21a      	sxth	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008e4c:	4b35      	ldr	r3, [pc, #212]	@ (8008f24 <tcp_receive+0x5e4>)
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 84df 	beq.w	8009814 <tcp_receive+0xed4>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	7d1b      	ldrb	r3, [r3, #20]
 8008e5a:	2b06      	cmp	r3, #6
 8008e5c:	f200 84da 	bhi.w	8009814 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e64:	4b30      	ldr	r3, [pc, #192]	@ (8008f28 <tcp_receive+0x5e8>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f2c0 808f 	blt.w	8008f90 <tcp_receive+0x650>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e76:	4b2b      	ldr	r3, [pc, #172]	@ (8008f24 <tcp_receive+0x5e4>)
 8008e78:	881b      	ldrh	r3, [r3, #0]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8008f28 <tcp_receive+0x5e8>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	440b      	add	r3, r1
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	3301      	adds	r3, #1
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f300 8082 	bgt.w	8008f90 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008e8c:	4b27      	ldr	r3, [pc, #156]	@ (8008f2c <tcp_receive+0x5ec>)
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e96:	4b24      	ldr	r3, [pc, #144]	@ (8008f28 <tcp_receive+0x5e8>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008e9e:	4b23      	ldr	r3, [pc, #140]	@ (8008f2c <tcp_receive+0x5ec>)
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d106      	bne.n	8008eb4 <tcp_receive+0x574>
 8008ea6:	4b22      	ldr	r3, [pc, #136]	@ (8008f30 <tcp_receive+0x5f0>)
 8008ea8:	f240 5294 	movw	r2, #1428	@ 0x594
 8008eac:	4921      	ldr	r1, [pc, #132]	@ (8008f34 <tcp_receive+0x5f4>)
 8008eae:	4822      	ldr	r0, [pc, #136]	@ (8008f38 <tcp_receive+0x5f8>)
 8008eb0:	f005 fb6c 	bl	800e58c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d906      	bls.n	8008ecc <tcp_receive+0x58c>
 8008ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8008f30 <tcp_receive+0x5f0>)
 8008ec0:	f240 5295 	movw	r2, #1429	@ 0x595
 8008ec4:	491d      	ldr	r1, [pc, #116]	@ (8008f3c <tcp_receive+0x5fc>)
 8008ec6:	481c      	ldr	r0, [pc, #112]	@ (8008f38 <tcp_receive+0x5f8>)
 8008ec8:	f005 fb60 	bl	800e58c <iprintf>
      off = (u16_t)off32;
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ece:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008ed2:	4b16      	ldr	r3, [pc, #88]	@ (8008f2c <tcp_receive+0x5ec>)
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	891b      	ldrh	r3, [r3, #8]
 8008ed8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d906      	bls.n	8008eee <tcp_receive+0x5ae>
 8008ee0:	4b13      	ldr	r3, [pc, #76]	@ (8008f30 <tcp_receive+0x5f0>)
 8008ee2:	f240 5297 	movw	r2, #1431	@ 0x597
 8008ee6:	4916      	ldr	r1, [pc, #88]	@ (8008f40 <tcp_receive+0x600>)
 8008ee8:	4813      	ldr	r0, [pc, #76]	@ (8008f38 <tcp_receive+0x5f8>)
 8008eea:	f005 fb4f 	bl	800e58c <iprintf>
      inseg.len -= off;
 8008eee:	4b0f      	ldr	r3, [pc, #60]	@ (8008f2c <tcp_receive+0x5ec>)
 8008ef0:	891a      	ldrh	r2, [r3, #8]
 8008ef2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008ef6:	1ad3      	subs	r3, r2, r3
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	4b0c      	ldr	r3, [pc, #48]	@ (8008f2c <tcp_receive+0x5ec>)
 8008efc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008efe:	4b0b      	ldr	r3, [pc, #44]	@ (8008f2c <tcp_receive+0x5ec>)
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	891a      	ldrh	r2, [r3, #8]
 8008f04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8008f0c:	e02a      	b.n	8008f64 <tcp_receive+0x624>
 8008f0e:	bf00      	nop
 8008f10:	080109b0 	.word	0x080109b0
 8008f14:	080109b8 	.word	0x080109b8
 8008f18:	20008284 	.word	0x20008284
 8008f1c:	20008280 	.word	0x20008280
 8008f20:	20008244 	.word	0x20008244
 8008f24:	20008286 	.word	0x20008286
 8008f28:	2000827c 	.word	0x2000827c
 8008f2c:	2000825c 	.word	0x2000825c
 8008f30:	08010648 	.word	0x08010648
 8008f34:	080109c0 	.word	0x080109c0
 8008f38:	08010694 	.word	0x08010694
 8008f3c:	080109d0 	.word	0x080109d0
 8008f40:	080109e0 	.word	0x080109e0
        off -= p->len;
 8008f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f46:	895b      	ldrh	r3, [r3, #10]
 8008f48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f54:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008f56:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008f5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8008f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f66:	895b      	ldrh	r3, [r3, #10]
 8008f68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d8e9      	bhi.n	8008f44 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008f70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008f74:	4619      	mov	r1, r3
 8008f76:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8008f78:	f7fc f8ca 	bl	8005110 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f80:	4a90      	ldr	r2, [pc, #576]	@ (80091c4 <tcp_receive+0x884>)
 8008f82:	6013      	str	r3, [r2, #0]
 8008f84:	4b90      	ldr	r3, [pc, #576]	@ (80091c8 <tcp_receive+0x888>)
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	4a8e      	ldr	r2, [pc, #568]	@ (80091c4 <tcp_receive+0x884>)
 8008f8a:	6812      	ldr	r2, [r2, #0]
 8008f8c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008f8e:	e00d      	b.n	8008fac <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008f90:	4b8c      	ldr	r3, [pc, #560]	@ (80091c4 <tcp_receive+0x884>)
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	da06      	bge.n	8008fac <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	8b5b      	ldrh	r3, [r3, #26]
 8008fa2:	f043 0302 	orr.w	r3, r3, #2
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008fac:	4b85      	ldr	r3, [pc, #532]	@ (80091c4 <tcp_receive+0x884>)
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f2c0 8427 	blt.w	800980a <tcp_receive+0xeca>
 8008fbc:	4b81      	ldr	r3, [pc, #516]	@ (80091c4 <tcp_receive+0x884>)
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc4:	6879      	ldr	r1, [r7, #4]
 8008fc6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008fc8:	440b      	add	r3, r1
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	3301      	adds	r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f300 841b 	bgt.w	800980a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008fd8:	4b7a      	ldr	r3, [pc, #488]	@ (80091c4 <tcp_receive+0x884>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	f040 8298 	bne.w	8009512 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008fe2:	4b79      	ldr	r3, [pc, #484]	@ (80091c8 <tcp_receive+0x888>)
 8008fe4:	891c      	ldrh	r4, [r3, #8]
 8008fe6:	4b78      	ldr	r3, [pc, #480]	@ (80091c8 <tcp_receive+0x888>)
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	899b      	ldrh	r3, [r3, #12]
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fa fdb6 	bl	8003b60 <lwip_htons>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	f003 0303 	and.w	r3, r3, #3
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <tcp_receive+0x6c4>
 8009000:	2301      	movs	r3, #1
 8009002:	e000      	b.n	8009006 <tcp_receive+0x6c6>
 8009004:	2300      	movs	r3, #0
 8009006:	4423      	add	r3, r4
 8009008:	b29a      	uxth	r2, r3
 800900a:	4b70      	ldr	r3, [pc, #448]	@ (80091cc <tcp_receive+0x88c>)
 800900c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009012:	4b6e      	ldr	r3, [pc, #440]	@ (80091cc <tcp_receive+0x88c>)
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	429a      	cmp	r2, r3
 8009018:	d274      	bcs.n	8009104 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800901a:	4b6b      	ldr	r3, [pc, #428]	@ (80091c8 <tcp_receive+0x888>)
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	899b      	ldrh	r3, [r3, #12]
 8009020:	b29b      	uxth	r3, r3
 8009022:	4618      	mov	r0, r3
 8009024:	f7fa fd9c 	bl	8003b60 <lwip_htons>
 8009028:	4603      	mov	r3, r0
 800902a:	b2db      	uxtb	r3, r3
 800902c:	f003 0301 	and.w	r3, r3, #1
 8009030:	2b00      	cmp	r3, #0
 8009032:	d01e      	beq.n	8009072 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009034:	4b64      	ldr	r3, [pc, #400]	@ (80091c8 <tcp_receive+0x888>)
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	899b      	ldrh	r3, [r3, #12]
 800903a:	b29b      	uxth	r3, r3
 800903c:	b21b      	sxth	r3, r3
 800903e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009042:	b21c      	sxth	r4, r3
 8009044:	4b60      	ldr	r3, [pc, #384]	@ (80091c8 <tcp_receive+0x888>)
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	899b      	ldrh	r3, [r3, #12]
 800904a:	b29b      	uxth	r3, r3
 800904c:	4618      	mov	r0, r3
 800904e:	f7fa fd87 	bl	8003b60 <lwip_htons>
 8009052:	4603      	mov	r3, r0
 8009054:	b2db      	uxtb	r3, r3
 8009056:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800905a:	b29b      	uxth	r3, r3
 800905c:	4618      	mov	r0, r3
 800905e:	f7fa fd7f 	bl	8003b60 <lwip_htons>
 8009062:	4603      	mov	r3, r0
 8009064:	b21b      	sxth	r3, r3
 8009066:	4323      	orrs	r3, r4
 8009068:	b21a      	sxth	r2, r3
 800906a:	4b57      	ldr	r3, [pc, #348]	@ (80091c8 <tcp_receive+0x888>)
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	b292      	uxth	r2, r2
 8009070:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009076:	4b54      	ldr	r3, [pc, #336]	@ (80091c8 <tcp_receive+0x888>)
 8009078:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800907a:	4b53      	ldr	r3, [pc, #332]	@ (80091c8 <tcp_receive+0x888>)
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	899b      	ldrh	r3, [r3, #12]
 8009080:	b29b      	uxth	r3, r3
 8009082:	4618      	mov	r0, r3
 8009084:	f7fa fd6c 	bl	8003b60 <lwip_htons>
 8009088:	4603      	mov	r3, r0
 800908a:	b2db      	uxtb	r3, r3
 800908c:	f003 0302 	and.w	r3, r3, #2
 8009090:	2b00      	cmp	r3, #0
 8009092:	d005      	beq.n	80090a0 <tcp_receive+0x760>
            inseg.len -= 1;
 8009094:	4b4c      	ldr	r3, [pc, #304]	@ (80091c8 <tcp_receive+0x888>)
 8009096:	891b      	ldrh	r3, [r3, #8]
 8009098:	3b01      	subs	r3, #1
 800909a:	b29a      	uxth	r2, r3
 800909c:	4b4a      	ldr	r3, [pc, #296]	@ (80091c8 <tcp_receive+0x888>)
 800909e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80090a0:	4b49      	ldr	r3, [pc, #292]	@ (80091c8 <tcp_receive+0x888>)
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	4a48      	ldr	r2, [pc, #288]	@ (80091c8 <tcp_receive+0x888>)
 80090a6:	8912      	ldrh	r2, [r2, #8]
 80090a8:	4611      	mov	r1, r2
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fb ff30 	bl	8004f10 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80090b0:	4b45      	ldr	r3, [pc, #276]	@ (80091c8 <tcp_receive+0x888>)
 80090b2:	891c      	ldrh	r4, [r3, #8]
 80090b4:	4b44      	ldr	r3, [pc, #272]	@ (80091c8 <tcp_receive+0x888>)
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	899b      	ldrh	r3, [r3, #12]
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	4618      	mov	r0, r3
 80090be:	f7fa fd4f 	bl	8003b60 <lwip_htons>
 80090c2:	4603      	mov	r3, r0
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	f003 0303 	and.w	r3, r3, #3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <tcp_receive+0x792>
 80090ce:	2301      	movs	r3, #1
 80090d0:	e000      	b.n	80090d4 <tcp_receive+0x794>
 80090d2:	2300      	movs	r3, #0
 80090d4:	4423      	add	r3, r4
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	4b3c      	ldr	r3, [pc, #240]	@ (80091cc <tcp_receive+0x88c>)
 80090da:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80090dc:	4b3b      	ldr	r3, [pc, #236]	@ (80091cc <tcp_receive+0x88c>)
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	4b38      	ldr	r3, [pc, #224]	@ (80091c4 <tcp_receive+0x884>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	441a      	add	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ec:	6879      	ldr	r1, [r7, #4]
 80090ee:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80090f0:	440b      	add	r3, r1
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d006      	beq.n	8009104 <tcp_receive+0x7c4>
 80090f6:	4b36      	ldr	r3, [pc, #216]	@ (80091d0 <tcp_receive+0x890>)
 80090f8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80090fc:	4935      	ldr	r1, [pc, #212]	@ (80091d4 <tcp_receive+0x894>)
 80090fe:	4836      	ldr	r0, [pc, #216]	@ (80091d8 <tcp_receive+0x898>)
 8009100:	f005 fa44 	bl	800e58c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009108:	2b00      	cmp	r3, #0
 800910a:	f000 80e6 	beq.w	80092da <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800910e:	4b2e      	ldr	r3, [pc, #184]	@ (80091c8 <tcp_receive+0x888>)
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	899b      	ldrh	r3, [r3, #12]
 8009114:	b29b      	uxth	r3, r3
 8009116:	4618      	mov	r0, r3
 8009118:	f7fa fd22 	bl	8003b60 <lwip_htons>
 800911c:	4603      	mov	r3, r0
 800911e:	b2db      	uxtb	r3, r3
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	2b00      	cmp	r3, #0
 8009126:	d010      	beq.n	800914a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009128:	e00a      	b.n	8009140 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800912e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f7fd fcad 	bl	8006a9a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1f0      	bne.n	800912a <tcp_receive+0x7ea>
 8009148:	e0c7      	b.n	80092da <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800914e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009150:	e051      	b.n	80091f6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	899b      	ldrh	r3, [r3, #12]
 8009158:	b29b      	uxth	r3, r3
 800915a:	4618      	mov	r0, r3
 800915c:	f7fa fd00 	bl	8003b60 <lwip_htons>
 8009160:	4603      	mov	r3, r0
 8009162:	b2db      	uxtb	r3, r3
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d03c      	beq.n	80091e6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800916c:	4b16      	ldr	r3, [pc, #88]	@ (80091c8 <tcp_receive+0x888>)
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	899b      	ldrh	r3, [r3, #12]
 8009172:	b29b      	uxth	r3, r3
 8009174:	4618      	mov	r0, r3
 8009176:	f7fa fcf3 	bl	8003b60 <lwip_htons>
 800917a:	4603      	mov	r3, r0
 800917c:	b2db      	uxtb	r3, r3
 800917e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009182:	2b00      	cmp	r3, #0
 8009184:	d12f      	bne.n	80091e6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009186:	4b10      	ldr	r3, [pc, #64]	@ (80091c8 <tcp_receive+0x888>)
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	899b      	ldrh	r3, [r3, #12]
 800918c:	b29c      	uxth	r4, r3
 800918e:	2001      	movs	r0, #1
 8009190:	f7fa fce6 	bl	8003b60 <lwip_htons>
 8009194:	4603      	mov	r3, r0
 8009196:	461a      	mov	r2, r3
 8009198:	4b0b      	ldr	r3, [pc, #44]	@ (80091c8 <tcp_receive+0x888>)
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	4322      	orrs	r2, r4
 800919e:	b292      	uxth	r2, r2
 80091a0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80091a2:	4b09      	ldr	r3, [pc, #36]	@ (80091c8 <tcp_receive+0x888>)
 80091a4:	891c      	ldrh	r4, [r3, #8]
 80091a6:	4b08      	ldr	r3, [pc, #32]	@ (80091c8 <tcp_receive+0x888>)
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	899b      	ldrh	r3, [r3, #12]
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fa fcd6 	bl	8003b60 <lwip_htons>
 80091b4:	4603      	mov	r3, r0
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	f003 0303 	and.w	r3, r3, #3
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00d      	beq.n	80091dc <tcp_receive+0x89c>
 80091c0:	2301      	movs	r3, #1
 80091c2:	e00c      	b.n	80091de <tcp_receive+0x89e>
 80091c4:	2000827c 	.word	0x2000827c
 80091c8:	2000825c 	.word	0x2000825c
 80091cc:	20008286 	.word	0x20008286
 80091d0:	08010648 	.word	0x08010648
 80091d4:	080109f0 	.word	0x080109f0
 80091d8:	08010694 	.word	0x08010694
 80091dc:	2300      	movs	r3, #0
 80091de:	4423      	add	r3, r4
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	4b98      	ldr	r3, [pc, #608]	@ (8009444 <tcp_receive+0xb04>)
 80091e4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80091e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091e8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80091ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80091f0:	6938      	ldr	r0, [r7, #16]
 80091f2:	f7fd fc52 	bl	8006a9a <tcp_seg_free>
            while (next &&
 80091f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00e      	beq.n	800921a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80091fc:	4b91      	ldr	r3, [pc, #580]	@ (8009444 <tcp_receive+0xb04>)
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	461a      	mov	r2, r3
 8009202:	4b91      	ldr	r3, [pc, #580]	@ (8009448 <tcp_receive+0xb08>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	441a      	add	r2, r3
 8009208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009210:	8909      	ldrh	r1, [r1, #8]
 8009212:	440b      	add	r3, r1
 8009214:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009216:	2b00      	cmp	r3, #0
 8009218:	da9b      	bge.n	8009152 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800921a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800921c:	2b00      	cmp	r3, #0
 800921e:	d059      	beq.n	80092d4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009220:	4b88      	ldr	r3, [pc, #544]	@ (8009444 <tcp_receive+0xb04>)
 8009222:	881b      	ldrh	r3, [r3, #0]
 8009224:	461a      	mov	r2, r3
 8009226:	4b88      	ldr	r3, [pc, #544]	@ (8009448 <tcp_receive+0xb08>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	441a      	add	r2, r3
 800922c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009234:	2b00      	cmp	r3, #0
 8009236:	dd4d      	ble.n	80092d4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	b29a      	uxth	r2, r3
 8009240:	4b81      	ldr	r3, [pc, #516]	@ (8009448 <tcp_receive+0xb08>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	b29b      	uxth	r3, r3
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	b29a      	uxth	r2, r3
 800924a:	4b80      	ldr	r3, [pc, #512]	@ (800944c <tcp_receive+0xb0c>)
 800924c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800924e:	4b7f      	ldr	r3, [pc, #508]	@ (800944c <tcp_receive+0xb0c>)
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	899b      	ldrh	r3, [r3, #12]
 8009254:	b29b      	uxth	r3, r3
 8009256:	4618      	mov	r0, r3
 8009258:	f7fa fc82 	bl	8003b60 <lwip_htons>
 800925c:	4603      	mov	r3, r0
 800925e:	b2db      	uxtb	r3, r3
 8009260:	f003 0302 	and.w	r3, r3, #2
 8009264:	2b00      	cmp	r3, #0
 8009266:	d005      	beq.n	8009274 <tcp_receive+0x934>
                inseg.len -= 1;
 8009268:	4b78      	ldr	r3, [pc, #480]	@ (800944c <tcp_receive+0xb0c>)
 800926a:	891b      	ldrh	r3, [r3, #8]
 800926c:	3b01      	subs	r3, #1
 800926e:	b29a      	uxth	r2, r3
 8009270:	4b76      	ldr	r3, [pc, #472]	@ (800944c <tcp_receive+0xb0c>)
 8009272:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009274:	4b75      	ldr	r3, [pc, #468]	@ (800944c <tcp_receive+0xb0c>)
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	4a74      	ldr	r2, [pc, #464]	@ (800944c <tcp_receive+0xb0c>)
 800927a:	8912      	ldrh	r2, [r2, #8]
 800927c:	4611      	mov	r1, r2
 800927e:	4618      	mov	r0, r3
 8009280:	f7fb fe46 	bl	8004f10 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009284:	4b71      	ldr	r3, [pc, #452]	@ (800944c <tcp_receive+0xb0c>)
 8009286:	891c      	ldrh	r4, [r3, #8]
 8009288:	4b70      	ldr	r3, [pc, #448]	@ (800944c <tcp_receive+0xb0c>)
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	899b      	ldrh	r3, [r3, #12]
 800928e:	b29b      	uxth	r3, r3
 8009290:	4618      	mov	r0, r3
 8009292:	f7fa fc65 	bl	8003b60 <lwip_htons>
 8009296:	4603      	mov	r3, r0
 8009298:	b2db      	uxtb	r3, r3
 800929a:	f003 0303 	and.w	r3, r3, #3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d001      	beq.n	80092a6 <tcp_receive+0x966>
 80092a2:	2301      	movs	r3, #1
 80092a4:	e000      	b.n	80092a8 <tcp_receive+0x968>
 80092a6:	2300      	movs	r3, #0
 80092a8:	4423      	add	r3, r4
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	4b65      	ldr	r3, [pc, #404]	@ (8009444 <tcp_receive+0xb04>)
 80092ae:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80092b0:	4b64      	ldr	r3, [pc, #400]	@ (8009444 <tcp_receive+0xb04>)
 80092b2:	881b      	ldrh	r3, [r3, #0]
 80092b4:	461a      	mov	r2, r3
 80092b6:	4b64      	ldr	r3, [pc, #400]	@ (8009448 <tcp_receive+0xb08>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	441a      	add	r2, r3
 80092bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d006      	beq.n	80092d4 <tcp_receive+0x994>
 80092c6:	4b62      	ldr	r3, [pc, #392]	@ (8009450 <tcp_receive+0xb10>)
 80092c8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80092cc:	4961      	ldr	r1, [pc, #388]	@ (8009454 <tcp_receive+0xb14>)
 80092ce:	4862      	ldr	r0, [pc, #392]	@ (8009458 <tcp_receive+0xb18>)
 80092d0:	f005 f95c 	bl	800e58c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80092d8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80092da:	4b5a      	ldr	r3, [pc, #360]	@ (8009444 <tcp_receive+0xb04>)
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	461a      	mov	r2, r3
 80092e0:	4b59      	ldr	r3, [pc, #356]	@ (8009448 <tcp_receive+0xb08>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	441a      	add	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80092ee:	4b55      	ldr	r3, [pc, #340]	@ (8009444 <tcp_receive+0xb04>)
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d206      	bcs.n	8009304 <tcp_receive+0x9c4>
 80092f6:	4b56      	ldr	r3, [pc, #344]	@ (8009450 <tcp_receive+0xb10>)
 80092f8:	f240 6207 	movw	r2, #1543	@ 0x607
 80092fc:	4957      	ldr	r1, [pc, #348]	@ (800945c <tcp_receive+0xb1c>)
 80092fe:	4856      	ldr	r0, [pc, #344]	@ (8009458 <tcp_receive+0xb18>)
 8009300:	f005 f944 	bl	800e58c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009308:	4b4e      	ldr	r3, [pc, #312]	@ (8009444 <tcp_receive+0xb04>)
 800930a:	881b      	ldrh	r3, [r3, #0]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	b29a      	uxth	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7fc fe99 	bl	800604c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800931a:	4b4c      	ldr	r3, [pc, #304]	@ (800944c <tcp_receive+0xb0c>)
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	891b      	ldrh	r3, [r3, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d006      	beq.n	8009332 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009324:	4b49      	ldr	r3, [pc, #292]	@ (800944c <tcp_receive+0xb0c>)
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	4a4d      	ldr	r2, [pc, #308]	@ (8009460 <tcp_receive+0xb20>)
 800932a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800932c:	4b47      	ldr	r3, [pc, #284]	@ (800944c <tcp_receive+0xb0c>)
 800932e:	2200      	movs	r2, #0
 8009330:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009332:	4b46      	ldr	r3, [pc, #280]	@ (800944c <tcp_receive+0xb0c>)
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	899b      	ldrh	r3, [r3, #12]
 8009338:	b29b      	uxth	r3, r3
 800933a:	4618      	mov	r0, r3
 800933c:	f7fa fc10 	bl	8003b60 <lwip_htons>
 8009340:	4603      	mov	r3, r0
 8009342:	b2db      	uxtb	r3, r3
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 80b8 	beq.w	80094be <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800934e:	4b45      	ldr	r3, [pc, #276]	@ (8009464 <tcp_receive+0xb24>)
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	f043 0320 	orr.w	r3, r3, #32
 8009356:	b2da      	uxtb	r2, r3
 8009358:	4b42      	ldr	r3, [pc, #264]	@ (8009464 <tcp_receive+0xb24>)
 800935a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800935c:	e0af      	b.n	80094be <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009362:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	4a36      	ldr	r2, [pc, #216]	@ (8009448 <tcp_receive+0xb08>)
 800936e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	891b      	ldrh	r3, [r3, #8]
 8009374:	461c      	mov	r4, r3
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	899b      	ldrh	r3, [r3, #12]
 800937c:	b29b      	uxth	r3, r3
 800937e:	4618      	mov	r0, r3
 8009380:	f7fa fbee 	bl	8003b60 <lwip_htons>
 8009384:	4603      	mov	r3, r0
 8009386:	b2db      	uxtb	r3, r3
 8009388:	f003 0303 	and.w	r3, r3, #3
 800938c:	2b00      	cmp	r3, #0
 800938e:	d001      	beq.n	8009394 <tcp_receive+0xa54>
 8009390:	2301      	movs	r3, #1
 8009392:	e000      	b.n	8009396 <tcp_receive+0xa56>
 8009394:	2300      	movs	r3, #0
 8009396:	191a      	adds	r2, r3, r4
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800939c:	441a      	add	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093a6:	461c      	mov	r4, r3
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	891b      	ldrh	r3, [r3, #8]
 80093ac:	461d      	mov	r5, r3
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	899b      	ldrh	r3, [r3, #12]
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fa fbd2 	bl	8003b60 <lwip_htons>
 80093bc:	4603      	mov	r3, r0
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	f003 0303 	and.w	r3, r3, #3
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <tcp_receive+0xa8c>
 80093c8:	2301      	movs	r3, #1
 80093ca:	e000      	b.n	80093ce <tcp_receive+0xa8e>
 80093cc:	2300      	movs	r3, #0
 80093ce:	442b      	add	r3, r5
 80093d0:	429c      	cmp	r4, r3
 80093d2:	d206      	bcs.n	80093e2 <tcp_receive+0xaa2>
 80093d4:	4b1e      	ldr	r3, [pc, #120]	@ (8009450 <tcp_receive+0xb10>)
 80093d6:	f240 622b 	movw	r2, #1579	@ 0x62b
 80093da:	4923      	ldr	r1, [pc, #140]	@ (8009468 <tcp_receive+0xb28>)
 80093dc:	481e      	ldr	r0, [pc, #120]	@ (8009458 <tcp_receive+0xb18>)
 80093de:	f005 f8d5 	bl	800e58c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	891b      	ldrh	r3, [r3, #8]
 80093e6:	461c      	mov	r4, r3
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	899b      	ldrh	r3, [r3, #12]
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fa fbb5 	bl	8003b60 <lwip_htons>
 80093f6:	4603      	mov	r3, r0
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	f003 0303 	and.w	r3, r3, #3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <tcp_receive+0xac6>
 8009402:	2301      	movs	r3, #1
 8009404:	e000      	b.n	8009408 <tcp_receive+0xac8>
 8009406:	2300      	movs	r3, #0
 8009408:	1919      	adds	r1, r3, r4
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800940e:	b28b      	uxth	r3, r1
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	b29a      	uxth	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7fc fe17 	bl	800604c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	891b      	ldrh	r3, [r3, #8]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d028      	beq.n	800947a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009428:	4b0d      	ldr	r3, [pc, #52]	@ (8009460 <tcp_receive+0xb20>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d01d      	beq.n	800946c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009430:	4b0b      	ldr	r3, [pc, #44]	@ (8009460 <tcp_receive+0xb20>)
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	4619      	mov	r1, r3
 800943a:	4610      	mov	r0, r2
 800943c:	f7fb ffb0 	bl	80053a0 <pbuf_cat>
 8009440:	e018      	b.n	8009474 <tcp_receive+0xb34>
 8009442:	bf00      	nop
 8009444:	20008286 	.word	0x20008286
 8009448:	2000827c 	.word	0x2000827c
 800944c:	2000825c 	.word	0x2000825c
 8009450:	08010648 	.word	0x08010648
 8009454:	08010a28 	.word	0x08010a28
 8009458:	08010694 	.word	0x08010694
 800945c:	08010a64 	.word	0x08010a64
 8009460:	2000828c 	.word	0x2000828c
 8009464:	20008289 	.word	0x20008289
 8009468:	08010a84 	.word	0x08010a84
            } else {
              recv_data = cseg->p;
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	4a70      	ldr	r2, [pc, #448]	@ (8009634 <tcp_receive+0xcf4>)
 8009472:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2200      	movs	r2, #0
 8009478:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	899b      	ldrh	r3, [r3, #12]
 8009480:	b29b      	uxth	r3, r3
 8009482:	4618      	mov	r0, r3
 8009484:	f7fa fb6c 	bl	8003b60 <lwip_htons>
 8009488:	4603      	mov	r3, r0
 800948a:	b2db      	uxtb	r3, r3
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00d      	beq.n	80094b0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009494:	4b68      	ldr	r3, [pc, #416]	@ (8009638 <tcp_receive+0xcf8>)
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	f043 0320 	orr.w	r3, r3, #32
 800949c:	b2da      	uxtb	r2, r3
 800949e:	4b66      	ldr	r3, [pc, #408]	@ (8009638 <tcp_receive+0xcf8>)
 80094a0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	7d1b      	ldrb	r3, [r3, #20]
 80094a6:	2b04      	cmp	r3, #4
 80094a8:	d102      	bne.n	80094b0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2207      	movs	r2, #7
 80094ae:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80094b8:	68b8      	ldr	r0, [r7, #8]
 80094ba:	f7fd faee 	bl	8006a9a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d008      	beq.n	80094d8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80094d2:	429a      	cmp	r2, r3
 80094d4:	f43f af43 	beq.w	800935e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	8b5b      	ldrh	r3, [r3, #26]
 80094dc:	f003 0301 	and.w	r3, r3, #1
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00e      	beq.n	8009502 <tcp_receive+0xbc2>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	8b5b      	ldrh	r3, [r3, #26]
 80094e8:	f023 0301 	bic.w	r3, r3, #1
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	835a      	strh	r2, [r3, #26]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	8b5b      	ldrh	r3, [r3, #26]
 80094f6:	f043 0302 	orr.w	r3, r3, #2
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009500:	e187      	b.n	8009812 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	8b5b      	ldrh	r3, [r3, #26]
 8009506:	f043 0301 	orr.w	r3, r3, #1
 800950a:	b29a      	uxth	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009510:	e17f      	b.n	8009812 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009516:	2b00      	cmp	r3, #0
 8009518:	d106      	bne.n	8009528 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800951a:	4848      	ldr	r0, [pc, #288]	@ (800963c <tcp_receive+0xcfc>)
 800951c:	f7fd faf4 	bl	8006b08 <tcp_seg_copy>
 8009520:	4602      	mov	r2, r0
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	675a      	str	r2, [r3, #116]	@ 0x74
 8009526:	e16c      	b.n	8009802 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009528:	2300      	movs	r3, #0
 800952a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009530:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009532:	e156      	b.n	80097e2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8009534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	685a      	ldr	r2, [r3, #4]
 800953a:	4b41      	ldr	r3, [pc, #260]	@ (8009640 <tcp_receive+0xd00>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	429a      	cmp	r2, r3
 8009540:	d11d      	bne.n	800957e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009542:	4b3e      	ldr	r3, [pc, #248]	@ (800963c <tcp_receive+0xcfc>)
 8009544:	891a      	ldrh	r2, [r3, #8]
 8009546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009548:	891b      	ldrh	r3, [r3, #8]
 800954a:	429a      	cmp	r2, r3
 800954c:	f240 814e 	bls.w	80097ec <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009550:	483a      	ldr	r0, [pc, #232]	@ (800963c <tcp_receive+0xcfc>)
 8009552:	f7fd fad9 	bl	8006b08 <tcp_seg_copy>
 8009556:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	f000 8148 	beq.w	80097f0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8009560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009562:	2b00      	cmp	r3, #0
 8009564:	d003      	beq.n	800956e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8009566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009568:	697a      	ldr	r2, [r7, #20]
 800956a:	601a      	str	r2, [r3, #0]
 800956c:	e002      	b.n	8009574 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009574:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009576:	6978      	ldr	r0, [r7, #20]
 8009578:	f7ff f8de 	bl	8008738 <tcp_oos_insert_segment>
                }
                break;
 800957c:	e138      	b.n	80097f0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800957e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009580:	2b00      	cmp	r3, #0
 8009582:	d117      	bne.n	80095b4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009584:	4b2e      	ldr	r3, [pc, #184]	@ (8009640 <tcp_receive+0xd00>)
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	da57      	bge.n	8009644 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009594:	4829      	ldr	r0, [pc, #164]	@ (800963c <tcp_receive+0xcfc>)
 8009596:	f7fd fab7 	bl	8006b08 <tcp_seg_copy>
 800959a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f000 8128 	beq.w	80097f4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	69ba      	ldr	r2, [r7, #24]
 80095a8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80095aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80095ac:	69b8      	ldr	r0, [r7, #24]
 80095ae:	f7ff f8c3 	bl	8008738 <tcp_oos_insert_segment>
                  }
                  break;
 80095b2:	e11f      	b.n	80097f4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80095b4:	4b22      	ldr	r3, [pc, #136]	@ (8009640 <tcp_receive+0xd00>)
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	1ad3      	subs	r3, r2, r3
 80095c0:	3b01      	subs	r3, #1
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	db3e      	blt.n	8009644 <tcp_receive+0xd04>
 80095c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009640 <tcp_receive+0xd00>)
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	3301      	adds	r3, #1
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	dc35      	bgt.n	8009644 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80095d8:	4818      	ldr	r0, [pc, #96]	@ (800963c <tcp_receive+0xcfc>)
 80095da:	f7fd fa95 	bl	8006b08 <tcp_seg_copy>
 80095de:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f000 8108 	beq.w	80097f8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80095e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095f0:	8912      	ldrh	r2, [r2, #8]
 80095f2:	441a      	add	r2, r3
 80095f4:	4b12      	ldr	r3, [pc, #72]	@ (8009640 <tcp_receive+0xd00>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	dd12      	ble.n	8009624 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80095fe:	4b10      	ldr	r3, [pc, #64]	@ (8009640 <tcp_receive+0xd00>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	b29a      	uxth	r2, r3
 8009604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	b29b      	uxth	r3, r3
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	b29a      	uxth	r2, r3
 8009610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009612:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009616:	685a      	ldr	r2, [r3, #4]
 8009618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800961a:	891b      	ldrh	r3, [r3, #8]
 800961c:	4619      	mov	r1, r3
 800961e:	4610      	mov	r0, r2
 8009620:	f7fb fc76 	bl	8004f10 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009626:	69fa      	ldr	r2, [r7, #28]
 8009628:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800962a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800962c:	69f8      	ldr	r0, [r7, #28]
 800962e:	f7ff f883 	bl	8008738 <tcp_oos_insert_segment>
                  }
                  break;
 8009632:	e0e1      	b.n	80097f8 <tcp_receive+0xeb8>
 8009634:	2000828c 	.word	0x2000828c
 8009638:	20008289 	.word	0x20008289
 800963c:	2000825c 	.word	0x2000825c
 8009640:	2000827c 	.word	0x2000827c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009646:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	f040 80c5 	bne.w	80097dc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009652:	4b7f      	ldr	r3, [pc, #508]	@ (8009850 <tcp_receive+0xf10>)
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800965e:	2b00      	cmp	r3, #0
 8009660:	f340 80bc 	ble.w	80097dc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	899b      	ldrh	r3, [r3, #12]
 800966a:	b29b      	uxth	r3, r3
 800966c:	4618      	mov	r0, r3
 800966e:	f7fa fa77 	bl	8003b60 <lwip_htons>
 8009672:	4603      	mov	r3, r0
 8009674:	b2db      	uxtb	r3, r3
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	2b00      	cmp	r3, #0
 800967c:	f040 80be 	bne.w	80097fc <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009680:	4874      	ldr	r0, [pc, #464]	@ (8009854 <tcp_receive+0xf14>)
 8009682:	f7fd fa41 	bl	8006b08 <tcp_seg_copy>
 8009686:	4602      	mov	r2, r0
 8009688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800968c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 80b5 	beq.w	8009800 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800969e:	8912      	ldrh	r2, [r2, #8]
 80096a0:	441a      	add	r2, r3
 80096a2:	4b6b      	ldr	r3, [pc, #428]	@ (8009850 <tcp_receive+0xf10>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	dd12      	ble.n	80096d2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80096ac:	4b68      	ldr	r3, [pc, #416]	@ (8009850 <tcp_receive+0xf10>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	b29a      	uxth	r2, r3
 80096be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80096c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c8:	891b      	ldrh	r3, [r3, #8]
 80096ca:	4619      	mov	r1, r3
 80096cc:	4610      	mov	r0, r2
 80096ce:	f7fb fc1f 	bl	8004f10 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80096d2:	4b61      	ldr	r3, [pc, #388]	@ (8009858 <tcp_receive+0xf18>)
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	461a      	mov	r2, r3
 80096d8:	4b5d      	ldr	r3, [pc, #372]	@ (8009850 <tcp_receive+0xf10>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	441a      	add	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80096e6:	440b      	add	r3, r1
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f340 8088 	ble.w	8009800 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80096f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	899b      	ldrh	r3, [r3, #12]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fa fa30 	bl	8003b60 <lwip_htons>
 8009700:	4603      	mov	r3, r0
 8009702:	b2db      	uxtb	r3, r3
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d021      	beq.n	8009750 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800970c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	899b      	ldrh	r3, [r3, #12]
 8009714:	b29b      	uxth	r3, r3
 8009716:	b21b      	sxth	r3, r3
 8009718:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800971c:	b21c      	sxth	r4, r3
 800971e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	899b      	ldrh	r3, [r3, #12]
 8009726:	b29b      	uxth	r3, r3
 8009728:	4618      	mov	r0, r3
 800972a:	f7fa fa19 	bl	8003b60 <lwip_htons>
 800972e:	4603      	mov	r3, r0
 8009730:	b2db      	uxtb	r3, r3
 8009732:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8009736:	b29b      	uxth	r3, r3
 8009738:	4618      	mov	r0, r3
 800973a:	f7fa fa11 	bl	8003b60 <lwip_htons>
 800973e:	4603      	mov	r3, r0
 8009740:	b21b      	sxth	r3, r3
 8009742:	4323      	orrs	r3, r4
 8009744:	b21a      	sxth	r2, r3
 8009746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	b292      	uxth	r2, r2
 800974e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009754:	b29a      	uxth	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800975a:	4413      	add	r3, r2
 800975c:	b299      	uxth	r1, r3
 800975e:	4b3c      	ldr	r3, [pc, #240]	@ (8009850 <tcp_receive+0xf10>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	b29a      	uxth	r2, r3
 8009764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	1a8a      	subs	r2, r1, r2
 800976a:	b292      	uxth	r2, r2
 800976c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800976e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	685a      	ldr	r2, [r3, #4]
 8009774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	891b      	ldrh	r3, [r3, #8]
 800977a:	4619      	mov	r1, r3
 800977c:	4610      	mov	r0, r2
 800977e:	f7fb fbc7 	bl	8004f10 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	891c      	ldrh	r4, [r3, #8]
 8009788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	899b      	ldrh	r3, [r3, #12]
 8009790:	b29b      	uxth	r3, r3
 8009792:	4618      	mov	r0, r3
 8009794:	f7fa f9e4 	bl	8003b60 <lwip_htons>
 8009798:	4603      	mov	r3, r0
 800979a:	b2db      	uxtb	r3, r3
 800979c:	f003 0303 	and.w	r3, r3, #3
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d001      	beq.n	80097a8 <tcp_receive+0xe68>
 80097a4:	2301      	movs	r3, #1
 80097a6:	e000      	b.n	80097aa <tcp_receive+0xe6a>
 80097a8:	2300      	movs	r3, #0
 80097aa:	4423      	add	r3, r4
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	4b2a      	ldr	r3, [pc, #168]	@ (8009858 <tcp_receive+0xf18>)
 80097b0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80097b2:	4b29      	ldr	r3, [pc, #164]	@ (8009858 <tcp_receive+0xf18>)
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	461a      	mov	r2, r3
 80097b8:	4b25      	ldr	r3, [pc, #148]	@ (8009850 <tcp_receive+0xf10>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	441a      	add	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c2:	6879      	ldr	r1, [r7, #4]
 80097c4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80097c6:	440b      	add	r3, r1
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d019      	beq.n	8009800 <tcp_receive+0xec0>
 80097cc:	4b23      	ldr	r3, [pc, #140]	@ (800985c <tcp_receive+0xf1c>)
 80097ce:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80097d2:	4923      	ldr	r1, [pc, #140]	@ (8009860 <tcp_receive+0xf20>)
 80097d4:	4823      	ldr	r0, [pc, #140]	@ (8009864 <tcp_receive+0xf24>)
 80097d6:	f004 fed9 	bl	800e58c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80097da:	e011      	b.n	8009800 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80097dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80097e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f47f aea5 	bne.w	8009534 <tcp_receive+0xbf4>
 80097ea:	e00a      	b.n	8009802 <tcp_receive+0xec2>
                break;
 80097ec:	bf00      	nop
 80097ee:	e008      	b.n	8009802 <tcp_receive+0xec2>
                break;
 80097f0:	bf00      	nop
 80097f2:	e006      	b.n	8009802 <tcp_receive+0xec2>
                  break;
 80097f4:	bf00      	nop
 80097f6:	e004      	b.n	8009802 <tcp_receive+0xec2>
                  break;
 80097f8:	bf00      	nop
 80097fa:	e002      	b.n	8009802 <tcp_receive+0xec2>
                  break;
 80097fc:	bf00      	nop
 80097fe:	e000      	b.n	8009802 <tcp_receive+0xec2>
                break;
 8009800:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f001 fe88 	bl	800b518 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009808:	e003      	b.n	8009812 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f001 fe84 	bl	800b518 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009810:	e01a      	b.n	8009848 <tcp_receive+0xf08>
 8009812:	e019      	b.n	8009848 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009814:	4b0e      	ldr	r3, [pc, #56]	@ (8009850 <tcp_receive+0xf10>)
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800981c:	1ad3      	subs	r3, r2, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	db0a      	blt.n	8009838 <tcp_receive+0xef8>
 8009822:	4b0b      	ldr	r3, [pc, #44]	@ (8009850 <tcp_receive+0xf10>)
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800982a:	6879      	ldr	r1, [r7, #4]
 800982c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800982e:	440b      	add	r3, r1
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	3301      	adds	r3, #1
 8009834:	2b00      	cmp	r3, #0
 8009836:	dd07      	ble.n	8009848 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	8b5b      	ldrh	r3, [r3, #26]
 800983c:	f043 0302 	orr.w	r3, r3, #2
 8009840:	b29a      	uxth	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009846:	e7ff      	b.n	8009848 <tcp_receive+0xf08>
 8009848:	bf00      	nop
 800984a:	3750      	adds	r7, #80	@ 0x50
 800984c:	46bd      	mov	sp, r7
 800984e:	bdb0      	pop	{r4, r5, r7, pc}
 8009850:	2000827c 	.word	0x2000827c
 8009854:	2000825c 	.word	0x2000825c
 8009858:	20008286 	.word	0x20008286
 800985c:	08010648 	.word	0x08010648
 8009860:	080109f0 	.word	0x080109f0
 8009864:	08010694 	.word	0x08010694

08009868 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800986e:	4b15      	ldr	r3, [pc, #84]	@ (80098c4 <tcp_get_next_optbyte+0x5c>)
 8009870:	881b      	ldrh	r3, [r3, #0]
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	b291      	uxth	r1, r2
 8009876:	4a13      	ldr	r2, [pc, #76]	@ (80098c4 <tcp_get_next_optbyte+0x5c>)
 8009878:	8011      	strh	r1, [r2, #0]
 800987a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800987c:	4b12      	ldr	r3, [pc, #72]	@ (80098c8 <tcp_get_next_optbyte+0x60>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d004      	beq.n	800988e <tcp_get_next_optbyte+0x26>
 8009884:	4b11      	ldr	r3, [pc, #68]	@ (80098cc <tcp_get_next_optbyte+0x64>)
 8009886:	881b      	ldrh	r3, [r3, #0]
 8009888:	88fa      	ldrh	r2, [r7, #6]
 800988a:	429a      	cmp	r2, r3
 800988c:	d208      	bcs.n	80098a0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800988e:	4b10      	ldr	r3, [pc, #64]	@ (80098d0 <tcp_get_next_optbyte+0x68>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3314      	adds	r3, #20
 8009894:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009896:	88fb      	ldrh	r3, [r7, #6]
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	4413      	add	r3, r2
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	e00b      	b.n	80098b8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80098a0:	88fb      	ldrh	r3, [r7, #6]
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	4b09      	ldr	r3, [pc, #36]	@ (80098cc <tcp_get_next_optbyte+0x64>)
 80098a6:	881b      	ldrh	r3, [r3, #0]
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80098ae:	4b06      	ldr	r3, [pc, #24]	@ (80098c8 <tcp_get_next_optbyte+0x60>)
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	797b      	ldrb	r3, [r7, #5]
 80098b4:	4413      	add	r3, r2
 80098b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	20008278 	.word	0x20008278
 80098c8:	20008274 	.word	0x20008274
 80098cc:	20008272 	.word	0x20008272
 80098d0:	2000826c 	.word	0x2000826c

080098d4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d106      	bne.n	80098f0 <tcp_parseopt+0x1c>
 80098e2:	4b32      	ldr	r3, [pc, #200]	@ (80099ac <tcp_parseopt+0xd8>)
 80098e4:	f240 727d 	movw	r2, #1917	@ 0x77d
 80098e8:	4931      	ldr	r1, [pc, #196]	@ (80099b0 <tcp_parseopt+0xdc>)
 80098ea:	4832      	ldr	r0, [pc, #200]	@ (80099b4 <tcp_parseopt+0xe0>)
 80098ec:	f004 fe4e 	bl	800e58c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80098f0:	4b31      	ldr	r3, [pc, #196]	@ (80099b8 <tcp_parseopt+0xe4>)
 80098f2:	881b      	ldrh	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d056      	beq.n	80099a6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80098f8:	4b30      	ldr	r3, [pc, #192]	@ (80099bc <tcp_parseopt+0xe8>)
 80098fa:	2200      	movs	r2, #0
 80098fc:	801a      	strh	r2, [r3, #0]
 80098fe:	e046      	b.n	800998e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8009900:	f7ff ffb2 	bl	8009868 <tcp_get_next_optbyte>
 8009904:	4603      	mov	r3, r0
 8009906:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	2b02      	cmp	r3, #2
 800990c:	d006      	beq.n	800991c <tcp_parseopt+0x48>
 800990e:	2b02      	cmp	r3, #2
 8009910:	dc2a      	bgt.n	8009968 <tcp_parseopt+0x94>
 8009912:	2b00      	cmp	r3, #0
 8009914:	d042      	beq.n	800999c <tcp_parseopt+0xc8>
 8009916:	2b01      	cmp	r3, #1
 8009918:	d038      	beq.n	800998c <tcp_parseopt+0xb8>
 800991a:	e025      	b.n	8009968 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800991c:	f7ff ffa4 	bl	8009868 <tcp_get_next_optbyte>
 8009920:	4603      	mov	r3, r0
 8009922:	2b04      	cmp	r3, #4
 8009924:	d13c      	bne.n	80099a0 <tcp_parseopt+0xcc>
 8009926:	4b25      	ldr	r3, [pc, #148]	@ (80099bc <tcp_parseopt+0xe8>)
 8009928:	881b      	ldrh	r3, [r3, #0]
 800992a:	3301      	adds	r3, #1
 800992c:	4a22      	ldr	r2, [pc, #136]	@ (80099b8 <tcp_parseopt+0xe4>)
 800992e:	8812      	ldrh	r2, [r2, #0]
 8009930:	4293      	cmp	r3, r2
 8009932:	da35      	bge.n	80099a0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009934:	f7ff ff98 	bl	8009868 <tcp_get_next_optbyte>
 8009938:	4603      	mov	r3, r0
 800993a:	021b      	lsls	r3, r3, #8
 800993c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800993e:	f7ff ff93 	bl	8009868 <tcp_get_next_optbyte>
 8009942:	4603      	mov	r3, r0
 8009944:	461a      	mov	r2, r3
 8009946:	89bb      	ldrh	r3, [r7, #12]
 8009948:	4313      	orrs	r3, r2
 800994a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800994c:	89bb      	ldrh	r3, [r7, #12]
 800994e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8009952:	d804      	bhi.n	800995e <tcp_parseopt+0x8a>
 8009954:	89bb      	ldrh	r3, [r7, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <tcp_parseopt+0x8a>
 800995a:	89ba      	ldrh	r2, [r7, #12]
 800995c:	e001      	b.n	8009962 <tcp_parseopt+0x8e>
 800995e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8009966:	e012      	b.n	800998e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009968:	f7ff ff7e 	bl	8009868 <tcp_get_next_optbyte>
 800996c:	4603      	mov	r3, r0
 800996e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009970:	7afb      	ldrb	r3, [r7, #11]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d916      	bls.n	80099a4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009976:	7afb      	ldrb	r3, [r7, #11]
 8009978:	b29a      	uxth	r2, r3
 800997a:	4b10      	ldr	r3, [pc, #64]	@ (80099bc <tcp_parseopt+0xe8>)
 800997c:	881b      	ldrh	r3, [r3, #0]
 800997e:	4413      	add	r3, r2
 8009980:	b29b      	uxth	r3, r3
 8009982:	3b02      	subs	r3, #2
 8009984:	b29a      	uxth	r2, r3
 8009986:	4b0d      	ldr	r3, [pc, #52]	@ (80099bc <tcp_parseopt+0xe8>)
 8009988:	801a      	strh	r2, [r3, #0]
 800998a:	e000      	b.n	800998e <tcp_parseopt+0xba>
          break;
 800998c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800998e:	4b0b      	ldr	r3, [pc, #44]	@ (80099bc <tcp_parseopt+0xe8>)
 8009990:	881a      	ldrh	r2, [r3, #0]
 8009992:	4b09      	ldr	r3, [pc, #36]	@ (80099b8 <tcp_parseopt+0xe4>)
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	429a      	cmp	r2, r3
 8009998:	d3b2      	bcc.n	8009900 <tcp_parseopt+0x2c>
 800999a:	e004      	b.n	80099a6 <tcp_parseopt+0xd2>
          return;
 800999c:	bf00      	nop
 800999e:	e002      	b.n	80099a6 <tcp_parseopt+0xd2>
            return;
 80099a0:	bf00      	nop
 80099a2:	e000      	b.n	80099a6 <tcp_parseopt+0xd2>
            return;
 80099a4:	bf00      	nop
      }
    }
  }
}
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	08010648 	.word	0x08010648
 80099b0:	08010aac 	.word	0x08010aac
 80099b4:	08010694 	.word	0x08010694
 80099b8:	20008270 	.word	0x20008270
 80099bc:	20008278 	.word	0x20008278

080099c0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80099c0:	b480      	push	{r7}
 80099c2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80099c4:	4b05      	ldr	r3, [pc, #20]	@ (80099dc <tcp_trigger_input_pcb_close+0x1c>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f043 0310 	orr.w	r3, r3, #16
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	4b03      	ldr	r3, [pc, #12]	@ (80099dc <tcp_trigger_input_pcb_close+0x1c>)
 80099d0:	701a      	strb	r2, [r3, #0]
}
 80099d2:	bf00      	nop
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	20008289 	.word	0x20008289

080099e0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00a      	beq.n	8009a08 <tcp_route+0x28>
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	7a1b      	ldrb	r3, [r3, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d006      	beq.n	8009a08 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	7a1b      	ldrb	r3, [r3, #8]
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7fb f8ac 	bl	8004b5c <netif_get_by_index>
 8009a04:	4603      	mov	r3, r0
 8009a06:	e003      	b.n	8009a10 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f003 fad3 	bl	800cfb4 <ip4_route>
 8009a0e:	4603      	mov	r3, r0
  }
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009a18:	b590      	push	{r4, r7, lr}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	603b      	str	r3, [r7, #0]
 8009a24:	4613      	mov	r3, r2
 8009a26:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d105      	bne.n	8009a3a <tcp_create_segment+0x22>
 8009a2e:	4b43      	ldr	r3, [pc, #268]	@ (8009b3c <tcp_create_segment+0x124>)
 8009a30:	22a3      	movs	r2, #163	@ 0xa3
 8009a32:	4943      	ldr	r1, [pc, #268]	@ (8009b40 <tcp_create_segment+0x128>)
 8009a34:	4843      	ldr	r0, [pc, #268]	@ (8009b44 <tcp_create_segment+0x12c>)
 8009a36:	f004 fda9 	bl	800e58c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d105      	bne.n	8009a4c <tcp_create_segment+0x34>
 8009a40:	4b3e      	ldr	r3, [pc, #248]	@ (8009b3c <tcp_create_segment+0x124>)
 8009a42:	22a4      	movs	r2, #164	@ 0xa4
 8009a44:	4940      	ldr	r1, [pc, #256]	@ (8009b48 <tcp_create_segment+0x130>)
 8009a46:	483f      	ldr	r0, [pc, #252]	@ (8009b44 <tcp_create_segment+0x12c>)
 8009a48:	f004 fda0 	bl	800e58c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009a4c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	f003 0304 	and.w	r3, r3, #4
 8009a58:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009a5a:	2003      	movs	r0, #3
 8009a5c:	f7fa fcf8 	bl	8004450 <memp_malloc>
 8009a60:	6138      	str	r0, [r7, #16]
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d104      	bne.n	8009a72 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009a68:	68b8      	ldr	r0, [r7, #8]
 8009a6a:	f7fb fbd7 	bl	800521c <pbuf_free>
    return NULL;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	e060      	b.n	8009b34 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8009a78:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	68ba      	ldr	r2, [r7, #8]
 8009a84:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	891a      	ldrh	r2, [r3, #8]
 8009a8a:	7dfb      	ldrb	r3, [r7, #23]
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d205      	bcs.n	8009a9e <tcp_create_segment+0x86>
 8009a92:	4b2a      	ldr	r3, [pc, #168]	@ (8009b3c <tcp_create_segment+0x124>)
 8009a94:	22b0      	movs	r2, #176	@ 0xb0
 8009a96:	492d      	ldr	r1, [pc, #180]	@ (8009b4c <tcp_create_segment+0x134>)
 8009a98:	482a      	ldr	r0, [pc, #168]	@ (8009b44 <tcp_create_segment+0x12c>)
 8009a9a:	f004 fd77 	bl	800e58c <iprintf>
  seg->len = p->tot_len - optlen;
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	891a      	ldrh	r2, [r3, #8]
 8009aa2:	7dfb      	ldrb	r3, [r7, #23]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009aae:	2114      	movs	r1, #20
 8009ab0:	68b8      	ldr	r0, [r7, #8]
 8009ab2:	f7fb fb1d 	bl	80050f0 <pbuf_add_header>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d004      	beq.n	8009ac6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009abc:	6938      	ldr	r0, [r7, #16]
 8009abe:	f7fc ffec 	bl	8006a9a <tcp_seg_free>
    return NULL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	e036      	b.n	8009b34 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	8ada      	ldrh	r2, [r3, #22]
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	68dc      	ldr	r4, [r3, #12]
 8009ad8:	4610      	mov	r0, r2
 8009ada:	f7fa f841 	bl	8003b60 <lwip_htons>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8b1a      	ldrh	r2, [r3, #24]
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	68dc      	ldr	r4, [r3, #12]
 8009aea:	4610      	mov	r0, r2
 8009aec:	f7fa f838 	bl	8003b60 <lwip_htons>
 8009af0:	4603      	mov	r3, r0
 8009af2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	68dc      	ldr	r4, [r3, #12]
 8009af8:	6838      	ldr	r0, [r7, #0]
 8009afa:	f7fa f847 	bl	8003b8c <lwip_htonl>
 8009afe:	4603      	mov	r3, r0
 8009b00:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	089b      	lsrs	r3, r3, #2
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	3305      	adds	r3, #5
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	031b      	lsls	r3, r3, #12
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	4313      	orrs	r3, r2
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	68dc      	ldr	r4, [r3, #12]
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	f7fa f81f 	bl	8003b60 <lwip_htons>
 8009b22:	4603      	mov	r3, r0
 8009b24:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	749a      	strb	r2, [r3, #18]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	74da      	strb	r2, [r3, #19]
  return seg;
 8009b32:	693b      	ldr	r3, [r7, #16]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	371c      	adds	r7, #28
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd90      	pop	{r4, r7, pc}
 8009b3c:	08010ac8 	.word	0x08010ac8
 8009b40:	08010afc 	.word	0x08010afc
 8009b44:	08010b1c 	.word	0x08010b1c
 8009b48:	08010b44 	.word	0x08010b44
 8009b4c:	08010b68 	.word	0x08010b68

08009b50 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	607b      	str	r3, [r7, #4]
 8009b58:	4603      	mov	r3, r0
 8009b5a:	73fb      	strb	r3, [r7, #15]
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	81bb      	strh	r3, [r7, #12]
 8009b60:	4613      	mov	r3, r2
 8009b62:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8009b64:	89bb      	ldrh	r3, [r7, #12]
 8009b66:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d105      	bne.n	8009b7a <tcp_pbuf_prealloc+0x2a>
 8009b6e:	4b30      	ldr	r3, [pc, #192]	@ (8009c30 <tcp_pbuf_prealloc+0xe0>)
 8009b70:	22e8      	movs	r2, #232	@ 0xe8
 8009b72:	4930      	ldr	r1, [pc, #192]	@ (8009c34 <tcp_pbuf_prealloc+0xe4>)
 8009b74:	4830      	ldr	r0, [pc, #192]	@ (8009c38 <tcp_pbuf_prealloc+0xe8>)
 8009b76:	f004 fd09 	bl	800e58c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d105      	bne.n	8009b8c <tcp_pbuf_prealloc+0x3c>
 8009b80:	4b2b      	ldr	r3, [pc, #172]	@ (8009c30 <tcp_pbuf_prealloc+0xe0>)
 8009b82:	22e9      	movs	r2, #233	@ 0xe9
 8009b84:	492d      	ldr	r1, [pc, #180]	@ (8009c3c <tcp_pbuf_prealloc+0xec>)
 8009b86:	482c      	ldr	r0, [pc, #176]	@ (8009c38 <tcp_pbuf_prealloc+0xe8>)
 8009b88:	f004 fd00 	bl	800e58c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009b8c:	89ba      	ldrh	r2, [r7, #12]
 8009b8e:	897b      	ldrh	r3, [r7, #10]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d221      	bcs.n	8009bd8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009b94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009b98:	f003 0302 	and.w	r3, r3, #2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d111      	bne.n	8009bc4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8009ba0:	6a3b      	ldr	r3, [r7, #32]
 8009ba2:	8b5b      	ldrh	r3, [r3, #26]
 8009ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d115      	bne.n	8009bd8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8009bac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d007      	beq.n	8009bc4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d103      	bne.n	8009bc4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d009      	beq.n	8009bd8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009bc4:	89bb      	ldrh	r3, [r7, #12]
 8009bc6:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8009bca:	f023 0203 	bic.w	r2, r3, #3
 8009bce:	897b      	ldrh	r3, [r7, #10]
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	bf28      	it	cs
 8009bd4:	4613      	movcs	r3, r2
 8009bd6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009bd8:	8af9      	ldrh	r1, [r7, #22]
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
 8009bdc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fb f837 	bl	8004c54 <pbuf_alloc>
 8009be6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d101      	bne.n	8009bf2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	e019      	b.n	8009c26 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d006      	beq.n	8009c08 <tcp_pbuf_prealloc+0xb8>
 8009bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8009c30 <tcp_pbuf_prealloc+0xe0>)
 8009bfc:	f240 120b 	movw	r2, #267	@ 0x10b
 8009c00:	490f      	ldr	r1, [pc, #60]	@ (8009c40 <tcp_pbuf_prealloc+0xf0>)
 8009c02:	480d      	ldr	r0, [pc, #52]	@ (8009c38 <tcp_pbuf_prealloc+0xe8>)
 8009c04:	f004 fcc2 	bl	800e58c <iprintf>
  *oversize = p->len - length;
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	895a      	ldrh	r2, [r3, #10]
 8009c0c:	89bb      	ldrh	r3, [r7, #12]
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	89ba      	ldrh	r2, [r7, #12]
 8009c1a:	811a      	strh	r2, [r3, #8]
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	891a      	ldrh	r2, [r3, #8]
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	815a      	strh	r2, [r3, #10]
  return p;
 8009c24:	693b      	ldr	r3, [r7, #16]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3718      	adds	r7, #24
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	08010ac8 	.word	0x08010ac8
 8009c34:	08010b80 	.word	0x08010b80
 8009c38:	08010b1c 	.word	0x08010b1c
 8009c3c:	08010ba4 	.word	0x08010ba4
 8009c40:	08010bc4 	.word	0x08010bc4

08009c44 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d106      	bne.n	8009c64 <tcp_write_checks+0x20>
 8009c56:	4b33      	ldr	r3, [pc, #204]	@ (8009d24 <tcp_write_checks+0xe0>)
 8009c58:	f240 1233 	movw	r2, #307	@ 0x133
 8009c5c:	4932      	ldr	r1, [pc, #200]	@ (8009d28 <tcp_write_checks+0xe4>)
 8009c5e:	4833      	ldr	r0, [pc, #204]	@ (8009d2c <tcp_write_checks+0xe8>)
 8009c60:	f004 fc94 	bl	800e58c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	7d1b      	ldrb	r3, [r3, #20]
 8009c68:	2b04      	cmp	r3, #4
 8009c6a:	d00e      	beq.n	8009c8a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8009c70:	2b07      	cmp	r3, #7
 8009c72:	d00a      	beq.n	8009c8a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d006      	beq.n	8009c8a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8009c80:	2b03      	cmp	r3, #3
 8009c82:	d002      	beq.n	8009c8a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8009c84:	f06f 030a 	mvn.w	r3, #10
 8009c88:	e048      	b.n	8009d1c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8009c8a:	887b      	ldrh	r3, [r7, #2]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d101      	bne.n	8009c94 <tcp_write_checks+0x50>
    return ERR_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	e043      	b.n	8009d1c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009c9a:	887a      	ldrh	r2, [r7, #2]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d909      	bls.n	8009cb4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	8b5b      	ldrh	r3, [r3, #26]
 8009ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8009cae:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb2:	e033      	b.n	8009d1c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009cba:	2b08      	cmp	r3, #8
 8009cbc:	d909      	bls.n	8009cd2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	8b5b      	ldrh	r3, [r3, #26]
 8009cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8009ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8009cd0:	e024      	b.n	8009d1c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00f      	beq.n	8009cfc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d11a      	bne.n	8009d1a <tcp_write_checks+0xd6>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d116      	bne.n	8009d1a <tcp_write_checks+0xd6>
 8009cec:	4b0d      	ldr	r3, [pc, #52]	@ (8009d24 <tcp_write_checks+0xe0>)
 8009cee:	f240 1255 	movw	r2, #341	@ 0x155
 8009cf2:	490f      	ldr	r1, [pc, #60]	@ (8009d30 <tcp_write_checks+0xec>)
 8009cf4:	480d      	ldr	r0, [pc, #52]	@ (8009d2c <tcp_write_checks+0xe8>)
 8009cf6:	f004 fc49 	bl	800e58c <iprintf>
 8009cfa:	e00e      	b.n	8009d1a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d103      	bne.n	8009d0c <tcp_write_checks+0xc8>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d006      	beq.n	8009d1a <tcp_write_checks+0xd6>
 8009d0c:	4b05      	ldr	r3, [pc, #20]	@ (8009d24 <tcp_write_checks+0xe0>)
 8009d0e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8009d12:	4908      	ldr	r1, [pc, #32]	@ (8009d34 <tcp_write_checks+0xf0>)
 8009d14:	4805      	ldr	r0, [pc, #20]	@ (8009d2c <tcp_write_checks+0xe8>)
 8009d16:	f004 fc39 	bl	800e58c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	08010ac8 	.word	0x08010ac8
 8009d28:	08010bd8 	.word	0x08010bd8
 8009d2c:	08010b1c 	.word	0x08010b1c
 8009d30:	08010bf8 	.word	0x08010bf8
 8009d34:	08010c34 	.word	0x08010c34

08009d38 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8009d38:	b590      	push	{r4, r7, lr}
 8009d3a:	b09b      	sub	sp, #108	@ 0x6c
 8009d3c:	af04      	add	r7, sp, #16
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	4611      	mov	r1, r2
 8009d44:	461a      	mov	r2, r3
 8009d46:	460b      	mov	r3, r1
 8009d48:	80fb      	strh	r3, [r7, #6]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009d52:	2300      	movs	r3, #0
 8009d54:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d56:	2300      	movs	r3, #0
 8009d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d5e:	2300      	movs	r3, #0
 8009d60:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8009d62:	2300      	movs	r3, #0
 8009d64:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8009d72:	2300      	movs	r3, #0
 8009d74:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8009d76:	2300      	movs	r3, #0
 8009d78:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d109      	bne.n	8009d94 <tcp_write+0x5c>
 8009d80:	4ba4      	ldr	r3, [pc, #656]	@ (800a014 <tcp_write+0x2dc>)
 8009d82:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8009d86:	49a4      	ldr	r1, [pc, #656]	@ (800a018 <tcp_write+0x2e0>)
 8009d88:	48a4      	ldr	r0, [pc, #656]	@ (800a01c <tcp_write+0x2e4>)
 8009d8a:	f004 fbff 	bl	800e58c <iprintf>
 8009d8e:	f06f 030f 	mvn.w	r3, #15
 8009d92:	e32a      	b.n	800a3ea <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d9a:	085b      	lsrs	r3, r3, #1
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009da2:	4293      	cmp	r3, r2
 8009da4:	bf28      	it	cs
 8009da6:	4613      	movcs	r3, r2
 8009da8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8009daa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d102      	bne.n	8009db6 <tcp_write+0x7e>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009db4:	e000      	b.n	8009db8 <tcp_write+0x80>
 8009db6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009db8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d109      	bne.n	8009dd4 <tcp_write+0x9c>
 8009dc0:	4b94      	ldr	r3, [pc, #592]	@ (800a014 <tcp_write+0x2dc>)
 8009dc2:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8009dc6:	4996      	ldr	r1, [pc, #600]	@ (800a020 <tcp_write+0x2e8>)
 8009dc8:	4894      	ldr	r0, [pc, #592]	@ (800a01c <tcp_write+0x2e4>)
 8009dca:	f004 fbdf 	bl	800e58c <iprintf>
 8009dce:	f06f 030f 	mvn.w	r3, #15
 8009dd2:	e30a      	b.n	800a3ea <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8009dd4:	88fb      	ldrh	r3, [r7, #6]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f7ff ff33 	bl	8009c44 <tcp_write_checks>
 8009dde:	4603      	mov	r3, r0
 8009de0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8009de4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <tcp_write+0xba>
    return err;
 8009dec:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8009df0:	e2fb      	b.n	800a3ea <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009df8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f000 80f6 	beq.w	8009ff8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e10:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e12:	e002      	b.n	8009e1a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8009e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009e1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1f8      	bne.n	8009e14 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8009e22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e24:	7a9b      	ldrb	r3, [r3, #10]
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	f003 0304 	and.w	r3, r3, #4
 8009e2e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8009e30:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009e32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e34:	891b      	ldrh	r3, [r3, #8]
 8009e36:	4619      	mov	r1, r3
 8009e38:	8c3b      	ldrh	r3, [r7, #32]
 8009e3a:	440b      	add	r3, r1
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	da06      	bge.n	8009e4e <tcp_write+0x116>
 8009e40:	4b74      	ldr	r3, [pc, #464]	@ (800a014 <tcp_write+0x2dc>)
 8009e42:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009e46:	4977      	ldr	r1, [pc, #476]	@ (800a024 <tcp_write+0x2ec>)
 8009e48:	4874      	ldr	r0, [pc, #464]	@ (800a01c <tcp_write+0x2e4>)
 8009e4a:	f004 fb9f 	bl	800e58c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8009e4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e50:	891a      	ldrh	r2, [r3, #8]
 8009e52:	8c3b      	ldrh	r3, [r7, #32]
 8009e54:	4413      	add	r3, r2
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009e64:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8009e66:	8a7b      	ldrh	r3, [r7, #18]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d026      	beq.n	8009eba <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8009e6c:	8a7b      	ldrh	r3, [r7, #18]
 8009e6e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d206      	bcs.n	8009e82 <tcp_write+0x14a>
 8009e74:	4b67      	ldr	r3, [pc, #412]	@ (800a014 <tcp_write+0x2dc>)
 8009e76:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8009e7a:	496b      	ldr	r1, [pc, #428]	@ (800a028 <tcp_write+0x2f0>)
 8009e7c:	4867      	ldr	r0, [pc, #412]	@ (800a01c <tcp_write+0x2e4>)
 8009e7e:	f004 fb85 	bl	800e58c <iprintf>
      seg = last_unsent;
 8009e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8009e86:	8a7b      	ldrh	r3, [r7, #18]
 8009e88:	88fa      	ldrh	r2, [r7, #6]
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	bf28      	it	cs
 8009e8e:	4613      	movcs	r3, r2
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009e94:	4293      	cmp	r3, r2
 8009e96:	bf28      	it	cs
 8009e98:	4613      	movcs	r3, r2
 8009e9a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8009e9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009ea0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8009ea8:	8a7a      	ldrh	r2, [r7, #18]
 8009eaa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8009eb2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009eb4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8009eba:	8a7b      	ldrh	r3, [r7, #18]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00b      	beq.n	8009ed8 <tcp_write+0x1a0>
 8009ec0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009ec4:	88fb      	ldrh	r3, [r7, #6]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d006      	beq.n	8009ed8 <tcp_write+0x1a0>
 8009eca:	4b52      	ldr	r3, [pc, #328]	@ (800a014 <tcp_write+0x2dc>)
 8009ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ed0:	4956      	ldr	r1, [pc, #344]	@ (800a02c <tcp_write+0x2f4>)
 8009ed2:	4852      	ldr	r0, [pc, #328]	@ (800a01c <tcp_write+0x2e4>)
 8009ed4:	f004 fb5a 	bl	800e58c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8009ed8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009edc:	88fb      	ldrh	r3, [r7, #6]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	f080 8167 	bcs.w	800a1b2 <tcp_write+0x47a>
 8009ee4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f000 8163 	beq.w	800a1b2 <tcp_write+0x47a>
 8009eec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009eee:	891b      	ldrh	r3, [r3, #8]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f000 815e 	beq.w	800a1b2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009ef6:	88fa      	ldrh	r2, [r7, #6]
 8009ef8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009efc:	1ad2      	subs	r2, r2, r3
 8009efe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009f00:	4293      	cmp	r3, r2
 8009f02:	bfa8      	it	ge
 8009f04:	4613      	movge	r3, r2
 8009f06:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8009f08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009f0c:	797b      	ldrb	r3, [r7, #5]
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d027      	beq.n	8009f66 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8009f16:	f107 0012 	add.w	r0, r7, #18
 8009f1a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009f1c:	8bf9      	ldrh	r1, [r7, #30]
 8009f1e:	2301      	movs	r3, #1
 8009f20:	9302      	str	r3, [sp, #8]
 8009f22:	797b      	ldrb	r3, [r7, #5]
 8009f24:	9301      	str	r3, [sp, #4]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	f7ff fe0f 	bl	8009b50 <tcp_pbuf_prealloc>
 8009f32:	6578      	str	r0, [r7, #84]	@ 0x54
 8009f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f000 8225 	beq.w	800a386 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8009f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f3e:	6858      	ldr	r0, [r3, #4]
 8009f40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	4413      	add	r3, r2
 8009f48:	8bfa      	ldrh	r2, [r7, #30]
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	f004 fbf9 	bl	800e742 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8009f50:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8009f52:	f7fb f9eb 	bl	800532c <pbuf_clen>
 8009f56:	4603      	mov	r3, r0
 8009f58:	461a      	mov	r2, r3
 8009f5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009f5e:	4413      	add	r3, r2
 8009f60:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009f64:	e041      	b.n	8009fea <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8009f66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f6c:	e002      	b.n	8009f74 <tcp_write+0x23c>
 8009f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1f8      	bne.n	8009f6e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8009f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f7e:	7b1b      	ldrb	r3, [r3, #12]
 8009f80:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d115      	bne.n	8009fb4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8009f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f8e:	8952      	ldrh	r2, [r2, #10]
 8009f90:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d10d      	bne.n	8009fb4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8009f98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d006      	beq.n	8009fae <tcp_write+0x276>
 8009fa0:	4b1c      	ldr	r3, [pc, #112]	@ (800a014 <tcp_write+0x2dc>)
 8009fa2:	f240 2231 	movw	r2, #561	@ 0x231
 8009fa6:	4922      	ldr	r1, [pc, #136]	@ (800a030 <tcp_write+0x2f8>)
 8009fa8:	481c      	ldr	r0, [pc, #112]	@ (800a01c <tcp_write+0x2e4>)
 8009faa:	f004 faef 	bl	800e58c <iprintf>
          extendlen = seglen;
 8009fae:	8bfb      	ldrh	r3, [r7, #30]
 8009fb0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009fb2:	e01a      	b.n	8009fea <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8009fb4:	8bfb      	ldrh	r3, [r7, #30]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	4619      	mov	r1, r3
 8009fba:	2000      	movs	r0, #0
 8009fbc:	f7fa fe4a 	bl	8004c54 <pbuf_alloc>
 8009fc0:	6578      	str	r0, [r7, #84]	@ 0x54
 8009fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 81e0 	beq.w	800a38a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8009fca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	441a      	add	r2, r3
 8009fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fd4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8009fd6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8009fd8:	f7fb f9a8 	bl	800532c <pbuf_clen>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8009fea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009fee:	8bfb      	ldrh	r3, [r7, #30]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009ff6:	e0dc      	b.n	800a1b2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f000 80d7 	beq.w	800a1b2 <tcp_write+0x47a>
 800a004:	4b03      	ldr	r3, [pc, #12]	@ (800a014 <tcp_write+0x2dc>)
 800a006:	f240 224a 	movw	r2, #586	@ 0x24a
 800a00a:	490a      	ldr	r1, [pc, #40]	@ (800a034 <tcp_write+0x2fc>)
 800a00c:	4803      	ldr	r0, [pc, #12]	@ (800a01c <tcp_write+0x2e4>)
 800a00e:	f004 fabd 	bl	800e58c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800a012:	e0ce      	b.n	800a1b2 <tcp_write+0x47a>
 800a014:	08010ac8 	.word	0x08010ac8
 800a018:	08010c68 	.word	0x08010c68
 800a01c:	08010b1c 	.word	0x08010b1c
 800a020:	08010c80 	.word	0x08010c80
 800a024:	08010cb4 	.word	0x08010cb4
 800a028:	08010ccc 	.word	0x08010ccc
 800a02c:	08010cec 	.word	0x08010cec
 800a030:	08010d0c 	.word	0x08010d0c
 800a034:	08010d38 	.word	0x08010d38
    struct pbuf *p;
    u16_t left = len - pos;
 800a038:	88fa      	ldrh	r2, [r7, #6]
 800a03a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800a042:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a046:	b29b      	uxth	r3, r3
 800a048:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a04e:	8b7a      	ldrh	r2, [r7, #26]
 800a050:	8bbb      	ldrh	r3, [r7, #28]
 800a052:	4293      	cmp	r3, r2
 800a054:	bf28      	it	cs
 800a056:	4613      	movcs	r3, r2
 800a058:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a05a:	797b      	ldrb	r3, [r7, #5]
 800a05c:	f003 0301 	and.w	r3, r3, #1
 800a060:	2b00      	cmp	r3, #0
 800a062:	d036      	beq.n	800a0d2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a064:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a068:	b29a      	uxth	r2, r3
 800a06a:	8b3b      	ldrh	r3, [r7, #24]
 800a06c:	4413      	add	r3, r2
 800a06e:	b299      	uxth	r1, r3
 800a070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a072:	2b00      	cmp	r3, #0
 800a074:	bf0c      	ite	eq
 800a076:	2301      	moveq	r3, #1
 800a078:	2300      	movne	r3, #0
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	f107 0012 	add.w	r0, r7, #18
 800a080:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a082:	9302      	str	r3, [sp, #8]
 800a084:	797b      	ldrb	r3, [r7, #5]
 800a086:	9301      	str	r3, [sp, #4]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	9300      	str	r3, [sp, #0]
 800a08c:	4603      	mov	r3, r0
 800a08e:	2036      	movs	r0, #54	@ 0x36
 800a090:	f7ff fd5e 	bl	8009b50 <tcp_pbuf_prealloc>
 800a094:	6338      	str	r0, [r7, #48]	@ 0x30
 800a096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f000 8178 	beq.w	800a38e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a0:	895b      	ldrh	r3, [r3, #10]
 800a0a2:	8b3a      	ldrh	r2, [r7, #24]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d906      	bls.n	800a0b6 <tcp_write+0x37e>
 800a0a8:	4b8c      	ldr	r3, [pc, #560]	@ (800a2dc <tcp_write+0x5a4>)
 800a0aa:	f240 2266 	movw	r2, #614	@ 0x266
 800a0ae:	498c      	ldr	r1, [pc, #560]	@ (800a2e0 <tcp_write+0x5a8>)
 800a0b0:	488c      	ldr	r0, [pc, #560]	@ (800a2e4 <tcp_write+0x5ac>)
 800a0b2:	f004 fa6b 	bl	800e58c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a0be:	18d0      	adds	r0, r2, r3
 800a0c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	8b3a      	ldrh	r2, [r7, #24]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	f004 fb39 	bl	800e742 <memcpy>
 800a0d0:	e02f      	b.n	800a132 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a0d2:	8a7b      	ldrh	r3, [r7, #18]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d006      	beq.n	800a0e6 <tcp_write+0x3ae>
 800a0d8:	4b80      	ldr	r3, [pc, #512]	@ (800a2dc <tcp_write+0x5a4>)
 800a0da:	f240 2271 	movw	r2, #625	@ 0x271
 800a0de:	4982      	ldr	r1, [pc, #520]	@ (800a2e8 <tcp_write+0x5b0>)
 800a0e0:	4880      	ldr	r0, [pc, #512]	@ (800a2e4 <tcp_write+0x5ac>)
 800a0e2:	f004 fa53 	bl	800e58c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a0e6:	8b3b      	ldrh	r3, [r7, #24]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	2036      	movs	r0, #54	@ 0x36
 800a0ee:	f7fa fdb1 	bl	8004c54 <pbuf_alloc>
 800a0f2:	6178      	str	r0, [r7, #20]
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f000 814b 	beq.w	800a392 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800a0fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	441a      	add	r2, r3
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a108:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a112:	4619      	mov	r1, r3
 800a114:	2036      	movs	r0, #54	@ 0x36
 800a116:	f7fa fd9d 	bl	8004c54 <pbuf_alloc>
 800a11a:	6338      	str	r0, [r7, #48]	@ 0x30
 800a11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d103      	bne.n	800a12a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800a122:	6978      	ldr	r0, [r7, #20]
 800a124:	f7fb f87a 	bl	800521c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800a128:	e136      	b.n	800a398 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800a12a:	6979      	ldr	r1, [r7, #20]
 800a12c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a12e:	f7fb f937 	bl	80053a0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800a132:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a134:	f7fb f8fa 	bl	800532c <pbuf_clen>
 800a138:	4603      	mov	r3, r0
 800a13a:	461a      	mov	r2, r3
 800a13c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a140:	4413      	add	r3, r2
 800a142:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800a146:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a14a:	2b09      	cmp	r3, #9
 800a14c:	d903      	bls.n	800a156 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800a14e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a150:	f7fb f864 	bl	800521c <pbuf_free>
      goto memerr;
 800a154:	e120      	b.n	800a398 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a15a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a15e:	441a      	add	r2, r3
 800a160:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	4613      	mov	r3, r2
 800a168:	2200      	movs	r2, #0
 800a16a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f7ff fc53 	bl	8009a18 <tcp_create_segment>
 800a172:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800a174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 810d 	beq.w	800a396 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800a17c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d102      	bne.n	800a188 <tcp_write+0x450>
      queue = seg;
 800a182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a184:	647b      	str	r3, [r7, #68]	@ 0x44
 800a186:	e00c      	b.n	800a1a2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a188:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d106      	bne.n	800a19c <tcp_write+0x464>
 800a18e:	4b53      	ldr	r3, [pc, #332]	@ (800a2dc <tcp_write+0x5a4>)
 800a190:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800a194:	4955      	ldr	r1, [pc, #340]	@ (800a2ec <tcp_write+0x5b4>)
 800a196:	4853      	ldr	r0, [pc, #332]	@ (800a2e4 <tcp_write+0x5ac>)
 800a198:	f004 f9f8 	bl	800e58c <iprintf>
      prev_seg->next = seg;
 800a19c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a19e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1a0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800a1a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1a4:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800a1a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a1aa:	8b3b      	ldrh	r3, [r7, #24]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800a1b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a1b6:	88fb      	ldrh	r3, [r7, #6]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	f4ff af3d 	bcc.w	800a038 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800a1be:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d02c      	beq.n	800a21e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800a1c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1ca:	e01e      	b.n	800a20a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800a1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ce:	891a      	ldrh	r2, [r3, #8]
 800a1d0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a1d2:	4413      	add	r3, r2
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800a1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d110      	bne.n	800a204 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1e8:	8952      	ldrh	r2, [r2, #10]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800a1ee:	68b9      	ldr	r1, [r7, #8]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f004 faa6 	bl	800e742 <memcpy>
        p->len += oversize_used;
 800a1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1f8:	895a      	ldrh	r2, [r3, #10]
 800a1fa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a1fc:	4413      	add	r3, r2
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a202:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1dd      	bne.n	800a1cc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800a210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a212:	891a      	ldrh	r2, [r3, #8]
 800a214:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a216:	4413      	add	r3, r2
 800a218:	b29a      	uxth	r2, r3
 800a21a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a21c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800a21e:	8a7a      	ldrh	r2, [r7, #18]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800a226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d018      	beq.n	800a25e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a22c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d106      	bne.n	800a240 <tcp_write+0x508>
 800a232:	4b2a      	ldr	r3, [pc, #168]	@ (800a2dc <tcp_write+0x5a4>)
 800a234:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800a238:	492d      	ldr	r1, [pc, #180]	@ (800a2f0 <tcp_write+0x5b8>)
 800a23a:	482a      	ldr	r0, [pc, #168]	@ (800a2e4 <tcp_write+0x5ac>)
 800a23c:	f004 f9a6 	bl	800e58c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800a240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a246:	4618      	mov	r0, r3
 800a248:	f7fb f8aa 	bl	80053a0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a24c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a24e:	891a      	ldrh	r2, [r3, #8]
 800a250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a252:	891b      	ldrh	r3, [r3, #8]
 800a254:	4413      	add	r3, r2
 800a256:	b29a      	uxth	r2, r3
 800a258:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a25a:	811a      	strh	r2, [r3, #8]
 800a25c:	e037      	b.n	800a2ce <tcp_write+0x596>
  } else if (extendlen > 0) {
 800a25e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a260:	2b00      	cmp	r3, #0
 800a262:	d034      	beq.n	800a2ce <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <tcp_write+0x53a>
 800a26a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d106      	bne.n	800a280 <tcp_write+0x548>
 800a272:	4b1a      	ldr	r3, [pc, #104]	@ (800a2dc <tcp_write+0x5a4>)
 800a274:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800a278:	491e      	ldr	r1, [pc, #120]	@ (800a2f4 <tcp_write+0x5bc>)
 800a27a:	481a      	ldr	r0, [pc, #104]	@ (800a2e4 <tcp_write+0x5ac>)
 800a27c:	f004 f986 	bl	800e58c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a286:	e009      	b.n	800a29c <tcp_write+0x564>
      p->tot_len += extendlen;
 800a288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a28a:	891a      	ldrh	r2, [r3, #8]
 800a28c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a28e:	4413      	add	r3, r2
 800a290:	b29a      	uxth	r2, r3
 800a292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a294:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1f1      	bne.n	800a288 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800a2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a6:	891a      	ldrh	r2, [r3, #8]
 800a2a8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a2aa:	4413      	add	r3, r2
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800a2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b4:	895a      	ldrh	r2, [r3, #10]
 800a2b6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a2b8:	4413      	add	r3, r2
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2be:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a2c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2c2:	891a      	ldrh	r2, [r3, #8]
 800a2c4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a2c6:	4413      	add	r3, r2
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2cc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800a2ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d111      	bne.n	800a2f8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2d8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a2da:	e010      	b.n	800a2fe <tcp_write+0x5c6>
 800a2dc:	08010ac8 	.word	0x08010ac8
 800a2e0:	08010d68 	.word	0x08010d68
 800a2e4:	08010b1c 	.word	0x08010b1c
 800a2e8:	08010da8 	.word	0x08010da8
 800a2ec:	08010db8 	.word	0x08010db8
 800a2f0:	08010dcc 	.word	0x08010dcc
 800a2f4:	08010e04 	.word	0x08010e04
  } else {
    last_unsent->next = queue;
 800a2f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2fc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a302:	88fb      	ldrh	r3, [r7, #6]
 800a304:	441a      	add	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800a310:	88fb      	ldrh	r3, [r7, #6]
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	b29a      	uxth	r2, r3
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800a322:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00e      	beq.n	800a34e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10a      	bne.n	800a34e <tcp_write+0x616>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d106      	bne.n	800a34e <tcp_write+0x616>
 800a340:	4b2c      	ldr	r3, [pc, #176]	@ (800a3f4 <tcp_write+0x6bc>)
 800a342:	f240 3212 	movw	r2, #786	@ 0x312
 800a346:	492c      	ldr	r1, [pc, #176]	@ (800a3f8 <tcp_write+0x6c0>)
 800a348:	482c      	ldr	r0, [pc, #176]	@ (800a3fc <tcp_write+0x6c4>)
 800a34a:	f004 f91f 	bl	800e58c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800a34e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a350:	2b00      	cmp	r3, #0
 800a352:	d016      	beq.n	800a382 <tcp_write+0x64a>
 800a354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d012      	beq.n	800a382 <tcp_write+0x64a>
 800a35c:	797b      	ldrb	r3, [r7, #5]
 800a35e:	f003 0302 	and.w	r3, r3, #2
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10d      	bne.n	800a382 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	899b      	ldrh	r3, [r3, #12]
 800a36c:	b29c      	uxth	r4, r3
 800a36e:	2008      	movs	r0, #8
 800a370:	f7f9 fbf6 	bl	8003b60 <lwip_htons>
 800a374:	4603      	mov	r3, r0
 800a376:	461a      	mov	r2, r3
 800a378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	4322      	orrs	r2, r4
 800a37e:	b292      	uxth	r2, r2
 800a380:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	e031      	b.n	800a3ea <tcp_write+0x6b2>
          goto memerr;
 800a386:	bf00      	nop
 800a388:	e006      	b.n	800a398 <tcp_write+0x660>
            goto memerr;
 800a38a:	bf00      	nop
 800a38c:	e004      	b.n	800a398 <tcp_write+0x660>
        goto memerr;
 800a38e:	bf00      	nop
 800a390:	e002      	b.n	800a398 <tcp_write+0x660>
        goto memerr;
 800a392:	bf00      	nop
 800a394:	e000      	b.n	800a398 <tcp_write+0x660>
      goto memerr;
 800a396:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	8b5b      	ldrh	r3, [r3, #26]
 800a39c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800a3a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800a3ac:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a3ae:	f7fa ff35 	bl	800521c <pbuf_free>
  }
  if (queue != NULL) {
 800a3b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <tcp_write+0x686>
    tcp_segs_free(queue);
 800a3b8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a3ba:	f7fc fb59 	bl	8006a70 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00e      	beq.n	800a3e6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d10a      	bne.n	800a3e6 <tcp_write+0x6ae>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d106      	bne.n	800a3e6 <tcp_write+0x6ae>
 800a3d8:	4b06      	ldr	r3, [pc, #24]	@ (800a3f4 <tcp_write+0x6bc>)
 800a3da:	f240 3227 	movw	r2, #807	@ 0x327
 800a3de:	4906      	ldr	r1, [pc, #24]	@ (800a3f8 <tcp_write+0x6c0>)
 800a3e0:	4806      	ldr	r0, [pc, #24]	@ (800a3fc <tcp_write+0x6c4>)
 800a3e2:	f004 f8d3 	bl	800e58c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800a3e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	375c      	adds	r7, #92	@ 0x5c
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd90      	pop	{r4, r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	08010ac8 	.word	0x08010ac8
 800a3f8:	08010e3c 	.word	0x08010e3c
 800a3fc:	08010b1c 	.word	0x08010b1c

0800a400 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a400:	b590      	push	{r4, r7, lr}
 800a402:	b08b      	sub	sp, #44	@ 0x2c
 800a404:	af02      	add	r7, sp, #8
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	460b      	mov	r3, r1
 800a40a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a40c:	2300      	movs	r3, #0
 800a40e:	61fb      	str	r3, [r7, #28]
 800a410:	2300      	movs	r3, #0
 800a412:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a414:	2300      	movs	r3, #0
 800a416:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d106      	bne.n	800a42c <tcp_split_unsent_seg+0x2c>
 800a41e:	4b95      	ldr	r3, [pc, #596]	@ (800a674 <tcp_split_unsent_seg+0x274>)
 800a420:	f240 324b 	movw	r2, #843	@ 0x34b
 800a424:	4994      	ldr	r1, [pc, #592]	@ (800a678 <tcp_split_unsent_seg+0x278>)
 800a426:	4895      	ldr	r0, [pc, #596]	@ (800a67c <tcp_split_unsent_seg+0x27c>)
 800a428:	f004 f8b0 	bl	800e58c <iprintf>

  useg = pcb->unsent;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a430:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d102      	bne.n	800a43e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a438:	f04f 33ff 	mov.w	r3, #4294967295
 800a43c:	e116      	b.n	800a66c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a43e:	887b      	ldrh	r3, [r7, #2]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d109      	bne.n	800a458 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a444:	4b8b      	ldr	r3, [pc, #556]	@ (800a674 <tcp_split_unsent_seg+0x274>)
 800a446:	f240 3253 	movw	r2, #851	@ 0x353
 800a44a:	498d      	ldr	r1, [pc, #564]	@ (800a680 <tcp_split_unsent_seg+0x280>)
 800a44c:	488b      	ldr	r0, [pc, #556]	@ (800a67c <tcp_split_unsent_seg+0x27c>)
 800a44e:	f004 f89d 	bl	800e58c <iprintf>
    return ERR_VAL;
 800a452:	f06f 0305 	mvn.w	r3, #5
 800a456:	e109      	b.n	800a66c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	891b      	ldrh	r3, [r3, #8]
 800a45c:	887a      	ldrh	r2, [r7, #2]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d301      	bcc.n	800a466 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a462:	2300      	movs	r3, #0
 800a464:	e102      	b.n	800a66c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a46a:	887a      	ldrh	r2, [r7, #2]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d906      	bls.n	800a47e <tcp_split_unsent_seg+0x7e>
 800a470:	4b80      	ldr	r3, [pc, #512]	@ (800a674 <tcp_split_unsent_seg+0x274>)
 800a472:	f240 325b 	movw	r2, #859	@ 0x35b
 800a476:	4983      	ldr	r1, [pc, #524]	@ (800a684 <tcp_split_unsent_seg+0x284>)
 800a478:	4880      	ldr	r0, [pc, #512]	@ (800a67c <tcp_split_unsent_seg+0x27c>)
 800a47a:	f004 f887 	bl	800e58c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	891b      	ldrh	r3, [r3, #8]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d106      	bne.n	800a494 <tcp_split_unsent_seg+0x94>
 800a486:	4b7b      	ldr	r3, [pc, #492]	@ (800a674 <tcp_split_unsent_seg+0x274>)
 800a488:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800a48c:	497e      	ldr	r1, [pc, #504]	@ (800a688 <tcp_split_unsent_seg+0x288>)
 800a48e:	487b      	ldr	r0, [pc, #492]	@ (800a67c <tcp_split_unsent_seg+0x27c>)
 800a490:	f004 f87c 	bl	800e58c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	7a9b      	ldrb	r3, [r3, #10]
 800a498:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a49a:	7bfb      	ldrb	r3, [r7, #15]
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	f003 0304 	and.w	r3, r3, #4
 800a4a4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	891a      	ldrh	r2, [r3, #8]
 800a4aa:	887b      	ldrh	r3, [r7, #2]
 800a4ac:	1ad3      	subs	r3, r2, r3
 800a4ae:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a4b0:	7bbb      	ldrb	r3, [r7, #14]
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	89bb      	ldrh	r3, [r7, #12]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a4be:	4619      	mov	r1, r3
 800a4c0:	2036      	movs	r0, #54	@ 0x36
 800a4c2:	f7fa fbc7 	bl	8004c54 <pbuf_alloc>
 800a4c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 80b7 	beq.w	800a63e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	891a      	ldrh	r2, [r3, #8]
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	891b      	ldrh	r3, [r3, #8]
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	887b      	ldrh	r3, [r7, #2]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	6858      	ldr	r0, [r3, #4]
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	7bbb      	ldrb	r3, [r7, #14]
 800a4ee:	18d1      	adds	r1, r2, r3
 800a4f0:	897b      	ldrh	r3, [r7, #10]
 800a4f2:	89ba      	ldrh	r2, [r7, #12]
 800a4f4:	f7fb f88c 	bl	8005610 <pbuf_copy_partial>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	89bb      	ldrh	r3, [r7, #12]
 800a4fe:	4293      	cmp	r3, r2
 800a500:	f040 809f 	bne.w	800a642 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	899b      	ldrh	r3, [r3, #12]
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7f9 fb27 	bl	8003b60 <lwip_htons>
 800a512:	4603      	mov	r3, r0
 800a514:	b2db      	uxtb	r3, r3
 800a516:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a51a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a51c:	2300      	movs	r3, #0
 800a51e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a520:	7efb      	ldrb	r3, [r7, #27]
 800a522:	f003 0308 	and.w	r3, r3, #8
 800a526:	2b00      	cmp	r3, #0
 800a528:	d007      	beq.n	800a53a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a52a:	7efb      	ldrb	r3, [r7, #27]
 800a52c:	f023 0308 	bic.w	r3, r3, #8
 800a530:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a532:	7ebb      	ldrb	r3, [r7, #26]
 800a534:	f043 0308 	orr.w	r3, r3, #8
 800a538:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a53a:	7efb      	ldrb	r3, [r7, #27]
 800a53c:	f003 0301 	and.w	r3, r3, #1
 800a540:	2b00      	cmp	r3, #0
 800a542:	d007      	beq.n	800a554 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a544:	7efb      	ldrb	r3, [r7, #27]
 800a546:	f023 0301 	bic.w	r3, r3, #1
 800a54a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a54c:	7ebb      	ldrb	r3, [r7, #26]
 800a54e:	f043 0301 	orr.w	r3, r3, #1
 800a552:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7f9 fb16 	bl	8003b8c <lwip_htonl>
 800a560:	4602      	mov	r2, r0
 800a562:	887b      	ldrh	r3, [r7, #2]
 800a564:	18d1      	adds	r1, r2, r3
 800a566:	7eba      	ldrb	r2, [r7, #26]
 800a568:	7bfb      	ldrb	r3, [r7, #15]
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	460b      	mov	r3, r1
 800a56e:	6939      	ldr	r1, [r7, #16]
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f7ff fa51 	bl	8009a18 <tcp_create_segment>
 800a576:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d063      	beq.n	800a646 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	4618      	mov	r0, r3
 800a584:	f7fa fed2 	bl	800532c <pbuf_clen>
 800a588:	4603      	mov	r3, r0
 800a58a:	461a      	mov	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a592:	1a9b      	subs	r3, r3, r2
 800a594:	b29a      	uxth	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	6858      	ldr	r0, [r3, #4]
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	891a      	ldrh	r2, [r3, #8]
 800a5a6:	89bb      	ldrh	r3, [r7, #12]
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	f7fa fcaf 	bl	8004f10 <pbuf_realloc>
  useg->len -= remainder;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	891a      	ldrh	r2, [r3, #8]
 800a5b6:	89bb      	ldrh	r3, [r7, #12]
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	899b      	ldrh	r3, [r3, #12]
 800a5c6:	b29c      	uxth	r4, r3
 800a5c8:	7efb      	ldrb	r3, [r7, #27]
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7f9 fac7 	bl	8003b60 <lwip_htons>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	4322      	orrs	r2, r4
 800a5dc:	b292      	uxth	r2, r2
 800a5de:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7fa fea1 	bl	800532c <pbuf_clen>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a5f4:	4413      	add	r3, r2
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	4618      	mov	r0, r3
 800a604:	f7fa fe92 	bl	800532c <pbuf_clen>
 800a608:	4603      	mov	r3, r0
 800a60a:	461a      	mov	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a612:	4413      	add	r3, r2
 800a614:	b29a      	uxth	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	69fa      	ldr	r2, [r7, #28]
 800a628:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d103      	bne.n	800a63a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a63a:	2300      	movs	r3, #0
 800a63c:	e016      	b.n	800a66c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a63e:	bf00      	nop
 800a640:	e002      	b.n	800a648 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a642:	bf00      	nop
 800a644:	e000      	b.n	800a648 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a646:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d006      	beq.n	800a65c <tcp_split_unsent_seg+0x25c>
 800a64e:	4b09      	ldr	r3, [pc, #36]	@ (800a674 <tcp_split_unsent_seg+0x274>)
 800a650:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800a654:	490d      	ldr	r1, [pc, #52]	@ (800a68c <tcp_split_unsent_seg+0x28c>)
 800a656:	4809      	ldr	r0, [pc, #36]	@ (800a67c <tcp_split_unsent_seg+0x27c>)
 800a658:	f003 ff98 	bl	800e58c <iprintf>
  if (p != NULL) {
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d002      	beq.n	800a668 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a662:	6938      	ldr	r0, [r7, #16]
 800a664:	f7fa fdda 	bl	800521c <pbuf_free>
  }

  return ERR_MEM;
 800a668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3724      	adds	r7, #36	@ 0x24
 800a670:	46bd      	mov	sp, r7
 800a672:	bd90      	pop	{r4, r7, pc}
 800a674:	08010ac8 	.word	0x08010ac8
 800a678:	08010e5c 	.word	0x08010e5c
 800a67c:	08010b1c 	.word	0x08010b1c
 800a680:	08010e80 	.word	0x08010e80
 800a684:	08010ea4 	.word	0x08010ea4
 800a688:	08010eb4 	.word	0x08010eb4
 800a68c:	08010ec4 	.word	0x08010ec4

0800a690 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a690:	b590      	push	{r4, r7, lr}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d106      	bne.n	800a6ac <tcp_send_fin+0x1c>
 800a69e:	4b21      	ldr	r3, [pc, #132]	@ (800a724 <tcp_send_fin+0x94>)
 800a6a0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800a6a4:	4920      	ldr	r1, [pc, #128]	@ (800a728 <tcp_send_fin+0x98>)
 800a6a6:	4821      	ldr	r0, [pc, #132]	@ (800a72c <tcp_send_fin+0x9c>)
 800a6a8:	f003 ff70 	bl	800e58c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d02e      	beq.n	800a712 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6b8:	60fb      	str	r3, [r7, #12]
 800a6ba:	e002      	b.n	800a6c2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1f8      	bne.n	800a6bc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	899b      	ldrh	r3, [r3, #12]
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7f9 fa44 	bl	8003b60 <lwip_htons>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	f003 0307 	and.w	r3, r3, #7
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d116      	bne.n	800a712 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	899b      	ldrh	r3, [r3, #12]
 800a6ea:	b29c      	uxth	r4, r3
 800a6ec:	2001      	movs	r0, #1
 800a6ee:	f7f9 fa37 	bl	8003b60 <lwip_htons>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	4322      	orrs	r2, r4
 800a6fc:	b292      	uxth	r2, r2
 800a6fe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	8b5b      	ldrh	r3, [r3, #26]
 800a704:	f043 0320 	orr.w	r3, r3, #32
 800a708:	b29a      	uxth	r2, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a70e:	2300      	movs	r3, #0
 800a710:	e004      	b.n	800a71c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a712:	2101      	movs	r1, #1
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 f80b 	bl	800a730 <tcp_enqueue_flags>
 800a71a:	4603      	mov	r3, r0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3714      	adds	r7, #20
 800a720:	46bd      	mov	sp, r7
 800a722:	bd90      	pop	{r4, r7, pc}
 800a724:	08010ac8 	.word	0x08010ac8
 800a728:	08010ed0 	.word	0x08010ed0
 800a72c:	08010b1c 	.word	0x08010b1c

0800a730 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b08a      	sub	sp, #40	@ 0x28
 800a734:	af02      	add	r7, sp, #8
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	460b      	mov	r3, r1
 800a73a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a740:	2300      	movs	r3, #0
 800a742:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a744:	78fb      	ldrb	r3, [r7, #3]
 800a746:	f003 0303 	and.w	r3, r3, #3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d106      	bne.n	800a75c <tcp_enqueue_flags+0x2c>
 800a74e:	4b67      	ldr	r3, [pc, #412]	@ (800a8ec <tcp_enqueue_flags+0x1bc>)
 800a750:	f240 4211 	movw	r2, #1041	@ 0x411
 800a754:	4966      	ldr	r1, [pc, #408]	@ (800a8f0 <tcp_enqueue_flags+0x1c0>)
 800a756:	4867      	ldr	r0, [pc, #412]	@ (800a8f4 <tcp_enqueue_flags+0x1c4>)
 800a758:	f003 ff18 	bl	800e58c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d106      	bne.n	800a770 <tcp_enqueue_flags+0x40>
 800a762:	4b62      	ldr	r3, [pc, #392]	@ (800a8ec <tcp_enqueue_flags+0x1bc>)
 800a764:	f240 4213 	movw	r2, #1043	@ 0x413
 800a768:	4963      	ldr	r1, [pc, #396]	@ (800a8f8 <tcp_enqueue_flags+0x1c8>)
 800a76a:	4862      	ldr	r0, [pc, #392]	@ (800a8f4 <tcp_enqueue_flags+0x1c4>)
 800a76c:	f003 ff0e 	bl	800e58c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a770:	78fb      	ldrb	r3, [r7, #3]
 800a772:	f003 0302 	and.w	r3, r3, #2
 800a776:	2b00      	cmp	r3, #0
 800a778:	d001      	beq.n	800a77e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a77a:	2301      	movs	r3, #1
 800a77c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a77e:	7ffb      	ldrb	r3, [r7, #31]
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	b2db      	uxtb	r3, r3
 800a784:	f003 0304 	and.w	r3, r3, #4
 800a788:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a78a:	7dfb      	ldrb	r3, [r7, #23]
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a792:	4619      	mov	r1, r3
 800a794:	2036      	movs	r0, #54	@ 0x36
 800a796:	f7fa fa5d 	bl	8004c54 <pbuf_alloc>
 800a79a:	6138      	str	r0, [r7, #16]
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d109      	bne.n	800a7b6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	8b5b      	ldrh	r3, [r3, #26]
 800a7a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7aa:	b29a      	uxth	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7b4:	e095      	b.n	800a8e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	895a      	ldrh	r2, [r3, #10]
 800a7ba:	7dfb      	ldrb	r3, [r7, #23]
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d206      	bcs.n	800a7d0 <tcp_enqueue_flags+0xa0>
 800a7c2:	4b4a      	ldr	r3, [pc, #296]	@ (800a8ec <tcp_enqueue_flags+0x1bc>)
 800a7c4:	f240 4239 	movw	r2, #1081	@ 0x439
 800a7c8:	494c      	ldr	r1, [pc, #304]	@ (800a8fc <tcp_enqueue_flags+0x1cc>)
 800a7ca:	484a      	ldr	r0, [pc, #296]	@ (800a8f4 <tcp_enqueue_flags+0x1c4>)
 800a7cc:	f003 fede 	bl	800e58c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800a7d4:	78fa      	ldrb	r2, [r7, #3]
 800a7d6:	7ffb      	ldrb	r3, [r7, #31]
 800a7d8:	9300      	str	r3, [sp, #0]
 800a7da:	460b      	mov	r3, r1
 800a7dc:	6939      	ldr	r1, [r7, #16]
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7ff f91a 	bl	8009a18 <tcp_create_segment>
 800a7e4:	60f8      	str	r0, [r7, #12]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d109      	bne.n	800a800 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	8b5b      	ldrh	r3, [r3, #26]
 800a7f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a7fe:	e070      	b.n	800a8e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	f003 0303 	and.w	r3, r3, #3
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d006      	beq.n	800a81a <tcp_enqueue_flags+0xea>
 800a80c:	4b37      	ldr	r3, [pc, #220]	@ (800a8ec <tcp_enqueue_flags+0x1bc>)
 800a80e:	f240 4242 	movw	r2, #1090	@ 0x442
 800a812:	493b      	ldr	r1, [pc, #236]	@ (800a900 <tcp_enqueue_flags+0x1d0>)
 800a814:	4837      	ldr	r0, [pc, #220]	@ (800a8f4 <tcp_enqueue_flags+0x1c4>)
 800a816:	f003 feb9 	bl	800e58c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	891b      	ldrh	r3, [r3, #8]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d006      	beq.n	800a830 <tcp_enqueue_flags+0x100>
 800a822:	4b32      	ldr	r3, [pc, #200]	@ (800a8ec <tcp_enqueue_flags+0x1bc>)
 800a824:	f240 4243 	movw	r2, #1091	@ 0x443
 800a828:	4936      	ldr	r1, [pc, #216]	@ (800a904 <tcp_enqueue_flags+0x1d4>)
 800a82a:	4832      	ldr	r0, [pc, #200]	@ (800a8f4 <tcp_enqueue_flags+0x1c4>)
 800a82c:	f003 feae 	bl	800e58c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a834:	2b00      	cmp	r3, #0
 800a836:	d103      	bne.n	800a840 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a83e:	e00d      	b.n	800a85c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a844:	61bb      	str	r3, [r7, #24]
 800a846:	e002      	b.n	800a84e <tcp_enqueue_flags+0x11e>
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	61bb      	str	r3, [r7, #24]
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1f8      	bne.n	800a848 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a864:	78fb      	ldrb	r3, [r7, #3]
 800a866:	f003 0302 	and.w	r3, r3, #2
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d104      	bne.n	800a878 <tcp_enqueue_flags+0x148>
 800a86e:	78fb      	ldrb	r3, [r7, #3]
 800a870:	f003 0301 	and.w	r3, r3, #1
 800a874:	2b00      	cmp	r3, #0
 800a876:	d004      	beq.n	800a882 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a87c:	1c5a      	adds	r2, r3, #1
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a882:	78fb      	ldrb	r3, [r7, #3]
 800a884:	f003 0301 	and.w	r3, r3, #1
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d006      	beq.n	800a89a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	8b5b      	ldrh	r3, [r3, #26]
 800a890:	f043 0320 	orr.w	r3, r3, #32
 800a894:	b29a      	uxth	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fa fd44 	bl	800532c <pbuf_clen>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a8ae:	4413      	add	r3, r2
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00e      	beq.n	800a8e0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10a      	bne.n	800a8e0 <tcp_enqueue_flags+0x1b0>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d106      	bne.n	800a8e0 <tcp_enqueue_flags+0x1b0>
 800a8d2:	4b06      	ldr	r3, [pc, #24]	@ (800a8ec <tcp_enqueue_flags+0x1bc>)
 800a8d4:	f240 4265 	movw	r2, #1125	@ 0x465
 800a8d8:	490b      	ldr	r1, [pc, #44]	@ (800a908 <tcp_enqueue_flags+0x1d8>)
 800a8da:	4806      	ldr	r0, [pc, #24]	@ (800a8f4 <tcp_enqueue_flags+0x1c4>)
 800a8dc:	f003 fe56 	bl	800e58c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3720      	adds	r7, #32
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	08010ac8 	.word	0x08010ac8
 800a8f0:	08010eec 	.word	0x08010eec
 800a8f4:	08010b1c 	.word	0x08010b1c
 800a8f8:	08010f44 	.word	0x08010f44
 800a8fc:	08010f64 	.word	0x08010f64
 800a900:	08010fa0 	.word	0x08010fa0
 800a904:	08010fb8 	.word	0x08010fb8
 800a908:	08010fe4 	.word	0x08010fe4

0800a90c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a90c:	b5b0      	push	{r4, r5, r7, lr}
 800a90e:	b08a      	sub	sp, #40	@ 0x28
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d106      	bne.n	800a928 <tcp_output+0x1c>
 800a91a:	4b8a      	ldr	r3, [pc, #552]	@ (800ab44 <tcp_output+0x238>)
 800a91c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800a920:	4989      	ldr	r1, [pc, #548]	@ (800ab48 <tcp_output+0x23c>)
 800a922:	488a      	ldr	r0, [pc, #552]	@ (800ab4c <tcp_output+0x240>)
 800a924:	f003 fe32 	bl	800e58c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	7d1b      	ldrb	r3, [r3, #20]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d106      	bne.n	800a93e <tcp_output+0x32>
 800a930:	4b84      	ldr	r3, [pc, #528]	@ (800ab44 <tcp_output+0x238>)
 800a932:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800a936:	4986      	ldr	r1, [pc, #536]	@ (800ab50 <tcp_output+0x244>)
 800a938:	4884      	ldr	r0, [pc, #528]	@ (800ab4c <tcp_output+0x240>)
 800a93a:	f003 fe27 	bl	800e58c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a93e:	4b85      	ldr	r3, [pc, #532]	@ (800ab54 <tcp_output+0x248>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	429a      	cmp	r2, r3
 800a946:	d101      	bne.n	800a94c <tcp_output+0x40>
    return ERR_OK;
 800a948:	2300      	movs	r3, #0
 800a94a:	e1ce      	b.n	800acea <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a958:	4293      	cmp	r3, r2
 800a95a:	bf28      	it	cs
 800a95c:	4613      	movcs	r3, r2
 800a95e:	b29b      	uxth	r3, r3
 800a960:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a966:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800a968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10b      	bne.n	800a986 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	8b5b      	ldrh	r3, [r3, #26]
 800a972:	f003 0302 	and.w	r3, r3, #2
 800a976:	2b00      	cmp	r3, #0
 800a978:	f000 81aa 	beq.w	800acd0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fdcb 	bl	800b518 <tcp_send_empty_ack>
 800a982:	4603      	mov	r3, r0
 800a984:	e1b1      	b.n	800acea <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a986:	6879      	ldr	r1, [r7, #4]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	3304      	adds	r3, #4
 800a98c:	461a      	mov	r2, r3
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7ff f826 	bl	80099e0 <tcp_route>
 800a994:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d102      	bne.n	800a9a2 <tcp_output+0x96>
    return ERR_RTE;
 800a99c:	f06f 0303 	mvn.w	r3, #3
 800a9a0:	e1a3      	b.n	800acea <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d003      	beq.n	800a9b0 <tcp_output+0xa4>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d111      	bne.n	800a9d4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d002      	beq.n	800a9bc <tcp_output+0xb0>
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	e000      	b.n	800a9be <tcp_output+0xb2>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d102      	bne.n	800a9cc <tcp_output+0xc0>
      return ERR_RTE;
 800a9c6:	f06f 0303 	mvn.w	r3, #3
 800a9ca:	e18e      	b.n	800acea <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7f9 f8d6 	bl	8003b8c <lwip_htonl>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9e6:	1ad3      	subs	r3, r2, r3
 800a9e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9ea:	8912      	ldrh	r2, [r2, #8]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	69ba      	ldr	r2, [r7, #24]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d227      	bcs.n	800aa44 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d114      	bne.n	800aa2c <tcp_output+0x120>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d110      	bne.n	800aa2c <tcp_output+0x120>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d10b      	bne.n	800aa2c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	8b5b      	ldrh	r3, [r3, #26]
 800aa30:	f003 0302 	and.w	r3, r3, #2
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f000 814d 	beq.w	800acd4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 fd6c 	bl	800b518 <tcp_send_empty_ack>
 800aa40:	4603      	mov	r3, r0
 800aa42:	e152      	b.n	800acea <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa50:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800aa52:	6a3b      	ldr	r3, [r7, #32]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 811c 	beq.w	800ac92 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800aa5a:	e002      	b.n	800aa62 <tcp_output+0x156>
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	623b      	str	r3, [r7, #32]
 800aa62:	6a3b      	ldr	r3, [r7, #32]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1f8      	bne.n	800aa5c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800aa6a:	e112      	b.n	800ac92 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	899b      	ldrh	r3, [r3, #12]
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7f9 f873 	bl	8003b60 <lwip_htons>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	f003 0304 	and.w	r3, r3, #4
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d006      	beq.n	800aa94 <tcp_output+0x188>
 800aa86:	4b2f      	ldr	r3, [pc, #188]	@ (800ab44 <tcp_output+0x238>)
 800aa88:	f240 5236 	movw	r2, #1334	@ 0x536
 800aa8c:	4932      	ldr	r1, [pc, #200]	@ (800ab58 <tcp_output+0x24c>)
 800aa8e:	482f      	ldr	r0, [pc, #188]	@ (800ab4c <tcp_output+0x240>)
 800aa90:	f003 fd7c 	bl	800e58c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d01f      	beq.n	800aadc <tcp_output+0x1d0>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	8b5b      	ldrh	r3, [r3, #26]
 800aaa0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d119      	bne.n	800aadc <tcp_output+0x1d0>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00b      	beq.n	800aac8 <tcp_output+0x1bc>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d110      	bne.n	800aadc <tcp_output+0x1d0>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aabe:	891a      	ldrh	r2, [r3, #8]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d209      	bcs.n	800aadc <tcp_output+0x1d0>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d004      	beq.n	800aadc <tcp_output+0x1d0>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800aad8:	2b08      	cmp	r3, #8
 800aada:	d901      	bls.n	800aae0 <tcp_output+0x1d4>
 800aadc:	2301      	movs	r3, #1
 800aade:	e000      	b.n	800aae2 <tcp_output+0x1d6>
 800aae0:	2300      	movs	r3, #0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d106      	bne.n	800aaf4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	8b5b      	ldrh	r3, [r3, #26]
 800aaea:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f000 80e4 	beq.w	800acbc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	7d1b      	ldrb	r3, [r3, #20]
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d00d      	beq.n	800ab18 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800aafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	899b      	ldrh	r3, [r3, #12]
 800ab02:	b29c      	uxth	r4, r3
 800ab04:	2010      	movs	r0, #16
 800ab06:	f7f9 f82b 	bl	8003b60 <lwip_htons>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	4322      	orrs	r2, r4
 800ab14:	b292      	uxth	r2, r2
 800ab16:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ab18:	697a      	ldr	r2, [r7, #20]
 800ab1a:	6879      	ldr	r1, [r7, #4]
 800ab1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab1e:	f000 f909 	bl	800ad34 <tcp_output_segment>
 800ab22:	4603      	mov	r3, r0
 800ab24:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ab26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d016      	beq.n	800ab5c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	8b5b      	ldrh	r3, [r3, #26]
 800ab32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	835a      	strh	r2, [r3, #26]
      return err;
 800ab3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab40:	e0d3      	b.n	800acea <tcp_output+0x3de>
 800ab42:	bf00      	nop
 800ab44:	08010ac8 	.word	0x08010ac8
 800ab48:	0801100c 	.word	0x0801100c
 800ab4c:	08010b1c 	.word	0x08010b1c
 800ab50:	08011024 	.word	0x08011024
 800ab54:	20008290 	.word	0x20008290
 800ab58:	0801104c 	.word	0x0801104c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	7d1b      	ldrb	r3, [r3, #20]
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d006      	beq.n	800ab7a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	8b5b      	ldrh	r3, [r3, #26]
 800ab70:	f023 0303 	bic.w	r3, r3, #3
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7f9 f803 	bl	8003b8c <lwip_htonl>
 800ab86:	4604      	mov	r4, r0
 800ab88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8a:	891b      	ldrh	r3, [r3, #8]
 800ab8c:	461d      	mov	r5, r3
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	899b      	ldrh	r3, [r3, #12]
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7f8 ffe2 	bl	8003b60 <lwip_htons>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	f003 0303 	and.w	r3, r3, #3
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d001      	beq.n	800abac <tcp_output+0x2a0>
 800aba8:	2301      	movs	r3, #1
 800abaa:	e000      	b.n	800abae <tcp_output+0x2a2>
 800abac:	2300      	movs	r3, #0
 800abae:	442b      	add	r3, r5
 800abb0:	4423      	add	r3, r4
 800abb2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	da02      	bge.n	800abc6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800abc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc8:	891b      	ldrh	r3, [r3, #8]
 800abca:	461c      	mov	r4, r3
 800abcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	899b      	ldrh	r3, [r3, #12]
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7f8 ffc3 	bl	8003b60 <lwip_htons>
 800abda:	4603      	mov	r3, r0
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	f003 0303 	and.w	r3, r3, #3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d001      	beq.n	800abea <tcp_output+0x2de>
 800abe6:	2301      	movs	r3, #1
 800abe8:	e000      	b.n	800abec <tcp_output+0x2e0>
 800abea:	2300      	movs	r3, #0
 800abec:	4423      	add	r3, r4
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d049      	beq.n	800ac86 <tcp_output+0x37a>
      seg->next = NULL;
 800abf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf4:	2200      	movs	r2, #0
 800abf6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d105      	bne.n	800ac0c <tcp_output+0x300>
        pcb->unacked = seg;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac04:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800ac06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac08:	623b      	str	r3, [r7, #32]
 800ac0a:	e03f      	b.n	800ac8c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7f8 ffba 	bl	8003b8c <lwip_htonl>
 800ac18:	4604      	mov	r4, r0
 800ac1a:	6a3b      	ldr	r3, [r7, #32]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7f8 ffb3 	bl	8003b8c <lwip_htonl>
 800ac26:	4603      	mov	r3, r0
 800ac28:	1ae3      	subs	r3, r4, r3
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	da24      	bge.n	800ac78 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	3370      	adds	r3, #112	@ 0x70
 800ac32:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ac34:	e002      	b.n	800ac3c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d011      	beq.n	800ac68 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7f8 ff9d 	bl	8003b8c <lwip_htonl>
 800ac52:	4604      	mov	r4, r0
 800ac54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7f8 ff96 	bl	8003b8c <lwip_htonl>
 800ac60:	4603      	mov	r3, r0
 800ac62:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	dbe6      	blt.n	800ac36 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac74:	601a      	str	r2, [r3, #0]
 800ac76:	e009      	b.n	800ac8c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ac78:	6a3b      	ldr	r3, [r7, #32]
 800ac7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac7c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ac7e:	6a3b      	ldr	r3, [r7, #32]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	623b      	str	r3, [r7, #32]
 800ac84:	e002      	b.n	800ac8c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ac86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ac88:	f7fb ff07 	bl	8006a9a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac90:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800ac92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d012      	beq.n	800acbe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ac98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7f8 ff74 	bl	8003b8c <lwip_htonl>
 800aca4:	4602      	mov	r2, r0
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acae:	8912      	ldrh	r2, [r2, #8]
 800acb0:	4413      	add	r3, r2
  while (seg != NULL &&
 800acb2:	69ba      	ldr	r2, [r7, #24]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	f4bf aed9 	bcs.w	800aa6c <tcp_output+0x160>
 800acba:	e000      	b.n	800acbe <tcp_output+0x3b2>
      break;
 800acbc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d108      	bne.n	800acd8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800acce:	e004      	b.n	800acda <tcp_output+0x3ce>
    goto output_done;
 800acd0:	bf00      	nop
 800acd2:	e002      	b.n	800acda <tcp_output+0x3ce>
    goto output_done;
 800acd4:	bf00      	nop
 800acd6:	e000      	b.n	800acda <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800acd8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	8b5b      	ldrh	r3, [r3, #26]
 800acde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ace2:	b29a      	uxth	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3728      	adds	r7, #40	@ 0x28
 800acee:	46bd      	mov	sp, r7
 800acf0:	bdb0      	pop	{r4, r5, r7, pc}
 800acf2:	bf00      	nop

0800acf4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d106      	bne.n	800ad10 <tcp_output_segment_busy+0x1c>
 800ad02:	4b09      	ldr	r3, [pc, #36]	@ (800ad28 <tcp_output_segment_busy+0x34>)
 800ad04:	f240 529a 	movw	r2, #1434	@ 0x59a
 800ad08:	4908      	ldr	r1, [pc, #32]	@ (800ad2c <tcp_output_segment_busy+0x38>)
 800ad0a:	4809      	ldr	r0, [pc, #36]	@ (800ad30 <tcp_output_segment_busy+0x3c>)
 800ad0c:	f003 fc3e 	bl	800e58c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	7b9b      	ldrb	r3, [r3, #14]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d001      	beq.n	800ad1e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e000      	b.n	800ad20 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	08010ac8 	.word	0x08010ac8
 800ad2c:	08011064 	.word	0x08011064
 800ad30:	08010b1c 	.word	0x08010b1c

0800ad34 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ad34:	b5b0      	push	{r4, r5, r7, lr}
 800ad36:	b08c      	sub	sp, #48	@ 0x30
 800ad38:	af04      	add	r7, sp, #16
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d106      	bne.n	800ad54 <tcp_output_segment+0x20>
 800ad46:	4b64      	ldr	r3, [pc, #400]	@ (800aed8 <tcp_output_segment+0x1a4>)
 800ad48:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800ad4c:	4963      	ldr	r1, [pc, #396]	@ (800aedc <tcp_output_segment+0x1a8>)
 800ad4e:	4864      	ldr	r0, [pc, #400]	@ (800aee0 <tcp_output_segment+0x1ac>)
 800ad50:	f003 fc1c 	bl	800e58c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d106      	bne.n	800ad68 <tcp_output_segment+0x34>
 800ad5a:	4b5f      	ldr	r3, [pc, #380]	@ (800aed8 <tcp_output_segment+0x1a4>)
 800ad5c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800ad60:	4960      	ldr	r1, [pc, #384]	@ (800aee4 <tcp_output_segment+0x1b0>)
 800ad62:	485f      	ldr	r0, [pc, #380]	@ (800aee0 <tcp_output_segment+0x1ac>)
 800ad64:	f003 fc12 	bl	800e58c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d106      	bne.n	800ad7c <tcp_output_segment+0x48>
 800ad6e:	4b5a      	ldr	r3, [pc, #360]	@ (800aed8 <tcp_output_segment+0x1a4>)
 800ad70:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800ad74:	495c      	ldr	r1, [pc, #368]	@ (800aee8 <tcp_output_segment+0x1b4>)
 800ad76:	485a      	ldr	r0, [pc, #360]	@ (800aee0 <tcp_output_segment+0x1ac>)
 800ad78:	f003 fc08 	bl	800e58c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f7ff ffb9 	bl	800acf4 <tcp_output_segment_busy>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	e0a1      	b.n	800aed0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	68dc      	ldr	r4, [r3, #12]
 800ad94:	4610      	mov	r0, r2
 800ad96:	f7f8 fef9 	bl	8003b8c <lwip_htonl>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	68dc      	ldr	r4, [r3, #12]
 800ada6:	4610      	mov	r0, r2
 800ada8:	f7f8 feda 	bl	8003b60 <lwip_htons>
 800adac:	4603      	mov	r3, r0
 800adae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800adb8:	441a      	add	r2, r3
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	3314      	adds	r3, #20
 800adc4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	7a9b      	ldrb	r3, [r3, #10]
 800adca:	f003 0301 	and.w	r3, r3, #1
 800adce:	2b00      	cmp	r3, #0
 800add0:	d015      	beq.n	800adfe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	3304      	adds	r3, #4
 800add6:	461a      	mov	r2, r3
 800add8:	6879      	ldr	r1, [r7, #4]
 800adda:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800adde:	f7fc fa39 	bl	8007254 <tcp_eff_send_mss_netif>
 800ade2:	4603      	mov	r3, r0
 800ade4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ade6:	8b7b      	ldrh	r3, [r7, #26]
 800ade8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800adec:	4618      	mov	r0, r3
 800adee:	f7f8 fecd 	bl	8003b8c <lwip_htonl>
 800adf2:	4602      	mov	r2, r0
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	3304      	adds	r3, #4
 800adfc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	da02      	bge.n	800ae0e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10c      	bne.n	800ae30 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ae16:	4b35      	ldr	r3, [pc, #212]	@ (800aeec <tcp_output_segment+0x1b8>)
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7f8 feb1 	bl	8003b8c <lwip_htonl>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	68da      	ldr	r2, [r3, #12]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	8959      	ldrh	r1, [r3, #10]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	8b3a      	ldrh	r2, [r7, #24]
 800ae4a:	1a8a      	subs	r2, r1, r2
 800ae4c:	b292      	uxth	r2, r2
 800ae4e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	8919      	ldrh	r1, [r3, #8]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	8b3a      	ldrh	r2, [r7, #24]
 800ae5c:	1a8a      	subs	r2, r1, r2
 800ae5e:	b292      	uxth	r2, r2
 800ae60:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	68d2      	ldr	r2, [r2, #12]
 800ae6a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	741a      	strb	r2, [r3, #16]
 800ae74:	2200      	movs	r2, #0
 800ae76:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	68da      	ldr	r2, [r3, #12]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	7a9b      	ldrb	r3, [r3, #10]
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <tcp_output_segment+0x158>
 800ae88:	2318      	movs	r3, #24
 800ae8a:	e000      	b.n	800ae8e <tcp_output_segment+0x15a>
 800ae8c:	2314      	movs	r3, #20
 800ae8e:	4413      	add	r3, r2
 800ae90:	69fa      	ldr	r2, [r7, #28]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d006      	beq.n	800aea4 <tcp_output_segment+0x170>
 800ae96:	4b10      	ldr	r3, [pc, #64]	@ (800aed8 <tcp_output_segment+0x1a4>)
 800ae98:	f240 621c 	movw	r2, #1564	@ 0x61c
 800ae9c:	4914      	ldr	r1, [pc, #80]	@ (800aef0 <tcp_output_segment+0x1bc>)
 800ae9e:	4810      	ldr	r0, [pc, #64]	@ (800aee0 <tcp_output_segment+0x1ac>)
 800aea0:	f003 fb74 	bl	800e58c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6858      	ldr	r0, [r3, #4]
 800aea8:	68b9      	ldr	r1, [r7, #8]
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	1d1c      	adds	r4, r3, #4
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	7add      	ldrb	r5, [r3, #11]
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	7a9b      	ldrb	r3, [r3, #10]
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	9202      	str	r2, [sp, #8]
 800aeba:	2206      	movs	r2, #6
 800aebc:	9201      	str	r2, [sp, #4]
 800aebe:	9300      	str	r3, [sp, #0]
 800aec0:	462b      	mov	r3, r5
 800aec2:	4622      	mov	r2, r4
 800aec4:	f002 fa34 	bl	800d330 <ip4_output_if>
 800aec8:	4603      	mov	r3, r0
 800aeca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800aecc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3720      	adds	r7, #32
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bdb0      	pop	{r4, r5, r7, pc}
 800aed8:	08010ac8 	.word	0x08010ac8
 800aedc:	0801108c 	.word	0x0801108c
 800aee0:	08010b1c 	.word	0x08010b1c
 800aee4:	080110ac 	.word	0x080110ac
 800aee8:	080110cc 	.word	0x080110cc
 800aeec:	20008244 	.word	0x20008244
 800aef0:	080110f0 	.word	0x080110f0

0800aef4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800aef4:	b5b0      	push	{r4, r5, r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d106      	bne.n	800af10 <tcp_rexmit_rto_prepare+0x1c>
 800af02:	4b31      	ldr	r3, [pc, #196]	@ (800afc8 <tcp_rexmit_rto_prepare+0xd4>)
 800af04:	f240 6263 	movw	r2, #1635	@ 0x663
 800af08:	4930      	ldr	r1, [pc, #192]	@ (800afcc <tcp_rexmit_rto_prepare+0xd8>)
 800af0a:	4831      	ldr	r0, [pc, #196]	@ (800afd0 <tcp_rexmit_rto_prepare+0xdc>)
 800af0c:	f003 fb3e 	bl	800e58c <iprintf>

  if (pcb->unacked == NULL) {
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af14:	2b00      	cmp	r3, #0
 800af16:	d102      	bne.n	800af1e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800af18:	f06f 0305 	mvn.w	r3, #5
 800af1c:	e050      	b.n	800afc0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af22:	60fb      	str	r3, [r7, #12]
 800af24:	e00b      	b.n	800af3e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	f7ff fee4 	bl	800acf4 <tcp_output_segment_busy>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d002      	beq.n	800af38 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800af32:	f06f 0305 	mvn.w	r3, #5
 800af36:	e043      	b.n	800afc0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	60fb      	str	r3, [r7, #12]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1ef      	bne.n	800af26 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800af46:	68f8      	ldr	r0, [r7, #12]
 800af48:	f7ff fed4 	bl	800acf4 <tcp_output_segment_busy>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d002      	beq.n	800af58 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800af52:	f06f 0305 	mvn.w	r3, #5
 800af56:	e033      	b.n	800afc0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	8b5b      	ldrh	r3, [r3, #26]
 800af72:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800af76:	b29a      	uxth	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	4618      	mov	r0, r3
 800af84:	f7f8 fe02 	bl	8003b8c <lwip_htonl>
 800af88:	4604      	mov	r4, r0
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	891b      	ldrh	r3, [r3, #8]
 800af8e:	461d      	mov	r5, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	899b      	ldrh	r3, [r3, #12]
 800af96:	b29b      	uxth	r3, r3
 800af98:	4618      	mov	r0, r3
 800af9a:	f7f8 fde1 	bl	8003b60 <lwip_htons>
 800af9e:	4603      	mov	r3, r0
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	f003 0303 	and.w	r3, r3, #3
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <tcp_rexmit_rto_prepare+0xba>
 800afaa:	2301      	movs	r3, #1
 800afac:	e000      	b.n	800afb0 <tcp_rexmit_rto_prepare+0xbc>
 800afae:	2300      	movs	r3, #0
 800afb0:	442b      	add	r3, r5
 800afb2:	18e2      	adds	r2, r4, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bdb0      	pop	{r4, r5, r7, pc}
 800afc8:	08010ac8 	.word	0x08010ac8
 800afcc:	08011104 	.word	0x08011104
 800afd0:	08010b1c 	.word	0x08010b1c

0800afd4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d106      	bne.n	800aff0 <tcp_rexmit_rto_commit+0x1c>
 800afe2:	4b0d      	ldr	r3, [pc, #52]	@ (800b018 <tcp_rexmit_rto_commit+0x44>)
 800afe4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800afe8:	490c      	ldr	r1, [pc, #48]	@ (800b01c <tcp_rexmit_rto_commit+0x48>)
 800afea:	480d      	ldr	r0, [pc, #52]	@ (800b020 <tcp_rexmit_rto_commit+0x4c>)
 800afec:	f003 face 	bl	800e58c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aff6:	2bff      	cmp	r3, #255	@ 0xff
 800aff8:	d007      	beq.n	800b00a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b000:	3301      	adds	r3, #1
 800b002:	b2da      	uxtb	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f7ff fc7e 	bl	800a90c <tcp_output>
}
 800b010:	bf00      	nop
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	08010ac8 	.word	0x08010ac8
 800b01c:	08011128 	.word	0x08011128
 800b020:	08010b1c 	.word	0x08010b1c

0800b024 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d106      	bne.n	800b040 <tcp_rexmit_rto+0x1c>
 800b032:	4b0a      	ldr	r3, [pc, #40]	@ (800b05c <tcp_rexmit_rto+0x38>)
 800b034:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800b038:	4909      	ldr	r1, [pc, #36]	@ (800b060 <tcp_rexmit_rto+0x3c>)
 800b03a:	480a      	ldr	r0, [pc, #40]	@ (800b064 <tcp_rexmit_rto+0x40>)
 800b03c:	f003 faa6 	bl	800e58c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f7ff ff57 	bl	800aef4 <tcp_rexmit_rto_prepare>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d102      	bne.n	800b052 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7ff ffc1 	bl	800afd4 <tcp_rexmit_rto_commit>
  }
}
 800b052:	bf00      	nop
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	08010ac8 	.word	0x08010ac8
 800b060:	0801114c 	.word	0x0801114c
 800b064:	08010b1c 	.word	0x08010b1c

0800b068 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b068:	b590      	push	{r4, r7, lr}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d106      	bne.n	800b084 <tcp_rexmit+0x1c>
 800b076:	4b2f      	ldr	r3, [pc, #188]	@ (800b134 <tcp_rexmit+0xcc>)
 800b078:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800b07c:	492e      	ldr	r1, [pc, #184]	@ (800b138 <tcp_rexmit+0xd0>)
 800b07e:	482f      	ldr	r0, [pc, #188]	@ (800b13c <tcp_rexmit+0xd4>)
 800b080:	f003 fa84 	bl	800e58c <iprintf>

  if (pcb->unacked == NULL) {
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d102      	bne.n	800b092 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b08c:	f06f 0305 	mvn.w	r3, #5
 800b090:	e04c      	b.n	800b12c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b096:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b098:	68b8      	ldr	r0, [r7, #8]
 800b09a:	f7ff fe2b 	bl	800acf4 <tcp_output_segment_busy>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d002      	beq.n	800b0aa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b0a4:	f06f 0305 	mvn.w	r3, #5
 800b0a8:	e040      	b.n	800b12c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	336c      	adds	r3, #108	@ 0x6c
 800b0b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b0b8:	e002      	b.n	800b0c0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d011      	beq.n	800b0ec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7f8 fd5b 	bl	8003b8c <lwip_htonl>
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7f8 fd54 	bl	8003b8c <lwip_htonl>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	dbe6      	blt.n	800b0ba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	68ba      	ldr	r2, [r7, #8]
 800b0f8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d103      	bne.n	800b10a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b110:	2bff      	cmp	r3, #255	@ 0xff
 800b112:	d007      	beq.n	800b124 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b11a:	3301      	adds	r3, #1
 800b11c:	b2da      	uxtb	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3714      	adds	r7, #20
 800b130:	46bd      	mov	sp, r7
 800b132:	bd90      	pop	{r4, r7, pc}
 800b134:	08010ac8 	.word	0x08010ac8
 800b138:	08011168 	.word	0x08011168
 800b13c:	08010b1c 	.word	0x08010b1c

0800b140 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d106      	bne.n	800b15c <tcp_rexmit_fast+0x1c>
 800b14e:	4b2a      	ldr	r3, [pc, #168]	@ (800b1f8 <tcp_rexmit_fast+0xb8>)
 800b150:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800b154:	4929      	ldr	r1, [pc, #164]	@ (800b1fc <tcp_rexmit_fast+0xbc>)
 800b156:	482a      	ldr	r0, [pc, #168]	@ (800b200 <tcp_rexmit_fast+0xc0>)
 800b158:	f003 fa18 	bl	800e58c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b160:	2b00      	cmp	r3, #0
 800b162:	d044      	beq.n	800b1ee <tcp_rexmit_fast+0xae>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	8b5b      	ldrh	r3, [r3, #26]
 800b168:	f003 0304 	and.w	r3, r3, #4
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d13e      	bne.n	800b1ee <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7ff ff79 	bl	800b068 <tcp_rexmit>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d138      	bne.n	800b1ee <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b188:	4293      	cmp	r3, r2
 800b18a:	bf28      	it	cs
 800b18c:	4613      	movcs	r3, r2
 800b18e:	b29b      	uxth	r3, r3
 800b190:	0fda      	lsrs	r2, r3, #31
 800b192:	4413      	add	r3, r2
 800b194:	105b      	asrs	r3, r3, #1
 800b196:	b29a      	uxth	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b1aa:	005b      	lsls	r3, r3, #1
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d206      	bcs.n	800b1be <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b1b4:	005b      	lsls	r3, r3, #1
 800b1b6:	b29a      	uxth	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	0049      	lsls	r1, r1, #1
 800b1cc:	440b      	add	r3, r1
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	4413      	add	r3, r2
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	8b5b      	ldrh	r3, [r3, #26]
 800b1de:	f043 0304 	orr.w	r3, r3, #4
 800b1e2:	b29a      	uxth	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800b1ee:	bf00      	nop
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	08010ac8 	.word	0x08010ac8
 800b1fc:	08011180 	.word	0x08011180
 800b200:	08010b1c 	.word	0x08010b1c

0800b204 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b086      	sub	sp, #24
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	607b      	str	r3, [r7, #4]
 800b20e:	460b      	mov	r3, r1
 800b210:	817b      	strh	r3, [r7, #10]
 800b212:	4613      	mov	r3, r2
 800b214:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b216:	897a      	ldrh	r2, [r7, #10]
 800b218:	893b      	ldrh	r3, [r7, #8]
 800b21a:	4413      	add	r3, r2
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	3314      	adds	r3, #20
 800b220:	b29b      	uxth	r3, r3
 800b222:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b226:	4619      	mov	r1, r3
 800b228:	2022      	movs	r0, #34	@ 0x22
 800b22a:	f7f9 fd13 	bl	8004c54 <pbuf_alloc>
 800b22e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d04d      	beq.n	800b2d2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b236:	897b      	ldrh	r3, [r7, #10]
 800b238:	3313      	adds	r3, #19
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	8952      	ldrh	r2, [r2, #10]
 800b23e:	4293      	cmp	r3, r2
 800b240:	db06      	blt.n	800b250 <tcp_output_alloc_header_common+0x4c>
 800b242:	4b26      	ldr	r3, [pc, #152]	@ (800b2dc <tcp_output_alloc_header_common+0xd8>)
 800b244:	f240 7223 	movw	r2, #1827	@ 0x723
 800b248:	4925      	ldr	r1, [pc, #148]	@ (800b2e0 <tcp_output_alloc_header_common+0xdc>)
 800b24a:	4826      	ldr	r0, [pc, #152]	@ (800b2e4 <tcp_output_alloc_header_common+0xe0>)
 800b24c:	f003 f99e 	bl	800e58c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b256:	8c3b      	ldrh	r3, [r7, #32]
 800b258:	4618      	mov	r0, r3
 800b25a:	f7f8 fc81 	bl	8003b60 <lwip_htons>
 800b25e:	4603      	mov	r3, r0
 800b260:	461a      	mov	r2, r3
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b266:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b268:	4618      	mov	r0, r3
 800b26a:	f7f8 fc79 	bl	8003b60 <lwip_htons>
 800b26e:	4603      	mov	r3, r0
 800b270:	461a      	mov	r2, r3
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f7f8 fc85 	bl	8003b8c <lwip_htonl>
 800b282:	4602      	mov	r2, r0
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b288:	897b      	ldrh	r3, [r7, #10]
 800b28a:	089b      	lsrs	r3, r3, #2
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	3305      	adds	r3, #5
 800b290:	b29b      	uxth	r3, r3
 800b292:	031b      	lsls	r3, r3, #12
 800b294:	b29a      	uxth	r2, r3
 800b296:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	4313      	orrs	r3, r2
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7f8 fc5d 	bl	8003b60 <lwip_htons>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b2ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7f8 fc55 	bl	8003b60 <lwip_htons>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	741a      	strb	r2, [r3, #16]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	749a      	strb	r2, [r3, #18]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b2d2:	697b      	ldr	r3, [r7, #20]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3718      	adds	r7, #24
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	08010ac8 	.word	0x08010ac8
 800b2e0:	080111a0 	.word	0x080111a0
 800b2e4:	08010b1c 	.word	0x08010b1c

0800b2e8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b2e8:	b5b0      	push	{r4, r5, r7, lr}
 800b2ea:	b08a      	sub	sp, #40	@ 0x28
 800b2ec:	af04      	add	r7, sp, #16
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	607b      	str	r3, [r7, #4]
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	817b      	strh	r3, [r7, #10]
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d106      	bne.n	800b30e <tcp_output_alloc_header+0x26>
 800b300:	4b15      	ldr	r3, [pc, #84]	@ (800b358 <tcp_output_alloc_header+0x70>)
 800b302:	f240 7242 	movw	r2, #1858	@ 0x742
 800b306:	4915      	ldr	r1, [pc, #84]	@ (800b35c <tcp_output_alloc_header+0x74>)
 800b308:	4815      	ldr	r0, [pc, #84]	@ (800b360 <tcp_output_alloc_header+0x78>)
 800b30a:	f003 f93f 	bl	800e58c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	8adb      	ldrh	r3, [r3, #22]
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	8b12      	ldrh	r2, [r2, #24]
 800b31a:	68f9      	ldr	r1, [r7, #12]
 800b31c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800b31e:	893d      	ldrh	r5, [r7, #8]
 800b320:	897c      	ldrh	r4, [r7, #10]
 800b322:	9103      	str	r1, [sp, #12]
 800b324:	2110      	movs	r1, #16
 800b326:	9102      	str	r1, [sp, #8]
 800b328:	9201      	str	r2, [sp, #4]
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	462a      	mov	r2, r5
 800b330:	4621      	mov	r1, r4
 800b332:	f7ff ff67 	bl	800b204 <tcp_output_alloc_header_common>
 800b336:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d006      	beq.n	800b34c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800b346:	441a      	add	r2, r3
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800b34c:	697b      	ldr	r3, [r7, #20]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3718      	adds	r7, #24
 800b352:	46bd      	mov	sp, r7
 800b354:	bdb0      	pop	{r4, r5, r7, pc}
 800b356:	bf00      	nop
 800b358:	08010ac8 	.word	0x08010ac8
 800b35c:	080111d0 	.word	0x080111d0
 800b360:	08010b1c 	.word	0x08010b1c

0800b364 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b088      	sub	sp, #32
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	4611      	mov	r1, r2
 800b370:	461a      	mov	r2, r3
 800b372:	460b      	mov	r3, r1
 800b374:	71fb      	strb	r3, [r7, #7]
 800b376:	4613      	mov	r3, r2
 800b378:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b37a:	2300      	movs	r3, #0
 800b37c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d106      	bne.n	800b392 <tcp_output_fill_options+0x2e>
 800b384:	4b12      	ldr	r3, [pc, #72]	@ (800b3d0 <tcp_output_fill_options+0x6c>)
 800b386:	f240 7256 	movw	r2, #1878	@ 0x756
 800b38a:	4912      	ldr	r1, [pc, #72]	@ (800b3d4 <tcp_output_fill_options+0x70>)
 800b38c:	4812      	ldr	r0, [pc, #72]	@ (800b3d8 <tcp_output_fill_options+0x74>)
 800b38e:	f003 f8fd 	bl	800e58c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	3314      	adds	r3, #20
 800b39c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b39e:	8bfb      	ldrh	r3, [r7, #30]
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	79fb      	ldrb	r3, [r7, #7]
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	f003 0304 	and.w	r3, r3, #4
 800b3ac:	4413      	add	r3, r2
 800b3ae:	3314      	adds	r3, #20
 800b3b0:	69ba      	ldr	r2, [r7, #24]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	697a      	ldr	r2, [r7, #20]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d006      	beq.n	800b3c8 <tcp_output_fill_options+0x64>
 800b3ba:	4b05      	ldr	r3, [pc, #20]	@ (800b3d0 <tcp_output_fill_options+0x6c>)
 800b3bc:	f240 7275 	movw	r2, #1909	@ 0x775
 800b3c0:	4906      	ldr	r1, [pc, #24]	@ (800b3dc <tcp_output_fill_options+0x78>)
 800b3c2:	4805      	ldr	r0, [pc, #20]	@ (800b3d8 <tcp_output_fill_options+0x74>)
 800b3c4:	f003 f8e2 	bl	800e58c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b3c8:	bf00      	nop
 800b3ca:	3720      	adds	r7, #32
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	08010ac8 	.word	0x08010ac8
 800b3d4:	080111f8 	.word	0x080111f8
 800b3d8:	08010b1c 	.word	0x08010b1c
 800b3dc:	080110f0 	.word	0x080110f0

0800b3e0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b08a      	sub	sp, #40	@ 0x28
 800b3e4:	af04      	add	r7, sp, #16
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	607a      	str	r2, [r7, #4]
 800b3ec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d106      	bne.n	800b402 <tcp_output_control_segment+0x22>
 800b3f4:	4b1c      	ldr	r3, [pc, #112]	@ (800b468 <tcp_output_control_segment+0x88>)
 800b3f6:	f240 7287 	movw	r2, #1927	@ 0x787
 800b3fa:	491c      	ldr	r1, [pc, #112]	@ (800b46c <tcp_output_control_segment+0x8c>)
 800b3fc:	481c      	ldr	r0, [pc, #112]	@ (800b470 <tcp_output_control_segment+0x90>)
 800b3fe:	f003 f8c5 	bl	800e58c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b402:	683a      	ldr	r2, [r7, #0]
 800b404:	6879      	ldr	r1, [r7, #4]
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f7fe faea 	bl	80099e0 <tcp_route>
 800b40c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d102      	bne.n	800b41a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b414:	23fc      	movs	r3, #252	@ 0xfc
 800b416:	75fb      	strb	r3, [r7, #23]
 800b418:	e01c      	b.n	800b454 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d006      	beq.n	800b42e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	7adb      	ldrb	r3, [r3, #11]
 800b424:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	7a9b      	ldrb	r3, [r3, #10]
 800b42a:	757b      	strb	r3, [r7, #21]
 800b42c:	e003      	b.n	800b436 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b42e:	23ff      	movs	r3, #255	@ 0xff
 800b430:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b432:	2300      	movs	r3, #0
 800b434:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b436:	7dba      	ldrb	r2, [r7, #22]
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	9302      	str	r3, [sp, #8]
 800b43c:	2306      	movs	r3, #6
 800b43e:	9301      	str	r3, [sp, #4]
 800b440:	7d7b      	ldrb	r3, [r7, #21]
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	4613      	mov	r3, r2
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	6879      	ldr	r1, [r7, #4]
 800b44a:	68b8      	ldr	r0, [r7, #8]
 800b44c:	f001 ff70 	bl	800d330 <ip4_output_if>
 800b450:	4603      	mov	r3, r0
 800b452:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b454:	68b8      	ldr	r0, [r7, #8]
 800b456:	f7f9 fee1 	bl	800521c <pbuf_free>
  return err;
 800b45a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3718      	adds	r7, #24
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	08010ac8 	.word	0x08010ac8
 800b46c:	08011220 	.word	0x08011220
 800b470:	08010b1c 	.word	0x08010b1c

0800b474 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b474:	b590      	push	{r4, r7, lr}
 800b476:	b08b      	sub	sp, #44	@ 0x2c
 800b478:	af04      	add	r7, sp, #16
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	607a      	str	r2, [r7, #4]
 800b480:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d106      	bne.n	800b496 <tcp_rst+0x22>
 800b488:	4b1f      	ldr	r3, [pc, #124]	@ (800b508 <tcp_rst+0x94>)
 800b48a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800b48e:	491f      	ldr	r1, [pc, #124]	@ (800b50c <tcp_rst+0x98>)
 800b490:	481f      	ldr	r0, [pc, #124]	@ (800b510 <tcp_rst+0x9c>)
 800b492:	f003 f87b 	bl	800e58c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d106      	bne.n	800b4aa <tcp_rst+0x36>
 800b49c:	4b1a      	ldr	r3, [pc, #104]	@ (800b508 <tcp_rst+0x94>)
 800b49e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800b4a2:	491c      	ldr	r1, [pc, #112]	@ (800b514 <tcp_rst+0xa0>)
 800b4a4:	481a      	ldr	r0, [pc, #104]	@ (800b510 <tcp_rst+0x9c>)
 800b4a6:	f003 f871 	bl	800e58c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b4ae:	f246 0308 	movw	r3, #24584	@ 0x6008
 800b4b2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b4b4:	7dfb      	ldrb	r3, [r7, #23]
 800b4b6:	b29c      	uxth	r4, r3
 800b4b8:	68b8      	ldr	r0, [r7, #8]
 800b4ba:	f7f8 fb67 	bl	8003b8c <lwip_htonl>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	8abb      	ldrh	r3, [r7, #20]
 800b4c2:	9303      	str	r3, [sp, #12]
 800b4c4:	2314      	movs	r3, #20
 800b4c6:	9302      	str	r3, [sp, #8]
 800b4c8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b4ca:	9301      	str	r3, [sp, #4]
 800b4cc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b4ce:	9300      	str	r3, [sp, #0]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	4621      	mov	r1, r4
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f7ff fe94 	bl	800b204 <tcp_output_alloc_header_common>
 800b4dc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00c      	beq.n	800b4fe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b4e4:	7dfb      	ldrb	r3, [r7, #23]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	6939      	ldr	r1, [r7, #16]
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f7ff ff3a 	bl	800b364 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	6939      	ldr	r1, [r7, #16]
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f7ff ff72 	bl	800b3e0 <tcp_output_control_segment>
 800b4fc:	e000      	b.n	800b500 <tcp_rst+0x8c>
    return;
 800b4fe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b500:	371c      	adds	r7, #28
 800b502:	46bd      	mov	sp, r7
 800b504:	bd90      	pop	{r4, r7, pc}
 800b506:	bf00      	nop
 800b508:	08010ac8 	.word	0x08010ac8
 800b50c:	0801124c 	.word	0x0801124c
 800b510:	08010b1c 	.word	0x08010b1c
 800b514:	08011268 	.word	0x08011268

0800b518 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b518:	b590      	push	{r4, r7, lr}
 800b51a:	b087      	sub	sp, #28
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b520:	2300      	movs	r3, #0
 800b522:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b524:	2300      	movs	r3, #0
 800b526:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d106      	bne.n	800b53c <tcp_send_empty_ack+0x24>
 800b52e:	4b28      	ldr	r3, [pc, #160]	@ (800b5d0 <tcp_send_empty_ack+0xb8>)
 800b530:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800b534:	4927      	ldr	r1, [pc, #156]	@ (800b5d4 <tcp_send_empty_ack+0xbc>)
 800b536:	4828      	ldr	r0, [pc, #160]	@ (800b5d8 <tcp_send_empty_ack+0xc0>)
 800b538:	f003 f828 	bl	800e58c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b53c:	7dfb      	ldrb	r3, [r7, #23]
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	b2db      	uxtb	r3, r3
 800b542:	f003 0304 	and.w	r3, r3, #4
 800b546:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b548:	7d7b      	ldrb	r3, [r7, #21]
 800b54a:	b29c      	uxth	r4, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b550:	4618      	mov	r0, r3
 800b552:	f7f8 fb1b 	bl	8003b8c <lwip_htonl>
 800b556:	4603      	mov	r3, r0
 800b558:	2200      	movs	r2, #0
 800b55a:	4621      	mov	r1, r4
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f7ff fec3 	bl	800b2e8 <tcp_output_alloc_header>
 800b562:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d109      	bne.n	800b57e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	8b5b      	ldrh	r3, [r3, #26]
 800b56e:	f043 0303 	orr.w	r3, r3, #3
 800b572:	b29a      	uxth	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b578:	f06f 0301 	mvn.w	r3, #1
 800b57c:	e023      	b.n	800b5c6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b57e:	7dbb      	ldrb	r3, [r7, #22]
 800b580:	7dfa      	ldrb	r2, [r7, #23]
 800b582:	6939      	ldr	r1, [r7, #16]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f7ff feed 	bl	800b364 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	3304      	adds	r3, #4
 800b590:	6939      	ldr	r1, [r7, #16]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7ff ff24 	bl	800b3e0 <tcp_output_control_segment>
 800b598:	4603      	mov	r3, r0
 800b59a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b59c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d007      	beq.n	800b5b4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	8b5b      	ldrh	r3, [r3, #26]
 800b5a8:	f043 0303 	orr.w	r3, r3, #3
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	835a      	strh	r2, [r3, #26]
 800b5b2:	e006      	b.n	800b5c2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	8b5b      	ldrh	r3, [r3, #26]
 800b5b8:	f023 0303 	bic.w	r3, r3, #3
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	371c      	adds	r7, #28
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd90      	pop	{r4, r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	08010ac8 	.word	0x08010ac8
 800b5d4:	08011284 	.word	0x08011284
 800b5d8:	08010b1c 	.word	0x08010b1c

0800b5dc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b5dc:	b590      	push	{r4, r7, lr}
 800b5de:	b087      	sub	sp, #28
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d106      	bne.n	800b5fc <tcp_keepalive+0x20>
 800b5ee:	4b18      	ldr	r3, [pc, #96]	@ (800b650 <tcp_keepalive+0x74>)
 800b5f0:	f640 0224 	movw	r2, #2084	@ 0x824
 800b5f4:	4917      	ldr	r1, [pc, #92]	@ (800b654 <tcp_keepalive+0x78>)
 800b5f6:	4818      	ldr	r0, [pc, #96]	@ (800b658 <tcp_keepalive+0x7c>)
 800b5f8:	f002 ffc8 	bl	800e58c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b5fc:	7dfb      	ldrb	r3, [r7, #23]
 800b5fe:	b29c      	uxth	r4, r3
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b604:	3b01      	subs	r3, #1
 800b606:	4618      	mov	r0, r3
 800b608:	f7f8 fac0 	bl	8003b8c <lwip_htonl>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2200      	movs	r2, #0
 800b610:	4621      	mov	r1, r4
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f7ff fe68 	bl	800b2e8 <tcp_output_alloc_header>
 800b618:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d102      	bne.n	800b626 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b620:	f04f 33ff 	mov.w	r3, #4294967295
 800b624:	e010      	b.n	800b648 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b626:	7dfb      	ldrb	r3, [r7, #23]
 800b628:	2200      	movs	r2, #0
 800b62a:	6939      	ldr	r1, [r7, #16]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f7ff fe99 	bl	800b364 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	3304      	adds	r3, #4
 800b638:	6939      	ldr	r1, [r7, #16]
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f7ff fed0 	bl	800b3e0 <tcp_output_control_segment>
 800b640:	4603      	mov	r3, r0
 800b642:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	371c      	adds	r7, #28
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd90      	pop	{r4, r7, pc}
 800b650:	08010ac8 	.word	0x08010ac8
 800b654:	080112a4 	.word	0x080112a4
 800b658:	08010b1c 	.word	0x08010b1c

0800b65c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b65c:	b590      	push	{r4, r7, lr}
 800b65e:	b08b      	sub	sp, #44	@ 0x2c
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b664:	2300      	movs	r3, #0
 800b666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d106      	bne.n	800b67e <tcp_zero_window_probe+0x22>
 800b670:	4b4c      	ldr	r3, [pc, #304]	@ (800b7a4 <tcp_zero_window_probe+0x148>)
 800b672:	f640 024f 	movw	r2, #2127	@ 0x84f
 800b676:	494c      	ldr	r1, [pc, #304]	@ (800b7a8 <tcp_zero_window_probe+0x14c>)
 800b678:	484c      	ldr	r0, [pc, #304]	@ (800b7ac <tcp_zero_window_probe+0x150>)
 800b67a:	f002 ff87 	bl	800e58c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b682:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b684:	6a3b      	ldr	r3, [r7, #32]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d101      	bne.n	800b68e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b68a:	2300      	movs	r3, #0
 800b68c:	e086      	b.n	800b79c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800b694:	2bff      	cmp	r3, #255	@ 0xff
 800b696:	d007      	beq.n	800b6a8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800b69e:	3301      	adds	r3, #1
 800b6a0:	b2da      	uxtb	r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b6a8:	6a3b      	ldr	r3, [r7, #32]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	899b      	ldrh	r3, [r3, #12]
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7f8 fa55 	bl	8003b60 <lwip_htons>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	f003 0301 	and.w	r3, r3, #1
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d005      	beq.n	800b6ce <tcp_zero_window_probe+0x72>
 800b6c2:	6a3b      	ldr	r3, [r7, #32]
 800b6c4:	891b      	ldrh	r3, [r3, #8]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d101      	bne.n	800b6ce <tcp_zero_window_probe+0x72>
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e000      	b.n	800b6d0 <tcp_zero_window_probe+0x74>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b6d2:	7ffb      	ldrb	r3, [r7, #31]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	bf0c      	ite	eq
 800b6d8:	2301      	moveq	r3, #1
 800b6da:	2300      	movne	r3, #0
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b6e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6e4:	b299      	uxth	r1, r3
 800b6e6:	6a3b      	ldr	r3, [r7, #32]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	8bba      	ldrh	r2, [r7, #28]
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7ff fdfa 	bl	800b2e8 <tcp_output_alloc_header>
 800b6f4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d102      	bne.n	800b702 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b700:	e04c      	b.n	800b79c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b708:	7ffb      	ldrb	r3, [r7, #31]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d011      	beq.n	800b732 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	899b      	ldrh	r3, [r3, #12]
 800b712:	b29b      	uxth	r3, r3
 800b714:	b21b      	sxth	r3, r3
 800b716:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b71a:	b21c      	sxth	r4, r3
 800b71c:	2011      	movs	r0, #17
 800b71e:	f7f8 fa1f 	bl	8003b60 <lwip_htons>
 800b722:	4603      	mov	r3, r0
 800b724:	b21b      	sxth	r3, r3
 800b726:	4323      	orrs	r3, r4
 800b728:	b21b      	sxth	r3, r3
 800b72a:	b29a      	uxth	r2, r3
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	819a      	strh	r2, [r3, #12]
 800b730:	e010      	b.n	800b754 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	3314      	adds	r3, #20
 800b738:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b73a:	6a3b      	ldr	r3, [r7, #32]
 800b73c:	6858      	ldr	r0, [r3, #4]
 800b73e:	6a3b      	ldr	r3, [r7, #32]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	891a      	ldrh	r2, [r3, #8]
 800b744:	6a3b      	ldr	r3, [r7, #32]
 800b746:	891b      	ldrh	r3, [r3, #8]
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	2201      	movs	r2, #1
 800b74e:	6939      	ldr	r1, [r7, #16]
 800b750:	f7f9 ff5e 	bl	8005610 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b754:	6a3b      	ldr	r3, [r7, #32]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7f8 fa16 	bl	8003b8c <lwip_htonl>
 800b760:	4603      	mov	r3, r0
 800b762:	3301      	adds	r3, #1
 800b764:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	1ad3      	subs	r3, r2, r3
 800b76e:	2b00      	cmp	r3, #0
 800b770:	da02      	bge.n	800b778 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	68fa      	ldr	r2, [r7, #12]
 800b776:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b77c:	2200      	movs	r2, #0
 800b77e:	69b9      	ldr	r1, [r7, #24]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f7ff fdef 	bl	800b364 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	3304      	adds	r3, #4
 800b78c:	69b9      	ldr	r1, [r7, #24]
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f7ff fe26 	bl	800b3e0 <tcp_output_control_segment>
 800b794:	4603      	mov	r3, r0
 800b796:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b798:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	372c      	adds	r7, #44	@ 0x2c
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd90      	pop	{r4, r7, pc}
 800b7a4:	08010ac8 	.word	0x08010ac8
 800b7a8:	080112c0 	.word	0x080112c0
 800b7ac:	08010b1c 	.word	0x08010b1c

0800b7b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b7b8:	f7fa f818 	bl	80057ec <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b7bc:	4b0a      	ldr	r3, [pc, #40]	@ (800b7e8 <tcpip_tcp_timer+0x38>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d103      	bne.n	800b7cc <tcpip_tcp_timer+0x1c>
 800b7c4:	4b09      	ldr	r3, [pc, #36]	@ (800b7ec <tcpip_tcp_timer+0x3c>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d005      	beq.n	800b7d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	4908      	ldr	r1, [pc, #32]	@ (800b7f0 <tcpip_tcp_timer+0x40>)
 800b7d0:	20fa      	movs	r0, #250	@ 0xfa
 800b7d2:	f000 f8f3 	bl	800b9bc <sys_timeout>
 800b7d6:	e003      	b.n	800b7e0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b7d8:	4b06      	ldr	r3, [pc, #24]	@ (800b7f4 <tcpip_tcp_timer+0x44>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	601a      	str	r2, [r3, #0]
  }
}
 800b7de:	bf00      	nop
 800b7e0:	bf00      	nop
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	20008250 	.word	0x20008250
 800b7ec:	20008254 	.word	0x20008254
 800b7f0:	0800b7b1 	.word	0x0800b7b1
 800b7f4:	2000829c 	.word	0x2000829c

0800b7f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b7fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b828 <tcp_timer_needed+0x30>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10f      	bne.n	800b824 <tcp_timer_needed+0x2c>
 800b804:	4b09      	ldr	r3, [pc, #36]	@ (800b82c <tcp_timer_needed+0x34>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d103      	bne.n	800b814 <tcp_timer_needed+0x1c>
 800b80c:	4b08      	ldr	r3, [pc, #32]	@ (800b830 <tcp_timer_needed+0x38>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d007      	beq.n	800b824 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b814:	4b04      	ldr	r3, [pc, #16]	@ (800b828 <tcp_timer_needed+0x30>)
 800b816:	2201      	movs	r2, #1
 800b818:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b81a:	2200      	movs	r2, #0
 800b81c:	4905      	ldr	r1, [pc, #20]	@ (800b834 <tcp_timer_needed+0x3c>)
 800b81e:	20fa      	movs	r0, #250	@ 0xfa
 800b820:	f000 f8cc 	bl	800b9bc <sys_timeout>
  }
}
 800b824:	bf00      	nop
 800b826:	bd80      	pop	{r7, pc}
 800b828:	2000829c 	.word	0x2000829c
 800b82c:	20008250 	.word	0x20008250
 800b830:	20008254 	.word	0x20008254
 800b834:	0800b7b1 	.word	0x0800b7b1

0800b838 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b844:	2006      	movs	r0, #6
 800b846:	f7f8 fe03 	bl	8004450 <memp_malloc>
 800b84a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d109      	bne.n	800b866 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d151      	bne.n	800b8fc <sys_timeout_abs+0xc4>
 800b858:	4b2a      	ldr	r3, [pc, #168]	@ (800b904 <sys_timeout_abs+0xcc>)
 800b85a:	22be      	movs	r2, #190	@ 0xbe
 800b85c:	492a      	ldr	r1, [pc, #168]	@ (800b908 <sys_timeout_abs+0xd0>)
 800b85e:	482b      	ldr	r0, [pc, #172]	@ (800b90c <sys_timeout_abs+0xd4>)
 800b860:	f002 fe94 	bl	800e58c <iprintf>
    return;
 800b864:	e04a      	b.n	800b8fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	2200      	movs	r2, #0
 800b86a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	68fa      	ldr	r2, [r7, #12]
 800b87c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b87e:	4b24      	ldr	r3, [pc, #144]	@ (800b910 <sys_timeout_abs+0xd8>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d103      	bne.n	800b88e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b886:	4a22      	ldr	r2, [pc, #136]	@ (800b910 <sys_timeout_abs+0xd8>)
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	6013      	str	r3, [r2, #0]
    return;
 800b88c:	e037      	b.n	800b8fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	685a      	ldr	r2, [r3, #4]
 800b892:	4b1f      	ldr	r3, [pc, #124]	@ (800b910 <sys_timeout_abs+0xd8>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	0fdb      	lsrs	r3, r3, #31
 800b89c:	f003 0301 	and.w	r3, r3, #1
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d007      	beq.n	800b8b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b8a6:	4b1a      	ldr	r3, [pc, #104]	@ (800b910 <sys_timeout_abs+0xd8>)
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b8ae:	4a18      	ldr	r2, [pc, #96]	@ (800b910 <sys_timeout_abs+0xd8>)
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	6013      	str	r3, [r2, #0]
 800b8b4:	e023      	b.n	800b8fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b8b6:	4b16      	ldr	r3, [pc, #88]	@ (800b910 <sys_timeout_abs+0xd8>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	617b      	str	r3, [r7, #20]
 800b8bc:	e01a      	b.n	800b8f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00b      	beq.n	800b8de <sys_timeout_abs+0xa6>
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	685a      	ldr	r2, [r3, #4]
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	0fdb      	lsrs	r3, r3, #31
 800b8d4:	f003 0301 	and.w	r3, r3, #1
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d007      	beq.n	800b8ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	693a      	ldr	r2, [r7, #16]
 800b8ea:	601a      	str	r2, [r3, #0]
        break;
 800b8ec:	e007      	b.n	800b8fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	617b      	str	r3, [r7, #20]
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1e1      	bne.n	800b8be <sys_timeout_abs+0x86>
 800b8fa:	e000      	b.n	800b8fe <sys_timeout_abs+0xc6>
    return;
 800b8fc:	bf00      	nop
      }
    }
  }
}
 800b8fe:	3718      	adds	r7, #24
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	080112e4 	.word	0x080112e4
 800b908:	08011318 	.word	0x08011318
 800b90c:	08011358 	.word	0x08011358
 800b910:	20008294 	.word	0x20008294

0800b914 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	4798      	blx	r3

  now = sys_now();
 800b926:	f7f7 ff23 	bl	8003770 <sys_now>
 800b92a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	4b0f      	ldr	r3, [pc, #60]	@ (800b970 <lwip_cyclic_timer+0x5c>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4413      	add	r3, r2
 800b936:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b938:	68fa      	ldr	r2, [r7, #12]
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	1ad3      	subs	r3, r2, r3
 800b93e:	0fdb      	lsrs	r3, r3, #31
 800b940:	f003 0301 	and.w	r3, r3, #1
 800b944:	b2db      	uxtb	r3, r3
 800b946:	2b00      	cmp	r3, #0
 800b948:	d009      	beq.n	800b95e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	4413      	add	r3, r2
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	4907      	ldr	r1, [pc, #28]	@ (800b974 <lwip_cyclic_timer+0x60>)
 800b956:	4618      	mov	r0, r3
 800b958:	f7ff ff6e 	bl	800b838 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b95c:	e004      	b.n	800b968 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	4904      	ldr	r1, [pc, #16]	@ (800b974 <lwip_cyclic_timer+0x60>)
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f7ff ff68 	bl	800b838 <sys_timeout_abs>
}
 800b968:	bf00      	nop
 800b96a:	3718      	adds	r7, #24
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	20008298 	.word	0x20008298
 800b974:	0800b915 	.word	0x0800b915

0800b978 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b97e:	2301      	movs	r3, #1
 800b980:	607b      	str	r3, [r7, #4]
 800b982:	e00e      	b.n	800b9a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b984:	4a0b      	ldr	r2, [pc, #44]	@ (800b9b4 <sys_timeouts_init+0x3c>)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	00db      	lsls	r3, r3, #3
 800b990:	4a08      	ldr	r2, [pc, #32]	@ (800b9b4 <sys_timeouts_init+0x3c>)
 800b992:	4413      	add	r3, r2
 800b994:	461a      	mov	r2, r3
 800b996:	4908      	ldr	r1, [pc, #32]	@ (800b9b8 <sys_timeouts_init+0x40>)
 800b998:	f000 f810 	bl	800b9bc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	607b      	str	r3, [r7, #4]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d9ed      	bls.n	800b984 <sys_timeouts_init+0xc>
  }
}
 800b9a8:	bf00      	nop
 800b9aa:	bf00      	nop
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	08011ec8 	.word	0x08011ec8
 800b9b8:	0800b915 	.word	0x0800b915

0800b9bc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9ce:	d306      	bcc.n	800b9de <sys_timeout+0x22>
 800b9d0:	4b0a      	ldr	r3, [pc, #40]	@ (800b9fc <sys_timeout+0x40>)
 800b9d2:	f240 1229 	movw	r2, #297	@ 0x129
 800b9d6:	490a      	ldr	r1, [pc, #40]	@ (800ba00 <sys_timeout+0x44>)
 800b9d8:	480a      	ldr	r0, [pc, #40]	@ (800ba04 <sys_timeout+0x48>)
 800b9da:	f002 fdd7 	bl	800e58c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b9de:	f7f7 fec7 	bl	8003770 <sys_now>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	68b9      	ldr	r1, [r7, #8]
 800b9ee:	6978      	ldr	r0, [r7, #20]
 800b9f0:	f7ff ff22 	bl	800b838 <sys_timeout_abs>
#endif
}
 800b9f4:	bf00      	nop
 800b9f6:	3718      	adds	r7, #24
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	080112e4 	.word	0x080112e4
 800ba00:	08011380 	.word	0x08011380
 800ba04:	08011358 	.word	0x08011358

0800ba08 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ba0e:	f7f7 feaf 	bl	8003770 <sys_now>
 800ba12:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ba14:	4b1a      	ldr	r3, [pc, #104]	@ (800ba80 <sys_check_timeouts+0x78>)
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d001      	beq.n	800ba22 <sys_check_timeouts+0x1a>
 800ba1e:	f7f9 f8c3 	bl	8004ba8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800ba22:	4b18      	ldr	r3, [pc, #96]	@ (800ba84 <sys_check_timeouts+0x7c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d022      	beq.n	800ba74 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	0fdb      	lsrs	r3, r3, #31
 800ba38:	f003 0301 	and.w	r3, r3, #1
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d11a      	bne.n	800ba78 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a0f      	ldr	r2, [pc, #60]	@ (800ba84 <sys_check_timeouts+0x7c>)
 800ba48:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	4a0b      	ldr	r2, [pc, #44]	@ (800ba88 <sys_check_timeouts+0x80>)
 800ba5c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ba5e:	68b9      	ldr	r1, [r7, #8]
 800ba60:	2006      	movs	r0, #6
 800ba62:	f7f8 fd65 	bl	8004530 <memp_free>
    if (handler != NULL) {
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d0d3      	beq.n	800ba14 <sys_check_timeouts+0xc>
      handler(arg);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6838      	ldr	r0, [r7, #0]
 800ba70:	4798      	blx	r3
  do {
 800ba72:	e7cf      	b.n	800ba14 <sys_check_timeouts+0xc>
      return;
 800ba74:	bf00      	nop
 800ba76:	e000      	b.n	800ba7a <sys_check_timeouts+0x72>
      return;
 800ba78:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	20008241 	.word	0x20008241
 800ba84:	20008294 	.word	0x20008294
 800ba88:	20008298 	.word	0x20008298

0800ba8c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ba90:	f002 fc7c 	bl	800e38c <rand>
 800ba94:	4603      	mov	r3, r0
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	4b01      	ldr	r3, [pc, #4]	@ (800baac <udp_init+0x20>)
 800baa6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800baa8:	bf00      	nop
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	20000028 	.word	0x20000028

0800bab0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	4613      	mov	r3, r2
 800babc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d105      	bne.n	800bad0 <udp_input_local_match+0x20>
 800bac4:	4b27      	ldr	r3, [pc, #156]	@ (800bb64 <udp_input_local_match+0xb4>)
 800bac6:	2287      	movs	r2, #135	@ 0x87
 800bac8:	4927      	ldr	r1, [pc, #156]	@ (800bb68 <udp_input_local_match+0xb8>)
 800baca:	4828      	ldr	r0, [pc, #160]	@ (800bb6c <udp_input_local_match+0xbc>)
 800bacc:	f002 fd5e 	bl	800e58c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d105      	bne.n	800bae2 <udp_input_local_match+0x32>
 800bad6:	4b23      	ldr	r3, [pc, #140]	@ (800bb64 <udp_input_local_match+0xb4>)
 800bad8:	2288      	movs	r2, #136	@ 0x88
 800bada:	4925      	ldr	r1, [pc, #148]	@ (800bb70 <udp_input_local_match+0xc0>)
 800badc:	4823      	ldr	r0, [pc, #140]	@ (800bb6c <udp_input_local_match+0xbc>)
 800bade:	f002 fd55 	bl	800e58c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	7a1b      	ldrb	r3, [r3, #8]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00b      	beq.n	800bb02 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	7a1a      	ldrb	r2, [r3, #8]
 800baee:	4b21      	ldr	r3, [pc, #132]	@ (800bb74 <udp_input_local_match+0xc4>)
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800baf6:	3301      	adds	r3, #1
 800baf8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d001      	beq.n	800bb02 <udp_input_local_match+0x52>
    return 0;
 800bafe:	2300      	movs	r3, #0
 800bb00:	e02b      	b.n	800bb5a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bb02:	79fb      	ldrb	r3, [r7, #7]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d018      	beq.n	800bb3a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d013      	beq.n	800bb36 <udp_input_local_match+0x86>
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00f      	beq.n	800bb36 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bb16:	4b17      	ldr	r3, [pc, #92]	@ (800bb74 <udp_input_local_match+0xc4>)
 800bb18:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bb1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb1e:	d00a      	beq.n	800bb36 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	4b13      	ldr	r3, [pc, #76]	@ (800bb74 <udp_input_local_match+0xc4>)
 800bb26:	695b      	ldr	r3, [r3, #20]
 800bb28:	405a      	eors	r2, r3
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	3308      	adds	r3, #8
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d110      	bne.n	800bb58 <udp_input_local_match+0xa8>
          return 1;
 800bb36:	2301      	movs	r3, #1
 800bb38:	e00f      	b.n	800bb5a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d009      	beq.n	800bb54 <udp_input_local_match+0xa4>
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d005      	beq.n	800bb54 <udp_input_local_match+0xa4>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	4b09      	ldr	r3, [pc, #36]	@ (800bb74 <udp_input_local_match+0xc4>)
 800bb4e:	695b      	ldr	r3, [r3, #20]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d101      	bne.n	800bb58 <udp_input_local_match+0xa8>
        return 1;
 800bb54:	2301      	movs	r3, #1
 800bb56:	e000      	b.n	800bb5a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bb58:	2300      	movs	r3, #0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	080113cc 	.word	0x080113cc
 800bb68:	080113fc 	.word	0x080113fc
 800bb6c:	08011420 	.word	0x08011420
 800bb70:	08011448 	.word	0x08011448
 800bb74:	20004cd4 	.word	0x20004cd4

0800bb78 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bb78:	b590      	push	{r4, r7, lr}
 800bb7a:	b08d      	sub	sp, #52	@ 0x34
 800bb7c:	af02      	add	r7, sp, #8
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bb82:	2300      	movs	r3, #0
 800bb84:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d105      	bne.n	800bb98 <udp_input+0x20>
 800bb8c:	4b7c      	ldr	r3, [pc, #496]	@ (800bd80 <udp_input+0x208>)
 800bb8e:	22cf      	movs	r2, #207	@ 0xcf
 800bb90:	497c      	ldr	r1, [pc, #496]	@ (800bd84 <udp_input+0x20c>)
 800bb92:	487d      	ldr	r0, [pc, #500]	@ (800bd88 <udp_input+0x210>)
 800bb94:	f002 fcfa 	bl	800e58c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d105      	bne.n	800bbaa <udp_input+0x32>
 800bb9e:	4b78      	ldr	r3, [pc, #480]	@ (800bd80 <udp_input+0x208>)
 800bba0:	22d0      	movs	r2, #208	@ 0xd0
 800bba2:	497a      	ldr	r1, [pc, #488]	@ (800bd8c <udp_input+0x214>)
 800bba4:	4878      	ldr	r0, [pc, #480]	@ (800bd88 <udp_input+0x210>)
 800bba6:	f002 fcf1 	bl	800e58c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	895b      	ldrh	r3, [r3, #10]
 800bbae:	2b07      	cmp	r3, #7
 800bbb0:	d803      	bhi.n	800bbba <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f7f9 fb32 	bl	800521c <pbuf_free>
    goto end;
 800bbb8:	e0de      	b.n	800bd78 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bbc0:	4b73      	ldr	r3, [pc, #460]	@ (800bd90 <udp_input+0x218>)
 800bbc2:	695b      	ldr	r3, [r3, #20]
 800bbc4:	4a72      	ldr	r2, [pc, #456]	@ (800bd90 <udp_input+0x218>)
 800bbc6:	6812      	ldr	r2, [r2, #0]
 800bbc8:	4611      	mov	r1, r2
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f001 fc88 	bl	800d4e0 <ip4_addr_isbroadcast_u32>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	881b      	ldrh	r3, [r3, #0]
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7f7 ffc0 	bl	8003b60 <lwip_htons>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	885b      	ldrh	r3, [r3, #2]
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7f7 ffb8 	bl	8003b60 <lwip_htons>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc00:	4b64      	ldr	r3, [pc, #400]	@ (800bd94 <udp_input+0x21c>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc06:	e054      	b.n	800bcb2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bc08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc0a:	8a5b      	ldrh	r3, [r3, #18]
 800bc0c:	89fa      	ldrh	r2, [r7, #14]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d14a      	bne.n	800bca8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bc12:	7cfb      	ldrb	r3, [r7, #19]
 800bc14:	461a      	mov	r2, r3
 800bc16:	6839      	ldr	r1, [r7, #0]
 800bc18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc1a:	f7ff ff49 	bl	800bab0 <udp_input_local_match>
 800bc1e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d041      	beq.n	800bca8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc26:	7c1b      	ldrb	r3, [r3, #16]
 800bc28:	f003 0304 	and.w	r3, r3, #4
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d11d      	bne.n	800bc6c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d102      	bne.n	800bc3c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800bc36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc38:	61fb      	str	r3, [r7, #28]
 800bc3a:	e017      	b.n	800bc6c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bc3c:	7cfb      	ldrb	r3, [r7, #19]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d014      	beq.n	800bc6c <udp_input+0xf4>
 800bc42:	4b53      	ldr	r3, [pc, #332]	@ (800bd90 <udp_input+0x218>)
 800bc44:	695b      	ldr	r3, [r3, #20]
 800bc46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc4a:	d10f      	bne.n	800bc6c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	3304      	adds	r3, #4
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d008      	beq.n	800bc6c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800bc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	3304      	adds	r3, #4
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d101      	bne.n	800bc6c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800bc68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6e:	8a9b      	ldrh	r3, [r3, #20]
 800bc70:	8a3a      	ldrh	r2, [r7, #16]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d118      	bne.n	800bca8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bc76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc78:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d005      	beq.n	800bc8a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800bc7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc80:	685a      	ldr	r2, [r3, #4]
 800bc82:	4b43      	ldr	r3, [pc, #268]	@ (800bd90 <udp_input+0x218>)
 800bc84:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d10e      	bne.n	800bca8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800bc8a:	6a3b      	ldr	r3, [r7, #32]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d014      	beq.n	800bcba <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800bc90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc92:	68da      	ldr	r2, [r3, #12]
 800bc94:	6a3b      	ldr	r3, [r7, #32]
 800bc96:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bc98:	4b3e      	ldr	r3, [pc, #248]	@ (800bd94 <udp_input+0x21c>)
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc9e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bca0:	4a3c      	ldr	r2, [pc, #240]	@ (800bd94 <udp_input+0x21c>)
 800bca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800bca6:	e008      	b.n	800bcba <udp_input+0x142>
      }
    }

    prev = pcb;
 800bca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcaa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1a7      	bne.n	800bc08 <udp_input+0x90>
 800bcb8:	e000      	b.n	800bcbc <udp_input+0x144>
        break;
 800bcba:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800bcbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d101      	bne.n	800bcc6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800bcc2:	69fb      	ldr	r3, [r7, #28]
 800bcc4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <udp_input+0x15a>
    for_us = 1;
 800bccc:	2301      	movs	r3, #1
 800bcce:	76fb      	strb	r3, [r7, #27]
 800bcd0:	e00a      	b.n	800bce8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	3304      	adds	r3, #4
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	4b2d      	ldr	r3, [pc, #180]	@ (800bd90 <udp_input+0x218>)
 800bcda:	695b      	ldr	r3, [r3, #20]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	bf0c      	ite	eq
 800bce0:	2301      	moveq	r3, #1
 800bce2:	2300      	movne	r3, #0
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800bce8:	7efb      	ldrb	r3, [r7, #27]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d041      	beq.n	800bd72 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bcee:	2108      	movs	r1, #8
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7f9 fa0d 	bl	8005110 <pbuf_remove_header>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00a      	beq.n	800bd12 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bcfc:	4b20      	ldr	r3, [pc, #128]	@ (800bd80 <udp_input+0x208>)
 800bcfe:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800bd02:	4925      	ldr	r1, [pc, #148]	@ (800bd98 <udp_input+0x220>)
 800bd04:	4820      	ldr	r0, [pc, #128]	@ (800bd88 <udp_input+0x210>)
 800bd06:	f002 fc41 	bl	800e58c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f7f9 fa86 	bl	800521c <pbuf_free>
      goto end;
 800bd10:	e032      	b.n	800bd78 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800bd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d012      	beq.n	800bd3e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800bd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1a:	699b      	ldr	r3, [r3, #24]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00a      	beq.n	800bd36 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bd20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd22:	699c      	ldr	r4, [r3, #24]
 800bd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd26:	69d8      	ldr	r0, [r3, #28]
 800bd28:	8a3b      	ldrh	r3, [r7, #16]
 800bd2a:	9300      	str	r3, [sp, #0]
 800bd2c:	4b1b      	ldr	r3, [pc, #108]	@ (800bd9c <udp_input+0x224>)
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bd32:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800bd34:	e021      	b.n	800bd7a <udp_input+0x202>
        pbuf_free(p);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7f9 fa70 	bl	800521c <pbuf_free>
        goto end;
 800bd3c:	e01c      	b.n	800bd78 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800bd3e:	7cfb      	ldrb	r3, [r7, #19]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d112      	bne.n	800bd6a <udp_input+0x1f2>
 800bd44:	4b12      	ldr	r3, [pc, #72]	@ (800bd90 <udp_input+0x218>)
 800bd46:	695b      	ldr	r3, [r3, #20]
 800bd48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bd4c:	2be0      	cmp	r3, #224	@ 0xe0
 800bd4e:	d00c      	beq.n	800bd6a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bd50:	4b0f      	ldr	r3, [pc, #60]	@ (800bd90 <udp_input+0x218>)
 800bd52:	899b      	ldrh	r3, [r3, #12]
 800bd54:	3308      	adds	r3, #8
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	b21b      	sxth	r3, r3
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f7f9 fa4a 	bl	80051f6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bd62:	2103      	movs	r1, #3
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f001 f89b 	bl	800cea0 <icmp_dest_unreach>
      pbuf_free(p);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7f9 fa56 	bl	800521c <pbuf_free>
  return;
 800bd70:	e003      	b.n	800bd7a <udp_input+0x202>
    pbuf_free(p);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f7f9 fa52 	bl	800521c <pbuf_free>
  return;
 800bd78:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bd7a:	372c      	adds	r7, #44	@ 0x2c
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd90      	pop	{r4, r7, pc}
 800bd80:	080113cc 	.word	0x080113cc
 800bd84:	08011470 	.word	0x08011470
 800bd88:	08011420 	.word	0x08011420
 800bd8c:	08011488 	.word	0x08011488
 800bd90:	20004cd4 	.word	0x20004cd4
 800bd94:	200082a0 	.word	0x200082a0
 800bd98:	080114a4 	.word	0x080114a4
 800bd9c:	20004ce4 	.word	0x20004ce4

0800bda0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d01e      	beq.n	800bdee <udp_netif_ip_addr_changed+0x4e>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d01a      	beq.n	800bdee <udp_netif_ip_addr_changed+0x4e>
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d017      	beq.n	800bdee <udp_netif_ip_addr_changed+0x4e>
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d013      	beq.n	800bdee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bdc6:	4b0d      	ldr	r3, [pc, #52]	@ (800bdfc <udp_netif_ip_addr_changed+0x5c>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	60fb      	str	r3, [r7, #12]
 800bdcc:	e00c      	b.n	800bde8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d103      	bne.n	800bde2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	60fb      	str	r3, [r7, #12]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d1ef      	bne.n	800bdce <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800bdee:	bf00      	nop
 800bdf0:	3714      	adds	r7, #20
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop
 800bdfc:	200082a0 	.word	0x200082a0

0800be00 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800be08:	4915      	ldr	r1, [pc, #84]	@ (800be60 <etharp_free_entry+0x60>)
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	4613      	mov	r3, r2
 800be0e:	005b      	lsls	r3, r3, #1
 800be10:	4413      	add	r3, r2
 800be12:	00db      	lsls	r3, r3, #3
 800be14:	440b      	add	r3, r1
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d013      	beq.n	800be44 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800be1c:	4910      	ldr	r1, [pc, #64]	@ (800be60 <etharp_free_entry+0x60>)
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	4613      	mov	r3, r2
 800be22:	005b      	lsls	r3, r3, #1
 800be24:	4413      	add	r3, r2
 800be26:	00db      	lsls	r3, r3, #3
 800be28:	440b      	add	r3, r1
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7f9 f9f5 	bl	800521c <pbuf_free>
    arp_table[i].q = NULL;
 800be32:	490b      	ldr	r1, [pc, #44]	@ (800be60 <etharp_free_entry+0x60>)
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	4613      	mov	r3, r2
 800be38:	005b      	lsls	r3, r3, #1
 800be3a:	4413      	add	r3, r2
 800be3c:	00db      	lsls	r3, r3, #3
 800be3e:	440b      	add	r3, r1
 800be40:	2200      	movs	r2, #0
 800be42:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800be44:	4906      	ldr	r1, [pc, #24]	@ (800be60 <etharp_free_entry+0x60>)
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	4613      	mov	r3, r2
 800be4a:	005b      	lsls	r3, r3, #1
 800be4c:	4413      	add	r3, r2
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	440b      	add	r3, r1
 800be52:	3314      	adds	r3, #20
 800be54:	2200      	movs	r2, #0
 800be56:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800be58:	bf00      	nop
 800be5a:	3708      	adds	r7, #8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	200082a4 	.word	0x200082a4

0800be64 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800be6a:	2300      	movs	r3, #0
 800be6c:	607b      	str	r3, [r7, #4]
 800be6e:	e096      	b.n	800bf9e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800be70:	494f      	ldr	r1, [pc, #316]	@ (800bfb0 <etharp_tmr+0x14c>)
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	4613      	mov	r3, r2
 800be76:	005b      	lsls	r3, r3, #1
 800be78:	4413      	add	r3, r2
 800be7a:	00db      	lsls	r3, r3, #3
 800be7c:	440b      	add	r3, r1
 800be7e:	3314      	adds	r3, #20
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800be84:	78fb      	ldrb	r3, [r7, #3]
 800be86:	2b00      	cmp	r3, #0
 800be88:	f000 8086 	beq.w	800bf98 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800be8c:	4948      	ldr	r1, [pc, #288]	@ (800bfb0 <etharp_tmr+0x14c>)
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	4613      	mov	r3, r2
 800be92:	005b      	lsls	r3, r3, #1
 800be94:	4413      	add	r3, r2
 800be96:	00db      	lsls	r3, r3, #3
 800be98:	440b      	add	r3, r1
 800be9a:	3312      	adds	r3, #18
 800be9c:	881b      	ldrh	r3, [r3, #0]
 800be9e:	3301      	adds	r3, #1
 800bea0:	b298      	uxth	r0, r3
 800bea2:	4943      	ldr	r1, [pc, #268]	@ (800bfb0 <etharp_tmr+0x14c>)
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	4613      	mov	r3, r2
 800bea8:	005b      	lsls	r3, r3, #1
 800beaa:	4413      	add	r3, r2
 800beac:	00db      	lsls	r3, r3, #3
 800beae:	440b      	add	r3, r1
 800beb0:	3312      	adds	r3, #18
 800beb2:	4602      	mov	r2, r0
 800beb4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800beb6:	493e      	ldr	r1, [pc, #248]	@ (800bfb0 <etharp_tmr+0x14c>)
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	4613      	mov	r3, r2
 800bebc:	005b      	lsls	r3, r3, #1
 800bebe:	4413      	add	r3, r2
 800bec0:	00db      	lsls	r3, r3, #3
 800bec2:	440b      	add	r3, r1
 800bec4:	3312      	adds	r3, #18
 800bec6:	881b      	ldrh	r3, [r3, #0]
 800bec8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800becc:	d215      	bcs.n	800befa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bece:	4938      	ldr	r1, [pc, #224]	@ (800bfb0 <etharp_tmr+0x14c>)
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	4613      	mov	r3, r2
 800bed4:	005b      	lsls	r3, r3, #1
 800bed6:	4413      	add	r3, r2
 800bed8:	00db      	lsls	r3, r3, #3
 800beda:	440b      	add	r3, r1
 800bedc:	3314      	adds	r3, #20
 800bede:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d10e      	bne.n	800bf02 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800bee4:	4932      	ldr	r1, [pc, #200]	@ (800bfb0 <etharp_tmr+0x14c>)
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	4613      	mov	r3, r2
 800beea:	005b      	lsls	r3, r3, #1
 800beec:	4413      	add	r3, r2
 800beee:	00db      	lsls	r3, r3, #3
 800bef0:	440b      	add	r3, r1
 800bef2:	3312      	adds	r3, #18
 800bef4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bef6:	2b04      	cmp	r3, #4
 800bef8:	d903      	bls.n	800bf02 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f7ff ff80 	bl	800be00 <etharp_free_entry>
 800bf00:	e04a      	b.n	800bf98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bf02:	492b      	ldr	r1, [pc, #172]	@ (800bfb0 <etharp_tmr+0x14c>)
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	4613      	mov	r3, r2
 800bf08:	005b      	lsls	r3, r3, #1
 800bf0a:	4413      	add	r3, r2
 800bf0c:	00db      	lsls	r3, r3, #3
 800bf0e:	440b      	add	r3, r1
 800bf10:	3314      	adds	r3, #20
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	2b03      	cmp	r3, #3
 800bf16:	d10a      	bne.n	800bf2e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800bf18:	4925      	ldr	r1, [pc, #148]	@ (800bfb0 <etharp_tmr+0x14c>)
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	005b      	lsls	r3, r3, #1
 800bf20:	4413      	add	r3, r2
 800bf22:	00db      	lsls	r3, r3, #3
 800bf24:	440b      	add	r3, r1
 800bf26:	3314      	adds	r3, #20
 800bf28:	2204      	movs	r2, #4
 800bf2a:	701a      	strb	r2, [r3, #0]
 800bf2c:	e034      	b.n	800bf98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800bf2e:	4920      	ldr	r1, [pc, #128]	@ (800bfb0 <etharp_tmr+0x14c>)
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	4613      	mov	r3, r2
 800bf34:	005b      	lsls	r3, r3, #1
 800bf36:	4413      	add	r3, r2
 800bf38:	00db      	lsls	r3, r3, #3
 800bf3a:	440b      	add	r3, r1
 800bf3c:	3314      	adds	r3, #20
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	2b04      	cmp	r3, #4
 800bf42:	d10a      	bne.n	800bf5a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bf44:	491a      	ldr	r1, [pc, #104]	@ (800bfb0 <etharp_tmr+0x14c>)
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	4613      	mov	r3, r2
 800bf4a:	005b      	lsls	r3, r3, #1
 800bf4c:	4413      	add	r3, r2
 800bf4e:	00db      	lsls	r3, r3, #3
 800bf50:	440b      	add	r3, r1
 800bf52:	3314      	adds	r3, #20
 800bf54:	2202      	movs	r2, #2
 800bf56:	701a      	strb	r2, [r3, #0]
 800bf58:	e01e      	b.n	800bf98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bf5a:	4915      	ldr	r1, [pc, #84]	@ (800bfb0 <etharp_tmr+0x14c>)
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	4613      	mov	r3, r2
 800bf60:	005b      	lsls	r3, r3, #1
 800bf62:	4413      	add	r3, r2
 800bf64:	00db      	lsls	r3, r3, #3
 800bf66:	440b      	add	r3, r1
 800bf68:	3314      	adds	r3, #20
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d113      	bne.n	800bf98 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bf70:	490f      	ldr	r1, [pc, #60]	@ (800bfb0 <etharp_tmr+0x14c>)
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	4613      	mov	r3, r2
 800bf76:	005b      	lsls	r3, r3, #1
 800bf78:	4413      	add	r3, r2
 800bf7a:	00db      	lsls	r3, r3, #3
 800bf7c:	440b      	add	r3, r1
 800bf7e:	3308      	adds	r3, #8
 800bf80:	6818      	ldr	r0, [r3, #0]
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	4613      	mov	r3, r2
 800bf86:	005b      	lsls	r3, r3, #1
 800bf88:	4413      	add	r3, r2
 800bf8a:	00db      	lsls	r3, r3, #3
 800bf8c:	4a08      	ldr	r2, [pc, #32]	@ (800bfb0 <etharp_tmr+0x14c>)
 800bf8e:	4413      	add	r3, r2
 800bf90:	3304      	adds	r3, #4
 800bf92:	4619      	mov	r1, r3
 800bf94:	f000 fe6e 	bl	800cc74 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	607b      	str	r3, [r7, #4]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2b09      	cmp	r3, #9
 800bfa2:	f77f af65 	ble.w	800be70 <etharp_tmr+0xc>
      }
    }
  }
}
 800bfa6:	bf00      	nop
 800bfa8:	bf00      	nop
 800bfaa:	3708      	adds	r7, #8
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	200082a4 	.word	0x200082a4

0800bfb4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b08a      	sub	sp, #40	@ 0x28
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	607a      	str	r2, [r7, #4]
 800bfc0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bfc2:	230a      	movs	r3, #10
 800bfc4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800bfc6:	230a      	movs	r3, #10
 800bfc8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800bfca:	230a      	movs	r3, #10
 800bfcc:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bfd2:	230a      	movs	r3, #10
 800bfd4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	83bb      	strh	r3, [r7, #28]
 800bfda:	2300      	movs	r3, #0
 800bfdc:	837b      	strh	r3, [r7, #26]
 800bfde:	2300      	movs	r3, #0
 800bfe0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	843b      	strh	r3, [r7, #32]
 800bfe6:	e0ae      	b.n	800c146 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bfe8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfec:	49a6      	ldr	r1, [pc, #664]	@ (800c288 <etharp_find_entry+0x2d4>)
 800bfee:	4613      	mov	r3, r2
 800bff0:	005b      	lsls	r3, r3, #1
 800bff2:	4413      	add	r3, r2
 800bff4:	00db      	lsls	r3, r3, #3
 800bff6:	440b      	add	r3, r1
 800bff8:	3314      	adds	r3, #20
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bffe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c002:	2b0a      	cmp	r3, #10
 800c004:	d105      	bne.n	800c012 <etharp_find_entry+0x5e>
 800c006:	7dfb      	ldrb	r3, [r7, #23]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d102      	bne.n	800c012 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c00c:	8c3b      	ldrh	r3, [r7, #32]
 800c00e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c010:	e095      	b.n	800c13e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c012:	7dfb      	ldrb	r3, [r7, #23]
 800c014:	2b00      	cmp	r3, #0
 800c016:	f000 8092 	beq.w	800c13e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c01a:	7dfb      	ldrb	r3, [r7, #23]
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d009      	beq.n	800c034 <etharp_find_entry+0x80>
 800c020:	7dfb      	ldrb	r3, [r7, #23]
 800c022:	2b01      	cmp	r3, #1
 800c024:	d806      	bhi.n	800c034 <etharp_find_entry+0x80>
 800c026:	4b99      	ldr	r3, [pc, #612]	@ (800c28c <etharp_find_entry+0x2d8>)
 800c028:	f240 1223 	movw	r2, #291	@ 0x123
 800c02c:	4998      	ldr	r1, [pc, #608]	@ (800c290 <etharp_find_entry+0x2dc>)
 800c02e:	4899      	ldr	r0, [pc, #612]	@ (800c294 <etharp_find_entry+0x2e0>)
 800c030:	f002 faac 	bl	800e58c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d020      	beq.n	800c07c <etharp_find_entry+0xc8>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6819      	ldr	r1, [r3, #0]
 800c03e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c042:	4891      	ldr	r0, [pc, #580]	@ (800c288 <etharp_find_entry+0x2d4>)
 800c044:	4613      	mov	r3, r2
 800c046:	005b      	lsls	r3, r3, #1
 800c048:	4413      	add	r3, r2
 800c04a:	00db      	lsls	r3, r3, #3
 800c04c:	4403      	add	r3, r0
 800c04e:	3304      	adds	r3, #4
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4299      	cmp	r1, r3
 800c054:	d112      	bne.n	800c07c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00c      	beq.n	800c076 <etharp_find_entry+0xc2>
 800c05c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c060:	4989      	ldr	r1, [pc, #548]	@ (800c288 <etharp_find_entry+0x2d4>)
 800c062:	4613      	mov	r3, r2
 800c064:	005b      	lsls	r3, r3, #1
 800c066:	4413      	add	r3, r2
 800c068:	00db      	lsls	r3, r3, #3
 800c06a:	440b      	add	r3, r1
 800c06c:	3308      	adds	r3, #8
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	429a      	cmp	r2, r3
 800c074:	d102      	bne.n	800c07c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c076:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c07a:	e100      	b.n	800c27e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c07c:	7dfb      	ldrb	r3, [r7, #23]
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d140      	bne.n	800c104 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c082:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c086:	4980      	ldr	r1, [pc, #512]	@ (800c288 <etharp_find_entry+0x2d4>)
 800c088:	4613      	mov	r3, r2
 800c08a:	005b      	lsls	r3, r3, #1
 800c08c:	4413      	add	r3, r2
 800c08e:	00db      	lsls	r3, r3, #3
 800c090:	440b      	add	r3, r1
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d01a      	beq.n	800c0ce <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c098:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c09c:	497a      	ldr	r1, [pc, #488]	@ (800c288 <etharp_find_entry+0x2d4>)
 800c09e:	4613      	mov	r3, r2
 800c0a0:	005b      	lsls	r3, r3, #1
 800c0a2:	4413      	add	r3, r2
 800c0a4:	00db      	lsls	r3, r3, #3
 800c0a6:	440b      	add	r3, r1
 800c0a8:	3312      	adds	r3, #18
 800c0aa:	881b      	ldrh	r3, [r3, #0]
 800c0ac:	8bba      	ldrh	r2, [r7, #28]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d845      	bhi.n	800c13e <etharp_find_entry+0x18a>
            old_queue = i;
 800c0b2:	8c3b      	ldrh	r3, [r7, #32]
 800c0b4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c0b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0ba:	4973      	ldr	r1, [pc, #460]	@ (800c288 <etharp_find_entry+0x2d4>)
 800c0bc:	4613      	mov	r3, r2
 800c0be:	005b      	lsls	r3, r3, #1
 800c0c0:	4413      	add	r3, r2
 800c0c2:	00db      	lsls	r3, r3, #3
 800c0c4:	440b      	add	r3, r1
 800c0c6:	3312      	adds	r3, #18
 800c0c8:	881b      	ldrh	r3, [r3, #0]
 800c0ca:	83bb      	strh	r3, [r7, #28]
 800c0cc:	e037      	b.n	800c13e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c0ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0d2:	496d      	ldr	r1, [pc, #436]	@ (800c288 <etharp_find_entry+0x2d4>)
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	005b      	lsls	r3, r3, #1
 800c0d8:	4413      	add	r3, r2
 800c0da:	00db      	lsls	r3, r3, #3
 800c0dc:	440b      	add	r3, r1
 800c0de:	3312      	adds	r3, #18
 800c0e0:	881b      	ldrh	r3, [r3, #0]
 800c0e2:	8b7a      	ldrh	r2, [r7, #26]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d82a      	bhi.n	800c13e <etharp_find_entry+0x18a>
            old_pending = i;
 800c0e8:	8c3b      	ldrh	r3, [r7, #32]
 800c0ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800c0ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0f0:	4965      	ldr	r1, [pc, #404]	@ (800c288 <etharp_find_entry+0x2d4>)
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	005b      	lsls	r3, r3, #1
 800c0f6:	4413      	add	r3, r2
 800c0f8:	00db      	lsls	r3, r3, #3
 800c0fa:	440b      	add	r3, r1
 800c0fc:	3312      	adds	r3, #18
 800c0fe:	881b      	ldrh	r3, [r3, #0]
 800c100:	837b      	strh	r3, [r7, #26]
 800c102:	e01c      	b.n	800c13e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c104:	7dfb      	ldrb	r3, [r7, #23]
 800c106:	2b01      	cmp	r3, #1
 800c108:	d919      	bls.n	800c13e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c10a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c10e:	495e      	ldr	r1, [pc, #376]	@ (800c288 <etharp_find_entry+0x2d4>)
 800c110:	4613      	mov	r3, r2
 800c112:	005b      	lsls	r3, r3, #1
 800c114:	4413      	add	r3, r2
 800c116:	00db      	lsls	r3, r3, #3
 800c118:	440b      	add	r3, r1
 800c11a:	3312      	adds	r3, #18
 800c11c:	881b      	ldrh	r3, [r3, #0]
 800c11e:	8b3a      	ldrh	r2, [r7, #24]
 800c120:	429a      	cmp	r2, r3
 800c122:	d80c      	bhi.n	800c13e <etharp_find_entry+0x18a>
            old_stable = i;
 800c124:	8c3b      	ldrh	r3, [r7, #32]
 800c126:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800c128:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c12c:	4956      	ldr	r1, [pc, #344]	@ (800c288 <etharp_find_entry+0x2d4>)
 800c12e:	4613      	mov	r3, r2
 800c130:	005b      	lsls	r3, r3, #1
 800c132:	4413      	add	r3, r2
 800c134:	00db      	lsls	r3, r3, #3
 800c136:	440b      	add	r3, r1
 800c138:	3312      	adds	r3, #18
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c13e:	8c3b      	ldrh	r3, [r7, #32]
 800c140:	3301      	adds	r3, #1
 800c142:	b29b      	uxth	r3, r3
 800c144:	843b      	strh	r3, [r7, #32]
 800c146:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c14a:	2b09      	cmp	r3, #9
 800c14c:	f77f af4c 	ble.w	800bfe8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c150:	7afb      	ldrb	r3, [r7, #11]
 800c152:	f003 0302 	and.w	r3, r3, #2
 800c156:	2b00      	cmp	r3, #0
 800c158:	d108      	bne.n	800c16c <etharp_find_entry+0x1b8>
 800c15a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c15e:	2b0a      	cmp	r3, #10
 800c160:	d107      	bne.n	800c172 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c162:	7afb      	ldrb	r3, [r7, #11]
 800c164:	f003 0301 	and.w	r3, r3, #1
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d102      	bne.n	800c172 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c16c:	f04f 33ff 	mov.w	r3, #4294967295
 800c170:	e085      	b.n	800c27e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c172:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c176:	2b09      	cmp	r3, #9
 800c178:	dc02      	bgt.n	800c180 <etharp_find_entry+0x1cc>
    i = empty;
 800c17a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c17c:	843b      	strh	r3, [r7, #32]
 800c17e:	e039      	b.n	800c1f4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c180:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800c184:	2b09      	cmp	r3, #9
 800c186:	dc14      	bgt.n	800c1b2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c188:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c18a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c18c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c190:	493d      	ldr	r1, [pc, #244]	@ (800c288 <etharp_find_entry+0x2d4>)
 800c192:	4613      	mov	r3, r2
 800c194:	005b      	lsls	r3, r3, #1
 800c196:	4413      	add	r3, r2
 800c198:	00db      	lsls	r3, r3, #3
 800c19a:	440b      	add	r3, r1
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d018      	beq.n	800c1d4 <etharp_find_entry+0x220>
 800c1a2:	4b3a      	ldr	r3, [pc, #232]	@ (800c28c <etharp_find_entry+0x2d8>)
 800c1a4:	f240 126d 	movw	r2, #365	@ 0x16d
 800c1a8:	493b      	ldr	r1, [pc, #236]	@ (800c298 <etharp_find_entry+0x2e4>)
 800c1aa:	483a      	ldr	r0, [pc, #232]	@ (800c294 <etharp_find_entry+0x2e0>)
 800c1ac:	f002 f9ee 	bl	800e58c <iprintf>
 800c1b0:	e010      	b.n	800c1d4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c1b2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800c1b6:	2b09      	cmp	r3, #9
 800c1b8:	dc02      	bgt.n	800c1c0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c1ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c1bc:	843b      	strh	r3, [r7, #32]
 800c1be:	e009      	b.n	800c1d4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c1c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c1c4:	2b09      	cmp	r3, #9
 800c1c6:	dc02      	bgt.n	800c1ce <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c1c8:	8bfb      	ldrh	r3, [r7, #30]
 800c1ca:	843b      	strh	r3, [r7, #32]
 800c1cc:	e002      	b.n	800c1d4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c1ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c1d2:	e054      	b.n	800c27e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c1d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c1d8:	2b09      	cmp	r3, #9
 800c1da:	dd06      	ble.n	800c1ea <etharp_find_entry+0x236>
 800c1dc:	4b2b      	ldr	r3, [pc, #172]	@ (800c28c <etharp_find_entry+0x2d8>)
 800c1de:	f240 127f 	movw	r2, #383	@ 0x17f
 800c1e2:	492e      	ldr	r1, [pc, #184]	@ (800c29c <etharp_find_entry+0x2e8>)
 800c1e4:	482b      	ldr	r0, [pc, #172]	@ (800c294 <etharp_find_entry+0x2e0>)
 800c1e6:	f002 f9d1 	bl	800e58c <iprintf>
    etharp_free_entry(i);
 800c1ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7ff fe06 	bl	800be00 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c1f4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c1f8:	2b09      	cmp	r3, #9
 800c1fa:	dd06      	ble.n	800c20a <etharp_find_entry+0x256>
 800c1fc:	4b23      	ldr	r3, [pc, #140]	@ (800c28c <etharp_find_entry+0x2d8>)
 800c1fe:	f240 1283 	movw	r2, #387	@ 0x183
 800c202:	4926      	ldr	r1, [pc, #152]	@ (800c29c <etharp_find_entry+0x2e8>)
 800c204:	4823      	ldr	r0, [pc, #140]	@ (800c294 <etharp_find_entry+0x2e0>)
 800c206:	f002 f9c1 	bl	800e58c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c20a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c20e:	491e      	ldr	r1, [pc, #120]	@ (800c288 <etharp_find_entry+0x2d4>)
 800c210:	4613      	mov	r3, r2
 800c212:	005b      	lsls	r3, r3, #1
 800c214:	4413      	add	r3, r2
 800c216:	00db      	lsls	r3, r3, #3
 800c218:	440b      	add	r3, r1
 800c21a:	3314      	adds	r3, #20
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d006      	beq.n	800c230 <etharp_find_entry+0x27c>
 800c222:	4b1a      	ldr	r3, [pc, #104]	@ (800c28c <etharp_find_entry+0x2d8>)
 800c224:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800c228:	491d      	ldr	r1, [pc, #116]	@ (800c2a0 <etharp_find_entry+0x2ec>)
 800c22a:	481a      	ldr	r0, [pc, #104]	@ (800c294 <etharp_find_entry+0x2e0>)
 800c22c:	f002 f9ae 	bl	800e58c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00b      	beq.n	800c24e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c236:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6819      	ldr	r1, [r3, #0]
 800c23e:	4812      	ldr	r0, [pc, #72]	@ (800c288 <etharp_find_entry+0x2d4>)
 800c240:	4613      	mov	r3, r2
 800c242:	005b      	lsls	r3, r3, #1
 800c244:	4413      	add	r3, r2
 800c246:	00db      	lsls	r3, r3, #3
 800c248:	4403      	add	r3, r0
 800c24a:	3304      	adds	r3, #4
 800c24c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c24e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c252:	490d      	ldr	r1, [pc, #52]	@ (800c288 <etharp_find_entry+0x2d4>)
 800c254:	4613      	mov	r3, r2
 800c256:	005b      	lsls	r3, r3, #1
 800c258:	4413      	add	r3, r2
 800c25a:	00db      	lsls	r3, r3, #3
 800c25c:	440b      	add	r3, r1
 800c25e:	3312      	adds	r3, #18
 800c260:	2200      	movs	r2, #0
 800c262:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c264:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c268:	4907      	ldr	r1, [pc, #28]	@ (800c288 <etharp_find_entry+0x2d4>)
 800c26a:	4613      	mov	r3, r2
 800c26c:	005b      	lsls	r3, r3, #1
 800c26e:	4413      	add	r3, r2
 800c270:	00db      	lsls	r3, r3, #3
 800c272:	440b      	add	r3, r1
 800c274:	3308      	adds	r3, #8
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c27a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3728      	adds	r7, #40	@ 0x28
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	200082a4 	.word	0x200082a4
 800c28c:	08011730 	.word	0x08011730
 800c290:	08011768 	.word	0x08011768
 800c294:	080117a8 	.word	0x080117a8
 800c298:	080117d0 	.word	0x080117d0
 800c29c:	080117e8 	.word	0x080117e8
 800c2a0:	080117fc 	.word	0x080117fc

0800c2a4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b088      	sub	sp, #32
 800c2a8:	af02      	add	r7, sp, #8
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	607a      	str	r2, [r7, #4]
 800c2b0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c2b8:	2b06      	cmp	r3, #6
 800c2ba:	d006      	beq.n	800c2ca <etharp_update_arp_entry+0x26>
 800c2bc:	4b48      	ldr	r3, [pc, #288]	@ (800c3e0 <etharp_update_arp_entry+0x13c>)
 800c2be:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800c2c2:	4948      	ldr	r1, [pc, #288]	@ (800c3e4 <etharp_update_arp_entry+0x140>)
 800c2c4:	4848      	ldr	r0, [pc, #288]	@ (800c3e8 <etharp_update_arp_entry+0x144>)
 800c2c6:	f002 f961 	bl	800e58c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d012      	beq.n	800c2f6 <etharp_update_arp_entry+0x52>
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d00e      	beq.n	800c2f6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68f9      	ldr	r1, [r7, #12]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f001 f8fe 	bl	800d4e0 <ip4_addr_isbroadcast_u32>
 800c2e4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d105      	bne.n	800c2f6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c2f2:	2be0      	cmp	r3, #224	@ 0xe0
 800c2f4:	d102      	bne.n	800c2fc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c2f6:	f06f 030f 	mvn.w	r3, #15
 800c2fa:	e06c      	b.n	800c3d6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c2fc:	78fb      	ldrb	r3, [r7, #3]
 800c2fe:	68fa      	ldr	r2, [r7, #12]
 800c300:	4619      	mov	r1, r3
 800c302:	68b8      	ldr	r0, [r7, #8]
 800c304:	f7ff fe56 	bl	800bfb4 <etharp_find_entry>
 800c308:	4603      	mov	r3, r0
 800c30a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c30c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c310:	2b00      	cmp	r3, #0
 800c312:	da02      	bge.n	800c31a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c314:	8afb      	ldrh	r3, [r7, #22]
 800c316:	b25b      	sxtb	r3, r3
 800c318:	e05d      	b.n	800c3d6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c31a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c31e:	4933      	ldr	r1, [pc, #204]	@ (800c3ec <etharp_update_arp_entry+0x148>)
 800c320:	4613      	mov	r3, r2
 800c322:	005b      	lsls	r3, r3, #1
 800c324:	4413      	add	r3, r2
 800c326:	00db      	lsls	r3, r3, #3
 800c328:	440b      	add	r3, r1
 800c32a:	3314      	adds	r3, #20
 800c32c:	2202      	movs	r2, #2
 800c32e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c330:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c334:	492d      	ldr	r1, [pc, #180]	@ (800c3ec <etharp_update_arp_entry+0x148>)
 800c336:	4613      	mov	r3, r2
 800c338:	005b      	lsls	r3, r3, #1
 800c33a:	4413      	add	r3, r2
 800c33c:	00db      	lsls	r3, r3, #3
 800c33e:	440b      	add	r3, r1
 800c340:	3308      	adds	r3, #8
 800c342:	68fa      	ldr	r2, [r7, #12]
 800c344:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c346:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c34a:	4613      	mov	r3, r2
 800c34c:	005b      	lsls	r3, r3, #1
 800c34e:	4413      	add	r3, r2
 800c350:	00db      	lsls	r3, r3, #3
 800c352:	3308      	adds	r3, #8
 800c354:	4a25      	ldr	r2, [pc, #148]	@ (800c3ec <etharp_update_arp_entry+0x148>)
 800c356:	4413      	add	r3, r2
 800c358:	3304      	adds	r3, #4
 800c35a:	2206      	movs	r2, #6
 800c35c:	6879      	ldr	r1, [r7, #4]
 800c35e:	4618      	mov	r0, r3
 800c360:	f002 f9ef 	bl	800e742 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c364:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c368:	4920      	ldr	r1, [pc, #128]	@ (800c3ec <etharp_update_arp_entry+0x148>)
 800c36a:	4613      	mov	r3, r2
 800c36c:	005b      	lsls	r3, r3, #1
 800c36e:	4413      	add	r3, r2
 800c370:	00db      	lsls	r3, r3, #3
 800c372:	440b      	add	r3, r1
 800c374:	3312      	adds	r3, #18
 800c376:	2200      	movs	r2, #0
 800c378:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c37a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c37e:	491b      	ldr	r1, [pc, #108]	@ (800c3ec <etharp_update_arp_entry+0x148>)
 800c380:	4613      	mov	r3, r2
 800c382:	005b      	lsls	r3, r3, #1
 800c384:	4413      	add	r3, r2
 800c386:	00db      	lsls	r3, r3, #3
 800c388:	440b      	add	r3, r1
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d021      	beq.n	800c3d4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c390:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c394:	4915      	ldr	r1, [pc, #84]	@ (800c3ec <etharp_update_arp_entry+0x148>)
 800c396:	4613      	mov	r3, r2
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	4413      	add	r3, r2
 800c39c:	00db      	lsls	r3, r3, #3
 800c39e:	440b      	add	r3, r1
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c3a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c3a8:	4910      	ldr	r1, [pc, #64]	@ (800c3ec <etharp_update_arp_entry+0x148>)
 800c3aa:	4613      	mov	r3, r2
 800c3ac:	005b      	lsls	r3, r3, #1
 800c3ae:	4413      	add	r3, r2
 800c3b0:	00db      	lsls	r3, r3, #3
 800c3b2:	440b      	add	r3, r1
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800c3be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6939      	ldr	r1, [r7, #16]
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f001 ff97 	bl	800e2fc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c3ce:	6938      	ldr	r0, [r7, #16]
 800c3d0:	f7f8 ff24 	bl	800521c <pbuf_free>
  }
  return ERR_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3718      	adds	r7, #24
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	08011730 	.word	0x08011730
 800c3e4:	08011828 	.word	0x08011828
 800c3e8:	080117a8 	.word	0x080117a8
 800c3ec:	200082a4 	.word	0x200082a4

0800c3f0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	60fb      	str	r3, [r7, #12]
 800c3fc:	e01e      	b.n	800c43c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c3fe:	4913      	ldr	r1, [pc, #76]	@ (800c44c <etharp_cleanup_netif+0x5c>)
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	4613      	mov	r3, r2
 800c404:	005b      	lsls	r3, r3, #1
 800c406:	4413      	add	r3, r2
 800c408:	00db      	lsls	r3, r3, #3
 800c40a:	440b      	add	r3, r1
 800c40c:	3314      	adds	r3, #20
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c412:	7afb      	ldrb	r3, [r7, #11]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00e      	beq.n	800c436 <etharp_cleanup_netif+0x46>
 800c418:	490c      	ldr	r1, [pc, #48]	@ (800c44c <etharp_cleanup_netif+0x5c>)
 800c41a:	68fa      	ldr	r2, [r7, #12]
 800c41c:	4613      	mov	r3, r2
 800c41e:	005b      	lsls	r3, r3, #1
 800c420:	4413      	add	r3, r2
 800c422:	00db      	lsls	r3, r3, #3
 800c424:	440b      	add	r3, r1
 800c426:	3308      	adds	r3, #8
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d102      	bne.n	800c436 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c430:	68f8      	ldr	r0, [r7, #12]
 800c432:	f7ff fce5 	bl	800be00 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	3301      	adds	r3, #1
 800c43a:	60fb      	str	r3, [r7, #12]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2b09      	cmp	r3, #9
 800c440:	dddd      	ble.n	800c3fe <etharp_cleanup_netif+0xe>
    }
  }
}
 800c442:	bf00      	nop
 800c444:	bf00      	nop
 800c446:	3710      	adds	r7, #16
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	200082a4 	.word	0x200082a4

0800c450 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c450:	b5b0      	push	{r4, r5, r7, lr}
 800c452:	b08a      	sub	sp, #40	@ 0x28
 800c454:	af04      	add	r7, sp, #16
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d107      	bne.n	800c470 <etharp_input+0x20>
 800c460:	4b3d      	ldr	r3, [pc, #244]	@ (800c558 <etharp_input+0x108>)
 800c462:	f240 228a 	movw	r2, #650	@ 0x28a
 800c466:	493d      	ldr	r1, [pc, #244]	@ (800c55c <etharp_input+0x10c>)
 800c468:	483d      	ldr	r0, [pc, #244]	@ (800c560 <etharp_input+0x110>)
 800c46a:	f002 f88f 	bl	800e58c <iprintf>
 800c46e:	e06f      	b.n	800c550 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	881b      	ldrh	r3, [r3, #0]
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c480:	d10c      	bne.n	800c49c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c486:	2b06      	cmp	r3, #6
 800c488:	d108      	bne.n	800c49c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c48e:	2b04      	cmp	r3, #4
 800c490:	d104      	bne.n	800c49c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	885b      	ldrh	r3, [r3, #2]
 800c496:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c498:	2b08      	cmp	r3, #8
 800c49a:	d003      	beq.n	800c4a4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f7f8 febd 	bl	800521c <pbuf_free>
    return;
 800c4a2:	e055      	b.n	800c550 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	330e      	adds	r3, #14
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	3318      	adds	r3, #24
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d102      	bne.n	800c4c4 <etharp_input+0x74>
    for_us = 0;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	75fb      	strb	r3, [r7, #23]
 800c4c2:	e009      	b.n	800c4d8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	3304      	adds	r3, #4
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	bf0c      	ite	eq
 800c4d0:	2301      	moveq	r3, #1
 800c4d2:	2300      	movne	r3, #0
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	f103 0208 	add.w	r2, r3, #8
 800c4de:	7dfb      	ldrb	r3, [r7, #23]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d001      	beq.n	800c4e8 <etharp_input+0x98>
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e000      	b.n	800c4ea <etharp_input+0x9a>
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	f107 010c 	add.w	r1, r7, #12
 800c4ee:	6838      	ldr	r0, [r7, #0]
 800c4f0:	f7ff fed8 	bl	800c2a4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	88db      	ldrh	r3, [r3, #6]
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c4fe:	d003      	beq.n	800c508 <etharp_input+0xb8>
 800c500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c504:	d01e      	beq.n	800c544 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c506:	e020      	b.n	800c54a <etharp_input+0xfa>
      if (for_us) {
 800c508:	7dfb      	ldrb	r3, [r7, #23]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d01c      	beq.n	800c548 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c524:	693a      	ldr	r2, [r7, #16]
 800c526:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c528:	2102      	movs	r1, #2
 800c52a:	9103      	str	r1, [sp, #12]
 800c52c:	f107 010c 	add.w	r1, r7, #12
 800c530:	9102      	str	r1, [sp, #8]
 800c532:	9201      	str	r2, [sp, #4]
 800c534:	9300      	str	r3, [sp, #0]
 800c536:	462b      	mov	r3, r5
 800c538:	4622      	mov	r2, r4
 800c53a:	4601      	mov	r1, r0
 800c53c:	6838      	ldr	r0, [r7, #0]
 800c53e:	f000 faeb 	bl	800cb18 <etharp_raw>
      break;
 800c542:	e001      	b.n	800c548 <etharp_input+0xf8>
      break;
 800c544:	bf00      	nop
 800c546:	e000      	b.n	800c54a <etharp_input+0xfa>
      break;
 800c548:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f7f8 fe66 	bl	800521c <pbuf_free>
}
 800c550:	3718      	adds	r7, #24
 800c552:	46bd      	mov	sp, r7
 800c554:	bdb0      	pop	{r4, r5, r7, pc}
 800c556:	bf00      	nop
 800c558:	08011730 	.word	0x08011730
 800c55c:	08011880 	.word	0x08011880
 800c560:	080117a8 	.word	0x080117a8

0800c564 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b086      	sub	sp, #24
 800c568:	af02      	add	r7, sp, #8
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	4613      	mov	r3, r2
 800c570:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c572:	79fa      	ldrb	r2, [r7, #7]
 800c574:	4944      	ldr	r1, [pc, #272]	@ (800c688 <etharp_output_to_arp_index+0x124>)
 800c576:	4613      	mov	r3, r2
 800c578:	005b      	lsls	r3, r3, #1
 800c57a:	4413      	add	r3, r2
 800c57c:	00db      	lsls	r3, r3, #3
 800c57e:	440b      	add	r3, r1
 800c580:	3314      	adds	r3, #20
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	2b01      	cmp	r3, #1
 800c586:	d806      	bhi.n	800c596 <etharp_output_to_arp_index+0x32>
 800c588:	4b40      	ldr	r3, [pc, #256]	@ (800c68c <etharp_output_to_arp_index+0x128>)
 800c58a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800c58e:	4940      	ldr	r1, [pc, #256]	@ (800c690 <etharp_output_to_arp_index+0x12c>)
 800c590:	4840      	ldr	r0, [pc, #256]	@ (800c694 <etharp_output_to_arp_index+0x130>)
 800c592:	f001 fffb 	bl	800e58c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c596:	79fa      	ldrb	r2, [r7, #7]
 800c598:	493b      	ldr	r1, [pc, #236]	@ (800c688 <etharp_output_to_arp_index+0x124>)
 800c59a:	4613      	mov	r3, r2
 800c59c:	005b      	lsls	r3, r3, #1
 800c59e:	4413      	add	r3, r2
 800c5a0:	00db      	lsls	r3, r3, #3
 800c5a2:	440b      	add	r3, r1
 800c5a4:	3314      	adds	r3, #20
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	d153      	bne.n	800c654 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c5ac:	79fa      	ldrb	r2, [r7, #7]
 800c5ae:	4936      	ldr	r1, [pc, #216]	@ (800c688 <etharp_output_to_arp_index+0x124>)
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	005b      	lsls	r3, r3, #1
 800c5b4:	4413      	add	r3, r2
 800c5b6:	00db      	lsls	r3, r3, #3
 800c5b8:	440b      	add	r3, r1
 800c5ba:	3312      	adds	r3, #18
 800c5bc:	881b      	ldrh	r3, [r3, #0]
 800c5be:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800c5c2:	d919      	bls.n	800c5f8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c5c4:	79fa      	ldrb	r2, [r7, #7]
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	005b      	lsls	r3, r3, #1
 800c5ca:	4413      	add	r3, r2
 800c5cc:	00db      	lsls	r3, r3, #3
 800c5ce:	4a2e      	ldr	r2, [pc, #184]	@ (800c688 <etharp_output_to_arp_index+0x124>)
 800c5d0:	4413      	add	r3, r2
 800c5d2:	3304      	adds	r3, #4
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	68f8      	ldr	r0, [r7, #12]
 800c5d8:	f000 fb4c 	bl	800cc74 <etharp_request>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d138      	bne.n	800c654 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c5e2:	79fa      	ldrb	r2, [r7, #7]
 800c5e4:	4928      	ldr	r1, [pc, #160]	@ (800c688 <etharp_output_to_arp_index+0x124>)
 800c5e6:	4613      	mov	r3, r2
 800c5e8:	005b      	lsls	r3, r3, #1
 800c5ea:	4413      	add	r3, r2
 800c5ec:	00db      	lsls	r3, r3, #3
 800c5ee:	440b      	add	r3, r1
 800c5f0:	3314      	adds	r3, #20
 800c5f2:	2203      	movs	r2, #3
 800c5f4:	701a      	strb	r2, [r3, #0]
 800c5f6:	e02d      	b.n	800c654 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c5f8:	79fa      	ldrb	r2, [r7, #7]
 800c5fa:	4923      	ldr	r1, [pc, #140]	@ (800c688 <etharp_output_to_arp_index+0x124>)
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	005b      	lsls	r3, r3, #1
 800c600:	4413      	add	r3, r2
 800c602:	00db      	lsls	r3, r3, #3
 800c604:	440b      	add	r3, r1
 800c606:	3312      	adds	r3, #18
 800c608:	881b      	ldrh	r3, [r3, #0]
 800c60a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800c60e:	d321      	bcc.n	800c654 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c610:	79fa      	ldrb	r2, [r7, #7]
 800c612:	4613      	mov	r3, r2
 800c614:	005b      	lsls	r3, r3, #1
 800c616:	4413      	add	r3, r2
 800c618:	00db      	lsls	r3, r3, #3
 800c61a:	4a1b      	ldr	r2, [pc, #108]	@ (800c688 <etharp_output_to_arp_index+0x124>)
 800c61c:	4413      	add	r3, r2
 800c61e:	1d19      	adds	r1, r3, #4
 800c620:	79fa      	ldrb	r2, [r7, #7]
 800c622:	4613      	mov	r3, r2
 800c624:	005b      	lsls	r3, r3, #1
 800c626:	4413      	add	r3, r2
 800c628:	00db      	lsls	r3, r3, #3
 800c62a:	3308      	adds	r3, #8
 800c62c:	4a16      	ldr	r2, [pc, #88]	@ (800c688 <etharp_output_to_arp_index+0x124>)
 800c62e:	4413      	add	r3, r2
 800c630:	3304      	adds	r3, #4
 800c632:	461a      	mov	r2, r3
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f000 fafb 	bl	800cc30 <etharp_request_dst>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d109      	bne.n	800c654 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c640:	79fa      	ldrb	r2, [r7, #7]
 800c642:	4911      	ldr	r1, [pc, #68]	@ (800c688 <etharp_output_to_arp_index+0x124>)
 800c644:	4613      	mov	r3, r2
 800c646:	005b      	lsls	r3, r3, #1
 800c648:	4413      	add	r3, r2
 800c64a:	00db      	lsls	r3, r3, #3
 800c64c:	440b      	add	r3, r1
 800c64e:	3314      	adds	r3, #20
 800c650:	2203      	movs	r2, #3
 800c652:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800c65a:	79fa      	ldrb	r2, [r7, #7]
 800c65c:	4613      	mov	r3, r2
 800c65e:	005b      	lsls	r3, r3, #1
 800c660:	4413      	add	r3, r2
 800c662:	00db      	lsls	r3, r3, #3
 800c664:	3308      	adds	r3, #8
 800c666:	4a08      	ldr	r2, [pc, #32]	@ (800c688 <etharp_output_to_arp_index+0x124>)
 800c668:	4413      	add	r3, r2
 800c66a:	3304      	adds	r3, #4
 800c66c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c670:	9200      	str	r2, [sp, #0]
 800c672:	460a      	mov	r2, r1
 800c674:	68b9      	ldr	r1, [r7, #8]
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f001 fe40 	bl	800e2fc <ethernet_output>
 800c67c:	4603      	mov	r3, r0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	200082a4 	.word	0x200082a4
 800c68c:	08011730 	.word	0x08011730
 800c690:	080118a0 	.word	0x080118a0
 800c694:	080117a8 	.word	0x080117a8

0800c698 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b08a      	sub	sp, #40	@ 0x28
 800c69c:	af02      	add	r7, sp, #8
 800c69e:	60f8      	str	r0, [r7, #12]
 800c6a0:	60b9      	str	r1, [r7, #8]
 800c6a2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d106      	bne.n	800c6bc <etharp_output+0x24>
 800c6ae:	4b73      	ldr	r3, [pc, #460]	@ (800c87c <etharp_output+0x1e4>)
 800c6b0:	f240 321e 	movw	r2, #798	@ 0x31e
 800c6b4:	4972      	ldr	r1, [pc, #456]	@ (800c880 <etharp_output+0x1e8>)
 800c6b6:	4873      	ldr	r0, [pc, #460]	@ (800c884 <etharp_output+0x1ec>)
 800c6b8:	f001 ff68 	bl	800e58c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d106      	bne.n	800c6d0 <etharp_output+0x38>
 800c6c2:	4b6e      	ldr	r3, [pc, #440]	@ (800c87c <etharp_output+0x1e4>)
 800c6c4:	f240 321f 	movw	r2, #799	@ 0x31f
 800c6c8:	496f      	ldr	r1, [pc, #444]	@ (800c888 <etharp_output+0x1f0>)
 800c6ca:	486e      	ldr	r0, [pc, #440]	@ (800c884 <etharp_output+0x1ec>)
 800c6cc:	f001 ff5e 	bl	800e58c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d106      	bne.n	800c6e4 <etharp_output+0x4c>
 800c6d6:	4b69      	ldr	r3, [pc, #420]	@ (800c87c <etharp_output+0x1e4>)
 800c6d8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800c6dc:	496b      	ldr	r1, [pc, #428]	@ (800c88c <etharp_output+0x1f4>)
 800c6de:	4869      	ldr	r0, [pc, #420]	@ (800c884 <etharp_output+0x1ec>)
 800c6e0:	f001 ff54 	bl	800e58c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	68f9      	ldr	r1, [r7, #12]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 fef8 	bl	800d4e0 <ip4_addr_isbroadcast_u32>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d002      	beq.n	800c6fc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c6f6:	4b66      	ldr	r3, [pc, #408]	@ (800c890 <etharp_output+0x1f8>)
 800c6f8:	61fb      	str	r3, [r7, #28]
 800c6fa:	e0af      	b.n	800c85c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c704:	2be0      	cmp	r3, #224	@ 0xe0
 800c706:	d118      	bne.n	800c73a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c708:	2301      	movs	r3, #1
 800c70a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c70c:	2300      	movs	r3, #0
 800c70e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c710:	235e      	movs	r3, #94	@ 0x5e
 800c712:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	3301      	adds	r3, #1
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	3302      	adds	r3, #2
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	3303      	adds	r3, #3
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c732:	f107 0310 	add.w	r3, r7, #16
 800c736:	61fb      	str	r3, [r7, #28]
 800c738:	e090      	b.n	800c85c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	3304      	adds	r3, #4
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	405a      	eors	r2, r3
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	3308      	adds	r3, #8
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4013      	ands	r3, r2
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d012      	beq.n	800c778 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c758:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d00b      	beq.n	800c778 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	330c      	adds	r3, #12
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d003      	beq.n	800c772 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	330c      	adds	r3, #12
 800c76e:	61bb      	str	r3, [r7, #24]
 800c770:	e002      	b.n	800c778 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c772:	f06f 0303 	mvn.w	r3, #3
 800c776:	e07d      	b.n	800c874 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c778:	4b46      	ldr	r3, [pc, #280]	@ (800c894 <etharp_output+0x1fc>)
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	4619      	mov	r1, r3
 800c77e:	4a46      	ldr	r2, [pc, #280]	@ (800c898 <etharp_output+0x200>)
 800c780:	460b      	mov	r3, r1
 800c782:	005b      	lsls	r3, r3, #1
 800c784:	440b      	add	r3, r1
 800c786:	00db      	lsls	r3, r3, #3
 800c788:	4413      	add	r3, r2
 800c78a:	3314      	adds	r3, #20
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d925      	bls.n	800c7de <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c792:	4b40      	ldr	r3, [pc, #256]	@ (800c894 <etharp_output+0x1fc>)
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	4619      	mov	r1, r3
 800c798:	4a3f      	ldr	r2, [pc, #252]	@ (800c898 <etharp_output+0x200>)
 800c79a:	460b      	mov	r3, r1
 800c79c:	005b      	lsls	r3, r3, #1
 800c79e:	440b      	add	r3, r1
 800c7a0:	00db      	lsls	r3, r3, #3
 800c7a2:	4413      	add	r3, r2
 800c7a4:	3308      	adds	r3, #8
 800c7a6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d117      	bne.n	800c7de <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	4b38      	ldr	r3, [pc, #224]	@ (800c894 <etharp_output+0x1fc>)
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	4937      	ldr	r1, [pc, #220]	@ (800c898 <etharp_output+0x200>)
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	005b      	lsls	r3, r3, #1
 800c7be:	4403      	add	r3, r0
 800c7c0:	00db      	lsls	r3, r3, #3
 800c7c2:	440b      	add	r3, r1
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d108      	bne.n	800c7de <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c7cc:	4b31      	ldr	r3, [pc, #196]	@ (800c894 <etharp_output+0x1fc>)
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	68b9      	ldr	r1, [r7, #8]
 800c7d4:	68f8      	ldr	r0, [r7, #12]
 800c7d6:	f7ff fec5 	bl	800c564 <etharp_output_to_arp_index>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	e04a      	b.n	800c874 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c7de:	2300      	movs	r3, #0
 800c7e0:	75fb      	strb	r3, [r7, #23]
 800c7e2:	e031      	b.n	800c848 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c7e4:	7dfa      	ldrb	r2, [r7, #23]
 800c7e6:	492c      	ldr	r1, [pc, #176]	@ (800c898 <etharp_output+0x200>)
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	005b      	lsls	r3, r3, #1
 800c7ec:	4413      	add	r3, r2
 800c7ee:	00db      	lsls	r3, r3, #3
 800c7f0:	440b      	add	r3, r1
 800c7f2:	3314      	adds	r3, #20
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d923      	bls.n	800c842 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c7fa:	7dfa      	ldrb	r2, [r7, #23]
 800c7fc:	4926      	ldr	r1, [pc, #152]	@ (800c898 <etharp_output+0x200>)
 800c7fe:	4613      	mov	r3, r2
 800c800:	005b      	lsls	r3, r3, #1
 800c802:	4413      	add	r3, r2
 800c804:	00db      	lsls	r3, r3, #3
 800c806:	440b      	add	r3, r1
 800c808:	3308      	adds	r3, #8
 800c80a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d117      	bne.n	800c842 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	6819      	ldr	r1, [r3, #0]
 800c816:	7dfa      	ldrb	r2, [r7, #23]
 800c818:	481f      	ldr	r0, [pc, #124]	@ (800c898 <etharp_output+0x200>)
 800c81a:	4613      	mov	r3, r2
 800c81c:	005b      	lsls	r3, r3, #1
 800c81e:	4413      	add	r3, r2
 800c820:	00db      	lsls	r3, r3, #3
 800c822:	4403      	add	r3, r0
 800c824:	3304      	adds	r3, #4
 800c826:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c828:	4299      	cmp	r1, r3
 800c82a:	d10a      	bne.n	800c842 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c82c:	4a19      	ldr	r2, [pc, #100]	@ (800c894 <etharp_output+0x1fc>)
 800c82e:	7dfb      	ldrb	r3, [r7, #23]
 800c830:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c832:	7dfb      	ldrb	r3, [r7, #23]
 800c834:	461a      	mov	r2, r3
 800c836:	68b9      	ldr	r1, [r7, #8]
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f7ff fe93 	bl	800c564 <etharp_output_to_arp_index>
 800c83e:	4603      	mov	r3, r0
 800c840:	e018      	b.n	800c874 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c842:	7dfb      	ldrb	r3, [r7, #23]
 800c844:	3301      	adds	r3, #1
 800c846:	75fb      	strb	r3, [r7, #23]
 800c848:	7dfb      	ldrb	r3, [r7, #23]
 800c84a:	2b09      	cmp	r3, #9
 800c84c:	d9ca      	bls.n	800c7e4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c84e:	68ba      	ldr	r2, [r7, #8]
 800c850:	69b9      	ldr	r1, [r7, #24]
 800c852:	68f8      	ldr	r0, [r7, #12]
 800c854:	f000 f822 	bl	800c89c <etharp_query>
 800c858:	4603      	mov	r3, r0
 800c85a:	e00b      	b.n	800c874 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800c862:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c866:	9300      	str	r3, [sp, #0]
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	68b9      	ldr	r1, [r7, #8]
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f001 fd45 	bl	800e2fc <ethernet_output>
 800c872:	4603      	mov	r3, r0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3720      	adds	r7, #32
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	08011730 	.word	0x08011730
 800c880:	08011880 	.word	0x08011880
 800c884:	080117a8 	.word	0x080117a8
 800c888:	080118d0 	.word	0x080118d0
 800c88c:	08011870 	.word	0x08011870
 800c890:	08011ee4 	.word	0x08011ee4
 800c894:	20008394 	.word	0x20008394
 800c898:	200082a4 	.word	0x200082a4

0800c89c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b08c      	sub	sp, #48	@ 0x30
 800c8a0:	af02      	add	r7, sp, #8
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	3326      	adds	r3, #38	@ 0x26
 800c8ac:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c8ae:	23ff      	movs	r3, #255	@ 0xff
 800c8b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	68f9      	ldr	r1, [r7, #12]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f000 fe0e 	bl	800d4e0 <ip4_addr_isbroadcast_u32>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10c      	bne.n	800c8e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c8d2:	2be0      	cmp	r3, #224	@ 0xe0
 800c8d4:	d006      	beq.n	800c8e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d003      	beq.n	800c8e4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d102      	bne.n	800c8ea <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c8e4:	f06f 030f 	mvn.w	r3, #15
 800c8e8:	e101      	b.n	800caee <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c8ea:	68fa      	ldr	r2, [r7, #12]
 800c8ec:	2101      	movs	r1, #1
 800c8ee:	68b8      	ldr	r0, [r7, #8]
 800c8f0:	f7ff fb60 	bl	800bfb4 <etharp_find_entry>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c8f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	da02      	bge.n	800c906 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c900:	8a7b      	ldrh	r3, [r7, #18]
 800c902:	b25b      	sxtb	r3, r3
 800c904:	e0f3      	b.n	800caee <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c906:	8a7b      	ldrh	r3, [r7, #18]
 800c908:	2b7e      	cmp	r3, #126	@ 0x7e
 800c90a:	d906      	bls.n	800c91a <etharp_query+0x7e>
 800c90c:	4b7a      	ldr	r3, [pc, #488]	@ (800caf8 <etharp_query+0x25c>)
 800c90e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800c912:	497a      	ldr	r1, [pc, #488]	@ (800cafc <etharp_query+0x260>)
 800c914:	487a      	ldr	r0, [pc, #488]	@ (800cb00 <etharp_query+0x264>)
 800c916:	f001 fe39 	bl	800e58c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c91a:	8a7b      	ldrh	r3, [r7, #18]
 800c91c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c91e:	7c7a      	ldrb	r2, [r7, #17]
 800c920:	4978      	ldr	r1, [pc, #480]	@ (800cb04 <etharp_query+0x268>)
 800c922:	4613      	mov	r3, r2
 800c924:	005b      	lsls	r3, r3, #1
 800c926:	4413      	add	r3, r2
 800c928:	00db      	lsls	r3, r3, #3
 800c92a:	440b      	add	r3, r1
 800c92c:	3314      	adds	r3, #20
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d115      	bne.n	800c960 <etharp_query+0xc4>
    is_new_entry = 1;
 800c934:	2301      	movs	r3, #1
 800c936:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c938:	7c7a      	ldrb	r2, [r7, #17]
 800c93a:	4972      	ldr	r1, [pc, #456]	@ (800cb04 <etharp_query+0x268>)
 800c93c:	4613      	mov	r3, r2
 800c93e:	005b      	lsls	r3, r3, #1
 800c940:	4413      	add	r3, r2
 800c942:	00db      	lsls	r3, r3, #3
 800c944:	440b      	add	r3, r1
 800c946:	3314      	adds	r3, #20
 800c948:	2201      	movs	r2, #1
 800c94a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c94c:	7c7a      	ldrb	r2, [r7, #17]
 800c94e:	496d      	ldr	r1, [pc, #436]	@ (800cb04 <etharp_query+0x268>)
 800c950:	4613      	mov	r3, r2
 800c952:	005b      	lsls	r3, r3, #1
 800c954:	4413      	add	r3, r2
 800c956:	00db      	lsls	r3, r3, #3
 800c958:	440b      	add	r3, r1
 800c95a:	3308      	adds	r3, #8
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c960:	7c7a      	ldrb	r2, [r7, #17]
 800c962:	4968      	ldr	r1, [pc, #416]	@ (800cb04 <etharp_query+0x268>)
 800c964:	4613      	mov	r3, r2
 800c966:	005b      	lsls	r3, r3, #1
 800c968:	4413      	add	r3, r2
 800c96a:	00db      	lsls	r3, r3, #3
 800c96c:	440b      	add	r3, r1
 800c96e:	3314      	adds	r3, #20
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	2b01      	cmp	r3, #1
 800c974:	d011      	beq.n	800c99a <etharp_query+0xfe>
 800c976:	7c7a      	ldrb	r2, [r7, #17]
 800c978:	4962      	ldr	r1, [pc, #392]	@ (800cb04 <etharp_query+0x268>)
 800c97a:	4613      	mov	r3, r2
 800c97c:	005b      	lsls	r3, r3, #1
 800c97e:	4413      	add	r3, r2
 800c980:	00db      	lsls	r3, r3, #3
 800c982:	440b      	add	r3, r1
 800c984:	3314      	adds	r3, #20
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d806      	bhi.n	800c99a <etharp_query+0xfe>
 800c98c:	4b5a      	ldr	r3, [pc, #360]	@ (800caf8 <etharp_query+0x25c>)
 800c98e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800c992:	495d      	ldr	r1, [pc, #372]	@ (800cb08 <etharp_query+0x26c>)
 800c994:	485a      	ldr	r0, [pc, #360]	@ (800cb00 <etharp_query+0x264>)
 800c996:	f001 fdf9 	bl	800e58c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c99a:	6a3b      	ldr	r3, [r7, #32]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d102      	bne.n	800c9a6 <etharp_query+0x10a>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d10c      	bne.n	800c9c0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c9a6:	68b9      	ldr	r1, [r7, #8]
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	f000 f963 	bl	800cc74 <etharp_request>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d102      	bne.n	800c9c0 <etharp_query+0x124>
      return result;
 800c9ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c9be:	e096      	b.n	800caee <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d106      	bne.n	800c9d4 <etharp_query+0x138>
 800c9c6:	4b4c      	ldr	r3, [pc, #304]	@ (800caf8 <etharp_query+0x25c>)
 800c9c8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800c9cc:	494f      	ldr	r1, [pc, #316]	@ (800cb0c <etharp_query+0x270>)
 800c9ce:	484c      	ldr	r0, [pc, #304]	@ (800cb00 <etharp_query+0x264>)
 800c9d0:	f001 fddc 	bl	800e58c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c9d4:	7c7a      	ldrb	r2, [r7, #17]
 800c9d6:	494b      	ldr	r1, [pc, #300]	@ (800cb04 <etharp_query+0x268>)
 800c9d8:	4613      	mov	r3, r2
 800c9da:	005b      	lsls	r3, r3, #1
 800c9dc:	4413      	add	r3, r2
 800c9de:	00db      	lsls	r3, r3, #3
 800c9e0:	440b      	add	r3, r1
 800c9e2:	3314      	adds	r3, #20
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d917      	bls.n	800ca1a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c9ea:	4a49      	ldr	r2, [pc, #292]	@ (800cb10 <etharp_query+0x274>)
 800c9ec:	7c7b      	ldrb	r3, [r7, #17]
 800c9ee:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c9f0:	7c7a      	ldrb	r2, [r7, #17]
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	005b      	lsls	r3, r3, #1
 800c9f6:	4413      	add	r3, r2
 800c9f8:	00db      	lsls	r3, r3, #3
 800c9fa:	3308      	adds	r3, #8
 800c9fc:	4a41      	ldr	r2, [pc, #260]	@ (800cb04 <etharp_query+0x268>)
 800c9fe:	4413      	add	r3, r2
 800ca00:	3304      	adds	r3, #4
 800ca02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ca06:	9200      	str	r2, [sp, #0]
 800ca08:	697a      	ldr	r2, [r7, #20]
 800ca0a:	6879      	ldr	r1, [r7, #4]
 800ca0c:	68f8      	ldr	r0, [r7, #12]
 800ca0e:	f001 fc75 	bl	800e2fc <ethernet_output>
 800ca12:	4603      	mov	r3, r0
 800ca14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca18:	e067      	b.n	800caea <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ca1a:	7c7a      	ldrb	r2, [r7, #17]
 800ca1c:	4939      	ldr	r1, [pc, #228]	@ (800cb04 <etharp_query+0x268>)
 800ca1e:	4613      	mov	r3, r2
 800ca20:	005b      	lsls	r3, r3, #1
 800ca22:	4413      	add	r3, r2
 800ca24:	00db      	lsls	r3, r3, #3
 800ca26:	440b      	add	r3, r1
 800ca28:	3314      	adds	r3, #20
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d15c      	bne.n	800caea <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ca30:	2300      	movs	r3, #0
 800ca32:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ca38:	e01c      	b.n	800ca74 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	895a      	ldrh	r2, [r3, #10]
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	891b      	ldrh	r3, [r3, #8]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d10a      	bne.n	800ca5c <etharp_query+0x1c0>
 800ca46:	69fb      	ldr	r3, [r7, #28]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d006      	beq.n	800ca5c <etharp_query+0x1c0>
 800ca4e:	4b2a      	ldr	r3, [pc, #168]	@ (800caf8 <etharp_query+0x25c>)
 800ca50:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800ca54:	492f      	ldr	r1, [pc, #188]	@ (800cb14 <etharp_query+0x278>)
 800ca56:	482a      	ldr	r0, [pc, #168]	@ (800cb00 <etharp_query+0x264>)
 800ca58:	f001 fd98 	bl	800e58c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	7b1b      	ldrb	r3, [r3, #12]
 800ca60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d002      	beq.n	800ca6e <etharp_query+0x1d2>
        copy_needed = 1;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	61bb      	str	r3, [r7, #24]
        break;
 800ca6c:	e005      	b.n	800ca7a <etharp_query+0x1de>
      }
      p = p->next;
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1df      	bne.n	800ca3a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d007      	beq.n	800ca90 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800ca86:	200e      	movs	r0, #14
 800ca88:	f7f8 fe34 	bl	80056f4 <pbuf_clone>
 800ca8c:	61f8      	str	r0, [r7, #28]
 800ca8e:	e004      	b.n	800ca9a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ca94:	69f8      	ldr	r0, [r7, #28]
 800ca96:	f7f8 fc61 	bl	800535c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ca9a:	69fb      	ldr	r3, [r7, #28]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d021      	beq.n	800cae4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800caa0:	7c7a      	ldrb	r2, [r7, #17]
 800caa2:	4918      	ldr	r1, [pc, #96]	@ (800cb04 <etharp_query+0x268>)
 800caa4:	4613      	mov	r3, r2
 800caa6:	005b      	lsls	r3, r3, #1
 800caa8:	4413      	add	r3, r2
 800caaa:	00db      	lsls	r3, r3, #3
 800caac:	440b      	add	r3, r1
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00a      	beq.n	800caca <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800cab4:	7c7a      	ldrb	r2, [r7, #17]
 800cab6:	4913      	ldr	r1, [pc, #76]	@ (800cb04 <etharp_query+0x268>)
 800cab8:	4613      	mov	r3, r2
 800caba:	005b      	lsls	r3, r3, #1
 800cabc:	4413      	add	r3, r2
 800cabe:	00db      	lsls	r3, r3, #3
 800cac0:	440b      	add	r3, r1
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7f8 fba9 	bl	800521c <pbuf_free>
      }
      arp_table[i].q = p;
 800caca:	7c7a      	ldrb	r2, [r7, #17]
 800cacc:	490d      	ldr	r1, [pc, #52]	@ (800cb04 <etharp_query+0x268>)
 800cace:	4613      	mov	r3, r2
 800cad0:	005b      	lsls	r3, r3, #1
 800cad2:	4413      	add	r3, r2
 800cad4:	00db      	lsls	r3, r3, #3
 800cad6:	440b      	add	r3, r1
 800cad8:	69fa      	ldr	r2, [r7, #28]
 800cada:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800cadc:	2300      	movs	r3, #0
 800cade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cae2:	e002      	b.n	800caea <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800cae4:	23ff      	movs	r3, #255	@ 0xff
 800cae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800caea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3728      	adds	r7, #40	@ 0x28
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	08011730 	.word	0x08011730
 800cafc:	080118dc 	.word	0x080118dc
 800cb00:	080117a8 	.word	0x080117a8
 800cb04:	200082a4 	.word	0x200082a4
 800cb08:	080118ec 	.word	0x080118ec
 800cb0c:	080118d0 	.word	0x080118d0
 800cb10:	20008394 	.word	0x20008394
 800cb14:	08011914 	.word	0x08011914

0800cb18 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b08a      	sub	sp, #40	@ 0x28
 800cb1c:	af02      	add	r7, sp, #8
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	60b9      	str	r1, [r7, #8]
 800cb22:	607a      	str	r2, [r7, #4]
 800cb24:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800cb26:	2300      	movs	r3, #0
 800cb28:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d106      	bne.n	800cb3e <etharp_raw+0x26>
 800cb30:	4b3a      	ldr	r3, [pc, #232]	@ (800cc1c <etharp_raw+0x104>)
 800cb32:	f240 4257 	movw	r2, #1111	@ 0x457
 800cb36:	493a      	ldr	r1, [pc, #232]	@ (800cc20 <etharp_raw+0x108>)
 800cb38:	483a      	ldr	r0, [pc, #232]	@ (800cc24 <etharp_raw+0x10c>)
 800cb3a:	f001 fd27 	bl	800e58c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cb3e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cb42:	211c      	movs	r1, #28
 800cb44:	200e      	movs	r0, #14
 800cb46:	f7f8 f885 	bl	8004c54 <pbuf_alloc>
 800cb4a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d102      	bne.n	800cb58 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800cb52:	f04f 33ff 	mov.w	r3, #4294967295
 800cb56:	e05d      	b.n	800cc14 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cb58:	69bb      	ldr	r3, [r7, #24]
 800cb5a:	895b      	ldrh	r3, [r3, #10]
 800cb5c:	2b1b      	cmp	r3, #27
 800cb5e:	d806      	bhi.n	800cb6e <etharp_raw+0x56>
 800cb60:	4b2e      	ldr	r3, [pc, #184]	@ (800cc1c <etharp_raw+0x104>)
 800cb62:	f240 4262 	movw	r2, #1122	@ 0x462
 800cb66:	4930      	ldr	r1, [pc, #192]	@ (800cc28 <etharp_raw+0x110>)
 800cb68:	482e      	ldr	r0, [pc, #184]	@ (800cc24 <etharp_raw+0x10c>)
 800cb6a:	f001 fd0f 	bl	800e58c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800cb74:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7f6 fff2 	bl	8003b60 <lwip_htons>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	461a      	mov	r2, r3
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cb8a:	2b06      	cmp	r3, #6
 800cb8c:	d006      	beq.n	800cb9c <etharp_raw+0x84>
 800cb8e:	4b23      	ldr	r3, [pc, #140]	@ (800cc1c <etharp_raw+0x104>)
 800cb90:	f240 4269 	movw	r2, #1129	@ 0x469
 800cb94:	4925      	ldr	r1, [pc, #148]	@ (800cc2c <etharp_raw+0x114>)
 800cb96:	4823      	ldr	r0, [pc, #140]	@ (800cc24 <etharp_raw+0x10c>)
 800cb98:	f001 fcf8 	bl	800e58c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	3308      	adds	r3, #8
 800cba0:	2206      	movs	r2, #6
 800cba2:	6839      	ldr	r1, [r7, #0]
 800cba4:	4618      	mov	r0, r3
 800cba6:	f001 fdcc 	bl	800e742 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	3312      	adds	r3, #18
 800cbae:	2206      	movs	r2, #6
 800cbb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f001 fdc5 	bl	800e742 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	330e      	adds	r3, #14
 800cbbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbbe:	6812      	ldr	r2, [r2, #0]
 800cbc0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	3318      	adds	r3, #24
 800cbc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbc8:	6812      	ldr	r2, [r2, #0]
 800cbca:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	701a      	strb	r2, [r3, #0]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f042 0201 	orr.w	r2, r2, #1
 800cbd8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	f042 0208 	orr.w	r2, r2, #8
 800cbe2:	709a      	strb	r2, [r3, #2]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	2206      	movs	r2, #6
 800cbec:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	2204      	movs	r2, #4
 800cbf2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cbf4:	f640 0306 	movw	r3, #2054	@ 0x806
 800cbf8:	9300      	str	r3, [sp, #0]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	68ba      	ldr	r2, [r7, #8]
 800cbfe:	69b9      	ldr	r1, [r7, #24]
 800cc00:	68f8      	ldr	r0, [r7, #12]
 800cc02:	f001 fb7b 	bl	800e2fc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800cc06:	69b8      	ldr	r0, [r7, #24]
 800cc08:	f7f8 fb08 	bl	800521c <pbuf_free>
  p = NULL;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cc10:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3720      	adds	r7, #32
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	08011730 	.word	0x08011730
 800cc20:	08011880 	.word	0x08011880
 800cc24:	080117a8 	.word	0x080117a8
 800cc28:	08011930 	.word	0x08011930
 800cc2c:	08011964 	.word	0x08011964

0800cc30 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b088      	sub	sp, #32
 800cc34:	af04      	add	r7, sp, #16
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	9203      	str	r2, [sp, #12]
 800cc50:	68ba      	ldr	r2, [r7, #8]
 800cc52:	9202      	str	r2, [sp, #8]
 800cc54:	4a06      	ldr	r2, [pc, #24]	@ (800cc70 <etharp_request_dst+0x40>)
 800cc56:	9201      	str	r2, [sp, #4]
 800cc58:	9300      	str	r3, [sp, #0]
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f7ff ff5a 	bl	800cb18 <etharp_raw>
 800cc64:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	08011eec 	.word	0x08011eec

0800cc74 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800cc7e:	4a05      	ldr	r2, [pc, #20]	@ (800cc94 <etharp_request+0x20>)
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f7ff ffd4 	bl	800cc30 <etharp_request_dst>
 800cc88:	4603      	mov	r3, r0
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3708      	adds	r7, #8
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	08011ee4 	.word	0x08011ee4

0800cc98 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b08e      	sub	sp, #56	@ 0x38
 800cc9c:	af04      	add	r7, sp, #16
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800cca2:	4b79      	ldr	r3, [pc, #484]	@ (800ce88 <icmp_input+0x1f0>)
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800cca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	f003 030f 	and.w	r3, r3, #15
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800ccb8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ccba:	2b13      	cmp	r3, #19
 800ccbc:	f240 80cd 	bls.w	800ce5a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	895b      	ldrh	r3, [r3, #10]
 800ccc4:	2b03      	cmp	r3, #3
 800ccc6:	f240 80ca 	bls.w	800ce5e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ccd4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f000 80b7 	beq.w	800ce4c <icmp_input+0x1b4>
 800ccde:	2b08      	cmp	r3, #8
 800cce0:	f040 80b7 	bne.w	800ce52 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800cce4:	4b69      	ldr	r3, [pc, #420]	@ (800ce8c <icmp_input+0x1f4>)
 800cce6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cce8:	4b67      	ldr	r3, [pc, #412]	@ (800ce88 <icmp_input+0x1f0>)
 800ccea:	695b      	ldr	r3, [r3, #20]
 800ccec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ccf0:	2be0      	cmp	r3, #224	@ 0xe0
 800ccf2:	f000 80bb 	beq.w	800ce6c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ccf6:	4b64      	ldr	r3, [pc, #400]	@ (800ce88 <icmp_input+0x1f0>)
 800ccf8:	695b      	ldr	r3, [r3, #20]
 800ccfa:	4a63      	ldr	r2, [pc, #396]	@ (800ce88 <icmp_input+0x1f0>)
 800ccfc:	6812      	ldr	r2, [r2, #0]
 800ccfe:	4611      	mov	r1, r2
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 fbed 	bl	800d4e0 <ip4_addr_isbroadcast_u32>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f040 80b1 	bne.w	800ce70 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	891b      	ldrh	r3, [r3, #8]
 800cd12:	2b07      	cmp	r3, #7
 800cd14:	f240 80a5 	bls.w	800ce62 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cd18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd1a:	330e      	adds	r3, #14
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7f8 f9e6 	bl	80050f0 <pbuf_add_header>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d04b      	beq.n	800cdc2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	891a      	ldrh	r2, [r3, #8]
 800cd2e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd30:	4413      	add	r3, r2
 800cd32:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	891b      	ldrh	r3, [r3, #8]
 800cd38:	8b7a      	ldrh	r2, [r7, #26]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	f0c0 809a 	bcc.w	800ce74 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cd40:	8b7b      	ldrh	r3, [r7, #26]
 800cd42:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cd46:	4619      	mov	r1, r3
 800cd48:	200e      	movs	r0, #14
 800cd4a:	f7f7 ff83 	bl	8004c54 <pbuf_alloc>
 800cd4e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f000 8090 	beq.w	800ce78 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	895b      	ldrh	r3, [r3, #10]
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd60:	3308      	adds	r3, #8
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d203      	bcs.n	800cd6e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800cd66:	6978      	ldr	r0, [r7, #20]
 800cd68:	f7f8 fa58 	bl	800521c <pbuf_free>
          goto icmperr;
 800cd6c:	e085      	b.n	800ce7a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cd74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd76:	4618      	mov	r0, r3
 800cd78:	f001 fce3 	bl	800e742 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800cd7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd7e:	4619      	mov	r1, r3
 800cd80:	6978      	ldr	r0, [r7, #20]
 800cd82:	f7f8 f9c5 	bl	8005110 <pbuf_remove_header>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d009      	beq.n	800cda0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cd8c:	4b40      	ldr	r3, [pc, #256]	@ (800ce90 <icmp_input+0x1f8>)
 800cd8e:	22b6      	movs	r2, #182	@ 0xb6
 800cd90:	4940      	ldr	r1, [pc, #256]	@ (800ce94 <icmp_input+0x1fc>)
 800cd92:	4841      	ldr	r0, [pc, #260]	@ (800ce98 <icmp_input+0x200>)
 800cd94:	f001 fbfa 	bl	800e58c <iprintf>
          pbuf_free(r);
 800cd98:	6978      	ldr	r0, [r7, #20]
 800cd9a:	f7f8 fa3f 	bl	800521c <pbuf_free>
          goto icmperr;
 800cd9e:	e06c      	b.n	800ce7a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800cda0:	6879      	ldr	r1, [r7, #4]
 800cda2:	6978      	ldr	r0, [r7, #20]
 800cda4:	f7f8 fb62 	bl	800546c <pbuf_copy>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d003      	beq.n	800cdb6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800cdae:	6978      	ldr	r0, [r7, #20]
 800cdb0:	f7f8 fa34 	bl	800521c <pbuf_free>
          goto icmperr;
 800cdb4:	e061      	b.n	800ce7a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f7f8 fa30 	bl	800521c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	607b      	str	r3, [r7, #4]
 800cdc0:	e00f      	b.n	800cde2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cdc2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cdc4:	330e      	adds	r3, #14
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f7f8 f9a1 	bl	8005110 <pbuf_remove_header>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d006      	beq.n	800cde2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cdd4:	4b2e      	ldr	r3, [pc, #184]	@ (800ce90 <icmp_input+0x1f8>)
 800cdd6:	22c7      	movs	r2, #199	@ 0xc7
 800cdd8:	4930      	ldr	r1, [pc, #192]	@ (800ce9c <icmp_input+0x204>)
 800cdda:	482f      	ldr	r0, [pc, #188]	@ (800ce98 <icmp_input+0x200>)
 800cddc:	f001 fbd6 	bl	800e58c <iprintf>
          goto icmperr;
 800cde0:	e04b      	b.n	800ce7a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800cde8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cdea:	4619      	mov	r1, r3
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f7f8 f97f 	bl	80050f0 <pbuf_add_header>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d12b      	bne.n	800ce50 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800cdfe:	69fb      	ldr	r3, [r7, #28]
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ce06:	4b20      	ldr	r3, [pc, #128]	@ (800ce88 <icmp_input+0x1f0>)
 800ce08:	691a      	ldr	r2, [r3, #16]
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	2200      	movs	r2, #0
 800ce12:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	2200      	movs	r2, #0
 800ce18:	709a      	strb	r2, [r3, #2]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	22ff      	movs	r2, #255	@ 0xff
 800ce22:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2200      	movs	r2, #0
 800ce28:	729a      	strb	r2, [r3, #10]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	9302      	str	r3, [sp, #8]
 800ce32:	2301      	movs	r3, #1
 800ce34:	9301      	str	r3, [sp, #4]
 800ce36:	2300      	movs	r3, #0
 800ce38:	9300      	str	r3, [sp, #0]
 800ce3a:	23ff      	movs	r3, #255	@ 0xff
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	69f9      	ldr	r1, [r7, #28]
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 fa75 	bl	800d330 <ip4_output_if>
 800ce46:	4603      	mov	r3, r0
 800ce48:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ce4a:	e001      	b.n	800ce50 <icmp_input+0x1b8>
      break;
 800ce4c:	bf00      	nop
 800ce4e:	e000      	b.n	800ce52 <icmp_input+0x1ba>
      break;
 800ce50:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f7f8 f9e2 	bl	800521c <pbuf_free>
  return;
 800ce58:	e013      	b.n	800ce82 <icmp_input+0x1ea>
    goto lenerr;
 800ce5a:	bf00      	nop
 800ce5c:	e002      	b.n	800ce64 <icmp_input+0x1cc>
    goto lenerr;
 800ce5e:	bf00      	nop
 800ce60:	e000      	b.n	800ce64 <icmp_input+0x1cc>
        goto lenerr;
 800ce62:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7f8 f9d9 	bl	800521c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ce6a:	e00a      	b.n	800ce82 <icmp_input+0x1ea>
        goto icmperr;
 800ce6c:	bf00      	nop
 800ce6e:	e004      	b.n	800ce7a <icmp_input+0x1e2>
        goto icmperr;
 800ce70:	bf00      	nop
 800ce72:	e002      	b.n	800ce7a <icmp_input+0x1e2>
          goto icmperr;
 800ce74:	bf00      	nop
 800ce76:	e000      	b.n	800ce7a <icmp_input+0x1e2>
          goto icmperr;
 800ce78:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f7f8 f9ce 	bl	800521c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ce80:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ce82:	3728      	adds	r7, #40	@ 0x28
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	20004cd4 	.word	0x20004cd4
 800ce8c:	20004ce8 	.word	0x20004ce8
 800ce90:	080119a8 	.word	0x080119a8
 800ce94:	080119e0 	.word	0x080119e0
 800ce98:	08011a18 	.word	0x08011a18
 800ce9c:	08011a40 	.word	0x08011a40

0800cea0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	460b      	mov	r3, r1
 800ceaa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ceac:	78fb      	ldrb	r3, [r7, #3]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	2103      	movs	r1, #3
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f000 f814 	bl	800cee0 <icmp_send_response>
}
 800ceb8:	bf00      	nop
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	460b      	mov	r3, r1
 800ceca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800cecc:	78fb      	ldrb	r3, [r7, #3]
 800cece:	461a      	mov	r2, r3
 800ced0:	210b      	movs	r1, #11
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 f804 	bl	800cee0 <icmp_send_response>
}
 800ced8:	bf00      	nop
 800ceda:	3708      	adds	r7, #8
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b08c      	sub	sp, #48	@ 0x30
 800cee4:	af04      	add	r7, sp, #16
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	460b      	mov	r3, r1
 800ceea:	70fb      	strb	r3, [r7, #3]
 800ceec:	4613      	mov	r3, r2
 800ceee:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cef0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cef4:	2124      	movs	r1, #36	@ 0x24
 800cef6:	2022      	movs	r0, #34	@ 0x22
 800cef8:	f7f7 feac 	bl	8004c54 <pbuf_alloc>
 800cefc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800cefe:	69fb      	ldr	r3, [r7, #28]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d04c      	beq.n	800cf9e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	895b      	ldrh	r3, [r3, #10]
 800cf08:	2b23      	cmp	r3, #35	@ 0x23
 800cf0a:	d806      	bhi.n	800cf1a <icmp_send_response+0x3a>
 800cf0c:	4b26      	ldr	r3, [pc, #152]	@ (800cfa8 <icmp_send_response+0xc8>)
 800cf0e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800cf12:	4926      	ldr	r1, [pc, #152]	@ (800cfac <icmp_send_response+0xcc>)
 800cf14:	4826      	ldr	r0, [pc, #152]	@ (800cfb0 <icmp_send_response+0xd0>)
 800cf16:	f001 fb39 	bl	800e58c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cf20:	69fb      	ldr	r3, [r7, #28]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	78fa      	ldrb	r2, [r7, #3]
 800cf2a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	78ba      	ldrb	r2, [r7, #2]
 800cf30:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	2200      	movs	r2, #0
 800cf36:	711a      	strb	r2, [r3, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	719a      	strb	r2, [r3, #6]
 800cf42:	2200      	movs	r2, #0
 800cf44:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cf46:	69fb      	ldr	r3, [r7, #28]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	f103 0008 	add.w	r0, r3, #8
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	221c      	movs	r2, #28
 800cf54:	4619      	mov	r1, r3
 800cf56:	f001 fbf4 	bl	800e742 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cf60:	f107 030c 	add.w	r3, r7, #12
 800cf64:	4618      	mov	r0, r3
 800cf66:	f000 f825 	bl	800cfb4 <ip4_route>
 800cf6a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d011      	beq.n	800cf96 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	2200      	movs	r2, #0
 800cf76:	709a      	strb	r2, [r3, #2]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cf7c:	f107 020c 	add.w	r2, r7, #12
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	9302      	str	r3, [sp, #8]
 800cf84:	2301      	movs	r3, #1
 800cf86:	9301      	str	r3, [sp, #4]
 800cf88:	2300      	movs	r3, #0
 800cf8a:	9300      	str	r3, [sp, #0]
 800cf8c:	23ff      	movs	r3, #255	@ 0xff
 800cf8e:	2100      	movs	r1, #0
 800cf90:	69f8      	ldr	r0, [r7, #28]
 800cf92:	f000 f9cd 	bl	800d330 <ip4_output_if>
  }
  pbuf_free(q);
 800cf96:	69f8      	ldr	r0, [r7, #28]
 800cf98:	f7f8 f940 	bl	800521c <pbuf_free>
 800cf9c:	e000      	b.n	800cfa0 <icmp_send_response+0xc0>
    return;
 800cf9e:	bf00      	nop
}
 800cfa0:	3720      	adds	r7, #32
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	080119a8 	.word	0x080119a8
 800cfac:	08011a74 	.word	0x08011a74
 800cfb0:	08011a18 	.word	0x08011a18

0800cfb4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b085      	sub	sp, #20
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cfbc:	4b33      	ldr	r3, [pc, #204]	@ (800d08c <ip4_route+0xd8>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	60fb      	str	r3, [r7, #12]
 800cfc2:	e036      	b.n	800d032 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cfca:	f003 0301 	and.w	r3, r3, #1
 800cfce:	b2db      	uxtb	r3, r3
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d02b      	beq.n	800d02c <ip4_route+0x78>
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cfda:	089b      	lsrs	r3, r3, #2
 800cfdc:	f003 0301 	and.w	r3, r3, #1
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d022      	beq.n	800d02c <ip4_route+0x78>
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	3304      	adds	r3, #4
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d01d      	beq.n	800d02c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	3304      	adds	r3, #4
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	405a      	eors	r2, r3
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	3308      	adds	r3, #8
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4013      	ands	r3, r2
 800d004:	2b00      	cmp	r3, #0
 800d006:	d101      	bne.n	800d00c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	e038      	b.n	800d07e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d012:	f003 0302 	and.w	r3, r3, #2
 800d016:	2b00      	cmp	r3, #0
 800d018:	d108      	bne.n	800d02c <ip4_route+0x78>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	330c      	adds	r3, #12
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	429a      	cmp	r2, r3
 800d026:	d101      	bne.n	800d02c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	e028      	b.n	800d07e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	60fb      	str	r3, [r7, #12]
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1c5      	bne.n	800cfc4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d038:	4b15      	ldr	r3, [pc, #84]	@ (800d090 <ip4_route+0xdc>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d01a      	beq.n	800d076 <ip4_route+0xc2>
 800d040:	4b13      	ldr	r3, [pc, #76]	@ (800d090 <ip4_route+0xdc>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d048:	f003 0301 	and.w	r3, r3, #1
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d012      	beq.n	800d076 <ip4_route+0xc2>
 800d050:	4b0f      	ldr	r3, [pc, #60]	@ (800d090 <ip4_route+0xdc>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d058:	f003 0304 	and.w	r3, r3, #4
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d00a      	beq.n	800d076 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d060:	4b0b      	ldr	r3, [pc, #44]	@ (800d090 <ip4_route+0xdc>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	3304      	adds	r3, #4
 800d066:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d004      	beq.n	800d076 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	b2db      	uxtb	r3, r3
 800d072:	2b7f      	cmp	r3, #127	@ 0x7f
 800d074:	d101      	bne.n	800d07a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d076:	2300      	movs	r3, #0
 800d078:	e001      	b.n	800d07e <ip4_route+0xca>
  }

  return netif_default;
 800d07a:	4b05      	ldr	r3, [pc, #20]	@ (800d090 <ip4_route+0xdc>)
 800d07c:	681b      	ldr	r3, [r3, #0]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3714      	adds	r7, #20
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr
 800d08a:	bf00      	nop
 800d08c:	20008238 	.word	0x20008238
 800d090:	2000823c 	.word	0x2000823c

0800d094 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d0a2:	f003 0301 	and.w	r3, r3, #1
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d016      	beq.n	800d0da <ip4_input_accept+0x46>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	3304      	adds	r3, #4
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d011      	beq.n	800d0da <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d0b6:	4b0b      	ldr	r3, [pc, #44]	@ (800d0e4 <ip4_input_accept+0x50>)
 800d0b8:	695a      	ldr	r2, [r3, #20]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	3304      	adds	r3, #4
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d008      	beq.n	800d0d6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d0c4:	4b07      	ldr	r3, [pc, #28]	@ (800d0e4 <ip4_input_accept+0x50>)
 800d0c6:	695b      	ldr	r3, [r3, #20]
 800d0c8:	6879      	ldr	r1, [r7, #4]
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f000 fa08 	bl	800d4e0 <ip4_addr_isbroadcast_u32>
 800d0d0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d001      	beq.n	800d0da <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e000      	b.n	800d0dc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3708      	adds	r7, #8
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	20004cd4 	.word	0x20004cd4

0800d0e8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b086      	sub	sp, #24
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	091b      	lsrs	r3, r3, #4
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	2b04      	cmp	r3, #4
 800d102:	d004      	beq.n	800d10e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f7f8 f889 	bl	800521c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d10a:	2300      	movs	r3, #0
 800d10c:	e107      	b.n	800d31e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	f003 030f 	and.w	r3, r3, #15
 800d116:	b2db      	uxtb	r3, r3
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	885b      	ldrh	r3, [r3, #2]
 800d122:	b29b      	uxth	r3, r3
 800d124:	4618      	mov	r0, r3
 800d126:	f7f6 fd1b 	bl	8003b60 <lwip_htons>
 800d12a:	4603      	mov	r3, r0
 800d12c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	891b      	ldrh	r3, [r3, #8]
 800d132:	89ba      	ldrh	r2, [r7, #12]
 800d134:	429a      	cmp	r2, r3
 800d136:	d204      	bcs.n	800d142 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d138:	89bb      	ldrh	r3, [r7, #12]
 800d13a:	4619      	mov	r1, r3
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f7f7 fee7 	bl	8004f10 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	895b      	ldrh	r3, [r3, #10]
 800d146:	89fa      	ldrh	r2, [r7, #14]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d807      	bhi.n	800d15c <ip4_input+0x74>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	891b      	ldrh	r3, [r3, #8]
 800d150:	89ba      	ldrh	r2, [r7, #12]
 800d152:	429a      	cmp	r2, r3
 800d154:	d802      	bhi.n	800d15c <ip4_input+0x74>
 800d156:	89fb      	ldrh	r3, [r7, #14]
 800d158:	2b13      	cmp	r3, #19
 800d15a:	d804      	bhi.n	800d166 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f7f8 f85d 	bl	800521c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d162:	2300      	movs	r3, #0
 800d164:	e0db      	b.n	800d31e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	691b      	ldr	r3, [r3, #16]
 800d16a:	4a6f      	ldr	r2, [pc, #444]	@ (800d328 <ip4_input+0x240>)
 800d16c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	4a6d      	ldr	r2, [pc, #436]	@ (800d328 <ip4_input+0x240>)
 800d174:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d176:	4b6c      	ldr	r3, [pc, #432]	@ (800d328 <ip4_input+0x240>)
 800d178:	695b      	ldr	r3, [r3, #20]
 800d17a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d17e:	2be0      	cmp	r3, #224	@ 0xe0
 800d180:	d112      	bne.n	800d1a8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d188:	f003 0301 	and.w	r3, r3, #1
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d007      	beq.n	800d1a2 <ip4_input+0xba>
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	3304      	adds	r3, #4
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d002      	beq.n	800d1a2 <ip4_input+0xba>
      netif = inp;
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	613b      	str	r3, [r7, #16]
 800d1a0:	e02a      	b.n	800d1f8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	613b      	str	r3, [r7, #16]
 800d1a6:	e027      	b.n	800d1f8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d1a8:	6838      	ldr	r0, [r7, #0]
 800d1aa:	f7ff ff73 	bl	800d094 <ip4_input_accept>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d002      	beq.n	800d1ba <ip4_input+0xd2>
      netif = inp;
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	613b      	str	r3, [r7, #16]
 800d1b8:	e01e      	b.n	800d1f8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d1be:	4b5a      	ldr	r3, [pc, #360]	@ (800d328 <ip4_input+0x240>)
 800d1c0:	695b      	ldr	r3, [r3, #20]
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	2b7f      	cmp	r3, #127	@ 0x7f
 800d1c6:	d017      	beq.n	800d1f8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d1c8:	4b58      	ldr	r3, [pc, #352]	@ (800d32c <ip4_input+0x244>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	613b      	str	r3, [r7, #16]
 800d1ce:	e00e      	b.n	800d1ee <ip4_input+0x106>
          if (netif == inp) {
 800d1d0:	693a      	ldr	r2, [r7, #16]
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d006      	beq.n	800d1e6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d1d8:	6938      	ldr	r0, [r7, #16]
 800d1da:	f7ff ff5b 	bl	800d094 <ip4_input_accept>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d108      	bne.n	800d1f6 <ip4_input+0x10e>
 800d1e4:	e000      	b.n	800d1e8 <ip4_input+0x100>
            continue;
 800d1e6:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	613b      	str	r3, [r7, #16]
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d1ed      	bne.n	800d1d0 <ip4_input+0xe8>
 800d1f4:	e000      	b.n	800d1f8 <ip4_input+0x110>
            break;
 800d1f6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d1f8:	4b4b      	ldr	r3, [pc, #300]	@ (800d328 <ip4_input+0x240>)
 800d1fa:	691b      	ldr	r3, [r3, #16]
 800d1fc:	6839      	ldr	r1, [r7, #0]
 800d1fe:	4618      	mov	r0, r3
 800d200:	f000 f96e 	bl	800d4e0 <ip4_addr_isbroadcast_u32>
 800d204:	4603      	mov	r3, r0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d105      	bne.n	800d216 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d20a:	4b47      	ldr	r3, [pc, #284]	@ (800d328 <ip4_input+0x240>)
 800d20c:	691b      	ldr	r3, [r3, #16]
 800d20e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d212:	2be0      	cmp	r3, #224	@ 0xe0
 800d214:	d104      	bne.n	800d220 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f7f8 f800 	bl	800521c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d21c:	2300      	movs	r3, #0
 800d21e:	e07e      	b.n	800d31e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d104      	bne.n	800d230 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f7f7 fff8 	bl	800521c <pbuf_free>
    return ERR_OK;
 800d22c:	2300      	movs	r3, #0
 800d22e:	e076      	b.n	800d31e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	88db      	ldrh	r3, [r3, #6]
 800d234:	b29b      	uxth	r3, r3
 800d236:	461a      	mov	r2, r3
 800d238:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800d23c:	4013      	ands	r3, r2
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00b      	beq.n	800d25a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 fc92 	bl	800db6c <ip4_reass>
 800d248:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d101      	bne.n	800d254 <ip4_input+0x16c>
      return ERR_OK;
 800d250:	2300      	movs	r3, #0
 800d252:	e064      	b.n	800d31e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d25a:	4a33      	ldr	r2, [pc, #204]	@ (800d328 <ip4_input+0x240>)
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d260:	4a31      	ldr	r2, [pc, #196]	@ (800d328 <ip4_input+0x240>)
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d266:	4a30      	ldr	r2, [pc, #192]	@ (800d328 <ip4_input+0x240>)
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	f003 030f 	and.w	r3, r3, #15
 800d274:	b2db      	uxtb	r3, r3
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	461a      	mov	r2, r3
 800d27c:	4b2a      	ldr	r3, [pc, #168]	@ (800d328 <ip4_input+0x240>)
 800d27e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d280:	89fb      	ldrh	r3, [r7, #14]
 800d282:	4619      	mov	r1, r3
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f7f7 ff43 	bl	8005110 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	7a5b      	ldrb	r3, [r3, #9]
 800d28e:	2b11      	cmp	r3, #17
 800d290:	d006      	beq.n	800d2a0 <ip4_input+0x1b8>
 800d292:	2b11      	cmp	r3, #17
 800d294:	dc13      	bgt.n	800d2be <ip4_input+0x1d6>
 800d296:	2b01      	cmp	r3, #1
 800d298:	d00c      	beq.n	800d2b4 <ip4_input+0x1cc>
 800d29a:	2b06      	cmp	r3, #6
 800d29c:	d005      	beq.n	800d2aa <ip4_input+0x1c2>
 800d29e:	e00e      	b.n	800d2be <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d2a0:	6839      	ldr	r1, [r7, #0]
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f7fe fc68 	bl	800bb78 <udp_input>
        break;
 800d2a8:	e026      	b.n	800d2f8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d2aa:	6839      	ldr	r1, [r7, #0]
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f7fa f88f 	bl	80073d0 <tcp_input>
        break;
 800d2b2:	e021      	b.n	800d2f8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d2b4:	6839      	ldr	r1, [r7, #0]
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f7ff fcee 	bl	800cc98 <icmp_input>
        break;
 800d2bc:	e01c      	b.n	800d2f8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d2be:	4b1a      	ldr	r3, [pc, #104]	@ (800d328 <ip4_input+0x240>)
 800d2c0:	695b      	ldr	r3, [r3, #20]
 800d2c2:	6939      	ldr	r1, [r7, #16]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f000 f90b 	bl	800d4e0 <ip4_addr_isbroadcast_u32>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d10f      	bne.n	800d2f0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d2d0:	4b15      	ldr	r3, [pc, #84]	@ (800d328 <ip4_input+0x240>)
 800d2d2:	695b      	ldr	r3, [r3, #20]
 800d2d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d2d8:	2be0      	cmp	r3, #224	@ 0xe0
 800d2da:	d009      	beq.n	800d2f0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d2dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f7f7 ff87 	bl	80051f6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d2e8:	2102      	movs	r1, #2
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7ff fdd8 	bl	800cea0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f7f7 ff93 	bl	800521c <pbuf_free>
        break;
 800d2f6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d2f8:	4b0b      	ldr	r3, [pc, #44]	@ (800d328 <ip4_input+0x240>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d2fe:	4b0a      	ldr	r3, [pc, #40]	@ (800d328 <ip4_input+0x240>)
 800d300:	2200      	movs	r2, #0
 800d302:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d304:	4b08      	ldr	r3, [pc, #32]	@ (800d328 <ip4_input+0x240>)
 800d306:	2200      	movs	r2, #0
 800d308:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d30a:	4b07      	ldr	r3, [pc, #28]	@ (800d328 <ip4_input+0x240>)
 800d30c:	2200      	movs	r2, #0
 800d30e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d310:	4b05      	ldr	r3, [pc, #20]	@ (800d328 <ip4_input+0x240>)
 800d312:	2200      	movs	r2, #0
 800d314:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d316:	4b04      	ldr	r3, [pc, #16]	@ (800d328 <ip4_input+0x240>)
 800d318:	2200      	movs	r2, #0
 800d31a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d31c:	2300      	movs	r3, #0
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3718      	adds	r7, #24
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	20004cd4 	.word	0x20004cd4
 800d32c:	20008238 	.word	0x20008238

0800d330 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b08a      	sub	sp, #40	@ 0x28
 800d334:	af04      	add	r7, sp, #16
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	60b9      	str	r1, [r7, #8]
 800d33a:	607a      	str	r2, [r7, #4]
 800d33c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d009      	beq.n	800d35c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d003      	beq.n	800d356 <ip4_output_if+0x26>
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d102      	bne.n	800d35c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d358:	3304      	adds	r3, #4
 800d35a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d35c:	78fa      	ldrb	r2, [r7, #3]
 800d35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d360:	9302      	str	r3, [sp, #8]
 800d362:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d366:	9301      	str	r3, [sp, #4]
 800d368:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	4613      	mov	r3, r2
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	6979      	ldr	r1, [r7, #20]
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	f000 f805 	bl	800d384 <ip4_output_if_src>
 800d37a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3718      	adds	r7, #24
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b088      	sub	sp, #32
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
 800d390:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	7b9b      	ldrb	r3, [r3, #14]
 800d396:	2b01      	cmp	r3, #1
 800d398:	d006      	beq.n	800d3a8 <ip4_output_if_src+0x24>
 800d39a:	4b4b      	ldr	r3, [pc, #300]	@ (800d4c8 <ip4_output_if_src+0x144>)
 800d39c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800d3a0:	494a      	ldr	r1, [pc, #296]	@ (800d4cc <ip4_output_if_src+0x148>)
 800d3a2:	484b      	ldr	r0, [pc, #300]	@ (800d4d0 <ip4_output_if_src+0x14c>)
 800d3a4:	f001 f8f2 	bl	800e58c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d060      	beq.n	800d470 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d3ae:	2314      	movs	r3, #20
 800d3b0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d3b2:	2114      	movs	r1, #20
 800d3b4:	68f8      	ldr	r0, [r7, #12]
 800d3b6:	f7f7 fe9b 	bl	80050f0 <pbuf_add_header>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d002      	beq.n	800d3c6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d3c0:	f06f 0301 	mvn.w	r3, #1
 800d3c4:	e07c      	b.n	800d4c0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	895b      	ldrh	r3, [r3, #10]
 800d3d0:	2b13      	cmp	r3, #19
 800d3d2:	d806      	bhi.n	800d3e2 <ip4_output_if_src+0x5e>
 800d3d4:	4b3c      	ldr	r3, [pc, #240]	@ (800d4c8 <ip4_output_if_src+0x144>)
 800d3d6:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800d3da:	493e      	ldr	r1, [pc, #248]	@ (800d4d4 <ip4_output_if_src+0x150>)
 800d3dc:	483c      	ldr	r0, [pc, #240]	@ (800d4d0 <ip4_output_if_src+0x14c>)
 800d3de:	f001 f8d5 	bl	800e58c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	78fa      	ldrb	r2, [r7, #3]
 800d3e6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800d3ee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d3f8:	8b7b      	ldrh	r3, [r7, #26]
 800d3fa:	089b      	lsrs	r3, r3, #2
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	b2db      	uxtb	r3, r3
 800d400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d404:	b2da      	uxtb	r2, r3
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800d410:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	891b      	ldrh	r3, [r3, #8]
 800d416:	4618      	mov	r0, r3
 800d418:	f7f6 fba2 	bl	8003b60 <lwip_htons>
 800d41c:	4603      	mov	r3, r0
 800d41e:	461a      	mov	r2, r3
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d424:	69fb      	ldr	r3, [r7, #28]
 800d426:	2200      	movs	r2, #0
 800d428:	719a      	strb	r2, [r3, #6]
 800d42a:	2200      	movs	r2, #0
 800d42c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d42e:	4b2a      	ldr	r3, [pc, #168]	@ (800d4d8 <ip4_output_if_src+0x154>)
 800d430:	881b      	ldrh	r3, [r3, #0]
 800d432:	4618      	mov	r0, r3
 800d434:	f7f6 fb94 	bl	8003b60 <lwip_htons>
 800d438:	4603      	mov	r3, r0
 800d43a:	461a      	mov	r2, r3
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d440:	4b25      	ldr	r3, [pc, #148]	@ (800d4d8 <ip4_output_if_src+0x154>)
 800d442:	881b      	ldrh	r3, [r3, #0]
 800d444:	3301      	adds	r3, #1
 800d446:	b29a      	uxth	r2, r3
 800d448:	4b23      	ldr	r3, [pc, #140]	@ (800d4d8 <ip4_output_if_src+0x154>)
 800d44a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d104      	bne.n	800d45c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d452:	4b22      	ldr	r3, [pc, #136]	@ (800d4dc <ip4_output_if_src+0x158>)
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	60da      	str	r2, [r3, #12]
 800d45a:	e003      	b.n	800d464 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d464:	69fb      	ldr	r3, [r7, #28]
 800d466:	2200      	movs	r2, #0
 800d468:	729a      	strb	r2, [r3, #10]
 800d46a:	2200      	movs	r2, #0
 800d46c:	72da      	strb	r2, [r3, #11]
 800d46e:	e00f      	b.n	800d490 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	895b      	ldrh	r3, [r3, #10]
 800d474:	2b13      	cmp	r3, #19
 800d476:	d802      	bhi.n	800d47e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d478:	f06f 0301 	mvn.w	r3, #1
 800d47c:	e020      	b.n	800d4c0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	691b      	ldr	r3, [r3, #16]
 800d488:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d48a:	f107 0314 	add.w	r3, r7, #20
 800d48e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d492:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d494:	2b00      	cmp	r3, #0
 800d496:	d00c      	beq.n	800d4b2 <ip4_output_if_src+0x12e>
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	891a      	ldrh	r2, [r3, #8]
 800d49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d49e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d906      	bls.n	800d4b2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d4a4:	687a      	ldr	r2, [r7, #4]
 800d4a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d4a8:	68f8      	ldr	r0, [r7, #12]
 800d4aa:	f000 fd53 	bl	800df54 <ip4_frag>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	e006      	b.n	800d4c0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4b4:	695b      	ldr	r3, [r3, #20]
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	68f9      	ldr	r1, [r7, #12]
 800d4ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d4bc:	4798      	blx	r3
 800d4be:	4603      	mov	r3, r0
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3720      	adds	r7, #32
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	08011aa0 	.word	0x08011aa0
 800d4cc:	08011ad4 	.word	0x08011ad4
 800d4d0:	08011ae0 	.word	0x08011ae0
 800d4d4:	08011b08 	.word	0x08011b08
 800d4d8:	20008396 	.word	0x20008396
 800d4dc:	08011ee0 	.word	0x08011ee0

0800d4e0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f4:	d002      	beq.n	800d4fc <ip4_addr_isbroadcast_u32+0x1c>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d101      	bne.n	800d500 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	e02a      	b.n	800d556 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d506:	f003 0302 	and.w	r3, r3, #2
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d101      	bne.n	800d512 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d50e:	2300      	movs	r3, #0
 800d510:	e021      	b.n	800d556 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	3304      	adds	r3, #4
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d101      	bne.n	800d522 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d51e:	2300      	movs	r3, #0
 800d520:	e019      	b.n	800d556 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d522:	68fa      	ldr	r2, [r7, #12]
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	3304      	adds	r3, #4
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	405a      	eors	r2, r3
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	3308      	adds	r3, #8
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	4013      	ands	r3, r2
 800d534:	2b00      	cmp	r3, #0
 800d536:	d10d      	bne.n	800d554 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	3308      	adds	r3, #8
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	43da      	mvns	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	3308      	adds	r3, #8
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d101      	bne.n	800d554 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d550:	2301      	movs	r3, #1
 800d552:	e000      	b.n	800d556 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d554:	2300      	movs	r3, #0
  }
}
 800d556:	4618      	mov	r0, r3
 800d558:	3714      	adds	r7, #20
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr
	...

0800d564 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d56a:	2300      	movs	r3, #0
 800d56c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d56e:	4b12      	ldr	r3, [pc, #72]	@ (800d5b8 <ip_reass_tmr+0x54>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d574:	e018      	b.n	800d5a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	7fdb      	ldrb	r3, [r3, #31]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d00b      	beq.n	800d596 <ip_reass_tmr+0x32>
      r->timer--;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	7fdb      	ldrb	r3, [r3, #31]
 800d582:	3b01      	subs	r3, #1
 800d584:	b2da      	uxtb	r2, r3
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	60fb      	str	r3, [r7, #12]
 800d594:	e008      	b.n	800d5a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d5a0:	68b9      	ldr	r1, [r7, #8]
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 f80a 	bl	800d5bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d1e3      	bne.n	800d576 <ip_reass_tmr+0x12>
    }
  }
}
 800d5ae:	bf00      	nop
 800d5b0:	bf00      	nop
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	20008398 	.word	0x20008398

0800d5bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b088      	sub	sp, #32
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d5ca:	683a      	ldr	r2, [r7, #0]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d105      	bne.n	800d5de <ip_reass_free_complete_datagram+0x22>
 800d5d2:	4b45      	ldr	r3, [pc, #276]	@ (800d6e8 <ip_reass_free_complete_datagram+0x12c>)
 800d5d4:	22ab      	movs	r2, #171	@ 0xab
 800d5d6:	4945      	ldr	r1, [pc, #276]	@ (800d6ec <ip_reass_free_complete_datagram+0x130>)
 800d5d8:	4845      	ldr	r0, [pc, #276]	@ (800d6f0 <ip_reass_free_complete_datagram+0x134>)
 800d5da:	f000 ffd7 	bl	800e58c <iprintf>
  if (prev != NULL) {
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d00a      	beq.n	800d5fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d005      	beq.n	800d5fa <ip_reass_free_complete_datagram+0x3e>
 800d5ee:	4b3e      	ldr	r3, [pc, #248]	@ (800d6e8 <ip_reass_free_complete_datagram+0x12c>)
 800d5f0:	22ad      	movs	r2, #173	@ 0xad
 800d5f2:	4940      	ldr	r1, [pc, #256]	@ (800d6f4 <ip_reass_free_complete_datagram+0x138>)
 800d5f4:	483e      	ldr	r0, [pc, #248]	@ (800d6f0 <ip_reass_free_complete_datagram+0x134>)
 800d5f6:	f000 ffc9 	bl	800e58c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	889b      	ldrh	r3, [r3, #4]
 800d606:	b29b      	uxth	r3, r3
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d12a      	bne.n	800d662 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	6858      	ldr	r0, [r3, #4]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	3308      	adds	r3, #8
 800d622:	2214      	movs	r2, #20
 800d624:	4619      	mov	r1, r3
 800d626:	f001 f88c 	bl	800e742 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d62a:	2101      	movs	r1, #1
 800d62c:	69b8      	ldr	r0, [r7, #24]
 800d62e:	f7ff fc47 	bl	800cec0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d632:	69b8      	ldr	r0, [r7, #24]
 800d634:	f7f7 fe7a 	bl	800532c <pbuf_clen>
 800d638:	4603      	mov	r3, r0
 800d63a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d63c:	8bfa      	ldrh	r2, [r7, #30]
 800d63e:	8a7b      	ldrh	r3, [r7, #18]
 800d640:	4413      	add	r3, r2
 800d642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d646:	db05      	blt.n	800d654 <ip_reass_free_complete_datagram+0x98>
 800d648:	4b27      	ldr	r3, [pc, #156]	@ (800d6e8 <ip_reass_free_complete_datagram+0x12c>)
 800d64a:	22bc      	movs	r2, #188	@ 0xbc
 800d64c:	492a      	ldr	r1, [pc, #168]	@ (800d6f8 <ip_reass_free_complete_datagram+0x13c>)
 800d64e:	4828      	ldr	r0, [pc, #160]	@ (800d6f0 <ip_reass_free_complete_datagram+0x134>)
 800d650:	f000 ff9c 	bl	800e58c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d654:	8bfa      	ldrh	r2, [r7, #30]
 800d656:	8a7b      	ldrh	r3, [r7, #18]
 800d658:	4413      	add	r3, r2
 800d65a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d65c:	69b8      	ldr	r0, [r7, #24]
 800d65e:	f7f7 fddd 	bl	800521c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d668:	e01f      	b.n	800d6aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d67a:	68f8      	ldr	r0, [r7, #12]
 800d67c:	f7f7 fe56 	bl	800532c <pbuf_clen>
 800d680:	4603      	mov	r3, r0
 800d682:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d684:	8bfa      	ldrh	r2, [r7, #30]
 800d686:	8a7b      	ldrh	r3, [r7, #18]
 800d688:	4413      	add	r3, r2
 800d68a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d68e:	db05      	blt.n	800d69c <ip_reass_free_complete_datagram+0xe0>
 800d690:	4b15      	ldr	r3, [pc, #84]	@ (800d6e8 <ip_reass_free_complete_datagram+0x12c>)
 800d692:	22cc      	movs	r2, #204	@ 0xcc
 800d694:	4918      	ldr	r1, [pc, #96]	@ (800d6f8 <ip_reass_free_complete_datagram+0x13c>)
 800d696:	4816      	ldr	r0, [pc, #88]	@ (800d6f0 <ip_reass_free_complete_datagram+0x134>)
 800d698:	f000 ff78 	bl	800e58c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d69c:	8bfa      	ldrh	r2, [r7, #30]
 800d69e:	8a7b      	ldrh	r3, [r7, #18]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d6a4:	68f8      	ldr	r0, [r7, #12]
 800d6a6:	f7f7 fdb9 	bl	800521c <pbuf_free>
  while (p != NULL) {
 800d6aa:	69bb      	ldr	r3, [r7, #24]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d1dc      	bne.n	800d66a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d6b0:	6839      	ldr	r1, [r7, #0]
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 f8c2 	bl	800d83c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d6b8:	4b10      	ldr	r3, [pc, #64]	@ (800d6fc <ip_reass_free_complete_datagram+0x140>)
 800d6ba:	881b      	ldrh	r3, [r3, #0]
 800d6bc:	8bfa      	ldrh	r2, [r7, #30]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d905      	bls.n	800d6ce <ip_reass_free_complete_datagram+0x112>
 800d6c2:	4b09      	ldr	r3, [pc, #36]	@ (800d6e8 <ip_reass_free_complete_datagram+0x12c>)
 800d6c4:	22d2      	movs	r2, #210	@ 0xd2
 800d6c6:	490e      	ldr	r1, [pc, #56]	@ (800d700 <ip_reass_free_complete_datagram+0x144>)
 800d6c8:	4809      	ldr	r0, [pc, #36]	@ (800d6f0 <ip_reass_free_complete_datagram+0x134>)
 800d6ca:	f000 ff5f 	bl	800e58c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d6ce:	4b0b      	ldr	r3, [pc, #44]	@ (800d6fc <ip_reass_free_complete_datagram+0x140>)
 800d6d0:	881a      	ldrh	r2, [r3, #0]
 800d6d2:	8bfb      	ldrh	r3, [r7, #30]
 800d6d4:	1ad3      	subs	r3, r2, r3
 800d6d6:	b29a      	uxth	r2, r3
 800d6d8:	4b08      	ldr	r3, [pc, #32]	@ (800d6fc <ip_reass_free_complete_datagram+0x140>)
 800d6da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d6dc:	8bfb      	ldrh	r3, [r7, #30]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3720      	adds	r7, #32
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	08011b38 	.word	0x08011b38
 800d6ec:	08011b74 	.word	0x08011b74
 800d6f0:	08011b80 	.word	0x08011b80
 800d6f4:	08011ba8 	.word	0x08011ba8
 800d6f8:	08011bbc 	.word	0x08011bbc
 800d6fc:	2000839c 	.word	0x2000839c
 800d700:	08011bdc 	.word	0x08011bdc

0800d704 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b08a      	sub	sp, #40	@ 0x28
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d70e:	2300      	movs	r3, #0
 800d710:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d712:	2300      	movs	r3, #0
 800d714:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d716:	2300      	movs	r3, #0
 800d718:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d71a:	2300      	movs	r3, #0
 800d71c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d71e:	2300      	movs	r3, #0
 800d720:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d722:	4b28      	ldr	r3, [pc, #160]	@ (800d7c4 <ip_reass_remove_oldest_datagram+0xc0>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800d728:	e030      	b.n	800d78c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72c:	695a      	ldr	r2, [r3, #20]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	68db      	ldr	r3, [r3, #12]
 800d732:	429a      	cmp	r2, r3
 800d734:	d10c      	bne.n	800d750 <ip_reass_remove_oldest_datagram+0x4c>
 800d736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d738:	699a      	ldr	r2, [r3, #24]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	691b      	ldr	r3, [r3, #16]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d106      	bne.n	800d750 <ip_reass_remove_oldest_datagram+0x4c>
 800d742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d744:	899a      	ldrh	r2, [r3, #12]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	889b      	ldrh	r3, [r3, #4]
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d014      	beq.n	800d77a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	3301      	adds	r3, #1
 800d754:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d756:	6a3b      	ldr	r3, [r7, #32]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d104      	bne.n	800d766 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	61bb      	str	r3, [r7, #24]
 800d764:	e009      	b.n	800d77a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d768:	7fda      	ldrb	r2, [r3, #31]
 800d76a:	6a3b      	ldr	r3, [r7, #32]
 800d76c:	7fdb      	ldrb	r3, [r3, #31]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d803      	bhi.n	800d77a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d774:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d001      	beq.n	800d786 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d784:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800d78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d1cb      	bne.n	800d72a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d792:	6a3b      	ldr	r3, [r7, #32]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d008      	beq.n	800d7aa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d798:	69b9      	ldr	r1, [r7, #24]
 800d79a:	6a38      	ldr	r0, [r7, #32]
 800d79c:	f7ff ff0e 	bl	800d5bc <ip_reass_free_complete_datagram>
 800d7a0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d7a2:	697a      	ldr	r2, [r7, #20]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	4413      	add	r3, r2
 800d7a8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d7aa:	697a      	ldr	r2, [r7, #20]
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	da02      	bge.n	800d7b8 <ip_reass_remove_oldest_datagram+0xb4>
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	dcac      	bgt.n	800d712 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d7b8:	697b      	ldr	r3, [r7, #20]
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3728      	adds	r7, #40	@ 0x28
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	20008398 	.word	0x20008398

0800d7c8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d7d2:	2004      	movs	r0, #4
 800d7d4:	f7f6 fe3c 	bl	8004450 <memp_malloc>
 800d7d8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d110      	bne.n	800d802 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d7e0:	6839      	ldr	r1, [r7, #0]
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f7ff ff8e 	bl	800d704 <ip_reass_remove_oldest_datagram>
 800d7e8:	4602      	mov	r2, r0
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	dc03      	bgt.n	800d7f8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d7f0:	2004      	movs	r0, #4
 800d7f2:	f7f6 fe2d 	bl	8004450 <memp_malloc>
 800d7f6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d101      	bne.n	800d802 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d7fe:	2300      	movs	r3, #0
 800d800:	e016      	b.n	800d830 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d802:	2220      	movs	r2, #32
 800d804:	2100      	movs	r1, #0
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f000 ff25 	bl	800e656 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	220f      	movs	r2, #15
 800d810:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d812:	4b09      	ldr	r3, [pc, #36]	@ (800d838 <ip_reass_enqueue_new_datagram+0x70>)
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d81a:	4a07      	ldr	r2, [pc, #28]	@ (800d838 <ip_reass_enqueue_new_datagram+0x70>)
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	3308      	adds	r3, #8
 800d824:	2214      	movs	r2, #20
 800d826:	6879      	ldr	r1, [r7, #4]
 800d828:	4618      	mov	r0, r3
 800d82a:	f000 ff8a 	bl	800e742 <memcpy>
  return ipr;
 800d82e:	68fb      	ldr	r3, [r7, #12]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3710      	adds	r7, #16
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	20008398 	.word	0x20008398

0800d83c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b082      	sub	sp, #8
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d846:	4b10      	ldr	r3, [pc, #64]	@ (800d888 <ip_reass_dequeue_datagram+0x4c>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d104      	bne.n	800d85a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a0c      	ldr	r2, [pc, #48]	@ (800d888 <ip_reass_dequeue_datagram+0x4c>)
 800d856:	6013      	str	r3, [r2, #0]
 800d858:	e00d      	b.n	800d876 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d106      	bne.n	800d86e <ip_reass_dequeue_datagram+0x32>
 800d860:	4b0a      	ldr	r3, [pc, #40]	@ (800d88c <ip_reass_dequeue_datagram+0x50>)
 800d862:	f240 1245 	movw	r2, #325	@ 0x145
 800d866:	490a      	ldr	r1, [pc, #40]	@ (800d890 <ip_reass_dequeue_datagram+0x54>)
 800d868:	480a      	ldr	r0, [pc, #40]	@ (800d894 <ip_reass_dequeue_datagram+0x58>)
 800d86a:	f000 fe8f 	bl	800e58c <iprintf>
    prev->next = ipr->next;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d876:	6879      	ldr	r1, [r7, #4]
 800d878:	2004      	movs	r0, #4
 800d87a:	f7f6 fe59 	bl	8004530 <memp_free>
}
 800d87e:	bf00      	nop
 800d880:	3708      	adds	r7, #8
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	20008398 	.word	0x20008398
 800d88c:	08011b38 	.word	0x08011b38
 800d890:	08011c00 	.word	0x08011c00
 800d894:	08011b80 	.word	0x08011b80

0800d898 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b08c      	sub	sp, #48	@ 0x30
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	885b      	ldrh	r3, [r3, #2]
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f7f6 f951 	bl	8003b60 <lwip_htons>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	f003 030f 	and.w	r3, r3, #15
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d8d0:	7e7b      	ldrb	r3, [r7, #25]
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	8b7a      	ldrh	r2, [r7, #26]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d202      	bcs.n	800d8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d8da:	f04f 33ff 	mov.w	r3, #4294967295
 800d8de:	e135      	b.n	800db4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d8e0:	7e7b      	ldrb	r3, [r7, #25]
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	8b7a      	ldrh	r2, [r7, #26]
 800d8e6:	1ad3      	subs	r3, r2, r3
 800d8e8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	88db      	ldrh	r3, [r3, #6]
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7f6 f935 	bl	8003b60 <lwip_htons>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d8fc:	b29b      	uxth	r3, r3
 800d8fe:	00db      	lsls	r3, r3, #3
 800d900:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800d908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d90a:	2200      	movs	r2, #0
 800d90c:	701a      	strb	r2, [r3, #0]
 800d90e:	2200      	movs	r2, #0
 800d910:	705a      	strb	r2, [r3, #1]
 800d912:	2200      	movs	r2, #0
 800d914:	709a      	strb	r2, [r3, #2]
 800d916:	2200      	movs	r2, #0
 800d918:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d91c:	8afa      	ldrh	r2, [r7, #22]
 800d91e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d920:	8afa      	ldrh	r2, [r7, #22]
 800d922:	8b7b      	ldrh	r3, [r7, #26]
 800d924:	4413      	add	r3, r2
 800d926:	b29a      	uxth	r2, r3
 800d928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92e:	88db      	ldrh	r3, [r3, #6]
 800d930:	b29b      	uxth	r3, r3
 800d932:	8afa      	ldrh	r2, [r7, #22]
 800d934:	429a      	cmp	r2, r3
 800d936:	d902      	bls.n	800d93e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d938:	f04f 33ff 	mov.w	r3, #4294967295
 800d93c:	e106      	b.n	800db4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	627b      	str	r3, [r7, #36]	@ 0x24
 800d944:	e068      	b.n	800da18 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d94e:	889b      	ldrh	r3, [r3, #4]
 800d950:	b29a      	uxth	r2, r3
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	889b      	ldrh	r3, [r3, #4]
 800d956:	b29b      	uxth	r3, r3
 800d958:	429a      	cmp	r2, r3
 800d95a:	d235      	bcs.n	800d9c8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d95e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d960:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d964:	2b00      	cmp	r3, #0
 800d966:	d020      	beq.n	800d9aa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d96a:	889b      	ldrh	r3, [r3, #4]
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d970:	88db      	ldrh	r3, [r3, #6]
 800d972:	b29b      	uxth	r3, r3
 800d974:	429a      	cmp	r2, r3
 800d976:	d307      	bcc.n	800d988 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d97a:	88db      	ldrh	r3, [r3, #6]
 800d97c:	b29a      	uxth	r2, r3
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	889b      	ldrh	r3, [r3, #4]
 800d982:	b29b      	uxth	r3, r3
 800d984:	429a      	cmp	r2, r3
 800d986:	d902      	bls.n	800d98e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d988:	f04f 33ff 	mov.w	r3, #4294967295
 800d98c:	e0de      	b.n	800db4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d98e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d990:	68ba      	ldr	r2, [r7, #8]
 800d992:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d996:	88db      	ldrh	r3, [r3, #6]
 800d998:	b29a      	uxth	r2, r3
 800d99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d99c:	889b      	ldrh	r3, [r3, #4]
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d03d      	beq.n	800da20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d9a8:	e03a      	b.n	800da20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ac:	88db      	ldrh	r3, [r3, #6]
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	889b      	ldrh	r3, [r3, #4]
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d902      	bls.n	800d9c0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d9be:	e0c5      	b.n	800db4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	68ba      	ldr	r2, [r7, #8]
 800d9c4:	605a      	str	r2, [r3, #4]
      break;
 800d9c6:	e02b      	b.n	800da20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ca:	889b      	ldrh	r3, [r3, #4]
 800d9cc:	b29a      	uxth	r2, r3
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	889b      	ldrh	r3, [r3, #4]
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d102      	bne.n	800d9de <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d9d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9dc:	e0b6      	b.n	800db4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9e0:	889b      	ldrh	r3, [r3, #4]
 800d9e2:	b29a      	uxth	r2, r3
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	88db      	ldrh	r3, [r3, #6]
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d202      	bcs.n	800d9f4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d9ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d9f2:	e0ab      	b.n	800db4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d009      	beq.n	800da0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9fc:	88db      	ldrh	r3, [r3, #6]
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	889b      	ldrh	r3, [r3, #4]
 800da04:	b29b      	uxth	r3, r3
 800da06:	429a      	cmp	r2, r3
 800da08:	d001      	beq.n	800da0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800da0a:	2300      	movs	r3, #0
 800da0c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800da18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d193      	bne.n	800d946 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800da1e:	e000      	b.n	800da22 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800da20:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800da22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da24:	2b00      	cmp	r3, #0
 800da26:	d12d      	bne.n	800da84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800da28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d01c      	beq.n	800da68 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800da2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da30:	88db      	ldrh	r3, [r3, #6]
 800da32:	b29a      	uxth	r2, r3
 800da34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da36:	889b      	ldrh	r3, [r3, #4]
 800da38:	b29b      	uxth	r3, r3
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d906      	bls.n	800da4c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800da3e:	4b45      	ldr	r3, [pc, #276]	@ (800db54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800da40:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800da44:	4944      	ldr	r1, [pc, #272]	@ (800db58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800da46:	4845      	ldr	r0, [pc, #276]	@ (800db5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800da48:	f000 fda0 	bl	800e58c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800da4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da4e:	68ba      	ldr	r2, [r7, #8]
 800da50:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800da52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da54:	88db      	ldrh	r3, [r3, #6]
 800da56:	b29a      	uxth	r2, r3
 800da58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da5a:	889b      	ldrh	r3, [r3, #4]
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	429a      	cmp	r2, r3
 800da60:	d010      	beq.n	800da84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800da62:	2300      	movs	r3, #0
 800da64:	623b      	str	r3, [r7, #32]
 800da66:	e00d      	b.n	800da84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d006      	beq.n	800da7e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800da70:	4b38      	ldr	r3, [pc, #224]	@ (800db54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800da72:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800da76:	493a      	ldr	r1, [pc, #232]	@ (800db60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800da78:	4838      	ldr	r0, [pc, #224]	@ (800db5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800da7a:	f000 fd87 	bl	800e58c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	68ba      	ldr	r2, [r7, #8]
 800da82:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d105      	bne.n	800da96 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	7f9b      	ldrb	r3, [r3, #30]
 800da8e:	f003 0301 	and.w	r3, r3, #1
 800da92:	2b00      	cmp	r3, #0
 800da94:	d059      	beq.n	800db4a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800da96:	6a3b      	ldr	r3, [r7, #32]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d04f      	beq.n	800db3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d006      	beq.n	800dab2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	889b      	ldrh	r3, [r3, #4]
 800daac:	b29b      	uxth	r3, r3
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d002      	beq.n	800dab8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800dab2:	2300      	movs	r3, #0
 800dab4:	623b      	str	r3, [r7, #32]
 800dab6:	e041      	b.n	800db3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800dab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daba:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800dabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800dac2:	e012      	b.n	800daea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800dac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800daca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dacc:	88db      	ldrh	r3, [r3, #6]
 800dace:	b29a      	uxth	r2, r3
 800dad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dad2:	889b      	ldrh	r3, [r3, #4]
 800dad4:	b29b      	uxth	r3, r3
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d002      	beq.n	800dae0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800dada:	2300      	movs	r3, #0
 800dadc:	623b      	str	r3, [r7, #32]
            break;
 800dade:	e007      	b.n	800daf0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800dae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dae2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800dae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800daea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daec:	2b00      	cmp	r3, #0
 800daee:	d1e9      	bne.n	800dac4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800daf0:	6a3b      	ldr	r3, [r7, #32]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d022      	beq.n	800db3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d106      	bne.n	800db0c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800dafe:	4b15      	ldr	r3, [pc, #84]	@ (800db54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800db00:	f240 12df 	movw	r2, #479	@ 0x1df
 800db04:	4917      	ldr	r1, [pc, #92]	@ (800db64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800db06:	4815      	ldr	r0, [pc, #84]	@ (800db5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800db08:	f000 fd40 	bl	800e58c <iprintf>
          LWIP_ASSERT("sanity check",
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db14:	429a      	cmp	r2, r3
 800db16:	d106      	bne.n	800db26 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800db18:	4b0e      	ldr	r3, [pc, #56]	@ (800db54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800db1a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800db1e:	4911      	ldr	r1, [pc, #68]	@ (800db64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800db20:	480e      	ldr	r0, [pc, #56]	@ (800db5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800db22:	f000 fd33 	bl	800e58c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800db26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d006      	beq.n	800db3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800db2e:	4b09      	ldr	r3, [pc, #36]	@ (800db54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800db30:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800db34:	490c      	ldr	r1, [pc, #48]	@ (800db68 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800db36:	4809      	ldr	r0, [pc, #36]	@ (800db5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800db38:	f000 fd28 	bl	800e58c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800db3c:	6a3b      	ldr	r3, [r7, #32]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	bf14      	ite	ne
 800db42:	2301      	movne	r3, #1
 800db44:	2300      	moveq	r3, #0
 800db46:	b2db      	uxtb	r3, r3
 800db48:	e000      	b.n	800db4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800db4a:	2300      	movs	r3, #0
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3730      	adds	r7, #48	@ 0x30
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}
 800db54:	08011b38 	.word	0x08011b38
 800db58:	08011c1c 	.word	0x08011c1c
 800db5c:	08011b80 	.word	0x08011b80
 800db60:	08011c3c 	.word	0x08011c3c
 800db64:	08011c74 	.word	0x08011c74
 800db68:	08011c84 	.word	0x08011c84

0800db6c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b08e      	sub	sp, #56	@ 0x38
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800db7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	f003 030f 	and.w	r3, r3, #15
 800db82:	b2db      	uxtb	r3, r3
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	b2db      	uxtb	r3, r3
 800db88:	2b14      	cmp	r3, #20
 800db8a:	f040 8171 	bne.w	800de70 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800db8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db90:	88db      	ldrh	r3, [r3, #6]
 800db92:	b29b      	uxth	r3, r3
 800db94:	4618      	mov	r0, r3
 800db96:	f7f5 ffe3 	bl	8003b60 <lwip_htons>
 800db9a:	4603      	mov	r3, r0
 800db9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	00db      	lsls	r3, r3, #3
 800dba4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dba8:	885b      	ldrh	r3, [r3, #2]
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7f5 ffd7 	bl	8003b60 <lwip_htons>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800dbb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	f003 030f 	and.w	r3, r3, #15
 800dbbe:	b2db      	uxtb	r3, r3
 800dbc0:	009b      	lsls	r3, r3, #2
 800dbc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800dbc6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	f0c0 8150 	bcc.w	800de74 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800dbd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dbdc:	1ad3      	subs	r3, r2, r3
 800dbde:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f7f7 fba3 	bl	800532c <pbuf_clen>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800dbea:	4b8c      	ldr	r3, [pc, #560]	@ (800de1c <ip4_reass+0x2b0>)
 800dbec:	881b      	ldrh	r3, [r3, #0]
 800dbee:	461a      	mov	r2, r3
 800dbf0:	8c3b      	ldrh	r3, [r7, #32]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	2b0a      	cmp	r3, #10
 800dbf6:	dd10      	ble.n	800dc1a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dbf8:	8c3b      	ldrh	r3, [r7, #32]
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbfe:	f7ff fd81 	bl	800d704 <ip_reass_remove_oldest_datagram>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	f000 8137 	beq.w	800de78 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800dc0a:	4b84      	ldr	r3, [pc, #528]	@ (800de1c <ip4_reass+0x2b0>)
 800dc0c:	881b      	ldrh	r3, [r3, #0]
 800dc0e:	461a      	mov	r2, r3
 800dc10:	8c3b      	ldrh	r3, [r7, #32]
 800dc12:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dc14:	2b0a      	cmp	r3, #10
 800dc16:	f300 812f 	bgt.w	800de78 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dc1a:	4b81      	ldr	r3, [pc, #516]	@ (800de20 <ip4_reass+0x2b4>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc20:	e015      	b.n	800dc4e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800dc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc24:	695a      	ldr	r2, [r3, #20]
 800dc26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc28:	68db      	ldr	r3, [r3, #12]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d10c      	bne.n	800dc48 <ip4_reass+0xdc>
 800dc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc30:	699a      	ldr	r2, [r3, #24]
 800dc32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc34:	691b      	ldr	r3, [r3, #16]
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d106      	bne.n	800dc48 <ip4_reass+0xdc>
 800dc3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc3c:	899a      	ldrh	r2, [r3, #12]
 800dc3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc40:	889b      	ldrh	r3, [r3, #4]
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d006      	beq.n	800dc56 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1e6      	bne.n	800dc22 <ip4_reass+0xb6>
 800dc54:	e000      	b.n	800dc58 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800dc56:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800dc58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d109      	bne.n	800dc72 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800dc5e:	8c3b      	ldrh	r3, [r7, #32]
 800dc60:	4619      	mov	r1, r3
 800dc62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc64:	f7ff fdb0 	bl	800d7c8 <ip_reass_enqueue_new_datagram>
 800dc68:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800dc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d11c      	bne.n	800dcaa <ip4_reass+0x13e>
      goto nullreturn;
 800dc70:	e105      	b.n	800de7e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dc72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc74:	88db      	ldrh	r3, [r3, #6]
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7f5 ff71 	bl	8003b60 <lwip_htons>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d110      	bne.n	800dcaa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800dc88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc8a:	89db      	ldrh	r3, [r3, #14]
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7f5 ff67 	bl	8003b60 <lwip_htons>
 800dc92:	4603      	mov	r3, r0
 800dc94:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d006      	beq.n	800dcaa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800dc9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc9e:	3308      	adds	r3, #8
 800dca0:	2214      	movs	r2, #20
 800dca2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dca4:	4618      	mov	r0, r3
 800dca6:	f000 fd4c 	bl	800e742 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800dcaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcac:	88db      	ldrh	r3, [r3, #6]
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	f003 0320 	and.w	r3, r3, #32
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	bf0c      	ite	eq
 800dcb8:	2301      	moveq	r3, #1
 800dcba:	2300      	movne	r3, #0
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800dcc0:	69fb      	ldr	r3, [r7, #28]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d00e      	beq.n	800dce4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800dcc6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800dcc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dcca:	4413      	add	r3, r2
 800dccc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800dcce:	8b7a      	ldrh	r2, [r7, #26]
 800dcd0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	f0c0 80a0 	bcc.w	800de18 <ip4_reass+0x2ac>
 800dcd8:	8b7b      	ldrh	r3, [r7, #26]
 800dcda:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800dcde:	4293      	cmp	r3, r2
 800dce0:	f200 809a 	bhi.w	800de18 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800dce4:	69fa      	ldr	r2, [r7, #28]
 800dce6:	6879      	ldr	r1, [r7, #4]
 800dce8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dcea:	f7ff fdd5 	bl	800d898 <ip_reass_chain_frag_into_datagram_and_validate>
 800dcee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcf6:	f000 809b 	beq.w	800de30 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dcfa:	4b48      	ldr	r3, [pc, #288]	@ (800de1c <ip4_reass+0x2b0>)
 800dcfc:	881a      	ldrh	r2, [r3, #0]
 800dcfe:	8c3b      	ldrh	r3, [r7, #32]
 800dd00:	4413      	add	r3, r2
 800dd02:	b29a      	uxth	r2, r3
 800dd04:	4b45      	ldr	r3, [pc, #276]	@ (800de1c <ip4_reass+0x2b0>)
 800dd06:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d00d      	beq.n	800dd2a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800dd0e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800dd10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd12:	4413      	add	r3, r2
 800dd14:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800dd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd18:	8a7a      	ldrh	r2, [r7, #18]
 800dd1a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dd1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd1e:	7f9b      	ldrb	r3, [r3, #30]
 800dd20:	f043 0301 	orr.w	r3, r3, #1
 800dd24:	b2da      	uxtb	r2, r3
 800dd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd28:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	d171      	bne.n	800de14 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800dd30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd32:	8b9b      	ldrh	r3, [r3, #28]
 800dd34:	3314      	adds	r3, #20
 800dd36:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800dd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800dd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800dd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd4c:	3308      	adds	r3, #8
 800dd4e:	2214      	movs	r2, #20
 800dd50:	4619      	mov	r1, r3
 800dd52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd54:	f000 fcf5 	bl	800e742 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800dd58:	8a3b      	ldrh	r3, [r7, #16]
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7f5 ff00 	bl	8003b60 <lwip_htons>
 800dd60:	4603      	mov	r3, r0
 800dd62:	461a      	mov	r2, r3
 800dd64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd66:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800dd68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	719a      	strb	r2, [r3, #6]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800dd72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd74:	2200      	movs	r2, #0
 800dd76:	729a      	strb	r2, [r3, #10]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800dd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd7e:	685b      	ldr	r3, [r3, #4]
 800dd80:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800dd82:	e00d      	b.n	800dda0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800dd84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800dd8a:	2114      	movs	r1, #20
 800dd8c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800dd8e:	f7f7 f9bf 	bl	8005110 <pbuf_remove_header>
      pbuf_cat(p, r);
 800dd92:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f7f7 fb03 	bl	80053a0 <pbuf_cat>
      r = iprh->next_pbuf;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800dda0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d1ee      	bne.n	800dd84 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800dda6:	4b1e      	ldr	r3, [pc, #120]	@ (800de20 <ip4_reass+0x2b4>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d102      	bne.n	800ddb6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ddb4:	e010      	b.n	800ddd8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ddb6:	4b1a      	ldr	r3, [pc, #104]	@ (800de20 <ip4_reass+0x2b4>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ddbc:	e007      	b.n	800ddce <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ddbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d006      	beq.n	800ddd6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ddc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ddce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d1f4      	bne.n	800ddbe <ip4_reass+0x252>
 800ddd4:	e000      	b.n	800ddd8 <ip4_reass+0x26c>
          break;
 800ddd6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ddd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ddda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dddc:	f7ff fd2e 	bl	800d83c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7f7 faa3 	bl	800532c <pbuf_clen>
 800dde6:	4603      	mov	r3, r0
 800dde8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ddea:	4b0c      	ldr	r3, [pc, #48]	@ (800de1c <ip4_reass+0x2b0>)
 800ddec:	881b      	ldrh	r3, [r3, #0]
 800ddee:	8c3a      	ldrh	r2, [r7, #32]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d906      	bls.n	800de02 <ip4_reass+0x296>
 800ddf4:	4b0b      	ldr	r3, [pc, #44]	@ (800de24 <ip4_reass+0x2b8>)
 800ddf6:	f240 229b 	movw	r2, #667	@ 0x29b
 800ddfa:	490b      	ldr	r1, [pc, #44]	@ (800de28 <ip4_reass+0x2bc>)
 800ddfc:	480b      	ldr	r0, [pc, #44]	@ (800de2c <ip4_reass+0x2c0>)
 800ddfe:	f000 fbc5 	bl	800e58c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800de02:	4b06      	ldr	r3, [pc, #24]	@ (800de1c <ip4_reass+0x2b0>)
 800de04:	881a      	ldrh	r2, [r3, #0]
 800de06:	8c3b      	ldrh	r3, [r7, #32]
 800de08:	1ad3      	subs	r3, r2, r3
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	4b03      	ldr	r3, [pc, #12]	@ (800de1c <ip4_reass+0x2b0>)
 800de0e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	e038      	b.n	800de86 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800de14:	2300      	movs	r3, #0
 800de16:	e036      	b.n	800de86 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800de18:	bf00      	nop
 800de1a:	e00a      	b.n	800de32 <ip4_reass+0x2c6>
 800de1c:	2000839c 	.word	0x2000839c
 800de20:	20008398 	.word	0x20008398
 800de24:	08011b38 	.word	0x08011b38
 800de28:	08011ca8 	.word	0x08011ca8
 800de2c:	08011b80 	.word	0x08011b80
    goto nullreturn_ipr;
 800de30:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800de32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de34:	2b00      	cmp	r3, #0
 800de36:	d106      	bne.n	800de46 <ip4_reass+0x2da>
 800de38:	4b15      	ldr	r3, [pc, #84]	@ (800de90 <ip4_reass+0x324>)
 800de3a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800de3e:	4915      	ldr	r1, [pc, #84]	@ (800de94 <ip4_reass+0x328>)
 800de40:	4815      	ldr	r0, [pc, #84]	@ (800de98 <ip4_reass+0x32c>)
 800de42:	f000 fba3 	bl	800e58c <iprintf>
  if (ipr->p == NULL) {
 800de46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d116      	bne.n	800de7c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800de4e:	4b13      	ldr	r3, [pc, #76]	@ (800de9c <ip4_reass+0x330>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de54:	429a      	cmp	r2, r3
 800de56:	d006      	beq.n	800de66 <ip4_reass+0x2fa>
 800de58:	4b0d      	ldr	r3, [pc, #52]	@ (800de90 <ip4_reass+0x324>)
 800de5a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800de5e:	4910      	ldr	r1, [pc, #64]	@ (800dea0 <ip4_reass+0x334>)
 800de60:	480d      	ldr	r0, [pc, #52]	@ (800de98 <ip4_reass+0x32c>)
 800de62:	f000 fb93 	bl	800e58c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800de66:	2100      	movs	r1, #0
 800de68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de6a:	f7ff fce7 	bl	800d83c <ip_reass_dequeue_datagram>
 800de6e:	e006      	b.n	800de7e <ip4_reass+0x312>
    goto nullreturn;
 800de70:	bf00      	nop
 800de72:	e004      	b.n	800de7e <ip4_reass+0x312>
    goto nullreturn;
 800de74:	bf00      	nop
 800de76:	e002      	b.n	800de7e <ip4_reass+0x312>
      goto nullreturn;
 800de78:	bf00      	nop
 800de7a:	e000      	b.n	800de7e <ip4_reass+0x312>
  }

nullreturn:
 800de7c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f7f7 f9cc 	bl	800521c <pbuf_free>
  return NULL;
 800de84:	2300      	movs	r3, #0
}
 800de86:	4618      	mov	r0, r3
 800de88:	3738      	adds	r7, #56	@ 0x38
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	08011b38 	.word	0x08011b38
 800de94:	08011cc4 	.word	0x08011cc4
 800de98:	08011b80 	.word	0x08011b80
 800de9c:	20008398 	.word	0x20008398
 800dea0:	08011cd0 	.word	0x08011cd0

0800dea4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800dea8:	2005      	movs	r0, #5
 800deaa:	f7f6 fad1 	bl	8004450 <memp_malloc>
 800deae:	4603      	mov	r3, r0
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d106      	bne.n	800ded0 <ip_frag_free_pbuf_custom_ref+0x1c>
 800dec2:	4b07      	ldr	r3, [pc, #28]	@ (800dee0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800dec4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800dec8:	4906      	ldr	r1, [pc, #24]	@ (800dee4 <ip_frag_free_pbuf_custom_ref+0x30>)
 800deca:	4807      	ldr	r0, [pc, #28]	@ (800dee8 <ip_frag_free_pbuf_custom_ref+0x34>)
 800decc:	f000 fb5e 	bl	800e58c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ded0:	6879      	ldr	r1, [r7, #4]
 800ded2:	2005      	movs	r0, #5
 800ded4:	f7f6 fb2c 	bl	8004530 <memp_free>
}
 800ded8:	bf00      	nop
 800deda:	3708      	adds	r7, #8
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}
 800dee0:	08011b38 	.word	0x08011b38
 800dee4:	08011cf0 	.word	0x08011cf0
 800dee8:	08011b80 	.word	0x08011b80

0800deec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d106      	bne.n	800df0c <ipfrag_free_pbuf_custom+0x20>
 800defe:	4b11      	ldr	r3, [pc, #68]	@ (800df44 <ipfrag_free_pbuf_custom+0x58>)
 800df00:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800df04:	4910      	ldr	r1, [pc, #64]	@ (800df48 <ipfrag_free_pbuf_custom+0x5c>)
 800df06:	4811      	ldr	r0, [pc, #68]	@ (800df4c <ipfrag_free_pbuf_custom+0x60>)
 800df08:	f000 fb40 	bl	800e58c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	429a      	cmp	r2, r3
 800df12:	d006      	beq.n	800df22 <ipfrag_free_pbuf_custom+0x36>
 800df14:	4b0b      	ldr	r3, [pc, #44]	@ (800df44 <ipfrag_free_pbuf_custom+0x58>)
 800df16:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800df1a:	490d      	ldr	r1, [pc, #52]	@ (800df50 <ipfrag_free_pbuf_custom+0x64>)
 800df1c:	480b      	ldr	r0, [pc, #44]	@ (800df4c <ipfrag_free_pbuf_custom+0x60>)
 800df1e:	f000 fb35 	bl	800e58c <iprintf>
  if (pcr->original != NULL) {
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	695b      	ldr	r3, [r3, #20]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d004      	beq.n	800df34 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	695b      	ldr	r3, [r3, #20]
 800df2e:	4618      	mov	r0, r3
 800df30:	f7f7 f974 	bl	800521c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800df34:	68f8      	ldr	r0, [r7, #12]
 800df36:	f7ff ffbd 	bl	800deb4 <ip_frag_free_pbuf_custom_ref>
}
 800df3a:	bf00      	nop
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	08011b38 	.word	0x08011b38
 800df48:	08011cfc 	.word	0x08011cfc
 800df4c:	08011b80 	.word	0x08011b80
 800df50:	08011d08 	.word	0x08011d08

0800df54 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b094      	sub	sp, #80	@ 0x50
 800df58:	af02      	add	r7, sp, #8
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800df60:	2300      	movs	r3, #0
 800df62:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800df6a:	3b14      	subs	r3, #20
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	da00      	bge.n	800df72 <ip4_frag+0x1e>
 800df70:	3307      	adds	r3, #7
 800df72:	10db      	asrs	r3, r3, #3
 800df74:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800df76:	2314      	movs	r3, #20
 800df78:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800df80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df82:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800df84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	f003 030f 	and.w	r3, r3, #15
 800df8c:	b2db      	uxtb	r3, r3
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	b2db      	uxtb	r3, r3
 800df92:	2b14      	cmp	r3, #20
 800df94:	d002      	beq.n	800df9c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800df96:	f06f 0305 	mvn.w	r3, #5
 800df9a:	e110      	b.n	800e1be <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	895b      	ldrh	r3, [r3, #10]
 800dfa0:	2b13      	cmp	r3, #19
 800dfa2:	d809      	bhi.n	800dfb8 <ip4_frag+0x64>
 800dfa4:	4b88      	ldr	r3, [pc, #544]	@ (800e1c8 <ip4_frag+0x274>)
 800dfa6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800dfaa:	4988      	ldr	r1, [pc, #544]	@ (800e1cc <ip4_frag+0x278>)
 800dfac:	4888      	ldr	r0, [pc, #544]	@ (800e1d0 <ip4_frag+0x27c>)
 800dfae:	f000 faed 	bl	800e58c <iprintf>
 800dfb2:	f06f 0305 	mvn.w	r3, #5
 800dfb6:	e102      	b.n	800e1be <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800dfb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfba:	88db      	ldrh	r3, [r3, #6]
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7f5 fdce 	bl	8003b60 <lwip_htons>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800dfc8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800dfca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dfce:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800dfd2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800dfd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dfd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	891b      	ldrh	r3, [r3, #8]
 800dfde:	3b14      	subs	r3, #20
 800dfe0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800dfe4:	e0e1      	b.n	800e1aa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800dfe6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800dfe8:	00db      	lsls	r3, r3, #3
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dff0:	4293      	cmp	r3, r2
 800dff2:	bf28      	it	cs
 800dff4:	4613      	movcs	r3, r2
 800dff6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800dff8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dffc:	2114      	movs	r1, #20
 800dffe:	200e      	movs	r0, #14
 800e000:	f7f6 fe28 	bl	8004c54 <pbuf_alloc>
 800e004:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800e006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e008:	2b00      	cmp	r3, #0
 800e00a:	f000 80d5 	beq.w	800e1b8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e010:	895b      	ldrh	r3, [r3, #10]
 800e012:	2b13      	cmp	r3, #19
 800e014:	d806      	bhi.n	800e024 <ip4_frag+0xd0>
 800e016:	4b6c      	ldr	r3, [pc, #432]	@ (800e1c8 <ip4_frag+0x274>)
 800e018:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800e01c:	496d      	ldr	r1, [pc, #436]	@ (800e1d4 <ip4_frag+0x280>)
 800e01e:	486c      	ldr	r0, [pc, #432]	@ (800e1d0 <ip4_frag+0x27c>)
 800e020:	f000 fab4 	bl	800e58c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	2214      	movs	r2, #20
 800e02a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e02c:	4618      	mov	r0, r3
 800e02e:	f000 fb88 	bl	800e742 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800e038:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e03a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800e03e:	e064      	b.n	800e10a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	895a      	ldrh	r2, [r3, #10]
 800e044:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e046:	1ad3      	subs	r3, r2, r3
 800e048:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	895b      	ldrh	r3, [r3, #10]
 800e04e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800e050:	429a      	cmp	r2, r3
 800e052:	d906      	bls.n	800e062 <ip4_frag+0x10e>
 800e054:	4b5c      	ldr	r3, [pc, #368]	@ (800e1c8 <ip4_frag+0x274>)
 800e056:	f240 322d 	movw	r2, #813	@ 0x32d
 800e05a:	495f      	ldr	r1, [pc, #380]	@ (800e1d8 <ip4_frag+0x284>)
 800e05c:	485c      	ldr	r0, [pc, #368]	@ (800e1d0 <ip4_frag+0x27c>)
 800e05e:	f000 fa95 	bl	800e58c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e062:	8bfa      	ldrh	r2, [r7, #30]
 800e064:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e068:	4293      	cmp	r3, r2
 800e06a:	bf28      	it	cs
 800e06c:	4613      	movcs	r3, r2
 800e06e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e072:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e076:	2b00      	cmp	r3, #0
 800e078:	d105      	bne.n	800e086 <ip4_frag+0x132>
        poff = 0;
 800e07a:	2300      	movs	r3, #0
 800e07c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	60fb      	str	r3, [r7, #12]
        continue;
 800e084:	e041      	b.n	800e10a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e086:	f7ff ff0d 	bl	800dea4 <ip_frag_alloc_pbuf_custom_ref>
 800e08a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e08c:	69bb      	ldr	r3, [r7, #24]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d103      	bne.n	800e09a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e092:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e094:	f7f7 f8c2 	bl	800521c <pbuf_free>
        goto memerr;
 800e098:	e08f      	b.n	800e1ba <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e09a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e0a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e0a2:	4413      	add	r3, r2
 800e0a4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800e0a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800e0ac:	9201      	str	r2, [sp, #4]
 800e0ae:	9300      	str	r3, [sp, #0]
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2241      	movs	r2, #65	@ 0x41
 800e0b4:	2000      	movs	r0, #0
 800e0b6:	f7f6 fef7 	bl	8004ea8 <pbuf_alloced_custom>
 800e0ba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d106      	bne.n	800e0d0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e0c2:	69b8      	ldr	r0, [r7, #24]
 800e0c4:	f7ff fef6 	bl	800deb4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e0c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e0ca:	f7f7 f8a7 	bl	800521c <pbuf_free>
        goto memerr;
 800e0ce:	e074      	b.n	800e1ba <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e0d0:	68f8      	ldr	r0, [r7, #12]
 800e0d2:	f7f7 f943 	bl	800535c <pbuf_ref>
      pcr->original = p;
 800e0d6:	69bb      	ldr	r3, [r7, #24]
 800e0d8:	68fa      	ldr	r2, [r7, #12]
 800e0da:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	4a3f      	ldr	r2, [pc, #252]	@ (800e1dc <ip4_frag+0x288>)
 800e0e0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e0e2:	6979      	ldr	r1, [r7, #20]
 800e0e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e0e6:	f7f7 f95b 	bl	80053a0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e0ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800e0ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e0f2:	1ad3      	subs	r3, r2, r3
 800e0f4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800e0f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d004      	beq.n	800e10a <ip4_frag+0x1b6>
        poff = 0;
 800e100:	2300      	movs	r3, #0
 800e102:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e10a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d196      	bne.n	800e040 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e112:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800e114:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e118:	4413      	add	r3, r2
 800e11a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e120:	f1a3 0213 	sub.w	r2, r3, #19
 800e124:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e128:	429a      	cmp	r2, r3
 800e12a:	bfcc      	ite	gt
 800e12c:	2301      	movgt	r3, #1
 800e12e:	2300      	movle	r3, #0
 800e130:	b2db      	uxtb	r3, r3
 800e132:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e134:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800e138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e13c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800e13e:	6a3b      	ldr	r3, [r7, #32]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d002      	beq.n	800e14a <ip4_frag+0x1f6>
 800e144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e146:	2b00      	cmp	r3, #0
 800e148:	d003      	beq.n	800e152 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e14a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e14c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e150:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e152:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e154:	4618      	mov	r0, r3
 800e156:	f7f5 fd03 	bl	8003b60 <lwip_htons>
 800e15a:	4603      	mov	r3, r0
 800e15c:	461a      	mov	r2, r3
 800e15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e160:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e162:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e164:	3314      	adds	r3, #20
 800e166:	b29b      	uxth	r3, r3
 800e168:	4618      	mov	r0, r3
 800e16a:	f7f5 fcf9 	bl	8003b60 <lwip_htons>
 800e16e:	4603      	mov	r3, r0
 800e170:	461a      	mov	r2, r3
 800e172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e174:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e178:	2200      	movs	r2, #0
 800e17a:	729a      	strb	r2, [r3, #10]
 800e17c:	2200      	movs	r2, #0
 800e17e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	695b      	ldr	r3, [r3, #20]
 800e184:	687a      	ldr	r2, [r7, #4]
 800e186:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e188:	68b8      	ldr	r0, [r7, #8]
 800e18a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e18c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e18e:	f7f7 f845 	bl	800521c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e192:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e196:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e198:	1ad3      	subs	r3, r2, r3
 800e19a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800e19e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800e1a2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e1a4:	4413      	add	r3, r2
 800e1a6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800e1aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	f47f af19 	bne.w	800dfe6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	e002      	b.n	800e1be <ip4_frag+0x26a>
      goto memerr;
 800e1b8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e1ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3748      	adds	r7, #72	@ 0x48
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	08011b38 	.word	0x08011b38
 800e1cc:	08011d14 	.word	0x08011d14
 800e1d0:	08011b80 	.word	0x08011b80
 800e1d4:	08011d30 	.word	0x08011d30
 800e1d8:	08011d50 	.word	0x08011d50
 800e1dc:	0800deed 	.word	0x0800deed

0800e1e0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b086      	sub	sp, #24
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e1ea:	230e      	movs	r3, #14
 800e1ec:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	895b      	ldrh	r3, [r3, #10]
 800e1f2:	2b0e      	cmp	r3, #14
 800e1f4:	d96e      	bls.n	800e2d4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	7bdb      	ldrb	r3, [r3, #15]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d106      	bne.n	800e20c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e204:	3301      	adds	r3, #1
 800e206:	b2da      	uxtb	r2, r3
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	7b1a      	ldrb	r2, [r3, #12]
 800e216:	7b5b      	ldrb	r3, [r3, #13]
 800e218:	021b      	lsls	r3, r3, #8
 800e21a:	4313      	orrs	r3, r2
 800e21c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	f003 0301 	and.w	r3, r3, #1
 800e226:	2b00      	cmp	r3, #0
 800e228:	d023      	beq.n	800e272 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d10f      	bne.n	800e252 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	785b      	ldrb	r3, [r3, #1]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d11b      	bne.n	800e272 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e23e:	2b5e      	cmp	r3, #94	@ 0x5e
 800e240:	d117      	bne.n	800e272 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	7b5b      	ldrb	r3, [r3, #13]
 800e246:	f043 0310 	orr.w	r3, r3, #16
 800e24a:	b2da      	uxtb	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	735a      	strb	r2, [r3, #13]
 800e250:	e00f      	b.n	800e272 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	2206      	movs	r2, #6
 800e256:	4928      	ldr	r1, [pc, #160]	@ (800e2f8 <ethernet_input+0x118>)
 800e258:	4618      	mov	r0, r3
 800e25a:	f000 f9ec 	bl	800e636 <memcmp>
 800e25e:	4603      	mov	r3, r0
 800e260:	2b00      	cmp	r3, #0
 800e262:	d106      	bne.n	800e272 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	7b5b      	ldrb	r3, [r3, #13]
 800e268:	f043 0308 	orr.w	r3, r3, #8
 800e26c:	b2da      	uxtb	r2, r3
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e272:	89fb      	ldrh	r3, [r7, #14]
 800e274:	2b08      	cmp	r3, #8
 800e276:	d003      	beq.n	800e280 <ethernet_input+0xa0>
 800e278:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800e27c:	d014      	beq.n	800e2a8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e27e:	e032      	b.n	800e2e6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e286:	f003 0308 	and.w	r3, r3, #8
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d024      	beq.n	800e2d8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e28e:	8afb      	ldrh	r3, [r7, #22]
 800e290:	4619      	mov	r1, r3
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f7f6 ff3c 	bl	8005110 <pbuf_remove_header>
 800e298:	4603      	mov	r3, r0
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d11e      	bne.n	800e2dc <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e29e:	6839      	ldr	r1, [r7, #0]
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f7fe ff21 	bl	800d0e8 <ip4_input>
      break;
 800e2a6:	e013      	b.n	800e2d0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e2ae:	f003 0308 	and.w	r3, r3, #8
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d014      	beq.n	800e2e0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e2b6:	8afb      	ldrh	r3, [r7, #22]
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f7f6 ff28 	bl	8005110 <pbuf_remove_header>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d10e      	bne.n	800e2e4 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e2c6:	6839      	ldr	r1, [r7, #0]
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f7fe f8c1 	bl	800c450 <etharp_input>
      break;
 800e2ce:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	e00c      	b.n	800e2ee <ethernet_input+0x10e>
    goto free_and_return;
 800e2d4:	bf00      	nop
 800e2d6:	e006      	b.n	800e2e6 <ethernet_input+0x106>
        goto free_and_return;
 800e2d8:	bf00      	nop
 800e2da:	e004      	b.n	800e2e6 <ethernet_input+0x106>
        goto free_and_return;
 800e2dc:	bf00      	nop
 800e2de:	e002      	b.n	800e2e6 <ethernet_input+0x106>
        goto free_and_return;
 800e2e0:	bf00      	nop
 800e2e2:	e000      	b.n	800e2e6 <ethernet_input+0x106>
        goto free_and_return;
 800e2e4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f7f6 ff98 	bl	800521c <pbuf_free>
  return ERR_OK;
 800e2ec:	2300      	movs	r3, #0
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3718      	adds	r7, #24
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	08011ee4 	.word	0x08011ee4

0800e2fc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b086      	sub	sp, #24
 800e300:	af00      	add	r7, sp, #0
 800e302:	60f8      	str	r0, [r7, #12]
 800e304:	60b9      	str	r1, [r7, #8]
 800e306:	607a      	str	r2, [r7, #4]
 800e308:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e30a:	8c3b      	ldrh	r3, [r7, #32]
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7f5 fc27 	bl	8003b60 <lwip_htons>
 800e312:	4603      	mov	r3, r0
 800e314:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e316:	210e      	movs	r1, #14
 800e318:	68b8      	ldr	r0, [r7, #8]
 800e31a:	f7f6 fee9 	bl	80050f0 <pbuf_add_header>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b00      	cmp	r3, #0
 800e322:	d125      	bne.n	800e370 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	8afa      	ldrh	r2, [r7, #22]
 800e32e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	2206      	movs	r2, #6
 800e334:	6839      	ldr	r1, [r7, #0]
 800e336:	4618      	mov	r0, r3
 800e338:	f000 fa03 	bl	800e742 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	3306      	adds	r3, #6
 800e340:	2206      	movs	r2, #6
 800e342:	6879      	ldr	r1, [r7, #4]
 800e344:	4618      	mov	r0, r3
 800e346:	f000 f9fc 	bl	800e742 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e350:	2b06      	cmp	r3, #6
 800e352:	d006      	beq.n	800e362 <ethernet_output+0x66>
 800e354:	4b0a      	ldr	r3, [pc, #40]	@ (800e380 <ethernet_output+0x84>)
 800e356:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800e35a:	490a      	ldr	r1, [pc, #40]	@ (800e384 <ethernet_output+0x88>)
 800e35c:	480a      	ldr	r0, [pc, #40]	@ (800e388 <ethernet_output+0x8c>)
 800e35e:	f000 f915 	bl	800e58c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	699b      	ldr	r3, [r3, #24]
 800e366:	68b9      	ldr	r1, [r7, #8]
 800e368:	68f8      	ldr	r0, [r7, #12]
 800e36a:	4798      	blx	r3
 800e36c:	4603      	mov	r3, r0
 800e36e:	e002      	b.n	800e376 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e370:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e372:	f06f 0301 	mvn.w	r3, #1
}
 800e376:	4618      	mov	r0, r3
 800e378:	3718      	adds	r7, #24
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	08011d60 	.word	0x08011d60
 800e384:	08011d98 	.word	0x08011d98
 800e388:	08011dcc 	.word	0x08011dcc

0800e38c <rand>:
 800e38c:	4b16      	ldr	r3, [pc, #88]	@ (800e3e8 <rand+0x5c>)
 800e38e:	b510      	push	{r4, lr}
 800e390:	681c      	ldr	r4, [r3, #0]
 800e392:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e394:	b9b3      	cbnz	r3, 800e3c4 <rand+0x38>
 800e396:	2018      	movs	r0, #24
 800e398:	f000 fa4a 	bl	800e830 <malloc>
 800e39c:	4602      	mov	r2, r0
 800e39e:	6320      	str	r0, [r4, #48]	@ 0x30
 800e3a0:	b920      	cbnz	r0, 800e3ac <rand+0x20>
 800e3a2:	4b12      	ldr	r3, [pc, #72]	@ (800e3ec <rand+0x60>)
 800e3a4:	4812      	ldr	r0, [pc, #72]	@ (800e3f0 <rand+0x64>)
 800e3a6:	2152      	movs	r1, #82	@ 0x52
 800e3a8:	f000 f9da 	bl	800e760 <__assert_func>
 800e3ac:	4911      	ldr	r1, [pc, #68]	@ (800e3f4 <rand+0x68>)
 800e3ae:	4b12      	ldr	r3, [pc, #72]	@ (800e3f8 <rand+0x6c>)
 800e3b0:	e9c0 1300 	strd	r1, r3, [r0]
 800e3b4:	4b11      	ldr	r3, [pc, #68]	@ (800e3fc <rand+0x70>)
 800e3b6:	6083      	str	r3, [r0, #8]
 800e3b8:	230b      	movs	r3, #11
 800e3ba:	8183      	strh	r3, [r0, #12]
 800e3bc:	2100      	movs	r1, #0
 800e3be:	2001      	movs	r0, #1
 800e3c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e3c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e3c6:	480e      	ldr	r0, [pc, #56]	@ (800e400 <rand+0x74>)
 800e3c8:	690b      	ldr	r3, [r1, #16]
 800e3ca:	694c      	ldr	r4, [r1, #20]
 800e3cc:	4a0d      	ldr	r2, [pc, #52]	@ (800e404 <rand+0x78>)
 800e3ce:	4358      	muls	r0, r3
 800e3d0:	fb02 0004 	mla	r0, r2, r4, r0
 800e3d4:	fba3 3202 	umull	r3, r2, r3, r2
 800e3d8:	3301      	adds	r3, #1
 800e3da:	eb40 0002 	adc.w	r0, r0, r2
 800e3de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e3e2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e3e6:	bd10      	pop	{r4, pc}
 800e3e8:	20000038 	.word	0x20000038
 800e3ec:	08011ef2 	.word	0x08011ef2
 800e3f0:	08011f09 	.word	0x08011f09
 800e3f4:	abcd330e 	.word	0xabcd330e
 800e3f8:	e66d1234 	.word	0xe66d1234
 800e3fc:	0005deec 	.word	0x0005deec
 800e400:	5851f42d 	.word	0x5851f42d
 800e404:	4c957f2d 	.word	0x4c957f2d

0800e408 <std>:
 800e408:	2300      	movs	r3, #0
 800e40a:	b510      	push	{r4, lr}
 800e40c:	4604      	mov	r4, r0
 800e40e:	e9c0 3300 	strd	r3, r3, [r0]
 800e412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e416:	6083      	str	r3, [r0, #8]
 800e418:	8181      	strh	r1, [r0, #12]
 800e41a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e41c:	81c2      	strh	r2, [r0, #14]
 800e41e:	6183      	str	r3, [r0, #24]
 800e420:	4619      	mov	r1, r3
 800e422:	2208      	movs	r2, #8
 800e424:	305c      	adds	r0, #92	@ 0x5c
 800e426:	f000 f916 	bl	800e656 <memset>
 800e42a:	4b0d      	ldr	r3, [pc, #52]	@ (800e460 <std+0x58>)
 800e42c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e42e:	4b0d      	ldr	r3, [pc, #52]	@ (800e464 <std+0x5c>)
 800e430:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e432:	4b0d      	ldr	r3, [pc, #52]	@ (800e468 <std+0x60>)
 800e434:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e436:	4b0d      	ldr	r3, [pc, #52]	@ (800e46c <std+0x64>)
 800e438:	6323      	str	r3, [r4, #48]	@ 0x30
 800e43a:	4b0d      	ldr	r3, [pc, #52]	@ (800e470 <std+0x68>)
 800e43c:	6224      	str	r4, [r4, #32]
 800e43e:	429c      	cmp	r4, r3
 800e440:	d006      	beq.n	800e450 <std+0x48>
 800e442:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e446:	4294      	cmp	r4, r2
 800e448:	d002      	beq.n	800e450 <std+0x48>
 800e44a:	33d0      	adds	r3, #208	@ 0xd0
 800e44c:	429c      	cmp	r4, r3
 800e44e:	d105      	bne.n	800e45c <std+0x54>
 800e450:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e458:	f000 b970 	b.w	800e73c <__retarget_lock_init_recursive>
 800e45c:	bd10      	pop	{r4, pc}
 800e45e:	bf00      	nop
 800e460:	0800e5b1 	.word	0x0800e5b1
 800e464:	0800e5d3 	.word	0x0800e5d3
 800e468:	0800e60b 	.word	0x0800e60b
 800e46c:	0800e62f 	.word	0x0800e62f
 800e470:	200083a0 	.word	0x200083a0

0800e474 <stdio_exit_handler>:
 800e474:	4a02      	ldr	r2, [pc, #8]	@ (800e480 <stdio_exit_handler+0xc>)
 800e476:	4903      	ldr	r1, [pc, #12]	@ (800e484 <stdio_exit_handler+0x10>)
 800e478:	4803      	ldr	r0, [pc, #12]	@ (800e488 <stdio_exit_handler+0x14>)
 800e47a:	f000 b869 	b.w	800e550 <_fwalk_sglue>
 800e47e:	bf00      	nop
 800e480:	2000002c 	.word	0x2000002c
 800e484:	0800f041 	.word	0x0800f041
 800e488:	2000003c 	.word	0x2000003c

0800e48c <cleanup_stdio>:
 800e48c:	6841      	ldr	r1, [r0, #4]
 800e48e:	4b0c      	ldr	r3, [pc, #48]	@ (800e4c0 <cleanup_stdio+0x34>)
 800e490:	4299      	cmp	r1, r3
 800e492:	b510      	push	{r4, lr}
 800e494:	4604      	mov	r4, r0
 800e496:	d001      	beq.n	800e49c <cleanup_stdio+0x10>
 800e498:	f000 fdd2 	bl	800f040 <_fflush_r>
 800e49c:	68a1      	ldr	r1, [r4, #8]
 800e49e:	4b09      	ldr	r3, [pc, #36]	@ (800e4c4 <cleanup_stdio+0x38>)
 800e4a0:	4299      	cmp	r1, r3
 800e4a2:	d002      	beq.n	800e4aa <cleanup_stdio+0x1e>
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	f000 fdcb 	bl	800f040 <_fflush_r>
 800e4aa:	68e1      	ldr	r1, [r4, #12]
 800e4ac:	4b06      	ldr	r3, [pc, #24]	@ (800e4c8 <cleanup_stdio+0x3c>)
 800e4ae:	4299      	cmp	r1, r3
 800e4b0:	d004      	beq.n	800e4bc <cleanup_stdio+0x30>
 800e4b2:	4620      	mov	r0, r4
 800e4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4b8:	f000 bdc2 	b.w	800f040 <_fflush_r>
 800e4bc:	bd10      	pop	{r4, pc}
 800e4be:	bf00      	nop
 800e4c0:	200083a0 	.word	0x200083a0
 800e4c4:	20008408 	.word	0x20008408
 800e4c8:	20008470 	.word	0x20008470

0800e4cc <global_stdio_init.part.0>:
 800e4cc:	b510      	push	{r4, lr}
 800e4ce:	4b0b      	ldr	r3, [pc, #44]	@ (800e4fc <global_stdio_init.part.0+0x30>)
 800e4d0:	4c0b      	ldr	r4, [pc, #44]	@ (800e500 <global_stdio_init.part.0+0x34>)
 800e4d2:	4a0c      	ldr	r2, [pc, #48]	@ (800e504 <global_stdio_init.part.0+0x38>)
 800e4d4:	601a      	str	r2, [r3, #0]
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	2200      	movs	r2, #0
 800e4da:	2104      	movs	r1, #4
 800e4dc:	f7ff ff94 	bl	800e408 <std>
 800e4e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	2109      	movs	r1, #9
 800e4e8:	f7ff ff8e 	bl	800e408 <std>
 800e4ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e4f0:	2202      	movs	r2, #2
 800e4f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4f6:	2112      	movs	r1, #18
 800e4f8:	f7ff bf86 	b.w	800e408 <std>
 800e4fc:	200084d8 	.word	0x200084d8
 800e500:	200083a0 	.word	0x200083a0
 800e504:	0800e475 	.word	0x0800e475

0800e508 <__sfp_lock_acquire>:
 800e508:	4801      	ldr	r0, [pc, #4]	@ (800e510 <__sfp_lock_acquire+0x8>)
 800e50a:	f000 b918 	b.w	800e73e <__retarget_lock_acquire_recursive>
 800e50e:	bf00      	nop
 800e510:	200084e1 	.word	0x200084e1

0800e514 <__sfp_lock_release>:
 800e514:	4801      	ldr	r0, [pc, #4]	@ (800e51c <__sfp_lock_release+0x8>)
 800e516:	f000 b913 	b.w	800e740 <__retarget_lock_release_recursive>
 800e51a:	bf00      	nop
 800e51c:	200084e1 	.word	0x200084e1

0800e520 <__sinit>:
 800e520:	b510      	push	{r4, lr}
 800e522:	4604      	mov	r4, r0
 800e524:	f7ff fff0 	bl	800e508 <__sfp_lock_acquire>
 800e528:	6a23      	ldr	r3, [r4, #32]
 800e52a:	b11b      	cbz	r3, 800e534 <__sinit+0x14>
 800e52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e530:	f7ff bff0 	b.w	800e514 <__sfp_lock_release>
 800e534:	4b04      	ldr	r3, [pc, #16]	@ (800e548 <__sinit+0x28>)
 800e536:	6223      	str	r3, [r4, #32]
 800e538:	4b04      	ldr	r3, [pc, #16]	@ (800e54c <__sinit+0x2c>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d1f5      	bne.n	800e52c <__sinit+0xc>
 800e540:	f7ff ffc4 	bl	800e4cc <global_stdio_init.part.0>
 800e544:	e7f2      	b.n	800e52c <__sinit+0xc>
 800e546:	bf00      	nop
 800e548:	0800e48d 	.word	0x0800e48d
 800e54c:	200084d8 	.word	0x200084d8

0800e550 <_fwalk_sglue>:
 800e550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e554:	4607      	mov	r7, r0
 800e556:	4688      	mov	r8, r1
 800e558:	4614      	mov	r4, r2
 800e55a:	2600      	movs	r6, #0
 800e55c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e560:	f1b9 0901 	subs.w	r9, r9, #1
 800e564:	d505      	bpl.n	800e572 <_fwalk_sglue+0x22>
 800e566:	6824      	ldr	r4, [r4, #0]
 800e568:	2c00      	cmp	r4, #0
 800e56a:	d1f7      	bne.n	800e55c <_fwalk_sglue+0xc>
 800e56c:	4630      	mov	r0, r6
 800e56e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e572:	89ab      	ldrh	r3, [r5, #12]
 800e574:	2b01      	cmp	r3, #1
 800e576:	d907      	bls.n	800e588 <_fwalk_sglue+0x38>
 800e578:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e57c:	3301      	adds	r3, #1
 800e57e:	d003      	beq.n	800e588 <_fwalk_sglue+0x38>
 800e580:	4629      	mov	r1, r5
 800e582:	4638      	mov	r0, r7
 800e584:	47c0      	blx	r8
 800e586:	4306      	orrs	r6, r0
 800e588:	3568      	adds	r5, #104	@ 0x68
 800e58a:	e7e9      	b.n	800e560 <_fwalk_sglue+0x10>

0800e58c <iprintf>:
 800e58c:	b40f      	push	{r0, r1, r2, r3}
 800e58e:	b507      	push	{r0, r1, r2, lr}
 800e590:	4906      	ldr	r1, [pc, #24]	@ (800e5ac <iprintf+0x20>)
 800e592:	ab04      	add	r3, sp, #16
 800e594:	6808      	ldr	r0, [r1, #0]
 800e596:	f853 2b04 	ldr.w	r2, [r3], #4
 800e59a:	6881      	ldr	r1, [r0, #8]
 800e59c:	9301      	str	r3, [sp, #4]
 800e59e:	f000 fa27 	bl	800e9f0 <_vfiprintf_r>
 800e5a2:	b003      	add	sp, #12
 800e5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5a8:	b004      	add	sp, #16
 800e5aa:	4770      	bx	lr
 800e5ac:	20000038 	.word	0x20000038

0800e5b0 <__sread>:
 800e5b0:	b510      	push	{r4, lr}
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5b8:	f000 f878 	bl	800e6ac <_read_r>
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	bfab      	itete	ge
 800e5c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e5c2:	89a3      	ldrhlt	r3, [r4, #12]
 800e5c4:	181b      	addge	r3, r3, r0
 800e5c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e5ca:	bfac      	ite	ge
 800e5cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e5ce:	81a3      	strhlt	r3, [r4, #12]
 800e5d0:	bd10      	pop	{r4, pc}

0800e5d2 <__swrite>:
 800e5d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d6:	461f      	mov	r7, r3
 800e5d8:	898b      	ldrh	r3, [r1, #12]
 800e5da:	05db      	lsls	r3, r3, #23
 800e5dc:	4605      	mov	r5, r0
 800e5de:	460c      	mov	r4, r1
 800e5e0:	4616      	mov	r6, r2
 800e5e2:	d505      	bpl.n	800e5f0 <__swrite+0x1e>
 800e5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e8:	2302      	movs	r3, #2
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	f000 f84c 	bl	800e688 <_lseek_r>
 800e5f0:	89a3      	ldrh	r3, [r4, #12]
 800e5f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e5fa:	81a3      	strh	r3, [r4, #12]
 800e5fc:	4632      	mov	r2, r6
 800e5fe:	463b      	mov	r3, r7
 800e600:	4628      	mov	r0, r5
 800e602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e606:	f000 b863 	b.w	800e6d0 <_write_r>

0800e60a <__sseek>:
 800e60a:	b510      	push	{r4, lr}
 800e60c:	460c      	mov	r4, r1
 800e60e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e612:	f000 f839 	bl	800e688 <_lseek_r>
 800e616:	1c43      	adds	r3, r0, #1
 800e618:	89a3      	ldrh	r3, [r4, #12]
 800e61a:	bf15      	itete	ne
 800e61c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e61e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e622:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e626:	81a3      	strheq	r3, [r4, #12]
 800e628:	bf18      	it	ne
 800e62a:	81a3      	strhne	r3, [r4, #12]
 800e62c:	bd10      	pop	{r4, pc}

0800e62e <__sclose>:
 800e62e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e632:	f000 b819 	b.w	800e668 <_close_r>

0800e636 <memcmp>:
 800e636:	b510      	push	{r4, lr}
 800e638:	3901      	subs	r1, #1
 800e63a:	4402      	add	r2, r0
 800e63c:	4290      	cmp	r0, r2
 800e63e:	d101      	bne.n	800e644 <memcmp+0xe>
 800e640:	2000      	movs	r0, #0
 800e642:	e005      	b.n	800e650 <memcmp+0x1a>
 800e644:	7803      	ldrb	r3, [r0, #0]
 800e646:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e64a:	42a3      	cmp	r3, r4
 800e64c:	d001      	beq.n	800e652 <memcmp+0x1c>
 800e64e:	1b18      	subs	r0, r3, r4
 800e650:	bd10      	pop	{r4, pc}
 800e652:	3001      	adds	r0, #1
 800e654:	e7f2      	b.n	800e63c <memcmp+0x6>

0800e656 <memset>:
 800e656:	4402      	add	r2, r0
 800e658:	4603      	mov	r3, r0
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d100      	bne.n	800e660 <memset+0xa>
 800e65e:	4770      	bx	lr
 800e660:	f803 1b01 	strb.w	r1, [r3], #1
 800e664:	e7f9      	b.n	800e65a <memset+0x4>
	...

0800e668 <_close_r>:
 800e668:	b538      	push	{r3, r4, r5, lr}
 800e66a:	4d06      	ldr	r5, [pc, #24]	@ (800e684 <_close_r+0x1c>)
 800e66c:	2300      	movs	r3, #0
 800e66e:	4604      	mov	r4, r0
 800e670:	4608      	mov	r0, r1
 800e672:	602b      	str	r3, [r5, #0]
 800e674:	f7f2 f910 	bl	8000898 <_close>
 800e678:	1c43      	adds	r3, r0, #1
 800e67a:	d102      	bne.n	800e682 <_close_r+0x1a>
 800e67c:	682b      	ldr	r3, [r5, #0]
 800e67e:	b103      	cbz	r3, 800e682 <_close_r+0x1a>
 800e680:	6023      	str	r3, [r4, #0]
 800e682:	bd38      	pop	{r3, r4, r5, pc}
 800e684:	200084dc 	.word	0x200084dc

0800e688 <_lseek_r>:
 800e688:	b538      	push	{r3, r4, r5, lr}
 800e68a:	4d07      	ldr	r5, [pc, #28]	@ (800e6a8 <_lseek_r+0x20>)
 800e68c:	4604      	mov	r4, r0
 800e68e:	4608      	mov	r0, r1
 800e690:	4611      	mov	r1, r2
 800e692:	2200      	movs	r2, #0
 800e694:	602a      	str	r2, [r5, #0]
 800e696:	461a      	mov	r2, r3
 800e698:	f7f2 f925 	bl	80008e6 <_lseek>
 800e69c:	1c43      	adds	r3, r0, #1
 800e69e:	d102      	bne.n	800e6a6 <_lseek_r+0x1e>
 800e6a0:	682b      	ldr	r3, [r5, #0]
 800e6a2:	b103      	cbz	r3, 800e6a6 <_lseek_r+0x1e>
 800e6a4:	6023      	str	r3, [r4, #0]
 800e6a6:	bd38      	pop	{r3, r4, r5, pc}
 800e6a8:	200084dc 	.word	0x200084dc

0800e6ac <_read_r>:
 800e6ac:	b538      	push	{r3, r4, r5, lr}
 800e6ae:	4d07      	ldr	r5, [pc, #28]	@ (800e6cc <_read_r+0x20>)
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	4608      	mov	r0, r1
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	602a      	str	r2, [r5, #0]
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	f7f2 f8b3 	bl	8000826 <_read>
 800e6c0:	1c43      	adds	r3, r0, #1
 800e6c2:	d102      	bne.n	800e6ca <_read_r+0x1e>
 800e6c4:	682b      	ldr	r3, [r5, #0]
 800e6c6:	b103      	cbz	r3, 800e6ca <_read_r+0x1e>
 800e6c8:	6023      	str	r3, [r4, #0]
 800e6ca:	bd38      	pop	{r3, r4, r5, pc}
 800e6cc:	200084dc 	.word	0x200084dc

0800e6d0 <_write_r>:
 800e6d0:	b538      	push	{r3, r4, r5, lr}
 800e6d2:	4d07      	ldr	r5, [pc, #28]	@ (800e6f0 <_write_r+0x20>)
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	4608      	mov	r0, r1
 800e6d8:	4611      	mov	r1, r2
 800e6da:	2200      	movs	r2, #0
 800e6dc:	602a      	str	r2, [r5, #0]
 800e6de:	461a      	mov	r2, r3
 800e6e0:	f7f2 f8be 	bl	8000860 <_write>
 800e6e4:	1c43      	adds	r3, r0, #1
 800e6e6:	d102      	bne.n	800e6ee <_write_r+0x1e>
 800e6e8:	682b      	ldr	r3, [r5, #0]
 800e6ea:	b103      	cbz	r3, 800e6ee <_write_r+0x1e>
 800e6ec:	6023      	str	r3, [r4, #0]
 800e6ee:	bd38      	pop	{r3, r4, r5, pc}
 800e6f0:	200084dc 	.word	0x200084dc

0800e6f4 <__libc_init_array>:
 800e6f4:	b570      	push	{r4, r5, r6, lr}
 800e6f6:	4d0d      	ldr	r5, [pc, #52]	@ (800e72c <__libc_init_array+0x38>)
 800e6f8:	4c0d      	ldr	r4, [pc, #52]	@ (800e730 <__libc_init_array+0x3c>)
 800e6fa:	1b64      	subs	r4, r4, r5
 800e6fc:	10a4      	asrs	r4, r4, #2
 800e6fe:	2600      	movs	r6, #0
 800e700:	42a6      	cmp	r6, r4
 800e702:	d109      	bne.n	800e718 <__libc_init_array+0x24>
 800e704:	4d0b      	ldr	r5, [pc, #44]	@ (800e734 <__libc_init_array+0x40>)
 800e706:	4c0c      	ldr	r4, [pc, #48]	@ (800e738 <__libc_init_array+0x44>)
 800e708:	f000 fe48 	bl	800f39c <_init>
 800e70c:	1b64      	subs	r4, r4, r5
 800e70e:	10a4      	asrs	r4, r4, #2
 800e710:	2600      	movs	r6, #0
 800e712:	42a6      	cmp	r6, r4
 800e714:	d105      	bne.n	800e722 <__libc_init_array+0x2e>
 800e716:	bd70      	pop	{r4, r5, r6, pc}
 800e718:	f855 3b04 	ldr.w	r3, [r5], #4
 800e71c:	4798      	blx	r3
 800e71e:	3601      	adds	r6, #1
 800e720:	e7ee      	b.n	800e700 <__libc_init_array+0xc>
 800e722:	f855 3b04 	ldr.w	r3, [r5], #4
 800e726:	4798      	blx	r3
 800e728:	3601      	adds	r6, #1
 800e72a:	e7f2      	b.n	800e712 <__libc_init_array+0x1e>
 800e72c:	08011fd8 	.word	0x08011fd8
 800e730:	08011fd8 	.word	0x08011fd8
 800e734:	08011fd8 	.word	0x08011fd8
 800e738:	08011fdc 	.word	0x08011fdc

0800e73c <__retarget_lock_init_recursive>:
 800e73c:	4770      	bx	lr

0800e73e <__retarget_lock_acquire_recursive>:
 800e73e:	4770      	bx	lr

0800e740 <__retarget_lock_release_recursive>:
 800e740:	4770      	bx	lr

0800e742 <memcpy>:
 800e742:	440a      	add	r2, r1
 800e744:	4291      	cmp	r1, r2
 800e746:	f100 33ff 	add.w	r3, r0, #4294967295
 800e74a:	d100      	bne.n	800e74e <memcpy+0xc>
 800e74c:	4770      	bx	lr
 800e74e:	b510      	push	{r4, lr}
 800e750:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e754:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e758:	4291      	cmp	r1, r2
 800e75a:	d1f9      	bne.n	800e750 <memcpy+0xe>
 800e75c:	bd10      	pop	{r4, pc}
	...

0800e760 <__assert_func>:
 800e760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e762:	4614      	mov	r4, r2
 800e764:	461a      	mov	r2, r3
 800e766:	4b09      	ldr	r3, [pc, #36]	@ (800e78c <__assert_func+0x2c>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4605      	mov	r5, r0
 800e76c:	68d8      	ldr	r0, [r3, #12]
 800e76e:	b14c      	cbz	r4, 800e784 <__assert_func+0x24>
 800e770:	4b07      	ldr	r3, [pc, #28]	@ (800e790 <__assert_func+0x30>)
 800e772:	9100      	str	r1, [sp, #0]
 800e774:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e778:	4906      	ldr	r1, [pc, #24]	@ (800e794 <__assert_func+0x34>)
 800e77a:	462b      	mov	r3, r5
 800e77c:	f000 fc88 	bl	800f090 <fiprintf>
 800e780:	f000 fd3c 	bl	800f1fc <abort>
 800e784:	4b04      	ldr	r3, [pc, #16]	@ (800e798 <__assert_func+0x38>)
 800e786:	461c      	mov	r4, r3
 800e788:	e7f3      	b.n	800e772 <__assert_func+0x12>
 800e78a:	bf00      	nop
 800e78c:	20000038 	.word	0x20000038
 800e790:	08011f61 	.word	0x08011f61
 800e794:	08011f6e 	.word	0x08011f6e
 800e798:	08011f9c 	.word	0x08011f9c

0800e79c <_free_r>:
 800e79c:	b538      	push	{r3, r4, r5, lr}
 800e79e:	4605      	mov	r5, r0
 800e7a0:	2900      	cmp	r1, #0
 800e7a2:	d041      	beq.n	800e828 <_free_r+0x8c>
 800e7a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7a8:	1f0c      	subs	r4, r1, #4
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	bfb8      	it	lt
 800e7ae:	18e4      	addlt	r4, r4, r3
 800e7b0:	f000 f8e8 	bl	800e984 <__malloc_lock>
 800e7b4:	4a1d      	ldr	r2, [pc, #116]	@ (800e82c <_free_r+0x90>)
 800e7b6:	6813      	ldr	r3, [r2, #0]
 800e7b8:	b933      	cbnz	r3, 800e7c8 <_free_r+0x2c>
 800e7ba:	6063      	str	r3, [r4, #4]
 800e7bc:	6014      	str	r4, [r2, #0]
 800e7be:	4628      	mov	r0, r5
 800e7c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7c4:	f000 b8e4 	b.w	800e990 <__malloc_unlock>
 800e7c8:	42a3      	cmp	r3, r4
 800e7ca:	d908      	bls.n	800e7de <_free_r+0x42>
 800e7cc:	6820      	ldr	r0, [r4, #0]
 800e7ce:	1821      	adds	r1, r4, r0
 800e7d0:	428b      	cmp	r3, r1
 800e7d2:	bf01      	itttt	eq
 800e7d4:	6819      	ldreq	r1, [r3, #0]
 800e7d6:	685b      	ldreq	r3, [r3, #4]
 800e7d8:	1809      	addeq	r1, r1, r0
 800e7da:	6021      	streq	r1, [r4, #0]
 800e7dc:	e7ed      	b.n	800e7ba <_free_r+0x1e>
 800e7de:	461a      	mov	r2, r3
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	b10b      	cbz	r3, 800e7e8 <_free_r+0x4c>
 800e7e4:	42a3      	cmp	r3, r4
 800e7e6:	d9fa      	bls.n	800e7de <_free_r+0x42>
 800e7e8:	6811      	ldr	r1, [r2, #0]
 800e7ea:	1850      	adds	r0, r2, r1
 800e7ec:	42a0      	cmp	r0, r4
 800e7ee:	d10b      	bne.n	800e808 <_free_r+0x6c>
 800e7f0:	6820      	ldr	r0, [r4, #0]
 800e7f2:	4401      	add	r1, r0
 800e7f4:	1850      	adds	r0, r2, r1
 800e7f6:	4283      	cmp	r3, r0
 800e7f8:	6011      	str	r1, [r2, #0]
 800e7fa:	d1e0      	bne.n	800e7be <_free_r+0x22>
 800e7fc:	6818      	ldr	r0, [r3, #0]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	6053      	str	r3, [r2, #4]
 800e802:	4408      	add	r0, r1
 800e804:	6010      	str	r0, [r2, #0]
 800e806:	e7da      	b.n	800e7be <_free_r+0x22>
 800e808:	d902      	bls.n	800e810 <_free_r+0x74>
 800e80a:	230c      	movs	r3, #12
 800e80c:	602b      	str	r3, [r5, #0]
 800e80e:	e7d6      	b.n	800e7be <_free_r+0x22>
 800e810:	6820      	ldr	r0, [r4, #0]
 800e812:	1821      	adds	r1, r4, r0
 800e814:	428b      	cmp	r3, r1
 800e816:	bf04      	itt	eq
 800e818:	6819      	ldreq	r1, [r3, #0]
 800e81a:	685b      	ldreq	r3, [r3, #4]
 800e81c:	6063      	str	r3, [r4, #4]
 800e81e:	bf04      	itt	eq
 800e820:	1809      	addeq	r1, r1, r0
 800e822:	6021      	streq	r1, [r4, #0]
 800e824:	6054      	str	r4, [r2, #4]
 800e826:	e7ca      	b.n	800e7be <_free_r+0x22>
 800e828:	bd38      	pop	{r3, r4, r5, pc}
 800e82a:	bf00      	nop
 800e82c:	200084e8 	.word	0x200084e8

0800e830 <malloc>:
 800e830:	4b02      	ldr	r3, [pc, #8]	@ (800e83c <malloc+0xc>)
 800e832:	4601      	mov	r1, r0
 800e834:	6818      	ldr	r0, [r3, #0]
 800e836:	f000 b825 	b.w	800e884 <_malloc_r>
 800e83a:	bf00      	nop
 800e83c:	20000038 	.word	0x20000038

0800e840 <sbrk_aligned>:
 800e840:	b570      	push	{r4, r5, r6, lr}
 800e842:	4e0f      	ldr	r6, [pc, #60]	@ (800e880 <sbrk_aligned+0x40>)
 800e844:	460c      	mov	r4, r1
 800e846:	6831      	ldr	r1, [r6, #0]
 800e848:	4605      	mov	r5, r0
 800e84a:	b911      	cbnz	r1, 800e852 <sbrk_aligned+0x12>
 800e84c:	f000 fcc6 	bl	800f1dc <_sbrk_r>
 800e850:	6030      	str	r0, [r6, #0]
 800e852:	4621      	mov	r1, r4
 800e854:	4628      	mov	r0, r5
 800e856:	f000 fcc1 	bl	800f1dc <_sbrk_r>
 800e85a:	1c43      	adds	r3, r0, #1
 800e85c:	d103      	bne.n	800e866 <sbrk_aligned+0x26>
 800e85e:	f04f 34ff 	mov.w	r4, #4294967295
 800e862:	4620      	mov	r0, r4
 800e864:	bd70      	pop	{r4, r5, r6, pc}
 800e866:	1cc4      	adds	r4, r0, #3
 800e868:	f024 0403 	bic.w	r4, r4, #3
 800e86c:	42a0      	cmp	r0, r4
 800e86e:	d0f8      	beq.n	800e862 <sbrk_aligned+0x22>
 800e870:	1a21      	subs	r1, r4, r0
 800e872:	4628      	mov	r0, r5
 800e874:	f000 fcb2 	bl	800f1dc <_sbrk_r>
 800e878:	3001      	adds	r0, #1
 800e87a:	d1f2      	bne.n	800e862 <sbrk_aligned+0x22>
 800e87c:	e7ef      	b.n	800e85e <sbrk_aligned+0x1e>
 800e87e:	bf00      	nop
 800e880:	200084e4 	.word	0x200084e4

0800e884 <_malloc_r>:
 800e884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e888:	1ccd      	adds	r5, r1, #3
 800e88a:	f025 0503 	bic.w	r5, r5, #3
 800e88e:	3508      	adds	r5, #8
 800e890:	2d0c      	cmp	r5, #12
 800e892:	bf38      	it	cc
 800e894:	250c      	movcc	r5, #12
 800e896:	2d00      	cmp	r5, #0
 800e898:	4606      	mov	r6, r0
 800e89a:	db01      	blt.n	800e8a0 <_malloc_r+0x1c>
 800e89c:	42a9      	cmp	r1, r5
 800e89e:	d904      	bls.n	800e8aa <_malloc_r+0x26>
 800e8a0:	230c      	movs	r3, #12
 800e8a2:	6033      	str	r3, [r6, #0]
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e980 <_malloc_r+0xfc>
 800e8ae:	f000 f869 	bl	800e984 <__malloc_lock>
 800e8b2:	f8d8 3000 	ldr.w	r3, [r8]
 800e8b6:	461c      	mov	r4, r3
 800e8b8:	bb44      	cbnz	r4, 800e90c <_malloc_r+0x88>
 800e8ba:	4629      	mov	r1, r5
 800e8bc:	4630      	mov	r0, r6
 800e8be:	f7ff ffbf 	bl	800e840 <sbrk_aligned>
 800e8c2:	1c43      	adds	r3, r0, #1
 800e8c4:	4604      	mov	r4, r0
 800e8c6:	d158      	bne.n	800e97a <_malloc_r+0xf6>
 800e8c8:	f8d8 4000 	ldr.w	r4, [r8]
 800e8cc:	4627      	mov	r7, r4
 800e8ce:	2f00      	cmp	r7, #0
 800e8d0:	d143      	bne.n	800e95a <_malloc_r+0xd6>
 800e8d2:	2c00      	cmp	r4, #0
 800e8d4:	d04b      	beq.n	800e96e <_malloc_r+0xea>
 800e8d6:	6823      	ldr	r3, [r4, #0]
 800e8d8:	4639      	mov	r1, r7
 800e8da:	4630      	mov	r0, r6
 800e8dc:	eb04 0903 	add.w	r9, r4, r3
 800e8e0:	f000 fc7c 	bl	800f1dc <_sbrk_r>
 800e8e4:	4581      	cmp	r9, r0
 800e8e6:	d142      	bne.n	800e96e <_malloc_r+0xea>
 800e8e8:	6821      	ldr	r1, [r4, #0]
 800e8ea:	1a6d      	subs	r5, r5, r1
 800e8ec:	4629      	mov	r1, r5
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	f7ff ffa6 	bl	800e840 <sbrk_aligned>
 800e8f4:	3001      	adds	r0, #1
 800e8f6:	d03a      	beq.n	800e96e <_malloc_r+0xea>
 800e8f8:	6823      	ldr	r3, [r4, #0]
 800e8fa:	442b      	add	r3, r5
 800e8fc:	6023      	str	r3, [r4, #0]
 800e8fe:	f8d8 3000 	ldr.w	r3, [r8]
 800e902:	685a      	ldr	r2, [r3, #4]
 800e904:	bb62      	cbnz	r2, 800e960 <_malloc_r+0xdc>
 800e906:	f8c8 7000 	str.w	r7, [r8]
 800e90a:	e00f      	b.n	800e92c <_malloc_r+0xa8>
 800e90c:	6822      	ldr	r2, [r4, #0]
 800e90e:	1b52      	subs	r2, r2, r5
 800e910:	d420      	bmi.n	800e954 <_malloc_r+0xd0>
 800e912:	2a0b      	cmp	r2, #11
 800e914:	d917      	bls.n	800e946 <_malloc_r+0xc2>
 800e916:	1961      	adds	r1, r4, r5
 800e918:	42a3      	cmp	r3, r4
 800e91a:	6025      	str	r5, [r4, #0]
 800e91c:	bf18      	it	ne
 800e91e:	6059      	strne	r1, [r3, #4]
 800e920:	6863      	ldr	r3, [r4, #4]
 800e922:	bf08      	it	eq
 800e924:	f8c8 1000 	streq.w	r1, [r8]
 800e928:	5162      	str	r2, [r4, r5]
 800e92a:	604b      	str	r3, [r1, #4]
 800e92c:	4630      	mov	r0, r6
 800e92e:	f000 f82f 	bl	800e990 <__malloc_unlock>
 800e932:	f104 000b 	add.w	r0, r4, #11
 800e936:	1d23      	adds	r3, r4, #4
 800e938:	f020 0007 	bic.w	r0, r0, #7
 800e93c:	1ac2      	subs	r2, r0, r3
 800e93e:	bf1c      	itt	ne
 800e940:	1a1b      	subne	r3, r3, r0
 800e942:	50a3      	strne	r3, [r4, r2]
 800e944:	e7af      	b.n	800e8a6 <_malloc_r+0x22>
 800e946:	6862      	ldr	r2, [r4, #4]
 800e948:	42a3      	cmp	r3, r4
 800e94a:	bf0c      	ite	eq
 800e94c:	f8c8 2000 	streq.w	r2, [r8]
 800e950:	605a      	strne	r2, [r3, #4]
 800e952:	e7eb      	b.n	800e92c <_malloc_r+0xa8>
 800e954:	4623      	mov	r3, r4
 800e956:	6864      	ldr	r4, [r4, #4]
 800e958:	e7ae      	b.n	800e8b8 <_malloc_r+0x34>
 800e95a:	463c      	mov	r4, r7
 800e95c:	687f      	ldr	r7, [r7, #4]
 800e95e:	e7b6      	b.n	800e8ce <_malloc_r+0x4a>
 800e960:	461a      	mov	r2, r3
 800e962:	685b      	ldr	r3, [r3, #4]
 800e964:	42a3      	cmp	r3, r4
 800e966:	d1fb      	bne.n	800e960 <_malloc_r+0xdc>
 800e968:	2300      	movs	r3, #0
 800e96a:	6053      	str	r3, [r2, #4]
 800e96c:	e7de      	b.n	800e92c <_malloc_r+0xa8>
 800e96e:	230c      	movs	r3, #12
 800e970:	6033      	str	r3, [r6, #0]
 800e972:	4630      	mov	r0, r6
 800e974:	f000 f80c 	bl	800e990 <__malloc_unlock>
 800e978:	e794      	b.n	800e8a4 <_malloc_r+0x20>
 800e97a:	6005      	str	r5, [r0, #0]
 800e97c:	e7d6      	b.n	800e92c <_malloc_r+0xa8>
 800e97e:	bf00      	nop
 800e980:	200084e8 	.word	0x200084e8

0800e984 <__malloc_lock>:
 800e984:	4801      	ldr	r0, [pc, #4]	@ (800e98c <__malloc_lock+0x8>)
 800e986:	f7ff beda 	b.w	800e73e <__retarget_lock_acquire_recursive>
 800e98a:	bf00      	nop
 800e98c:	200084e0 	.word	0x200084e0

0800e990 <__malloc_unlock>:
 800e990:	4801      	ldr	r0, [pc, #4]	@ (800e998 <__malloc_unlock+0x8>)
 800e992:	f7ff bed5 	b.w	800e740 <__retarget_lock_release_recursive>
 800e996:	bf00      	nop
 800e998:	200084e0 	.word	0x200084e0

0800e99c <__sfputc_r>:
 800e99c:	6893      	ldr	r3, [r2, #8]
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	b410      	push	{r4}
 800e9a4:	6093      	str	r3, [r2, #8]
 800e9a6:	da08      	bge.n	800e9ba <__sfputc_r+0x1e>
 800e9a8:	6994      	ldr	r4, [r2, #24]
 800e9aa:	42a3      	cmp	r3, r4
 800e9ac:	db01      	blt.n	800e9b2 <__sfputc_r+0x16>
 800e9ae:	290a      	cmp	r1, #10
 800e9b0:	d103      	bne.n	800e9ba <__sfputc_r+0x1e>
 800e9b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9b6:	f000 bb7d 	b.w	800f0b4 <__swbuf_r>
 800e9ba:	6813      	ldr	r3, [r2, #0]
 800e9bc:	1c58      	adds	r0, r3, #1
 800e9be:	6010      	str	r0, [r2, #0]
 800e9c0:	7019      	strb	r1, [r3, #0]
 800e9c2:	4608      	mov	r0, r1
 800e9c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9c8:	4770      	bx	lr

0800e9ca <__sfputs_r>:
 800e9ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9cc:	4606      	mov	r6, r0
 800e9ce:	460f      	mov	r7, r1
 800e9d0:	4614      	mov	r4, r2
 800e9d2:	18d5      	adds	r5, r2, r3
 800e9d4:	42ac      	cmp	r4, r5
 800e9d6:	d101      	bne.n	800e9dc <__sfputs_r+0x12>
 800e9d8:	2000      	movs	r0, #0
 800e9da:	e007      	b.n	800e9ec <__sfputs_r+0x22>
 800e9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9e0:	463a      	mov	r2, r7
 800e9e2:	4630      	mov	r0, r6
 800e9e4:	f7ff ffda 	bl	800e99c <__sfputc_r>
 800e9e8:	1c43      	adds	r3, r0, #1
 800e9ea:	d1f3      	bne.n	800e9d4 <__sfputs_r+0xa>
 800e9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e9f0 <_vfiprintf_r>:
 800e9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f4:	460d      	mov	r5, r1
 800e9f6:	b09d      	sub	sp, #116	@ 0x74
 800e9f8:	4614      	mov	r4, r2
 800e9fa:	4698      	mov	r8, r3
 800e9fc:	4606      	mov	r6, r0
 800e9fe:	b118      	cbz	r0, 800ea08 <_vfiprintf_r+0x18>
 800ea00:	6a03      	ldr	r3, [r0, #32]
 800ea02:	b90b      	cbnz	r3, 800ea08 <_vfiprintf_r+0x18>
 800ea04:	f7ff fd8c 	bl	800e520 <__sinit>
 800ea08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea0a:	07d9      	lsls	r1, r3, #31
 800ea0c:	d405      	bmi.n	800ea1a <_vfiprintf_r+0x2a>
 800ea0e:	89ab      	ldrh	r3, [r5, #12]
 800ea10:	059a      	lsls	r2, r3, #22
 800ea12:	d402      	bmi.n	800ea1a <_vfiprintf_r+0x2a>
 800ea14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea16:	f7ff fe92 	bl	800e73e <__retarget_lock_acquire_recursive>
 800ea1a:	89ab      	ldrh	r3, [r5, #12]
 800ea1c:	071b      	lsls	r3, r3, #28
 800ea1e:	d501      	bpl.n	800ea24 <_vfiprintf_r+0x34>
 800ea20:	692b      	ldr	r3, [r5, #16]
 800ea22:	b99b      	cbnz	r3, 800ea4c <_vfiprintf_r+0x5c>
 800ea24:	4629      	mov	r1, r5
 800ea26:	4630      	mov	r0, r6
 800ea28:	f000 fb82 	bl	800f130 <__swsetup_r>
 800ea2c:	b170      	cbz	r0, 800ea4c <_vfiprintf_r+0x5c>
 800ea2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea30:	07dc      	lsls	r4, r3, #31
 800ea32:	d504      	bpl.n	800ea3e <_vfiprintf_r+0x4e>
 800ea34:	f04f 30ff 	mov.w	r0, #4294967295
 800ea38:	b01d      	add	sp, #116	@ 0x74
 800ea3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea3e:	89ab      	ldrh	r3, [r5, #12]
 800ea40:	0598      	lsls	r0, r3, #22
 800ea42:	d4f7      	bmi.n	800ea34 <_vfiprintf_r+0x44>
 800ea44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea46:	f7ff fe7b 	bl	800e740 <__retarget_lock_release_recursive>
 800ea4a:	e7f3      	b.n	800ea34 <_vfiprintf_r+0x44>
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea50:	2320      	movs	r3, #32
 800ea52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea56:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea5a:	2330      	movs	r3, #48	@ 0x30
 800ea5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ec0c <_vfiprintf_r+0x21c>
 800ea60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea64:	f04f 0901 	mov.w	r9, #1
 800ea68:	4623      	mov	r3, r4
 800ea6a:	469a      	mov	sl, r3
 800ea6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea70:	b10a      	cbz	r2, 800ea76 <_vfiprintf_r+0x86>
 800ea72:	2a25      	cmp	r2, #37	@ 0x25
 800ea74:	d1f9      	bne.n	800ea6a <_vfiprintf_r+0x7a>
 800ea76:	ebba 0b04 	subs.w	fp, sl, r4
 800ea7a:	d00b      	beq.n	800ea94 <_vfiprintf_r+0xa4>
 800ea7c:	465b      	mov	r3, fp
 800ea7e:	4622      	mov	r2, r4
 800ea80:	4629      	mov	r1, r5
 800ea82:	4630      	mov	r0, r6
 800ea84:	f7ff ffa1 	bl	800e9ca <__sfputs_r>
 800ea88:	3001      	adds	r0, #1
 800ea8a:	f000 80a7 	beq.w	800ebdc <_vfiprintf_r+0x1ec>
 800ea8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea90:	445a      	add	r2, fp
 800ea92:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea94:	f89a 3000 	ldrb.w	r3, [sl]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	f000 809f 	beq.w	800ebdc <_vfiprintf_r+0x1ec>
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	f04f 32ff 	mov.w	r2, #4294967295
 800eaa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eaa8:	f10a 0a01 	add.w	sl, sl, #1
 800eaac:	9304      	str	r3, [sp, #16]
 800eaae:	9307      	str	r3, [sp, #28]
 800eab0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eab4:	931a      	str	r3, [sp, #104]	@ 0x68
 800eab6:	4654      	mov	r4, sl
 800eab8:	2205      	movs	r2, #5
 800eaba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eabe:	4853      	ldr	r0, [pc, #332]	@ (800ec0c <_vfiprintf_r+0x21c>)
 800eac0:	f7f1 fb86 	bl	80001d0 <memchr>
 800eac4:	9a04      	ldr	r2, [sp, #16]
 800eac6:	b9d8      	cbnz	r0, 800eb00 <_vfiprintf_r+0x110>
 800eac8:	06d1      	lsls	r1, r2, #27
 800eaca:	bf44      	itt	mi
 800eacc:	2320      	movmi	r3, #32
 800eace:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ead2:	0713      	lsls	r3, r2, #28
 800ead4:	bf44      	itt	mi
 800ead6:	232b      	movmi	r3, #43	@ 0x2b
 800ead8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eadc:	f89a 3000 	ldrb.w	r3, [sl]
 800eae0:	2b2a      	cmp	r3, #42	@ 0x2a
 800eae2:	d015      	beq.n	800eb10 <_vfiprintf_r+0x120>
 800eae4:	9a07      	ldr	r2, [sp, #28]
 800eae6:	4654      	mov	r4, sl
 800eae8:	2000      	movs	r0, #0
 800eaea:	f04f 0c0a 	mov.w	ip, #10
 800eaee:	4621      	mov	r1, r4
 800eaf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eaf4:	3b30      	subs	r3, #48	@ 0x30
 800eaf6:	2b09      	cmp	r3, #9
 800eaf8:	d94b      	bls.n	800eb92 <_vfiprintf_r+0x1a2>
 800eafa:	b1b0      	cbz	r0, 800eb2a <_vfiprintf_r+0x13a>
 800eafc:	9207      	str	r2, [sp, #28]
 800eafe:	e014      	b.n	800eb2a <_vfiprintf_r+0x13a>
 800eb00:	eba0 0308 	sub.w	r3, r0, r8
 800eb04:	fa09 f303 	lsl.w	r3, r9, r3
 800eb08:	4313      	orrs	r3, r2
 800eb0a:	9304      	str	r3, [sp, #16]
 800eb0c:	46a2      	mov	sl, r4
 800eb0e:	e7d2      	b.n	800eab6 <_vfiprintf_r+0xc6>
 800eb10:	9b03      	ldr	r3, [sp, #12]
 800eb12:	1d19      	adds	r1, r3, #4
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	9103      	str	r1, [sp, #12]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	bfbb      	ittet	lt
 800eb1c:	425b      	neglt	r3, r3
 800eb1e:	f042 0202 	orrlt.w	r2, r2, #2
 800eb22:	9307      	strge	r3, [sp, #28]
 800eb24:	9307      	strlt	r3, [sp, #28]
 800eb26:	bfb8      	it	lt
 800eb28:	9204      	strlt	r2, [sp, #16]
 800eb2a:	7823      	ldrb	r3, [r4, #0]
 800eb2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb2e:	d10a      	bne.n	800eb46 <_vfiprintf_r+0x156>
 800eb30:	7863      	ldrb	r3, [r4, #1]
 800eb32:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb34:	d132      	bne.n	800eb9c <_vfiprintf_r+0x1ac>
 800eb36:	9b03      	ldr	r3, [sp, #12]
 800eb38:	1d1a      	adds	r2, r3, #4
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	9203      	str	r2, [sp, #12]
 800eb3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb42:	3402      	adds	r4, #2
 800eb44:	9305      	str	r3, [sp, #20]
 800eb46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ec1c <_vfiprintf_r+0x22c>
 800eb4a:	7821      	ldrb	r1, [r4, #0]
 800eb4c:	2203      	movs	r2, #3
 800eb4e:	4650      	mov	r0, sl
 800eb50:	f7f1 fb3e 	bl	80001d0 <memchr>
 800eb54:	b138      	cbz	r0, 800eb66 <_vfiprintf_r+0x176>
 800eb56:	9b04      	ldr	r3, [sp, #16]
 800eb58:	eba0 000a 	sub.w	r0, r0, sl
 800eb5c:	2240      	movs	r2, #64	@ 0x40
 800eb5e:	4082      	lsls	r2, r0
 800eb60:	4313      	orrs	r3, r2
 800eb62:	3401      	adds	r4, #1
 800eb64:	9304      	str	r3, [sp, #16]
 800eb66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb6a:	4829      	ldr	r0, [pc, #164]	@ (800ec10 <_vfiprintf_r+0x220>)
 800eb6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb70:	2206      	movs	r2, #6
 800eb72:	f7f1 fb2d 	bl	80001d0 <memchr>
 800eb76:	2800      	cmp	r0, #0
 800eb78:	d03f      	beq.n	800ebfa <_vfiprintf_r+0x20a>
 800eb7a:	4b26      	ldr	r3, [pc, #152]	@ (800ec14 <_vfiprintf_r+0x224>)
 800eb7c:	bb1b      	cbnz	r3, 800ebc6 <_vfiprintf_r+0x1d6>
 800eb7e:	9b03      	ldr	r3, [sp, #12]
 800eb80:	3307      	adds	r3, #7
 800eb82:	f023 0307 	bic.w	r3, r3, #7
 800eb86:	3308      	adds	r3, #8
 800eb88:	9303      	str	r3, [sp, #12]
 800eb8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb8c:	443b      	add	r3, r7
 800eb8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb90:	e76a      	b.n	800ea68 <_vfiprintf_r+0x78>
 800eb92:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb96:	460c      	mov	r4, r1
 800eb98:	2001      	movs	r0, #1
 800eb9a:	e7a8      	b.n	800eaee <_vfiprintf_r+0xfe>
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	3401      	adds	r4, #1
 800eba0:	9305      	str	r3, [sp, #20]
 800eba2:	4619      	mov	r1, r3
 800eba4:	f04f 0c0a 	mov.w	ip, #10
 800eba8:	4620      	mov	r0, r4
 800ebaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebae:	3a30      	subs	r2, #48	@ 0x30
 800ebb0:	2a09      	cmp	r2, #9
 800ebb2:	d903      	bls.n	800ebbc <_vfiprintf_r+0x1cc>
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d0c6      	beq.n	800eb46 <_vfiprintf_r+0x156>
 800ebb8:	9105      	str	r1, [sp, #20]
 800ebba:	e7c4      	b.n	800eb46 <_vfiprintf_r+0x156>
 800ebbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebc0:	4604      	mov	r4, r0
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	e7f0      	b.n	800eba8 <_vfiprintf_r+0x1b8>
 800ebc6:	ab03      	add	r3, sp, #12
 800ebc8:	9300      	str	r3, [sp, #0]
 800ebca:	462a      	mov	r2, r5
 800ebcc:	4b12      	ldr	r3, [pc, #72]	@ (800ec18 <_vfiprintf_r+0x228>)
 800ebce:	a904      	add	r1, sp, #16
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	f3af 8000 	nop.w
 800ebd6:	4607      	mov	r7, r0
 800ebd8:	1c78      	adds	r0, r7, #1
 800ebda:	d1d6      	bne.n	800eb8a <_vfiprintf_r+0x19a>
 800ebdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ebde:	07d9      	lsls	r1, r3, #31
 800ebe0:	d405      	bmi.n	800ebee <_vfiprintf_r+0x1fe>
 800ebe2:	89ab      	ldrh	r3, [r5, #12]
 800ebe4:	059a      	lsls	r2, r3, #22
 800ebe6:	d402      	bmi.n	800ebee <_vfiprintf_r+0x1fe>
 800ebe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ebea:	f7ff fda9 	bl	800e740 <__retarget_lock_release_recursive>
 800ebee:	89ab      	ldrh	r3, [r5, #12]
 800ebf0:	065b      	lsls	r3, r3, #25
 800ebf2:	f53f af1f 	bmi.w	800ea34 <_vfiprintf_r+0x44>
 800ebf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ebf8:	e71e      	b.n	800ea38 <_vfiprintf_r+0x48>
 800ebfa:	ab03      	add	r3, sp, #12
 800ebfc:	9300      	str	r3, [sp, #0]
 800ebfe:	462a      	mov	r2, r5
 800ec00:	4b05      	ldr	r3, [pc, #20]	@ (800ec18 <_vfiprintf_r+0x228>)
 800ec02:	a904      	add	r1, sp, #16
 800ec04:	4630      	mov	r0, r6
 800ec06:	f000 f879 	bl	800ecfc <_printf_i>
 800ec0a:	e7e4      	b.n	800ebd6 <_vfiprintf_r+0x1e6>
 800ec0c:	08011f9d 	.word	0x08011f9d
 800ec10:	08011fa7 	.word	0x08011fa7
 800ec14:	00000000 	.word	0x00000000
 800ec18:	0800e9cb 	.word	0x0800e9cb
 800ec1c:	08011fa3 	.word	0x08011fa3

0800ec20 <_printf_common>:
 800ec20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec24:	4616      	mov	r6, r2
 800ec26:	4698      	mov	r8, r3
 800ec28:	688a      	ldr	r2, [r1, #8]
 800ec2a:	690b      	ldr	r3, [r1, #16]
 800ec2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ec30:	4293      	cmp	r3, r2
 800ec32:	bfb8      	it	lt
 800ec34:	4613      	movlt	r3, r2
 800ec36:	6033      	str	r3, [r6, #0]
 800ec38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ec3c:	4607      	mov	r7, r0
 800ec3e:	460c      	mov	r4, r1
 800ec40:	b10a      	cbz	r2, 800ec46 <_printf_common+0x26>
 800ec42:	3301      	adds	r3, #1
 800ec44:	6033      	str	r3, [r6, #0]
 800ec46:	6823      	ldr	r3, [r4, #0]
 800ec48:	0699      	lsls	r1, r3, #26
 800ec4a:	bf42      	ittt	mi
 800ec4c:	6833      	ldrmi	r3, [r6, #0]
 800ec4e:	3302      	addmi	r3, #2
 800ec50:	6033      	strmi	r3, [r6, #0]
 800ec52:	6825      	ldr	r5, [r4, #0]
 800ec54:	f015 0506 	ands.w	r5, r5, #6
 800ec58:	d106      	bne.n	800ec68 <_printf_common+0x48>
 800ec5a:	f104 0a19 	add.w	sl, r4, #25
 800ec5e:	68e3      	ldr	r3, [r4, #12]
 800ec60:	6832      	ldr	r2, [r6, #0]
 800ec62:	1a9b      	subs	r3, r3, r2
 800ec64:	42ab      	cmp	r3, r5
 800ec66:	dc26      	bgt.n	800ecb6 <_printf_common+0x96>
 800ec68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ec6c:	6822      	ldr	r2, [r4, #0]
 800ec6e:	3b00      	subs	r3, #0
 800ec70:	bf18      	it	ne
 800ec72:	2301      	movne	r3, #1
 800ec74:	0692      	lsls	r2, r2, #26
 800ec76:	d42b      	bmi.n	800ecd0 <_printf_common+0xb0>
 800ec78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ec7c:	4641      	mov	r1, r8
 800ec7e:	4638      	mov	r0, r7
 800ec80:	47c8      	blx	r9
 800ec82:	3001      	adds	r0, #1
 800ec84:	d01e      	beq.n	800ecc4 <_printf_common+0xa4>
 800ec86:	6823      	ldr	r3, [r4, #0]
 800ec88:	6922      	ldr	r2, [r4, #16]
 800ec8a:	f003 0306 	and.w	r3, r3, #6
 800ec8e:	2b04      	cmp	r3, #4
 800ec90:	bf02      	ittt	eq
 800ec92:	68e5      	ldreq	r5, [r4, #12]
 800ec94:	6833      	ldreq	r3, [r6, #0]
 800ec96:	1aed      	subeq	r5, r5, r3
 800ec98:	68a3      	ldr	r3, [r4, #8]
 800ec9a:	bf0c      	ite	eq
 800ec9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eca0:	2500      	movne	r5, #0
 800eca2:	4293      	cmp	r3, r2
 800eca4:	bfc4      	itt	gt
 800eca6:	1a9b      	subgt	r3, r3, r2
 800eca8:	18ed      	addgt	r5, r5, r3
 800ecaa:	2600      	movs	r6, #0
 800ecac:	341a      	adds	r4, #26
 800ecae:	42b5      	cmp	r5, r6
 800ecb0:	d11a      	bne.n	800ece8 <_printf_common+0xc8>
 800ecb2:	2000      	movs	r0, #0
 800ecb4:	e008      	b.n	800ecc8 <_printf_common+0xa8>
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	4652      	mov	r2, sl
 800ecba:	4641      	mov	r1, r8
 800ecbc:	4638      	mov	r0, r7
 800ecbe:	47c8      	blx	r9
 800ecc0:	3001      	adds	r0, #1
 800ecc2:	d103      	bne.n	800eccc <_printf_common+0xac>
 800ecc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ecc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eccc:	3501      	adds	r5, #1
 800ecce:	e7c6      	b.n	800ec5e <_printf_common+0x3e>
 800ecd0:	18e1      	adds	r1, r4, r3
 800ecd2:	1c5a      	adds	r2, r3, #1
 800ecd4:	2030      	movs	r0, #48	@ 0x30
 800ecd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ecda:	4422      	add	r2, r4
 800ecdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ece0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ece4:	3302      	adds	r3, #2
 800ece6:	e7c7      	b.n	800ec78 <_printf_common+0x58>
 800ece8:	2301      	movs	r3, #1
 800ecea:	4622      	mov	r2, r4
 800ecec:	4641      	mov	r1, r8
 800ecee:	4638      	mov	r0, r7
 800ecf0:	47c8      	blx	r9
 800ecf2:	3001      	adds	r0, #1
 800ecf4:	d0e6      	beq.n	800ecc4 <_printf_common+0xa4>
 800ecf6:	3601      	adds	r6, #1
 800ecf8:	e7d9      	b.n	800ecae <_printf_common+0x8e>
	...

0800ecfc <_printf_i>:
 800ecfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed00:	7e0f      	ldrb	r7, [r1, #24]
 800ed02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ed04:	2f78      	cmp	r7, #120	@ 0x78
 800ed06:	4691      	mov	r9, r2
 800ed08:	4680      	mov	r8, r0
 800ed0a:	460c      	mov	r4, r1
 800ed0c:	469a      	mov	sl, r3
 800ed0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ed12:	d807      	bhi.n	800ed24 <_printf_i+0x28>
 800ed14:	2f62      	cmp	r7, #98	@ 0x62
 800ed16:	d80a      	bhi.n	800ed2e <_printf_i+0x32>
 800ed18:	2f00      	cmp	r7, #0
 800ed1a:	f000 80d1 	beq.w	800eec0 <_printf_i+0x1c4>
 800ed1e:	2f58      	cmp	r7, #88	@ 0x58
 800ed20:	f000 80b8 	beq.w	800ee94 <_printf_i+0x198>
 800ed24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ed2c:	e03a      	b.n	800eda4 <_printf_i+0xa8>
 800ed2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ed32:	2b15      	cmp	r3, #21
 800ed34:	d8f6      	bhi.n	800ed24 <_printf_i+0x28>
 800ed36:	a101      	add	r1, pc, #4	@ (adr r1, 800ed3c <_printf_i+0x40>)
 800ed38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed3c:	0800ed95 	.word	0x0800ed95
 800ed40:	0800eda9 	.word	0x0800eda9
 800ed44:	0800ed25 	.word	0x0800ed25
 800ed48:	0800ed25 	.word	0x0800ed25
 800ed4c:	0800ed25 	.word	0x0800ed25
 800ed50:	0800ed25 	.word	0x0800ed25
 800ed54:	0800eda9 	.word	0x0800eda9
 800ed58:	0800ed25 	.word	0x0800ed25
 800ed5c:	0800ed25 	.word	0x0800ed25
 800ed60:	0800ed25 	.word	0x0800ed25
 800ed64:	0800ed25 	.word	0x0800ed25
 800ed68:	0800eea7 	.word	0x0800eea7
 800ed6c:	0800edd3 	.word	0x0800edd3
 800ed70:	0800ee61 	.word	0x0800ee61
 800ed74:	0800ed25 	.word	0x0800ed25
 800ed78:	0800ed25 	.word	0x0800ed25
 800ed7c:	0800eec9 	.word	0x0800eec9
 800ed80:	0800ed25 	.word	0x0800ed25
 800ed84:	0800edd3 	.word	0x0800edd3
 800ed88:	0800ed25 	.word	0x0800ed25
 800ed8c:	0800ed25 	.word	0x0800ed25
 800ed90:	0800ee69 	.word	0x0800ee69
 800ed94:	6833      	ldr	r3, [r6, #0]
 800ed96:	1d1a      	adds	r2, r3, #4
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	6032      	str	r2, [r6, #0]
 800ed9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eda0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eda4:	2301      	movs	r3, #1
 800eda6:	e09c      	b.n	800eee2 <_printf_i+0x1e6>
 800eda8:	6833      	ldr	r3, [r6, #0]
 800edaa:	6820      	ldr	r0, [r4, #0]
 800edac:	1d19      	adds	r1, r3, #4
 800edae:	6031      	str	r1, [r6, #0]
 800edb0:	0606      	lsls	r6, r0, #24
 800edb2:	d501      	bpl.n	800edb8 <_printf_i+0xbc>
 800edb4:	681d      	ldr	r5, [r3, #0]
 800edb6:	e003      	b.n	800edc0 <_printf_i+0xc4>
 800edb8:	0645      	lsls	r5, r0, #25
 800edba:	d5fb      	bpl.n	800edb4 <_printf_i+0xb8>
 800edbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800edc0:	2d00      	cmp	r5, #0
 800edc2:	da03      	bge.n	800edcc <_printf_i+0xd0>
 800edc4:	232d      	movs	r3, #45	@ 0x2d
 800edc6:	426d      	negs	r5, r5
 800edc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800edcc:	4858      	ldr	r0, [pc, #352]	@ (800ef30 <_printf_i+0x234>)
 800edce:	230a      	movs	r3, #10
 800edd0:	e011      	b.n	800edf6 <_printf_i+0xfa>
 800edd2:	6821      	ldr	r1, [r4, #0]
 800edd4:	6833      	ldr	r3, [r6, #0]
 800edd6:	0608      	lsls	r0, r1, #24
 800edd8:	f853 5b04 	ldr.w	r5, [r3], #4
 800eddc:	d402      	bmi.n	800ede4 <_printf_i+0xe8>
 800edde:	0649      	lsls	r1, r1, #25
 800ede0:	bf48      	it	mi
 800ede2:	b2ad      	uxthmi	r5, r5
 800ede4:	2f6f      	cmp	r7, #111	@ 0x6f
 800ede6:	4852      	ldr	r0, [pc, #328]	@ (800ef30 <_printf_i+0x234>)
 800ede8:	6033      	str	r3, [r6, #0]
 800edea:	bf14      	ite	ne
 800edec:	230a      	movne	r3, #10
 800edee:	2308      	moveq	r3, #8
 800edf0:	2100      	movs	r1, #0
 800edf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800edf6:	6866      	ldr	r6, [r4, #4]
 800edf8:	60a6      	str	r6, [r4, #8]
 800edfa:	2e00      	cmp	r6, #0
 800edfc:	db05      	blt.n	800ee0a <_printf_i+0x10e>
 800edfe:	6821      	ldr	r1, [r4, #0]
 800ee00:	432e      	orrs	r6, r5
 800ee02:	f021 0104 	bic.w	r1, r1, #4
 800ee06:	6021      	str	r1, [r4, #0]
 800ee08:	d04b      	beq.n	800eea2 <_printf_i+0x1a6>
 800ee0a:	4616      	mov	r6, r2
 800ee0c:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee10:	fb03 5711 	mls	r7, r3, r1, r5
 800ee14:	5dc7      	ldrb	r7, [r0, r7]
 800ee16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee1a:	462f      	mov	r7, r5
 800ee1c:	42bb      	cmp	r3, r7
 800ee1e:	460d      	mov	r5, r1
 800ee20:	d9f4      	bls.n	800ee0c <_printf_i+0x110>
 800ee22:	2b08      	cmp	r3, #8
 800ee24:	d10b      	bne.n	800ee3e <_printf_i+0x142>
 800ee26:	6823      	ldr	r3, [r4, #0]
 800ee28:	07df      	lsls	r7, r3, #31
 800ee2a:	d508      	bpl.n	800ee3e <_printf_i+0x142>
 800ee2c:	6923      	ldr	r3, [r4, #16]
 800ee2e:	6861      	ldr	r1, [r4, #4]
 800ee30:	4299      	cmp	r1, r3
 800ee32:	bfde      	ittt	le
 800ee34:	2330      	movle	r3, #48	@ 0x30
 800ee36:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee3e:	1b92      	subs	r2, r2, r6
 800ee40:	6122      	str	r2, [r4, #16]
 800ee42:	f8cd a000 	str.w	sl, [sp]
 800ee46:	464b      	mov	r3, r9
 800ee48:	aa03      	add	r2, sp, #12
 800ee4a:	4621      	mov	r1, r4
 800ee4c:	4640      	mov	r0, r8
 800ee4e:	f7ff fee7 	bl	800ec20 <_printf_common>
 800ee52:	3001      	adds	r0, #1
 800ee54:	d14a      	bne.n	800eeec <_printf_i+0x1f0>
 800ee56:	f04f 30ff 	mov.w	r0, #4294967295
 800ee5a:	b004      	add	sp, #16
 800ee5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee60:	6823      	ldr	r3, [r4, #0]
 800ee62:	f043 0320 	orr.w	r3, r3, #32
 800ee66:	6023      	str	r3, [r4, #0]
 800ee68:	4832      	ldr	r0, [pc, #200]	@ (800ef34 <_printf_i+0x238>)
 800ee6a:	2778      	movs	r7, #120	@ 0x78
 800ee6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ee70:	6823      	ldr	r3, [r4, #0]
 800ee72:	6831      	ldr	r1, [r6, #0]
 800ee74:	061f      	lsls	r7, r3, #24
 800ee76:	f851 5b04 	ldr.w	r5, [r1], #4
 800ee7a:	d402      	bmi.n	800ee82 <_printf_i+0x186>
 800ee7c:	065f      	lsls	r7, r3, #25
 800ee7e:	bf48      	it	mi
 800ee80:	b2ad      	uxthmi	r5, r5
 800ee82:	6031      	str	r1, [r6, #0]
 800ee84:	07d9      	lsls	r1, r3, #31
 800ee86:	bf44      	itt	mi
 800ee88:	f043 0320 	orrmi.w	r3, r3, #32
 800ee8c:	6023      	strmi	r3, [r4, #0]
 800ee8e:	b11d      	cbz	r5, 800ee98 <_printf_i+0x19c>
 800ee90:	2310      	movs	r3, #16
 800ee92:	e7ad      	b.n	800edf0 <_printf_i+0xf4>
 800ee94:	4826      	ldr	r0, [pc, #152]	@ (800ef30 <_printf_i+0x234>)
 800ee96:	e7e9      	b.n	800ee6c <_printf_i+0x170>
 800ee98:	6823      	ldr	r3, [r4, #0]
 800ee9a:	f023 0320 	bic.w	r3, r3, #32
 800ee9e:	6023      	str	r3, [r4, #0]
 800eea0:	e7f6      	b.n	800ee90 <_printf_i+0x194>
 800eea2:	4616      	mov	r6, r2
 800eea4:	e7bd      	b.n	800ee22 <_printf_i+0x126>
 800eea6:	6833      	ldr	r3, [r6, #0]
 800eea8:	6825      	ldr	r5, [r4, #0]
 800eeaa:	6961      	ldr	r1, [r4, #20]
 800eeac:	1d18      	adds	r0, r3, #4
 800eeae:	6030      	str	r0, [r6, #0]
 800eeb0:	062e      	lsls	r6, r5, #24
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	d501      	bpl.n	800eeba <_printf_i+0x1be>
 800eeb6:	6019      	str	r1, [r3, #0]
 800eeb8:	e002      	b.n	800eec0 <_printf_i+0x1c4>
 800eeba:	0668      	lsls	r0, r5, #25
 800eebc:	d5fb      	bpl.n	800eeb6 <_printf_i+0x1ba>
 800eebe:	8019      	strh	r1, [r3, #0]
 800eec0:	2300      	movs	r3, #0
 800eec2:	6123      	str	r3, [r4, #16]
 800eec4:	4616      	mov	r6, r2
 800eec6:	e7bc      	b.n	800ee42 <_printf_i+0x146>
 800eec8:	6833      	ldr	r3, [r6, #0]
 800eeca:	1d1a      	adds	r2, r3, #4
 800eecc:	6032      	str	r2, [r6, #0]
 800eece:	681e      	ldr	r6, [r3, #0]
 800eed0:	6862      	ldr	r2, [r4, #4]
 800eed2:	2100      	movs	r1, #0
 800eed4:	4630      	mov	r0, r6
 800eed6:	f7f1 f97b 	bl	80001d0 <memchr>
 800eeda:	b108      	cbz	r0, 800eee0 <_printf_i+0x1e4>
 800eedc:	1b80      	subs	r0, r0, r6
 800eede:	6060      	str	r0, [r4, #4]
 800eee0:	6863      	ldr	r3, [r4, #4]
 800eee2:	6123      	str	r3, [r4, #16]
 800eee4:	2300      	movs	r3, #0
 800eee6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eeea:	e7aa      	b.n	800ee42 <_printf_i+0x146>
 800eeec:	6923      	ldr	r3, [r4, #16]
 800eeee:	4632      	mov	r2, r6
 800eef0:	4649      	mov	r1, r9
 800eef2:	4640      	mov	r0, r8
 800eef4:	47d0      	blx	sl
 800eef6:	3001      	adds	r0, #1
 800eef8:	d0ad      	beq.n	800ee56 <_printf_i+0x15a>
 800eefa:	6823      	ldr	r3, [r4, #0]
 800eefc:	079b      	lsls	r3, r3, #30
 800eefe:	d413      	bmi.n	800ef28 <_printf_i+0x22c>
 800ef00:	68e0      	ldr	r0, [r4, #12]
 800ef02:	9b03      	ldr	r3, [sp, #12]
 800ef04:	4298      	cmp	r0, r3
 800ef06:	bfb8      	it	lt
 800ef08:	4618      	movlt	r0, r3
 800ef0a:	e7a6      	b.n	800ee5a <_printf_i+0x15e>
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	4632      	mov	r2, r6
 800ef10:	4649      	mov	r1, r9
 800ef12:	4640      	mov	r0, r8
 800ef14:	47d0      	blx	sl
 800ef16:	3001      	adds	r0, #1
 800ef18:	d09d      	beq.n	800ee56 <_printf_i+0x15a>
 800ef1a:	3501      	adds	r5, #1
 800ef1c:	68e3      	ldr	r3, [r4, #12]
 800ef1e:	9903      	ldr	r1, [sp, #12]
 800ef20:	1a5b      	subs	r3, r3, r1
 800ef22:	42ab      	cmp	r3, r5
 800ef24:	dcf2      	bgt.n	800ef0c <_printf_i+0x210>
 800ef26:	e7eb      	b.n	800ef00 <_printf_i+0x204>
 800ef28:	2500      	movs	r5, #0
 800ef2a:	f104 0619 	add.w	r6, r4, #25
 800ef2e:	e7f5      	b.n	800ef1c <_printf_i+0x220>
 800ef30:	08011fae 	.word	0x08011fae
 800ef34:	08011fbf 	.word	0x08011fbf

0800ef38 <__sflush_r>:
 800ef38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef40:	0716      	lsls	r6, r2, #28
 800ef42:	4605      	mov	r5, r0
 800ef44:	460c      	mov	r4, r1
 800ef46:	d454      	bmi.n	800eff2 <__sflush_r+0xba>
 800ef48:	684b      	ldr	r3, [r1, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	dc02      	bgt.n	800ef54 <__sflush_r+0x1c>
 800ef4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	dd48      	ble.n	800efe6 <__sflush_r+0xae>
 800ef54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef56:	2e00      	cmp	r6, #0
 800ef58:	d045      	beq.n	800efe6 <__sflush_r+0xae>
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ef60:	682f      	ldr	r7, [r5, #0]
 800ef62:	6a21      	ldr	r1, [r4, #32]
 800ef64:	602b      	str	r3, [r5, #0]
 800ef66:	d030      	beq.n	800efca <__sflush_r+0x92>
 800ef68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ef6a:	89a3      	ldrh	r3, [r4, #12]
 800ef6c:	0759      	lsls	r1, r3, #29
 800ef6e:	d505      	bpl.n	800ef7c <__sflush_r+0x44>
 800ef70:	6863      	ldr	r3, [r4, #4]
 800ef72:	1ad2      	subs	r2, r2, r3
 800ef74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ef76:	b10b      	cbz	r3, 800ef7c <__sflush_r+0x44>
 800ef78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ef7a:	1ad2      	subs	r2, r2, r3
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef80:	6a21      	ldr	r1, [r4, #32]
 800ef82:	4628      	mov	r0, r5
 800ef84:	47b0      	blx	r6
 800ef86:	1c43      	adds	r3, r0, #1
 800ef88:	89a3      	ldrh	r3, [r4, #12]
 800ef8a:	d106      	bne.n	800ef9a <__sflush_r+0x62>
 800ef8c:	6829      	ldr	r1, [r5, #0]
 800ef8e:	291d      	cmp	r1, #29
 800ef90:	d82b      	bhi.n	800efea <__sflush_r+0xb2>
 800ef92:	4a2a      	ldr	r2, [pc, #168]	@ (800f03c <__sflush_r+0x104>)
 800ef94:	40ca      	lsrs	r2, r1
 800ef96:	07d6      	lsls	r6, r2, #31
 800ef98:	d527      	bpl.n	800efea <__sflush_r+0xb2>
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	6062      	str	r2, [r4, #4]
 800ef9e:	04d9      	lsls	r1, r3, #19
 800efa0:	6922      	ldr	r2, [r4, #16]
 800efa2:	6022      	str	r2, [r4, #0]
 800efa4:	d504      	bpl.n	800efb0 <__sflush_r+0x78>
 800efa6:	1c42      	adds	r2, r0, #1
 800efa8:	d101      	bne.n	800efae <__sflush_r+0x76>
 800efaa:	682b      	ldr	r3, [r5, #0]
 800efac:	b903      	cbnz	r3, 800efb0 <__sflush_r+0x78>
 800efae:	6560      	str	r0, [r4, #84]	@ 0x54
 800efb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800efb2:	602f      	str	r7, [r5, #0]
 800efb4:	b1b9      	cbz	r1, 800efe6 <__sflush_r+0xae>
 800efb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800efba:	4299      	cmp	r1, r3
 800efbc:	d002      	beq.n	800efc4 <__sflush_r+0x8c>
 800efbe:	4628      	mov	r0, r5
 800efc0:	f7ff fbec 	bl	800e79c <_free_r>
 800efc4:	2300      	movs	r3, #0
 800efc6:	6363      	str	r3, [r4, #52]	@ 0x34
 800efc8:	e00d      	b.n	800efe6 <__sflush_r+0xae>
 800efca:	2301      	movs	r3, #1
 800efcc:	4628      	mov	r0, r5
 800efce:	47b0      	blx	r6
 800efd0:	4602      	mov	r2, r0
 800efd2:	1c50      	adds	r0, r2, #1
 800efd4:	d1c9      	bne.n	800ef6a <__sflush_r+0x32>
 800efd6:	682b      	ldr	r3, [r5, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d0c6      	beq.n	800ef6a <__sflush_r+0x32>
 800efdc:	2b1d      	cmp	r3, #29
 800efde:	d001      	beq.n	800efe4 <__sflush_r+0xac>
 800efe0:	2b16      	cmp	r3, #22
 800efe2:	d11e      	bne.n	800f022 <__sflush_r+0xea>
 800efe4:	602f      	str	r7, [r5, #0]
 800efe6:	2000      	movs	r0, #0
 800efe8:	e022      	b.n	800f030 <__sflush_r+0xf8>
 800efea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efee:	b21b      	sxth	r3, r3
 800eff0:	e01b      	b.n	800f02a <__sflush_r+0xf2>
 800eff2:	690f      	ldr	r7, [r1, #16]
 800eff4:	2f00      	cmp	r7, #0
 800eff6:	d0f6      	beq.n	800efe6 <__sflush_r+0xae>
 800eff8:	0793      	lsls	r3, r2, #30
 800effa:	680e      	ldr	r6, [r1, #0]
 800effc:	bf08      	it	eq
 800effe:	694b      	ldreq	r3, [r1, #20]
 800f000:	600f      	str	r7, [r1, #0]
 800f002:	bf18      	it	ne
 800f004:	2300      	movne	r3, #0
 800f006:	eba6 0807 	sub.w	r8, r6, r7
 800f00a:	608b      	str	r3, [r1, #8]
 800f00c:	f1b8 0f00 	cmp.w	r8, #0
 800f010:	dde9      	ble.n	800efe6 <__sflush_r+0xae>
 800f012:	6a21      	ldr	r1, [r4, #32]
 800f014:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f016:	4643      	mov	r3, r8
 800f018:	463a      	mov	r2, r7
 800f01a:	4628      	mov	r0, r5
 800f01c:	47b0      	blx	r6
 800f01e:	2800      	cmp	r0, #0
 800f020:	dc08      	bgt.n	800f034 <__sflush_r+0xfc>
 800f022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f02a:	81a3      	strh	r3, [r4, #12]
 800f02c:	f04f 30ff 	mov.w	r0, #4294967295
 800f030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f034:	4407      	add	r7, r0
 800f036:	eba8 0800 	sub.w	r8, r8, r0
 800f03a:	e7e7      	b.n	800f00c <__sflush_r+0xd4>
 800f03c:	20400001 	.word	0x20400001

0800f040 <_fflush_r>:
 800f040:	b538      	push	{r3, r4, r5, lr}
 800f042:	690b      	ldr	r3, [r1, #16]
 800f044:	4605      	mov	r5, r0
 800f046:	460c      	mov	r4, r1
 800f048:	b913      	cbnz	r3, 800f050 <_fflush_r+0x10>
 800f04a:	2500      	movs	r5, #0
 800f04c:	4628      	mov	r0, r5
 800f04e:	bd38      	pop	{r3, r4, r5, pc}
 800f050:	b118      	cbz	r0, 800f05a <_fflush_r+0x1a>
 800f052:	6a03      	ldr	r3, [r0, #32]
 800f054:	b90b      	cbnz	r3, 800f05a <_fflush_r+0x1a>
 800f056:	f7ff fa63 	bl	800e520 <__sinit>
 800f05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d0f3      	beq.n	800f04a <_fflush_r+0xa>
 800f062:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f064:	07d0      	lsls	r0, r2, #31
 800f066:	d404      	bmi.n	800f072 <_fflush_r+0x32>
 800f068:	0599      	lsls	r1, r3, #22
 800f06a:	d402      	bmi.n	800f072 <_fflush_r+0x32>
 800f06c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f06e:	f7ff fb66 	bl	800e73e <__retarget_lock_acquire_recursive>
 800f072:	4628      	mov	r0, r5
 800f074:	4621      	mov	r1, r4
 800f076:	f7ff ff5f 	bl	800ef38 <__sflush_r>
 800f07a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f07c:	07da      	lsls	r2, r3, #31
 800f07e:	4605      	mov	r5, r0
 800f080:	d4e4      	bmi.n	800f04c <_fflush_r+0xc>
 800f082:	89a3      	ldrh	r3, [r4, #12]
 800f084:	059b      	lsls	r3, r3, #22
 800f086:	d4e1      	bmi.n	800f04c <_fflush_r+0xc>
 800f088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f08a:	f7ff fb59 	bl	800e740 <__retarget_lock_release_recursive>
 800f08e:	e7dd      	b.n	800f04c <_fflush_r+0xc>

0800f090 <fiprintf>:
 800f090:	b40e      	push	{r1, r2, r3}
 800f092:	b503      	push	{r0, r1, lr}
 800f094:	4601      	mov	r1, r0
 800f096:	ab03      	add	r3, sp, #12
 800f098:	4805      	ldr	r0, [pc, #20]	@ (800f0b0 <fiprintf+0x20>)
 800f09a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f09e:	6800      	ldr	r0, [r0, #0]
 800f0a0:	9301      	str	r3, [sp, #4]
 800f0a2:	f7ff fca5 	bl	800e9f0 <_vfiprintf_r>
 800f0a6:	b002      	add	sp, #8
 800f0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0ac:	b003      	add	sp, #12
 800f0ae:	4770      	bx	lr
 800f0b0:	20000038 	.word	0x20000038

0800f0b4 <__swbuf_r>:
 800f0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0b6:	460e      	mov	r6, r1
 800f0b8:	4614      	mov	r4, r2
 800f0ba:	4605      	mov	r5, r0
 800f0bc:	b118      	cbz	r0, 800f0c6 <__swbuf_r+0x12>
 800f0be:	6a03      	ldr	r3, [r0, #32]
 800f0c0:	b90b      	cbnz	r3, 800f0c6 <__swbuf_r+0x12>
 800f0c2:	f7ff fa2d 	bl	800e520 <__sinit>
 800f0c6:	69a3      	ldr	r3, [r4, #24]
 800f0c8:	60a3      	str	r3, [r4, #8]
 800f0ca:	89a3      	ldrh	r3, [r4, #12]
 800f0cc:	071a      	lsls	r2, r3, #28
 800f0ce:	d501      	bpl.n	800f0d4 <__swbuf_r+0x20>
 800f0d0:	6923      	ldr	r3, [r4, #16]
 800f0d2:	b943      	cbnz	r3, 800f0e6 <__swbuf_r+0x32>
 800f0d4:	4621      	mov	r1, r4
 800f0d6:	4628      	mov	r0, r5
 800f0d8:	f000 f82a 	bl	800f130 <__swsetup_r>
 800f0dc:	b118      	cbz	r0, 800f0e6 <__swbuf_r+0x32>
 800f0de:	f04f 37ff 	mov.w	r7, #4294967295
 800f0e2:	4638      	mov	r0, r7
 800f0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0e6:	6823      	ldr	r3, [r4, #0]
 800f0e8:	6922      	ldr	r2, [r4, #16]
 800f0ea:	1a98      	subs	r0, r3, r2
 800f0ec:	6963      	ldr	r3, [r4, #20]
 800f0ee:	b2f6      	uxtb	r6, r6
 800f0f0:	4283      	cmp	r3, r0
 800f0f2:	4637      	mov	r7, r6
 800f0f4:	dc05      	bgt.n	800f102 <__swbuf_r+0x4e>
 800f0f6:	4621      	mov	r1, r4
 800f0f8:	4628      	mov	r0, r5
 800f0fa:	f7ff ffa1 	bl	800f040 <_fflush_r>
 800f0fe:	2800      	cmp	r0, #0
 800f100:	d1ed      	bne.n	800f0de <__swbuf_r+0x2a>
 800f102:	68a3      	ldr	r3, [r4, #8]
 800f104:	3b01      	subs	r3, #1
 800f106:	60a3      	str	r3, [r4, #8]
 800f108:	6823      	ldr	r3, [r4, #0]
 800f10a:	1c5a      	adds	r2, r3, #1
 800f10c:	6022      	str	r2, [r4, #0]
 800f10e:	701e      	strb	r6, [r3, #0]
 800f110:	6962      	ldr	r2, [r4, #20]
 800f112:	1c43      	adds	r3, r0, #1
 800f114:	429a      	cmp	r2, r3
 800f116:	d004      	beq.n	800f122 <__swbuf_r+0x6e>
 800f118:	89a3      	ldrh	r3, [r4, #12]
 800f11a:	07db      	lsls	r3, r3, #31
 800f11c:	d5e1      	bpl.n	800f0e2 <__swbuf_r+0x2e>
 800f11e:	2e0a      	cmp	r6, #10
 800f120:	d1df      	bne.n	800f0e2 <__swbuf_r+0x2e>
 800f122:	4621      	mov	r1, r4
 800f124:	4628      	mov	r0, r5
 800f126:	f7ff ff8b 	bl	800f040 <_fflush_r>
 800f12a:	2800      	cmp	r0, #0
 800f12c:	d0d9      	beq.n	800f0e2 <__swbuf_r+0x2e>
 800f12e:	e7d6      	b.n	800f0de <__swbuf_r+0x2a>

0800f130 <__swsetup_r>:
 800f130:	b538      	push	{r3, r4, r5, lr}
 800f132:	4b29      	ldr	r3, [pc, #164]	@ (800f1d8 <__swsetup_r+0xa8>)
 800f134:	4605      	mov	r5, r0
 800f136:	6818      	ldr	r0, [r3, #0]
 800f138:	460c      	mov	r4, r1
 800f13a:	b118      	cbz	r0, 800f144 <__swsetup_r+0x14>
 800f13c:	6a03      	ldr	r3, [r0, #32]
 800f13e:	b90b      	cbnz	r3, 800f144 <__swsetup_r+0x14>
 800f140:	f7ff f9ee 	bl	800e520 <__sinit>
 800f144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f148:	0719      	lsls	r1, r3, #28
 800f14a:	d422      	bmi.n	800f192 <__swsetup_r+0x62>
 800f14c:	06da      	lsls	r2, r3, #27
 800f14e:	d407      	bmi.n	800f160 <__swsetup_r+0x30>
 800f150:	2209      	movs	r2, #9
 800f152:	602a      	str	r2, [r5, #0]
 800f154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f158:	81a3      	strh	r3, [r4, #12]
 800f15a:	f04f 30ff 	mov.w	r0, #4294967295
 800f15e:	e033      	b.n	800f1c8 <__swsetup_r+0x98>
 800f160:	0758      	lsls	r0, r3, #29
 800f162:	d512      	bpl.n	800f18a <__swsetup_r+0x5a>
 800f164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f166:	b141      	cbz	r1, 800f17a <__swsetup_r+0x4a>
 800f168:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f16c:	4299      	cmp	r1, r3
 800f16e:	d002      	beq.n	800f176 <__swsetup_r+0x46>
 800f170:	4628      	mov	r0, r5
 800f172:	f7ff fb13 	bl	800e79c <_free_r>
 800f176:	2300      	movs	r3, #0
 800f178:	6363      	str	r3, [r4, #52]	@ 0x34
 800f17a:	89a3      	ldrh	r3, [r4, #12]
 800f17c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f180:	81a3      	strh	r3, [r4, #12]
 800f182:	2300      	movs	r3, #0
 800f184:	6063      	str	r3, [r4, #4]
 800f186:	6923      	ldr	r3, [r4, #16]
 800f188:	6023      	str	r3, [r4, #0]
 800f18a:	89a3      	ldrh	r3, [r4, #12]
 800f18c:	f043 0308 	orr.w	r3, r3, #8
 800f190:	81a3      	strh	r3, [r4, #12]
 800f192:	6923      	ldr	r3, [r4, #16]
 800f194:	b94b      	cbnz	r3, 800f1aa <__swsetup_r+0x7a>
 800f196:	89a3      	ldrh	r3, [r4, #12]
 800f198:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f19c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1a0:	d003      	beq.n	800f1aa <__swsetup_r+0x7a>
 800f1a2:	4621      	mov	r1, r4
 800f1a4:	4628      	mov	r0, r5
 800f1a6:	f000 f856 	bl	800f256 <__smakebuf_r>
 800f1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1ae:	f013 0201 	ands.w	r2, r3, #1
 800f1b2:	d00a      	beq.n	800f1ca <__swsetup_r+0x9a>
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	60a2      	str	r2, [r4, #8]
 800f1b8:	6962      	ldr	r2, [r4, #20]
 800f1ba:	4252      	negs	r2, r2
 800f1bc:	61a2      	str	r2, [r4, #24]
 800f1be:	6922      	ldr	r2, [r4, #16]
 800f1c0:	b942      	cbnz	r2, 800f1d4 <__swsetup_r+0xa4>
 800f1c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f1c6:	d1c5      	bne.n	800f154 <__swsetup_r+0x24>
 800f1c8:	bd38      	pop	{r3, r4, r5, pc}
 800f1ca:	0799      	lsls	r1, r3, #30
 800f1cc:	bf58      	it	pl
 800f1ce:	6962      	ldrpl	r2, [r4, #20]
 800f1d0:	60a2      	str	r2, [r4, #8]
 800f1d2:	e7f4      	b.n	800f1be <__swsetup_r+0x8e>
 800f1d4:	2000      	movs	r0, #0
 800f1d6:	e7f7      	b.n	800f1c8 <__swsetup_r+0x98>
 800f1d8:	20000038 	.word	0x20000038

0800f1dc <_sbrk_r>:
 800f1dc:	b538      	push	{r3, r4, r5, lr}
 800f1de:	4d06      	ldr	r5, [pc, #24]	@ (800f1f8 <_sbrk_r+0x1c>)
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	4608      	mov	r0, r1
 800f1e6:	602b      	str	r3, [r5, #0]
 800f1e8:	f7f1 fb8a 	bl	8000900 <_sbrk>
 800f1ec:	1c43      	adds	r3, r0, #1
 800f1ee:	d102      	bne.n	800f1f6 <_sbrk_r+0x1a>
 800f1f0:	682b      	ldr	r3, [r5, #0]
 800f1f2:	b103      	cbz	r3, 800f1f6 <_sbrk_r+0x1a>
 800f1f4:	6023      	str	r3, [r4, #0]
 800f1f6:	bd38      	pop	{r3, r4, r5, pc}
 800f1f8:	200084dc 	.word	0x200084dc

0800f1fc <abort>:
 800f1fc:	b508      	push	{r3, lr}
 800f1fe:	2006      	movs	r0, #6
 800f200:	f000 f88e 	bl	800f320 <raise>
 800f204:	2001      	movs	r0, #1
 800f206:	f7f1 fb03 	bl	8000810 <_exit>

0800f20a <__swhatbuf_r>:
 800f20a:	b570      	push	{r4, r5, r6, lr}
 800f20c:	460c      	mov	r4, r1
 800f20e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f212:	2900      	cmp	r1, #0
 800f214:	b096      	sub	sp, #88	@ 0x58
 800f216:	4615      	mov	r5, r2
 800f218:	461e      	mov	r6, r3
 800f21a:	da0d      	bge.n	800f238 <__swhatbuf_r+0x2e>
 800f21c:	89a3      	ldrh	r3, [r4, #12]
 800f21e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f222:	f04f 0100 	mov.w	r1, #0
 800f226:	bf14      	ite	ne
 800f228:	2340      	movne	r3, #64	@ 0x40
 800f22a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f22e:	2000      	movs	r0, #0
 800f230:	6031      	str	r1, [r6, #0]
 800f232:	602b      	str	r3, [r5, #0]
 800f234:	b016      	add	sp, #88	@ 0x58
 800f236:	bd70      	pop	{r4, r5, r6, pc}
 800f238:	466a      	mov	r2, sp
 800f23a:	f000 f879 	bl	800f330 <_fstat_r>
 800f23e:	2800      	cmp	r0, #0
 800f240:	dbec      	blt.n	800f21c <__swhatbuf_r+0x12>
 800f242:	9901      	ldr	r1, [sp, #4]
 800f244:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f248:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f24c:	4259      	negs	r1, r3
 800f24e:	4159      	adcs	r1, r3
 800f250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f254:	e7eb      	b.n	800f22e <__swhatbuf_r+0x24>

0800f256 <__smakebuf_r>:
 800f256:	898b      	ldrh	r3, [r1, #12]
 800f258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f25a:	079d      	lsls	r5, r3, #30
 800f25c:	4606      	mov	r6, r0
 800f25e:	460c      	mov	r4, r1
 800f260:	d507      	bpl.n	800f272 <__smakebuf_r+0x1c>
 800f262:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f266:	6023      	str	r3, [r4, #0]
 800f268:	6123      	str	r3, [r4, #16]
 800f26a:	2301      	movs	r3, #1
 800f26c:	6163      	str	r3, [r4, #20]
 800f26e:	b003      	add	sp, #12
 800f270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f272:	ab01      	add	r3, sp, #4
 800f274:	466a      	mov	r2, sp
 800f276:	f7ff ffc8 	bl	800f20a <__swhatbuf_r>
 800f27a:	9f00      	ldr	r7, [sp, #0]
 800f27c:	4605      	mov	r5, r0
 800f27e:	4639      	mov	r1, r7
 800f280:	4630      	mov	r0, r6
 800f282:	f7ff faff 	bl	800e884 <_malloc_r>
 800f286:	b948      	cbnz	r0, 800f29c <__smakebuf_r+0x46>
 800f288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f28c:	059a      	lsls	r2, r3, #22
 800f28e:	d4ee      	bmi.n	800f26e <__smakebuf_r+0x18>
 800f290:	f023 0303 	bic.w	r3, r3, #3
 800f294:	f043 0302 	orr.w	r3, r3, #2
 800f298:	81a3      	strh	r3, [r4, #12]
 800f29a:	e7e2      	b.n	800f262 <__smakebuf_r+0xc>
 800f29c:	89a3      	ldrh	r3, [r4, #12]
 800f29e:	6020      	str	r0, [r4, #0]
 800f2a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2a4:	81a3      	strh	r3, [r4, #12]
 800f2a6:	9b01      	ldr	r3, [sp, #4]
 800f2a8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f2ac:	b15b      	cbz	r3, 800f2c6 <__smakebuf_r+0x70>
 800f2ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2b2:	4630      	mov	r0, r6
 800f2b4:	f000 f84e 	bl	800f354 <_isatty_r>
 800f2b8:	b128      	cbz	r0, 800f2c6 <__smakebuf_r+0x70>
 800f2ba:	89a3      	ldrh	r3, [r4, #12]
 800f2bc:	f023 0303 	bic.w	r3, r3, #3
 800f2c0:	f043 0301 	orr.w	r3, r3, #1
 800f2c4:	81a3      	strh	r3, [r4, #12]
 800f2c6:	89a3      	ldrh	r3, [r4, #12]
 800f2c8:	431d      	orrs	r5, r3
 800f2ca:	81a5      	strh	r5, [r4, #12]
 800f2cc:	e7cf      	b.n	800f26e <__smakebuf_r+0x18>

0800f2ce <_raise_r>:
 800f2ce:	291f      	cmp	r1, #31
 800f2d0:	b538      	push	{r3, r4, r5, lr}
 800f2d2:	4605      	mov	r5, r0
 800f2d4:	460c      	mov	r4, r1
 800f2d6:	d904      	bls.n	800f2e2 <_raise_r+0x14>
 800f2d8:	2316      	movs	r3, #22
 800f2da:	6003      	str	r3, [r0, #0]
 800f2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f2e0:	bd38      	pop	{r3, r4, r5, pc}
 800f2e2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f2e4:	b112      	cbz	r2, 800f2ec <_raise_r+0x1e>
 800f2e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2ea:	b94b      	cbnz	r3, 800f300 <_raise_r+0x32>
 800f2ec:	4628      	mov	r0, r5
 800f2ee:	f000 f853 	bl	800f398 <_getpid_r>
 800f2f2:	4622      	mov	r2, r4
 800f2f4:	4601      	mov	r1, r0
 800f2f6:	4628      	mov	r0, r5
 800f2f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2fc:	f000 b83a 	b.w	800f374 <_kill_r>
 800f300:	2b01      	cmp	r3, #1
 800f302:	d00a      	beq.n	800f31a <_raise_r+0x4c>
 800f304:	1c59      	adds	r1, r3, #1
 800f306:	d103      	bne.n	800f310 <_raise_r+0x42>
 800f308:	2316      	movs	r3, #22
 800f30a:	6003      	str	r3, [r0, #0]
 800f30c:	2001      	movs	r0, #1
 800f30e:	e7e7      	b.n	800f2e0 <_raise_r+0x12>
 800f310:	2100      	movs	r1, #0
 800f312:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f316:	4620      	mov	r0, r4
 800f318:	4798      	blx	r3
 800f31a:	2000      	movs	r0, #0
 800f31c:	e7e0      	b.n	800f2e0 <_raise_r+0x12>
	...

0800f320 <raise>:
 800f320:	4b02      	ldr	r3, [pc, #8]	@ (800f32c <raise+0xc>)
 800f322:	4601      	mov	r1, r0
 800f324:	6818      	ldr	r0, [r3, #0]
 800f326:	f7ff bfd2 	b.w	800f2ce <_raise_r>
 800f32a:	bf00      	nop
 800f32c:	20000038 	.word	0x20000038

0800f330 <_fstat_r>:
 800f330:	b538      	push	{r3, r4, r5, lr}
 800f332:	4d07      	ldr	r5, [pc, #28]	@ (800f350 <_fstat_r+0x20>)
 800f334:	2300      	movs	r3, #0
 800f336:	4604      	mov	r4, r0
 800f338:	4608      	mov	r0, r1
 800f33a:	4611      	mov	r1, r2
 800f33c:	602b      	str	r3, [r5, #0]
 800f33e:	f7f1 fab7 	bl	80008b0 <_fstat>
 800f342:	1c43      	adds	r3, r0, #1
 800f344:	d102      	bne.n	800f34c <_fstat_r+0x1c>
 800f346:	682b      	ldr	r3, [r5, #0]
 800f348:	b103      	cbz	r3, 800f34c <_fstat_r+0x1c>
 800f34a:	6023      	str	r3, [r4, #0]
 800f34c:	bd38      	pop	{r3, r4, r5, pc}
 800f34e:	bf00      	nop
 800f350:	200084dc 	.word	0x200084dc

0800f354 <_isatty_r>:
 800f354:	b538      	push	{r3, r4, r5, lr}
 800f356:	4d06      	ldr	r5, [pc, #24]	@ (800f370 <_isatty_r+0x1c>)
 800f358:	2300      	movs	r3, #0
 800f35a:	4604      	mov	r4, r0
 800f35c:	4608      	mov	r0, r1
 800f35e:	602b      	str	r3, [r5, #0]
 800f360:	f7f1 fab6 	bl	80008d0 <_isatty>
 800f364:	1c43      	adds	r3, r0, #1
 800f366:	d102      	bne.n	800f36e <_isatty_r+0x1a>
 800f368:	682b      	ldr	r3, [r5, #0]
 800f36a:	b103      	cbz	r3, 800f36e <_isatty_r+0x1a>
 800f36c:	6023      	str	r3, [r4, #0]
 800f36e:	bd38      	pop	{r3, r4, r5, pc}
 800f370:	200084dc 	.word	0x200084dc

0800f374 <_kill_r>:
 800f374:	b538      	push	{r3, r4, r5, lr}
 800f376:	4d07      	ldr	r5, [pc, #28]	@ (800f394 <_kill_r+0x20>)
 800f378:	2300      	movs	r3, #0
 800f37a:	4604      	mov	r4, r0
 800f37c:	4608      	mov	r0, r1
 800f37e:	4611      	mov	r1, r2
 800f380:	602b      	str	r3, [r5, #0]
 800f382:	f7f1 fa33 	bl	80007ec <_kill>
 800f386:	1c43      	adds	r3, r0, #1
 800f388:	d102      	bne.n	800f390 <_kill_r+0x1c>
 800f38a:	682b      	ldr	r3, [r5, #0]
 800f38c:	b103      	cbz	r3, 800f390 <_kill_r+0x1c>
 800f38e:	6023      	str	r3, [r4, #0]
 800f390:	bd38      	pop	{r3, r4, r5, pc}
 800f392:	bf00      	nop
 800f394:	200084dc 	.word	0x200084dc

0800f398 <_getpid_r>:
 800f398:	f7f1 ba1f 	b.w	80007da <_getpid>

0800f39c <_init>:
 800f39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f39e:	bf00      	nop
 800f3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3a2:	bc08      	pop	{r3}
 800f3a4:	469e      	mov	lr, r3
 800f3a6:	4770      	bx	lr

0800f3a8 <_fini>:
 800f3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3aa:	bf00      	nop
 800f3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ae:	bc08      	pop	{r3}
 800f3b0:	469e      	mov	lr, r3
 800f3b2:	4770      	bx	lr
