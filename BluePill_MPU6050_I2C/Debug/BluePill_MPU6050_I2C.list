
BluePill_MPU6050_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f40  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08006050  08006050  00007050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006100  08006100  000080ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006100  08006100  000080ec  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006100  08006100  000080ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006100  08006100  00007100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006104  08006104  00007104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ec  20000000  08006108  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200000f0  080061f4  000080f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  080061f4  00008320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000080ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000077cc  00000000  00000000  00008115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017fe  00000000  00000000  0000f8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  000110e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ce  00000000  00000000  00011870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ca3  00000000  00000000  00011e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a377  00000000  00000000  00028ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008257a  00000000  00000000  00032e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b53d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000231c  00000000  00000000  000b5418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000b7734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000f0 	.word	0x200000f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006038 	.word	0x08006038

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000f4 	.word	0x200000f4
 800014c:	08006038 	.word	0x08006038

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_frsub>:
 8000a28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a2c:	e002      	b.n	8000a34 <__addsf3>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_fsub>:
 8000a30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a34 <__addsf3>:
 8000a34:	0042      	lsls	r2, r0, #1
 8000a36:	bf1f      	itttt	ne
 8000a38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a3c:	ea92 0f03 	teqne	r2, r3
 8000a40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a48:	d06a      	beq.n	8000b20 <__addsf3+0xec>
 8000a4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a52:	bfc1      	itttt	gt
 8000a54:	18d2      	addgt	r2, r2, r3
 8000a56:	4041      	eorgt	r1, r0
 8000a58:	4048      	eorgt	r0, r1
 8000a5a:	4041      	eorgt	r1, r0
 8000a5c:	bfb8      	it	lt
 8000a5e:	425b      	neglt	r3, r3
 8000a60:	2b19      	cmp	r3, #25
 8000a62:	bf88      	it	hi
 8000a64:	4770      	bxhi	lr
 8000a66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a72:	bf18      	it	ne
 8000a74:	4240      	negne	r0, r0
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a82:	bf18      	it	ne
 8000a84:	4249      	negne	r1, r1
 8000a86:	ea92 0f03 	teq	r2, r3
 8000a8a:	d03f      	beq.n	8000b0c <__addsf3+0xd8>
 8000a8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a90:	fa41 fc03 	asr.w	ip, r1, r3
 8000a94:	eb10 000c 	adds.w	r0, r0, ip
 8000a98:	f1c3 0320 	rsb	r3, r3, #32
 8000a9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000aa0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000aa4:	d502      	bpl.n	8000aac <__addsf3+0x78>
 8000aa6:	4249      	negs	r1, r1
 8000aa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ab0:	d313      	bcc.n	8000ada <__addsf3+0xa6>
 8000ab2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ab6:	d306      	bcc.n	8000ac6 <__addsf3+0x92>
 8000ab8:	0840      	lsrs	r0, r0, #1
 8000aba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000abe:	f102 0201 	add.w	r2, r2, #1
 8000ac2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ac4:	d251      	bcs.n	8000b6a <__addsf3+0x136>
 8000ac6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000aca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ace:	bf08      	it	eq
 8000ad0:	f020 0001 	biceq.w	r0, r0, #1
 8000ad4:	ea40 0003 	orr.w	r0, r0, r3
 8000ad8:	4770      	bx	lr
 8000ada:	0049      	lsls	r1, r1, #1
 8000adc:	eb40 0000 	adc.w	r0, r0, r0
 8000ae0:	3a01      	subs	r2, #1
 8000ae2:	bf28      	it	cs
 8000ae4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000ae8:	d2ed      	bcs.n	8000ac6 <__addsf3+0x92>
 8000aea:	fab0 fc80 	clz	ip, r0
 8000aee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000af2:	ebb2 020c 	subs.w	r2, r2, ip
 8000af6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000afa:	bfaa      	itet	ge
 8000afc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b00:	4252      	neglt	r2, r2
 8000b02:	4318      	orrge	r0, r3
 8000b04:	bfbc      	itt	lt
 8000b06:	40d0      	lsrlt	r0, r2
 8000b08:	4318      	orrlt	r0, r3
 8000b0a:	4770      	bx	lr
 8000b0c:	f092 0f00 	teq	r2, #0
 8000b10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b14:	bf06      	itte	eq
 8000b16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b1a:	3201      	addeq	r2, #1
 8000b1c:	3b01      	subne	r3, #1
 8000b1e:	e7b5      	b.n	8000a8c <__addsf3+0x58>
 8000b20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b28:	bf18      	it	ne
 8000b2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b2e:	d021      	beq.n	8000b74 <__addsf3+0x140>
 8000b30:	ea92 0f03 	teq	r2, r3
 8000b34:	d004      	beq.n	8000b40 <__addsf3+0x10c>
 8000b36:	f092 0f00 	teq	r2, #0
 8000b3a:	bf08      	it	eq
 8000b3c:	4608      	moveq	r0, r1
 8000b3e:	4770      	bx	lr
 8000b40:	ea90 0f01 	teq	r0, r1
 8000b44:	bf1c      	itt	ne
 8000b46:	2000      	movne	r0, #0
 8000b48:	4770      	bxne	lr
 8000b4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b4e:	d104      	bne.n	8000b5a <__addsf3+0x126>
 8000b50:	0040      	lsls	r0, r0, #1
 8000b52:	bf28      	it	cs
 8000b54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b58:	4770      	bx	lr
 8000b5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b5e:	bf3c      	itt	cc
 8000b60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bxcc	lr
 8000b66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b72:	4770      	bx	lr
 8000b74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b78:	bf16      	itet	ne
 8000b7a:	4608      	movne	r0, r1
 8000b7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b80:	4601      	movne	r1, r0
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	bf06      	itte	eq
 8000b86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b8a:	ea90 0f01 	teqeq	r0, r1
 8000b8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b92:	4770      	bx	lr

08000b94 <__aeabi_ui2f>:
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e004      	b.n	8000ba4 <__aeabi_i2f+0x8>
 8000b9a:	bf00      	nop

08000b9c <__aeabi_i2f>:
 8000b9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ba0:	bf48      	it	mi
 8000ba2:	4240      	negmi	r0, r0
 8000ba4:	ea5f 0c00 	movs.w	ip, r0
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000bb0:	4601      	mov	r1, r0
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	e01c      	b.n	8000bf2 <__aeabi_l2f+0x2a>

08000bb8 <__aeabi_ul2f>:
 8000bb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bbc:	bf08      	it	eq
 8000bbe:	4770      	bxeq	lr
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e00a      	b.n	8000bdc <__aeabi_l2f+0x14>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_l2f>:
 8000bc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__aeabi_l2f+0x14>
 8000bd6:	4240      	negs	r0, r0
 8000bd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bdc:	ea5f 0c01 	movs.w	ip, r1
 8000be0:	bf02      	ittt	eq
 8000be2:	4684      	moveq	ip, r0
 8000be4:	4601      	moveq	r1, r0
 8000be6:	2000      	moveq	r0, #0
 8000be8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000bec:	bf08      	it	eq
 8000bee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000bf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000bf6:	fabc f28c 	clz	r2, ip
 8000bfa:	3a08      	subs	r2, #8
 8000bfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c00:	db10      	blt.n	8000c24 <__aeabi_l2f+0x5c>
 8000c02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c06:	4463      	add	r3, ip
 8000c08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0c:	f1c2 0220 	rsb	r2, r2, #32
 8000c10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c14:	fa20 f202 	lsr.w	r2, r0, r2
 8000c18:	eb43 0002 	adc.w	r0, r3, r2
 8000c1c:	bf08      	it	eq
 8000c1e:	f020 0001 	biceq.w	r0, r0, #1
 8000c22:	4770      	bx	lr
 8000c24:	f102 0220 	add.w	r2, r2, #32
 8000c28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2c:	f1c2 0220 	rsb	r2, r2, #32
 8000c30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c34:	fa21 f202 	lsr.w	r2, r1, r2
 8000c38:	eb43 0002 	adc.w	r0, r3, r2
 8000c3c:	bf08      	it	eq
 8000c3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_fmul>:
 8000c44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c52:	ea92 0f0c 	teqne	r2, ip
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d06f      	beq.n	8000d3c <__aeabi_fmul+0xf8>
 8000c5c:	441a      	add	r2, r3
 8000c5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c62:	0240      	lsls	r0, r0, #9
 8000c64:	bf18      	it	ne
 8000c66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c6a:	d01e      	beq.n	8000caa <__aeabi_fmul+0x66>
 8000c6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c78:	fba0 3101 	umull	r3, r1, r0, r1
 8000c7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c84:	bf3e      	ittt	cc
 8000c86:	0049      	lslcc	r1, r1, #1
 8000c88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c8c:	005b      	lslcc	r3, r3, #1
 8000c8e:	ea40 0001 	orr.w	r0, r0, r1
 8000c92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c96:	2afd      	cmp	r2, #253	@ 0xfd
 8000c98:	d81d      	bhi.n	8000cd6 <__aeabi_fmul+0x92>
 8000c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca2:	bf08      	it	eq
 8000ca4:	f020 0001 	biceq.w	r0, r0, #1
 8000ca8:	4770      	bx	lr
 8000caa:	f090 0f00 	teq	r0, #0
 8000cae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000cb2:	bf08      	it	eq
 8000cb4:	0249      	lsleq	r1, r1, #9
 8000cb6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000cc0:	bfc2      	ittt	gt
 8000cc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000cc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cca:	4770      	bxgt	lr
 8000ccc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	dc5d      	bgt.n	8000d94 <__aeabi_fmul+0x150>
 8000cd8:	f112 0f19 	cmn.w	r2, #25
 8000cdc:	bfdc      	itt	le
 8000cde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000ce2:	4770      	bxle	lr
 8000ce4:	f1c2 0200 	rsb	r2, r2, #0
 8000ce8:	0041      	lsls	r1, r0, #1
 8000cea:	fa21 f102 	lsr.w	r1, r1, r2
 8000cee:	f1c2 0220 	rsb	r2, r2, #32
 8000cf2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cfa:	f140 0000 	adc.w	r0, r0, #0
 8000cfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d02:	bf08      	it	eq
 8000d04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d08:	4770      	bx	lr
 8000d0a:	f092 0f00 	teq	r2, #0
 8000d0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d12:	bf02      	ittt	eq
 8000d14:	0040      	lsleq	r0, r0, #1
 8000d16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d1a:	3a01      	subeq	r2, #1
 8000d1c:	d0f9      	beq.n	8000d12 <__aeabi_fmul+0xce>
 8000d1e:	ea40 000c 	orr.w	r0, r0, ip
 8000d22:	f093 0f00 	teq	r3, #0
 8000d26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d2a:	bf02      	ittt	eq
 8000d2c:	0049      	lsleq	r1, r1, #1
 8000d2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d32:	3b01      	subeq	r3, #1
 8000d34:	d0f9      	beq.n	8000d2a <__aeabi_fmul+0xe6>
 8000d36:	ea41 010c 	orr.w	r1, r1, ip
 8000d3a:	e78f      	b.n	8000c5c <__aeabi_fmul+0x18>
 8000d3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d40:	ea92 0f0c 	teq	r2, ip
 8000d44:	bf18      	it	ne
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d00a      	beq.n	8000d62 <__aeabi_fmul+0x11e>
 8000d4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d50:	bf18      	it	ne
 8000d52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d56:	d1d8      	bne.n	8000d0a <__aeabi_fmul+0xc6>
 8000d58:	ea80 0001 	eor.w	r0, r0, r1
 8000d5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f090 0f00 	teq	r0, #0
 8000d66:	bf17      	itett	ne
 8000d68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	f091 0f00 	teqne	r1, #0
 8000d72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d76:	d014      	beq.n	8000da2 <__aeabi_fmul+0x15e>
 8000d78:	ea92 0f0c 	teq	r2, ip
 8000d7c:	d101      	bne.n	8000d82 <__aeabi_fmul+0x13e>
 8000d7e:	0242      	lsls	r2, r0, #9
 8000d80:	d10f      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d82:	ea93 0f0c 	teq	r3, ip
 8000d86:	d103      	bne.n	8000d90 <__aeabi_fmul+0x14c>
 8000d88:	024b      	lsls	r3, r1, #9
 8000d8a:	bf18      	it	ne
 8000d8c:	4608      	movne	r0, r1
 8000d8e:	d108      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d90:	ea80 0001 	eor.w	r0, r0, r1
 8000d94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000da0:	4770      	bx	lr
 8000da2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000da6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_fdiv>:
 8000dac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000db0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000db4:	bf1e      	ittt	ne
 8000db6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dba:	ea92 0f0c 	teqne	r2, ip
 8000dbe:	ea93 0f0c 	teqne	r3, ip
 8000dc2:	d069      	beq.n	8000e98 <__aeabi_fdiv+0xec>
 8000dc4:	eba2 0203 	sub.w	r2, r2, r3
 8000dc8:	ea80 0c01 	eor.w	ip, r0, r1
 8000dcc:	0249      	lsls	r1, r1, #9
 8000dce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dd2:	d037      	beq.n	8000e44 <__aeabi_fdiv+0x98>
 8000dd4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000dd8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ddc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000de0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000de4:	428b      	cmp	r3, r1
 8000de6:	bf38      	it	cc
 8000de8:	005b      	lslcc	r3, r3, #1
 8000dea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000dee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000df2:	428b      	cmp	r3, r1
 8000df4:	bf24      	itt	cs
 8000df6:	1a5b      	subcs	r3, r3, r1
 8000df8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dfc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e00:	bf24      	itt	cs
 8000e02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e0e:	bf24      	itt	cs
 8000e10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e1c:	bf24      	itt	cs
 8000e1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	bf18      	it	ne
 8000e2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e2e:	d1e0      	bne.n	8000df2 <__aeabi_fdiv+0x46>
 8000e30:	2afd      	cmp	r2, #253	@ 0xfd
 8000e32:	f63f af50 	bhi.w	8000cd6 <__aeabi_fmul+0x92>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e4c:	327f      	adds	r2, #127	@ 0x7f
 8000e4e:	bfc2      	ittt	gt
 8000e50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e58:	4770      	bxgt	lr
 8000e5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	3a01      	subs	r2, #1
 8000e64:	e737      	b.n	8000cd6 <__aeabi_fmul+0x92>
 8000e66:	f092 0f00 	teq	r2, #0
 8000e6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e6e:	bf02      	ittt	eq
 8000e70:	0040      	lsleq	r0, r0, #1
 8000e72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e76:	3a01      	subeq	r2, #1
 8000e78:	d0f9      	beq.n	8000e6e <__aeabi_fdiv+0xc2>
 8000e7a:	ea40 000c 	orr.w	r0, r0, ip
 8000e7e:	f093 0f00 	teq	r3, #0
 8000e82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	bf02      	ittt	eq
 8000e88:	0049      	lsleq	r1, r1, #1
 8000e8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e8e:	3b01      	subeq	r3, #1
 8000e90:	d0f9      	beq.n	8000e86 <__aeabi_fdiv+0xda>
 8000e92:	ea41 010c 	orr.w	r1, r1, ip
 8000e96:	e795      	b.n	8000dc4 <__aeabi_fdiv+0x18>
 8000e98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e9c:	ea92 0f0c 	teq	r2, ip
 8000ea0:	d108      	bne.n	8000eb4 <__aeabi_fdiv+0x108>
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	f47f af7d 	bne.w	8000da2 <__aeabi_fmul+0x15e>
 8000ea8:	ea93 0f0c 	teq	r3, ip
 8000eac:	f47f af70 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e776      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000eb4:	ea93 0f0c 	teq	r3, ip
 8000eb8:	d104      	bne.n	8000ec4 <__aeabi_fdiv+0x118>
 8000eba:	024b      	lsls	r3, r1, #9
 8000ebc:	f43f af4c 	beq.w	8000d58 <__aeabi_fmul+0x114>
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e76e      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ece:	d1ca      	bne.n	8000e66 <__aeabi_fdiv+0xba>
 8000ed0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ed4:	f47f af5c 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000ed8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000edc:	f47f af3c 	bne.w	8000d58 <__aeabi_fmul+0x114>
 8000ee0:	e75f      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f000 ffeb 	bl	8001ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f823 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 f895 	bl	8001020 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ef6:	f000 f865 	bl	8000fc4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&hi2c1);
 8000efa:	480c      	ldr	r0, [pc, #48]	@ (8000f2c <main+0x48>)
 8000efc:	f000 f8ee 	bl	80010dc <MPU6050_Init>
  MPU6050_Calibration_offset(&hi2c1, &MPU6500);
 8000f00:	490b      	ldr	r1, [pc, #44]	@ (8000f30 <main+0x4c>)
 8000f02:	480a      	ldr	r0, [pc, #40]	@ (8000f2c <main+0x48>)
 8000f04:	f000 fcf8 	bl	80018f8 <MPU6050_Calibration_offset>
  DWT_Init();
 8000f08:	f000 feaa 	bl	8001c60 <DWT_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  uint32_t time_start = DWT_GetMicros();
 8000f0c:	f000 fec2 	bl	8001c94 <DWT_GetMicros>
 8000f10:	6078      	str	r0, [r7, #4]
	  MPU6050_Read_WithKalman(&hi2c1, &MPU6500, time_start);
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	4906      	ldr	r1, [pc, #24]	@ (8000f30 <main+0x4c>)
 8000f16:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <main+0x48>)
 8000f18:	f000 fa9e 	bl	8001458 <MPU6050_Read_WithKalman>
	  time_elapsed = DWT_GetDeltaMicros(time_start);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 fecf 	bl	8001cc0 <DWT_GetDeltaMicros>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a03      	ldr	r2, [pc, #12]	@ (8000f34 <main+0x50>)
 8000f26:	6013      	str	r3, [r2, #0]
  {
 8000f28:	bf00      	nop
 8000f2a:	e7ef      	b.n	8000f0c <main+0x28>
 8000f2c:	2000010c 	.word	0x2000010c
 8000f30:	20000160 	.word	0x20000160
 8000f34:	200001d0 	.word	0x200001d0

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b090      	sub	sp, #64	@ 0x40
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0318 	add.w	r3, r7, #24
 8000f42:	2228      	movs	r2, #40	@ 0x28
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f004 fce2 	bl	8005910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f74:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f76:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7c:	f107 0318 	add.w	r3, r7, #24
 8000f80:	4618      	mov	r0, r3
 8000f82:	f004 f8c9 	bl	8005118 <HAL_RCC_OscConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f8c:	f000 f8a0 	bl	80010d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f90:	230f      	movs	r3, #15
 8000f92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f94:	2302      	movs	r3, #2
 8000f96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2102      	movs	r1, #2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f004 fb36 	bl	800561c <HAL_RCC_ClockConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fb6:	f000 f88b 	bl	80010d0 <Error_Handler>
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3740      	adds	r7, #64	@ 0x40
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fca:	4a13      	ldr	r2, [pc, #76]	@ (8001018 <MX_I2C1_Init+0x54>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fce:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fd0:	4a12      	ldr	r2, [pc, #72]	@ (800101c <MX_I2C1_Init+0x58>)
 8000fd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fe2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fe6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_I2C1_Init+0x50>)
 8001002:	f001 fb15 	bl	8002630 <HAL_I2C_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800100c:	f000 f860 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000010c 	.word	0x2000010c
 8001018:	40005400 	.word	0x40005400
 800101c:	00061a80 	.word	0x00061a80

08001020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001034:	4b24      	ldr	r3, [pc, #144]	@ (80010c8 <MX_GPIO_Init+0xa8>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a23      	ldr	r2, [pc, #140]	@ (80010c8 <MX_GPIO_Init+0xa8>)
 800103a:	f043 0310 	orr.w	r3, r3, #16
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b21      	ldr	r3, [pc, #132]	@ (80010c8 <MX_GPIO_Init+0xa8>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0310 	and.w	r3, r3, #16
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800104c:	4b1e      	ldr	r3, [pc, #120]	@ (80010c8 <MX_GPIO_Init+0xa8>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a1d      	ldr	r2, [pc, #116]	@ (80010c8 <MX_GPIO_Init+0xa8>)
 8001052:	f043 0320 	orr.w	r3, r3, #32
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <MX_GPIO_Init+0xa8>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0320 	and.w	r3, r3, #32
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <MX_GPIO_Init+0xa8>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a17      	ldr	r2, [pc, #92]	@ (80010c8 <MX_GPIO_Init+0xa8>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <MX_GPIO_Init+0xa8>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <MX_GPIO_Init+0xa8>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a11      	ldr	r2, [pc, #68]	@ (80010c8 <MX_GPIO_Init+0xa8>)
 8001082:	f043 0308 	orr.w	r3, r3, #8
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_GPIO_Init+0xa8>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800109a:	480c      	ldr	r0, [pc, #48]	@ (80010cc <MX_GPIO_Init+0xac>)
 800109c:	f001 fab0 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2302      	movs	r3, #2
 80010b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	4619      	mov	r1, r3
 80010b8:	4804      	ldr	r0, [pc, #16]	@ (80010cc <MX_GPIO_Init+0xac>)
 80010ba:	f001 f91d 	bl	80022f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010be:	bf00      	nop
 80010c0:	3720      	adds	r7, #32
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40011000 	.word	0x40011000

080010d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d4:	b672      	cpsid	i
}
 80010d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <Error_Handler+0x8>

080010dc <MPU6050_Init>:

uint8_t Rec_Data[14];

volatile double dt_g = 0.0f;

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af04      	add	r7, sp, #16
 80010e2:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, I2C_TIMEOUT);
 80010e4:	2332      	movs	r3, #50	@ 0x32
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2301      	movs	r3, #1
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	f107 030e 	add.w	r3, r7, #14
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2301      	movs	r3, #1
 80010f4:	2275      	movs	r2, #117	@ 0x75
 80010f6:	21d0      	movs	r1, #208	@ 0xd0
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f001 fceb 	bl	8002ad4 <HAL_I2C_Mem_Read>
 80010fe:	4603      	mov	r3, r0
 8001100:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
    {
    	// hata dondur
	}

    if (check == 104 && status == HAL_OK)  // 0x68 will be returned by the sensor if everything goes well 104
 8001102:	7bbb      	ldrb	r3, [r7, #14]
 8001104:	2b68      	cmp	r3, #104	@ 0x68
 8001106:	d14f      	bne.n	80011a8 <MPU6050_Init+0xcc>
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d14c      	bne.n	80011a8 <MPU6050_Init+0xcc>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, I2C_TIMEOUT);
 8001112:	2332      	movs	r3, #50	@ 0x32
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	2301      	movs	r3, #1
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	f107 030d 	add.w	r3, r7, #13
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	226b      	movs	r2, #107	@ 0x6b
 8001124:	21d0      	movs	r1, #208	@ 0xd0
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f001 fbda 	bl	80028e0 <HAL_I2C_Mem_Write>

        // DLP settings
        Data = 0x00;
 800112c:	2300      	movs	r3, #0
 800112e:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x1A, 1, &Data, 1, I2C_TIMEOUT);
 8001130:	2332      	movs	r3, #50	@ 0x32
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	2301      	movs	r3, #1
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	f107 030d 	add.w	r3, r7, #13
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2301      	movs	r3, #1
 8001140:	221a      	movs	r2, #26
 8001142:	21d0      	movs	r1, #208	@ 0xd0
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f001 fbcb 	bl	80028e0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x00;
 800114a:	2300      	movs	r3, #0
 800114c:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, I2C_TIMEOUT);
 800114e:	2332      	movs	r3, #50	@ 0x32
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	f107 030d 	add.w	r3, r7, #13
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	2219      	movs	r2, #25
 8001160:	21d0      	movs	r1, #208	@ 0xd0
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f001 fbbc 	bl	80028e0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> 2g
        Data = 0x00;
 8001168:	2300      	movs	r3, #0
 800116a:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, I2C_TIMEOUT);
 800116c:	2332      	movs	r3, #50	@ 0x32
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	2301      	movs	r3, #1
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	f107 030d 	add.w	r3, r7, #13
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	221c      	movs	r2, #28
 800117e:	21d0      	movs	r1, #208	@ 0xd0
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f001 fbad 	bl	80028e0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> 250 degree/s
        Data = 0x00;
 8001186:	2300      	movs	r3, #0
 8001188:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, I2C_TIMEOUT);
 800118a:	2332      	movs	r3, #50	@ 0x32
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2301      	movs	r3, #1
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	f107 030d 	add.w	r3, r7, #13
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	221b      	movs	r2, #27
 800119c:	21d0      	movs	r1, #208	@ 0xd0
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f001 fb9e 	bl	80028e0 <HAL_I2C_Mem_Write>
        return 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	e000      	b.n	80011aa <MPU6050_Init+0xce>
    }
    return check;
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80011b2:	b5b0      	push	{r4, r5, r7, lr}
 80011b4:	b092      	sub	sp, #72	@ 0x48
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80011c4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80011c8:	f7fe ffc6 	bl	8000158 <__aeabi_dsub>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += dt * rate;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80011da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80011de:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80011e2:	f7ff f971 	bl	80004c8 <__aeabi_dmul>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4620      	mov	r0, r4
 80011ec:	4629      	mov	r1, r5
 80011ee:	f7fe ffb5 	bl	800015c <__adddf3>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	68f9      	ldr	r1, [r7, #12]
 80011f8:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001208:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800120c:	f7ff f95c 	bl	80004c8 <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800121e:	f7fe ff9b 	bl	8000158 <__aeabi_dsub>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001230:	f7fe ff92 	bl	8000158 <__aeabi_dsub>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7fe ff8b 	bl	800015c <__adddf3>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001252:	f7ff f939 	bl	80004c8 <__aeabi_dmul>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4620      	mov	r0, r4
 800125c:	4629      	mov	r1, r5
 800125e:	f7fe ff7d 	bl	800015c <__adddf3>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	68f9      	ldr	r1, [r7, #12]
 8001268:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001278:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800127c:	f7ff f924 	bl	80004c8 <__aeabi_dmul>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4620      	mov	r0, r4
 8001286:	4629      	mov	r1, r5
 8001288:	f7fe ff66 	bl	8000158 <__aeabi_dsub>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	68f9      	ldr	r1, [r7, #12]
 8001292:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80012a2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80012a6:	f7ff f90f 	bl	80004c8 <__aeabi_dmul>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4620      	mov	r0, r4
 80012b0:	4629      	mov	r1, r5
 80012b2:	f7fe ff51 	bl	8000158 <__aeabi_dsub>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	68f9      	ldr	r1, [r7, #12]
 80012bc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80012cc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80012d0:	f7ff f8fa 	bl	80004c8 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4620      	mov	r0, r4
 80012da:	4629      	mov	r1, r5
 80012dc:	f7fe ff3e 	bl	800015c <__adddf3>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	68f9      	ldr	r1, [r7, #12]
 80012e6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80012f6:	f7fe ff31 	bl	800015c <__adddf3>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001308:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800130c:	f7ff fa06 	bl	800071c <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800131e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001322:	f7ff f9fb 	bl	800071c <__aeabi_ddiv>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001334:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001338:	f7fe ff0e 	bl	8000158 <__aeabi_dsub>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Kalman->angle += K[0] * y;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800134a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800134e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001352:	f7ff f8b9 	bl	80004c8 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4620      	mov	r0, r4
 800135c:	4629      	mov	r1, r5
 800135e:	f7fe fefd 	bl	800015c <__adddf3>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	68f9      	ldr	r1, [r7, #12]
 8001368:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001372:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001376:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800137a:	f7ff f8a5 	bl	80004c8 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4620      	mov	r0, r4
 8001384:	4629      	mov	r1, r5
 8001386:	f7fe fee9 	bl	800015c <__adddf3>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	68f9      	ldr	r1, [r7, #12]
 8001390:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800139a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double P01_temp = Kalman->P[0][1];
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80013a4:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80013ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80013b6:	f7ff f887 	bl	80004c8 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4620      	mov	r0, r4
 80013c0:	4629      	mov	r1, r5
 80013c2:	f7fe fec9 	bl	8000158 <__aeabi_dsub>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	68f9      	ldr	r1, [r7, #12]
 80013cc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80013d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013de:	f7ff f873 	bl	80004c8 <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4620      	mov	r0, r4
 80013e8:	4629      	mov	r1, r5
 80013ea:	f7fe feb5 	bl	8000158 <__aeabi_dsub>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	68f9      	ldr	r1, [r7, #12]
 80013f4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80013fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001402:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001406:	f7ff f85f 	bl	80004c8 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4620      	mov	r0, r4
 8001410:	4629      	mov	r1, r5
 8001412:	f7fe fea1 	bl	8000158 <__aeabi_dsub>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	68f9      	ldr	r1, [r7, #12]
 800141c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001426:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800142a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800142e:	f7ff f84b 	bl	80004c8 <__aeabi_dmul>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f7fe fe8d 	bl	8000158 <__aeabi_dsub>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	68f9      	ldr	r1, [r7, #12]
 8001444:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	3748      	adds	r7, #72	@ 0x48
 8001454:	46bd      	mov	sp, r7
 8001456:	bdb0      	pop	{r4, r5, r7, pc}

08001458 <MPU6050_Read_WithKalman>:


void MPU6050_Read_WithKalman(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct, uint32_t zaman)
{
 8001458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800145c:	b094      	sub	sp, #80	@ 0x50
 800145e:	af04      	add	r7, sp, #16
 8001460:	61f8      	str	r0, [r7, #28]
 8001462:	61b9      	str	r1, [r7, #24]
 8001464:	617a      	str	r2, [r7, #20]

    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, (uint8_t *)Rec_Data, 14, I2C_TIMEOUT);
 8001466:	2332      	movs	r3, #50	@ 0x32
 8001468:	9302      	str	r3, [sp, #8]
 800146a:	230e      	movs	r3, #14
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	4ba8      	ldr	r3, [pc, #672]	@ (8001710 <MPU6050_Read_WithKalman+0x2b8>)
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2301      	movs	r3, #1
 8001474:	223b      	movs	r2, #59	@ 0x3b
 8001476:	21d0      	movs	r1, #208	@ 0xd0
 8001478:	69f8      	ldr	r0, [r7, #28]
 800147a:	f001 fb2b 	bl	8002ad4 <HAL_I2C_Mem_Read>
 800147e:	4603      	mov	r3, r0
 8001480:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (status != HAL_OK)
    {
    	// hata dondur
	}

    DataStruct->Accel_X_RAW = ((int16_t)(Rec_Data[0] << 8 | Rec_Data[1])) - DataStruct->Accel_X_RAW_K;
 8001484:	4ba2      	ldr	r3, [pc, #648]	@ (8001710 <MPU6050_Read_WithKalman+0x2b8>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b21b      	sxth	r3, r3
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	4ba0      	ldr	r3, [pc, #640]	@ (8001710 <MPU6050_Read_WithKalman+0x2b8>)
 8001490:	785b      	ldrb	r3, [r3, #1]
 8001492:	b21b      	sxth	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b21b      	sxth	r3, r3
 8001498:	b29a      	uxth	r2, r3
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b21a      	sxth	r2, r3
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = ((int16_t)(Rec_Data[2] << 8 | Rec_Data[3])) - DataStruct->Accel_Y_RAW_K;
 80014ac:	4b98      	ldr	r3, [pc, #608]	@ (8001710 <MPU6050_Read_WithKalman+0x2b8>)
 80014ae:	789b      	ldrb	r3, [r3, #2]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	4b96      	ldr	r3, [pc, #600]	@ (8001710 <MPU6050_Read_WithKalman+0x2b8>)
 80014b8:	78db      	ldrb	r3, [r3, #3]
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b21b      	sxth	r3, r3
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = ((int16_t)(Rec_Data[4] << 8 | Rec_Data[5])) - DataStruct->Accel_Z_RAW_K;
 80014d4:	4b8e      	ldr	r3, [pc, #568]	@ (8001710 <MPU6050_Read_WithKalman+0x2b8>)
 80014d6:	791b      	ldrb	r3, [r3, #4]
 80014d8:	b21b      	sxth	r3, r3
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	b21a      	sxth	r2, r3
 80014de:	4b8c      	ldr	r3, [pc, #560]	@ (8001710 <MPU6050_Read_WithKalman+0x2b8>)
 80014e0:	795b      	ldrb	r3, [r3, #5]
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	809a      	strh	r2, [r3, #4]
    DataStruct->Temp_RAW = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80014fc:	4b84      	ldr	r3, [pc, #528]	@ (8001710 <MPU6050_Read_WithKalman+0x2b8>)
 80014fe:	799b      	ldrb	r3, [r3, #6]
 8001500:	b21b      	sxth	r3, r3
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	b21a      	sxth	r2, r3
 8001506:	4b82      	ldr	r3, [pc, #520]	@ (8001710 <MPU6050_Read_WithKalman+0x2b8>)
 8001508:	79db      	ldrb	r3, [r3, #7]
 800150a:	b21b      	sxth	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b21a      	sxth	r2, r3
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    DataStruct->Gyro_X_RAW = ((int16_t)(Rec_Data[8] << 8 | Rec_Data[9])) - DataStruct->Gyro_X_RAW_K;
 8001516:	4b7e      	ldr	r3, [pc, #504]	@ (8001710 <MPU6050_Read_WithKalman+0x2b8>)
 8001518:	7a1b      	ldrb	r3, [r3, #8]
 800151a:	b21b      	sxth	r3, r3
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b21a      	sxth	r2, r3
 8001520:	4b7b      	ldr	r3, [pc, #492]	@ (8001710 <MPU6050_Read_WithKalman+0x2b8>)
 8001522:	7a5b      	ldrb	r3, [r3, #9]
 8001524:	b21b      	sxth	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b21b      	sxth	r3, r3
 800152a:	b29a      	uxth	r2, r3
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8001532:	b29b      	uxth	r3, r3
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	b29b      	uxth	r3, r3
 8001538:	b21a      	sxth	r2, r3
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = ((int16_t)(Rec_Data[10] << 8 | Rec_Data[11])) - DataStruct->Gyro_Y_RAW_K;
 800153e:	4b74      	ldr	r3, [pc, #464]	@ (8001710 <MPU6050_Read_WithKalman+0x2b8>)
 8001540:	7a9b      	ldrb	r3, [r3, #10]
 8001542:	b21b      	sxth	r3, r3
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	b21a      	sxth	r2, r3
 8001548:	4b71      	ldr	r3, [pc, #452]	@ (8001710 <MPU6050_Read_WithKalman+0x2b8>)
 800154a:	7adb      	ldrb	r3, [r3, #11]
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	b21b      	sxth	r3, r3
 8001552:	b29a      	uxth	r2, r3
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800155a:	b29b      	uxth	r3, r3
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	b29b      	uxth	r3, r3
 8001560:	b21a      	sxth	r2, r3
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = ((int16_t)(Rec_Data[12] << 8 | Rec_Data[13])) - DataStruct->Gyro_Z_RAW_K;
 8001566:	4b6a      	ldr	r3, [pc, #424]	@ (8001710 <MPU6050_Read_WithKalman+0x2b8>)
 8001568:	7b1b      	ldrb	r3, [r3, #12]
 800156a:	b21b      	sxth	r3, r3
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b21a      	sxth	r2, r3
 8001570:	4b67      	ldr	r3, [pc, #412]	@ (8001710 <MPU6050_Read_WithKalman+0x2b8>)
 8001572:	7b5b      	ldrb	r3, [r3, #13]
 8001574:	b21b      	sxth	r3, r3
 8001576:	4313      	orrs	r3, r2
 8001578:	b21b      	sxth	r3, r3
 800157a:	b29a      	uxth	r2, r3
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001582:	b29b      	uxth	r3, r3
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	b29b      	uxth	r3, r3
 8001588:	b21a      	sxth	r2, r3
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ff2d 	bl	80003f4 <__aeabi_i2d>
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	4b5d      	ldr	r3, [pc, #372]	@ (8001714 <MPU6050_Read_WithKalman+0x2bc>)
 80015a0:	f7ff f8bc 	bl	800071c <__aeabi_ddiv>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	69b9      	ldr	r1, [r7, #24]
 80015aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ff1d 	bl	80003f4 <__aeabi_i2d>
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	4b55      	ldr	r3, [pc, #340]	@ (8001714 <MPU6050_Read_WithKalman+0x2bc>)
 80015c0:	f7ff f8ac 	bl	800071c <__aeabi_ddiv>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	69b9      	ldr	r1, [r7, #24]
 80015ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / 16384.0;
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ff0d 	bl	80003f4 <__aeabi_i2d>
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b4d      	ldr	r3, [pc, #308]	@ (8001714 <MPU6050_Read_WithKalman+0x2bc>)
 80015e0:	f7ff f89c 	bl	800071c <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	69b9      	ldr	r1, [r7, #24]
 80015ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)(DataStruct->Temp_RAW  / (float)340.0 + (float)36.53);
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fad1 	bl	8000b9c <__aeabi_i2f>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4946      	ldr	r1, [pc, #280]	@ (8001718 <MPU6050_Read_WithKalman+0x2c0>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fbd4 	bl	8000dac <__aeabi_fdiv>
 8001604:	4603      	mov	r3, r0
 8001606:	4945      	ldr	r1, [pc, #276]	@ (800171c <MPU6050_Read_WithKalman+0x2c4>)
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fa13 	bl	8000a34 <__addsf3>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	651a      	str	r2, [r3, #80]	@ 0x50
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe fee9 	bl	80003f4 <__aeabi_i2d>
 8001622:	a335      	add	r3, pc, #212	@ (adr r3, 80016f8 <MPU6050_Read_WithKalman+0x2a0>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff f878 	bl	800071c <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	69b9      	ldr	r1, [r7, #24]
 8001632:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe fed9 	bl	80003f4 <__aeabi_i2d>
 8001642:	a32d      	add	r3, pc, #180	@ (adr r3, 80016f8 <MPU6050_Read_WithKalman+0x2a0>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7ff f868 	bl	800071c <__aeabi_ddiv>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	69b9      	ldr	r1, [r7, #24]
 8001652:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fec9 	bl	80003f4 <__aeabi_i2d>
 8001662:	a325      	add	r3, pc, #148	@ (adr r3, 80016f8 <MPU6050_Read_WithKalman+0x2a0>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7ff f858 	bl	800071c <__aeabi_ddiv>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	69b9      	ldr	r1, [r7, #24]
 8001672:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38


    double dt = DWT_GetDeltaMicros(zaman) * 1e-6;
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f000 fb22 	bl	8001cc0 <DWT_GetDeltaMicros>
 800167c:	4603      	mov	r3, r0
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fea8 	bl	80003d4 <__aeabi_ui2d>
 8001684:	a31e      	add	r3, pc, #120	@ (adr r3, 8001700 <MPU6050_Read_WithKalman+0x2a8>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7fe ff1d 	bl	80004c8 <__aeabi_dmul>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double roll = atan2(DataStruct->Ay, sqrt(DataStruct->Ax * DataStruct->Ax + DataStruct->Az * DataStruct->Az)) * RAD_TO_DEG;
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800169c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016ac:	f7fe ff0c 	bl	80004c8 <__aeabi_dmul>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	e9c7 2300 	strd	r2, r3, [r7]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80016c4:	f7fe ff00 	bl	80004c8 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016d0:	f7fe fd44 	bl	800015c <__adddf3>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f004 f94c 	bl	8005978 <sqrt>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016e8:	f004 f944 	bl	8005974 <atan2>
 80016ec:	a306      	add	r3, pc, #24	@ (adr r3, 8001708 <MPU6050_Read_WithKalman+0x2b0>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	e015      	b.n	8001720 <MPU6050_Read_WithKalman+0x2c8>
 80016f4:	f3af 8000 	nop.w
 80016f8:	00000000 	.word	0x00000000
 80016fc:	40606000 	.word	0x40606000
 8001700:	a0b5ed8d 	.word	0xa0b5ed8d
 8001704:	3eb0c6f7 	.word	0x3eb0c6f7
 8001708:	1a63c1f8 	.word	0x1a63c1f8
 800170c:	404ca5dc 	.word	0x404ca5dc
 8001710:	200001d4 	.word	0x200001d4
 8001714:	40d00000 	.word	0x40d00000
 8001718:	43aa0000 	.word	0x43aa0000
 800171c:	42121eb8 	.word	0x42121eb8
 8001720:	f7fe fed2 	bl	80004c8 <__aeabi_dmul>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double pitch = atan2(-DataStruct->Ax, DataStruct->Az) * RAD_TO_DEG;
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001732:	4692      	mov	sl, r2
 8001734:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800173e:	4650      	mov	r0, sl
 8001740:	4659      	mov	r1, fp
 8001742:	f004 f917 	bl	8005974 <atan2>
 8001746:	a366      	add	r3, pc, #408	@ (adr r3, 80018e0 <MPU6050_Read_WithKalman+0x488>)
 8001748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174c:	f7fe febc 	bl	80004c8 <__aeabi_dmul>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Pitch için ±90° kontrolü (Gimbal lock önleme)
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	4b62      	ldr	r3, [pc, #392]	@ (80018e8 <MPU6050_Read_WithKalman+0x490>)
 800175e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001762:	f7ff f923 	bl	80009ac <__aeabi_dcmplt>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00a      	beq.n	8001782 <MPU6050_Read_WithKalman+0x32a>
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	4b5d      	ldr	r3, [pc, #372]	@ (80018ec <MPU6050_Read_WithKalman+0x494>)
 8001778:	f7ff f936 	bl	80009e8 <__aeabi_dcmpgt>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d114      	bne.n	80017ac <MPU6050_Read_WithKalman+0x354>
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	4b59      	ldr	r3, [pc, #356]	@ (80018ec <MPU6050_Read_WithKalman+0x494>)
 8001788:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800178c:	f7ff f92c 	bl	80009e8 <__aeabi_dcmpgt>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d015      	beq.n	80017c2 <MPU6050_Read_WithKalman+0x36a>
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	4b51      	ldr	r3, [pc, #324]	@ (80018e8 <MPU6050_Read_WithKalman+0x490>)
 80017a2:	f7ff f903 	bl	80009ac <__aeabi_dcmplt>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00a      	beq.n	80017c2 <MPU6050_Read_WithKalman+0x36a>
        KalmanY.angle = pitch;
 80017ac:	4950      	ldr	r1, [pc, #320]	@ (80018f0 <MPU6050_Read_WithKalman+0x498>)
 80017ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017b2:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80017b6:	69b9      	ldr	r1, [r7, #24]
 80017b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017bc:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
 80017c0:	e012      	b.n	80017e8 <MPU6050_Read_WithKalman+0x390>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017c8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80017cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80017d0:	e9cd 2300 	strd	r2, r3, [sp]
 80017d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017d8:	4845      	ldr	r0, [pc, #276]	@ (80018f0 <MPU6050_Read_WithKalman+0x498>)
 80017da:	f7ff fcea 	bl	80011b2 <Kalman_getAngle>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	69b9      	ldr	r1, [r7, #24]
 80017e4:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    }

    // Roll için ±90° kontrolü (Gimbal lock önleme)
    if ((roll < -90 && DataStruct->KalmanAngleX > 90) || (roll > 90 && DataStruct->KalmanAngleX < -90)) {
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	4b3e      	ldr	r3, [pc, #248]	@ (80018e8 <MPU6050_Read_WithKalman+0x490>)
 80017ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017f2:	f7ff f8db 	bl	80009ac <__aeabi_dcmplt>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00a      	beq.n	8001812 <MPU6050_Read_WithKalman+0x3ba>
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	4b39      	ldr	r3, [pc, #228]	@ (80018ec <MPU6050_Read_WithKalman+0x494>)
 8001808:	f7ff f8ee 	bl	80009e8 <__aeabi_dcmpgt>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d114      	bne.n	800183c <MPU6050_Read_WithKalman+0x3e4>
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	4b35      	ldr	r3, [pc, #212]	@ (80018ec <MPU6050_Read_WithKalman+0x494>)
 8001818:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800181c:	f7ff f8e4 	bl	80009e8 <__aeabi_dcmpgt>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d015      	beq.n	8001852 <MPU6050_Read_WithKalman+0x3fa>
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	4b2d      	ldr	r3, [pc, #180]	@ (80018e8 <MPU6050_Read_WithKalman+0x490>)
 8001832:	f7ff f8bb 	bl	80009ac <__aeabi_dcmplt>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00a      	beq.n	8001852 <MPU6050_Read_WithKalman+0x3fa>
        KalmanX.angle = roll;
 800183c:	492d      	ldr	r1, [pc, #180]	@ (80018f4 <MPU6050_Read_WithKalman+0x49c>)
 800183e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001842:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleX = roll;
 8001846:	69b9      	ldr	r1, [r7, #24]
 8001848:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800184c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8001850:	e012      	b.n	8001878 <MPU6050_Read_WithKalman+0x420>
    } else {
        DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001858:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800185c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001860:	e9cd 2300 	strd	r2, r3, [sp]
 8001864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001868:	4822      	ldr	r0, [pc, #136]	@ (80018f4 <MPU6050_Read_WithKalman+0x49c>)
 800186a:	f7ff fca2 	bl	80011b2 <Kalman_getAngle>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	69b9      	ldr	r1, [r7, #24]
 8001874:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    }

    // Jiroskop yön düzeltmesi (pitch ±90° durumunda)
    if (fabs(DataStruct->KalmanAngleY) > 90) {
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800187e:	4690      	mov	r8, r2
 8001880:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	4b18      	ldr	r3, [pc, #96]	@ (80018ec <MPU6050_Read_WithKalman+0x494>)
 800188a:	4640      	mov	r0, r8
 800188c:	4649      	mov	r1, r9
 800188e:	f7ff f8ab 	bl	80009e8 <__aeabi_dcmpgt>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <MPU6050_Read_WithKalman+0x452>
        DataStruct->Gx = -DataStruct->Gx;
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800189e:	4614      	mov	r4, r2
 80018a0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    }
    // Yaw için jiroskop entegrasyonu
    DataStruct->KalmanAngleZ += DataStruct->Gz * dt;
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	@ 0x68
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80018b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80018ba:	f7fe fe05 	bl	80004c8 <__aeabi_dmul>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4620      	mov	r0, r4
 80018c4:	4629      	mov	r1, r5
 80018c6:	f7fe fc49 	bl	800015c <__adddf3>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	69b9      	ldr	r1, [r7, #24]
 80018d0:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
}
 80018d4:	bf00      	nop
 80018d6:	3740      	adds	r7, #64	@ 0x40
 80018d8:	46bd      	mov	sp, r7
 80018da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018de:	bf00      	nop
 80018e0:	1a63c1f8 	.word	0x1a63c1f8
 80018e4:	404ca5dc 	.word	0x404ca5dc
 80018e8:	c0568000 	.word	0xc0568000
 80018ec:	40568000 	.word	0x40568000
 80018f0:	20000048 	.word	0x20000048
 80018f4:	20000000 	.word	0x20000000

080018f8 <MPU6050_Calibration_offset>:
    DataStruct->KalmanAngleZ += DataStruct->Gz * dt;
}


void MPU6050_Calibration_offset(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
    int32_t kalibreAx = 0, kalibreAy = 0, kalibreAz = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
    int32_t kalibreGx = 0, kalibreGy = 0, kalibreGz = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]

    for (uint8_t sayac = 0; sayac < 250; sayac++)
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	e033      	b.n	8001988 <MPU6050_Calibration_offset+0x90>
    {
        MPU6050_Read_All(I2Cx, DataStruct);
 8001920:	6839      	ldr	r1, [r7, #0]
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f880 	bl	8001a28 <MPU6050_Read_All>
        kalibreAx += DataStruct->Accel_X_RAW;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192e:	461a      	mov	r2, r3
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	4413      	add	r3, r2
 8001934:	627b      	str	r3, [r7, #36]	@ 0x24
        kalibreAy += DataStruct->Accel_Y_RAW;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800193c:	461a      	mov	r2, r3
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	4413      	add	r3, r2
 8001942:	623b      	str	r3, [r7, #32]
        kalibreAz += DataStruct->Accel_Z_RAW;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800194a:	461a      	mov	r2, r3
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	4413      	add	r3, r2
 8001950:	61fb      	str	r3, [r7, #28]

        kalibreGx += DataStruct->Gyro_X_RAW;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001958:	461a      	mov	r2, r3
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	4413      	add	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        kalibreGy += DataStruct->Gyro_Y_RAW;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001966:	461a      	mov	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	4413      	add	r3, r2
 800196c:	617b      	str	r3, [r7, #20]
        kalibreGz += DataStruct->Gyro_Z_RAW;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001974:	461a      	mov	r2, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4413      	add	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        HAL_Delay(1); // 1 + 1 = 2 millisecond wait
 800197c:	2001      	movs	r0, #1
 800197e:	f000 fb03 	bl	8001f88 <HAL_Delay>
    for (uint8_t sayac = 0; sayac < 250; sayac++)
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	3301      	adds	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	2bf9      	cmp	r3, #249	@ 0xf9
 800198c:	d9c8      	bls.n	8001920 <MPU6050_Calibration_offset+0x28>
    }

    DataStruct->Accel_X_RAW_K = (int16_t)(kalibreAx / 250);
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	4a24      	ldr	r2, [pc, #144]	@ (8001a24 <MPU6050_Calibration_offset+0x12c>)
 8001992:	fb82 1203 	smull	r1, r2, r2, r3
 8001996:	1112      	asrs	r2, r2, #4
 8001998:	17db      	asrs	r3, r3, #31
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	b21a      	sxth	r2, r3
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    DataStruct->Accel_Y_RAW_K = (int16_t)(kalibreAy / 250);
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a24 <MPU6050_Calibration_offset+0x12c>)
 80019a8:	fb82 1203 	smull	r1, r2, r2, r3
 80019ac:	1112      	asrs	r2, r2, #4
 80019ae:	17db      	asrs	r3, r3, #31
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	b21a      	sxth	r2, r3
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    DataStruct->Accel_Z_RAW_K = (int16_t)((kalibreAz / 250) - 16384);
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	4a19      	ldr	r2, [pc, #100]	@ (8001a24 <MPU6050_Calibration_offset+0x12c>)
 80019be:	fb82 1203 	smull	r1, r2, r2, r3
 80019c2:	1112      	asrs	r2, r2, #4
 80019c4:	17db      	asrs	r3, r3, #31
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	b21a      	sxth	r2, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    DataStruct->Gyro_X_RAW_K = (int16_t)(kalibreGx / 250);
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	4a12      	ldr	r2, [pc, #72]	@ (8001a24 <MPU6050_Calibration_offset+0x12c>)
 80019dc:	fb82 1203 	smull	r1, r2, r2, r3
 80019e0:	1112      	asrs	r2, r2, #4
 80019e2:	17db      	asrs	r3, r3, #31
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	b21a      	sxth	r2, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    DataStruct->Gyro_Y_RAW_K = (int16_t)(kalibreGy / 250);
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001a24 <MPU6050_Calibration_offset+0x12c>)
 80019f2:	fb82 1203 	smull	r1, r2, r2, r3
 80019f6:	1112      	asrs	r2, r2, #4
 80019f8:	17db      	asrs	r3, r3, #31
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	b21a      	sxth	r2, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    DataStruct->Gyro_Z_RAW_K = (int16_t)(kalibreGz / 250);
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4a07      	ldr	r2, [pc, #28]	@ (8001a24 <MPU6050_Calibration_offset+0x12c>)
 8001a08:	fb82 1203 	smull	r1, r2, r2, r3
 8001a0c:	1112      	asrs	r2, r2, #4
 8001a0e:	17db      	asrs	r3, r3, #31
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	b21a      	sxth	r2, r3
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 8001a1a:	bf00      	nop
 8001a1c:	3728      	adds	r7, #40	@ 0x28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	10624dd3 	.word	0x10624dd3

08001a28 <MPU6050_Read_All>:


void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af04      	add	r7, sp, #16
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, (uint8_t *)Rec_Data, 14, I2C_TIMEOUT);
 8001a32:	2332      	movs	r3, #50	@ 0x32
 8001a34:	9302      	str	r3, [sp, #8]
 8001a36:	230e      	movs	r3, #14
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	4b85      	ldr	r3, [pc, #532]	@ (8001c50 <MPU6050_Read_All+0x228>)
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2301      	movs	r3, #1
 8001a40:	223b      	movs	r2, #59	@ 0x3b
 8001a42:	21d0      	movs	r1, #208	@ 0xd0
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f001 f845 	bl	8002ad4 <HAL_I2C_Mem_Read>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
    {
    	// hata dondur
	}
    DataStruct->Accel_X_RAW = ((int16_t)(Rec_Data[0] << 8 | Rec_Data[1])) - DataStruct->Accel_X_RAW_K;
 8001a4e:	4b80      	ldr	r3, [pc, #512]	@ (8001c50 <MPU6050_Read_All+0x228>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	4b7d      	ldr	r3, [pc, #500]	@ (8001c50 <MPU6050_Read_All+0x228>)
 8001a5a:	785b      	ldrb	r3, [r3, #1]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	b21a      	sxth	r2, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = ((int16_t)(Rec_Data[2] << 8 | Rec_Data[3])) - DataStruct->Accel_Y_RAW_K;
 8001a76:	4b76      	ldr	r3, [pc, #472]	@ (8001c50 <MPU6050_Read_All+0x228>)
 8001a78:	789b      	ldrb	r3, [r3, #2]
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	b21a      	sxth	r2, r3
 8001a80:	4b73      	ldr	r3, [pc, #460]	@ (8001c50 <MPU6050_Read_All+0x228>)
 8001a82:	78db      	ldrb	r3, [r3, #3]
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	4313      	orrs	r3, r2
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	b21a      	sxth	r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = ((int16_t)(Rec_Data[4] << 8 | Rec_Data[5])) - DataStruct->Accel_Z_RAW_K;
 8001a9e:	4b6c      	ldr	r3, [pc, #432]	@ (8001c50 <MPU6050_Read_All+0x228>)
 8001aa0:	791b      	ldrb	r3, [r3, #4]
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	b21a      	sxth	r2, r3
 8001aa8:	4b69      	ldr	r3, [pc, #420]	@ (8001c50 <MPU6050_Read_All+0x228>)
 8001aaa:	795b      	ldrb	r3, [r3, #5]
 8001aac:	b21b      	sxth	r3, r3
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	b21a      	sxth	r2, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	809a      	strh	r2, [r3, #4]
    DataStruct->Temp_RAW = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001ac6:	4b62      	ldr	r3, [pc, #392]	@ (8001c50 <MPU6050_Read_All+0x228>)
 8001ac8:	799b      	ldrb	r3, [r3, #6]
 8001aca:	b21b      	sxth	r3, r3
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	b21a      	sxth	r2, r3
 8001ad0:	4b5f      	ldr	r3, [pc, #380]	@ (8001c50 <MPU6050_Read_All+0x228>)
 8001ad2:	79db      	ldrb	r3, [r3, #7]
 8001ad4:	b21b      	sxth	r3, r3
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	b21a      	sxth	r2, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    DataStruct->Gyro_X_RAW = ((int16_t)(Rec_Data[8] << 8 | Rec_Data[9])) - DataStruct->Gyro_X_RAW_K;
 8001ae0:	4b5b      	ldr	r3, [pc, #364]	@ (8001c50 <MPU6050_Read_All+0x228>)
 8001ae2:	7a1b      	ldrb	r3, [r3, #8]
 8001ae4:	b21b      	sxth	r3, r3
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	b21a      	sxth	r2, r3
 8001aea:	4b59      	ldr	r3, [pc, #356]	@ (8001c50 <MPU6050_Read_All+0x228>)
 8001aec:	7a5b      	ldrb	r3, [r3, #9]
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	4313      	orrs	r3, r2
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	b21a      	sxth	r2, r3
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = ((int16_t)(Rec_Data[10] << 8 | Rec_Data[11])) - DataStruct->Gyro_Y_RAW_K;
 8001b08:	4b51      	ldr	r3, [pc, #324]	@ (8001c50 <MPU6050_Read_All+0x228>)
 8001b0a:	7a9b      	ldrb	r3, [r3, #10]
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	b21a      	sxth	r2, r3
 8001b12:	4b4f      	ldr	r3, [pc, #316]	@ (8001c50 <MPU6050_Read_All+0x228>)
 8001b14:	7adb      	ldrb	r3, [r3, #11]
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = ((int16_t)(Rec_Data[12] << 8 | Rec_Data[13])) - DataStruct->Gyro_Z_RAW_K;
 8001b30:	4b47      	ldr	r3, [pc, #284]	@ (8001c50 <MPU6050_Read_All+0x228>)
 8001b32:	7b1b      	ldrb	r3, [r3, #12]
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	b21a      	sxth	r2, r3
 8001b3a:	4b45      	ldr	r3, [pc, #276]	@ (8001c50 <MPU6050_Read_All+0x228>)
 8001b3c:	7b5b      	ldrb	r3, [r3, #13]
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	4313      	orrs	r3, r2
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fc48 	bl	80003f4 <__aeabi_i2d>
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	4b3a      	ldr	r3, [pc, #232]	@ (8001c54 <MPU6050_Read_All+0x22c>)
 8001b6a:	f7fe fdd7 	bl	800071c <__aeabi_ddiv>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	6839      	ldr	r1, [r7, #0]
 8001b74:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fc38 	bl	80003f4 <__aeabi_i2d>
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4b32      	ldr	r3, [pc, #200]	@ (8001c54 <MPU6050_Read_All+0x22c>)
 8001b8a:	f7fe fdc7 	bl	800071c <__aeabi_ddiv>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	6839      	ldr	r1, [r7, #0]
 8001b94:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / 16384.0;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fc28 	bl	80003f4 <__aeabi_i2d>
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c54 <MPU6050_Read_All+0x22c>)
 8001baa:	f7fe fdb7 	bl	800071c <__aeabi_ddiv>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	6839      	ldr	r1, [r7, #0]
 8001bb4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)(DataStruct->Temp_RAW / (float)340.0 + (float)36.53);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe ffec 	bl	8000b9c <__aeabi_i2f>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4924      	ldr	r1, [pc, #144]	@ (8001c58 <MPU6050_Read_All+0x230>)
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f8ef 	bl	8000dac <__aeabi_fdiv>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4922      	ldr	r1, [pc, #136]	@ (8001c5c <MPU6050_Read_All+0x234>)
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe ff2e 	bl	8000a34 <__addsf3>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	651a      	str	r2, [r3, #80]	@ 0x50
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fc04 	bl	80003f4 <__aeabi_i2d>
 8001bec:	a316      	add	r3, pc, #88	@ (adr r3, 8001c48 <MPU6050_Read_All+0x220>)
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	f7fe fd93 	bl	800071c <__aeabi_ddiv>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	6839      	ldr	r1, [r7, #0]
 8001bfc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fbf4 	bl	80003f4 <__aeabi_i2d>
 8001c0c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001c48 <MPU6050_Read_All+0x220>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fd83 	bl	800071c <__aeabi_ddiv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	6839      	ldr	r1, [r7, #0]
 8001c1c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fbe4 	bl	80003f4 <__aeabi_i2d>
 8001c2c:	a306      	add	r3, pc, #24	@ (adr r3, 8001c48 <MPU6050_Read_All+0x220>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	f7fe fd73 	bl	800071c <__aeabi_ddiv>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	6839      	ldr	r1, [r7, #0]
 8001c3c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	00000000 	.word	0x00000000
 8001c4c:	40606000 	.word	0x40606000
 8001c50:	200001d4 	.word	0x200001d4
 8001c54:	40d00000 	.word	0x40d00000
 8001c58:	43aa0000 	.word	0x43aa0000
 8001c5c:	42121eb8 	.word	0x42121eb8

08001c60 <DWT_Init>:
    DataStruct->KalmanAngleZ += DataStruct->Gz * dt_g;
    dt_g = DWT_GetDeltaMicros(zaman) * 1e-6;
}

void DWT_Init(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001c64:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <DWT_Init+0x2c>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4a08      	ldr	r2, [pc, #32]	@ (8001c8c <DWT_Init+0x2c>)
 8001c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c6e:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8001c70:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <DWT_Init+0x30>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <DWT_Init+0x30>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a05      	ldr	r2, [pc, #20]	@ (8001c90 <DWT_Init+0x30>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6013      	str	r3, [r2, #0]
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000edf0 	.word	0xe000edf0
 8001c90:	e0001000 	.word	0xe0001000

08001c94 <DWT_GetMicros>:

uint32_t DWT_GetMicros(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
    return (DWT->CYCCNT / (SystemCoreClock / 1000000));
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <DWT_GetMicros+0x20>)
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <DWT_GetMicros+0x24>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4906      	ldr	r1, [pc, #24]	@ (8001cbc <DWT_GetMicros+0x28>)
 8001ca2:	fba1 1303 	umull	r1, r3, r1, r3
 8001ca6:	0c9b      	lsrs	r3, r3, #18
 8001ca8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	e0001000 	.word	0xe0001000
 8001cb8:	20000090 	.word	0x20000090
 8001cbc:	431bde83 	.word	0x431bde83

08001cc0 <DWT_GetDeltaMicros>:

uint32_t DWT_GetDeltaMicros(uint32_t start_time)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    uint32_t current_time = DWT_GetMicros();
 8001cc8:	f7ff ffe4 	bl	8001c94 <DWT_GetMicros>
 8001ccc:	60f8      	str	r0, [r7, #12]
    if (current_time >= start_time)
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d303      	bcc.n	8001cde <DWT_GetDeltaMicros+0x1e>
    {        return (current_time - start_time);    }
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	e002      	b.n	8001ce4 <DWT_GetDeltaMicros+0x24>
    else
    {        return (0xFFFFFFFF - start_time + current_time + 1);    }
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	1ad3      	subs	r3, r2, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf2:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <HAL_MspInit+0x5c>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	4a14      	ldr	r2, [pc, #80]	@ (8001d48 <HAL_MspInit+0x5c>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6193      	str	r3, [r2, #24]
 8001cfe:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <HAL_MspInit+0x5c>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <HAL_MspInit+0x5c>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d48 <HAL_MspInit+0x5c>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d14:	61d3      	str	r3, [r2, #28]
 8001d16:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <HAL_MspInit+0x5c>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <HAL_MspInit+0x60>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	4a04      	ldr	r2, [pc, #16]	@ (8001d4c <HAL_MspInit+0x60>)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010000 	.word	0x40010000

08001d50 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0310 	add.w	r3, r7, #16
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001de0 <HAL_I2C_MspInit+0x90>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d133      	bne.n	8001dd8 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d70:	4b1c      	ldr	r3, [pc, #112]	@ (8001de4 <HAL_I2C_MspInit+0x94>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a1b      	ldr	r2, [pc, #108]	@ (8001de4 <HAL_I2C_MspInit+0x94>)
 8001d76:	f043 0308 	orr.w	r3, r3, #8
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <HAL_I2C_MspInit+0x94>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d88:	23c0      	movs	r3, #192	@ 0xc0
 8001d8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d8c:	2312      	movs	r3, #18
 8001d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d90:	2303      	movs	r3, #3
 8001d92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4813      	ldr	r0, [pc, #76]	@ (8001de8 <HAL_I2C_MspInit+0x98>)
 8001d9c:	f000 faac 	bl	80022f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001da0:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <HAL_I2C_MspInit+0x94>)
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	4a0f      	ldr	r2, [pc, #60]	@ (8001de4 <HAL_I2C_MspInit+0x94>)
 8001da6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001daa:	61d3      	str	r3, [r2, #28]
 8001dac:	4b0d      	ldr	r3, [pc, #52]	@ (8001de4 <HAL_I2C_MspInit+0x94>)
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2100      	movs	r1, #0
 8001dbc:	201f      	movs	r0, #31
 8001dbe:	f000 f9de 	bl	800217e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001dc2:	201f      	movs	r0, #31
 8001dc4:	f000 f9f7 	bl	80021b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2020      	movs	r0, #32
 8001dce:	f000 f9d6 	bl	800217e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001dd2:	2020      	movs	r0, #32
 8001dd4:	f000 f9ef 	bl	80021b6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001dd8:	bf00      	nop
 8001dda:	3720      	adds	r7, #32
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40005400 	.word	0x40005400
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40010c00 	.word	0x40010c00

08001dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <NMI_Handler+0x4>

08001df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <HardFault_Handler+0x4>

08001dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <MemManage_Handler+0x4>

08001e04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <BusFault_Handler+0x4>

08001e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <UsageFault_Handler+0x4>

08001e14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e3c:	f000 f888 	bl	8001f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e48:	4802      	ldr	r0, [pc, #8]	@ (8001e54 <I2C1_EV_IRQHandler+0x10>)
 8001e4a:	f001 f8b7 	bl	8002fbc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	2000010c 	.word	0x2000010c

08001e58 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e5c:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <I2C1_ER_IRQHandler+0x10>)
 8001e5e:	f001 fa1e 	bl	800329e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000010c 	.word	0x2000010c

08001e6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e78:	f7ff fff8 	bl	8001e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e7c:	480b      	ldr	r0, [pc, #44]	@ (8001eac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e7e:	490c      	ldr	r1, [pc, #48]	@ (8001eb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e80:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e84:	e002      	b.n	8001e8c <LoopCopyDataInit>

08001e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8a:	3304      	adds	r3, #4

08001e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e90:	d3f9      	bcc.n	8001e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e92:	4a09      	ldr	r2, [pc, #36]	@ (8001eb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e94:	4c09      	ldr	r4, [pc, #36]	@ (8001ebc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e98:	e001      	b.n	8001e9e <LoopFillZerobss>

08001e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e9c:	3204      	adds	r2, #4

08001e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea0:	d3fb      	bcc.n	8001e9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ea2:	f003 fd43 	bl	800592c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ea6:	f7ff f81d 	bl	8000ee4 <main>
  bx lr
 8001eaa:	4770      	bx	lr
  ldr r0, =_sdata
 8001eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb0:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001eb4:	08006108 	.word	0x08006108
  ldr r2, =_sbss
 8001eb8:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001ebc:	20000320 	.word	0x20000320

08001ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ec0:	e7fe      	b.n	8001ec0 <ADC1_2_IRQHandler>
	...

08001ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec8:	4b08      	ldr	r3, [pc, #32]	@ (8001eec <HAL_Init+0x28>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a07      	ldr	r2, [pc, #28]	@ (8001eec <HAL_Init+0x28>)
 8001ece:	f043 0310 	orr.w	r3, r3, #16
 8001ed2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed4:	2003      	movs	r0, #3
 8001ed6:	f000 f947 	bl	8002168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eda:	200f      	movs	r0, #15
 8001edc:	f000 f808 	bl	8001ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee0:	f7ff ff04 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40022000 	.word	0x40022000

08001ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef8:	4b12      	ldr	r3, [pc, #72]	@ (8001f44 <HAL_InitTick+0x54>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <HAL_InitTick+0x58>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	4619      	mov	r1, r3
 8001f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f95f 	bl	80021d2 <HAL_SYSTICK_Config>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00e      	b.n	8001f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b0f      	cmp	r3, #15
 8001f22:	d80a      	bhi.n	8001f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f24:	2200      	movs	r2, #0
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	f000 f927 	bl	800217e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f30:	4a06      	ldr	r2, [pc, #24]	@ (8001f4c <HAL_InitTick+0x5c>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	e000      	b.n	8001f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000090 	.word	0x20000090
 8001f48:	20000098 	.word	0x20000098
 8001f4c:	20000094 	.word	0x20000094

08001f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f54:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <HAL_IncTick+0x1c>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <HAL_IncTick+0x20>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a03      	ldr	r2, [pc, #12]	@ (8001f70 <HAL_IncTick+0x20>)
 8001f62:	6013      	str	r3, [r2, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	20000098 	.word	0x20000098
 8001f70:	200001e4 	.word	0x200001e4

08001f74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return uwTick;
 8001f78:	4b02      	ldr	r3, [pc, #8]	@ (8001f84 <HAL_GetTick+0x10>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	200001e4 	.word	0x200001e4

08001f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff fff0 	bl	8001f74 <HAL_GetTick>
 8001f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d005      	beq.n	8001fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <HAL_Delay+0x44>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fae:	bf00      	nop
 8001fb0:	f7ff ffe0 	bl	8001f74 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d8f7      	bhi.n	8001fb0 <HAL_Delay+0x28>
  {
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000098 	.word	0x20000098

08001fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fec:	4013      	ands	r3, r2
 8001fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002002:	4a04      	ldr	r2, [pc, #16]	@ (8002014 <__NVIC_SetPriorityGrouping+0x44>)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	60d3      	str	r3, [r2, #12]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800201c:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <__NVIC_GetPriorityGrouping+0x18>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	f003 0307 	and.w	r3, r3, #7
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	2b00      	cmp	r3, #0
 8002044:	db0b      	blt.n	800205e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	f003 021f 	and.w	r2, r3, #31
 800204c:	4906      	ldr	r1, [pc, #24]	@ (8002068 <__NVIC_EnableIRQ+0x34>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	2001      	movs	r0, #1
 8002056:	fa00 f202 	lsl.w	r2, r0, r2
 800205a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	e000e100 	.word	0xe000e100

0800206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	2b00      	cmp	r3, #0
 800207e:	db0a      	blt.n	8002096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	490c      	ldr	r1, [pc, #48]	@ (80020b8 <__NVIC_SetPriority+0x4c>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	0112      	lsls	r2, r2, #4
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	440b      	add	r3, r1
 8002090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002094:	e00a      	b.n	80020ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4908      	ldr	r1, [pc, #32]	@ (80020bc <__NVIC_SetPriority+0x50>)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	3b04      	subs	r3, #4
 80020a4:	0112      	lsls	r2, r2, #4
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	440b      	add	r3, r1
 80020aa:	761a      	strb	r2, [r3, #24]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000e100 	.word	0xe000e100
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	@ 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f1c3 0307 	rsb	r3, r3, #7
 80020da:	2b04      	cmp	r3, #4
 80020dc:	bf28      	it	cs
 80020de:	2304      	movcs	r3, #4
 80020e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3304      	adds	r3, #4
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d902      	bls.n	80020f0 <NVIC_EncodePriority+0x30>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3b03      	subs	r3, #3
 80020ee:	e000      	b.n	80020f2 <NVIC_EncodePriority+0x32>
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43da      	mvns	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	401a      	ands	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002108:	f04f 31ff 	mov.w	r1, #4294967295
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	43d9      	mvns	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	4313      	orrs	r3, r2
         );
}
 800211a:	4618      	mov	r0, r3
 800211c:	3724      	adds	r7, #36	@ 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr

08002124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002134:	d301      	bcc.n	800213a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002136:	2301      	movs	r3, #1
 8002138:	e00f      	b.n	800215a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213a:	4a0a      	ldr	r2, [pc, #40]	@ (8002164 <SysTick_Config+0x40>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002142:	210f      	movs	r1, #15
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	f7ff ff90 	bl	800206c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800214c:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <SysTick_Config+0x40>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002152:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <SysTick_Config+0x40>)
 8002154:	2207      	movs	r2, #7
 8002156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	e000e010 	.word	0xe000e010

08002168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ff2d 	bl	8001fd0 <__NVIC_SetPriorityGrouping>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002190:	f7ff ff42 	bl	8002018 <__NVIC_GetPriorityGrouping>
 8002194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68b9      	ldr	r1, [r7, #8]
 800219a:	6978      	ldr	r0, [r7, #20]
 800219c:	f7ff ff90 	bl	80020c0 <NVIC_EncodePriority>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff5f 	bl	800206c <__NVIC_SetPriority>
}
 80021ae:	bf00      	nop
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff35 	bl	8002034 <__NVIC_EnableIRQ>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ffa2 	bl	8002124 <SysTick_Config>
 80021e0:	4603      	mov	r3, r0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d005      	beq.n	8002210 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2204      	movs	r2, #4
 8002208:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
 800220e:	e051      	b.n	80022b4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 020e 	bic.w	r2, r2, #14
 800221e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a22      	ldr	r2, [pc, #136]	@ (80022c0 <HAL_DMA_Abort_IT+0xd4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d029      	beq.n	800228e <HAL_DMA_Abort_IT+0xa2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a21      	ldr	r2, [pc, #132]	@ (80022c4 <HAL_DMA_Abort_IT+0xd8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d022      	beq.n	800228a <HAL_DMA_Abort_IT+0x9e>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a1f      	ldr	r2, [pc, #124]	@ (80022c8 <HAL_DMA_Abort_IT+0xdc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01a      	beq.n	8002284 <HAL_DMA_Abort_IT+0x98>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1e      	ldr	r2, [pc, #120]	@ (80022cc <HAL_DMA_Abort_IT+0xe0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d012      	beq.n	800227e <HAL_DMA_Abort_IT+0x92>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1c      	ldr	r2, [pc, #112]	@ (80022d0 <HAL_DMA_Abort_IT+0xe4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00a      	beq.n	8002278 <HAL_DMA_Abort_IT+0x8c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1b      	ldr	r2, [pc, #108]	@ (80022d4 <HAL_DMA_Abort_IT+0xe8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d102      	bne.n	8002272 <HAL_DMA_Abort_IT+0x86>
 800226c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002270:	e00e      	b.n	8002290 <HAL_DMA_Abort_IT+0xa4>
 8002272:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002276:	e00b      	b.n	8002290 <HAL_DMA_Abort_IT+0xa4>
 8002278:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800227c:	e008      	b.n	8002290 <HAL_DMA_Abort_IT+0xa4>
 800227e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002282:	e005      	b.n	8002290 <HAL_DMA_Abort_IT+0xa4>
 8002284:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002288:	e002      	b.n	8002290 <HAL_DMA_Abort_IT+0xa4>
 800228a:	2310      	movs	r3, #16
 800228c:	e000      	b.n	8002290 <HAL_DMA_Abort_IT+0xa4>
 800228e:	2301      	movs	r3, #1
 8002290:	4a11      	ldr	r2, [pc, #68]	@ (80022d8 <HAL_DMA_Abort_IT+0xec>)
 8002292:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
    } 
  }
  return status;
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40020008 	.word	0x40020008
 80022c4:	4002001c 	.word	0x4002001c
 80022c8:	40020030 	.word	0x40020030
 80022cc:	40020044 	.word	0x40020044
 80022d0:	40020058 	.word	0x40020058
 80022d4:	4002006c 	.word	0x4002006c
 80022d8:	40020000 	.word	0x40020000

080022dc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022ea:	b2db      	uxtb	r3, r3
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b08b      	sub	sp, #44	@ 0x2c
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230a:	e169      	b.n	80025e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800230c:	2201      	movs	r2, #1
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	429a      	cmp	r2, r3
 8002326:	f040 8158 	bne.w	80025da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4a9a      	ldr	r2, [pc, #616]	@ (8002598 <HAL_GPIO_Init+0x2a0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d05e      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
 8002334:	4a98      	ldr	r2, [pc, #608]	@ (8002598 <HAL_GPIO_Init+0x2a0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d875      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 800233a:	4a98      	ldr	r2, [pc, #608]	@ (800259c <HAL_GPIO_Init+0x2a4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d058      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
 8002340:	4a96      	ldr	r2, [pc, #600]	@ (800259c <HAL_GPIO_Init+0x2a4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d86f      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 8002346:	4a96      	ldr	r2, [pc, #600]	@ (80025a0 <HAL_GPIO_Init+0x2a8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d052      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
 800234c:	4a94      	ldr	r2, [pc, #592]	@ (80025a0 <HAL_GPIO_Init+0x2a8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d869      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 8002352:	4a94      	ldr	r2, [pc, #592]	@ (80025a4 <HAL_GPIO_Init+0x2ac>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d04c      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
 8002358:	4a92      	ldr	r2, [pc, #584]	@ (80025a4 <HAL_GPIO_Init+0x2ac>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d863      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 800235e:	4a92      	ldr	r2, [pc, #584]	@ (80025a8 <HAL_GPIO_Init+0x2b0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d046      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
 8002364:	4a90      	ldr	r2, [pc, #576]	@ (80025a8 <HAL_GPIO_Init+0x2b0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d85d      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 800236a:	2b12      	cmp	r3, #18
 800236c:	d82a      	bhi.n	80023c4 <HAL_GPIO_Init+0xcc>
 800236e:	2b12      	cmp	r3, #18
 8002370:	d859      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 8002372:	a201      	add	r2, pc, #4	@ (adr r2, 8002378 <HAL_GPIO_Init+0x80>)
 8002374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002378:	080023f3 	.word	0x080023f3
 800237c:	080023cd 	.word	0x080023cd
 8002380:	080023df 	.word	0x080023df
 8002384:	08002421 	.word	0x08002421
 8002388:	08002427 	.word	0x08002427
 800238c:	08002427 	.word	0x08002427
 8002390:	08002427 	.word	0x08002427
 8002394:	08002427 	.word	0x08002427
 8002398:	08002427 	.word	0x08002427
 800239c:	08002427 	.word	0x08002427
 80023a0:	08002427 	.word	0x08002427
 80023a4:	08002427 	.word	0x08002427
 80023a8:	08002427 	.word	0x08002427
 80023ac:	08002427 	.word	0x08002427
 80023b0:	08002427 	.word	0x08002427
 80023b4:	08002427 	.word	0x08002427
 80023b8:	08002427 	.word	0x08002427
 80023bc:	080023d5 	.word	0x080023d5
 80023c0:	080023e9 	.word	0x080023e9
 80023c4:	4a79      	ldr	r2, [pc, #484]	@ (80025ac <HAL_GPIO_Init+0x2b4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023ca:	e02c      	b.n	8002426 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	623b      	str	r3, [r7, #32]
          break;
 80023d2:	e029      	b.n	8002428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	3304      	adds	r3, #4
 80023da:	623b      	str	r3, [r7, #32]
          break;
 80023dc:	e024      	b.n	8002428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	3308      	adds	r3, #8
 80023e4:	623b      	str	r3, [r7, #32]
          break;
 80023e6:	e01f      	b.n	8002428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	330c      	adds	r3, #12
 80023ee:	623b      	str	r3, [r7, #32]
          break;
 80023f0:	e01a      	b.n	8002428 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023fa:	2304      	movs	r3, #4
 80023fc:	623b      	str	r3, [r7, #32]
          break;
 80023fe:	e013      	b.n	8002428 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d105      	bne.n	8002414 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002408:	2308      	movs	r3, #8
 800240a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	611a      	str	r2, [r3, #16]
          break;
 8002412:	e009      	b.n	8002428 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002414:	2308      	movs	r3, #8
 8002416:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69fa      	ldr	r2, [r7, #28]
 800241c:	615a      	str	r2, [r3, #20]
          break;
 800241e:	e003      	b.n	8002428 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002420:	2300      	movs	r3, #0
 8002422:	623b      	str	r3, [r7, #32]
          break;
 8002424:	e000      	b.n	8002428 <HAL_GPIO_Init+0x130>
          break;
 8002426:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	2bff      	cmp	r3, #255	@ 0xff
 800242c:	d801      	bhi.n	8002432 <HAL_GPIO_Init+0x13a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	e001      	b.n	8002436 <HAL_GPIO_Init+0x13e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3304      	adds	r3, #4
 8002436:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2bff      	cmp	r3, #255	@ 0xff
 800243c:	d802      	bhi.n	8002444 <HAL_GPIO_Init+0x14c>
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	e002      	b.n	800244a <HAL_GPIO_Init+0x152>
 8002444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002446:	3b08      	subs	r3, #8
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	210f      	movs	r1, #15
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	401a      	ands	r2, r3
 800245c:	6a39      	ldr	r1, [r7, #32]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	431a      	orrs	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 80b1 	beq.w	80025da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002478:	4b4d      	ldr	r3, [pc, #308]	@ (80025b0 <HAL_GPIO_Init+0x2b8>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	4a4c      	ldr	r2, [pc, #304]	@ (80025b0 <HAL_GPIO_Init+0x2b8>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6193      	str	r3, [r2, #24]
 8002484:	4b4a      	ldr	r3, [pc, #296]	@ (80025b0 <HAL_GPIO_Init+0x2b8>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002490:	4a48      	ldr	r2, [pc, #288]	@ (80025b4 <HAL_GPIO_Init+0x2bc>)
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	3302      	adds	r3, #2
 8002498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	220f      	movs	r2, #15
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4013      	ands	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a40      	ldr	r2, [pc, #256]	@ (80025b8 <HAL_GPIO_Init+0x2c0>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d013      	beq.n	80024e4 <HAL_GPIO_Init+0x1ec>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a3f      	ldr	r2, [pc, #252]	@ (80025bc <HAL_GPIO_Init+0x2c4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00d      	beq.n	80024e0 <HAL_GPIO_Init+0x1e8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a3e      	ldr	r2, [pc, #248]	@ (80025c0 <HAL_GPIO_Init+0x2c8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d007      	beq.n	80024dc <HAL_GPIO_Init+0x1e4>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a3d      	ldr	r2, [pc, #244]	@ (80025c4 <HAL_GPIO_Init+0x2cc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d101      	bne.n	80024d8 <HAL_GPIO_Init+0x1e0>
 80024d4:	2303      	movs	r3, #3
 80024d6:	e006      	b.n	80024e6 <HAL_GPIO_Init+0x1ee>
 80024d8:	2304      	movs	r3, #4
 80024da:	e004      	b.n	80024e6 <HAL_GPIO_Init+0x1ee>
 80024dc:	2302      	movs	r3, #2
 80024de:	e002      	b.n	80024e6 <HAL_GPIO_Init+0x1ee>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <HAL_GPIO_Init+0x1ee>
 80024e4:	2300      	movs	r3, #0
 80024e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e8:	f002 0203 	and.w	r2, r2, #3
 80024ec:	0092      	lsls	r2, r2, #2
 80024ee:	4093      	lsls	r3, r2
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024f6:	492f      	ldr	r1, [pc, #188]	@ (80025b4 <HAL_GPIO_Init+0x2bc>)
 80024f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3302      	adds	r3, #2
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d006      	beq.n	800251e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002510:	4b2d      	ldr	r3, [pc, #180]	@ (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	492c      	ldr	r1, [pc, #176]	@ (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	608b      	str	r3, [r1, #8]
 800251c:	e006      	b.n	800252c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800251e:	4b2a      	ldr	r3, [pc, #168]	@ (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	43db      	mvns	r3, r3
 8002526:	4928      	ldr	r1, [pc, #160]	@ (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002528:	4013      	ands	r3, r2
 800252a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d006      	beq.n	8002546 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002538:	4b23      	ldr	r3, [pc, #140]	@ (80025c8 <HAL_GPIO_Init+0x2d0>)
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	4922      	ldr	r1, [pc, #136]	@ (80025c8 <HAL_GPIO_Init+0x2d0>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	60cb      	str	r3, [r1, #12]
 8002544:	e006      	b.n	8002554 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002546:	4b20      	ldr	r3, [pc, #128]	@ (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	43db      	mvns	r3, r3
 800254e:	491e      	ldr	r1, [pc, #120]	@ (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002550:	4013      	ands	r3, r2
 8002552:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d006      	beq.n	800256e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002560:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	4918      	ldr	r1, [pc, #96]	@ (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
 800256c:	e006      	b.n	800257c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800256e:	4b16      	ldr	r3, [pc, #88]	@ (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	43db      	mvns	r3, r3
 8002576:	4914      	ldr	r1, [pc, #80]	@ (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002578:	4013      	ands	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d021      	beq.n	80025cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002588:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <HAL_GPIO_Init+0x2d0>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	490e      	ldr	r1, [pc, #56]	@ (80025c8 <HAL_GPIO_Init+0x2d0>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]
 8002594:	e021      	b.n	80025da <HAL_GPIO_Init+0x2e2>
 8002596:	bf00      	nop
 8002598:	10320000 	.word	0x10320000
 800259c:	10310000 	.word	0x10310000
 80025a0:	10220000 	.word	0x10220000
 80025a4:	10210000 	.word	0x10210000
 80025a8:	10120000 	.word	0x10120000
 80025ac:	10110000 	.word	0x10110000
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40010000 	.word	0x40010000
 80025b8:	40010800 	.word	0x40010800
 80025bc:	40010c00 	.word	0x40010c00
 80025c0:	40011000 	.word	0x40011000
 80025c4:	40011400 	.word	0x40011400
 80025c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025cc:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <HAL_GPIO_Init+0x304>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	4909      	ldr	r1, [pc, #36]	@ (80025fc <HAL_GPIO_Init+0x304>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	3301      	adds	r3, #1
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f47f ae8e 	bne.w	800230c <HAL_GPIO_Init+0x14>
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	372c      	adds	r7, #44	@ 0x2c
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	40010400 	.word	0x40010400

08002600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
 800260c:	4613      	mov	r3, r2
 800260e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002610:	787b      	ldrb	r3, [r7, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800261c:	e003      	b.n	8002626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	041a      	lsls	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	611a      	str	r2, [r3, #16]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e12b      	b.n	800289a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff fb7a 	bl	8001d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	@ 0x24
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002682:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002692:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002694:	f003 f90a 	bl	80058ac <HAL_RCC_GetPCLK1Freq>
 8002698:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4a81      	ldr	r2, [pc, #516]	@ (80028a4 <HAL_I2C_Init+0x274>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d807      	bhi.n	80026b4 <HAL_I2C_Init+0x84>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4a80      	ldr	r2, [pc, #512]	@ (80028a8 <HAL_I2C_Init+0x278>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	bf94      	ite	ls
 80026ac:	2301      	movls	r3, #1
 80026ae:	2300      	movhi	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e006      	b.n	80026c2 <HAL_I2C_Init+0x92>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4a7d      	ldr	r2, [pc, #500]	@ (80028ac <HAL_I2C_Init+0x27c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	bf94      	ite	ls
 80026bc:	2301      	movls	r3, #1
 80026be:	2300      	movhi	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e0e7      	b.n	800289a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4a78      	ldr	r2, [pc, #480]	@ (80028b0 <HAL_I2C_Init+0x280>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	0c9b      	lsrs	r3, r3, #18
 80026d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4a6a      	ldr	r2, [pc, #424]	@ (80028a4 <HAL_I2C_Init+0x274>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d802      	bhi.n	8002704 <HAL_I2C_Init+0xd4>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3301      	adds	r3, #1
 8002702:	e009      	b.n	8002718 <HAL_I2C_Init+0xe8>
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	4a69      	ldr	r2, [pc, #420]	@ (80028b4 <HAL_I2C_Init+0x284>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	099b      	lsrs	r3, r3, #6
 8002716:	3301      	adds	r3, #1
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	430b      	orrs	r3, r1
 800271e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800272a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	495c      	ldr	r1, [pc, #368]	@ (80028a4 <HAL_I2C_Init+0x274>)
 8002734:	428b      	cmp	r3, r1
 8002736:	d819      	bhi.n	800276c <HAL_I2C_Init+0x13c>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1e59      	subs	r1, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fbb1 f3f3 	udiv	r3, r1, r3
 8002746:	1c59      	adds	r1, r3, #1
 8002748:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800274c:	400b      	ands	r3, r1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <HAL_I2C_Init+0x138>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1e59      	subs	r1, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002760:	3301      	adds	r3, #1
 8002762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002766:	e051      	b.n	800280c <HAL_I2C_Init+0x1dc>
 8002768:	2304      	movs	r3, #4
 800276a:	e04f      	b.n	800280c <HAL_I2C_Init+0x1dc>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d111      	bne.n	8002798 <HAL_I2C_Init+0x168>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1e58      	subs	r0, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	440b      	add	r3, r1
 8002782:	fbb0 f3f3 	udiv	r3, r0, r3
 8002786:	3301      	adds	r3, #1
 8002788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	e012      	b.n	80027be <HAL_I2C_Init+0x18e>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1e58      	subs	r0, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6859      	ldr	r1, [r3, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	0099      	lsls	r1, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ae:	3301      	adds	r3, #1
 80027b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bf0c      	ite	eq
 80027b8:	2301      	moveq	r3, #1
 80027ba:	2300      	movne	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_I2C_Init+0x196>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e022      	b.n	800280c <HAL_I2C_Init+0x1dc>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10e      	bne.n	80027ec <HAL_I2C_Init+0x1bc>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1e58      	subs	r0, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6859      	ldr	r1, [r3, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	440b      	add	r3, r1
 80027dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027ea:	e00f      	b.n	800280c <HAL_I2C_Init+0x1dc>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1e58      	subs	r0, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6859      	ldr	r1, [r3, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	0099      	lsls	r1, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002802:	3301      	adds	r3, #1
 8002804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002808:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	6809      	ldr	r1, [r1, #0]
 8002810:	4313      	orrs	r3, r2
 8002812:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800283a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6911      	ldr	r1, [r2, #16]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68d2      	ldr	r2, [r2, #12]
 8002846:	4311      	orrs	r1, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	430b      	orrs	r3, r1
 800284e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	000186a0 	.word	0x000186a0
 80028a8:	001e847f 	.word	0x001e847f
 80028ac:	003d08ff 	.word	0x003d08ff
 80028b0:	431bde83 	.word	0x431bde83
 80028b4:	10624dd3 	.word	0x10624dd3

080028b8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ca:	2b80      	cmp	r3, #128	@ 0x80
 80028cc:	d103      	bne.n	80028d6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2200      	movs	r2, #0
 80028d4:	611a      	str	r2, [r3, #16]
  }
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	4608      	mov	r0, r1
 80028ea:	4611      	mov	r1, r2
 80028ec:	461a      	mov	r2, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	817b      	strh	r3, [r7, #10]
 80028f2:	460b      	mov	r3, r1
 80028f4:	813b      	strh	r3, [r7, #8]
 80028f6:	4613      	mov	r3, r2
 80028f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028fa:	f7ff fb3b 	bl	8001f74 <HAL_GetTick>
 80028fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b20      	cmp	r3, #32
 800290a:	f040 80d9 	bne.w	8002ac0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	2319      	movs	r3, #25
 8002914:	2201      	movs	r2, #1
 8002916:	496d      	ldr	r1, [pc, #436]	@ (8002acc <HAL_I2C_Mem_Write+0x1ec>)
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f002 f97b 	bl	8004c14 <I2C_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002924:	2302      	movs	r3, #2
 8002926:	e0cc      	b.n	8002ac2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_I2C_Mem_Write+0x56>
 8002932:	2302      	movs	r3, #2
 8002934:	e0c5      	b.n	8002ac2 <HAL_I2C_Mem_Write+0x1e2>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d007      	beq.n	800295c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800296a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2221      	movs	r2, #33	@ 0x21
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2240      	movs	r2, #64	@ 0x40
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a3a      	ldr	r2, [r7, #32]
 8002986:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800298c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a4d      	ldr	r2, [pc, #308]	@ (8002ad0 <HAL_I2C_Mem_Write+0x1f0>)
 800299c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800299e:	88f8      	ldrh	r0, [r7, #6]
 80029a0:	893a      	ldrh	r2, [r7, #8]
 80029a2:	8979      	ldrh	r1, [r7, #10]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	4603      	mov	r3, r0
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f001 ff0a 	bl	80047c8 <I2C_RequestMemoryWrite>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d052      	beq.n	8002a60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e081      	b.n	8002ac2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f002 fa40 	bl	8004e48 <I2C_WaitOnTXEFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00d      	beq.n	80029ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d107      	bne.n	80029e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e06b      	b.n	8002ac2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ee:	781a      	ldrb	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d11b      	bne.n	8002a60 <HAL_I2C_Mem_Write+0x180>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d017      	beq.n	8002a60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1aa      	bne.n	80029be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f002 fa33 	bl	8004ed8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00d      	beq.n	8002a94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d107      	bne.n	8002a90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e016      	b.n	8002ac2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	e000      	b.n	8002ac2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ac0:	2302      	movs	r3, #2
  }
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	00100002 	.word	0x00100002
 8002ad0:	ffff0000 	.word	0xffff0000

08002ad4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08c      	sub	sp, #48	@ 0x30
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	4608      	mov	r0, r1
 8002ade:	4611      	mov	r1, r2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	817b      	strh	r3, [r7, #10]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	813b      	strh	r3, [r7, #8]
 8002aea:	4613      	mov	r3, r2
 8002aec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002af2:	f7ff fa3f 	bl	8001f74 <HAL_GetTick>
 8002af6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	f040 8250 	bne.w	8002fa6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2319      	movs	r3, #25
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	4982      	ldr	r1, [pc, #520]	@ (8002d18 <HAL_I2C_Mem_Read+0x244>)
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f002 f87f 	bl	8004c14 <I2C_WaitOnFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e243      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_I2C_Mem_Read+0x5a>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e23c      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x4d4>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d007      	beq.n	8002b54 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2222      	movs	r2, #34	@ 0x22
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2240      	movs	r2, #64	@ 0x40
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002b84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4a62      	ldr	r2, [pc, #392]	@ (8002d1c <HAL_I2C_Mem_Read+0x248>)
 8002b94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b96:	88f8      	ldrh	r0, [r7, #6]
 8002b98:	893a      	ldrh	r2, [r7, #8]
 8002b9a:	8979      	ldrh	r1, [r7, #10]
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f001 fea4 	bl	80048f4 <I2C_RequestMemoryRead>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e1f8      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d113      	bne.n	8002be6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	e1cc      	b.n	8002f80 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d11e      	bne.n	8002c2c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bfc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bfe:	b672      	cpsid	i
}
 8002c00:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	61bb      	str	r3, [r7, #24]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c28:	b662      	cpsie	i
}
 8002c2a:	e035      	b.n	8002c98 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d11e      	bne.n	8002c72 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c44:	b672      	cpsid	i
}
 8002c46:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c6e:	b662      	cpsie	i
}
 8002c70:	e012      	b.n	8002c98 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c80:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c98:	e172      	b.n	8002f80 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	f200 811f 	bhi.w	8002ee2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d123      	bne.n	8002cf4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f002 f98b 	bl	8004fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e173      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cf2:	e145      	b.n	8002f80 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d152      	bne.n	8002da2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d02:	2200      	movs	r2, #0
 8002d04:	4906      	ldr	r1, [pc, #24]	@ (8002d20 <HAL_I2C_Mem_Read+0x24c>)
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f001 ff84 	bl	8004c14 <I2C_WaitOnFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e148      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x4d4>
 8002d16:	bf00      	nop
 8002d18:	00100002 	.word	0x00100002
 8002d1c:	ffff0000 	.word	0xffff0000
 8002d20:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002d24:	b672      	cpsid	i
}
 8002d26:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d6a:	b662      	cpsie	i
}
 8002d6c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002da0:	e0ee      	b.n	8002f80 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da8:	2200      	movs	r2, #0
 8002daa:	4981      	ldr	r1, [pc, #516]	@ (8002fb0 <HAL_I2C_Mem_Read+0x4dc>)
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f001 ff31 	bl	8004c14 <I2C_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0f5      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dcc:	b672      	cpsid	i
}
 8002dce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e02:	4b6c      	ldr	r3, [pc, #432]	@ (8002fb4 <HAL_I2C_Mem_Read+0x4e0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	08db      	lsrs	r3, r3, #3
 8002e08:	4a6b      	ldr	r2, [pc, #428]	@ (8002fb8 <HAL_I2C_Mem_Read+0x4e4>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	0a1a      	lsrs	r2, r3, #8
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	00da      	lsls	r2, r3, #3
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d118      	bne.n	8002e5a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	f043 0220 	orr.w	r2, r3, #32
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002e4a:	b662      	cpsie	i
}
 8002e4c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e0a6      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d1d9      	bne.n	8002e1c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002eaa:	b662      	cpsie	i
}
 8002eac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ee0:	e04e      	b.n	8002f80 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f002 f870 	bl	8004fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e058      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d124      	bne.n	8002f80 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d107      	bne.n	8002f4e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f4c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f47f ae88 	bne.w	8002c9a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e000      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
  }
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3728      	adds	r7, #40	@ 0x28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	00010004 	.word	0x00010004
 8002fb4:	20000090 	.word	0x20000090
 8002fb8:	14f8b589 	.word	0x14f8b589

08002fbc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fdc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d003      	beq.n	8002ff4 <HAL_I2C_EV_IRQHandler+0x38>
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	2b40      	cmp	r3, #64	@ 0x40
 8002ff0:	f040 80c1 	bne.w	8003176 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10d      	bne.n	800302a <HAL_I2C_EV_IRQHandler+0x6e>
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003014:	d003      	beq.n	800301e <HAL_I2C_EV_IRQHandler+0x62>
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800301c:	d101      	bne.n	8003022 <HAL_I2C_EV_IRQHandler+0x66>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <HAL_I2C_EV_IRQHandler+0x68>
 8003022:	2300      	movs	r3, #0
 8003024:	2b01      	cmp	r3, #1
 8003026:	f000 8132 	beq.w	800328e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00c      	beq.n	800304e <HAL_I2C_EV_IRQHandler+0x92>
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	0a5b      	lsrs	r3, r3, #9
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d006      	beq.n	800304e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f002 f84e 	bl	80050e2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fd99 	bl	8003b7e <I2C_Master_SB>
 800304c:	e092      	b.n	8003174 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	08db      	lsrs	r3, r3, #3
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <HAL_I2C_EV_IRQHandler+0xb2>
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	0a5b      	lsrs	r3, r3, #9
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fe0e 	bl	8003c88 <I2C_Master_ADD10>
 800306c:	e082      	b.n	8003174 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	085b      	lsrs	r3, r3, #1
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_I2C_EV_IRQHandler+0xd2>
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	0a5b      	lsrs	r3, r3, #9
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fe27 	bl	8003cda <I2C_Master_ADDR>
 800308c:	e072      	b.n	8003174 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d03b      	beq.n	8003112 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030a8:	f000 80f3 	beq.w	8003292 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	09db      	lsrs	r3, r3, #7
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00f      	beq.n	80030d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	0a9b      	lsrs	r3, r3, #10
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d009      	beq.n	80030d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	089b      	lsrs	r3, r3, #2
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d103      	bne.n	80030d8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f9f1 	bl	80034b8 <I2C_MasterTransmit_TXE>
 80030d6:	e04d      	b.n	8003174 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	089b      	lsrs	r3, r3, #2
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80d6 	beq.w	8003292 <HAL_I2C_EV_IRQHandler+0x2d6>
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	0a5b      	lsrs	r3, r3, #9
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 80cf 	beq.w	8003292 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030f4:	7bbb      	ldrb	r3, [r7, #14]
 80030f6:	2b21      	cmp	r3, #33	@ 0x21
 80030f8:	d103      	bne.n	8003102 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fa78 	bl	80035f0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003100:	e0c7      	b.n	8003292 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	2b40      	cmp	r3, #64	@ 0x40
 8003106:	f040 80c4 	bne.w	8003292 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fae6 	bl	80036dc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003110:	e0bf      	b.n	8003292 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800311c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003120:	f000 80b7 	beq.w	8003292 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	099b      	lsrs	r3, r3, #6
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00f      	beq.n	8003150 <HAL_I2C_EV_IRQHandler+0x194>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	0a9b      	lsrs	r3, r3, #10
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d009      	beq.n	8003150 <HAL_I2C_EV_IRQHandler+0x194>
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d103      	bne.n	8003150 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fb5f 	bl	800380c <I2C_MasterReceive_RXNE>
 800314e:	e011      	b.n	8003174 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 809a 	beq.w	8003292 <HAL_I2C_EV_IRQHandler+0x2d6>
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	0a5b      	lsrs	r3, r3, #9
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8093 	beq.w	8003292 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fc15 	bl	800399c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003172:	e08e      	b.n	8003292 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003174:	e08d      	b.n	8003292 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d004      	beq.n	8003188 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	e007      	b.n	8003198 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	085b      	lsrs	r3, r3, #1
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d012      	beq.n	80031ca <HAL_I2C_EV_IRQHandler+0x20e>
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	0a5b      	lsrs	r3, r3, #9
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00c      	beq.n	80031ca <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80031c0:	69b9      	ldr	r1, [r7, #24]
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 ffe0 	bl	8004188 <I2C_Slave_ADDR>
 80031c8:	e066      	b.n	8003298 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_I2C_EV_IRQHandler+0x22e>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	0a5b      	lsrs	r3, r3, #9
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f001 f81a 	bl	800421c <I2C_Slave_STOPF>
 80031e8:	e056      	b.n	8003298 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031ea:	7bbb      	ldrb	r3, [r7, #14]
 80031ec:	2b21      	cmp	r3, #33	@ 0x21
 80031ee:	d002      	beq.n	80031f6 <HAL_I2C_EV_IRQHandler+0x23a>
 80031f0:	7bbb      	ldrb	r3, [r7, #14]
 80031f2:	2b29      	cmp	r3, #41	@ 0x29
 80031f4:	d125      	bne.n	8003242 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	09db      	lsrs	r3, r3, #7
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00f      	beq.n	8003222 <HAL_I2C_EV_IRQHandler+0x266>
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	0a9b      	lsrs	r3, r3, #10
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <HAL_I2C_EV_IRQHandler+0x266>
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d103      	bne.n	8003222 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 fef8 	bl	8004010 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003220:	e039      	b.n	8003296 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	089b      	lsrs	r3, r3, #2
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d033      	beq.n	8003296 <HAL_I2C_EV_IRQHandler+0x2da>
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	0a5b      	lsrs	r3, r3, #9
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d02d      	beq.n	8003296 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 ff25 	bl	800408a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003240:	e029      	b.n	8003296 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	099b      	lsrs	r3, r3, #6
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00f      	beq.n	800326e <HAL_I2C_EV_IRQHandler+0x2b2>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	0a9b      	lsrs	r3, r3, #10
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <HAL_I2C_EV_IRQHandler+0x2b2>
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	089b      	lsrs	r3, r3, #2
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 ff2f 	bl	80040ca <I2C_SlaveReceive_RXNE>
 800326c:	e014      	b.n	8003298 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00e      	beq.n	8003298 <HAL_I2C_EV_IRQHandler+0x2dc>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	0a5b      	lsrs	r3, r3, #9
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 ff5d 	bl	8004146 <I2C_SlaveReceive_BTF>
 800328c:	e004      	b.n	8003298 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800328e:	bf00      	nop
 8003290:	e002      	b.n	8003298 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003292:	bf00      	nop
 8003294:	e000      	b.n	8003298 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003296:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b08a      	sub	sp, #40	@ 0x28
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80032b6:	2300      	movs	r3, #0
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032c0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	0a1b      	lsrs	r3, r3, #8
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d016      	beq.n	80032fc <HAL_I2C_ER_IRQHandler+0x5e>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	0a1b      	lsrs	r3, r3, #8
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d010      	beq.n	80032fc <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80032ea:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032fa:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	0a5b      	lsrs	r3, r3, #9
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <HAL_I2C_ER_IRQHandler+0x88>
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003316:	f043 0302 	orr.w	r3, r3, #2
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003324:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	0a9b      	lsrs	r3, r3, #10
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d03f      	beq.n	80033b2 <HAL_I2C_ER_IRQHandler+0x114>
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d039      	beq.n	80033b2 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800333e:	7efb      	ldrb	r3, [r7, #27]
 8003340:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003350:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003358:	7ebb      	ldrb	r3, [r7, #26]
 800335a:	2b20      	cmp	r3, #32
 800335c:	d112      	bne.n	8003384 <HAL_I2C_ER_IRQHandler+0xe6>
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10f      	bne.n	8003384 <HAL_I2C_ER_IRQHandler+0xe6>
 8003364:	7cfb      	ldrb	r3, [r7, #19]
 8003366:	2b21      	cmp	r3, #33	@ 0x21
 8003368:	d008      	beq.n	800337c <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800336a:	7cfb      	ldrb	r3, [r7, #19]
 800336c:	2b29      	cmp	r3, #41	@ 0x29
 800336e:	d005      	beq.n	800337c <HAL_I2C_ER_IRQHandler+0xde>
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	2b28      	cmp	r3, #40	@ 0x28
 8003374:	d106      	bne.n	8003384 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b21      	cmp	r3, #33	@ 0x21
 800337a:	d103      	bne.n	8003384 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f001 f87d 	bl	800447c <I2C_Slave_AF>
 8003382:	e016      	b.n	80033b2 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800338c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	f043 0304 	orr.w	r3, r3, #4
 8003394:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003396:	7efb      	ldrb	r3, [r7, #27]
 8003398:	2b10      	cmp	r3, #16
 800339a:	d002      	beq.n	80033a2 <HAL_I2C_ER_IRQHandler+0x104>
 800339c:	7efb      	ldrb	r3, [r7, #27]
 800339e:	2b40      	cmp	r3, #64	@ 0x40
 80033a0:	d107      	bne.n	80033b2 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033b0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	0adb      	lsrs	r3, r3, #11
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00e      	beq.n	80033dc <HAL_I2C_ER_IRQHandler+0x13e>
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	0a1b      	lsrs	r3, r3, #8
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	f043 0308 	orr.w	r3, r3, #8
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80033da:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f001 f8b8 	bl	8004564 <I2C_ITError>
  }
}
 80033f4:	bf00      	nop
 80033f6:	3728      	adds	r7, #40	@ 0x28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr

0800340e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr

08003420 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr

08003444 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	70fb      	strb	r3, [r7, #3]
 8003450:	4613      	mov	r3, r2
 8003452:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr

0800345e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr

08003470 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr

080034a6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d150      	bne.n	8003580 <I2C_MasterTransmit_TXE+0xc8>
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	2b21      	cmp	r3, #33	@ 0x21
 80034e2:	d14d      	bne.n	8003580 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d01d      	beq.n	8003526 <I2C_MasterTransmit_TXE+0x6e>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	d01a      	beq.n	8003526 <I2C_MasterTransmit_TXE+0x6e>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034f6:	d016      	beq.n	8003526 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003506:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2211      	movs	r2, #17
 800350c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff ff6c 	bl	80033fc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003524:	e060      	b.n	80035e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003534:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003544:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b40      	cmp	r3, #64	@ 0x40
 800355e:	d107      	bne.n	8003570 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff81 	bl	8003470 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800356e:	e03b      	b.n	80035e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ff3f 	bl	80033fc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800357e:	e033      	b.n	80035e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	2b21      	cmp	r3, #33	@ 0x21
 8003584:	d005      	beq.n	8003592 <I2C_MasterTransmit_TXE+0xda>
 8003586:	7bbb      	ldrb	r3, [r7, #14]
 8003588:	2b40      	cmp	r3, #64	@ 0x40
 800358a:	d12d      	bne.n	80035e8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b22      	cmp	r3, #34	@ 0x22
 8003590:	d12a      	bne.n	80035e8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d108      	bne.n	80035ae <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035aa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80035ac:	e01c      	b.n	80035e8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b40      	cmp	r3, #64	@ 0x40
 80035b8:	d103      	bne.n	80035c2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f88e 	bl	80036dc <I2C_MemoryTransmit_TXE_BTF>
}
 80035c0:	e012      	b.n	80035e8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c6:	781a      	ldrb	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80035e6:	e7ff      	b.n	80035e8 <I2C_MasterTransmit_TXE+0x130>
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b21      	cmp	r3, #33	@ 0x21
 8003608:	d164      	bne.n	80036d4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d012      	beq.n	800363a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003638:	e04c      	b.n	80036d4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b08      	cmp	r3, #8
 800363e:	d01d      	beq.n	800367c <I2C_MasterTransmit_BTF+0x8c>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b20      	cmp	r3, #32
 8003644:	d01a      	beq.n	800367c <I2C_MasterTransmit_BTF+0x8c>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800364c:	d016      	beq.n	800367c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800365c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2211      	movs	r2, #17
 8003662:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff fec1 	bl	80033fc <HAL_I2C_MasterTxCpltCallback>
}
 800367a:	e02b      	b.n	80036d4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800368a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800369a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b40      	cmp	r3, #64	@ 0x40
 80036b4:	d107      	bne.n	80036c6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff fed6 	bl	8003470 <HAL_I2C_MemTxCpltCallback>
}
 80036c4:	e006      	b.n	80036d4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff fe94 	bl	80033fc <HAL_I2C_MasterTxCpltCallback>
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d11d      	bne.n	8003730 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d10b      	bne.n	8003714 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003700:	b2da      	uxtb	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800370c:	1c9a      	adds	r2, r3, #2
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003712:	e077      	b.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003718:	b29b      	uxth	r3, r3
 800371a:	121b      	asrs	r3, r3, #8
 800371c:	b2da      	uxtb	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800372e:	e069      	b.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003734:	2b01      	cmp	r3, #1
 8003736:	d10b      	bne.n	8003750 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800373c:	b2da      	uxtb	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800374e:	e059      	b.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003754:	2b02      	cmp	r3, #2
 8003756:	d152      	bne.n	80037fe <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b22      	cmp	r3, #34	@ 0x22
 800375c:	d10d      	bne.n	800377a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800376c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003778:	e044      	b.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d015      	beq.n	80037b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b21      	cmp	r3, #33	@ 0x21
 8003788:	d112      	bne.n	80037b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378e:	781a      	ldrb	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80037ae:	e029      	b.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d124      	bne.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	2b21      	cmp	r3, #33	@ 0x21
 80037be:	d121      	bne.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037ce:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff fe3a 	bl	8003470 <HAL_I2C_MemTxCpltCallback>
}
 80037fc:	e002      	b.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff f85a 	bl	80028b8 <I2C_Flush_DR>
}
 8003804:	bf00      	nop
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b22      	cmp	r3, #34	@ 0x22
 800381e:	f040 80b9 	bne.w	8003994 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003826:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b03      	cmp	r3, #3
 8003834:	d921      	bls.n	800387a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b03      	cmp	r3, #3
 8003864:	f040 8096 	bne.w	8003994 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003876:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003878:	e08c      	b.n	8003994 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387e:	2b02      	cmp	r3, #2
 8003880:	d07f      	beq.n	8003982 <I2C_MasterReceive_RXNE+0x176>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d002      	beq.n	800388e <I2C_MasterReceive_RXNE+0x82>
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d179      	bne.n	8003982 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f001 fb6a 	bl	8004f68 <I2C_WaitOnSTOPRequestThroughIT>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d14c      	bne.n	8003934 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038a8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038b8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b40      	cmp	r3, #64	@ 0x40
 80038f2:	d10a      	bne.n	800390a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff fdbd 	bl	8003482 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003908:	e044      	b.n	8003994 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b08      	cmp	r3, #8
 8003916:	d002      	beq.n	800391e <I2C_MasterReceive_RXNE+0x112>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b20      	cmp	r3, #32
 800391c:	d103      	bne.n	8003926 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	@ 0x30
 8003924:	e002      	b.n	800392c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2212      	movs	r2, #18
 800392a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff fd6e 	bl	800340e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003932:	e02f      	b.n	8003994 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003942:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff fd8a 	bl	8003494 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003980:	e008      	b.n	8003994 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003990:	605a      	str	r2, [r3, #4]
}
 8003992:	e7ff      	b.n	8003994 <I2C_MasterReceive_RXNE+0x188>
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d11b      	bne.n	80039ec <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039c2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80039ea:	e0c4      	b.n	8003b76 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d129      	bne.n	8003a4a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a04:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d00a      	beq.n	8003a22 <I2C_MasterReceive_BTF+0x86>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d007      	beq.n	8003a22 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a20:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a48:	e095      	b.n	8003b76 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d17d      	bne.n	8003b50 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d002      	beq.n	8003a60 <I2C_MasterReceive_BTF+0xc4>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b10      	cmp	r3, #16
 8003a5e:	d108      	bne.n	8003a72 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e016      	b.n	8003aa0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d002      	beq.n	8003a7e <I2C_MasterReceive_BTF+0xe2>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d108      	bne.n	8003a90 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	e007      	b.n	8003aa0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a9e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003afa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b40      	cmp	r3, #64	@ 0x40
 8003b0e:	d10a      	bne.n	8003b26 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff fcaf 	bl	8003482 <HAL_I2C_MemRxCpltCallback>
}
 8003b24:	e027      	b.n	8003b76 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d002      	beq.n	8003b3a <I2C_MasterReceive_BTF+0x19e>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d103      	bne.n	8003b42 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b40:	e002      	b.n	8003b48 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2212      	movs	r2, #18
 8003b46:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff fc60 	bl	800340e <HAL_I2C_MasterRxCpltCallback>
}
 8003b4e:	e012      	b.n	8003b76 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691a      	ldr	r2, [r3, #16]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b40      	cmp	r3, #64	@ 0x40
 8003b90:	d117      	bne.n	8003bc2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003baa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003bac:	e067      	b.n	8003c7e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	611a      	str	r2, [r3, #16]
}
 8003bc0:	e05d      	b.n	8003c7e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bca:	d133      	bne.n	8003c34 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b21      	cmp	r3, #33	@ 0x21
 8003bd6:	d109      	bne.n	8003bec <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003be8:	611a      	str	r2, [r3, #16]
 8003bea:	e008      	b.n	8003bfe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d004      	beq.n	8003c10 <I2C_Master_SB+0x92>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d108      	bne.n	8003c22 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d032      	beq.n	8003c7e <I2C_Master_SB+0x100>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d02d      	beq.n	8003c7e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c30:	605a      	str	r2, [r3, #4]
}
 8003c32:	e024      	b.n	8003c7e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10e      	bne.n	8003c5a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	11db      	asrs	r3, r3, #7
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f003 0306 	and.w	r3, r3, #6
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f063 030f 	orn	r3, r3, #15
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	611a      	str	r2, [r3, #16]
}
 8003c58:	e011      	b.n	8003c7e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d10d      	bne.n	8003c7e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	11db      	asrs	r3, r3, #7
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f003 0306 	and.w	r3, r3, #6
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	f063 030e 	orn	r3, r3, #14
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	611a      	str	r2, [r3, #16]
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr

08003c88 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d004      	beq.n	8003cae <I2C_Master_ADD10+0x26>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d108      	bne.n	8003cc0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00c      	beq.n	8003cd0 <I2C_Master_ADD10+0x48>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cce:	605a      	str	r2, [r3, #4]
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b091      	sub	sp, #68	@ 0x44
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ce8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b22      	cmp	r3, #34	@ 0x22
 8003d02:	f040 8174 	bne.w	8003fee <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10f      	bne.n	8003d2e <I2C_Master_ADDR+0x54>
 8003d0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003d12:	2b40      	cmp	r3, #64	@ 0x40
 8003d14:	d10b      	bne.n	8003d2e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d16:	2300      	movs	r3, #0
 8003d18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2c:	e16b      	b.n	8004006 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d11d      	bne.n	8003d72 <I2C_Master_ADDR+0x98>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d3e:	d118      	bne.n	8003d72 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d40:	2300      	movs	r3, #0
 8003d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d64:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d70:	e149      	b.n	8004006 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d113      	bne.n	8003da4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	e120      	b.n	8003fe6 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	f040 808a 	bne.w	8003ec4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003db6:	d137      	bne.n	8003e28 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dc6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dd6:	d113      	bne.n	8003e00 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de8:	2300      	movs	r3, #0
 8003dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfe:	e0f2      	b.n	8003fe6 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e00:	2300      	movs	r3, #0
 8003e02:	623b      	str	r3, [r7, #32]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	623b      	str	r3, [r7, #32]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	623b      	str	r3, [r7, #32]
 8003e14:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	e0de      	b.n	8003fe6 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d02e      	beq.n	8003e8c <I2C_Master_ADDR+0x1b2>
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d02b      	beq.n	8003e8c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e36:	2b12      	cmp	r3, #18
 8003e38:	d102      	bne.n	8003e40 <I2C_Master_ADDR+0x166>
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d125      	bne.n	8003e8c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d00e      	beq.n	8003e64 <I2C_Master_ADDR+0x18a>
 8003e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d00b      	beq.n	8003e64 <I2C_Master_ADDR+0x18a>
 8003e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d008      	beq.n	8003e64 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	e007      	b.n	8003e74 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e72:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e74:	2300      	movs	r3, #0
 8003e76:	61fb      	str	r3, [r7, #28]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	e0ac      	b.n	8003fe6 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e9a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61bb      	str	r3, [r7, #24]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	61bb      	str	r3, [r7, #24]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	61bb      	str	r3, [r7, #24]
 8003eb0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	e090      	b.n	8003fe6 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d158      	bne.n	8003f80 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d021      	beq.n	8003f18 <I2C_Master_ADDR+0x23e>
 8003ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d01e      	beq.n	8003f18 <I2C_Master_ADDR+0x23e>
 8003eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d01b      	beq.n	8003f18 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	e012      	b.n	8003f3e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f26:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f4c:	d14b      	bne.n	8003fe6 <I2C_Master_ADDR+0x30c>
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f54:	d00b      	beq.n	8003f6e <I2C_Master_ADDR+0x294>
 8003f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d008      	beq.n	8003f6e <I2C_Master_ADDR+0x294>
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d005      	beq.n	8003f6e <I2C_Master_ADDR+0x294>
 8003f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d002      	beq.n	8003f6e <I2C_Master_ADDR+0x294>
 8003f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d13b      	bne.n	8003fe6 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	e032      	b.n	8003fe6 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f8e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f9e:	d117      	bne.n	8003fd0 <I2C_Master_ADDR+0x2f6>
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fa6:	d00b      	beq.n	8003fc0 <I2C_Master_ADDR+0x2e6>
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d008      	beq.n	8003fc0 <I2C_Master_ADDR+0x2e6>
 8003fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d005      	beq.n	8003fc0 <I2C_Master_ADDR+0x2e6>
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d002      	beq.n	8003fc0 <I2C_Master_ADDR+0x2e6>
 8003fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	d107      	bne.n	8003fd0 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003fce:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003fec:	e00b      	b.n	8004006 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	68bb      	ldr	r3, [r7, #8]
}
 8004004:	e7ff      	b.n	8004006 <I2C_Master_ADDR+0x32c>
 8004006:	bf00      	nop
 8004008:	3744      	adds	r7, #68	@ 0x44
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr

08004010 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800401e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d02b      	beq.n	8004082 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	781a      	ldrb	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d114      	bne.n	8004082 <I2C_SlaveTransmit_TXE+0x72>
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	2b29      	cmp	r3, #41	@ 0x29
 800405c:	d111      	bne.n	8004082 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800406c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2221      	movs	r2, #33	@ 0x21
 8004072:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2228      	movs	r2, #40	@ 0x28
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff f9cf 	bl	8003420 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d011      	beq.n	80040c0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	781a      	ldrb	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr

080040ca <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040d8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d02c      	beq.n	800413e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d114      	bne.n	800413e <I2C_SlaveReceive_RXNE+0x74>
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	2b2a      	cmp	r3, #42	@ 0x2a
 8004118:	d111      	bne.n	800413e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004128:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2222      	movs	r2, #34	@ 0x22
 800412e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2228      	movs	r2, #40	@ 0x28
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff f97a 	bl	8003432 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d012      	beq.n	800417e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041a2:	2b28      	cmp	r3, #40	@ 0x28
 80041a4:	d127      	bne.n	80041f6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041b4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	089b      	lsrs	r3, r3, #2
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	09db      	lsrs	r3, r3, #7
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	81bb      	strh	r3, [r7, #12]
 80041d8:	e002      	b.n	80041e0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80041e8:	89ba      	ldrh	r2, [r7, #12]
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	4619      	mov	r1, r3
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff f928 	bl	8003444 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041f4:	e00e      	b.n	8004214 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f6:	2300      	movs	r3, #0
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004214:	bf00      	nop
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800422a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800423a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800423c:	2300      	movs	r3, #0
 800423e:	60bb      	str	r3, [r7, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004268:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004278:	d172      	bne.n	8004360 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	2b22      	cmp	r3, #34	@ 0x22
 800427e:	d002      	beq.n	8004286 <I2C_Slave_STOPF+0x6a>
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	2b2a      	cmp	r3, #42	@ 0x2a
 8004284:	d135      	bne.n	80042f2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	b29a      	uxth	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	f043 0204 	orr.w	r2, r3, #4
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fe f80c 	bl	80022dc <HAL_DMA_GetState>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d049      	beq.n	800435e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ce:	4a69      	ldr	r2, [pc, #420]	@ (8004474 <I2C_Slave_STOPF+0x258>)
 80042d0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fd ff88 	bl	80021ec <HAL_DMA_Abort_IT>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d03d      	beq.n	800435e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80042ec:	4610      	mov	r0, r2
 80042ee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042f0:	e035      	b.n	800435e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	f043 0204 	orr.w	r2, r3, #4
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004324:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432a:	4618      	mov	r0, r3
 800432c:	f7fd ffd6 	bl	80022dc <HAL_DMA_GetState>
 8004330:	4603      	mov	r3, r0
 8004332:	2b01      	cmp	r3, #1
 8004334:	d014      	beq.n	8004360 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800433a:	4a4e      	ldr	r2, [pc, #312]	@ (8004474 <I2C_Slave_STOPF+0x258>)
 800433c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004342:	4618      	mov	r0, r3
 8004344:	f7fd ff52 	bl	80021ec <HAL_DMA_Abort_IT>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d008      	beq.n	8004360 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004358:	4610      	mov	r0, r2
 800435a:	4798      	blx	r3
 800435c:	e000      	b.n	8004360 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800435e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d03e      	beq.n	80043e8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b04      	cmp	r3, #4
 8004376:	d112      	bne.n	800439e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a8:	2b40      	cmp	r3, #64	@ 0x40
 80043aa:	d112      	bne.n	80043d2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e0:	f043 0204 	orr.w	r2, r3, #4
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f8b7 	bl	8004564 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80043f6:	e039      	b.n	800446c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80043fc:	d109      	bne.n	8004412 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2228      	movs	r2, #40	@ 0x28
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff f810 	bl	8003432 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b28      	cmp	r3, #40	@ 0x28
 800441c:	d111      	bne.n	8004442 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a15      	ldr	r2, [pc, #84]	@ (8004478 <I2C_Slave_STOPF+0x25c>)
 8004422:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff f80f 	bl	800345e <HAL_I2C_ListenCpltCallback>
}
 8004440:	e014      	b.n	800446c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004446:	2b22      	cmp	r3, #34	@ 0x22
 8004448:	d002      	beq.n	8004450 <I2C_Slave_STOPF+0x234>
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	2b22      	cmp	r3, #34	@ 0x22
 800444e:	d10d      	bne.n	800446c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fe ffe3 	bl	8003432 <HAL_I2C_SlaveRxCpltCallback>
}
 800446c:	bf00      	nop
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	08004ac5 	.word	0x08004ac5
 8004478:	ffff0000 	.word	0xffff0000

0800447c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800448a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004490:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d002      	beq.n	800449e <I2C_Slave_AF+0x22>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b20      	cmp	r3, #32
 800449c:	d129      	bne.n	80044f2 <I2C_Slave_AF+0x76>
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	2b28      	cmp	r3, #40	@ 0x28
 80044a2:	d126      	bne.n	80044f2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a2e      	ldr	r2, [pc, #184]	@ (8004560 <I2C_Slave_AF+0xe4>)
 80044a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044b8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044c2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044d2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fe ffb7 	bl	800345e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80044f0:	e031      	b.n	8004556 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
 80044f4:	2b21      	cmp	r3, #33	@ 0x21
 80044f6:	d129      	bne.n	800454c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a19      	ldr	r2, [pc, #100]	@ (8004560 <I2C_Slave_AF+0xe4>)
 80044fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2221      	movs	r2, #33	@ 0x21
 8004502:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004522:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800452c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800453c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fe f9ba 	bl	80028b8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7fe ff6b 	bl	8003420 <HAL_I2C_SlaveTxCpltCallback>
}
 800454a:	e004      	b.n	8004556 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004554:	615a      	str	r2, [r3, #20]
}
 8004556:	bf00      	nop
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	ffff0000 	.word	0xffff0000

08004564 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004572:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800457a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800457c:	7bbb      	ldrb	r3, [r7, #14]
 800457e:	2b10      	cmp	r3, #16
 8004580:	d002      	beq.n	8004588 <I2C_ITError+0x24>
 8004582:	7bbb      	ldrb	r3, [r7, #14]
 8004584:	2b40      	cmp	r3, #64	@ 0x40
 8004586:	d10a      	bne.n	800459e <I2C_ITError+0x3a>
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	2b22      	cmp	r3, #34	@ 0x22
 800458c:	d107      	bne.n	800459e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800459c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045a4:	2b28      	cmp	r3, #40	@ 0x28
 80045a6:	d107      	bne.n	80045b8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2228      	movs	r2, #40	@ 0x28
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80045b6:	e015      	b.n	80045e4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045c6:	d00a      	beq.n	80045de <I2C_ITError+0x7a>
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	2b60      	cmp	r3, #96	@ 0x60
 80045cc:	d007      	beq.n	80045de <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045f2:	d162      	bne.n	80046ba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004602:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004608:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b01      	cmp	r3, #1
 8004610:	d020      	beq.n	8004654 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004616:	4a6a      	ldr	r2, [pc, #424]	@ (80047c0 <I2C_ITError+0x25c>)
 8004618:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800461e:	4618      	mov	r0, r3
 8004620:	f7fd fde4 	bl	80021ec <HAL_DMA_Abort_IT>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 8089 	beq.w	800473e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0201 	bic.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800464e:	4610      	mov	r0, r2
 8004650:	4798      	blx	r3
 8004652:	e074      	b.n	800473e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004658:	4a59      	ldr	r2, [pc, #356]	@ (80047c0 <I2C_ITError+0x25c>)
 800465a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004660:	4618      	mov	r0, r3
 8004662:	f7fd fdc3 	bl	80021ec <HAL_DMA_Abort_IT>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d068      	beq.n	800473e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004676:	2b40      	cmp	r3, #64	@ 0x40
 8004678:	d10b      	bne.n	8004692 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0201 	bic.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80046b4:	4610      	mov	r0, r2
 80046b6:	4798      	blx	r3
 80046b8:	e041      	b.n	800473e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b60      	cmp	r3, #96	@ 0x60
 80046c4:	d125      	bne.n	8004712 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046de:	2b40      	cmp	r3, #64	@ 0x40
 80046e0:	d10b      	bne.n	80046fa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0201 	bic.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fe fecb 	bl	80034a6 <HAL_I2C_AbortCpltCallback>
 8004710:	e015      	b.n	800473e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471c:	2b40      	cmp	r3, #64	@ 0x40
 800471e:	d10b      	bne.n	8004738 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7fe feab 	bl	8003494 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10e      	bne.n	800476c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004754:	2b00      	cmp	r3, #0
 8004756:	d109      	bne.n	800476c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800475e:	2b00      	cmp	r3, #0
 8004760:	d104      	bne.n	800476c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800477a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004782:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b04      	cmp	r3, #4
 800478e:	d113      	bne.n	80047b8 <I2C_ITError+0x254>
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b28      	cmp	r3, #40	@ 0x28
 8004794:	d110      	bne.n	80047b8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a0a      	ldr	r2, [pc, #40]	@ (80047c4 <I2C_ITError+0x260>)
 800479a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fe fe53 	bl	800345e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	08004ac5 	.word	0x08004ac5
 80047c4:	ffff0000 	.word	0xffff0000

080047c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	4608      	mov	r0, r1
 80047d2:	4611      	mov	r1, r2
 80047d4:	461a      	mov	r2, r3
 80047d6:	4603      	mov	r3, r0
 80047d8:	817b      	strh	r3, [r7, #10]
 80047da:	460b      	mov	r3, r1
 80047dc:	813b      	strh	r3, [r7, #8]
 80047de:	4613      	mov	r3, r2
 80047e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fa08 	bl	8004c14 <I2C_WaitOnFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00d      	beq.n	8004826 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004818:	d103      	bne.n	8004822 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004820:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e05f      	b.n	80048e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004826:	897b      	ldrh	r3, [r7, #10]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004834:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	6a3a      	ldr	r2, [r7, #32]
 800483a:	492d      	ldr	r1, [pc, #180]	@ (80048f0 <I2C_RequestMemoryWrite+0x128>)
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 fa63 	bl	8004d08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e04c      	b.n	80048e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004864:	6a39      	ldr	r1, [r7, #32]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 faee 	bl	8004e48 <I2C_WaitOnTXEFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00d      	beq.n	800488e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	2b04      	cmp	r3, #4
 8004878:	d107      	bne.n	800488a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004888:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e02b      	b.n	80048e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d105      	bne.n	80048a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004894:	893b      	ldrh	r3, [r7, #8]
 8004896:	b2da      	uxtb	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	611a      	str	r2, [r3, #16]
 800489e:	e021      	b.n	80048e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048a0:	893b      	ldrh	r3, [r7, #8]
 80048a2:	0a1b      	lsrs	r3, r3, #8
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b0:	6a39      	ldr	r1, [r7, #32]
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 fac8 	bl	8004e48 <I2C_WaitOnTXEFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00d      	beq.n	80048da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d107      	bne.n	80048d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e005      	b.n	80048e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048da:	893b      	ldrh	r3, [r7, #8]
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	00010002 	.word	0x00010002

080048f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	4608      	mov	r0, r1
 80048fe:	4611      	mov	r1, r2
 8004900:	461a      	mov	r2, r3
 8004902:	4603      	mov	r3, r0
 8004904:	817b      	strh	r3, [r7, #10]
 8004906:	460b      	mov	r3, r1
 8004908:	813b      	strh	r3, [r7, #8]
 800490a:	4613      	mov	r3, r2
 800490c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800491c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800492c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	2200      	movs	r2, #0
 8004936:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 f96a 	bl	8004c14 <I2C_WaitOnFlagUntilTimeout>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00d      	beq.n	8004962 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004950:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004954:	d103      	bne.n	800495e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800495c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e0aa      	b.n	8004ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004962:	897b      	ldrh	r3, [r7, #10]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	461a      	mov	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004970:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	6a3a      	ldr	r2, [r7, #32]
 8004976:	4952      	ldr	r1, [pc, #328]	@ (8004ac0 <I2C_RequestMemoryRead+0x1cc>)
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f9c5 	bl	8004d08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e097      	b.n	8004ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800499e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049a0:	6a39      	ldr	r1, [r7, #32]
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 fa50 	bl	8004e48 <I2C_WaitOnTXEFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00d      	beq.n	80049ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d107      	bne.n	80049c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e076      	b.n	8004ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049ca:	88fb      	ldrh	r3, [r7, #6]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d105      	bne.n	80049dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049d0:	893b      	ldrh	r3, [r7, #8]
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	611a      	str	r2, [r3, #16]
 80049da:	e021      	b.n	8004a20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049dc:	893b      	ldrh	r3, [r7, #8]
 80049de:	0a1b      	lsrs	r3, r3, #8
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ec:	6a39      	ldr	r1, [r7, #32]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fa2a 	bl	8004e48 <I2C_WaitOnTXEFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00d      	beq.n	8004a16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d107      	bne.n	8004a12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e050      	b.n	8004ab8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a16:	893b      	ldrh	r3, [r7, #8]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a22:	6a39      	ldr	r1, [r7, #32]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 fa0f 	bl	8004e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00d      	beq.n	8004a4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d107      	bne.n	8004a48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e035      	b.n	8004ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 f8d3 	bl	8004c14 <I2C_WaitOnFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00d      	beq.n	8004a90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a82:	d103      	bne.n	8004a8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e013      	b.n	8004ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a90:	897b      	ldrh	r3, [r7, #10]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa2:	6a3a      	ldr	r2, [r7, #32]
 8004aa4:	4906      	ldr	r1, [pc, #24]	@ (8004ac0 <I2C_RequestMemoryRead+0x1cc>)
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f92e 	bl	8004d08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	00010002 	.word	0x00010002

08004ac4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004adc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ade:	4b4b      	ldr	r3, [pc, #300]	@ (8004c0c <I2C_DMAAbort+0x148>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	08db      	lsrs	r3, r3, #3
 8004ae4:	4a4a      	ldr	r2, [pc, #296]	@ (8004c10 <I2C_DMAAbort+0x14c>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	0a1a      	lsrs	r2, r3, #8
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	00da      	lsls	r2, r3, #3
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b02:	f043 0220 	orr.w	r2, r3, #32
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004b0a:	e00a      	b.n	8004b22 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b20:	d0ea      	beq.n	8004af8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b2e:	2200      	movs	r2, #0
 8004b30:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3e:	2200      	movs	r2, #0
 8004b40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b50:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2200      	movs	r2, #0
 8004b56:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b64:	2200      	movs	r2, #0
 8004b66:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b74:	2200      	movs	r2, #0
 8004b76:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0201 	bic.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b60      	cmp	r3, #96	@ 0x60
 8004b92:	d10e      	bne.n	8004bb2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004baa:	6978      	ldr	r0, [r7, #20]
 8004bac:	f7fe fc7b 	bl	80034a6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bb0:	e027      	b.n	8004c02 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bb2:	7cfb      	ldrb	r3, [r7, #19]
 8004bb4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004bb8:	2b28      	cmp	r3, #40	@ 0x28
 8004bba:	d117      	bne.n	8004bec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bda:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	2200      	movs	r2, #0
 8004be0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2228      	movs	r2, #40	@ 0x28
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004bea:	e007      	b.n	8004bfc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004bfc:	6978      	ldr	r0, [r7, #20]
 8004bfe:	f7fe fc49 	bl	8003494 <HAL_I2C_ErrorCallback>
}
 8004c02:	bf00      	nop
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000090 	.word	0x20000090
 8004c10:	14f8b589 	.word	0x14f8b589

08004c14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	4613      	mov	r3, r2
 8004c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c24:	e048      	b.n	8004cb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d044      	beq.n	8004cb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2e:	f7fd f9a1 	bl	8001f74 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d302      	bcc.n	8004c44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d139      	bne.n	8004cb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	0c1b      	lsrs	r3, r3, #16
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d10d      	bne.n	8004c6a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	43da      	mvns	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	e00c      	b.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	43da      	mvns	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4013      	ands	r3, r2
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d116      	bne.n	8004cb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca4:	f043 0220 	orr.w	r2, r3, #32
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e023      	b.n	8004d00 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	0c1b      	lsrs	r3, r3, #16
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d10d      	bne.n	8004cde <I2C_WaitOnFlagUntilTimeout+0xca>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	43da      	mvns	r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	461a      	mov	r2, r3
 8004cdc:	e00c      	b.n	8004cf8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	43da      	mvns	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	bf0c      	ite	eq
 8004cf0:	2301      	moveq	r3, #1
 8004cf2:	2300      	movne	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	79fb      	ldrb	r3, [r7, #7]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d093      	beq.n	8004c26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d16:	e071      	b.n	8004dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d26:	d123      	bne.n	8004d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d36:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5c:	f043 0204 	orr.w	r2, r3, #4
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e067      	b.n	8004e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d76:	d041      	beq.n	8004dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d78:	f7fd f8fc 	bl	8001f74 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d302      	bcc.n	8004d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d136      	bne.n	8004dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	0c1b      	lsrs	r3, r3, #16
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d10c      	bne.n	8004db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	43da      	mvns	r2, r3
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4013      	ands	r3, r2
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bf14      	ite	ne
 8004daa:	2301      	movne	r3, #1
 8004dac:	2300      	moveq	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	e00b      	b.n	8004dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	43da      	mvns	r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bf14      	ite	ne
 8004dc4:	2301      	movne	r3, #1
 8004dc6:	2300      	moveq	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d016      	beq.n	8004dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de8:	f043 0220 	orr.w	r2, r3, #32
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e021      	b.n	8004e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	0c1b      	lsrs	r3, r3, #16
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d10c      	bne.n	8004e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	43da      	mvns	r2, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	4013      	ands	r3, r2
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bf14      	ite	ne
 8004e18:	2301      	movne	r3, #1
 8004e1a:	2300      	moveq	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	e00b      	b.n	8004e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	43da      	mvns	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	bf14      	ite	ne
 8004e32:	2301      	movne	r3, #1
 8004e34:	2300      	moveq	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f47f af6d 	bne.w	8004d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e54:	e034      	b.n	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 f915 	bl	8005086 <I2C_IsAcknowledgeFailed>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e034      	b.n	8004ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6c:	d028      	beq.n	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6e:	f7fd f881 	bl	8001f74 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d11d      	bne.n	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8e:	2b80      	cmp	r3, #128	@ 0x80
 8004e90:	d016      	beq.n	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eac:	f043 0220 	orr.w	r2, r3, #32
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e007      	b.n	8004ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eca:	2b80      	cmp	r3, #128	@ 0x80
 8004ecc:	d1c3      	bne.n	8004e56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ee4:	e034      	b.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f8cd 	bl	8005086 <I2C_IsAcknowledgeFailed>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e034      	b.n	8004f60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efc:	d028      	beq.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efe:	f7fd f839 	bl	8001f74 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d302      	bcc.n	8004f14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d11d      	bne.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d016      	beq.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3c:	f043 0220 	orr.w	r2, r3, #32
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e007      	b.n	8004f60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f003 0304 	and.w	r3, r3, #4
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d1c3      	bne.n	8004ee6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f74:	4b13      	ldr	r3, [pc, #76]	@ (8004fc4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	08db      	lsrs	r3, r3, #3
 8004f7a:	4a13      	ldr	r2, [pc, #76]	@ (8004fc8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f80:	0a1a      	lsrs	r2, r3, #8
 8004f82:	4613      	mov	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d107      	bne.n	8004fa6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	f043 0220 	orr.w	r2, r3, #32
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e008      	b.n	8004fb8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fb4:	d0e9      	beq.n	8004f8a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	20000090 	.word	0x20000090
 8004fc8:	14f8b589 	.word	0x14f8b589

08004fcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fd8:	e049      	b.n	800506e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b10      	cmp	r3, #16
 8004fe6:	d119      	bne.n	800501c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0210 	mvn.w	r2, #16
 8004ff0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e030      	b.n	800507e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501c:	f7fc ffaa 	bl	8001f74 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	429a      	cmp	r2, r3
 800502a:	d302      	bcc.n	8005032 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d11d      	bne.n	800506e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503c:	2b40      	cmp	r3, #64	@ 0x40
 800503e:	d016      	beq.n	800506e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	f043 0220 	orr.w	r2, r3, #32
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e007      	b.n	800507e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005078:	2b40      	cmp	r3, #64	@ 0x40
 800507a:	d1ae      	bne.n	8004fda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800509c:	d11b      	bne.n	80050d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	f043 0204 	orr.w	r2, r3, #4
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr

080050e2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ee:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80050f2:	d103      	bne.n	80050fc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80050fa:	e007      	b.n	800510c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005100:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005104:	d102      	bne.n	800510c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2208      	movs	r2, #8
 800510a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr
	...

08005118 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e272      	b.n	8005610 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 8087 	beq.w	8005246 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005138:	4b92      	ldr	r3, [pc, #584]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f003 030c 	and.w	r3, r3, #12
 8005140:	2b04      	cmp	r3, #4
 8005142:	d00c      	beq.n	800515e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005144:	4b8f      	ldr	r3, [pc, #572]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f003 030c 	and.w	r3, r3, #12
 800514c:	2b08      	cmp	r3, #8
 800514e:	d112      	bne.n	8005176 <HAL_RCC_OscConfig+0x5e>
 8005150:	4b8c      	ldr	r3, [pc, #560]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800515c:	d10b      	bne.n	8005176 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800515e:	4b89      	ldr	r3, [pc, #548]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d06c      	beq.n	8005244 <HAL_RCC_OscConfig+0x12c>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d168      	bne.n	8005244 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e24c      	b.n	8005610 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800517e:	d106      	bne.n	800518e <HAL_RCC_OscConfig+0x76>
 8005180:	4b80      	ldr	r3, [pc, #512]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a7f      	ldr	r2, [pc, #508]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 8005186:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	e02e      	b.n	80051ec <HAL_RCC_OscConfig+0xd4>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10c      	bne.n	80051b0 <HAL_RCC_OscConfig+0x98>
 8005196:	4b7b      	ldr	r3, [pc, #492]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a7a      	ldr	r2, [pc, #488]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 800519c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	4b78      	ldr	r3, [pc, #480]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a77      	ldr	r2, [pc, #476]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 80051a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e01d      	b.n	80051ec <HAL_RCC_OscConfig+0xd4>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051b8:	d10c      	bne.n	80051d4 <HAL_RCC_OscConfig+0xbc>
 80051ba:	4b72      	ldr	r3, [pc, #456]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a71      	ldr	r2, [pc, #452]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 80051c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	4b6f      	ldr	r3, [pc, #444]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a6e      	ldr	r2, [pc, #440]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 80051cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	e00b      	b.n	80051ec <HAL_RCC_OscConfig+0xd4>
 80051d4:	4b6b      	ldr	r3, [pc, #428]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a6a      	ldr	r2, [pc, #424]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 80051da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	4b68      	ldr	r3, [pc, #416]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a67      	ldr	r2, [pc, #412]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 80051e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d013      	beq.n	800521c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f4:	f7fc febe 	bl	8001f74 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051fc:	f7fc feba 	bl	8001f74 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b64      	cmp	r3, #100	@ 0x64
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e200      	b.n	8005610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800520e:	4b5d      	ldr	r3, [pc, #372]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0xe4>
 800521a:	e014      	b.n	8005246 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521c:	f7fc feaa 	bl	8001f74 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005224:	f7fc fea6 	bl	8001f74 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b64      	cmp	r3, #100	@ 0x64
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e1ec      	b.n	8005610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005236:	4b53      	ldr	r3, [pc, #332]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f0      	bne.n	8005224 <HAL_RCC_OscConfig+0x10c>
 8005242:	e000      	b.n	8005246 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d063      	beq.n	800531a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005252:	4b4c      	ldr	r3, [pc, #304]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f003 030c 	and.w	r3, r3, #12
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00b      	beq.n	8005276 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800525e:	4b49      	ldr	r3, [pc, #292]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f003 030c 	and.w	r3, r3, #12
 8005266:	2b08      	cmp	r3, #8
 8005268:	d11c      	bne.n	80052a4 <HAL_RCC_OscConfig+0x18c>
 800526a:	4b46      	ldr	r3, [pc, #280]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d116      	bne.n	80052a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005276:	4b43      	ldr	r3, [pc, #268]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d005      	beq.n	800528e <HAL_RCC_OscConfig+0x176>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d001      	beq.n	800528e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e1c0      	b.n	8005610 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800528e:	4b3d      	ldr	r3, [pc, #244]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	4939      	ldr	r1, [pc, #228]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052a2:	e03a      	b.n	800531a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d020      	beq.n	80052ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052ac:	4b36      	ldr	r3, [pc, #216]	@ (8005388 <HAL_RCC_OscConfig+0x270>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b2:	f7fc fe5f 	bl	8001f74 <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052ba:	f7fc fe5b 	bl	8001f74 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e1a1      	b.n	8005610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	4927      	ldr	r1, [pc, #156]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	600b      	str	r3, [r1, #0]
 80052ec:	e015      	b.n	800531a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052ee:	4b26      	ldr	r3, [pc, #152]	@ (8005388 <HAL_RCC_OscConfig+0x270>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f4:	f7fc fe3e 	bl	8001f74 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052fc:	f7fc fe3a 	bl	8001f74 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e180      	b.n	8005610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800530e:	4b1d      	ldr	r3, [pc, #116]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f0      	bne.n	80052fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d03a      	beq.n	800539c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d019      	beq.n	8005362 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800532e:	4b17      	ldr	r3, [pc, #92]	@ (800538c <HAL_RCC_OscConfig+0x274>)
 8005330:	2201      	movs	r2, #1
 8005332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005334:	f7fc fe1e 	bl	8001f74 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800533c:	f7fc fe1a 	bl	8001f74 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e160      	b.n	8005610 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800534e:	4b0d      	ldr	r3, [pc, #52]	@ (8005384 <HAL_RCC_OscConfig+0x26c>)
 8005350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0f0      	beq.n	800533c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800535a:	2001      	movs	r0, #1
 800535c:	f000 faba 	bl	80058d4 <RCC_Delay>
 8005360:	e01c      	b.n	800539c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005362:	4b0a      	ldr	r3, [pc, #40]	@ (800538c <HAL_RCC_OscConfig+0x274>)
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005368:	f7fc fe04 	bl	8001f74 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800536e:	e00f      	b.n	8005390 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005370:	f7fc fe00 	bl	8001f74 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d908      	bls.n	8005390 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e146      	b.n	8005610 <HAL_RCC_OscConfig+0x4f8>
 8005382:	bf00      	nop
 8005384:	40021000 	.word	0x40021000
 8005388:	42420000 	.word	0x42420000
 800538c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005390:	4b92      	ldr	r3, [pc, #584]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 8005392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e9      	bne.n	8005370 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80a6 	beq.w	80054f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053aa:	2300      	movs	r3, #0
 80053ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ae:	4b8b      	ldr	r3, [pc, #556]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10d      	bne.n	80053d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ba:	4b88      	ldr	r3, [pc, #544]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	4a87      	ldr	r2, [pc, #540]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 80053c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053c4:	61d3      	str	r3, [r2, #28]
 80053c6:	4b85      	ldr	r3, [pc, #532]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ce:	60bb      	str	r3, [r7, #8]
 80053d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053d2:	2301      	movs	r3, #1
 80053d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d6:	4b82      	ldr	r3, [pc, #520]	@ (80055e0 <HAL_RCC_OscConfig+0x4c8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d118      	bne.n	8005414 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053e2:	4b7f      	ldr	r3, [pc, #508]	@ (80055e0 <HAL_RCC_OscConfig+0x4c8>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a7e      	ldr	r2, [pc, #504]	@ (80055e0 <HAL_RCC_OscConfig+0x4c8>)
 80053e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ee:	f7fc fdc1 	bl	8001f74 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053f6:	f7fc fdbd 	bl	8001f74 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b64      	cmp	r3, #100	@ 0x64
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e103      	b.n	8005610 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005408:	4b75      	ldr	r3, [pc, #468]	@ (80055e0 <HAL_RCC_OscConfig+0x4c8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0f0      	beq.n	80053f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d106      	bne.n	800542a <HAL_RCC_OscConfig+0x312>
 800541c:	4b6f      	ldr	r3, [pc, #444]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	4a6e      	ldr	r2, [pc, #440]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 8005422:	f043 0301 	orr.w	r3, r3, #1
 8005426:	6213      	str	r3, [r2, #32]
 8005428:	e02d      	b.n	8005486 <HAL_RCC_OscConfig+0x36e>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10c      	bne.n	800544c <HAL_RCC_OscConfig+0x334>
 8005432:	4b6a      	ldr	r3, [pc, #424]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	4a69      	ldr	r2, [pc, #420]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 8005438:	f023 0301 	bic.w	r3, r3, #1
 800543c:	6213      	str	r3, [r2, #32]
 800543e:	4b67      	ldr	r3, [pc, #412]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	4a66      	ldr	r2, [pc, #408]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 8005444:	f023 0304 	bic.w	r3, r3, #4
 8005448:	6213      	str	r3, [r2, #32]
 800544a:	e01c      	b.n	8005486 <HAL_RCC_OscConfig+0x36e>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	2b05      	cmp	r3, #5
 8005452:	d10c      	bne.n	800546e <HAL_RCC_OscConfig+0x356>
 8005454:	4b61      	ldr	r3, [pc, #388]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	4a60      	ldr	r2, [pc, #384]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 800545a:	f043 0304 	orr.w	r3, r3, #4
 800545e:	6213      	str	r3, [r2, #32]
 8005460:	4b5e      	ldr	r3, [pc, #376]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	4a5d      	ldr	r2, [pc, #372]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 8005466:	f043 0301 	orr.w	r3, r3, #1
 800546a:	6213      	str	r3, [r2, #32]
 800546c:	e00b      	b.n	8005486 <HAL_RCC_OscConfig+0x36e>
 800546e:	4b5b      	ldr	r3, [pc, #364]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	4a5a      	ldr	r2, [pc, #360]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 8005474:	f023 0301 	bic.w	r3, r3, #1
 8005478:	6213      	str	r3, [r2, #32]
 800547a:	4b58      	ldr	r3, [pc, #352]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	4a57      	ldr	r2, [pc, #348]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 8005480:	f023 0304 	bic.w	r3, r3, #4
 8005484:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d015      	beq.n	80054ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800548e:	f7fc fd71 	bl	8001f74 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005494:	e00a      	b.n	80054ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005496:	f7fc fd6d 	bl	8001f74 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e0b1      	b.n	8005610 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ac:	4b4b      	ldr	r3, [pc, #300]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0ee      	beq.n	8005496 <HAL_RCC_OscConfig+0x37e>
 80054b8:	e014      	b.n	80054e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ba:	f7fc fd5b 	bl	8001f74 <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054c0:	e00a      	b.n	80054d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c2:	f7fc fd57 	bl	8001f74 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e09b      	b.n	8005610 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054d8:	4b40      	ldr	r3, [pc, #256]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1ee      	bne.n	80054c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80054e4:	7dfb      	ldrb	r3, [r7, #23]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d105      	bne.n	80054f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ea:	4b3c      	ldr	r3, [pc, #240]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	4a3b      	ldr	r2, [pc, #236]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 80054f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 8087 	beq.w	800560e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005500:	4b36      	ldr	r3, [pc, #216]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f003 030c 	and.w	r3, r3, #12
 8005508:	2b08      	cmp	r3, #8
 800550a:	d061      	beq.n	80055d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	2b02      	cmp	r3, #2
 8005512:	d146      	bne.n	80055a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005514:	4b33      	ldr	r3, [pc, #204]	@ (80055e4 <HAL_RCC_OscConfig+0x4cc>)
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551a:	f7fc fd2b 	bl	8001f74 <HAL_GetTick>
 800551e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005520:	e008      	b.n	8005534 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005522:	f7fc fd27 	bl	8001f74 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e06d      	b.n	8005610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005534:	4b29      	ldr	r3, [pc, #164]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1f0      	bne.n	8005522 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005548:	d108      	bne.n	800555c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800554a:	4b24      	ldr	r3, [pc, #144]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	4921      	ldr	r1, [pc, #132]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 8005558:	4313      	orrs	r3, r2
 800555a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800555c:	4b1f      	ldr	r3, [pc, #124]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a19      	ldr	r1, [r3, #32]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556c:	430b      	orrs	r3, r1
 800556e:	491b      	ldr	r1, [pc, #108]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 8005570:	4313      	orrs	r3, r2
 8005572:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005574:	4b1b      	ldr	r3, [pc, #108]	@ (80055e4 <HAL_RCC_OscConfig+0x4cc>)
 8005576:	2201      	movs	r2, #1
 8005578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800557a:	f7fc fcfb 	bl	8001f74 <HAL_GetTick>
 800557e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005582:	f7fc fcf7 	bl	8001f74 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e03d      	b.n	8005610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005594:	4b11      	ldr	r3, [pc, #68]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f0      	beq.n	8005582 <HAL_RCC_OscConfig+0x46a>
 80055a0:	e035      	b.n	800560e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055a2:	4b10      	ldr	r3, [pc, #64]	@ (80055e4 <HAL_RCC_OscConfig+0x4cc>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a8:	f7fc fce4 	bl	8001f74 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b0:	f7fc fce0 	bl	8001f74 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e026      	b.n	8005610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055c2:	4b06      	ldr	r3, [pc, #24]	@ (80055dc <HAL_RCC_OscConfig+0x4c4>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x498>
 80055ce:	e01e      	b.n	800560e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d107      	bne.n	80055e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e019      	b.n	8005610 <HAL_RCC_OscConfig+0x4f8>
 80055dc:	40021000 	.word	0x40021000
 80055e0:	40007000 	.word	0x40007000
 80055e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005618 <HAL_RCC_OscConfig+0x500>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d106      	bne.n	800560a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005606:	429a      	cmp	r2, r3
 8005608:	d001      	beq.n	800560e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40021000 	.word	0x40021000

0800561c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e0d0      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005630:	4b6a      	ldr	r3, [pc, #424]	@ (80057dc <HAL_RCC_ClockConfig+0x1c0>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d910      	bls.n	8005660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563e:	4b67      	ldr	r3, [pc, #412]	@ (80057dc <HAL_RCC_ClockConfig+0x1c0>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f023 0207 	bic.w	r2, r3, #7
 8005646:	4965      	ldr	r1, [pc, #404]	@ (80057dc <HAL_RCC_ClockConfig+0x1c0>)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	4313      	orrs	r3, r2
 800564c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800564e:	4b63      	ldr	r3, [pc, #396]	@ (80057dc <HAL_RCC_ClockConfig+0x1c0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d001      	beq.n	8005660 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e0b8      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d020      	beq.n	80056ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d005      	beq.n	8005684 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005678:	4b59      	ldr	r3, [pc, #356]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	4a58      	ldr	r2, [pc, #352]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 800567e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005682:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005690:	4b53      	ldr	r3, [pc, #332]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4a52      	ldr	r2, [pc, #328]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005696:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800569a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800569c:	4b50      	ldr	r3, [pc, #320]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	494d      	ldr	r1, [pc, #308]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d040      	beq.n	800573c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d107      	bne.n	80056d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c2:	4b47      	ldr	r3, [pc, #284]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d115      	bne.n	80056fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e07f      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d107      	bne.n	80056ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056da:	4b41      	ldr	r3, [pc, #260]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e073      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ea:	4b3d      	ldr	r3, [pc, #244]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e06b      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056fa:	4b39      	ldr	r3, [pc, #228]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f023 0203 	bic.w	r2, r3, #3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	4936      	ldr	r1, [pc, #216]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005708:	4313      	orrs	r3, r2
 800570a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800570c:	f7fc fc32 	bl	8001f74 <HAL_GetTick>
 8005710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005712:	e00a      	b.n	800572a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005714:	f7fc fc2e 	bl	8001f74 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005722:	4293      	cmp	r3, r2
 8005724:	d901      	bls.n	800572a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e053      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800572a:	4b2d      	ldr	r3, [pc, #180]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f003 020c 	and.w	r2, r3, #12
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	429a      	cmp	r2, r3
 800573a:	d1eb      	bne.n	8005714 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800573c:	4b27      	ldr	r3, [pc, #156]	@ (80057dc <HAL_RCC_ClockConfig+0x1c0>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d210      	bcs.n	800576c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574a:	4b24      	ldr	r3, [pc, #144]	@ (80057dc <HAL_RCC_ClockConfig+0x1c0>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f023 0207 	bic.w	r2, r3, #7
 8005752:	4922      	ldr	r1, [pc, #136]	@ (80057dc <HAL_RCC_ClockConfig+0x1c0>)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	4313      	orrs	r3, r2
 8005758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800575a:	4b20      	ldr	r3, [pc, #128]	@ (80057dc <HAL_RCC_ClockConfig+0x1c0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d001      	beq.n	800576c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e032      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d008      	beq.n	800578a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005778:	4b19      	ldr	r3, [pc, #100]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	4916      	ldr	r1, [pc, #88]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005786:	4313      	orrs	r3, r2
 8005788:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005796:	4b12      	ldr	r3, [pc, #72]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	490e      	ldr	r1, [pc, #56]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057aa:	f000 f821 	bl	80057f0 <HAL_RCC_GetSysClockFreq>
 80057ae:	4602      	mov	r2, r0
 80057b0:	4b0b      	ldr	r3, [pc, #44]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	091b      	lsrs	r3, r3, #4
 80057b6:	f003 030f 	and.w	r3, r3, #15
 80057ba:	490a      	ldr	r1, [pc, #40]	@ (80057e4 <HAL_RCC_ClockConfig+0x1c8>)
 80057bc:	5ccb      	ldrb	r3, [r1, r3]
 80057be:	fa22 f303 	lsr.w	r3, r2, r3
 80057c2:	4a09      	ldr	r2, [pc, #36]	@ (80057e8 <HAL_RCC_ClockConfig+0x1cc>)
 80057c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80057c6:	4b09      	ldr	r3, [pc, #36]	@ (80057ec <HAL_RCC_ClockConfig+0x1d0>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fc fb90 	bl	8001ef0 <HAL_InitTick>

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	40022000 	.word	0x40022000
 80057e0:	40021000 	.word	0x40021000
 80057e4:	08006050 	.word	0x08006050
 80057e8:	20000090 	.word	0x20000090
 80057ec:	20000094 	.word	0x20000094

080057f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	2300      	movs	r3, #0
 80057fc:	60bb      	str	r3, [r7, #8]
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
 8005802:	2300      	movs	r3, #0
 8005804:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800580a:	4b1e      	ldr	r3, [pc, #120]	@ (8005884 <HAL_RCC_GetSysClockFreq+0x94>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f003 030c 	and.w	r3, r3, #12
 8005816:	2b04      	cmp	r3, #4
 8005818:	d002      	beq.n	8005820 <HAL_RCC_GetSysClockFreq+0x30>
 800581a:	2b08      	cmp	r3, #8
 800581c:	d003      	beq.n	8005826 <HAL_RCC_GetSysClockFreq+0x36>
 800581e:	e027      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005820:	4b19      	ldr	r3, [pc, #100]	@ (8005888 <HAL_RCC_GetSysClockFreq+0x98>)
 8005822:	613b      	str	r3, [r7, #16]
      break;
 8005824:	e027      	b.n	8005876 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	0c9b      	lsrs	r3, r3, #18
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	4a17      	ldr	r2, [pc, #92]	@ (800588c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005830:	5cd3      	ldrb	r3, [r2, r3]
 8005832:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d010      	beq.n	8005860 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800583e:	4b11      	ldr	r3, [pc, #68]	@ (8005884 <HAL_RCC_GetSysClockFreq+0x94>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	0c5b      	lsrs	r3, r3, #17
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	4a11      	ldr	r2, [pc, #68]	@ (8005890 <HAL_RCC_GetSysClockFreq+0xa0>)
 800584a:	5cd3      	ldrb	r3, [r2, r3]
 800584c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a0d      	ldr	r2, [pc, #52]	@ (8005888 <HAL_RCC_GetSysClockFreq+0x98>)
 8005852:	fb03 f202 	mul.w	r2, r3, r2
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	fbb2 f3f3 	udiv	r3, r2, r3
 800585c:	617b      	str	r3, [r7, #20]
 800585e:	e004      	b.n	800586a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a0c      	ldr	r2, [pc, #48]	@ (8005894 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005864:	fb02 f303 	mul.w	r3, r2, r3
 8005868:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	613b      	str	r3, [r7, #16]
      break;
 800586e:	e002      	b.n	8005876 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005870:	4b05      	ldr	r3, [pc, #20]	@ (8005888 <HAL_RCC_GetSysClockFreq+0x98>)
 8005872:	613b      	str	r3, [r7, #16]
      break;
 8005874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005876:	693b      	ldr	r3, [r7, #16]
}
 8005878:	4618      	mov	r0, r3
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	bc80      	pop	{r7}
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	40021000 	.word	0x40021000
 8005888:	007a1200 	.word	0x007a1200
 800588c:	08006068 	.word	0x08006068
 8005890:	08006078 	.word	0x08006078
 8005894:	003d0900 	.word	0x003d0900

08005898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800589c:	4b02      	ldr	r3, [pc, #8]	@ (80058a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800589e:	681b      	ldr	r3, [r3, #0]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bc80      	pop	{r7}
 80058a6:	4770      	bx	lr
 80058a8:	20000090 	.word	0x20000090

080058ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058b0:	f7ff fff2 	bl	8005898 <HAL_RCC_GetHCLKFreq>
 80058b4:	4602      	mov	r2, r0
 80058b6:	4b05      	ldr	r3, [pc, #20]	@ (80058cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	0a1b      	lsrs	r3, r3, #8
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	4903      	ldr	r1, [pc, #12]	@ (80058d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058c2:	5ccb      	ldrb	r3, [r1, r3]
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40021000 	.word	0x40021000
 80058d0:	08006060 	.word	0x08006060

080058d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80058dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005908 <RCC_Delay+0x34>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a0a      	ldr	r2, [pc, #40]	@ (800590c <RCC_Delay+0x38>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	0a5b      	lsrs	r3, r3, #9
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	fb02 f303 	mul.w	r3, r2, r3
 80058ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80058f0:	bf00      	nop
  }
  while (Delay --);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	1e5a      	subs	r2, r3, #1
 80058f6:	60fa      	str	r2, [r7, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1f9      	bne.n	80058f0 <RCC_Delay+0x1c>
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr
 8005908:	20000090 	.word	0x20000090
 800590c:	10624dd3 	.word	0x10624dd3

08005910 <memset>:
 8005910:	4603      	mov	r3, r0
 8005912:	4402      	add	r2, r0
 8005914:	4293      	cmp	r3, r2
 8005916:	d100      	bne.n	800591a <memset+0xa>
 8005918:	4770      	bx	lr
 800591a:	f803 1b01 	strb.w	r1, [r3], #1
 800591e:	e7f9      	b.n	8005914 <memset+0x4>

08005920 <__errno>:
 8005920:	4b01      	ldr	r3, [pc, #4]	@ (8005928 <__errno+0x8>)
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	2000009c 	.word	0x2000009c

0800592c <__libc_init_array>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	2600      	movs	r6, #0
 8005930:	4d0c      	ldr	r5, [pc, #48]	@ (8005964 <__libc_init_array+0x38>)
 8005932:	4c0d      	ldr	r4, [pc, #52]	@ (8005968 <__libc_init_array+0x3c>)
 8005934:	1b64      	subs	r4, r4, r5
 8005936:	10a4      	asrs	r4, r4, #2
 8005938:	42a6      	cmp	r6, r4
 800593a:	d109      	bne.n	8005950 <__libc_init_array+0x24>
 800593c:	f000 fb7c 	bl	8006038 <_init>
 8005940:	2600      	movs	r6, #0
 8005942:	4d0a      	ldr	r5, [pc, #40]	@ (800596c <__libc_init_array+0x40>)
 8005944:	4c0a      	ldr	r4, [pc, #40]	@ (8005970 <__libc_init_array+0x44>)
 8005946:	1b64      	subs	r4, r4, r5
 8005948:	10a4      	asrs	r4, r4, #2
 800594a:	42a6      	cmp	r6, r4
 800594c:	d105      	bne.n	800595a <__libc_init_array+0x2e>
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	f855 3b04 	ldr.w	r3, [r5], #4
 8005954:	4798      	blx	r3
 8005956:	3601      	adds	r6, #1
 8005958:	e7ee      	b.n	8005938 <__libc_init_array+0xc>
 800595a:	f855 3b04 	ldr.w	r3, [r5], #4
 800595e:	4798      	blx	r3
 8005960:	3601      	adds	r6, #1
 8005962:	e7f2      	b.n	800594a <__libc_init_array+0x1e>
 8005964:	08006100 	.word	0x08006100
 8005968:	08006100 	.word	0x08006100
 800596c:	08006100 	.word	0x08006100
 8005970:	08006104 	.word	0x08006104

08005974 <atan2>:
 8005974:	f000 b8f8 	b.w	8005b68 <__ieee754_atan2>

08005978 <sqrt>:
 8005978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597a:	4606      	mov	r6, r0
 800597c:	460f      	mov	r7, r1
 800597e:	f000 f81f 	bl	80059c0 <__ieee754_sqrt>
 8005982:	4632      	mov	r2, r6
 8005984:	4604      	mov	r4, r0
 8005986:	460d      	mov	r5, r1
 8005988:	463b      	mov	r3, r7
 800598a:	4630      	mov	r0, r6
 800598c:	4639      	mov	r1, r7
 800598e:	f7fb f835 	bl	80009fc <__aeabi_dcmpun>
 8005992:	b990      	cbnz	r0, 80059ba <sqrt+0x42>
 8005994:	2200      	movs	r2, #0
 8005996:	2300      	movs	r3, #0
 8005998:	4630      	mov	r0, r6
 800599a:	4639      	mov	r1, r7
 800599c:	f7fb f806 	bl	80009ac <__aeabi_dcmplt>
 80059a0:	b158      	cbz	r0, 80059ba <sqrt+0x42>
 80059a2:	f7ff ffbd 	bl	8005920 <__errno>
 80059a6:	2321      	movs	r3, #33	@ 0x21
 80059a8:	2200      	movs	r2, #0
 80059aa:	6003      	str	r3, [r0, #0]
 80059ac:	2300      	movs	r3, #0
 80059ae:	4610      	mov	r0, r2
 80059b0:	4619      	mov	r1, r3
 80059b2:	f7fa feb3 	bl	800071c <__aeabi_ddiv>
 80059b6:	4604      	mov	r4, r0
 80059b8:	460d      	mov	r5, r1
 80059ba:	4620      	mov	r0, r4
 80059bc:	4629      	mov	r1, r5
 80059be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080059c0 <__ieee754_sqrt>:
 80059c0:	4a65      	ldr	r2, [pc, #404]	@ (8005b58 <__ieee754_sqrt+0x198>)
 80059c2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c6:	438a      	bics	r2, r1
 80059c8:	4606      	mov	r6, r0
 80059ca:	460f      	mov	r7, r1
 80059cc:	460b      	mov	r3, r1
 80059ce:	4604      	mov	r4, r0
 80059d0:	d10e      	bne.n	80059f0 <__ieee754_sqrt+0x30>
 80059d2:	4602      	mov	r2, r0
 80059d4:	f7fa fd78 	bl	80004c8 <__aeabi_dmul>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4630      	mov	r0, r6
 80059de:	4639      	mov	r1, r7
 80059e0:	f7fa fbbc 	bl	800015c <__adddf3>
 80059e4:	4606      	mov	r6, r0
 80059e6:	460f      	mov	r7, r1
 80059e8:	4630      	mov	r0, r6
 80059ea:	4639      	mov	r1, r7
 80059ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f0:	2900      	cmp	r1, #0
 80059f2:	dc0c      	bgt.n	8005a0e <__ieee754_sqrt+0x4e>
 80059f4:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80059f8:	4302      	orrs	r2, r0
 80059fa:	d0f5      	beq.n	80059e8 <__ieee754_sqrt+0x28>
 80059fc:	b189      	cbz	r1, 8005a22 <__ieee754_sqrt+0x62>
 80059fe:	4602      	mov	r2, r0
 8005a00:	f7fa fbaa 	bl	8000158 <__aeabi_dsub>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	f7fa fe88 	bl	800071c <__aeabi_ddiv>
 8005a0c:	e7ea      	b.n	80059e4 <__ieee754_sqrt+0x24>
 8005a0e:	150a      	asrs	r2, r1, #20
 8005a10:	d115      	bne.n	8005a3e <__ieee754_sqrt+0x7e>
 8005a12:	2100      	movs	r1, #0
 8005a14:	e009      	b.n	8005a2a <__ieee754_sqrt+0x6a>
 8005a16:	0ae3      	lsrs	r3, r4, #11
 8005a18:	3a15      	subs	r2, #21
 8005a1a:	0564      	lsls	r4, r4, #21
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0fa      	beq.n	8005a16 <__ieee754_sqrt+0x56>
 8005a20:	e7f7      	b.n	8005a12 <__ieee754_sqrt+0x52>
 8005a22:	460a      	mov	r2, r1
 8005a24:	e7fa      	b.n	8005a1c <__ieee754_sqrt+0x5c>
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	3101      	adds	r1, #1
 8005a2a:	02d8      	lsls	r0, r3, #11
 8005a2c:	d5fb      	bpl.n	8005a26 <__ieee754_sqrt+0x66>
 8005a2e:	1e48      	subs	r0, r1, #1
 8005a30:	1a12      	subs	r2, r2, r0
 8005a32:	f1c1 0020 	rsb	r0, r1, #32
 8005a36:	fa24 f000 	lsr.w	r0, r4, r0
 8005a3a:	4303      	orrs	r3, r0
 8005a3c:	408c      	lsls	r4, r1
 8005a3e:	2700      	movs	r7, #0
 8005a40:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8005a44:	2116      	movs	r1, #22
 8005a46:	07d2      	lsls	r2, r2, #31
 8005a48:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8005a4c:	463a      	mov	r2, r7
 8005a4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a56:	bf5c      	itt	pl
 8005a58:	005b      	lslpl	r3, r3, #1
 8005a5a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8005a5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005a62:	bf58      	it	pl
 8005a64:	0064      	lslpl	r4, r4, #1
 8005a66:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005a6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005a6e:	0064      	lsls	r4, r4, #1
 8005a70:	1815      	adds	r5, r2, r0
 8005a72:	429d      	cmp	r5, r3
 8005a74:	bfde      	ittt	le
 8005a76:	182a      	addle	r2, r5, r0
 8005a78:	1b5b      	suble	r3, r3, r5
 8005a7a:	183f      	addle	r7, r7, r0
 8005a7c:	0fe5      	lsrs	r5, r4, #31
 8005a7e:	3901      	subs	r1, #1
 8005a80:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8005a84:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005a88:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005a8c:	d1f0      	bne.n	8005a70 <__ieee754_sqrt+0xb0>
 8005a8e:	460d      	mov	r5, r1
 8005a90:	2620      	movs	r6, #32
 8005a92:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8005a96:	4293      	cmp	r3, r2
 8005a98:	eb00 0c01 	add.w	ip, r0, r1
 8005a9c:	dc02      	bgt.n	8005aa4 <__ieee754_sqrt+0xe4>
 8005a9e:	d113      	bne.n	8005ac8 <__ieee754_sqrt+0x108>
 8005aa0:	45a4      	cmp	ip, r4
 8005aa2:	d811      	bhi.n	8005ac8 <__ieee754_sqrt+0x108>
 8005aa4:	f1bc 0f00 	cmp.w	ip, #0
 8005aa8:	eb0c 0100 	add.w	r1, ip, r0
 8005aac:	da3e      	bge.n	8005b2c <__ieee754_sqrt+0x16c>
 8005aae:	2900      	cmp	r1, #0
 8005ab0:	db3c      	blt.n	8005b2c <__ieee754_sqrt+0x16c>
 8005ab2:	f102 0e01 	add.w	lr, r2, #1
 8005ab6:	1a9b      	subs	r3, r3, r2
 8005ab8:	4672      	mov	r2, lr
 8005aba:	45a4      	cmp	ip, r4
 8005abc:	bf88      	it	hi
 8005abe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005ac2:	eba4 040c 	sub.w	r4, r4, ip
 8005ac6:	4405      	add	r5, r0
 8005ac8:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8005acc:	3e01      	subs	r6, #1
 8005ace:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8005ad2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005ad6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005ada:	d1dc      	bne.n	8005a96 <__ieee754_sqrt+0xd6>
 8005adc:	431c      	orrs	r4, r3
 8005ade:	d01a      	beq.n	8005b16 <__ieee754_sqrt+0x156>
 8005ae0:	4c1e      	ldr	r4, [pc, #120]	@ (8005b5c <__ieee754_sqrt+0x19c>)
 8005ae2:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8005b60 <__ieee754_sqrt+0x1a0>
 8005ae6:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005aea:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005aee:	f7fa fb33 	bl	8000158 <__aeabi_dsub>
 8005af2:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	4650      	mov	r0, sl
 8005afc:	4659      	mov	r1, fp
 8005afe:	f7fa ff5f 	bl	80009c0 <__aeabi_dcmple>
 8005b02:	b140      	cbz	r0, 8005b16 <__ieee754_sqrt+0x156>
 8005b04:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005b08:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005b0c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005b10:	d10e      	bne.n	8005b30 <__ieee754_sqrt+0x170>
 8005b12:	4635      	mov	r5, r6
 8005b14:	3701      	adds	r7, #1
 8005b16:	107b      	asrs	r3, r7, #1
 8005b18:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8005b1c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8005b20:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8005b24:	086b      	lsrs	r3, r5, #1
 8005b26:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8005b2a:	e75b      	b.n	80059e4 <__ieee754_sqrt+0x24>
 8005b2c:	4696      	mov	lr, r2
 8005b2e:	e7c2      	b.n	8005ab6 <__ieee754_sqrt+0xf6>
 8005b30:	f7fa fb14 	bl	800015c <__adddf3>
 8005b34:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4650      	mov	r0, sl
 8005b3e:	4659      	mov	r1, fp
 8005b40:	f7fa ff34 	bl	80009ac <__aeabi_dcmplt>
 8005b44:	b120      	cbz	r0, 8005b50 <__ieee754_sqrt+0x190>
 8005b46:	1cab      	adds	r3, r5, #2
 8005b48:	bf08      	it	eq
 8005b4a:	3701      	addeq	r7, #1
 8005b4c:	3502      	adds	r5, #2
 8005b4e:	e7e2      	b.n	8005b16 <__ieee754_sqrt+0x156>
 8005b50:	1c6b      	adds	r3, r5, #1
 8005b52:	f023 0501 	bic.w	r5, r3, #1
 8005b56:	e7de      	b.n	8005b16 <__ieee754_sqrt+0x156>
 8005b58:	7ff00000 	.word	0x7ff00000
 8005b5c:	08006088 	.word	0x08006088
 8005b60:	08006080 	.word	0x08006080
 8005b64:	00000000 	.word	0x00000000

08005b68 <__ieee754_atan2>:
 8005b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6c:	4617      	mov	r7, r2
 8005b6e:	4690      	mov	r8, r2
 8005b70:	4699      	mov	r9, r3
 8005b72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005b76:	427b      	negs	r3, r7
 8005b78:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8005d00 <__ieee754_atan2+0x198>
 8005b7c:	433b      	orrs	r3, r7
 8005b7e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005b82:	4553      	cmp	r3, sl
 8005b84:	4604      	mov	r4, r0
 8005b86:	460d      	mov	r5, r1
 8005b88:	d809      	bhi.n	8005b9e <__ieee754_atan2+0x36>
 8005b8a:	4246      	negs	r6, r0
 8005b8c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005b90:	4306      	orrs	r6, r0
 8005b92:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8005b96:	4556      	cmp	r6, sl
 8005b98:	468e      	mov	lr, r1
 8005b9a:	4683      	mov	fp, r0
 8005b9c:	d908      	bls.n	8005bb0 <__ieee754_atan2+0x48>
 8005b9e:	4642      	mov	r2, r8
 8005ba0:	464b      	mov	r3, r9
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	f7fa fad9 	bl	800015c <__adddf3>
 8005baa:	4604      	mov	r4, r0
 8005bac:	460d      	mov	r5, r1
 8005bae:	e016      	b.n	8005bde <__ieee754_atan2+0x76>
 8005bb0:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 8005bb4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8005bb8:	433e      	orrs	r6, r7
 8005bba:	d103      	bne.n	8005bc4 <__ieee754_atan2+0x5c>
 8005bbc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc0:	f000 b8a6 	b.w	8005d10 <atan>
 8005bc4:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8005bc8:	f006 0602 	and.w	r6, r6, #2
 8005bcc:	ea53 0b0b 	orrs.w	fp, r3, fp
 8005bd0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8005bd4:	d107      	bne.n	8005be6 <__ieee754_atan2+0x7e>
 8005bd6:	2e02      	cmp	r6, #2
 8005bd8:	d064      	beq.n	8005ca4 <__ieee754_atan2+0x13c>
 8005bda:	2e03      	cmp	r6, #3
 8005bdc:	d066      	beq.n	8005cac <__ieee754_atan2+0x144>
 8005bde:	4620      	mov	r0, r4
 8005be0:	4629      	mov	r1, r5
 8005be2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be6:	4317      	orrs	r7, r2
 8005be8:	d106      	bne.n	8005bf8 <__ieee754_atan2+0x90>
 8005bea:	f1be 0f00 	cmp.w	lr, #0
 8005bee:	db68      	blt.n	8005cc2 <__ieee754_atan2+0x15a>
 8005bf0:	a537      	add	r5, pc, #220	@ (adr r5, 8005cd0 <__ieee754_atan2+0x168>)
 8005bf2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005bf6:	e7f2      	b.n	8005bde <__ieee754_atan2+0x76>
 8005bf8:	4552      	cmp	r2, sl
 8005bfa:	d10f      	bne.n	8005c1c <__ieee754_atan2+0xb4>
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	f106 36ff 	add.w	r6, r6, #4294967295
 8005c02:	d107      	bne.n	8005c14 <__ieee754_atan2+0xac>
 8005c04:	2e02      	cmp	r6, #2
 8005c06:	d855      	bhi.n	8005cb4 <__ieee754_atan2+0x14c>
 8005c08:	4b3e      	ldr	r3, [pc, #248]	@ (8005d04 <__ieee754_atan2+0x19c>)
 8005c0a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005c0e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005c12:	e7e4      	b.n	8005bde <__ieee754_atan2+0x76>
 8005c14:	2e02      	cmp	r6, #2
 8005c16:	d851      	bhi.n	8005cbc <__ieee754_atan2+0x154>
 8005c18:	4b3b      	ldr	r3, [pc, #236]	@ (8005d08 <__ieee754_atan2+0x1a0>)
 8005c1a:	e7f6      	b.n	8005c0a <__ieee754_atan2+0xa2>
 8005c1c:	4553      	cmp	r3, sl
 8005c1e:	d0e4      	beq.n	8005bea <__ieee754_atan2+0x82>
 8005c20:	1a9b      	subs	r3, r3, r2
 8005c22:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8005c26:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005c2a:	da21      	bge.n	8005c70 <__ieee754_atan2+0x108>
 8005c2c:	f1b9 0f00 	cmp.w	r9, #0
 8005c30:	da01      	bge.n	8005c36 <__ieee754_atan2+0xce>
 8005c32:	323c      	adds	r2, #60	@ 0x3c
 8005c34:	db20      	blt.n	8005c78 <__ieee754_atan2+0x110>
 8005c36:	4642      	mov	r2, r8
 8005c38:	464b      	mov	r3, r9
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	f7fa fd6d 	bl	800071c <__aeabi_ddiv>
 8005c42:	f000 f9f5 	bl	8006030 <fabs>
 8005c46:	f000 f863 	bl	8005d10 <atan>
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	460d      	mov	r5, r1
 8005c4e:	2e01      	cmp	r6, #1
 8005c50:	d015      	beq.n	8005c7e <__ieee754_atan2+0x116>
 8005c52:	2e02      	cmp	r6, #2
 8005c54:	d017      	beq.n	8005c86 <__ieee754_atan2+0x11e>
 8005c56:	2e00      	cmp	r6, #0
 8005c58:	d0c1      	beq.n	8005bde <__ieee754_atan2+0x76>
 8005c5a:	a31f      	add	r3, pc, #124	@ (adr r3, 8005cd8 <__ieee754_atan2+0x170>)
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	4620      	mov	r0, r4
 8005c62:	4629      	mov	r1, r5
 8005c64:	f7fa fa78 	bl	8000158 <__aeabi_dsub>
 8005c68:	a31d      	add	r3, pc, #116	@ (adr r3, 8005ce0 <__ieee754_atan2+0x178>)
 8005c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6e:	e016      	b.n	8005c9e <__ieee754_atan2+0x136>
 8005c70:	a517      	add	r5, pc, #92	@ (adr r5, 8005cd0 <__ieee754_atan2+0x168>)
 8005c72:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005c76:	e7ea      	b.n	8005c4e <__ieee754_atan2+0xe6>
 8005c78:	2400      	movs	r4, #0
 8005c7a:	2500      	movs	r5, #0
 8005c7c:	e7e7      	b.n	8005c4e <__ieee754_atan2+0xe6>
 8005c7e:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8005c82:	461d      	mov	r5, r3
 8005c84:	e7ab      	b.n	8005bde <__ieee754_atan2+0x76>
 8005c86:	a314      	add	r3, pc, #80	@ (adr r3, 8005cd8 <__ieee754_atan2+0x170>)
 8005c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	4629      	mov	r1, r5
 8005c90:	f7fa fa62 	bl	8000158 <__aeabi_dsub>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	a111      	add	r1, pc, #68	@ (adr r1, 8005ce0 <__ieee754_atan2+0x178>)
 8005c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c9e:	f7fa fa5b 	bl	8000158 <__aeabi_dsub>
 8005ca2:	e782      	b.n	8005baa <__ieee754_atan2+0x42>
 8005ca4:	a50e      	add	r5, pc, #56	@ (adr r5, 8005ce0 <__ieee754_atan2+0x178>)
 8005ca6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005caa:	e798      	b.n	8005bde <__ieee754_atan2+0x76>
 8005cac:	a50e      	add	r5, pc, #56	@ (adr r5, 8005ce8 <__ieee754_atan2+0x180>)
 8005cae:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005cb2:	e794      	b.n	8005bde <__ieee754_atan2+0x76>
 8005cb4:	a50e      	add	r5, pc, #56	@ (adr r5, 8005cf0 <__ieee754_atan2+0x188>)
 8005cb6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005cba:	e790      	b.n	8005bde <__ieee754_atan2+0x76>
 8005cbc:	2400      	movs	r4, #0
 8005cbe:	2500      	movs	r5, #0
 8005cc0:	e78d      	b.n	8005bde <__ieee754_atan2+0x76>
 8005cc2:	a50d      	add	r5, pc, #52	@ (adr r5, 8005cf8 <__ieee754_atan2+0x190>)
 8005cc4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005cc8:	e789      	b.n	8005bde <__ieee754_atan2+0x76>
 8005cca:	bf00      	nop
 8005ccc:	f3af 8000 	nop.w
 8005cd0:	54442d18 	.word	0x54442d18
 8005cd4:	3ff921fb 	.word	0x3ff921fb
 8005cd8:	33145c07 	.word	0x33145c07
 8005cdc:	3ca1a626 	.word	0x3ca1a626
 8005ce0:	54442d18 	.word	0x54442d18
 8005ce4:	400921fb 	.word	0x400921fb
 8005ce8:	54442d18 	.word	0x54442d18
 8005cec:	c00921fb 	.word	0xc00921fb
 8005cf0:	54442d18 	.word	0x54442d18
 8005cf4:	3fe921fb 	.word	0x3fe921fb
 8005cf8:	54442d18 	.word	0x54442d18
 8005cfc:	bff921fb 	.word	0xbff921fb
 8005d00:	7ff00000 	.word	0x7ff00000
 8005d04:	080060a8 	.word	0x080060a8
 8005d08:	08006090 	.word	0x08006090
 8005d0c:	00000000 	.word	0x00000000

08005d10 <atan>:
 8005d10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d14:	4bbc      	ldr	r3, [pc, #752]	@ (8006008 <atan+0x2f8>)
 8005d16:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8005d1a:	429e      	cmp	r6, r3
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	460d      	mov	r5, r1
 8005d20:	468b      	mov	fp, r1
 8005d22:	d918      	bls.n	8005d56 <atan+0x46>
 8005d24:	4bb9      	ldr	r3, [pc, #740]	@ (800600c <atan+0x2fc>)
 8005d26:	429e      	cmp	r6, r3
 8005d28:	d801      	bhi.n	8005d2e <atan+0x1e>
 8005d2a:	d109      	bne.n	8005d40 <atan+0x30>
 8005d2c:	b140      	cbz	r0, 8005d40 <atan+0x30>
 8005d2e:	4622      	mov	r2, r4
 8005d30:	462b      	mov	r3, r5
 8005d32:	4620      	mov	r0, r4
 8005d34:	4629      	mov	r1, r5
 8005d36:	f7fa fa11 	bl	800015c <__adddf3>
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	460d      	mov	r5, r1
 8005d3e:	e006      	b.n	8005d4e <atan+0x3e>
 8005d40:	f1bb 0f00 	cmp.w	fp, #0
 8005d44:	f340 8123 	ble.w	8005f8e <atan+0x27e>
 8005d48:	a593      	add	r5, pc, #588	@ (adr r5, 8005f98 <atan+0x288>)
 8005d4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005d4e:	4620      	mov	r0, r4
 8005d50:	4629      	mov	r1, r5
 8005d52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d56:	4bae      	ldr	r3, [pc, #696]	@ (8006010 <atan+0x300>)
 8005d58:	429e      	cmp	r6, r3
 8005d5a:	d811      	bhi.n	8005d80 <atan+0x70>
 8005d5c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005d60:	429e      	cmp	r6, r3
 8005d62:	d80a      	bhi.n	8005d7a <atan+0x6a>
 8005d64:	a38e      	add	r3, pc, #568	@ (adr r3, 8005fa0 <atan+0x290>)
 8005d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6a:	f7fa f9f7 	bl	800015c <__adddf3>
 8005d6e:	2200      	movs	r2, #0
 8005d70:	4ba8      	ldr	r3, [pc, #672]	@ (8006014 <atan+0x304>)
 8005d72:	f7fa fe39 	bl	80009e8 <__aeabi_dcmpgt>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	d1e9      	bne.n	8005d4e <atan+0x3e>
 8005d7a:	f04f 3aff 	mov.w	sl, #4294967295
 8005d7e:	e027      	b.n	8005dd0 <atan+0xc0>
 8005d80:	f000 f956 	bl	8006030 <fabs>
 8005d84:	4ba4      	ldr	r3, [pc, #656]	@ (8006018 <atan+0x308>)
 8005d86:	4604      	mov	r4, r0
 8005d88:	429e      	cmp	r6, r3
 8005d8a:	460d      	mov	r5, r1
 8005d8c:	f200 80b8 	bhi.w	8005f00 <atan+0x1f0>
 8005d90:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8005d94:	429e      	cmp	r6, r3
 8005d96:	f200 809c 	bhi.w	8005ed2 <atan+0x1c2>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	f7fa f9dd 	bl	800015c <__adddf3>
 8005da2:	2200      	movs	r2, #0
 8005da4:	4b9b      	ldr	r3, [pc, #620]	@ (8006014 <atan+0x304>)
 8005da6:	f7fa f9d7 	bl	8000158 <__aeabi_dsub>
 8005daa:	2200      	movs	r2, #0
 8005dac:	4606      	mov	r6, r0
 8005dae:	460f      	mov	r7, r1
 8005db0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005db4:	4620      	mov	r0, r4
 8005db6:	4629      	mov	r1, r5
 8005db8:	f7fa f9d0 	bl	800015c <__adddf3>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	4639      	mov	r1, r7
 8005dc4:	f7fa fcaa 	bl	800071c <__aeabi_ddiv>
 8005dc8:	f04f 0a00 	mov.w	sl, #0
 8005dcc:	4604      	mov	r4, r0
 8005dce:	460d      	mov	r5, r1
 8005dd0:	4622      	mov	r2, r4
 8005dd2:	462b      	mov	r3, r5
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	f7fa fb76 	bl	80004c8 <__aeabi_dmul>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4680      	mov	r8, r0
 8005de2:	4689      	mov	r9, r1
 8005de4:	f7fa fb70 	bl	80004c8 <__aeabi_dmul>
 8005de8:	a36f      	add	r3, pc, #444	@ (adr r3, 8005fa8 <atan+0x298>)
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	4606      	mov	r6, r0
 8005df0:	460f      	mov	r7, r1
 8005df2:	f7fa fb69 	bl	80004c8 <__aeabi_dmul>
 8005df6:	a36e      	add	r3, pc, #440	@ (adr r3, 8005fb0 <atan+0x2a0>)
 8005df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfc:	f7fa f9ae 	bl	800015c <__adddf3>
 8005e00:	4632      	mov	r2, r6
 8005e02:	463b      	mov	r3, r7
 8005e04:	f7fa fb60 	bl	80004c8 <__aeabi_dmul>
 8005e08:	a36b      	add	r3, pc, #428	@ (adr r3, 8005fb8 <atan+0x2a8>)
 8005e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0e:	f7fa f9a5 	bl	800015c <__adddf3>
 8005e12:	4632      	mov	r2, r6
 8005e14:	463b      	mov	r3, r7
 8005e16:	f7fa fb57 	bl	80004c8 <__aeabi_dmul>
 8005e1a:	a369      	add	r3, pc, #420	@ (adr r3, 8005fc0 <atan+0x2b0>)
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	f7fa f99c 	bl	800015c <__adddf3>
 8005e24:	4632      	mov	r2, r6
 8005e26:	463b      	mov	r3, r7
 8005e28:	f7fa fb4e 	bl	80004c8 <__aeabi_dmul>
 8005e2c:	a366      	add	r3, pc, #408	@ (adr r3, 8005fc8 <atan+0x2b8>)
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	f7fa f993 	bl	800015c <__adddf3>
 8005e36:	4632      	mov	r2, r6
 8005e38:	463b      	mov	r3, r7
 8005e3a:	f7fa fb45 	bl	80004c8 <__aeabi_dmul>
 8005e3e:	a364      	add	r3, pc, #400	@ (adr r3, 8005fd0 <atan+0x2c0>)
 8005e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e44:	f7fa f98a 	bl	800015c <__adddf3>
 8005e48:	4642      	mov	r2, r8
 8005e4a:	464b      	mov	r3, r9
 8005e4c:	f7fa fb3c 	bl	80004c8 <__aeabi_dmul>
 8005e50:	a361      	add	r3, pc, #388	@ (adr r3, 8005fd8 <atan+0x2c8>)
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	4680      	mov	r8, r0
 8005e58:	4689      	mov	r9, r1
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	4639      	mov	r1, r7
 8005e5e:	f7fa fb33 	bl	80004c8 <__aeabi_dmul>
 8005e62:	a35f      	add	r3, pc, #380	@ (adr r3, 8005fe0 <atan+0x2d0>)
 8005e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e68:	f7fa f976 	bl	8000158 <__aeabi_dsub>
 8005e6c:	4632      	mov	r2, r6
 8005e6e:	463b      	mov	r3, r7
 8005e70:	f7fa fb2a 	bl	80004c8 <__aeabi_dmul>
 8005e74:	a35c      	add	r3, pc, #368	@ (adr r3, 8005fe8 <atan+0x2d8>)
 8005e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7a:	f7fa f96d 	bl	8000158 <__aeabi_dsub>
 8005e7e:	4632      	mov	r2, r6
 8005e80:	463b      	mov	r3, r7
 8005e82:	f7fa fb21 	bl	80004c8 <__aeabi_dmul>
 8005e86:	a35a      	add	r3, pc, #360	@ (adr r3, 8005ff0 <atan+0x2e0>)
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f7fa f964 	bl	8000158 <__aeabi_dsub>
 8005e90:	4632      	mov	r2, r6
 8005e92:	463b      	mov	r3, r7
 8005e94:	f7fa fb18 	bl	80004c8 <__aeabi_dmul>
 8005e98:	a357      	add	r3, pc, #348	@ (adr r3, 8005ff8 <atan+0x2e8>)
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	f7fa f95b 	bl	8000158 <__aeabi_dsub>
 8005ea2:	4632      	mov	r2, r6
 8005ea4:	463b      	mov	r3, r7
 8005ea6:	f7fa fb0f 	bl	80004c8 <__aeabi_dmul>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	4640      	mov	r0, r8
 8005eb0:	4649      	mov	r1, r9
 8005eb2:	f7fa f953 	bl	800015c <__adddf3>
 8005eb6:	4622      	mov	r2, r4
 8005eb8:	462b      	mov	r3, r5
 8005eba:	f7fa fb05 	bl	80004c8 <__aeabi_dmul>
 8005ebe:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	d144      	bne.n	8005f52 <atan+0x242>
 8005ec8:	4620      	mov	r0, r4
 8005eca:	4629      	mov	r1, r5
 8005ecc:	f7fa f944 	bl	8000158 <__aeabi_dsub>
 8005ed0:	e733      	b.n	8005d3a <atan+0x2a>
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	4b4f      	ldr	r3, [pc, #316]	@ (8006014 <atan+0x304>)
 8005ed6:	f7fa f93f 	bl	8000158 <__aeabi_dsub>
 8005eda:	2200      	movs	r2, #0
 8005edc:	4606      	mov	r6, r0
 8005ede:	460f      	mov	r7, r1
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	4b4b      	ldr	r3, [pc, #300]	@ (8006014 <atan+0x304>)
 8005ee6:	f7fa f939 	bl	800015c <__adddf3>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4630      	mov	r0, r6
 8005ef0:	4639      	mov	r1, r7
 8005ef2:	f7fa fc13 	bl	800071c <__aeabi_ddiv>
 8005ef6:	f04f 0a01 	mov.w	sl, #1
 8005efa:	4604      	mov	r4, r0
 8005efc:	460d      	mov	r5, r1
 8005efe:	e767      	b.n	8005dd0 <atan+0xc0>
 8005f00:	4b46      	ldr	r3, [pc, #280]	@ (800601c <atan+0x30c>)
 8005f02:	429e      	cmp	r6, r3
 8005f04:	d21a      	bcs.n	8005f3c <atan+0x22c>
 8005f06:	2200      	movs	r2, #0
 8005f08:	4b45      	ldr	r3, [pc, #276]	@ (8006020 <atan+0x310>)
 8005f0a:	f7fa f925 	bl	8000158 <__aeabi_dsub>
 8005f0e:	2200      	movs	r2, #0
 8005f10:	4606      	mov	r6, r0
 8005f12:	460f      	mov	r7, r1
 8005f14:	4620      	mov	r0, r4
 8005f16:	4629      	mov	r1, r5
 8005f18:	4b41      	ldr	r3, [pc, #260]	@ (8006020 <atan+0x310>)
 8005f1a:	f7fa fad5 	bl	80004c8 <__aeabi_dmul>
 8005f1e:	2200      	movs	r2, #0
 8005f20:	4b3c      	ldr	r3, [pc, #240]	@ (8006014 <atan+0x304>)
 8005f22:	f7fa f91b 	bl	800015c <__adddf3>
 8005f26:	4602      	mov	r2, r0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	4639      	mov	r1, r7
 8005f2e:	f7fa fbf5 	bl	800071c <__aeabi_ddiv>
 8005f32:	f04f 0a02 	mov.w	sl, #2
 8005f36:	4604      	mov	r4, r0
 8005f38:	460d      	mov	r5, r1
 8005f3a:	e749      	b.n	8005dd0 <atan+0xc0>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	2000      	movs	r0, #0
 8005f42:	4938      	ldr	r1, [pc, #224]	@ (8006024 <atan+0x314>)
 8005f44:	f7fa fbea 	bl	800071c <__aeabi_ddiv>
 8005f48:	f04f 0a03 	mov.w	sl, #3
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	460d      	mov	r5, r1
 8005f50:	e73e      	b.n	8005dd0 <atan+0xc0>
 8005f52:	4b35      	ldr	r3, [pc, #212]	@ (8006028 <atan+0x318>)
 8005f54:	4e35      	ldr	r6, [pc, #212]	@ (800602c <atan+0x31c>)
 8005f56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	f7fa f8fb 	bl	8000158 <__aeabi_dsub>
 8005f62:	4622      	mov	r2, r4
 8005f64:	462b      	mov	r3, r5
 8005f66:	f7fa f8f7 	bl	8000158 <__aeabi_dsub>
 8005f6a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005f76:	f7fa f8ef 	bl	8000158 <__aeabi_dsub>
 8005f7a:	f1bb 0f00 	cmp.w	fp, #0
 8005f7e:	4604      	mov	r4, r0
 8005f80:	460d      	mov	r5, r1
 8005f82:	f6bf aee4 	bge.w	8005d4e <atan+0x3e>
 8005f86:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005f8a:	461d      	mov	r5, r3
 8005f8c:	e6df      	b.n	8005d4e <atan+0x3e>
 8005f8e:	a51c      	add	r5, pc, #112	@ (adr r5, 8006000 <atan+0x2f0>)
 8005f90:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005f94:	e6db      	b.n	8005d4e <atan+0x3e>
 8005f96:	bf00      	nop
 8005f98:	54442d18 	.word	0x54442d18
 8005f9c:	3ff921fb 	.word	0x3ff921fb
 8005fa0:	8800759c 	.word	0x8800759c
 8005fa4:	7e37e43c 	.word	0x7e37e43c
 8005fa8:	e322da11 	.word	0xe322da11
 8005fac:	3f90ad3a 	.word	0x3f90ad3a
 8005fb0:	24760deb 	.word	0x24760deb
 8005fb4:	3fa97b4b 	.word	0x3fa97b4b
 8005fb8:	a0d03d51 	.word	0xa0d03d51
 8005fbc:	3fb10d66 	.word	0x3fb10d66
 8005fc0:	c54c206e 	.word	0xc54c206e
 8005fc4:	3fb745cd 	.word	0x3fb745cd
 8005fc8:	920083ff 	.word	0x920083ff
 8005fcc:	3fc24924 	.word	0x3fc24924
 8005fd0:	5555550d 	.word	0x5555550d
 8005fd4:	3fd55555 	.word	0x3fd55555
 8005fd8:	2c6a6c2f 	.word	0x2c6a6c2f
 8005fdc:	bfa2b444 	.word	0xbfa2b444
 8005fe0:	52defd9a 	.word	0x52defd9a
 8005fe4:	3fadde2d 	.word	0x3fadde2d
 8005fe8:	af749a6d 	.word	0xaf749a6d
 8005fec:	3fb3b0f2 	.word	0x3fb3b0f2
 8005ff0:	fe231671 	.word	0xfe231671
 8005ff4:	3fbc71c6 	.word	0x3fbc71c6
 8005ff8:	9998ebc4 	.word	0x9998ebc4
 8005ffc:	3fc99999 	.word	0x3fc99999
 8006000:	54442d18 	.word	0x54442d18
 8006004:	bff921fb 	.word	0xbff921fb
 8006008:	440fffff 	.word	0x440fffff
 800600c:	7ff00000 	.word	0x7ff00000
 8006010:	3fdbffff 	.word	0x3fdbffff
 8006014:	3ff00000 	.word	0x3ff00000
 8006018:	3ff2ffff 	.word	0x3ff2ffff
 800601c:	40038000 	.word	0x40038000
 8006020:	3ff80000 	.word	0x3ff80000
 8006024:	bff00000 	.word	0xbff00000
 8006028:	080060c0 	.word	0x080060c0
 800602c:	080060e0 	.word	0x080060e0

08006030 <fabs>:
 8006030:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006034:	4619      	mov	r1, r3
 8006036:	4770      	bx	lr

08006038 <_init>:
 8006038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603a:	bf00      	nop
 800603c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603e:	bc08      	pop	{r3}
 8006040:	469e      	mov	lr, r3
 8006042:	4770      	bx	lr

08006044 <_fini>:
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	bf00      	nop
 8006048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800604a:	bc08      	pop	{r3}
 800604c:	469e      	mov	lr, r3
 800604e:	4770      	bx	lr
