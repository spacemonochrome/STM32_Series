
BluePill_SSD1306_U8G2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a44  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000884  08003b50  08003b50  00004b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043d4  080043d4  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080043d4  080043d4  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080043d4  080043d4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043d4  080043d4  000053d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043d8  080043d8  000053d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080043dc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  2000000c  080043e8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  080043e8  0000653c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004aab0  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003016  00000000  00000000  00050ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003680  00000000  00000000  00053b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000028e4  00000000  00000000  00057180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180af  00000000  00000000  00059a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a822  00000000  00000000  00071b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c5ad  00000000  00000000  0008c335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001288e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f058  00000000  00000000  00128928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00137980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b38 	.word	0x08003b38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003b38 	.word	0x08003b38

0800014c <u8x8_gpio_and_delay>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
u8g2_t myDisplay;

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	460b      	mov	r3, r1
 8000158:	72fb      	strb	r3, [r7, #11]
 800015a:	4613      	mov	r3, r2
 800015c:	72bb      	strb	r3, [r7, #10]
	  switch(msg)
 800015e:	7afb      	ldrb	r3, [r7, #11]
 8000160:	2b29      	cmp	r3, #41	@ 0x29
 8000162:	d104      	bne.n	800016e <u8x8_gpio_and_delay+0x22>
	  {
	  case U8X8_MSG_DELAY_MILLI:
		  HAL_Delay(arg_int);
 8000164:	7abb      	ldrb	r3, [r7, #10]
 8000166:	4618      	mov	r0, r3
 8000168:	f000 fa78 	bl	800065c <HAL_Delay>
		  break;
 800016c:	bf00      	nop
	  }
	  return 1;
 800016e:	2301      	movs	r3, #1
}
 8000170:	4618      	mov	r0, r3
 8000172:	3710      	adds	r7, #16
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}

08000178 <u8x8_i2c>:


uint8_t u8x8_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b088      	sub	sp, #32
 800017c:	af02      	add	r7, sp, #8
 800017e:	60f8      	str	r0, [r7, #12]
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	460b      	mov	r3, r1
 8000184:	72fb      	strb	r3, [r7, #11]
 8000186:	4613      	mov	r3, r2
 8000188:	72bb      	strb	r3, [r7, #10]
  static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
  static uint8_t buf_idx;
  uint8_t *data;

  switch(msg)
 800018a:	7afb      	ldrb	r3, [r7, #11]
 800018c:	3b14      	subs	r3, #20
 800018e:	2b0c      	cmp	r3, #12
 8000190:	d845      	bhi.n	800021e <u8x8_i2c+0xa6>
 8000192:	a201      	add	r2, pc, #4	@ (adr r2, 8000198 <u8x8_i2c+0x20>)
 8000194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000198:	08000223 	.word	0x08000223
 800019c:	0800021f 	.word	0x0800021f
 80001a0:	0800021f 	.word	0x0800021f
 80001a4:	080001cd 	.word	0x080001cd
 80001a8:	080001fd 	.word	0x080001fd
 80001ac:	08000205 	.word	0x08000205
 80001b0:	0800021f 	.word	0x0800021f
 80001b4:	0800021f 	.word	0x0800021f
 80001b8:	0800021f 	.word	0x0800021f
 80001bc:	0800021f 	.word	0x0800021f
 80001c0:	0800021f 	.word	0x0800021f
 80001c4:	0800021f 	.word	0x0800021f
 80001c8:	08000223 	.word	0x08000223
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	617b      	str	r3, [r7, #20]
      while( arg_int > 0 )
 80001d0:	e010      	b.n	80001f4 <u8x8_i2c+0x7c>
      {
	buffer[buf_idx++] = *data;
 80001d2:	4b17      	ldr	r3, [pc, #92]	@ (8000230 <u8x8_i2c+0xb8>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	1c5a      	adds	r2, r3, #1
 80001d8:	b2d1      	uxtb	r1, r2
 80001da:	4a15      	ldr	r2, [pc, #84]	@ (8000230 <u8x8_i2c+0xb8>)
 80001dc:	7011      	strb	r1, [r2, #0]
 80001de:	461a      	mov	r2, r3
 80001e0:	697b      	ldr	r3, [r7, #20]
 80001e2:	7819      	ldrb	r1, [r3, #0]
 80001e4:	4b13      	ldr	r3, [pc, #76]	@ (8000234 <u8x8_i2c+0xbc>)
 80001e6:	5499      	strb	r1, [r3, r2]
	data++;
 80001e8:	697b      	ldr	r3, [r7, #20]
 80001ea:	3301      	adds	r3, #1
 80001ec:	617b      	str	r3, [r7, #20]
	arg_int--;
 80001ee:	7abb      	ldrb	r3, [r7, #10]
 80001f0:	3b01      	subs	r3, #1
 80001f2:	72bb      	strb	r3, [r7, #10]
      while( arg_int > 0 )
 80001f4:	7abb      	ldrb	r3, [r7, #10]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d1eb      	bne.n	80001d2 <u8x8_i2c+0x5a>
      }
      break;
 80001fa:	e013      	b.n	8000224 <u8x8_i2c+0xac>
      break;
    case U8X8_MSG_BYTE_SET_DC:
      /* ignored for i2c */
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      buf_idx = 0;
 80001fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000230 <u8x8_i2c+0xb8>)
 80001fe:	2200      	movs	r2, #0
 8000200:	701a      	strb	r2, [r3, #0]
      break;
 8000202:	e00f      	b.n	8000224 <u8x8_i2c+0xac>
    case U8X8_MSG_BYTE_END_TRANSFER:
    	HAL_I2C_Master_Transmit(&hi2c1, 0x78, buffer, buf_idx, 1000);
 8000204:	4b0a      	ldr	r3, [pc, #40]	@ (8000230 <u8x8_i2c+0xb8>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	461a      	mov	r2, r3
 800020a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800020e:	9300      	str	r3, [sp, #0]
 8000210:	4613      	mov	r3, r2
 8000212:	4a08      	ldr	r2, [pc, #32]	@ (8000234 <u8x8_i2c+0xbc>)
 8000214:	2178      	movs	r1, #120	@ 0x78
 8000216:	4808      	ldr	r0, [pc, #32]	@ (8000238 <u8x8_i2c+0xc0>)
 8000218:	f000 fdf0 	bl	8000dfc <HAL_I2C_Master_Transmit>
      break;
 800021c:	e002      	b.n	8000224 <u8x8_i2c+0xac>
    default:
      return 0;
 800021e:	2300      	movs	r3, #0
 8000220:	e001      	b.n	8000226 <u8x8_i2c+0xae>
      break;
 8000222:	bf00      	nop
  }
  return 1;
 8000224:	2301      	movs	r3, #1
}
 8000226:	4618      	mov	r0, r3
 8000228:	3718      	adds	r7, #24
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	20000110 	.word	0x20000110
 8000234:	20000114 	.word	0x20000114
 8000238:	20000028 	.word	0x20000028

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000242:	f000 f9a9 	bl	8000598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000246:	f000 f837 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024a:	f000 f8a9 	bl	80003a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800024e:	f000 f879 	bl	8000344 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  u8g2_Setup_ssd1306_i2c_128x64_noname_f(&myDisplay, U8G2_R0, u8x8_i2c, u8x8_gpio_and_delay);
 8000252:	4b13      	ldr	r3, [pc, #76]	@ (80002a0 <main+0x64>)
 8000254:	4a13      	ldr	r2, [pc, #76]	@ (80002a4 <main+0x68>)
 8000256:	4914      	ldr	r1, [pc, #80]	@ (80002a8 <main+0x6c>)
 8000258:	4814      	ldr	r0, [pc, #80]	@ (80002ac <main+0x70>)
 800025a:	f001 ff45 	bl	80020e8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
  u8g2_InitDisplay(&myDisplay); // send init sequence to the display, display is in sleep mode after this,
 800025e:	4813      	ldr	r0, [pc, #76]	@ (80002ac <main+0x70>)
 8000260:	f003 fba1 	bl	80039a6 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&myDisplay, 0); // wake up display
 8000264:	2100      	movs	r1, #0
 8000266:	4811      	ldr	r0, [pc, #68]	@ (80002ac <main+0x70>)
 8000268:	f003 fbac 	bl	80039c4 <u8x8_SetPowerSave>

  u8g2_ClearDisplay(&myDisplay);
 800026c:	480f      	ldr	r0, [pc, #60]	@ (80002ac <main+0x70>)
 800026e:	f001 ff15 	bl	800209c <u8g2_ClearDisplay>
  u8g2_SetFont(&myDisplay, u8g2_font_6x10_tf);
 8000272:	490f      	ldr	r1, [pc, #60]	@ (80002b0 <main+0x74>)
 8000274:	480d      	ldr	r0, [pc, #52]	@ (80002ac <main+0x70>)
 8000276:	f002 fce1 	bl	8002c3c <u8g2_SetFont>
  u8g2_DrawStr(&myDisplay, 0,15,"Hello world");
 800027a:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <main+0x78>)
 800027c:	220f      	movs	r2, #15
 800027e:	2100      	movs	r1, #0
 8000280:	480a      	ldr	r0, [pc, #40]	@ (80002ac <main+0x70>)
 8000282:	f002 fc3d 	bl	8002b00 <u8g2_DrawStr>
  u8g2_DrawCircle(&myDisplay, 60, 30, 10, U8G2_DRAW_ALL);
 8000286:	230f      	movs	r3, #15
 8000288:	9300      	str	r3, [sp, #0]
 800028a:	230a      	movs	r3, #10
 800028c:	221e      	movs	r2, #30
 800028e:	213c      	movs	r1, #60	@ 0x3c
 8000290:	4806      	ldr	r0, [pc, #24]	@ (80002ac <main+0x70>)
 8000292:	f001 feca 	bl	800202a <u8g2_DrawCircle>
  u8g2_SendBuffer(&myDisplay);
 8000296:	4805      	ldr	r0, [pc, #20]	@ (80002ac <main+0x70>)
 8000298:	f001 fd77 	bl	8001d8a <u8g2_SendBuffer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029c:	bf00      	nop
 800029e:	e7fd      	b.n	800029c <main+0x60>
 80002a0:	0800014d 	.word	0x0800014d
 80002a4:	08000179 	.word	0x08000179
 80002a8:	08004358 	.word	0x08004358
 80002ac:	2000007c 	.word	0x2000007c
 80002b0:	08003b88 	.word	0x08003b88
 80002b4:	08003b50 	.word	0x08003b50

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b090      	sub	sp, #64	@ 0x40
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	2228      	movs	r2, #40	@ 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f003 fc09 	bl	8003ade <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002da:	2301      	movs	r3, #1
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	2301      	movs	r3, #1
 80002ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ec:	2302      	movs	r3, #2
 80002ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fc:	f107 0318 	add.w	r3, r7, #24
 8000300:	4618      	mov	r0, r3
 8000302:	f001 f8d3 	bl	80014ac <HAL_RCC_OscConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800030c:	f000 f876 	bl	80003fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000310:	230f      	movs	r3, #15
 8000312:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000314:	2302      	movs	r3, #2
 8000316:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800031c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2102      	movs	r1, #2
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fb40 	bl	80019b0 <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000336:	f000 f861 	bl	80003fc <Error_Handler>
  }
}
 800033a:	bf00      	nop
 800033c:	3740      	adds	r7, #64	@ 0x40
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000348:	4b12      	ldr	r3, [pc, #72]	@ (8000394 <MX_I2C1_Init+0x50>)
 800034a:	4a13      	ldr	r2, [pc, #76]	@ (8000398 <MX_I2C1_Init+0x54>)
 800034c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800034e:	4b11      	ldr	r3, [pc, #68]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000350:	4a12      	ldr	r2, [pc, #72]	@ (800039c <MX_I2C1_Init+0x58>)
 8000352:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000354:	4b0f      	ldr	r3, [pc, #60]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800035a:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <MX_I2C1_Init+0x50>)
 800035c:	2200      	movs	r2, #0
 800035e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000360:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000362:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000366:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000368:	4b0a      	ldr	r3, [pc, #40]	@ (8000394 <MX_I2C1_Init+0x50>)
 800036a:	2200      	movs	r2, #0
 800036c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800036e:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000374:	4b07      	ldr	r3, [pc, #28]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000376:	2200      	movs	r2, #0
 8000378:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800037a:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <MX_I2C1_Init+0x50>)
 800037c:	2200      	movs	r2, #0
 800037e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000380:	4804      	ldr	r0, [pc, #16]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000382:	f000 fbf7 	bl	8000b74 <HAL_I2C_Init>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800038c:	f000 f836 	bl	80003fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000028 	.word	0x20000028
 8000398:	40005400 	.word	0x40005400
 800039c:	00061a80 	.word	0x00061a80

080003a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a6:	4b14      	ldr	r3, [pc, #80]	@ (80003f8 <MX_GPIO_Init+0x58>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a13      	ldr	r2, [pc, #76]	@ (80003f8 <MX_GPIO_Init+0x58>)
 80003ac:	f043 0320 	orr.w	r3, r3, #32
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <MX_GPIO_Init+0x58>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f003 0320 	and.w	r3, r3, #32
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003be:	4b0e      	ldr	r3, [pc, #56]	@ (80003f8 <MX_GPIO_Init+0x58>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4a0d      	ldr	r2, [pc, #52]	@ (80003f8 <MX_GPIO_Init+0x58>)
 80003c4:	f043 0304 	orr.w	r3, r3, #4
 80003c8:	6193      	str	r3, [r2, #24]
 80003ca:	4b0b      	ldr	r3, [pc, #44]	@ (80003f8 <MX_GPIO_Init+0x58>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	f003 0304 	and.w	r3, r3, #4
 80003d2:	60bb      	str	r3, [r7, #8]
 80003d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d6:	4b08      	ldr	r3, [pc, #32]	@ (80003f8 <MX_GPIO_Init+0x58>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a07      	ldr	r2, [pc, #28]	@ (80003f8 <MX_GPIO_Init+0x58>)
 80003dc:	f043 0308 	orr.w	r3, r3, #8
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	4b05      	ldr	r3, [pc, #20]	@ (80003f8 <MX_GPIO_Init+0x58>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	f003 0308 	and.w	r3, r3, #8
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003ee:	bf00      	nop
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	40021000 	.word	0x40021000

080003fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000400:	b672      	cpsid	i
}
 8000402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000404:	bf00      	nop
 8000406:	e7fd      	b.n	8000404 <Error_Handler+0x8>

08000408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800040e:	4b15      	ldr	r3, [pc, #84]	@ (8000464 <HAL_MspInit+0x5c>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	4a14      	ldr	r2, [pc, #80]	@ (8000464 <HAL_MspInit+0x5c>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	6193      	str	r3, [r2, #24]
 800041a:	4b12      	ldr	r3, [pc, #72]	@ (8000464 <HAL_MspInit+0x5c>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000426:	4b0f      	ldr	r3, [pc, #60]	@ (8000464 <HAL_MspInit+0x5c>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	4a0e      	ldr	r2, [pc, #56]	@ (8000464 <HAL_MspInit+0x5c>)
 800042c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000430:	61d3      	str	r3, [r2, #28]
 8000432:	4b0c      	ldr	r3, [pc, #48]	@ (8000464 <HAL_MspInit+0x5c>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800043e:	4b0a      	ldr	r3, [pc, #40]	@ (8000468 <HAL_MspInit+0x60>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	4a04      	ldr	r2, [pc, #16]	@ (8000468 <HAL_MspInit+0x60>)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045a:	bf00      	nop
 800045c:	3714      	adds	r7, #20
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	40021000 	.word	0x40021000
 8000468:	40010000 	.word	0x40010000

0800046c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	f107 0310 	add.w	r3, r7, #16
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a15      	ldr	r2, [pc, #84]	@ (80004dc <HAL_I2C_MspInit+0x70>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d123      	bne.n	80004d4 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800048c:	4b14      	ldr	r3, [pc, #80]	@ (80004e0 <HAL_I2C_MspInit+0x74>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a13      	ldr	r2, [pc, #76]	@ (80004e0 <HAL_I2C_MspInit+0x74>)
 8000492:	f043 0308 	orr.w	r3, r3, #8
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b11      	ldr	r3, [pc, #68]	@ (80004e0 <HAL_I2C_MspInit+0x74>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0308 	and.w	r3, r3, #8
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004a4:	23c0      	movs	r3, #192	@ 0xc0
 80004a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004a8:	2312      	movs	r3, #18
 80004aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ac:	2303      	movs	r3, #3
 80004ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	480b      	ldr	r0, [pc, #44]	@ (80004e4 <HAL_I2C_MspInit+0x78>)
 80004b8:	f000 f9d8 	bl	800086c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004bc:	4b08      	ldr	r3, [pc, #32]	@ (80004e0 <HAL_I2C_MspInit+0x74>)
 80004be:	69db      	ldr	r3, [r3, #28]
 80004c0:	4a07      	ldr	r2, [pc, #28]	@ (80004e0 <HAL_I2C_MspInit+0x74>)
 80004c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004c6:	61d3      	str	r3, [r2, #28]
 80004c8:	4b05      	ldr	r3, [pc, #20]	@ (80004e0 <HAL_I2C_MspInit+0x74>)
 80004ca:	69db      	ldr	r3, [r3, #28]
 80004cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80004d4:	bf00      	nop
 80004d6:	3720      	adds	r7, #32
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40005400 	.word	0x40005400
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010c00 	.word	0x40010c00

080004e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <NMI_Handler+0x4>

080004f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <HardFault_Handler+0x4>

080004f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <MemManage_Handler+0x4>

08000500 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <BusFault_Handler+0x4>

08000508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <UsageFault_Handler+0x4>

08000510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000538:	f000 f874 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}

08000540 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <Reset_Handler>:
 800054c:	f7ff fff8 	bl	8000540 <SystemInit>
 8000550:	480b      	ldr	r0, [pc, #44]	@ (8000580 <LoopFillZerobss+0xe>)
 8000552:	490c      	ldr	r1, [pc, #48]	@ (8000584 <LoopFillZerobss+0x12>)
 8000554:	4a0c      	ldr	r2, [pc, #48]	@ (8000588 <LoopFillZerobss+0x16>)
 8000556:	2300      	movs	r3, #0
 8000558:	e002      	b.n	8000560 <LoopCopyDataInit>

0800055a <CopyDataInit>:
 800055a:	58d4      	ldr	r4, [r2, r3]
 800055c:	50c4      	str	r4, [r0, r3]
 800055e:	3304      	adds	r3, #4

08000560 <LoopCopyDataInit>:
 8000560:	18c4      	adds	r4, r0, r3
 8000562:	428c      	cmp	r4, r1
 8000564:	d3f9      	bcc.n	800055a <CopyDataInit>
 8000566:	4a09      	ldr	r2, [pc, #36]	@ (800058c <LoopFillZerobss+0x1a>)
 8000568:	4c09      	ldr	r4, [pc, #36]	@ (8000590 <LoopFillZerobss+0x1e>)
 800056a:	2300      	movs	r3, #0
 800056c:	e001      	b.n	8000572 <LoopFillZerobss>

0800056e <FillZerobss>:
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	3204      	adds	r2, #4

08000572 <LoopFillZerobss>:
 8000572:	42a2      	cmp	r2, r4
 8000574:	d3fb      	bcc.n	800056e <FillZerobss>
 8000576:	f003 fabb 	bl	8003af0 <__libc_init_array>
 800057a:	f7ff fe5f 	bl	800023c <main>
 800057e:	4770      	bx	lr
 8000580:	20000000 	.word	0x20000000
 8000584:	2000000c 	.word	0x2000000c
 8000588:	080043dc 	.word	0x080043dc
 800058c:	2000000c 	.word	0x2000000c
 8000590:	2000053c 	.word	0x2000053c

08000594 <ADC1_2_IRQHandler>:
 8000594:	e7fe      	b.n	8000594 <ADC1_2_IRQHandler>
	...

08000598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <HAL_Init+0x28>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	@ (80005c0 <HAL_Init+0x28>)
 80005a2:	f043 0310 	orr.w	r3, r3, #16
 80005a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f92b 	bl	8000804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	200f      	movs	r0, #15
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f7ff ff28 	bl	8000408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40022000 	.word	0x40022000

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f935 	bl	8000852 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f90b 	bl	800081a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	@ (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000000 	.word	0x20000000
 800061c:	20000008 	.word	0x20000008
 8000620:	20000004 	.word	0x20000004

08000624 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b05      	ldr	r3, [pc, #20]	@ (8000640 <HAL_IncTick+0x1c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <HAL_IncTick+0x20>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a03      	ldr	r2, [pc, #12]	@ (8000644 <HAL_IncTick+0x20>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	20000008 	.word	0x20000008
 8000644:	20000134 	.word	0x20000134

08000648 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return uwTick;
 800064c:	4b02      	ldr	r3, [pc, #8]	@ (8000658 <HAL_GetTick+0x10>)
 800064e:	681b      	ldr	r3, [r3, #0]
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	20000134 	.word	0x20000134

0800065c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000664:	f7ff fff0 	bl	8000648 <HAL_GetTick>
 8000668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000674:	d005      	beq.n	8000682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000676:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <HAL_Delay+0x44>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4413      	add	r3, r2
 8000680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000682:	bf00      	nop
 8000684:	f7ff ffe0 	bl	8000648 <HAL_GetTick>
 8000688:	4602      	mov	r2, r0
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	429a      	cmp	r2, r3
 8000692:	d8f7      	bhi.n	8000684 <HAL_Delay+0x28>
  {
  }
}
 8000694:	bf00      	nop
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000008 	.word	0x20000008

080006a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	@ (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f0:	4b04      	ldr	r3, [pc, #16]	@ (8000704 <__NVIC_GetPriorityGrouping+0x18>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	f003 0307 	and.w	r3, r3, #7
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	490c      	ldr	r1, [pc, #48]	@ (8000754 <__NVIC_SetPriority+0x4c>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4908      	ldr	r1, [pc, #32]	@ (8000758 <__NVIC_SetPriority+0x50>)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	3b04      	subs	r3, #4
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	@ 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f1c3 0307 	rsb	r3, r3, #7
 8000776:	2b04      	cmp	r3, #4
 8000778:	bf28      	it	cs
 800077a:	2304      	movcs	r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3304      	adds	r3, #4
 8000782:	2b06      	cmp	r3, #6
 8000784:	d902      	bls.n	800078c <NVIC_EncodePriority+0x30>
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3b03      	subs	r3, #3
 800078a:	e000      	b.n	800078e <NVIC_EncodePriority+0x32>
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	f04f 32ff 	mov.w	r2, #4294967295
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43da      	mvns	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	401a      	ands	r2, r3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	43d9      	mvns	r1, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	4313      	orrs	r3, r2
         );
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3724      	adds	r7, #36	@ 0x24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007d0:	d301      	bcc.n	80007d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00f      	b.n	80007f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000800 <SysTick_Config+0x40>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007de:	210f      	movs	r1, #15
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	f7ff ff90 	bl	8000708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e8:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <SysTick_Config+0x40>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ee:	4b04      	ldr	r3, [pc, #16]	@ (8000800 <SysTick_Config+0x40>)
 80007f0:	2207      	movs	r2, #7
 80007f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	e000e010 	.word	0xe000e010

08000804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ff49 	bl	80006a4 <__NVIC_SetPriorityGrouping>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800081a:	b580      	push	{r7, lr}
 800081c:	b086      	sub	sp, #24
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	60b9      	str	r1, [r7, #8]
 8000824:	607a      	str	r2, [r7, #4]
 8000826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800082c:	f7ff ff5e 	bl	80006ec <__NVIC_GetPriorityGrouping>
 8000830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	68b9      	ldr	r1, [r7, #8]
 8000836:	6978      	ldr	r0, [r7, #20]
 8000838:	f7ff ff90 	bl	800075c <NVIC_EncodePriority>
 800083c:	4602      	mov	r2, r0
 800083e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff5f 	bl	8000708 <__NVIC_SetPriority>
}
 800084a:	bf00      	nop
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff ffb0 	bl	80007c0 <SysTick_Config>
 8000860:	4603      	mov	r3, r0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800086c:	b480      	push	{r7}
 800086e:	b08b      	sub	sp, #44	@ 0x2c
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800087e:	e169      	b.n	8000b54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000880:	2201      	movs	r2, #1
 8000882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	69fa      	ldr	r2, [r7, #28]
 8000890:	4013      	ands	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	429a      	cmp	r2, r3
 800089a:	f040 8158 	bne.w	8000b4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	4a9a      	ldr	r2, [pc, #616]	@ (8000b0c <HAL_GPIO_Init+0x2a0>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d05e      	beq.n	8000966 <HAL_GPIO_Init+0xfa>
 80008a8:	4a98      	ldr	r2, [pc, #608]	@ (8000b0c <HAL_GPIO_Init+0x2a0>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d875      	bhi.n	800099a <HAL_GPIO_Init+0x12e>
 80008ae:	4a98      	ldr	r2, [pc, #608]	@ (8000b10 <HAL_GPIO_Init+0x2a4>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d058      	beq.n	8000966 <HAL_GPIO_Init+0xfa>
 80008b4:	4a96      	ldr	r2, [pc, #600]	@ (8000b10 <HAL_GPIO_Init+0x2a4>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d86f      	bhi.n	800099a <HAL_GPIO_Init+0x12e>
 80008ba:	4a96      	ldr	r2, [pc, #600]	@ (8000b14 <HAL_GPIO_Init+0x2a8>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d052      	beq.n	8000966 <HAL_GPIO_Init+0xfa>
 80008c0:	4a94      	ldr	r2, [pc, #592]	@ (8000b14 <HAL_GPIO_Init+0x2a8>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d869      	bhi.n	800099a <HAL_GPIO_Init+0x12e>
 80008c6:	4a94      	ldr	r2, [pc, #592]	@ (8000b18 <HAL_GPIO_Init+0x2ac>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d04c      	beq.n	8000966 <HAL_GPIO_Init+0xfa>
 80008cc:	4a92      	ldr	r2, [pc, #584]	@ (8000b18 <HAL_GPIO_Init+0x2ac>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d863      	bhi.n	800099a <HAL_GPIO_Init+0x12e>
 80008d2:	4a92      	ldr	r2, [pc, #584]	@ (8000b1c <HAL_GPIO_Init+0x2b0>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d046      	beq.n	8000966 <HAL_GPIO_Init+0xfa>
 80008d8:	4a90      	ldr	r2, [pc, #576]	@ (8000b1c <HAL_GPIO_Init+0x2b0>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d85d      	bhi.n	800099a <HAL_GPIO_Init+0x12e>
 80008de:	2b12      	cmp	r3, #18
 80008e0:	d82a      	bhi.n	8000938 <HAL_GPIO_Init+0xcc>
 80008e2:	2b12      	cmp	r3, #18
 80008e4:	d859      	bhi.n	800099a <HAL_GPIO_Init+0x12e>
 80008e6:	a201      	add	r2, pc, #4	@ (adr r2, 80008ec <HAL_GPIO_Init+0x80>)
 80008e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ec:	08000967 	.word	0x08000967
 80008f0:	08000941 	.word	0x08000941
 80008f4:	08000953 	.word	0x08000953
 80008f8:	08000995 	.word	0x08000995
 80008fc:	0800099b 	.word	0x0800099b
 8000900:	0800099b 	.word	0x0800099b
 8000904:	0800099b 	.word	0x0800099b
 8000908:	0800099b 	.word	0x0800099b
 800090c:	0800099b 	.word	0x0800099b
 8000910:	0800099b 	.word	0x0800099b
 8000914:	0800099b 	.word	0x0800099b
 8000918:	0800099b 	.word	0x0800099b
 800091c:	0800099b 	.word	0x0800099b
 8000920:	0800099b 	.word	0x0800099b
 8000924:	0800099b 	.word	0x0800099b
 8000928:	0800099b 	.word	0x0800099b
 800092c:	0800099b 	.word	0x0800099b
 8000930:	08000949 	.word	0x08000949
 8000934:	0800095d 	.word	0x0800095d
 8000938:	4a79      	ldr	r2, [pc, #484]	@ (8000b20 <HAL_GPIO_Init+0x2b4>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d013      	beq.n	8000966 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800093e:	e02c      	b.n	800099a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	623b      	str	r3, [r7, #32]
          break;
 8000946:	e029      	b.n	800099c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	3304      	adds	r3, #4
 800094e:	623b      	str	r3, [r7, #32]
          break;
 8000950:	e024      	b.n	800099c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	3308      	adds	r3, #8
 8000958:	623b      	str	r3, [r7, #32]
          break;
 800095a:	e01f      	b.n	800099c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	330c      	adds	r3, #12
 8000962:	623b      	str	r3, [r7, #32]
          break;
 8000964:	e01a      	b.n	800099c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d102      	bne.n	8000974 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800096e:	2304      	movs	r3, #4
 8000970:	623b      	str	r3, [r7, #32]
          break;
 8000972:	e013      	b.n	800099c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d105      	bne.n	8000988 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800097c:	2308      	movs	r3, #8
 800097e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	69fa      	ldr	r2, [r7, #28]
 8000984:	611a      	str	r2, [r3, #16]
          break;
 8000986:	e009      	b.n	800099c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000988:	2308      	movs	r3, #8
 800098a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	69fa      	ldr	r2, [r7, #28]
 8000990:	615a      	str	r2, [r3, #20]
          break;
 8000992:	e003      	b.n	800099c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
          break;
 8000998:	e000      	b.n	800099c <HAL_GPIO_Init+0x130>
          break;
 800099a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	2bff      	cmp	r3, #255	@ 0xff
 80009a0:	d801      	bhi.n	80009a6 <HAL_GPIO_Init+0x13a>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	e001      	b.n	80009aa <HAL_GPIO_Init+0x13e>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3304      	adds	r3, #4
 80009aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	2bff      	cmp	r3, #255	@ 0xff
 80009b0:	d802      	bhi.n	80009b8 <HAL_GPIO_Init+0x14c>
 80009b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	e002      	b.n	80009be <HAL_GPIO_Init+0x152>
 80009b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ba:	3b08      	subs	r3, #8
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	210f      	movs	r1, #15
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	fa01 f303 	lsl.w	r3, r1, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	401a      	ands	r2, r3
 80009d0:	6a39      	ldr	r1, [r7, #32]
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	fa01 f303 	lsl.w	r3, r1, r3
 80009d8:	431a      	orrs	r2, r3
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f000 80b1 	beq.w	8000b4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009ec:	4b4d      	ldr	r3, [pc, #308]	@ (8000b24 <HAL_GPIO_Init+0x2b8>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a4c      	ldr	r2, [pc, #304]	@ (8000b24 <HAL_GPIO_Init+0x2b8>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b4a      	ldr	r3, [pc, #296]	@ (8000b24 <HAL_GPIO_Init+0x2b8>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a04:	4a48      	ldr	r2, [pc, #288]	@ (8000b28 <HAL_GPIO_Init+0x2bc>)
 8000a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a08:	089b      	lsrs	r3, r3, #2
 8000a0a:	3302      	adds	r3, #2
 8000a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a14:	f003 0303 	and.w	r3, r3, #3
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	220f      	movs	r2, #15
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	4013      	ands	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a40      	ldr	r2, [pc, #256]	@ (8000b2c <HAL_GPIO_Init+0x2c0>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d013      	beq.n	8000a58 <HAL_GPIO_Init+0x1ec>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a3f      	ldr	r2, [pc, #252]	@ (8000b30 <HAL_GPIO_Init+0x2c4>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d00d      	beq.n	8000a54 <HAL_GPIO_Init+0x1e8>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a3e      	ldr	r2, [pc, #248]	@ (8000b34 <HAL_GPIO_Init+0x2c8>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d007      	beq.n	8000a50 <HAL_GPIO_Init+0x1e4>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a3d      	ldr	r2, [pc, #244]	@ (8000b38 <HAL_GPIO_Init+0x2cc>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d101      	bne.n	8000a4c <HAL_GPIO_Init+0x1e0>
 8000a48:	2303      	movs	r3, #3
 8000a4a:	e006      	b.n	8000a5a <HAL_GPIO_Init+0x1ee>
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	e004      	b.n	8000a5a <HAL_GPIO_Init+0x1ee>
 8000a50:	2302      	movs	r3, #2
 8000a52:	e002      	b.n	8000a5a <HAL_GPIO_Init+0x1ee>
 8000a54:	2301      	movs	r3, #1
 8000a56:	e000      	b.n	8000a5a <HAL_GPIO_Init+0x1ee>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a5c:	f002 0203 	and.w	r2, r2, #3
 8000a60:	0092      	lsls	r2, r2, #2
 8000a62:	4093      	lsls	r3, r2
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a6a:	492f      	ldr	r1, [pc, #188]	@ (8000b28 <HAL_GPIO_Init+0x2bc>)
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6e:	089b      	lsrs	r3, r3, #2
 8000a70:	3302      	adds	r3, #2
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d006      	beq.n	8000a92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a84:	4b2d      	ldr	r3, [pc, #180]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	492c      	ldr	r1, [pc, #176]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	608b      	str	r3, [r1, #8]
 8000a90:	e006      	b.n	8000aa0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a92:	4b2a      	ldr	r3, [pc, #168]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	4928      	ldr	r1, [pc, #160]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d006      	beq.n	8000aba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000aac:	4b23      	ldr	r3, [pc, #140]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	4922      	ldr	r1, [pc, #136]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	60cb      	str	r3, [r1, #12]
 8000ab8:	e006      	b.n	8000ac8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aba:	4b20      	ldr	r3, [pc, #128]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000abc:	68da      	ldr	r2, [r3, #12]
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	491e      	ldr	r1, [pc, #120]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d006      	beq.n	8000ae2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ad4:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000ad6:	685a      	ldr	r2, [r3, #4]
 8000ad8:	4918      	ldr	r1, [pc, #96]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	604b      	str	r3, [r1, #4]
 8000ae0:	e006      	b.n	8000af0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ae2:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	4914      	ldr	r1, [pc, #80]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000aec:	4013      	ands	r3, r2
 8000aee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d021      	beq.n	8000b40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	490e      	ldr	r1, [pc, #56]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	600b      	str	r3, [r1, #0]
 8000b08:	e021      	b.n	8000b4e <HAL_GPIO_Init+0x2e2>
 8000b0a:	bf00      	nop
 8000b0c:	10320000 	.word	0x10320000
 8000b10:	10310000 	.word	0x10310000
 8000b14:	10220000 	.word	0x10220000
 8000b18:	10210000 	.word	0x10210000
 8000b1c:	10120000 	.word	0x10120000
 8000b20:	10110000 	.word	0x10110000
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40010000 	.word	0x40010000
 8000b2c:	40010800 	.word	0x40010800
 8000b30:	40010c00 	.word	0x40010c00
 8000b34:	40011000 	.word	0x40011000
 8000b38:	40011400 	.word	0x40011400
 8000b3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b40:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <HAL_GPIO_Init+0x304>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	43db      	mvns	r3, r3
 8000b48:	4909      	ldr	r1, [pc, #36]	@ (8000b70 <HAL_GPIO_Init+0x304>)
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b50:	3301      	adds	r3, #1
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f47f ae8e 	bne.w	8000880 <HAL_GPIO_Init+0x14>
  }
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	372c      	adds	r7, #44	@ 0x2c
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	40010400 	.word	0x40010400

08000b74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d101      	bne.n	8000b86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e12b      	b.n	8000dde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d106      	bne.n	8000ba0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fc66 	bl	800046c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2224      	movs	r2, #36	@ 0x24
 8000ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f022 0201 	bic.w	r2, r2, #1
 8000bb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000bc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000bd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000bd8:	f001 f832 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 8000bdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	4a81      	ldr	r2, [pc, #516]	@ (8000de8 <HAL_I2C_Init+0x274>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d807      	bhi.n	8000bf8 <HAL_I2C_Init+0x84>
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4a80      	ldr	r2, [pc, #512]	@ (8000dec <HAL_I2C_Init+0x278>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	bf94      	ite	ls
 8000bf0:	2301      	movls	r3, #1
 8000bf2:	2300      	movhi	r3, #0
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	e006      	b.n	8000c06 <HAL_I2C_Init+0x92>
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4a7d      	ldr	r2, [pc, #500]	@ (8000df0 <HAL_I2C_Init+0x27c>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	bf94      	ite	ls
 8000c00:	2301      	movls	r3, #1
 8000c02:	2300      	movhi	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e0e7      	b.n	8000dde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4a78      	ldr	r2, [pc, #480]	@ (8000df4 <HAL_I2C_Init+0x280>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	0c9b      	lsrs	r3, r3, #18
 8000c18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6a1b      	ldr	r3, [r3, #32]
 8000c34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	4a6a      	ldr	r2, [pc, #424]	@ (8000de8 <HAL_I2C_Init+0x274>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d802      	bhi.n	8000c48 <HAL_I2C_Init+0xd4>
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	3301      	adds	r3, #1
 8000c46:	e009      	b.n	8000c5c <HAL_I2C_Init+0xe8>
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000c4e:	fb02 f303 	mul.w	r3, r2, r3
 8000c52:	4a69      	ldr	r2, [pc, #420]	@ (8000df8 <HAL_I2C_Init+0x284>)
 8000c54:	fba2 2303 	umull	r2, r3, r2, r3
 8000c58:	099b      	lsrs	r3, r3, #6
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	6812      	ldr	r2, [r2, #0]
 8000c60:	430b      	orrs	r3, r1
 8000c62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000c6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	495c      	ldr	r1, [pc, #368]	@ (8000de8 <HAL_I2C_Init+0x274>)
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	d819      	bhi.n	8000cb0 <HAL_I2C_Init+0x13c>
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	1e59      	subs	r1, r3, #1
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c8a:	1c59      	adds	r1, r3, #1
 8000c8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000c90:	400b      	ands	r3, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00a      	beq.n	8000cac <HAL_I2C_Init+0x138>
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	1e59      	subs	r1, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000caa:	e051      	b.n	8000d50 <HAL_I2C_Init+0x1dc>
 8000cac:	2304      	movs	r3, #4
 8000cae:	e04f      	b.n	8000d50 <HAL_I2C_Init+0x1dc>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d111      	bne.n	8000cdc <HAL_I2C_Init+0x168>
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	1e58      	subs	r0, r3, #1
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6859      	ldr	r1, [r3, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	440b      	add	r3, r1
 8000cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cca:	3301      	adds	r3, #1
 8000ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	bf0c      	ite	eq
 8000cd4:	2301      	moveq	r3, #1
 8000cd6:	2300      	movne	r3, #0
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	e012      	b.n	8000d02 <HAL_I2C_Init+0x18e>
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	1e58      	subs	r0, r3, #1
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6859      	ldr	r1, [r3, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	0099      	lsls	r1, r3, #2
 8000cec:	440b      	add	r3, r1
 8000cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bf0c      	ite	eq
 8000cfc:	2301      	moveq	r3, #1
 8000cfe:	2300      	movne	r3, #0
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_I2C_Init+0x196>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e022      	b.n	8000d50 <HAL_I2C_Init+0x1dc>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10e      	bne.n	8000d30 <HAL_I2C_Init+0x1bc>
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	1e58      	subs	r0, r3, #1
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6859      	ldr	r1, [r3, #4]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	440b      	add	r3, r1
 8000d20:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d24:	3301      	adds	r3, #1
 8000d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d2e:	e00f      	b.n	8000d50 <HAL_I2C_Init+0x1dc>
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	1e58      	subs	r0, r3, #1
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6859      	ldr	r1, [r3, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	0099      	lsls	r1, r3, #2
 8000d40:	440b      	add	r3, r1
 8000d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d46:	3301      	adds	r3, #1
 8000d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	6809      	ldr	r1, [r1, #0]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69da      	ldr	r2, [r3, #28]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a1b      	ldr	r3, [r3, #32]
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	430a      	orrs	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000d7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6911      	ldr	r1, [r2, #16]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68d2      	ldr	r2, [r2, #12]
 8000d8a:	4311      	orrs	r1, r2
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	6812      	ldr	r2, [r2, #0]
 8000d90:	430b      	orrs	r3, r1
 8000d92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	695a      	ldr	r2, [r3, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0201 	orr.w	r2, r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2220      	movs	r2, #32
 8000dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	000186a0 	.word	0x000186a0
 8000dec:	001e847f 	.word	0x001e847f
 8000df0:	003d08ff 	.word	0x003d08ff
 8000df4:	431bde83 	.word	0x431bde83
 8000df8:	10624dd3 	.word	0x10624dd3

08000dfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af02      	add	r7, sp, #8
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	461a      	mov	r2, r3
 8000e08:	460b      	mov	r3, r1
 8000e0a:	817b      	strh	r3, [r7, #10]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff fc1a 	bl	8000648 <HAL_GetTick>
 8000e14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b20      	cmp	r3, #32
 8000e20:	f040 80e0 	bne.w	8000fe4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2319      	movs	r3, #25
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4970      	ldr	r1, [pc, #448]	@ (8000ff0 <HAL_I2C_Master_Transmit+0x1f4>)
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f000 f964 	bl	80010fc <I2C_WaitOnFlagUntilTimeout>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e0d3      	b.n	8000fe6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d101      	bne.n	8000e4c <HAL_I2C_Master_Transmit+0x50>
 8000e48:	2302      	movs	r3, #2
 8000e4a:	e0cc      	b.n	8000fe6 <HAL_I2C_Master_Transmit+0x1ea>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d007      	beq.n	8000e72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f042 0201 	orr.w	r2, r2, #1
 8000e70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2221      	movs	r2, #33	@ 0x21
 8000e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2210      	movs	r2, #16
 8000e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2200      	movs	r2, #0
 8000e96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	893a      	ldrh	r2, [r7, #8]
 8000ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4a50      	ldr	r2, [pc, #320]	@ (8000ff4 <HAL_I2C_Master_Transmit+0x1f8>)
 8000eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000eb4:	8979      	ldrh	r1, [r7, #10]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	6a3a      	ldr	r2, [r7, #32]
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f000 f89c 	bl	8000ff8 <I2C_MasterRequestWrite>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e08d      	b.n	8000fe6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000ee0:	e066      	b.n	8000fb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	6a39      	ldr	r1, [r7, #32]
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	f000 fa22 	bl	8001330 <I2C_WaitOnTXEFlagUntilTimeout>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d00d      	beq.n	8000f0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	d107      	bne.n	8000f0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e06b      	b.n	8000fe6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f36:	3b01      	subs	r3, #1
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	2b04      	cmp	r3, #4
 8000f4a:	d11b      	bne.n	8000f84 <HAL_I2C_Master_Transmit+0x188>
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d017      	beq.n	8000f84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	3b01      	subs	r3, #1
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	6a39      	ldr	r1, [r7, #32]
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f000 fa19 	bl	80013c0 <I2C_WaitOnBTFFlagUntilTimeout>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d00d      	beq.n	8000fb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d107      	bne.n	8000fac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000faa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e01a      	b.n	8000fe6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d194      	bne.n	8000ee2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2220      	movs	r2, #32
 8000fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e000      	b.n	8000fe6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000fe4:	2302      	movs	r3, #2
  }
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	00100002 	.word	0x00100002
 8000ff4:	ffff0000 	.word	0xffff0000

08000ff8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	460b      	mov	r3, r1
 8001006:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	2b08      	cmp	r3, #8
 8001012:	d006      	beq.n	8001022 <I2C_MasterRequestWrite+0x2a>
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d003      	beq.n	8001022 <I2C_MasterRequestWrite+0x2a>
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001020:	d108      	bne.n	8001034 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e00b      	b.n	800104c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001038:	2b12      	cmp	r3, #18
 800103a:	d107      	bne.n	800104c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800104a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f000 f84f 	bl	80010fc <I2C_WaitOnFlagUntilTimeout>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00d      	beq.n	8001080 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800106e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001072:	d103      	bne.n	800107c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800107a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e035      	b.n	80010ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001088:	d108      	bne.n	800109c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800108a:	897b      	ldrh	r3, [r7, #10]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	461a      	mov	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	e01b      	b.n	80010d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800109c:	897b      	ldrh	r3, [r7, #10]
 800109e:	11db      	asrs	r3, r3, #7
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f003 0306 	and.w	r3, r3, #6
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f063 030f 	orn	r3, r3, #15
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	490e      	ldr	r1, [pc, #56]	@ (80010f4 <I2C_MasterRequestWrite+0xfc>)
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f000 f898 	bl	80011f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e010      	b.n	80010ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80010ca:	897b      	ldrh	r3, [r7, #10]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	4907      	ldr	r1, [pc, #28]	@ (80010f8 <I2C_MasterRequestWrite+0x100>)
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f000 f888 	bl	80011f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	00010008 	.word	0x00010008
 80010f8:	00010002 	.word	0x00010002

080010fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	4613      	mov	r3, r2
 800110a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800110c:	e048      	b.n	80011a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001114:	d044      	beq.n	80011a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001116:	f7ff fa97 	bl	8000648 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d302      	bcc.n	800112c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d139      	bne.n	80011a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	0c1b      	lsrs	r3, r3, #16
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b01      	cmp	r3, #1
 8001134:	d10d      	bne.n	8001152 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	43da      	mvns	r2, r3
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	4013      	ands	r3, r2
 8001142:	b29b      	uxth	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf0c      	ite	eq
 8001148:	2301      	moveq	r3, #1
 800114a:	2300      	movne	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	e00c      	b.n	800116c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	43da      	mvns	r2, r3
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	4013      	ands	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	bf0c      	ite	eq
 8001164:	2301      	moveq	r3, #1
 8001166:	2300      	movne	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	429a      	cmp	r2, r3
 8001170:	d116      	bne.n	80011a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2220      	movs	r2, #32
 800117c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118c:	f043 0220 	orr.w	r2, r3, #32
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e023      	b.n	80011e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	0c1b      	lsrs	r3, r3, #16
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d10d      	bne.n	80011c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	43da      	mvns	r2, r3
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	4013      	ands	r3, r2
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	bf0c      	ite	eq
 80011bc:	2301      	moveq	r3, #1
 80011be:	2300      	movne	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	e00c      	b.n	80011e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	43da      	mvns	r2, r3
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	4013      	ands	r3, r2
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	bf0c      	ite	eq
 80011d8:	2301      	moveq	r3, #1
 80011da:	2300      	movne	r3, #0
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	461a      	mov	r2, r3
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d093      	beq.n	800110e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80011fe:	e071      	b.n	80012e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800120a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800120e:	d123      	bne.n	8001258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800121e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001228:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2220      	movs	r2, #32
 8001234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	f043 0204 	orr.w	r2, r3, #4
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e067      	b.n	8001328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125e:	d041      	beq.n	80012e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001260:	f7ff f9f2 	bl	8000648 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	429a      	cmp	r2, r3
 800126e:	d302      	bcc.n	8001276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d136      	bne.n	80012e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	0c1b      	lsrs	r3, r3, #16
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b01      	cmp	r3, #1
 800127e:	d10c      	bne.n	800129a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4013      	ands	r3, r2
 800128c:	b29b      	uxth	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	bf14      	ite	ne
 8001292:	2301      	movne	r3, #1
 8001294:	2300      	moveq	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	e00b      	b.n	80012b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	43da      	mvns	r2, r3
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	4013      	ands	r3, r2
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf14      	ite	ne
 80012ac:	2301      	movne	r3, #1
 80012ae:	2300      	moveq	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d016      	beq.n	80012e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2220      	movs	r2, #32
 80012c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	f043 0220 	orr.w	r2, r3, #32
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e021      	b.n	8001328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	0c1b      	lsrs	r3, r3, #16
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d10c      	bne.n	8001308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	43da      	mvns	r2, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	4013      	ands	r3, r2
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf14      	ite	ne
 8001300:	2301      	movne	r3, #1
 8001302:	2300      	moveq	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	e00b      	b.n	8001320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	43da      	mvns	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4013      	ands	r3, r2
 8001314:	b29b      	uxth	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf14      	ite	ne
 800131a:	2301      	movne	r3, #1
 800131c:	2300      	moveq	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	f47f af6d 	bne.w	8001200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800133c:	e034      	b.n	80013a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f000 f886 	bl	8001450 <I2C_IsAcknowledgeFailed>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e034      	b.n	80013b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001354:	d028      	beq.n	80013a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001356:	f7ff f977 	bl	8000648 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	429a      	cmp	r2, r3
 8001364:	d302      	bcc.n	800136c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d11d      	bne.n	80013a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001376:	2b80      	cmp	r3, #128	@ 0x80
 8001378:	d016      	beq.n	80013a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2220      	movs	r2, #32
 8001384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	f043 0220 	orr.w	r2, r3, #32
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e007      	b.n	80013b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013b2:	2b80      	cmp	r3, #128	@ 0x80
 80013b4:	d1c3      	bne.n	800133e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80013cc:	e034      	b.n	8001438 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 f83e 	bl	8001450 <I2C_IsAcknowledgeFailed>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e034      	b.n	8001448 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e4:	d028      	beq.n	8001438 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013e6:	f7ff f92f 	bl	8000648 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d302      	bcc.n	80013fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d11d      	bne.n	8001438 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	2b04      	cmp	r3, #4
 8001408:	d016      	beq.n	8001438 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2220      	movs	r2, #32
 8001414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	f043 0220 	orr.w	r2, r3, #32
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e007      	b.n	8001448 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	2b04      	cmp	r3, #4
 8001444:	d1c3      	bne.n	80013ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001466:	d11b      	bne.n	80014a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001470:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2220      	movs	r2, #32
 800147c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	f043 0204 	orr.w	r2, r3, #4
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e272      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8087 	beq.w	80015da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014cc:	4b92      	ldr	r3, [pc, #584]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d00c      	beq.n	80014f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014d8:	4b8f      	ldr	r3, [pc, #572]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 030c 	and.w	r3, r3, #12
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d112      	bne.n	800150a <HAL_RCC_OscConfig+0x5e>
 80014e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014f0:	d10b      	bne.n	800150a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f2:	4b89      	ldr	r3, [pc, #548]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d06c      	beq.n	80015d8 <HAL_RCC_OscConfig+0x12c>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d168      	bne.n	80015d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e24c      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x76>
 8001514:	4b80      	ldr	r3, [pc, #512]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a7f      	ldr	r2, [pc, #508]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800151a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	e02e      	b.n	8001580 <HAL_RCC_OscConfig+0xd4>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x98>
 800152a:	4b7b      	ldr	r3, [pc, #492]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a7a      	ldr	r2, [pc, #488]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b78      	ldr	r3, [pc, #480]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a77      	ldr	r2, [pc, #476]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800153c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e01d      	b.n	8001580 <HAL_RCC_OscConfig+0xd4>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0xbc>
 800154e:	4b72      	ldr	r3, [pc, #456]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a71      	ldr	r2, [pc, #452]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b6f      	ldr	r3, [pc, #444]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a6e      	ldr	r2, [pc, #440]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e00b      	b.n	8001580 <HAL_RCC_OscConfig+0xd4>
 8001568:	4b6b      	ldr	r3, [pc, #428]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a6a      	ldr	r2, [pc, #424]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800156e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b68      	ldr	r3, [pc, #416]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a67      	ldr	r2, [pc, #412]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800157a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800157e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff f85e 	bl	8000648 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff f85a 	bl	8000648 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	@ 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e200      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0xe4>
 80015ae:	e014      	b.n	80015da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff f84a 	bl	8000648 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff f846 	bl	8000648 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	@ 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e1ec      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ca:	4b53      	ldr	r3, [pc, #332]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x10c>
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d063      	beq.n	80016ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00b      	beq.n	800160a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015f2:	4b49      	ldr	r3, [pc, #292]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d11c      	bne.n	8001638 <HAL_RCC_OscConfig+0x18c>
 80015fe:	4b46      	ldr	r3, [pc, #280]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d116      	bne.n	8001638 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160a:	4b43      	ldr	r3, [pc, #268]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <HAL_RCC_OscConfig+0x176>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d001      	beq.n	8001622 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e1c0      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001622:	4b3d      	ldr	r3, [pc, #244]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4939      	ldr	r1, [pc, #228]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001636:	e03a      	b.n	80016ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d020      	beq.n	8001682 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001640:	4b36      	ldr	r3, [pc, #216]	@ (800171c <HAL_RCC_OscConfig+0x270>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7fe ffff 	bl	8000648 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164e:	f7fe fffb 	bl	8000648 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e1a1      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001660:	4b2d      	ldr	r3, [pc, #180]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166c:	4b2a      	ldr	r3, [pc, #168]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4927      	ldr	r1, [pc, #156]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]
 8001680:	e015      	b.n	80016ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001682:	4b26      	ldr	r3, [pc, #152]	@ (800171c <HAL_RCC_OscConfig+0x270>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7fe ffde 	bl	8000648 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001690:	f7fe ffda 	bl	8000648 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e180      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d03a      	beq.n	8001730 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d019      	beq.n	80016f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c2:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <HAL_RCC_OscConfig+0x274>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c8:	f7fe ffbe 	bl	8000648 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d0:	f7fe ffba 	bl	8000648 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e160      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016ee:	2001      	movs	r0, #1
 80016f0:	f000 faba 	bl	8001c68 <RCC_Delay>
 80016f4:	e01c      	b.n	8001730 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_RCC_OscConfig+0x274>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fc:	f7fe ffa4 	bl	8000648 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001702:	e00f      	b.n	8001724 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001704:	f7fe ffa0 	bl	8000648 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d908      	bls.n	8001724 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e146      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	42420000 	.word	0x42420000
 8001720:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	4b92      	ldr	r3, [pc, #584]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1e9      	bne.n	8001704 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80a6 	beq.w	800188a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001742:	4b8b      	ldr	r3, [pc, #556]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10d      	bne.n	800176a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4b88      	ldr	r3, [pc, #544]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a87      	ldr	r2, [pc, #540]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b85      	ldr	r3, [pc, #532]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001766:	2301      	movs	r3, #1
 8001768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176a:	4b82      	ldr	r3, [pc, #520]	@ (8001974 <HAL_RCC_OscConfig+0x4c8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d118      	bne.n	80017a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001776:	4b7f      	ldr	r3, [pc, #508]	@ (8001974 <HAL_RCC_OscConfig+0x4c8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a7e      	ldr	r2, [pc, #504]	@ (8001974 <HAL_RCC_OscConfig+0x4c8>)
 800177c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001782:	f7fe ff61 	bl	8000648 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178a:	f7fe ff5d 	bl	8000648 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b64      	cmp	r3, #100	@ 0x64
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e103      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179c:	4b75      	ldr	r3, [pc, #468]	@ (8001974 <HAL_RCC_OscConfig+0x4c8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x312>
 80017b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4a6e      	ldr	r2, [pc, #440]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6213      	str	r3, [r2, #32]
 80017bc:	e02d      	b.n	800181a <HAL_RCC_OscConfig+0x36e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x334>
 80017c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4a69      	ldr	r2, [pc, #420]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	6213      	str	r3, [r2, #32]
 80017d2:	4b67      	ldr	r3, [pc, #412]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	4a66      	ldr	r2, [pc, #408]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	f023 0304 	bic.w	r3, r3, #4
 80017dc:	6213      	str	r3, [r2, #32]
 80017de:	e01c      	b.n	800181a <HAL_RCC_OscConfig+0x36e>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	d10c      	bne.n	8001802 <HAL_RCC_OscConfig+0x356>
 80017e8:	4b61      	ldr	r3, [pc, #388]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4a60      	ldr	r2, [pc, #384]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6213      	str	r3, [r2, #32]
 80017f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	4a5d      	ldr	r2, [pc, #372]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6213      	str	r3, [r2, #32]
 8001800:	e00b      	b.n	800181a <HAL_RCC_OscConfig+0x36e>
 8001802:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	4a5a      	ldr	r2, [pc, #360]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	f023 0301 	bic.w	r3, r3, #1
 800180c:	6213      	str	r3, [r2, #32]
 800180e:	4b58      	ldr	r3, [pc, #352]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	4a57      	ldr	r2, [pc, #348]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	f023 0304 	bic.w	r3, r3, #4
 8001818:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d015      	beq.n	800184e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001822:	f7fe ff11 	bl	8000648 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7fe ff0d 	bl	8000648 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0b1      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001840:	4b4b      	ldr	r3, [pc, #300]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0ee      	beq.n	800182a <HAL_RCC_OscConfig+0x37e>
 800184c:	e014      	b.n	8001878 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184e:	f7fe fefb 	bl	8000648 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7fe fef7 	bl	8000648 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e09b      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186c:	4b40      	ldr	r3, [pc, #256]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1ee      	bne.n	8001856 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001878:	7dfb      	ldrb	r3, [r7, #23]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d105      	bne.n	800188a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187e:	4b3c      	ldr	r3, [pc, #240]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a3b      	ldr	r2, [pc, #236]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001884:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001888:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 8087 	beq.w	80019a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001894:	4b36      	ldr	r3, [pc, #216]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b08      	cmp	r3, #8
 800189e:	d061      	beq.n	8001964 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d146      	bne.n	8001936 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a8:	4b33      	ldr	r3, [pc, #204]	@ (8001978 <HAL_RCC_OscConfig+0x4cc>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7fe fecb 	bl	8000648 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b6:	f7fe fec7 	bl	8000648 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e06d      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c8:	4b29      	ldr	r3, [pc, #164]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f0      	bne.n	80018b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018dc:	d108      	bne.n	80018f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018de:	4b24      	ldr	r3, [pc, #144]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	4921      	ldr	r1, [pc, #132]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a19      	ldr	r1, [r3, #32]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001900:	430b      	orrs	r3, r1
 8001902:	491b      	ldr	r1, [pc, #108]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001908:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <HAL_RCC_OscConfig+0x4cc>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7fe fe9b 	bl	8000648 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001916:	f7fe fe97 	bl	8000648 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e03d      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x46a>
 8001934:	e035      	b.n	80019a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <HAL_RCC_OscConfig+0x4cc>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7fe fe84 	bl	8000648 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7fe fe80 	bl	8000648 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e026      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x498>
 8001962:	e01e      	b.n	80019a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d107      	bne.n	800197c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e019      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
 8001970:	40021000 	.word	0x40021000
 8001974:	40007000 	.word	0x40007000
 8001978:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_RCC_OscConfig+0x500>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	429a      	cmp	r2, r3
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0d0      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d910      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b67      	ldr	r3, [pc, #412]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 0207 	bic.w	r2, r3, #7
 80019da:	4965      	ldr	r1, [pc, #404]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b63      	ldr	r3, [pc, #396]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0b8      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a0c:	4b59      	ldr	r3, [pc, #356]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a58      	ldr	r2, [pc, #352]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a24:	4b53      	ldr	r3, [pc, #332]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a52      	ldr	r2, [pc, #328]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b50      	ldr	r3, [pc, #320]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	494d      	ldr	r1, [pc, #308]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d040      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b47      	ldr	r3, [pc, #284]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d115      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e07f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b41      	ldr	r3, [pc, #260]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e073      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e06b      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8e:	4b39      	ldr	r3, [pc, #228]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f023 0203 	bic.w	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4936      	ldr	r1, [pc, #216]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa0:	f7fe fdd2 	bl	8000648 <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7fe fdce 	bl	8000648 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e053      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	4b2d      	ldr	r3, [pc, #180]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 020c 	and.w	r2, r3, #12
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1eb      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b27      	ldr	r3, [pc, #156]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d210      	bcs.n	8001b00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 0207 	bic.w	r2, r3, #7
 8001ae6:	4922      	ldr	r1, [pc, #136]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b20      	ldr	r3, [pc, #128]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e032      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4916      	ldr	r1, [pc, #88]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b2a:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	490e      	ldr	r1, [pc, #56]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b3e:	f000 f821 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	490a      	ldr	r1, [pc, #40]	@ (8001b78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b50:	5ccb      	ldrb	r3, [r1, r3]
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	4a09      	ldr	r2, [pc, #36]	@ (8001b7c <HAL_RCC_ClockConfig+0x1cc>)
 8001b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_RCC_ClockConfig+0x1d0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fd30 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40022000 	.word	0x40022000
 8001b74:	40021000 	.word	0x40021000
 8001b78:	08003b5c 	.word	0x08003b5c
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000004 	.word	0x20000004

08001b84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d002      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x30>
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d003      	beq.n	8001bba <HAL_RCC_GetSysClockFreq+0x36>
 8001bb2:	e027      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bb4:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001bb6:	613b      	str	r3, [r7, #16]
      break;
 8001bb8:	e027      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	0c9b      	lsrs	r3, r3, #18
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	4a17      	ldr	r2, [pc, #92]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bc4:	5cd3      	ldrb	r3, [r2, r3]
 8001bc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d010      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bd2:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	0c5b      	lsrs	r3, r3, #17
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	4a11      	ldr	r2, [pc, #68]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001be6:	fb03 f202 	mul.w	r2, r3, r2
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e004      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a0c      	ldr	r2, [pc, #48]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bf8:	fb02 f303 	mul.w	r3, r2, r3
 8001bfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	613b      	str	r3, [r7, #16]
      break;
 8001c02:	e002      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c06:	613b      	str	r3, [r7, #16]
      break;
 8001c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0a:	693b      	ldr	r3, [r7, #16]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	007a1200 	.word	0x007a1200
 8001c20:	08003b74 	.word	0x08003b74
 8001c24:	08003b84 	.word	0x08003b84
 8001c28:	003d0900 	.word	0x003d0900

08001c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c30:	4b02      	ldr	r3, [pc, #8]	@ (8001c3c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	20000000 	.word	0x20000000

08001c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c44:	f7ff fff2 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	4903      	ldr	r1, [pc, #12]	@ (8001c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000
 8001c64:	08003b6c 	.word	0x08003b6c

08001c68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c70:	4b0a      	ldr	r3, [pc, #40]	@ (8001c9c <RCC_Delay+0x34>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <RCC_Delay+0x38>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	0a5b      	lsrs	r3, r3, #9
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c84:	bf00      	nop
  }
  while (Delay --);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1e5a      	subs	r2, r3, #1
 8001c8a:	60fa      	str	r2, [r7, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f9      	bne.n	8001c84 <RCC_Delay+0x1c>
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	10624dd3 	.word	0x10624dd3

08001ca4 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	7c1b      	ldrb	r3, [r3, #16]
 8001cb2:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	fb02 f303 	mul.w	r3, r2, r3
 8001cc2:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 ff03 	bl	8003ade <memset>
}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	70fb      	strb	r3, [r7, #3]
 8001cec:	4613      	mov	r3, r2
 8001cee:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	7c1b      	ldrb	r3, [r3, #16]
 8001cf6:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d00:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	89ba      	ldrh	r2, [r7, #12]
 8001d08:	fb02 f303 	mul.w	r3, r2, r3
 8001d0c:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001d0e:	89bb      	ldrh	r3, [r7, #12]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001d14:	89bb      	ldrh	r3, [r7, #12]
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	4413      	add	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001d1c:	7bf9      	ldrb	r1, [r7, #15]
 8001d1e:	78ba      	ldrb	r2, [r7, #2]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	460b      	mov	r3, r1
 8001d26:	2100      	movs	r1, #0
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f001 fe0b 	bl	8003944 <u8x8_DrawTile>
}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d48:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001d50:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	7c5b      	ldrb	r3, [r3, #17]
 8001d58:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001d5a:	7bba      	ldrb	r2, [r7, #14]
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ffbd 	bl	8001ce0 <u8g2_send_tile_row>
    src_row++;
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001d6c:	7bbb      	ldrb	r3, [r7, #14]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	7b7b      	ldrb	r3, [r7, #13]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d203      	bcs.n	8001d82 <u8g2_send_buffer+0x4c>
 8001d7a:	7bba      	ldrb	r2, [r7, #14]
 8001d7c:	7b3b      	ldrb	r3, [r7, #12]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d3eb      	bcc.n	8001d5a <u8g2_send_buffer+0x24>
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ffcf 	bl	8001d36 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f001 fe24 	bl	80039e6 <u8x8_RefreshDisplay>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	4798      	blx	r3
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff5b 	bl	8001ca4 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001dee:	2100      	movs	r1, #0
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ffd8 	bl	8001da6 <u8g2_SetBufferCurrTileRow>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ff95 	bl	8001d36 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001e12:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	7c5b      	ldrb	r3, [r3, #17]
 8001e26:	7bfa      	ldrb	r2, [r7, #15]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d304      	bcc.n	8001e36 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f001 fdda 	bl	80039e6 <u8x8_RefreshDisplay>
    return 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e00d      	b.n	8001e52 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff2f 	bl	8001ca4 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ffab 	bl	8001da6 <u8g2_SetBufferCurrTileRow>
  return 1;
 8001e50:	2301      	movs	r3, #1
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	4608      	mov	r0, r1
 8001e64:	4611      	mov	r1, r2
 8001e66:	461a      	mov	r2, r3
 8001e68:	4603      	mov	r3, r0
 8001e6a:	817b      	strh	r3, [r7, #10]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	813b      	strh	r3, [r7, #8]
 8001e70:	4613      	mov	r3, r2
 8001e72:	80fb      	strh	r3, [r7, #6]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8001e74:	7f3b      	ldrb	r3, [r7, #28]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d017      	beq.n	8001eae <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8001e7e:	88fa      	ldrh	r2, [r7, #6]
 8001e80:	897b      	ldrh	r3, [r7, #10]
 8001e82:	4413      	add	r3, r2
 8001e84:	b299      	uxth	r1, r3
 8001e86:	8b3a      	ldrh	r2, [r7, #24]
 8001e88:	893b      	ldrh	r3, [r7, #8]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 ffe6 	bl	8002e62 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8001e96:	88fa      	ldrh	r2, [r7, #6]
 8001e98:	893b      	ldrh	r3, [r7, #8]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	b299      	uxth	r1, r3
 8001e9e:	8b3a      	ldrh	r2, [r7, #24]
 8001ea0:	897b      	ldrh	r3, [r7, #10]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 ffda 	bl	8002e62 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8001eae:	7f3b      	ldrb	r3, [r7, #28]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d017      	beq.n	8001ee8 <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 8001eb8:	88fa      	ldrh	r2, [r7, #6]
 8001eba:	897b      	ldrh	r3, [r7, #10]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	b299      	uxth	r1, r3
 8001ec0:	8b3a      	ldrh	r2, [r7, #24]
 8001ec2:	893b      	ldrh	r3, [r7, #8]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 ffc9 	bl	8002e62 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	893b      	ldrh	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	b299      	uxth	r1, r3
 8001ed8:	8b3a      	ldrh	r2, [r7, #24]
 8001eda:	897b      	ldrh	r3, [r7, #10]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 ffbd 	bl	8002e62 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8001ee8:	7f3b      	ldrb	r3, [r7, #28]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d017      	beq.n	8001f22 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8001ef2:	88fa      	ldrh	r2, [r7, #6]
 8001ef4:	897b      	ldrh	r3, [r7, #10]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b299      	uxth	r1, r3
 8001efa:	8b3a      	ldrh	r2, [r7, #24]
 8001efc:	893b      	ldrh	r3, [r7, #8]
 8001efe:	4413      	add	r3, r2
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 ffac 	bl	8002e62 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 8001f0a:	88fa      	ldrh	r2, [r7, #6]
 8001f0c:	893b      	ldrh	r3, [r7, #8]
 8001f0e:	4413      	add	r3, r2
 8001f10:	b299      	uxth	r1, r3
 8001f12:	8b3a      	ldrh	r2, [r7, #24]
 8001f14:	897b      	ldrh	r3, [r7, #10]
 8001f16:	4413      	add	r3, r2
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 ffa0 	bl	8002e62 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8001f22:	7f3b      	ldrb	r3, [r7, #28]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d017      	beq.n	8001f5c <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 8001f2c:	88fa      	ldrh	r2, [r7, #6]
 8001f2e:	897b      	ldrh	r3, [r7, #10]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	b299      	uxth	r1, r3
 8001f34:	8b3a      	ldrh	r2, [r7, #24]
 8001f36:	893b      	ldrh	r3, [r7, #8]
 8001f38:	4413      	add	r3, r2
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 ff8f 	bl	8002e62 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8001f44:	88fa      	ldrh	r2, [r7, #6]
 8001f46:	893b      	ldrh	r3, [r7, #8]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	b299      	uxth	r1, r3
 8001f4c:	8b3a      	ldrh	r2, [r7, #24]
 8001f4e:	897b      	ldrh	r3, [r7, #10]
 8001f50:	4413      	add	r3, r2
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 ff83 	bl	8002e62 <u8g2_DrawPixel>
    }
}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08a      	sub	sp, #40	@ 0x28
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	4608      	mov	r0, r1
 8001f6e:	4611      	mov	r1, r2
 8001f70:	461a      	mov	r2, r3
 8001f72:	4603      	mov	r3, r0
 8001f74:	817b      	strh	r3, [r7, #10]
 8001f76:	460b      	mov	r3, r1
 8001f78:	813b      	strh	r3, [r7, #8]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	80fb      	strh	r3, [r7, #6]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	83fb      	strh	r3, [r7, #30]
    f -= rad;
 8001f82:	8bfa      	ldrh	r2, [r7, #30]
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	83fb      	strh	r3, [r7, #30]
    ddF_x = 1;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	83bb      	strh	r3, [r7, #28]
    ddF_y = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	837b      	strh	r3, [r7, #26]
    ddF_y -= rad;
 8001f94:	8b7a      	ldrh	r2, [r7, #26]
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	837b      	strh	r3, [r7, #26]
    ddF_y *= 2;
 8001f9e:	8b7b      	ldrh	r3, [r7, #26]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	837b      	strh	r3, [r7, #26]
    x = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	833b      	strh	r3, [r7, #24]
    y = rad;
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	82fb      	strh	r3, [r7, #22]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8001fae:	8978      	ldrh	r0, [r7, #10]
 8001fb0:	8afa      	ldrh	r2, [r7, #22]
 8001fb2:	8b39      	ldrh	r1, [r7, #24]
 8001fb4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	893b      	ldrh	r3, [r7, #8]
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f7ff ff4a 	bl	8001e5a <u8g2_draw_circle_section>
    
    while ( x < y )
 8001fc6:	e027      	b.n	8002018 <u8g2_draw_circle+0xb4>
    {
      if (f >= 0) 
 8001fc8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0b      	blt.n	8001fe8 <u8g2_draw_circle+0x84>
      {
        y--;
 8001fd0:	8afb      	ldrh	r3, [r7, #22]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	82fb      	strh	r3, [r7, #22]
        ddF_y += 2;
 8001fd6:	8b7b      	ldrh	r3, [r7, #26]
 8001fd8:	3302      	adds	r3, #2
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	837b      	strh	r3, [r7, #26]
        f += ddF_y;
 8001fde:	8bfa      	ldrh	r2, [r7, #30]
 8001fe0:	8b7b      	ldrh	r3, [r7, #26]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	83fb      	strh	r3, [r7, #30]
      }
      x++;
 8001fe8:	8b3b      	ldrh	r3, [r7, #24]
 8001fea:	3301      	adds	r3, #1
 8001fec:	833b      	strh	r3, [r7, #24]
      ddF_x += 2;
 8001fee:	8bbb      	ldrh	r3, [r7, #28]
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	83bb      	strh	r3, [r7, #28]
      f += ddF_x;
 8001ff6:	8bfa      	ldrh	r2, [r7, #30]
 8001ff8:	8bbb      	ldrh	r3, [r7, #28]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	83fb      	strh	r3, [r7, #30]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8002000:	8978      	ldrh	r0, [r7, #10]
 8002002:	8afa      	ldrh	r2, [r7, #22]
 8002004:	8b39      	ldrh	r1, [r7, #24]
 8002006:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800200a:	9301      	str	r3, [sp, #4]
 800200c:	893b      	ldrh	r3, [r7, #8]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	4603      	mov	r3, r0
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f7ff ff21 	bl	8001e5a <u8g2_draw_circle_section>
    while ( x < y )
 8002018:	8b3a      	ldrh	r2, [r7, #24]
 800201a:	8afb      	ldrh	r3, [r7, #22]
 800201c:	429a      	cmp	r2, r3
 800201e:	d3d3      	bcc.n	8001fc8 <u8g2_draw_circle+0x64>
    }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3720      	adds	r7, #32
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 800202a:	b590      	push	{r4, r7, lr}
 800202c:	b087      	sub	sp, #28
 800202e:	af02      	add	r7, sp, #8
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	4608      	mov	r0, r1
 8002034:	4611      	mov	r1, r2
 8002036:	461a      	mov	r2, r3
 8002038:	4603      	mov	r3, r0
 800203a:	817b      	strh	r3, [r7, #10]
 800203c:	460b      	mov	r3, r1
 800203e:	813b      	strh	r3, [r7, #8]
 8002040:	4613      	mov	r3, r2
 8002042:	80fb      	strh	r3, [r7, #6]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8002044:	897a      	ldrh	r2, [r7, #10]
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	b299      	uxth	r1, r3
 800204c:	893a      	ldrh	r2, [r7, #8]
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	b298      	uxth	r0, r3
 8002054:	897a      	ldrh	r2, [r7, #10]
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	4413      	add	r3, r2
 800205a:	b29b      	uxth	r3, r3
 800205c:	3301      	adds	r3, #1
 800205e:	b29c      	uxth	r4, r3
 8002060:	893a      	ldrh	r2, [r7, #8]
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	4413      	add	r3, r2
 8002066:	b29b      	uxth	r3, r3
 8002068:	3301      	adds	r3, #1
 800206a:	b29b      	uxth	r3, r3
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	4623      	mov	r3, r4
 8002070:	4602      	mov	r2, r0
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 ff5b 	bl	8002f2e <u8g2_IsIntersection>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <u8g2_DrawCircle+0x6a>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 800207e:	88f8      	ldrh	r0, [r7, #6]
 8002080:	893a      	ldrh	r2, [r7, #8]
 8002082:	8979      	ldrh	r1, [r7, #10]
 8002084:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	4603      	mov	r3, r0
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f7ff ff69 	bl	8001f64 <u8g2_draw_circle>
 8002092:	e000      	b.n	8002096 <u8g2_DrawCircle+0x6c>
      return;
 8002094:	bf00      	nop
}
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	bd90      	pop	{r4, r7, pc}

0800209c <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff fe96 	bl	8001dd6 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fea7 	bl	8001dfe <u8g2_NextPage>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f9      	bne.n	80020aa <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80020b6:	2100      	movs	r1, #0
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff fe74 	bl	8001da6 <u8g2_SetBufferCurrTileRow>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2208      	movs	r2, #8
 80020d4:	701a      	strb	r2, [r3, #0]
  return buf;
 80020d6:	4b03      	ldr	r3, [pc, #12]	@ (80020e4 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000138 	.word	0x20000138

080020e8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a0b      	ldr	r2, [pc, #44]	@ (800212c <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 80020fe:	490c      	ldr	r1, [pc, #48]	@ (8002130 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f001 fccf 	bl	8003aa4 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8002106:	f107 0313 	add.w	r3, r7, #19
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ffdc 	bl	80020c8 <u8g2_m_16_8_f>
 8002110:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8002112:	7cfa      	ldrb	r2, [r7, #19]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 800211a:	6979      	ldr	r1, [r7, #20]
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 ffef 	bl	8003100 <u8g2_SetupBuffer>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	080035e5 	.word	0x080035e5
 8002130:	08003841 	.word	0x08003841
 8002134:	08002f85 	.word	0x08002f85

08002138 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	781b      	ldrb	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800215a:	b480      	push	{r7}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	460b      	mov	r3, r1
 8002164:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	4413      	add	r3, r2
 800216c:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	81fb      	strh	r3, [r7, #14]
    font++;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3301      	adds	r3, #1
 8002178:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800217a:	89fb      	ldrh	r3, [r7, #14]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	89fb      	ldrh	r3, [r7, #14]
 8002188:	4413      	add	r3, r2
 800218a:	81fb      	strh	r3, [r7, #14]
    return pos;
 800218c:	89fb      	ldrh	r3, [r7, #14]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80021a2:	2100      	movs	r1, #0
 80021a4:	6838      	ldr	r0, [r7, #0]
 80021a6:	f7ff ffc7 	bl	8002138 <u8g2_font_get_byte>
 80021aa:	4603      	mov	r3, r0
 80021ac:	461a      	mov	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80021b2:	2101      	movs	r1, #1
 80021b4:	6838      	ldr	r0, [r7, #0]
 80021b6:	f7ff ffbf 	bl	8002138 <u8g2_font_get_byte>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80021c2:	2102      	movs	r1, #2
 80021c4:	6838      	ldr	r0, [r7, #0]
 80021c6:	f7ff ffb7 	bl	8002138 <u8g2_font_get_byte>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80021d2:	2103      	movs	r1, #3
 80021d4:	6838      	ldr	r0, [r7, #0]
 80021d6:	f7ff ffaf 	bl	8002138 <u8g2_font_get_byte>
 80021da:	4603      	mov	r3, r0
 80021dc:	461a      	mov	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80021e2:	2104      	movs	r1, #4
 80021e4:	6838      	ldr	r0, [r7, #0]
 80021e6:	f7ff ffa7 	bl	8002138 <u8g2_font_get_byte>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80021f2:	2105      	movs	r1, #5
 80021f4:	6838      	ldr	r0, [r7, #0]
 80021f6:	f7ff ff9f 	bl	8002138 <u8g2_font_get_byte>
 80021fa:	4603      	mov	r3, r0
 80021fc:	461a      	mov	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8002202:	2106      	movs	r1, #6
 8002204:	6838      	ldr	r0, [r7, #0]
 8002206:	f7ff ff97 	bl	8002138 <u8g2_font_get_byte>
 800220a:	4603      	mov	r3, r0
 800220c:	461a      	mov	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8002212:	2107      	movs	r1, #7
 8002214:	6838      	ldr	r0, [r7, #0]
 8002216:	f7ff ff8f 	bl	8002138 <u8g2_font_get_byte>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8002222:	2108      	movs	r1, #8
 8002224:	6838      	ldr	r0, [r7, #0]
 8002226:	f7ff ff87 	bl	8002138 <u8g2_font_get_byte>
 800222a:	4603      	mov	r3, r0
 800222c:	461a      	mov	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8002232:	2109      	movs	r1, #9
 8002234:	6838      	ldr	r0, [r7, #0]
 8002236:	f7ff ff7f 	bl	8002138 <u8g2_font_get_byte>
 800223a:	4603      	mov	r3, r0
 800223c:	b25a      	sxtb	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8002242:	210a      	movs	r1, #10
 8002244:	6838      	ldr	r0, [r7, #0]
 8002246:	f7ff ff77 	bl	8002138 <u8g2_font_get_byte>
 800224a:	4603      	mov	r3, r0
 800224c:	b25a      	sxtb	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8002252:	210b      	movs	r1, #11
 8002254:	6838      	ldr	r0, [r7, #0]
 8002256:	f7ff ff6f 	bl	8002138 <u8g2_font_get_byte>
 800225a:	4603      	mov	r3, r0
 800225c:	b25a      	sxtb	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8002262:	210c      	movs	r1, #12
 8002264:	6838      	ldr	r0, [r7, #0]
 8002266:	f7ff ff67 	bl	8002138 <u8g2_font_get_byte>
 800226a:	4603      	mov	r3, r0
 800226c:	b25a      	sxtb	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8002272:	210d      	movs	r1, #13
 8002274:	6838      	ldr	r0, [r7, #0]
 8002276:	f7ff ff5f 	bl	8002138 <u8g2_font_get_byte>
 800227a:	4603      	mov	r3, r0
 800227c:	b25a      	sxtb	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8002282:	210e      	movs	r1, #14
 8002284:	6838      	ldr	r0, [r7, #0]
 8002286:	f7ff ff57 	bl	8002138 <u8g2_font_get_byte>
 800228a:	4603      	mov	r3, r0
 800228c:	b25a      	sxtb	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8002292:	210f      	movs	r1, #15
 8002294:	6838      	ldr	r0, [r7, #0]
 8002296:	f7ff ff4f 	bl	8002138 <u8g2_font_get_byte>
 800229a:	4603      	mov	r3, r0
 800229c:	b25a      	sxtb	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80022a2:	2110      	movs	r1, #16
 80022a4:	6838      	ldr	r0, [r7, #0]
 80022a6:	f7ff ff47 	bl	8002138 <u8g2_font_get_byte>
 80022aa:	4603      	mov	r3, r0
 80022ac:	b25a      	sxtb	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80022b2:	2111      	movs	r1, #17
 80022b4:	6838      	ldr	r0, [r7, #0]
 80022b6:	f7ff ff50 	bl	800215a <u8g2_font_get_word>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80022c2:	2113      	movs	r1, #19
 80022c4:	6838      	ldr	r0, [r7, #0]
 80022c6:	f7ff ff48 	bl	800215a <u8g2_font_get_word>
 80022ca:	4603      	mov	r3, r0
 80022cc:	461a      	mov	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80022d2:	2115      	movs	r1, #21
 80022d4:	6838      	ldr	r0, [r7, #0]
 80022d6:	f7ff ff40 	bl	800215a <u8g2_font_get_word>
 80022da:	4603      	mov	r3, r0
 80022dc:	461a      	mov	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	82da      	strh	r2, [r3, #22]
#endif
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80022ea:	b480      	push	{r7}
 80022ec:	b085      	sub	sp, #20
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	460b      	mov	r3, r1
 80022f4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	7b1b      	ldrb	r3, [r3, #12]
 80022fa:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	7b7b      	ldrb	r3, [r7, #13]
 8002308:	fa42 f303 	asr.w	r3, r2, r3
 800230c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800230e:	7b7b      	ldrb	r3, [r7, #13]
 8002310:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8002312:	7bba      	ldrb	r2, [r7, #14]
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	4413      	add	r3, r2
 8002318:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800231a:	7bbb      	ldrb	r3, [r7, #14]
 800231c:	2b07      	cmp	r3, #7
 800231e:	d91a      	bls.n	8002356 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8002320:	2308      	movs	r3, #8
 8002322:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8002324:	7b3a      	ldrb	r2, [r7, #12]
 8002326:	7b7b      	ldrb	r3, [r7, #13]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	7b3b      	ldrb	r3, [r7, #12]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	b25a      	sxtb	r2, r3
 8002346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234a:	4313      	orrs	r3, r2
 800234c:	b25b      	sxtb	r3, r3
 800234e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8002350:	7bbb      	ldrb	r3, [r7, #14]
 8002352:	3b08      	subs	r3, #8
 8002354:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	f04f 32ff 	mov.w	r2, #4294967295
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	b2da      	uxtb	r2, r3
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	4013      	ands	r3, r2
 800236a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7bba      	ldrb	r2, [r7, #14]
 8002370:	731a      	strb	r2, [r3, #12]
  return val;
 8002372:	7bfb      	ldrb	r3, [r7, #15]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	4619      	mov	r1, r3
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffab 	bl	80022ea <u8g2_font_decode_get_unsigned_bits>
 8002394:	4603      	mov	r3, r0
 8002396:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8002398:	2301      	movs	r3, #1
 800239a:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	3b01      	subs	r3, #1
 80023a0:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80023a2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	7bbb      	ldrb	r3, [r7, #14]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	73fb      	strb	r3, [r7, #15]
  return v;
 80023b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80023c4:	b490      	push	{r4, r7}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4604      	mov	r4, r0
 80023cc:	4608      	mov	r0, r1
 80023ce:	4611      	mov	r1, r2
 80023d0:	461a      	mov	r2, r3
 80023d2:	4623      	mov	r3, r4
 80023d4:	80fb      	strh	r3, [r7, #6]
 80023d6:	4603      	mov	r3, r0
 80023d8:	717b      	strb	r3, [r7, #5]
 80023da:	460b      	mov	r3, r1
 80023dc:	713b      	strb	r3, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d014      	beq.n	8002412 <u8g2_add_vector_y+0x4e>
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	dc19      	bgt.n	8002420 <u8g2_add_vector_y+0x5c>
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <u8g2_add_vector_y+0x32>
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d007      	beq.n	8002404 <u8g2_add_vector_y+0x40>
 80023f4:	e014      	b.n	8002420 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 80023f6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	4413      	add	r3, r2
 8002400:	80fb      	strh	r3, [r7, #6]
      break;
 8002402:	e014      	b.n	800242e <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8002404:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002408:	b29a      	uxth	r2, r3
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	4413      	add	r3, r2
 800240e:	80fb      	strh	r3, [r7, #6]
      break;
 8002410:	e00d      	b.n	800242e <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8002412:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002416:	b29b      	uxth	r3, r3
 8002418:	88fa      	ldrh	r2, [r7, #6]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	80fb      	strh	r3, [r7, #6]
      break;
 800241e:	e006      	b.n	800242e <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8002420:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002424:	b29b      	uxth	r3, r3
 8002426:	88fa      	ldrh	r2, [r7, #6]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	80fb      	strh	r3, [r7, #6]
      break;      
 800242c:	bf00      	nop
  }
  return dy;
 800242e:	88fb      	ldrh	r3, [r7, #6]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bc90      	pop	{r4, r7}
 8002438:	4770      	bx	lr

0800243a <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 800243a:	b490      	push	{r4, r7}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	4604      	mov	r4, r0
 8002442:	4608      	mov	r0, r1
 8002444:	4611      	mov	r1, r2
 8002446:	461a      	mov	r2, r3
 8002448:	4623      	mov	r3, r4
 800244a:	80fb      	strh	r3, [r7, #6]
 800244c:	4603      	mov	r3, r0
 800244e:	717b      	strb	r3, [r7, #5]
 8002450:	460b      	mov	r3, r1
 8002452:	713b      	strb	r3, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d014      	beq.n	8002488 <u8g2_add_vector_x+0x4e>
 800245e:	2b02      	cmp	r3, #2
 8002460:	dc19      	bgt.n	8002496 <u8g2_add_vector_x+0x5c>
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <u8g2_add_vector_x+0x32>
 8002466:	2b01      	cmp	r3, #1
 8002468:	d007      	beq.n	800247a <u8g2_add_vector_x+0x40>
 800246a:	e014      	b.n	8002496 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 800246c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002470:	b29a      	uxth	r2, r3
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	4413      	add	r3, r2
 8002476:	80fb      	strh	r3, [r7, #6]
      break;
 8002478:	e014      	b.n	80024a4 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 800247a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800247e:	b29b      	uxth	r3, r3
 8002480:	88fa      	ldrh	r2, [r7, #6]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	80fb      	strh	r3, [r7, #6]
      break;
 8002486:	e00d      	b.n	80024a4 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8002488:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800248c:	b29b      	uxth	r3, r3
 800248e:	88fa      	ldrh	r2, [r7, #6]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	80fb      	strh	r3, [r7, #6]
      break;
 8002494:	e006      	b.n	80024a4 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8002496:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800249a:	b29a      	uxth	r2, r3
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	4413      	add	r3, r2
 80024a0:	80fb      	strh	r3, [r7, #6]
      break;      
 80024a2:	bf00      	nop
  }
  return dx;
 80024a4:	88fb      	ldrh	r3, [r7, #6]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc90      	pop	{r4, r7}
 80024ae:	4770      	bx	lr

080024b0 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	70fb      	strb	r3, [r7, #3]
 80024bc:	4613      	mov	r3, r2
 80024be:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3360      	adds	r3, #96	@ 0x60
 80024c4:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80024d0:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80024d8:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80024e0:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	7d7b      	ldrb	r3, [r7, #21]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80024ee:	7dfa      	ldrb	r2, [r7, #23]
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d201      	bcs.n	80024fa <u8g2_font_decode_len+0x4a>
      current = cnt;
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
 80024f8:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	889b      	ldrh	r3, [r3, #4]
 80024fe:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	88db      	ldrh	r3, [r3, #6]
 8002504:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8002506:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800250a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	7c1b      	ldrb	r3, [r3, #16]
 8002512:	89b8      	ldrh	r0, [r7, #12]
 8002514:	f7ff ff91 	bl	800243a <u8g2_add_vector_x>
 8002518:	4603      	mov	r3, r0
 800251a:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800251c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002520:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	7c1b      	ldrb	r3, [r3, #16]
 8002528:	8978      	ldrh	r0, [r7, #10]
 800252a:	f7ff ff4b 	bl	80023c4 <u8g2_add_vector_y>
 800252e:	4603      	mov	r3, r0
 8002530:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8002532:	78bb      	ldrb	r3, [r7, #2]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d010      	beq.n	800255a <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	7b9a      	ldrb	r2, [r3, #14]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8002542:	7dbb      	ldrb	r3, [r7, #22]
 8002544:	b298      	uxth	r0, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	7c1b      	ldrb	r3, [r3, #16]
 800254a:	897a      	ldrh	r2, [r7, #10]
 800254c:	89b9      	ldrh	r1, [r7, #12]
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	4603      	mov	r3, r0
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fbfa 	bl	8002d4c <u8g2_DrawHVLine>
 8002558:	e013      	b.n	8002582 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	7b5b      	ldrb	r3, [r3, #13]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10f      	bne.n	8002582 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	7bda      	ldrb	r2, [r3, #15]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 800256c:	7dbb      	ldrb	r3, [r7, #22]
 800256e:	b298      	uxth	r0, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	7c1b      	ldrb	r3, [r3, #16]
 8002574:	897a      	ldrh	r2, [r7, #10]
 8002576:	89b9      	ldrh	r1, [r7, #12]
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	4603      	mov	r3, r0
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 fbe5 	bl	8002d4c <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8002582:	7dfa      	ldrb	r2, [r7, #23]
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	429a      	cmp	r2, r3
 8002588:	d309      	bcc.n	800259e <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 800258a:	7dfa      	ldrb	r2, [r7, #23]
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	757b      	strb	r3, [r7, #21]
    ly++;
 8002596:	7d3b      	ldrb	r3, [r7, #20]
 8002598:	3301      	adds	r3, #1
 800259a:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800259c:	e79d      	b.n	80024da <u8g2_font_decode_len+0x2a>
      break;
 800259e:	bf00      	nop
  }
  lx += cnt;
 80025a0:	7d7a      	ldrb	r2, [r7, #21]
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	4413      	add	r3, r2
 80025a6:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80025a8:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 80025b0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	725a      	strb	r2, [r3, #9]
}
 80025b8:	bf00      	nop
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3360      	adds	r3, #96	@ 0x60
 80025ce:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80025e2:	4619      	mov	r1, r3
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f7ff fe80 	bl	80022ea <u8g2_font_decode_get_unsigned_bits>
 80025ea:	4603      	mov	r3, r0
 80025ec:	b25a      	sxtb	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80025f8:	4619      	mov	r1, r3
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7ff fe75 	bl	80022ea <u8g2_font_decode_get_unsigned_bits>
 8002600:	4603      	mov	r3, r0
 8002602:	b25a      	sxtb	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	7b9b      	ldrb	r3, [r3, #14]
 8002616:	2b00      	cmp	r3, #0
 8002618:	bf0c      	ite	eq
 800261a:	2301      	moveq	r3, #1
 800261c:	2300      	movne	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	461a      	mov	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	73da      	strb	r2, [r3, #15]
}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	@ 0x28
 8002634:	af02      	add	r7, sp, #8
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3360      	adds	r3, #96	@ 0x60
 800263e:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8002640:	6839      	ldr	r1, [r7, #0]
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffbc 	bl	80025c0 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 800264e:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8002656:	4619      	mov	r1, r3
 8002658:	6978      	ldr	r0, [r7, #20]
 800265a:	f7ff fe90 	bl	800237e <u8g2_font_decode_get_signed_bits>
 800265e:	4603      	mov	r3, r0
 8002660:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8002668:	4619      	mov	r1, r3
 800266a:	6978      	ldr	r0, [r7, #20]
 800266c:	f7ff fe87 	bl	800237e <u8g2_font_decode_get_signed_bits>
 8002670:	4603      	mov	r3, r0
 8002672:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800267a:	4619      	mov	r1, r3
 800267c:	6978      	ldr	r0, [r7, #20]
 800267e:	f7ff fe7e 	bl	800237e <u8g2_font_decode_get_signed_bits>
 8002682:	4603      	mov	r3, r0
 8002684:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800268c:	2b00      	cmp	r3, #0
 800268e:	f340 80d7 	ble.w	8002840 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	8898      	ldrh	r0, [r3, #4]
 8002696:	7cfa      	ldrb	r2, [r7, #19]
 8002698:	7c7b      	ldrb	r3, [r7, #17]
 800269a:	4413      	add	r3, r2
 800269c:	b2db      	uxtb	r3, r3
 800269e:	425b      	negs	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	b25a      	sxtb	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	7c1b      	ldrb	r3, [r3, #16]
 80026a8:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80026ac:	f7ff fec5 	bl	800243a <u8g2_add_vector_x>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461a      	mov	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	88d8      	ldrh	r0, [r3, #6]
 80026bc:	7cfa      	ldrb	r2, [r7, #19]
 80026be:	7c7b      	ldrb	r3, [r7, #17]
 80026c0:	4413      	add	r3, r2
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	425b      	negs	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	b25a      	sxtb	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	7c1b      	ldrb	r3, [r3, #16]
 80026ce:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80026d2:	f7ff fe77 	bl	80023c4 <u8g2_add_vector_y>
 80026d6:	4603      	mov	r3, r0
 80026d8:	461a      	mov	r2, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	889b      	ldrh	r3, [r3, #4]
 80026e2:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	88db      	ldrh	r3, [r3, #6]
 80026e8:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80026ea:	8bfb      	ldrh	r3, [r7, #30]
 80026ec:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80026ee:	8b7b      	ldrh	r3, [r7, #26]
 80026f0:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	7c1b      	ldrb	r3, [r3, #16]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d85a      	bhi.n	80027b0 <u8g2_font_decode_glyph+0x180>
 80026fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002700 <u8g2_font_decode_glyph+0xd0>)
 80026fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002700:	08002711 	.word	0x08002711
 8002704:	0800272d 	.word	0x0800272d
 8002708:	08002755 	.word	0x08002755
 800270c:	08002789 	.word	0x08002789
      {
	case 0:
	    x1 += decode->glyph_width;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002716:	b29a      	uxth	r2, r3
 8002718:	8bbb      	ldrh	r3, [r7, #28]
 800271a:	4413      	add	r3, r2
 800271c:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 800271e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002722:	b29a      	uxth	r2, r3
 8002724:	8b3b      	ldrh	r3, [r7, #24]
 8002726:	4413      	add	r3, r2
 8002728:	833b      	strh	r3, [r7, #24]
	    break;
 800272a:	e041      	b.n	80027b0 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 800272c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002730:	b29b      	uxth	r3, r3
 8002732:	8bfa      	ldrh	r2, [r7, #30]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002738:	8bfb      	ldrh	r3, [r7, #30]
 800273a:	3301      	adds	r3, #1
 800273c:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800273e:	8bbb      	ldrh	r3, [r7, #28]
 8002740:	3301      	adds	r3, #1
 8002742:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800274a:	b29a      	uxth	r2, r3
 800274c:	8b3b      	ldrh	r3, [r7, #24]
 800274e:	4413      	add	r3, r2
 8002750:	833b      	strh	r3, [r7, #24]
	    break;
 8002752:	e02d      	b.n	80027b0 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800275a:	b29b      	uxth	r3, r3
 800275c:	8bfa      	ldrh	r2, [r7, #30]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002762:	8bfb      	ldrh	r3, [r7, #30]
 8002764:	3301      	adds	r3, #1
 8002766:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8002768:	8bbb      	ldrh	r3, [r7, #28]
 800276a:	3301      	adds	r3, #1
 800276c:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 800276e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002772:	b29b      	uxth	r3, r3
 8002774:	8b7a      	ldrh	r2, [r7, #26]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800277a:	8b7b      	ldrh	r3, [r7, #26]
 800277c:	3301      	adds	r3, #1
 800277e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8002780:	8b3b      	ldrh	r3, [r7, #24]
 8002782:	3301      	adds	r3, #1
 8002784:	833b      	strh	r3, [r7, #24]
	    break;	  
 8002786:	e013      	b.n	80027b0 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8002788:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800278c:	b29a      	uxth	r2, r3
 800278e:	8bbb      	ldrh	r3, [r7, #28]
 8002790:	4413      	add	r3, r2
 8002792:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800279a:	b29b      	uxth	r3, r3
 800279c:	8b7a      	ldrh	r2, [r7, #26]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80027a2:	8b7b      	ldrh	r3, [r7, #26]
 80027a4:	3301      	adds	r3, #1
 80027a6:	837b      	strh	r3, [r7, #26]
	    y1++;
 80027a8:	8b3b      	ldrh	r3, [r7, #24]
 80027aa:	3301      	adds	r3, #1
 80027ac:	833b      	strh	r3, [r7, #24]
	    break;	  
 80027ae:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80027b0:	8bb8      	ldrh	r0, [r7, #28]
 80027b2:	8b7a      	ldrh	r2, [r7, #26]
 80027b4:	8bf9      	ldrh	r1, [r7, #30]
 80027b6:	8b3b      	ldrh	r3, [r7, #24]
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	4603      	mov	r3, r0
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 fbb6 	bl	8002f2e <u8g2_IsIntersection>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <u8g2_font_decode_glyph+0x19e>
	return d;
 80027c8:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80027cc:	e03a      	b.n	8002844 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2200      	movs	r2, #0
 80027d2:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2200      	movs	r2, #0
 80027d8:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80027e0:	4619      	mov	r1, r3
 80027e2:	6978      	ldr	r0, [r7, #20]
 80027e4:	f7ff fd81 	bl	80022ea <u8g2_font_decode_get_unsigned_bits>
 80027e8:	4603      	mov	r3, r0
 80027ea:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80027f2:	4619      	mov	r1, r3
 80027f4:	6978      	ldr	r0, [r7, #20]
 80027f6:	f7ff fd78 	bl	80022ea <u8g2_font_decode_get_unsigned_bits>
 80027fa:	4603      	mov	r3, r0
 80027fc:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	2200      	movs	r2, #0
 8002802:	4619      	mov	r1, r3
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff fe53 	bl	80024b0 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800280a:	7bbb      	ldrb	r3, [r7, #14]
 800280c:	2201      	movs	r2, #1
 800280e:	4619      	mov	r1, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff fe4d 	bl	80024b0 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8002816:	2101      	movs	r1, #1
 8002818:	6978      	ldr	r0, [r7, #20]
 800281a:	f7ff fd66 	bl	80022ea <u8g2_font_decode_get_unsigned_bits>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1ec      	bne.n	80027fe <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800282a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800282e:	429a      	cmp	r2, r3
 8002830:	dd00      	ble.n	8002834 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8002832:	e7d2      	b.n	80027da <u8g2_font_decode_glyph+0x1aa>
	break;
 8002834:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	7b9a      	ldrb	r2, [r3, #14]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8002840:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3720      	adds	r7, #32
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285c:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	3317      	adds	r3, #23
 8002862:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8002864:	887b      	ldrh	r3, [r7, #2]
 8002866:	2bff      	cmp	r3, #255	@ 0xff
 8002868:	d82a      	bhi.n	80028c0 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800286a:	887b      	ldrh	r3, [r7, #2]
 800286c:	2b60      	cmp	r3, #96	@ 0x60
 800286e:	d907      	bls.n	8002880 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8002876:	461a      	mov	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	4413      	add	r3, r2
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	e009      	b.n	8002894 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8002880:	887b      	ldrh	r3, [r7, #2]
 8002882:	2b40      	cmp	r3, #64	@ 0x40
 8002884:	d906      	bls.n	8002894 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800288c:	461a      	mov	r2, r3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	4413      	add	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	3301      	adds	r3, #1
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d04e      	beq.n	800293c <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	887b      	ldrh	r3, [r7, #2]
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d102      	bne.n	80028b0 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	3302      	adds	r3, #2
 80028ae:	e049      	b.n	8002944 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	3301      	adds	r3, #1
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	4413      	add	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80028be:	e7e9      	b.n	8002894 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80028c6:	461a      	mov	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	4413      	add	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80028d2:	2100      	movs	r1, #0
 80028d4:	6938      	ldr	r0, [r7, #16]
 80028d6:	f7ff fc40 	bl	800215a <u8g2_font_get_word>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	4413      	add	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80028e4:	2102      	movs	r1, #2
 80028e6:	6938      	ldr	r0, [r7, #16]
 80028e8:	f7ff fc37 	bl	800215a <u8g2_font_get_word>
 80028ec:	4603      	mov	r3, r0
 80028ee:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	3304      	adds	r3, #4
 80028f4:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80028f6:	89fa      	ldrh	r2, [r7, #14]
 80028f8:	887b      	ldrh	r3, [r7, #2]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d3e9      	bcc.n	80028d2 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8002904:	89fb      	ldrh	r3, [r7, #14]
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	3301      	adds	r3, #1
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	89fb      	ldrh	r3, [r7, #14]
 8002914:	4313      	orrs	r3, r2
 8002916:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8002918:	89fb      	ldrh	r3, [r7, #14]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d010      	beq.n	8002940 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 800291e:	89fa      	ldrh	r2, [r7, #14]
 8002920:	887b      	ldrh	r3, [r7, #2]
 8002922:	429a      	cmp	r2, r3
 8002924:	d102      	bne.n	800292c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	3303      	adds	r3, #3
 800292a:	e00b      	b.n	8002944 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	3302      	adds	r3, #2
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	4413      	add	r3, r2
 8002938:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800293a:	e7e0      	b.n	80028fe <u8g2_font_get_glyph_data+0xb2>
	break;
 800293c:	bf00      	nop
 800293e:	e000      	b.n	8002942 <u8g2_font_get_glyph_data+0xf6>
	break;
 8002940:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	4608      	mov	r0, r1
 8002956:	4611      	mov	r1, r2
 8002958:	461a      	mov	r2, r3
 800295a:	4603      	mov	r3, r0
 800295c:	817b      	strh	r3, [r7, #10]
 800295e:	460b      	mov	r3, r1
 8002960:	813b      	strh	r3, [r7, #8]
 8002962:	4613      	mov	r3, r2
 8002964:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	897a      	ldrh	r2, [r7, #10]
 800296e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	893a      	ldrh	r2, [r7, #8]
 8002976:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	4619      	mov	r1, r3
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7ff ff64 	bl	800284c <u8g2_font_get_glyph_data>
 8002984:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800298c:	6939      	ldr	r1, [r7, #16]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f7ff fe4e 	bl	8002630 <u8g2_font_decode_glyph>
 8002994:	4603      	mov	r3, r0
 8002996:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8002998:	8afb      	ldrh	r3, [r7, #22]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	4608      	mov	r0, r1
 80029ae:	4611      	mov	r1, r2
 80029b0:	461a      	mov	r2, r3
 80029b2:	4603      	mov	r3, r0
 80029b4:	817b      	strh	r3, [r7, #10]
 80029b6:	460b      	mov	r3, r1
 80029b8:	813b      	strh	r3, [r7, #8]
 80029ba:	4613      	mov	r3, r2
 80029bc:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d833      	bhi.n	8002a30 <u8g2_DrawGlyph+0x8c>
 80029c8:	a201      	add	r2, pc, #4	@ (adr r2, 80029d0 <u8g2_DrawGlyph+0x2c>)
 80029ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ce:	bf00      	nop
 80029d0:	080029e1 	.word	0x080029e1
 80029d4:	080029f5 	.word	0x080029f5
 80029d8:	08002a09 	.word	0x08002a09
 80029dc:	08002a1d 	.word	0x08002a1d
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	4798      	blx	r3
 80029e8:	4603      	mov	r3, r0
 80029ea:	461a      	mov	r2, r3
 80029ec:	893b      	ldrh	r3, [r7, #8]
 80029ee:	4413      	add	r3, r2
 80029f0:	813b      	strh	r3, [r7, #8]
      break;
 80029f2:	e01d      	b.n	8002a30 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	4798      	blx	r3
 80029fc:	4603      	mov	r3, r0
 80029fe:	461a      	mov	r2, r3
 8002a00:	897b      	ldrh	r3, [r7, #10]
 8002a02:	1a9b      	subs	r3, r3, r2
 8002a04:	817b      	strh	r3, [r7, #10]
      break;
 8002a06:	e013      	b.n	8002a30 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	4798      	blx	r3
 8002a10:	4603      	mov	r3, r0
 8002a12:	461a      	mov	r2, r3
 8002a14:	893b      	ldrh	r3, [r7, #8]
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	813b      	strh	r3, [r7, #8]
      break;
 8002a1a:	e009      	b.n	8002a30 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	4798      	blx	r3
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	897b      	ldrh	r3, [r7, #10]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	817b      	strh	r3, [r7, #10]
      break;
 8002a2e:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	893a      	ldrh	r2, [r7, #8]
 8002a34:	8979      	ldrh	r1, [r7, #10]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f7ff ff88 	bl	800294c <u8g2_font_draw_glyph>
 8002a3c:	4603      	mov	r3, r0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop

08002a48 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	607b      	str	r3, [r7, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	817b      	strh	r3, [r7, #10]
 8002a56:	4613      	mov	r3, r2
 8002a58:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fc95 	bl	800338a <u8x8_utf8_init>
  sum = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	7812      	ldrb	r2, [r2, #0]
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	4798      	blx	r3
 8002a72:	4603      	mov	r3, r0
 8002a74:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8002a76:	8abb      	ldrh	r3, [r7, #20]
 8002a78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d038      	beq.n	8002af2 <u8g2_draw_string+0xaa>
      break;
    str++;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3301      	adds	r3, #1
 8002a84:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8002a86:	8abb      	ldrh	r3, [r7, #20]
 8002a88:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d0e9      	beq.n	8002a64 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002a90:	8abb      	ldrh	r3, [r7, #20]
 8002a92:	893a      	ldrh	r2, [r7, #8]
 8002a94:	8979      	ldrh	r1, [r7, #10]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7ff ff84 	bl	80029a4 <u8g2_DrawGlyph>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d81e      	bhi.n	8002ae8 <u8g2_draw_string+0xa0>
 8002aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab0 <u8g2_draw_string+0x68>)
 8002aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab0:	08002ac1 	.word	0x08002ac1
 8002ab4:	08002acb 	.word	0x08002acb
 8002ab8:	08002ad5 	.word	0x08002ad5
 8002abc:	08002adf 	.word	0x08002adf
      {
	case 0:
	  x += delta;
 8002ac0:	897a      	ldrh	r2, [r7, #10]
 8002ac2:	8a7b      	ldrh	r3, [r7, #18]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	817b      	strh	r3, [r7, #10]
	  break;
 8002ac8:	e00e      	b.n	8002ae8 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8002aca:	893a      	ldrh	r2, [r7, #8]
 8002acc:	8a7b      	ldrh	r3, [r7, #18]
 8002ace:	4413      	add	r3, r2
 8002ad0:	813b      	strh	r3, [r7, #8]
	  break;
 8002ad2:	e009      	b.n	8002ae8 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8002ad4:	897a      	ldrh	r2, [r7, #10]
 8002ad6:	8a7b      	ldrh	r3, [r7, #18]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	817b      	strh	r3, [r7, #10]
	  break;
 8002adc:	e004      	b.n	8002ae8 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8002ade:	893a      	ldrh	r2, [r7, #8]
 8002ae0:	8a7b      	ldrh	r3, [r7, #18]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	813b      	strh	r3, [r7, #8]
	  break;
 8002ae6:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8002ae8:	8afa      	ldrh	r2, [r7, #22]
 8002aea:	8a7b      	ldrh	r3, [r7, #18]
 8002aec:	4413      	add	r3, r2
 8002aee:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002af0:	e7b8      	b.n	8002a64 <u8g2_draw_string+0x1c>
      break;
 8002af2:	bf00      	nop
    }
  }
  return sum;
 8002af4:	8afb      	ldrh	r3, [r7, #22]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop

08002b00 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	817b      	strh	r3, [r7, #10]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4a06      	ldr	r2, [pc, #24]	@ (8002b30 <u8g2_DrawStr+0x30>)
 8002b16:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002b18:	893a      	ldrh	r2, [r7, #8]
 8002b1a:	8979      	ldrh	r1, [r7, #10]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7ff ff92 	bl	8002a48 <u8g2_draw_string>
 8002b24:	4603      	mov	r3, r0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	080033a5 	.word	0x080033a5

08002b34 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d05d      	beq.n	8002c00 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d04d      	beq.n	8002c02 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d11c      	bne.n	8002baa <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	da05      	bge.n	8002b8c <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	dd32      	ble.n	8002c02 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002ba8:	e02b      	b.n	8002c02 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8002bb8:	4619      	mov	r1, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002bc0:	440b      	add	r3, r1
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	da0d      	bge.n	8002be2 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	b25a      	sxtb	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	dd07      	ble.n	8002c02 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002bfe:	e000      	b.n	8002c02 <u8g2_UpdateRefHeight+0xce>
    return;
 8002c00:	bf00      	nop
  }  
}
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  return 0;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr
	...

08002c20 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a03      	ldr	r2, [pc, #12]	@ (8002c38 <u8g2_SetFontPosBaseline+0x18>)
 8002c2c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr
 8002c38:	08002c0b 	.word	0x08002c0b

08002c3c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d00b      	beq.n	8002c68 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3374      	adds	r3, #116	@ 0x74
 8002c5a:	6839      	ldr	r1, [r7, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fa9b 	bl	8002198 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ff66 	bl	8002b34 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	460b      	mov	r3, r1
 8002c80:	80fb      	strh	r3, [r7, #6]
 8002c82:	4613      	mov	r3, r2
 8002c84:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8002c8c:	8afb      	ldrh	r3, [r7, #22]
 8002c8e:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	881a      	ldrh	r2, [r3, #0]
 8002c94:	8abb      	ldrh	r3, [r7, #20]
 8002c96:	4413      	add	r3, r2
 8002c98:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002c9a:	8afa      	ldrh	r2, [r7, #22]
 8002c9c:	8abb      	ldrh	r3, [r7, #20]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d90b      	bls.n	8002cba <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8002ca2:	8afa      	ldrh	r2, [r7, #22]
 8002ca4:	88bb      	ldrh	r3, [r7, #4]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d205      	bcs.n	8002cb6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002caa:	88bb      	ldrh	r3, [r7, #4]
 8002cac:	82bb      	strh	r3, [r7, #20]
      b--;
 8002cae:	8abb      	ldrh	r3, [r7, #20]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	82bb      	strh	r3, [r7, #20]
 8002cb4:	e001      	b.n	8002cba <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002cba:	8afa      	ldrh	r2, [r7, #22]
 8002cbc:	88bb      	ldrh	r3, [r7, #4]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d301      	bcc.n	8002cc6 <u8g2_clip_intersection2+0x56>
    return 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e01c      	b.n	8002d00 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002cc6:	8aba      	ldrh	r2, [r7, #20]
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d801      	bhi.n	8002cd2 <u8g2_clip_intersection2+0x62>
    return 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e016      	b.n	8002d00 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8002cd2:	8afa      	ldrh	r2, [r7, #22]
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d201      	bcs.n	8002cde <u8g2_clip_intersection2+0x6e>
    a = c;
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8002cde:	8aba      	ldrh	r2, [r7, #20]
 8002ce0:	88bb      	ldrh	r3, [r7, #4]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d901      	bls.n	8002cea <u8g2_clip_intersection2+0x7a>
    b = d;
 8002ce6:	88bb      	ldrh	r3, [r7, #4]
 8002ce8:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8afa      	ldrh	r2, [r7, #22]
 8002cee:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002cf0:	8aba      	ldrh	r2, [r7, #20]
 8002cf2:	8afb      	ldrh	r3, [r7, #22]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	8aba      	ldrh	r2, [r7, #20]
 8002cfc:	801a      	strh	r2, [r3, #0]
  return 1;
 8002cfe:	2301      	movs	r3, #1
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr

08002d0a <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002d0a:	b590      	push	{r4, r7, lr}
 8002d0c:	b087      	sub	sp, #28
 8002d0e:	af02      	add	r7, sp, #8
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	4608      	mov	r0, r1
 8002d14:	4611      	mov	r1, r2
 8002d16:	461a      	mov	r2, r3
 8002d18:	4603      	mov	r3, r0
 8002d1a:	817b      	strh	r3, [r7, #10]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	813b      	strh	r3, [r7, #8]
 8002d20:	4613      	mov	r3, r2
 8002d22:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d28:	893a      	ldrh	r2, [r7, #8]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8002d32:	88f8      	ldrh	r0, [r7, #6]
 8002d34:	893a      	ldrh	r2, [r7, #8]
 8002d36:	8979      	ldrh	r1, [r7, #10]
 8002d38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	4603      	mov	r3, r0
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	47a0      	blx	r4
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd90      	pop	{r4, r7, pc}

08002d4c <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	4608      	mov	r0, r1
 8002d56:	4611      	mov	r1, r2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	817b      	strh	r3, [r7, #10]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	813b      	strh	r3, [r7, #8]
 8002d62:	4613      	mov	r3, r2
 8002d64:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d075      	beq.n	8002e5c <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d072      	beq.n	8002e5c <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d91a      	bls.n	8002db2 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8002d7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d109      	bne.n	8002d98 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8002d84:	897a      	ldrh	r2, [r7, #10]
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	817b      	strh	r3, [r7, #10]
	  x++;
 8002d8e:	897b      	ldrh	r3, [r7, #10]
 8002d90:	3301      	adds	r3, #1
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	817b      	strh	r3, [r7, #10]
 8002d96:	e00c      	b.n	8002db2 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002d98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d108      	bne.n	8002db2 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8002da0:	893a      	ldrh	r2, [r7, #8]
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	813b      	strh	r3, [r7, #8]
	  y++;
 8002daa:	893b      	ldrh	r3, [r7, #8]
 8002dac:	3301      	adds	r3, #1
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8002db2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002dbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d11a      	bne.n	8002dfc <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002dcc:	893b      	ldrh	r3, [r7, #8]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d83b      	bhi.n	8002e4a <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8002dd8:	893b      	ldrh	r3, [r7, #8]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d937      	bls.n	8002e4e <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002dea:	1db9      	adds	r1, r7, #6
 8002dec:	f107 000a 	add.w	r0, r7, #10
 8002df0:	f7ff ff3e 	bl	8002c70 <u8g2_clip_intersection2>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d11a      	bne.n	8002e30 <u8g2_DrawHVLine+0xe4>
	  return;
 8002dfa:	e02f      	b.n	8002e5c <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002e02:	897b      	ldrh	r3, [r7, #10]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d824      	bhi.n	8002e52 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002e0e:	897b      	ldrh	r3, [r7, #10]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d920      	bls.n	8002e56 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002e20:	1db9      	adds	r1, r7, #6
 8002e22:	f107 0008 	add.w	r0, r7, #8
 8002e26:	f7ff ff23 	bl	8002c70 <u8g2_clip_intersection2>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d014      	beq.n	8002e5a <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e34:	689c      	ldr	r4, [r3, #8]
 8002e36:	8979      	ldrh	r1, [r7, #10]
 8002e38:	893a      	ldrh	r2, [r7, #8]
 8002e3a:	88f8      	ldrh	r0, [r7, #6]
 8002e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	4603      	mov	r3, r0
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	47a0      	blx	r4
 8002e48:	e008      	b.n	8002e5c <u8g2_DrawHVLine+0x110>
	  return;
 8002e4a:	bf00      	nop
 8002e4c:	e006      	b.n	8002e5c <u8g2_DrawHVLine+0x110>
	  return;
 8002e4e:	bf00      	nop
 8002e50:	e004      	b.n	8002e5c <u8g2_DrawHVLine+0x110>
	  return;
 8002e52:	bf00      	nop
 8002e54:	e002      	b.n	8002e5c <u8g2_DrawHVLine+0x110>
	  return;
 8002e56:	bf00      	nop
 8002e58:	e000      	b.n	8002e5c <u8g2_DrawHVLine+0x110>
	  return;
 8002e5a:	bf00      	nop
    }
}
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd90      	pop	{r4, r7, pc}

08002e62 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af02      	add	r7, sp, #8
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	807b      	strh	r3, [r7, #2]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8002e78:	883a      	ldrh	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d31a      	bcc.n	8002eb4 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002e84:	883a      	ldrh	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d216      	bcs.n	8002eb8 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002e90:	887a      	ldrh	r2, [r7, #2]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d312      	bcc.n	8002ebc <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002e9c:	887a      	ldrh	r2, [r7, #2]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d20e      	bcs.n	8002ec0 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002ea2:	883a      	ldrh	r2, [r7, #0]
 8002ea4:	8879      	ldrh	r1, [r7, #2]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	2301      	movs	r3, #1
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ff4d 	bl	8002d4c <u8g2_DrawHVLine>
 8002eb2:	e006      	b.n	8002ec2 <u8g2_DrawPixel+0x60>
    return;
 8002eb4:	bf00      	nop
 8002eb6:	e004      	b.n	8002ec2 <u8g2_DrawPixel+0x60>
    return;
 8002eb8:	bf00      	nop
 8002eba:	e002      	b.n	8002ec2 <u8g2_DrawPixel+0x60>
    return;
 8002ebc:	bf00      	nop
 8002ebe:	e000      	b.n	8002ec2 <u8g2_DrawPixel+0x60>
    return;
 8002ec0:	bf00      	nop
}
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002ec8:	b490      	push	{r4, r7}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4604      	mov	r4, r0
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4623      	mov	r3, r4
 8002ed8:	80fb      	strh	r3, [r7, #6]
 8002eda:	4603      	mov	r3, r0
 8002edc:	80bb      	strh	r3, [r7, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	807b      	strh	r3, [r7, #2]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002ee6:	887a      	ldrh	r2, [r7, #2]
 8002ee8:	88bb      	ldrh	r3, [r7, #4]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d20d      	bcs.n	8002f0a <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002eee:	883a      	ldrh	r2, [r7, #0]
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d901      	bls.n	8002efa <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e014      	b.n	8002f24 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002efa:	887a      	ldrh	r2, [r7, #2]
 8002efc:	883b      	ldrh	r3, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d901      	bls.n	8002f06 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e00e      	b.n	8002f24 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e00c      	b.n	8002f24 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002f0a:	883a      	ldrh	r2, [r7, #0]
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d907      	bls.n	8002f22 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002f12:	887a      	ldrh	r2, [r7, #2]
 8002f14:	883b      	ldrh	r3, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d901      	bls.n	8002f1e <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e002      	b.n	8002f24 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e000      	b.n	8002f24 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002f22:	2300      	movs	r3, #0
    }
  }
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc90      	pop	{r4, r7}
 8002f2c:	4770      	bx	lr

08002f2e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	4608      	mov	r0, r1
 8002f38:	4611      	mov	r1, r2
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	817b      	strh	r3, [r7, #10]
 8002f40:	460b      	mov	r3, r1
 8002f42:	813b      	strh	r3, [r7, #8]
 8002f44:	4613      	mov	r3, r2
 8002f46:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8002f54:	8b3b      	ldrh	r3, [r7, #24]
 8002f56:	893a      	ldrh	r2, [r7, #8]
 8002f58:	f7ff ffb6 	bl	8002ec8 <u8g2_is_intersection_decision_tree>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <u8g2_IsIntersection+0x38>
    return 0; 
 8002f62:	2300      	movs	r3, #0
 8002f64:	e00a      	b.n	8002f7c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	897a      	ldrh	r2, [r7, #10]
 8002f76:	f7ff ffa7 	bl	8002ec8 <u8g2_is_intersection_decision_tree>
 8002f7a:	4603      	mov	r3, r0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b089      	sub	sp, #36	@ 0x24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	4608      	mov	r0, r1
 8002f8e:	4611      	mov	r1, r2
 8002f90:	461a      	mov	r2, r3
 8002f92:	4603      	mov	r3, r0
 8002f94:	817b      	strh	r3, [r7, #10]
 8002f96:	460b      	mov	r3, r1
 8002f98:	813b      	strh	r3, [r7, #8]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002f9e:	893b      	ldrh	r3, [r7, #8]
 8002fa0:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002fa2:	7efb      	ldrb	r3, [r7, #27]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002faa:	2301      	movs	r3, #1
 8002fac:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002fae:	7e3a      	ldrb	r2, [r7, #24]
 8002fb0:	7efb      	ldrb	r3, [r7, #27]
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d801      	bhi.n	8002fce <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002fca:	7e3b      	ldrb	r3, [r7, #24]
 8002fcc:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d001      	beq.n	8002fdc <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002fd8:	7e3b      	ldrb	r3, [r7, #24]
 8002fda:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002fdc:	893b      	ldrh	r3, [r7, #8]
 8002fde:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002fe0:	8afb      	ldrh	r3, [r7, #22]
 8002fe2:	f023 0307 	bic.w	r3, r3, #7
 8002fe6:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	7c1b      	ldrb	r3, [r3, #16]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	8afb      	ldrh	r3, [r7, #22]
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffc:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002ffe:	8afb      	ldrh	r3, [r7, #22]
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	4413      	add	r3, r2
 8003004:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8003006:	897b      	ldrh	r3, [r7, #10]
 8003008:	69fa      	ldr	r2, [r7, #28]
 800300a:	4413      	add	r3, r2
 800300c:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800300e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003012:	2b00      	cmp	r3, #0
 8003014:	d117      	bne.n	8003046 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	781a      	ldrb	r2, [r3, #0]
 800301a:	7ebb      	ldrb	r3, [r7, #26]
 800301c:	4313      	orrs	r3, r2
 800301e:	b2da      	uxtb	r2, r3
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	781a      	ldrb	r2, [r3, #0]
 8003028:	7e7b      	ldrb	r3, [r7, #25]
 800302a:	4053      	eors	r3, r2
 800302c:	b2da      	uxtb	r2, r3
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	701a      	strb	r2, [r3, #0]
	ptr++;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3301      	adds	r3, #1
 8003036:	61fb      	str	r3, [r7, #28]
	len--;
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	3b01      	subs	r3, #1
 800303c:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e8      	bne.n	8003016 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8003044:	e038      	b.n	80030b8 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	781a      	ldrb	r2, [r3, #0]
 800304a:	7ebb      	ldrb	r3, [r7, #26]
 800304c:	4313      	orrs	r3, r2
 800304e:	b2da      	uxtb	r2, r3
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	781a      	ldrb	r2, [r3, #0]
 8003058:	7e7b      	ldrb	r3, [r7, #25]
 800305a:	4053      	eors	r3, r2
 800305c:	b2da      	uxtb	r2, r3
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8003062:	7efb      	ldrb	r3, [r7, #27]
 8003064:	3301      	adds	r3, #1
 8003066:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8003068:	7efb      	ldrb	r3, [r7, #27]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	76fb      	strb	r3, [r7, #27]
      len--;
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	3b01      	subs	r3, #1
 8003074:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8003076:	7efb      	ldrb	r3, [r7, #27]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d114      	bne.n	80030a6 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8003080:	461a      	mov	r2, r3
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	4413      	add	r3, r2
 8003086:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800308e:	2b01      	cmp	r3, #1
 8003090:	d801      	bhi.n	8003096 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8003092:	2301      	movs	r3, #1
 8003094:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800309c:	2b01      	cmp	r3, #1
 800309e:	d008      	beq.n	80030b2 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80030a0:	2301      	movs	r3, #1
 80030a2:	767b      	strb	r3, [r7, #25]
 80030a4:	e005      	b.n	80030b2 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80030a6:	7ebb      	ldrb	r3, [r7, #26]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80030ac:	7e7b      	ldrb	r3, [r7, #25]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1c6      	bne.n	8003046 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80030b8:	bf00      	nop
 80030ba:	3724      	adds	r7, #36	@ 0x24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr

080030c2 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	79fa      	ldrb	r2, [r7, #7]
 8003126:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f7ff ffa9 	bl	80030c2 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7ff fd55 	bl	8002c20 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800319a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800319c:	89fb      	ldrh	r3, [r7, #14]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	89fa      	ldrh	r2, [r7, #14]
 80031a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	7c1b      	ldrb	r3, [r3, #16]
 80031ac:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80031ae:	89fb      	ldrh	r3, [r7, #14]
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	89fa      	ldrh	r2, [r7, #14]
 80031b8:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80031c0:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80031c2:	89fb      	ldrh	r3, [r7, #14]
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	89fa      	ldrh	r2, [r7, #14]
 80031cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031d4:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80031d6:	89fb      	ldrh	r3, [r7, #14]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 80031de:	4413      	add	r3, r2
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	7c52      	ldrb	r2, [r2, #17]
 80031e4:	4293      	cmp	r3, r2
 80031e6:	dd07      	ble.n	80031f8 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	7c5b      	ldrb	r3, [r3, #17]
 80031ec:	461a      	mov	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80031f8:	89fb      	ldrh	r3, [r7, #14]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 800321a:	89fb      	ldrh	r3, [r7, #14]
 800321c:	4413      	add	r3, r2
 800321e:	b29a      	uxth	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	8a9a      	ldrh	r2, [r3, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	8ada      	ldrh	r2, [r3, #22]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af02      	add	r7, sp, #8
 800324a:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	4603      	mov	r3, r0
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff fe60 	bl	8002f2e <u8g2_IsIntersection>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d104      	bne.n	800327e <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800327c:	e03b      	b.n	80032f6 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003292:	429a      	cmp	r2, r3
 8003294:	d205      	bcs.n	80032a2 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d905      	bls.n	80032be <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d205      	bcs.n	80032da <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d905      	bls.n	80032f6 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ff3d 	bl	8003186 <u8g2_update_dimension_common>
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff7b 	bl	8003244 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b086      	sub	sp, #24
 800335a:	af02      	add	r7, sp, #8
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	4608      	mov	r0, r1
 8003360:	4611      	mov	r1, r2
 8003362:	461a      	mov	r2, r3
 8003364:	4603      	mov	r3, r0
 8003366:	817b      	strh	r3, [r7, #10]
 8003368:	460b      	mov	r3, r1
 800336a:	813b      	strh	r3, [r7, #8]
 800336c:	4613      	mov	r3, r2
 800336e:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8003370:	88f8      	ldrh	r0, [r7, #6]
 8003372:	893a      	ldrh	r2, [r7, #8]
 8003374:	8979      	ldrh	r1, [r7, #10]
 8003376:	7e3b      	ldrb	r3, [r7, #24]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	4603      	mov	r3, r0
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff fcc4 	bl	8002d0a <u8g2_draw_hv_line_2dir>
}
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <u8x8_ascii_next+0x18>
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	2b0a      	cmp	r3, #10
 80033ba:	d102      	bne.n	80033c2 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80033bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033c0:	e001      	b.n	80033c6 <u8x8_ascii_next+0x22>
  return b;
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	b29b      	uxth	r3, r3
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	460b      	mov	r3, r1
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	691c      	ldr	r4, [r3, #16]
 80033e2:	7afa      	ldrb	r2, [r7, #11]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2117      	movs	r1, #23
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	47a0      	blx	r4
 80033ec:	4603      	mov	r3, r0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd90      	pop	{r4, r7, pc}

080033f6 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003402:	1cfb      	adds	r3, r7, #3
 8003404:	461a      	mov	r2, r3
 8003406:	2101      	movs	r1, #1
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ffe1 	bl	80033d0 <u8x8_byte_SendBytes>
 800340e:	4603      	mov	r3, r0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691c      	ldr	r4, [r3, #16]
 8003424:	2300      	movs	r3, #0
 8003426:	2200      	movs	r2, #0
 8003428:	2118      	movs	r1, #24
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	47a0      	blx	r4
 800342e:	4603      	mov	r3, r0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	bd90      	pop	{r4, r7, pc}

08003438 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691c      	ldr	r4, [r3, #16]
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	2119      	movs	r1, #25
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	47a0      	blx	r4
 800344e:	4603      	mov	r3, r0
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	bd90      	pop	{r4, r7, pc}

08003458 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68dc      	ldr	r4, [r3, #12]
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	2300      	movs	r3, #0
 800346c:	2115      	movs	r1, #21
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	47a0      	blx	r4
 8003472:	4603      	mov	r3, r0
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bd90      	pop	{r4, r7, pc}

0800347c <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800347c:	b590      	push	{r4, r7, lr}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68dc      	ldr	r4, [r3, #12]
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	2300      	movs	r3, #0
 8003490:	2116      	movs	r1, #22
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	47a0      	blx	r4
 8003496:	4603      	mov	r3, r0
}
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	bd90      	pop	{r4, r7, pc}

080034a0 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	460b      	mov	r3, r1
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	68dc      	ldr	r4, [r3, #12]
 80034b2:	7afa      	ldrb	r2, [r7, #11]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2117      	movs	r1, #23
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	47a0      	blx	r4
 80034bc:	4603      	mov	r3, r0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd90      	pop	{r4, r7, pc}

080034c6 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80034c6:	b590      	push	{r4, r7, lr}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68dc      	ldr	r4, [r3, #12]
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	2118      	movs	r1, #24
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	47a0      	blx	r4
 80034dc:	4603      	mov	r3, r0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd90      	pop	{r4, r7, pc}

080034e6 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80034e6:	b590      	push	{r4, r7, lr}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68dc      	ldr	r4, [r3, #12]
 80034f2:	2300      	movs	r3, #0
 80034f4:	2200      	movs	r2, #0
 80034f6:	2119      	movs	r1, #25
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	47a0      	blx	r4
 80034fc:	4603      	mov	r3, r0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	bd90      	pop	{r4, r7, pc}

08003506 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003506:	b590      	push	{r4, r7, lr}
 8003508:	b085      	sub	sp, #20
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	73fb      	strb	r3, [r7, #15]
    data++;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	2bfe      	cmp	r3, #254	@ 0xfe
 8003520:	d031      	beq.n	8003586 <u8x8_cad_SendSequence+0x80>
 8003522:	2bfe      	cmp	r3, #254	@ 0xfe
 8003524:	dc3d      	bgt.n	80035a2 <u8x8_cad_SendSequence+0x9c>
 8003526:	2b19      	cmp	r3, #25
 8003528:	dc3b      	bgt.n	80035a2 <u8x8_cad_SendSequence+0x9c>
 800352a:	2b18      	cmp	r3, #24
 800352c:	da23      	bge.n	8003576 <u8x8_cad_SendSequence+0x70>
 800352e:	2b16      	cmp	r3, #22
 8003530:	dc02      	bgt.n	8003538 <u8x8_cad_SendSequence+0x32>
 8003532:	2b15      	cmp	r3, #21
 8003534:	da03      	bge.n	800353e <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8003536:	e034      	b.n	80035a2 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8003538:	2b17      	cmp	r3, #23
 800353a:	d00e      	beq.n	800355a <u8x8_cad_SendSequence+0x54>
	return;
 800353c:	e031      	b.n	80035a2 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68dc      	ldr	r4, [r3, #12]
 8003548:	7bba      	ldrb	r2, [r7, #14]
 800354a:	7bf9      	ldrb	r1, [r7, #15]
 800354c:	2300      	movs	r3, #0
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	47a0      	blx	r4
	  data++;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	3301      	adds	r3, #1
 8003556:	603b      	str	r3, [r7, #0]
	  break;
 8003558:	e022      	b.n	80035a0 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003560:	f107 030e 	add.w	r3, r7, #14
 8003564:	461a      	mov	r2, r3
 8003566:	2101      	movs	r1, #1
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff99 	bl	80034a0 <u8x8_cad_SendData>
	  data++;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	3301      	adds	r3, #1
 8003572:	603b      	str	r3, [r7, #0]
	  break;
 8003574:	e014      	b.n	80035a0 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68dc      	ldr	r4, [r3, #12]
 800357a:	7bf9      	ldrb	r1, [r7, #15]
 800357c:	2300      	movs	r3, #0
 800357e:	2200      	movs	r2, #0
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	47a0      	blx	r4
	  break;
 8003584:	e00c      	b.n	80035a0 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800358c:	7bbb      	ldrb	r3, [r7, #14]
 800358e:	461a      	mov	r2, r3
 8003590:	2129      	movs	r1, #41	@ 0x29
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fa36 	bl	8003a04 <u8x8_gpio_call>
	  data++;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	3301      	adds	r3, #1
 800359c:	603b      	str	r3, [r7, #0]
	  break;
 800359e:	bf00      	nop
    cmd = *data;
 80035a0:	e7b6      	b.n	8003510 <u8x8_cad_SendSequence+0xa>
	return;
 80035a2:	bf00      	nop
    }
  }
}
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd90      	pop	{r4, r7, pc}

080035aa <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80035aa:	b590      	push	{r4, r7, lr}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	460b      	mov	r3, r1
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f7ff ff2d 	bl	8003418 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80035be:	2140      	movs	r1, #64	@ 0x40
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7ff ff18 	bl	80033f6 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	691c      	ldr	r4, [r3, #16]
 80035ca:	7afa      	ldrb	r2, [r7, #11]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2117      	movs	r1, #23
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f7ff ff2f 	bl	8003438 <u8x8_byte_EndTransfer>
}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd90      	pop	{r4, r7, pc}
	...

080035e4 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	607b      	str	r3, [r7, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	72fb      	strb	r3, [r7, #11]
 80035f2:	4613      	mov	r3, r2
 80035f4:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 80035f6:	7afb      	ldrb	r3, [r7, #11]
 80035f8:	3b14      	subs	r3, #20
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d86e      	bhi.n	80036dc <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 80035fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003604 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	0800369b 	.word	0x0800369b
 8003608:	0800361d 	.word	0x0800361d
 800360c:	0800364b 	.word	0x0800364b
 8003610:	08003657 	.word	0x08003657
 8003614:	080036bf 	.word	0x080036bf
 8003618:	080036c7 	.word	0x080036c7
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 800361c:	4b33      	ldr	r3, [pc, #204]	@ (80036ec <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f7ff ff07 	bl	8003438 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f7ff fef4 	bl	8003418 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8003630:	2100      	movs	r1, #0
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f7ff fedf 	bl	80033f6 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003638:	7abb      	ldrb	r3, [r7, #10]
 800363a:	4619      	mov	r1, r3
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f7ff feda 	bl	80033f6 <u8x8_byte_SendByte>
      in_transfer = 1;
 8003642:	4b2a      	ldr	r3, [pc, #168]	@ (80036ec <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8003648:	e04a      	b.n	80036e0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 800364a:	7abb      	ldrb	r3, [r7, #10]
 800364c:	4619      	mov	r1, r3
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f7ff fed1 	bl	80033f6 <u8x8_byte_SendByte>
      break;      
 8003654:	e044      	b.n	80036e0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8003656:	4b25      	ldr	r3, [pc, #148]	@ (80036ec <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f7ff feea 	bl	8003438 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = (uint8_t *)arg_ptr;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8003668:	e00a      	b.n	8003680 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	2118      	movs	r1, #24
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f7ff ff9b 	bl	80035aa <u8x8_i2c_data_transfer>
	arg_int-=24;
 8003674:	7abb      	ldrb	r3, [r7, #10]
 8003676:	3b18      	subs	r3, #24
 8003678:	72bb      	strb	r3, [r7, #10]
	p+=24;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	3318      	adds	r3, #24
 800367e:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8003680:	7abb      	ldrb	r3, [r7, #10]
 8003682:	2b18      	cmp	r3, #24
 8003684:	d8f1      	bhi.n	800366a <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8003686:	7abb      	ldrb	r3, [r7, #10]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4619      	mov	r1, r3
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f7ff ff8c 	bl	80035aa <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8003692:	4b16      	ldr	r3, [pc, #88]	@ (80036ec <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
      break;
 8003698:	e022      	b.n	80036e0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036a0:	2bff      	cmp	r3, #255	@ 0xff
 80036a2:	d103      	bne.n	80036ac <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2278      	movs	r2, #120	@ 0x78
 80036a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	691c      	ldr	r4, [r3, #16]
 80036b0:	7aba      	ldrb	r2, [r7, #10]
 80036b2:	7af9      	ldrb	r1, [r7, #11]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	47a0      	blx	r4
 80036ba:	4603      	mov	r3, r0
 80036bc:	e011      	b.n	80036e2 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 80036be:	4b0b      	ldr	r3, [pc, #44]	@ (80036ec <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]
      break;
 80036c4:	e00c      	b.n	80036e0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 80036c6:	4b09      	ldr	r3, [pc, #36]	@ (80036ec <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f7ff feb2 	bl	8003438 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 80036d4:	4b05      	ldr	r3, [pc, #20]	@ (80036ec <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
      break;
 80036da:	e001      	b.n	80036e0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	e000      	b.n	80036e2 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 80036e0:	2301      	movs	r3, #1
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd90      	pop	{r4, r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000538 	.word	0x20000538

080036f0 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	607b      	str	r3, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	72fb      	strb	r3, [r7, #11]
 80036fe:	4613      	mov	r3, r2
 8003700:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8003702:	7afb      	ldrb	r3, [r7, #11]
 8003704:	3b0b      	subs	r3, #11
 8003706:	2b04      	cmp	r3, #4
 8003708:	f200 808a 	bhi.w	8003820 <u8x8_d_ssd1306_sh1106_generic+0x130>
 800370c:	a201      	add	r2, pc, #4	@ (adr r2, 8003714 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	08003729 	.word	0x08003729
 8003718:	08003821 	.word	0x08003821
 800371c:	08003743 	.word	0x08003743
 8003720:	08003775 	.word	0x08003775
 8003724:	08003795 	.word	0x08003795
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8003728:	7abb      	ldrb	r3, [r7, #10]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d104      	bne.n	8003738 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800372e:	4940      	ldr	r1, [pc, #256]	@ (8003830 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7ff fee8 	bl	8003506 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8003736:	e075      	b.n	8003824 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8003738:	493e      	ldr	r1, [pc, #248]	@ (8003834 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f7ff fee3 	bl	8003506 <u8x8_cad_SendSequence>
      break;
 8003740:	e070      	b.n	8003824 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8003742:	7abb      	ldrb	r3, [r7, #10]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8003748:	493b      	ldr	r1, [pc, #236]	@ (8003838 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f7ff fedb 	bl	8003506 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	7c9a      	ldrb	r2, [r3, #18]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800375c:	e062      	b.n	8003824 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800375e:	4937      	ldr	r1, [pc, #220]	@ (800383c <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f7ff fed0 	bl	8003506 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	7cda      	ldrb	r2, [r3, #19]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 8003772:	e057      	b.n	8003824 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f7ff fea6 	bl	80034c6 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800377a:	2181      	movs	r1, #129	@ 0x81
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7ff fe6b 	bl	8003458 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8003782:	7abb      	ldrb	r3, [r7, #10]
 8003784:	4619      	mov	r1, r3
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7ff fe78 	bl	800347c <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f7ff feaa 	bl	80034e6 <u8x8_cad_EndTransfer>
      break;
 8003792:	e047      	b.n	8003824 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f7ff fe96 	bl	80034c6 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	795b      	ldrb	r3, [r3, #5]
 800379e:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	4413      	add	r3, r2
 80037b0:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80037b2:	2140      	movs	r1, #64	@ 0x40
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f7ff fe4f 	bl	8003458 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f043 0310 	orr.w	r3, r3, #16
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	4619      	mov	r1, r3
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff fe45 	bl	8003458 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80037ce:	7dfb      	ldrb	r3, [r7, #23]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	4619      	mov	r1, r3
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f7ff fe4f 	bl	800347c <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	799b      	ldrb	r3, [r3, #6]
 80037e2:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	4619      	mov	r1, r3
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7ff fe46 	bl	800347c <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	791b      	ldrb	r3, [r3, #4]
 80037f4:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80037fc:	7dbb      	ldrb	r3, [r7, #22]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	b2db      	uxtb	r3, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4619      	mov	r1, r3
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f7ff fe4a 	bl	80034a0 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800380c:	7abb      	ldrb	r3, [r7, #10]
 800380e:	3b01      	subs	r3, #1
 8003810:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003812:	7abb      	ldrb	r3, [r7, #10]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1eb      	bne.n	80037f0 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f7ff fe64 	bl	80034e6 <u8x8_cad_EndTransfer>
      break;
 800381e:	e001      	b.n	8003824 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8003820:	2300      	movs	r3, #0
 8003822:	e000      	b.n	8003826 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8003824:	2301      	movs	r3, #1
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	0800439c 	.word	0x0800439c
 8003834:	080043a4 	.word	0x080043a4
 8003838:	080043ac 	.word	0x080043ac
 800383c:	080043b4 	.word	0x080043b4

08003840 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	460b      	mov	r3, r1
 800384c:	72fb      	strb	r3, [r7, #11]
 800384e:	4613      	mov	r3, r2
 8003850:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8003852:	7aba      	ldrb	r2, [r7, #10]
 8003854:	7af9      	ldrb	r1, [r7, #11]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f7ff ff49 	bl	80036f0 <u8x8_d_ssd1306_sh1106_generic>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8003864:	2301      	movs	r3, #1
 8003866:	e014      	b.n	8003892 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8003868:	7afb      	ldrb	r3, [r7, #11]
 800386a:	2b09      	cmp	r3, #9
 800386c:	d009      	beq.n	8003882 <u8x8_d_ssd1306_128x64_noname+0x42>
 800386e:	2b0a      	cmp	r3, #10
 8003870:	d10c      	bne.n	800388c <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f829 	bl	80038ca <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8003878:	4908      	ldr	r1, [pc, #32]	@ (800389c <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff fe43 	bl	8003506 <u8x8_cad_SendSequence>
      break;
 8003880:	e006      	b.n	8003890 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8003882:	4907      	ldr	r1, [pc, #28]	@ (80038a0 <u8x8_d_ssd1306_128x64_noname+0x60>)
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f80d 	bl	80038a4 <u8x8_d_helper_display_setup_memory>
      break;
 800388a:	e001      	b.n	8003890 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 800388c:	2300      	movs	r3, #0
 800388e:	e000      	b.n	8003892 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8003890:	2301      	movs	r3, #1
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	08004364 	.word	0x08004364
 80038a0:	080043bc 	.word	0x080043bc

080038a4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	7c9a      	ldrb	r2, [r3, #18]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80038ca:	b590      	push	{r4, r7, lr}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);             /* macro, which calls gpio_and_delay_cb with U8X8_MSG_GPIO_AND_DELAY_INIT */
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695c      	ldr	r4, [r3, #20]
 80038d6:	2300      	movs	r3, #0
 80038d8:	2200      	movs	r2, #0
 80038da:	2128      	movs	r1, #40	@ 0x28
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68dc      	ldr	r4, [r3, #12]
 80038e4:	2300      	movs	r3, #0
 80038e6:	2200      	movs	r2, #0
 80038e8:	2114      	movs	r1, #20
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80038ee:	2201      	movs	r2, #1
 80038f0:	214b      	movs	r1, #75	@ 0x4b
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f886 	bl	8003a04 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	791b      	ldrb	r3, [r3, #4]
 80038fe:	461a      	mov	r2, r3
 8003900:	2129      	movs	r1, #41	@ 0x29
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f87e 	bl	8003a04 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003908:	2200      	movs	r2, #0
 800390a:	214b      	movs	r1, #75	@ 0x4b
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f879 	bl	8003a04 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	791b      	ldrb	r3, [r3, #4]
 8003918:	461a      	mov	r2, r3
 800391a:	2129      	movs	r1, #41	@ 0x29
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f871 	bl	8003a04 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003922:	2201      	movs	r2, #1
 8003924:	214b      	movs	r1, #75	@ 0x4b
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f86c 	bl	8003a04 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	795b      	ldrb	r3, [r3, #5]
 8003932:	461a      	mov	r2, r3
 8003934:	2129      	movs	r1, #41	@ 0x29
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f864 	bl	8003a04 <u8x8_gpio_call>
}    
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bd90      	pop	{r4, r7, pc}

08003944 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003944:	b590      	push	{r4, r7, lr}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	4608      	mov	r0, r1
 800394e:	4611      	mov	r1, r2
 8003950:	461a      	mov	r2, r3
 8003952:	4603      	mov	r3, r0
 8003954:	70fb      	strb	r3, [r7, #3]
 8003956:	460b      	mov	r3, r1
 8003958:	70bb      	strb	r3, [r7, #2]
 800395a:	4613      	mov	r3, r2
 800395c:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003962:	78bb      	ldrb	r3, [r7, #2]
 8003964:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003966:	787b      	ldrb	r3, [r7, #1]
 8003968:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689c      	ldr	r4, [r3, #8]
 8003972:	f107 0308 	add.w	r3, r7, #8
 8003976:	2201      	movs	r2, #1
 8003978:	210f      	movs	r1, #15
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	47a0      	blx	r4
 800397e:	4603      	mov	r3, r0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	bd90      	pop	{r4, r7, pc}

08003988 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689c      	ldr	r4, [r3, #8]
 8003994:	2300      	movs	r3, #0
 8003996:	2200      	movs	r2, #0
 8003998:	2109      	movs	r1, #9
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	47a0      	blx	r4
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd90      	pop	{r4, r7, pc}

080039a6 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80039a6:	b590      	push	{r4, r7, lr}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689c      	ldr	r4, [r3, #8]
 80039b2:	2300      	movs	r3, #0
 80039b4:	2200      	movs	r2, #0
 80039b6:	210a      	movs	r1, #10
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd90      	pop	{r4, r7, pc}

080039c4 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80039c4:	b590      	push	{r4, r7, lr}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689c      	ldr	r4, [r3, #8]
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	2300      	movs	r3, #0
 80039d8:	210b      	movs	r1, #11
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	47a0      	blx	r4
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd90      	pop	{r4, r7, pc}

080039e6 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80039e6:	b590      	push	{r4, r7, lr}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689c      	ldr	r4, [r3, #8]
 80039f2:	2300      	movs	r3, #0
 80039f4:	2200      	movs	r2, #0
 80039f6:	2110      	movs	r1, #16
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	47a0      	blx	r4
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd90      	pop	{r4, r7, pc}

08003a04 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003a04:	b590      	push	{r4, r7, lr}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	70fb      	strb	r3, [r7, #3]
 8003a10:	4613      	mov	r3, r2
 8003a12:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	695c      	ldr	r4, [r3, #20]
 8003a18:	78ba      	ldrb	r2, [r7, #2]
 8003a1a:	78f9      	ldrb	r1, [r7, #3]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	47a0      	blx	r4
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd90      	pop	{r4, r7, pc}

08003a2a <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	607b      	str	r3, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	72fb      	strb	r3, [r7, #11]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a11      	ldr	r2, [pc, #68]	@ (8003aa0 <u8x8_SetupDefaults+0x58>)
 8003a5a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a10      	ldr	r2, [pc, #64]	@ (8003aa0 <u8x8_SetupDefaults+0x58>)
 8003a60:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a0e      	ldr	r2, [pc, #56]	@ (8003aa0 <u8x8_SetupDefaults+0x58>)
 8003a66:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a0d      	ldr	r2, [pc, #52]	@ (8003aa0 <u8x8_SetupDefaults+0x58>)
 8003a6c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	22ff      	movs	r2, #255	@ 0xff
 8003a88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	22ff      	movs	r2, #255	@ 0xff
 8003a90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	08003a2b 	.word	0x08003a2b

08003aa4 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f7ff ffc8 	bl	8003a48 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f7ff ff59 	bl	8003988 <u8x8_SetupMemory>
}
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <memset>:
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4402      	add	r2, r0
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d100      	bne.n	8003ae8 <memset+0xa>
 8003ae6:	4770      	bx	lr
 8003ae8:	f803 1b01 	strb.w	r1, [r3], #1
 8003aec:	e7f9      	b.n	8003ae2 <memset+0x4>
	...

08003af0 <__libc_init_array>:
 8003af0:	b570      	push	{r4, r5, r6, lr}
 8003af2:	2600      	movs	r6, #0
 8003af4:	4d0c      	ldr	r5, [pc, #48]	@ (8003b28 <__libc_init_array+0x38>)
 8003af6:	4c0d      	ldr	r4, [pc, #52]	@ (8003b2c <__libc_init_array+0x3c>)
 8003af8:	1b64      	subs	r4, r4, r5
 8003afa:	10a4      	asrs	r4, r4, #2
 8003afc:	42a6      	cmp	r6, r4
 8003afe:	d109      	bne.n	8003b14 <__libc_init_array+0x24>
 8003b00:	f000 f81a 	bl	8003b38 <_init>
 8003b04:	2600      	movs	r6, #0
 8003b06:	4d0a      	ldr	r5, [pc, #40]	@ (8003b30 <__libc_init_array+0x40>)
 8003b08:	4c0a      	ldr	r4, [pc, #40]	@ (8003b34 <__libc_init_array+0x44>)
 8003b0a:	1b64      	subs	r4, r4, r5
 8003b0c:	10a4      	asrs	r4, r4, #2
 8003b0e:	42a6      	cmp	r6, r4
 8003b10:	d105      	bne.n	8003b1e <__libc_init_array+0x2e>
 8003b12:	bd70      	pop	{r4, r5, r6, pc}
 8003b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b18:	4798      	blx	r3
 8003b1a:	3601      	adds	r6, #1
 8003b1c:	e7ee      	b.n	8003afc <__libc_init_array+0xc>
 8003b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b22:	4798      	blx	r3
 8003b24:	3601      	adds	r6, #1
 8003b26:	e7f2      	b.n	8003b0e <__libc_init_array+0x1e>
 8003b28:	080043d4 	.word	0x080043d4
 8003b2c:	080043d4 	.word	0x080043d4
 8003b30:	080043d4 	.word	0x080043d4
 8003b34:	080043d8 	.word	0x080043d8

08003b38 <_init>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	bf00      	nop
 8003b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3e:	bc08      	pop	{r3}
 8003b40:	469e      	mov	lr, r3
 8003b42:	4770      	bx	lr

08003b44 <_fini>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	bf00      	nop
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr
