
BluePill_VCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071ac  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080072b8  080072b8  000082b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007324  08007324  00009198  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007324  08007324  00008324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800732c  0800732c  00009198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800732c  0800732c  0000832c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007330  08007330  00008330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000198  20000000  08007334  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011fc  20000198  080074cc  00009198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001394  080074cc  00009394  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009198  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b71b  00000000  00000000  000091c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a5  00000000  00000000  000148dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  00017088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000759  00000000  00000000  00017aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ece  00000000  00000000  000181f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9a2  00000000  00000000  000310c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084414  00000000  00000000  0003ea69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2e7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b4  00000000  00000000  000c2ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000c5574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000198 	.word	0x20000198
 8000128:	00000000 	.word	0x00000000
 800012c:	080072a0 	.word	0x080072a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000019c 	.word	0x2000019c
 8000148:	080072a0 	.word	0x080072a0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 f92c 	bl	80003bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f814 	bl	8000190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f86c 	bl	8000244 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800016c:	f006 fbb0 	bl	80068d0 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CDC_Transmit_FS((uint8_t*)Tx_Buf, strlen(Tx_Buf));
 8000170:	4806      	ldr	r0, [pc, #24]	@ (800018c <main+0x30>)
 8000172:	f7ff ffeb 	bl	800014c <strlen>
 8000176:	4603      	mov	r3, r0
 8000178:	b29b      	uxth	r3, r3
 800017a:	4619      	mov	r1, r3
 800017c:	4803      	ldr	r0, [pc, #12]	@ (800018c <main+0x30>)
 800017e:	f006 fc71 	bl	8006a64 <CDC_Transmit_FS>
	  HAL_Delay(250);
 8000182:	20fa      	movs	r0, #250	@ 0xfa
 8000184:	f000 f97c 	bl	8000480 <HAL_Delay>
	  CDC_Transmit_FS((uint8_t*)Tx_Buf, strlen(Tx_Buf));
 8000188:	bf00      	nop
 800018a:	e7f1      	b.n	8000170 <main+0x14>
 800018c:	20000000 	.word	0x20000000

08000190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b094      	sub	sp, #80	@ 0x50
 8000194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800019a:	2228      	movs	r2, #40	@ 0x28
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f007 f83e 	bl	8007220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	f107 0314 	add.w	r3, r7, #20
 80001a8:	2200      	movs	r2, #0
 80001aa:	601a      	str	r2, [r3, #0]
 80001ac:	605a      	str	r2, [r3, #4]
 80001ae:	609a      	str	r2, [r3, #8]
 80001b0:	60da      	str	r2, [r3, #12]
 80001b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c0:	2301      	movs	r3, #1
 80001c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ca:	2300      	movs	r3, #0
 80001cc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ce:	2301      	movs	r3, #1
 80001d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d2:	2302      	movs	r3, #2
 80001d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001dc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 ffdc 	bl	80021a4 <HAL_RCC_OscConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001f2:	f000 f849 	bl	8000288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f6:	230f      	movs	r3, #15
 80001f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fa:	2302      	movs	r3, #2
 80001fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000202:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000206:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800020c:	f107 0314 	add.w	r3, r7, #20
 8000210:	2102      	movs	r1, #2
 8000212:	4618      	mov	r0, r3
 8000214:	f002 fa48 	bl	80026a8 <HAL_RCC_ClockConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800021e:	f000 f833 	bl	8000288 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000222:	2310      	movs	r3, #16
 8000224:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000226:	2300      	movs	r3, #0
 8000228:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4618      	mov	r0, r3
 800022e:	f002 fb97 	bl	8002960 <HAL_RCCEx_PeriphCLKConfig>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000238:	f000 f826 	bl	8000288 <Error_Handler>
  }
}
 800023c:	bf00      	nop
 800023e:	3750      	adds	r7, #80	@ 0x50
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}

08000244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800024a:	4b0e      	ldr	r3, [pc, #56]	@ (8000284 <MX_GPIO_Init+0x40>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	4a0d      	ldr	r2, [pc, #52]	@ (8000284 <MX_GPIO_Init+0x40>)
 8000250:	f043 0320 	orr.w	r3, r3, #32
 8000254:	6193      	str	r3, [r2, #24]
 8000256:	4b0b      	ldr	r3, [pc, #44]	@ (8000284 <MX_GPIO_Init+0x40>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	f003 0320 	and.w	r3, r3, #32
 800025e:	607b      	str	r3, [r7, #4]
 8000260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000262:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <MX_GPIO_Init+0x40>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a07      	ldr	r2, [pc, #28]	@ (8000284 <MX_GPIO_Init+0x40>)
 8000268:	f043 0304 	orr.w	r3, r3, #4
 800026c:	6193      	str	r3, [r2, #24]
 800026e:	4b05      	ldr	r3, [pc, #20]	@ (8000284 <MX_GPIO_Init+0x40>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	f003 0304 	and.w	r3, r3, #4
 8000276:	603b      	str	r3, [r7, #0]
 8000278:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	40021000 	.word	0x40021000

08000288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800028c:	b672      	cpsid	i
}
 800028e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000290:	bf00      	nop
 8000292:	e7fd      	b.n	8000290 <Error_Handler+0x8>

08000294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800029a:	4b15      	ldr	r3, [pc, #84]	@ (80002f0 <HAL_MspInit+0x5c>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a14      	ldr	r2, [pc, #80]	@ (80002f0 <HAL_MspInit+0x5c>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6193      	str	r3, [r2, #24]
 80002a6:	4b12      	ldr	r3, [pc, #72]	@ (80002f0 <HAL_MspInit+0x5c>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	60bb      	str	r3, [r7, #8]
 80002b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002b2:	4b0f      	ldr	r3, [pc, #60]	@ (80002f0 <HAL_MspInit+0x5c>)
 80002b4:	69db      	ldr	r3, [r3, #28]
 80002b6:	4a0e      	ldr	r2, [pc, #56]	@ (80002f0 <HAL_MspInit+0x5c>)
 80002b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002bc:	61d3      	str	r3, [r2, #28]
 80002be:	4b0c      	ldr	r3, [pc, #48]	@ (80002f0 <HAL_MspInit+0x5c>)
 80002c0:	69db      	ldr	r3, [r3, #28]
 80002c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002ca:	4b0a      	ldr	r3, [pc, #40]	@ (80002f4 <HAL_MspInit+0x60>)
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	4a04      	ldr	r2, [pc, #16]	@ (80002f4 <HAL_MspInit+0x60>)
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002e6:	bf00      	nop
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	40021000 	.word	0x40021000
 80002f4:	40010000 	.word	0x40010000

080002f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002fc:	bf00      	nop
 80002fe:	e7fd      	b.n	80002fc <NMI_Handler+0x4>

08000300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000304:	bf00      	nop
 8000306:	e7fd      	b.n	8000304 <HardFault_Handler+0x4>

08000308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800030c:	bf00      	nop
 800030e:	e7fd      	b.n	800030c <MemManage_Handler+0x4>

08000310 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000314:	bf00      	nop
 8000316:	e7fd      	b.n	8000314 <BusFault_Handler+0x4>

08000318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800031c:	bf00      	nop
 800031e:	e7fd      	b.n	800031c <UsageFault_Handler+0x4>

08000320 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr

0800032c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr

08000338 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr

08000344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000348:	f000 f87e 	bl	8000448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800034c:	bf00      	nop
 800034e:	bd80      	pop	{r7, pc}

08000350 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000354:	4802      	ldr	r0, [pc, #8]	@ (8000360 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000356:	f000 fae0 	bl	800091a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000e9c 	.word	0x20000e9c

08000364 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000370:	f7ff fff8 	bl	8000364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000374:	480b      	ldr	r0, [pc, #44]	@ (80003a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000376:	490c      	ldr	r1, [pc, #48]	@ (80003a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000378:	4a0c      	ldr	r2, [pc, #48]	@ (80003ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a09      	ldr	r2, [pc, #36]	@ (80003b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800038c:	4c09      	ldr	r4, [pc, #36]	@ (80003b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800039a:	f006 ff5d 	bl	8007258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039e:	f7ff fedd 	bl	800015c <main>
  bx lr
 80003a2:	4770      	bx	lr
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 80003ac:	08007334 	.word	0x08007334
  ldr r2, =_sbss
 80003b0:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 80003b4:	20001394 	.word	0x20001394

080003b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC1_2_IRQHandler>
	...

080003bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003c0:	4b08      	ldr	r3, [pc, #32]	@ (80003e4 <HAL_Init+0x28>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a07      	ldr	r2, [pc, #28]	@ (80003e4 <HAL_Init+0x28>)
 80003c6:	f043 0310 	orr.w	r3, r3, #16
 80003ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003cc:	2003      	movs	r0, #3
 80003ce:	f000 f947 	bl	8000660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003d2:	200f      	movs	r0, #15
 80003d4:	f000 f808 	bl	80003e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003d8:	f7ff ff5c 	bl	8000294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40022000 	.word	0x40022000

080003e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003f0:	4b12      	ldr	r3, [pc, #72]	@ (800043c <HAL_InitTick+0x54>)
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	4b12      	ldr	r3, [pc, #72]	@ (8000440 <HAL_InitTick+0x58>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	4619      	mov	r1, r3
 80003fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000402:	fbb2 f3f3 	udiv	r3, r2, r3
 8000406:	4618      	mov	r0, r3
 8000408:	f000 f95f 	bl	80006ca <HAL_SYSTICK_Config>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000412:	2301      	movs	r3, #1
 8000414:	e00e      	b.n	8000434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2b0f      	cmp	r3, #15
 800041a:	d80a      	bhi.n	8000432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800041c:	2200      	movs	r2, #0
 800041e:	6879      	ldr	r1, [r7, #4]
 8000420:	f04f 30ff 	mov.w	r0, #4294967295
 8000424:	f000 f927 	bl	8000676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000428:	4a06      	ldr	r2, [pc, #24]	@ (8000444 <HAL_InitTick+0x5c>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800042e:	2300      	movs	r3, #0
 8000430:	e000      	b.n	8000434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000432:	2301      	movs	r3, #1
}
 8000434:	4618      	mov	r0, r3
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	2000001c 	.word	0x2000001c
 8000440:	20000024 	.word	0x20000024
 8000444:	20000020 	.word	0x20000020

08000448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800044c:	4b05      	ldr	r3, [pc, #20]	@ (8000464 <HAL_IncTick+0x1c>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	461a      	mov	r2, r3
 8000452:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <HAL_IncTick+0x20>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4413      	add	r3, r2
 8000458:	4a03      	ldr	r2, [pc, #12]	@ (8000468 <HAL_IncTick+0x20>)
 800045a:	6013      	str	r3, [r2, #0]
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	20000024 	.word	0x20000024
 8000468:	200001d0 	.word	0x200001d0

0800046c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  return uwTick;
 8000470:	4b02      	ldr	r3, [pc, #8]	@ (800047c <HAL_GetTick+0x10>)
 8000472:	681b      	ldr	r3, [r3, #0]
}
 8000474:	4618      	mov	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	200001d0 	.word	0x200001d0

08000480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000488:	f7ff fff0 	bl	800046c <HAL_GetTick>
 800048c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000498:	d005      	beq.n	80004a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800049a:	4b0a      	ldr	r3, [pc, #40]	@ (80004c4 <HAL_Delay+0x44>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	461a      	mov	r2, r3
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	4413      	add	r3, r2
 80004a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004a6:	bf00      	nop
 80004a8:	f7ff ffe0 	bl	800046c <HAL_GetTick>
 80004ac:	4602      	mov	r2, r0
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	1ad3      	subs	r3, r2, r3
 80004b2:	68fa      	ldr	r2, [r7, #12]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d8f7      	bhi.n	80004a8 <HAL_Delay+0x28>
  {
  }
}
 80004b8:	bf00      	nop
 80004ba:	bf00      	nop
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000024 	.word	0x20000024

080004c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f003 0307 	and.w	r3, r3, #7
 80004d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004d8:	4b0c      	ldr	r3, [pc, #48]	@ (800050c <__NVIC_SetPriorityGrouping+0x44>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004de:	68ba      	ldr	r2, [r7, #8]
 80004e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80004e4:	4013      	ands	r3, r2
 80004e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80004f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004fa:	4a04      	ldr	r2, [pc, #16]	@ (800050c <__NVIC_SetPriorityGrouping+0x44>)
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	60d3      	str	r3, [r2, #12]
}
 8000500:	bf00      	nop
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000ed00 	.word	0xe000ed00

08000510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000514:	4b04      	ldr	r3, [pc, #16]	@ (8000528 <__NVIC_GetPriorityGrouping+0x18>)
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	0a1b      	lsrs	r3, r3, #8
 800051a:	f003 0307 	and.w	r3, r3, #7
}
 800051e:	4618      	mov	r0, r3
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	e000ed00 	.word	0xe000ed00

0800052c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053a:	2b00      	cmp	r3, #0
 800053c:	db0b      	blt.n	8000556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	f003 021f 	and.w	r2, r3, #31
 8000544:	4906      	ldr	r1, [pc, #24]	@ (8000560 <__NVIC_EnableIRQ+0x34>)
 8000546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054a:	095b      	lsrs	r3, r3, #5
 800054c:	2001      	movs	r0, #1
 800054e:	fa00 f202 	lsl.w	r2, r0, r2
 8000552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	e000e100 	.word	0xe000e100

08000564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	6039      	str	r1, [r7, #0]
 800056e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000574:	2b00      	cmp	r3, #0
 8000576:	db0a      	blt.n	800058e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	b2da      	uxtb	r2, r3
 800057c:	490c      	ldr	r1, [pc, #48]	@ (80005b0 <__NVIC_SetPriority+0x4c>)
 800057e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000582:	0112      	lsls	r2, r2, #4
 8000584:	b2d2      	uxtb	r2, r2
 8000586:	440b      	add	r3, r1
 8000588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800058c:	e00a      	b.n	80005a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4908      	ldr	r1, [pc, #32]	@ (80005b4 <__NVIC_SetPriority+0x50>)
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	f003 030f 	and.w	r3, r3, #15
 800059a:	3b04      	subs	r3, #4
 800059c:	0112      	lsls	r2, r2, #4
 800059e:	b2d2      	uxtb	r2, r2
 80005a0:	440b      	add	r3, r1
 80005a2:	761a      	strb	r2, [r3, #24]
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000e100 	.word	0xe000e100
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b089      	sub	sp, #36	@ 0x24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	f1c3 0307 	rsb	r3, r3, #7
 80005d2:	2b04      	cmp	r3, #4
 80005d4:	bf28      	it	cs
 80005d6:	2304      	movcs	r3, #4
 80005d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	3304      	adds	r3, #4
 80005de:	2b06      	cmp	r3, #6
 80005e0:	d902      	bls.n	80005e8 <NVIC_EncodePriority+0x30>
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	3b03      	subs	r3, #3
 80005e6:	e000      	b.n	80005ea <NVIC_EncodePriority+0x32>
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	f04f 32ff 	mov.w	r2, #4294967295
 80005f0:	69bb      	ldr	r3, [r7, #24]
 80005f2:	fa02 f303 	lsl.w	r3, r2, r3
 80005f6:	43da      	mvns	r2, r3
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	401a      	ands	r2, r3
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000600:	f04f 31ff 	mov.w	r1, #4294967295
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	fa01 f303 	lsl.w	r3, r1, r3
 800060a:	43d9      	mvns	r1, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000610:	4313      	orrs	r3, r2
         );
}
 8000612:	4618      	mov	r0, r3
 8000614:	3724      	adds	r7, #36	@ 0x24
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3b01      	subs	r3, #1
 8000628:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800062c:	d301      	bcc.n	8000632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800062e:	2301      	movs	r3, #1
 8000630:	e00f      	b.n	8000652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000632:	4a0a      	ldr	r2, [pc, #40]	@ (800065c <SysTick_Config+0x40>)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3b01      	subs	r3, #1
 8000638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800063a:	210f      	movs	r1, #15
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f7ff ff90 	bl	8000564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <SysTick_Config+0x40>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800064a:	4b04      	ldr	r3, [pc, #16]	@ (800065c <SysTick_Config+0x40>)
 800064c:	2207      	movs	r2, #7
 800064e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	e000e010 	.word	0xe000e010

08000660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff ff2d 	bl	80004c8 <__NVIC_SetPriorityGrouping>
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000676:	b580      	push	{r7, lr}
 8000678:	b086      	sub	sp, #24
 800067a:	af00      	add	r7, sp, #0
 800067c:	4603      	mov	r3, r0
 800067e:	60b9      	str	r1, [r7, #8]
 8000680:	607a      	str	r2, [r7, #4]
 8000682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000688:	f7ff ff42 	bl	8000510 <__NVIC_GetPriorityGrouping>
 800068c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	68b9      	ldr	r1, [r7, #8]
 8000692:	6978      	ldr	r0, [r7, #20]
 8000694:	f7ff ff90 	bl	80005b8 <NVIC_EncodePriority>
 8000698:	4602      	mov	r2, r0
 800069a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800069e:	4611      	mov	r1, r2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff5f 	bl	8000564 <__NVIC_SetPriority>
}
 80006a6:	bf00      	nop
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	4603      	mov	r3, r0
 80006b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff35 	bl	800052c <__NVIC_EnableIRQ>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff ffa2 	bl	800061c <SysTick_Config>
 80006d8:	4603      	mov	r3, r0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b084      	sub	sp, #16
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d101      	bne.n	80006f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80006f0:	2301      	movs	r3, #1
 80006f2:	e0e8      	b.n	80008c6 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d106      	bne.n	800070e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f006 fadf 	bl	8006ccc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2203      	movs	r2, #3
 8000712:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f002 f9f6 	bl	8002b12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6818      	ldr	r0, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3304      	adds	r3, #4
 800072e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000730:	f002 f9cc 	bl	8002acc <USB_CoreInit>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d005      	beq.n	8000746 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2202      	movs	r2, #2
 800073e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e0bf      	b.n	80008c6 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f002 f9fa 	bl	8002b46 <USB_SetCurrentMode>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d005      	beq.n	8000764 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2202      	movs	r2, #2
 800075c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000760:	2301      	movs	r3, #1
 8000762:	e0b0      	b.n	80008c6 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]
 8000768:	e03e      	b.n	80007e8 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800076a:	7bfa      	ldrb	r2, [r7, #15]
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	4613      	mov	r3, r2
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	4413      	add	r3, r2
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	440b      	add	r3, r1
 8000778:	3311      	adds	r3, #17
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800077e:	7bfa      	ldrb	r2, [r7, #15]
 8000780:	6879      	ldr	r1, [r7, #4]
 8000782:	4613      	mov	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4413      	add	r3, r2
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	440b      	add	r3, r1
 800078c:	3310      	adds	r3, #16
 800078e:	7bfa      	ldrb	r2, [r7, #15]
 8000790:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000792:	7bfa      	ldrb	r2, [r7, #15]
 8000794:	6879      	ldr	r1, [r7, #4]
 8000796:	4613      	mov	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	440b      	add	r3, r1
 80007a0:	3313      	adds	r3, #19
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80007a6:	7bfa      	ldrb	r2, [r7, #15]
 80007a8:	6879      	ldr	r1, [r7, #4]
 80007aa:	4613      	mov	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	440b      	add	r3, r1
 80007b4:	3320      	adds	r3, #32
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80007ba:	7bfa      	ldrb	r2, [r7, #15]
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	4613      	mov	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	440b      	add	r3, r1
 80007c8:	3324      	adds	r3, #36	@ 0x24
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	4613      	mov	r3, r2
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	440b      	add	r3, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	3301      	adds	r3, #1
 80007e6:	73fb      	strb	r3, [r7, #15]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	791b      	ldrb	r3, [r3, #4]
 80007ec:	7bfa      	ldrb	r2, [r7, #15]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d3bb      	bcc.n	800076a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
 80007f6:	e044      	b.n	8000882 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80007f8:	7bfa      	ldrb	r2, [r7, #15]
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	4613      	mov	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	00db      	lsls	r3, r3, #3
 8000804:	440b      	add	r3, r1
 8000806:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800080e:	7bfa      	ldrb	r2, [r7, #15]
 8000810:	6879      	ldr	r1, [r7, #4]
 8000812:	4613      	mov	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	4413      	add	r3, r2
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	440b      	add	r3, r1
 800081c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000820:	7bfa      	ldrb	r2, [r7, #15]
 8000822:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000824:	7bfa      	ldrb	r2, [r7, #15]
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	4613      	mov	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	4413      	add	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	440b      	add	r3, r1
 8000832:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800083a:	7bfa      	ldrb	r2, [r7, #15]
 800083c:	6879      	ldr	r1, [r7, #4]
 800083e:	4613      	mov	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	440b      	add	r3, r1
 8000848:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000850:	7bfa      	ldrb	r2, [r7, #15]
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	4613      	mov	r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4413      	add	r3, r2
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	440b      	add	r3, r1
 800085e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000866:	7bfa      	ldrb	r2, [r7, #15]
 8000868:	6879      	ldr	r1, [r7, #4]
 800086a:	4613      	mov	r3, r2
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	4413      	add	r3, r2
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	440b      	add	r3, r1
 8000874:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	3301      	adds	r3, #1
 8000880:	73fb      	strb	r3, [r7, #15]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	791b      	ldrb	r3, [r3, #4]
 8000886:	7bfa      	ldrb	r2, [r7, #15]
 8000888:	429a      	cmp	r2, r3
 800088a:	d3b5      	bcc.n	80007f8 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6818      	ldr	r0, [r3, #0]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3304      	adds	r3, #4
 8000894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000896:	f002 f962 	bl	8002b5e <USB_DevInit>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d005      	beq.n	80008ac <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2202      	movs	r2, #2
 80008a4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80008a8:	2301      	movs	r3, #1
 80008aa:	e00c      	b.n	80008c6 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2201      	movs	r2, #1
 80008b6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f004 fbe1 	bl	8005086 <USB_DevDisconnect>

  return HAL_OK;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d101      	bne.n	80008e4 <HAL_PCD_Start+0x16>
 80008e0:	2302      	movs	r3, #2
 80008e2:	e016      	b.n	8000912 <HAL_PCD_Start+0x44>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2201      	movs	r2, #1
 80008e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f002 f8f8 	bl	8002ae6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80008f6:	2101      	movs	r1, #1
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f006 fc5a 	bl	80071b2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f004 fbb5 	bl	8005072 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b088      	sub	sp, #32
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f004 fbb7 	bl	800509a <USB_ReadInterrupts>
 800092c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000934:	2b00      	cmp	r3, #0
 8000936:	d003      	beq.n	8000940 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f000 fb1a 	bl	8000f72 <PCD_EP_ISR_Handler>

    return;
 800093e:	e119      	b.n	8000b74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000946:	2b00      	cmp	r3, #0
 8000948:	d013      	beq.n	8000972 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000952:	b29a      	uxth	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800095c:	b292      	uxth	r2, r2
 800095e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f006 fa2d 	bl	8006dc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000968:	2100      	movs	r1, #0
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f000 f905 	bl	8000b7a <HAL_PCD_SetAddress>

    return;
 8000970:	e100      	b.n	8000b74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000978:	2b00      	cmp	r3, #0
 800097a:	d00c      	beq.n	8000996 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000984:	b29a      	uxth	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800098e:	b292      	uxth	r2, r2
 8000990:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000994:	e0ee      	b.n	8000b74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800099c:	2b00      	cmp	r3, #0
 800099e:	d00c      	beq.n	80009ba <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80009b2:	b292      	uxth	r2, r2
 80009b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80009b8:	e0dc      	b.n	8000b74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d027      	beq.n	8000a14 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f022 0204 	bic.w	r2, r2, #4
 80009d6:	b292      	uxth	r2, r2
 80009d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f022 0208 	bic.w	r2, r2, #8
 80009ee:	b292      	uxth	r2, r2
 80009f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f006 fa1d 	bl	8006e34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000a0c:	b292      	uxth	r2, r2
 8000a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000a12:	e0af      	b.n	8000b74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f000 8083 	beq.w	8000b26 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8000a20:	2300      	movs	r3, #0
 8000a22:	77fb      	strb	r3, [r7, #31]
 8000a24:	e010      	b.n	8000a48 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	7ffb      	ldrb	r3, [r7, #31]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	441a      	add	r2, r3
 8000a32:	7ffb      	ldrb	r3, [r7, #31]
 8000a34:	8812      	ldrh	r2, [r2, #0]
 8000a36:	b292      	uxth	r2, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	3320      	adds	r3, #32
 8000a3c:	443b      	add	r3, r7
 8000a3e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8000a42:	7ffb      	ldrb	r3, [r7, #31]
 8000a44:	3301      	adds	r3, #1
 8000a46:	77fb      	strb	r3, [r7, #31]
 8000a48:	7ffb      	ldrb	r3, [r7, #31]
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	d9eb      	bls.n	8000a26 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f042 0201 	orr.w	r2, r2, #1
 8000a60:	b292      	uxth	r2, r2
 8000a62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f022 0201 	bic.w	r2, r2, #1
 8000a78:	b292      	uxth	r2, r2
 8000a7a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000a7e:	bf00      	nop
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f6      	beq.n	8000a80 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000aa4:	b292      	uxth	r2, r2
 8000aa6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	77fb      	strb	r3, [r7, #31]
 8000aae:	e00f      	b.n	8000ad0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000ab0:	7ffb      	ldrb	r3, [r7, #31]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	6812      	ldr	r2, [r2, #0]
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	7ffa      	ldrb	r2, [r7, #31]
 8000aba:	0092      	lsls	r2, r2, #2
 8000abc:	440a      	add	r2, r1
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	3320      	adds	r3, #32
 8000ac2:	443b      	add	r3, r7
 8000ac4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000ac8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000aca:	7ffb      	ldrb	r3, [r7, #31]
 8000acc:	3301      	adds	r3, #1
 8000ace:	77fb      	strb	r3, [r7, #31]
 8000ad0:	7ffb      	ldrb	r3, [r7, #31]
 8000ad2:	2b07      	cmp	r3, #7
 8000ad4:	d9ec      	bls.n	8000ab0 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f042 0208 	orr.w	r2, r2, #8
 8000ae8:	b292      	uxth	r2, r2
 8000aea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000b00:	b292      	uxth	r2, r2
 8000b02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f042 0204 	orr.w	r2, r2, #4
 8000b18:	b292      	uxth	r2, r2
 8000b1a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f006 f96e 	bl	8006e00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000b24:	e026      	b.n	8000b74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00f      	beq.n	8000b50 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000b42:	b292      	uxth	r2, r2
 8000b44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f006 f92c 	bl	8006da6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000b4e:	e011      	b.n	8000b74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00c      	beq.n	8000b74 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000b6c:	b292      	uxth	r2, r2
 8000b6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000b72:	bf00      	nop
  }
}
 8000b74:	3720      	adds	r7, #32
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	460b      	mov	r3, r1
 8000b84:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d101      	bne.n	8000b94 <HAL_PCD_SetAddress+0x1a>
 8000b90:	2302      	movs	r3, #2
 8000b92:	e012      	b.n	8000bba <HAL_PCD_SetAddress+0x40>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2201      	movs	r2, #1
 8000b98:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	78fa      	ldrb	r2, [r7, #3]
 8000ba0:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	78fa      	ldrb	r2, [r7, #3]
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 fa4e 	bl	800504c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b084      	sub	sp, #16
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	4608      	mov	r0, r1
 8000bcc:	4611      	mov	r1, r2
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	70fb      	strb	r3, [r7, #3]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	803b      	strh	r3, [r7, #0]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	da0e      	bge.n	8000c06 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000be8:	78fb      	ldrb	r3, [r7, #3]
 8000bea:	f003 0207 	and.w	r2, r3, #7
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	3310      	adds	r3, #16
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2201      	movs	r2, #1
 8000c02:	705a      	strb	r2, [r3, #1]
 8000c04:	e00e      	b.n	8000c24 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c06:	78fb      	ldrb	r3, [r7, #3]
 8000c08:	f003 0207 	and.w	r2, r3, #7
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	4413      	add	r3, r2
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	2200      	movs	r2, #0
 8000c22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000c30:	883a      	ldrh	r2, [r7, #0]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	78ba      	ldrb	r2, [r7, #2]
 8000c3a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000c3c:	78bb      	ldrb	r3, [r7, #2]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d102      	bne.n	8000c48 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2200      	movs	r2, #0
 8000c46:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d101      	bne.n	8000c56 <HAL_PCD_EP_Open+0x94>
 8000c52:	2302      	movs	r3, #2
 8000c54:	e00e      	b.n	8000c74 <HAL_PCD_EP_Open+0xb2>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	68f9      	ldr	r1, [r7, #12]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 ff97 	bl	8002b98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8000c72:	7afb      	ldrb	r3, [r7, #11]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	da0e      	bge.n	8000cae <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	f003 0207 	and.w	r2, r3, #7
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	3310      	adds	r3, #16
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	705a      	strb	r2, [r3, #1]
 8000cac:	e00e      	b.n	8000ccc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	f003 0207 	and.w	r2, r3, #7
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d101      	bne.n	8000ce6 <HAL_PCD_EP_Close+0x6a>
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	e00e      	b.n	8000d04 <HAL_PCD_EP_Close+0x88>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68f9      	ldr	r1, [r7, #12]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f002 fb0f 	bl	8003318 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d1c:	7afb      	ldrb	r3, [r7, #11]
 8000d1e:	f003 0207 	and.w	r2, r3, #7
 8000d22:	4613      	mov	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	4413      	add	r3, r2
 8000d32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d4c:	7afb      	ldrb	r3, [r7, #11]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6979      	ldr	r1, [r7, #20]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 fcc6 	bl	80036f0 <USB_EPStartXfer>

  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	460b      	mov	r3, r1
 8000d78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000d7a:	78fb      	ldrb	r3, [r7, #3]
 8000d7c:	f003 0207 	and.w	r2, r3, #7
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8000d90:	681b      	ldr	r3, [r3, #0]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	460b      	mov	r3, r1
 8000daa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000dac:	7afb      	ldrb	r3, [r7, #11]
 8000dae:	f003 0207 	and.w	r2, r3, #7
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	3310      	adds	r3, #16
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	2201      	movs	r2, #1
 8000de6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000de8:	7afb      	ldrb	r3, [r7, #11]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6979      	ldr	r1, [r7, #20]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 fc78 	bl	80036f0 <USB_EPStartXfer>

  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b084      	sub	sp, #16
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	460b      	mov	r3, r1
 8000e14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000e16:	78fb      	ldrb	r3, [r7, #3]
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	7912      	ldrb	r2, [r2, #4]
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d901      	bls.n	8000e28 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e04c      	b.n	8000ec2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	da0e      	bge.n	8000e4e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e30:	78fb      	ldrb	r3, [r7, #3]
 8000e32:	f003 0207 	and.w	r2, r3, #7
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	3310      	adds	r3, #16
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	4413      	add	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	705a      	strb	r2, [r3, #1]
 8000e4c:	e00c      	b.n	8000e68 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e4e:	78fa      	ldrb	r2, [r7, #3]
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2200      	movs	r2, #0
 8000e66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e6e:	78fb      	ldrb	r3, [r7, #3]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d101      	bne.n	8000e88 <HAL_PCD_EP_SetStall+0x7e>
 8000e84:	2302      	movs	r3, #2
 8000e86:	e01c      	b.n	8000ec2 <HAL_PCD_EP_SetStall+0xb8>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68f9      	ldr	r1, [r7, #12]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 ffdb 	bl	8004e52 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d108      	bne.n	8000eb8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	f004 f900 	bl	80050b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b084      	sub	sp, #16
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	f003 030f 	and.w	r3, r3, #15
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	7912      	ldrb	r2, [r2, #4]
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d901      	bls.n	8000ee8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e040      	b.n	8000f6a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000ee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	da0e      	bge.n	8000f0e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	f003 0207 	and.w	r2, r3, #7
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	3310      	adds	r3, #16
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	705a      	strb	r2, [r3, #1]
 8000f0c:	e00e      	b.n	8000f2c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f0e:	78fb      	ldrb	r3, [r7, #3]
 8000f10:	f003 0207 	and.w	r2, r3, #7
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f32:	78fb      	ldrb	r3, [r7, #3]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d101      	bne.n	8000f4c <HAL_PCD_EP_ClrStall+0x82>
 8000f48:	2302      	movs	r3, #2
 8000f4a:	e00e      	b.n	8000f6a <HAL_PCD_EP_ClrStall+0xa0>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68f9      	ldr	r1, [r7, #12]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 ffc9 	bl	8004ef2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b096      	sub	sp, #88	@ 0x58
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000f7a:	e3bb      	b.n	80016f4 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f84:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000f88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8000f96:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f040 8175 	bne.w	800128a <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000fa0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000fa4:	f003 0310 	and.w	r3, r3, #16
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d14e      	bne.n	800104a <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8000fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000fbc:	81fb      	strh	r3, [r7, #14]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	89fb      	ldrh	r3, [r7, #14]
 8000fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3310      	adds	r3, #16
 8000fd4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4413      	add	r3, r2
 8000fea:	3302      	adds	r3, #2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	6812      	ldr	r2, [r2, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001000:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001004:	695a      	ldr	r2, [r3, #20]
 8001006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	441a      	add	r2, r3
 800100c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800100e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001010:	2100      	movs	r1, #0
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f005 fead 	bl	8006d72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7b5b      	ldrb	r3, [r3, #13]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 8368 	beq.w	80016f4 <PCD_EP_ISR_Handler+0x782>
 8001024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	2b00      	cmp	r3, #0
 800102a:	f040 8363 	bne.w	80016f4 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7b5b      	ldrb	r3, [r3, #13]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001038:	b2da      	uxtb	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	735a      	strb	r2, [r3, #13]
 8001048:	e354      	b.n	80016f4 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001050:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800105c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001064:	2b00      	cmp	r3, #0
 8001066:	d034      	beq.n	80010d2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001070:	b29b      	uxth	r3, r3
 8001072:	461a      	mov	r2, r3
 8001074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4413      	add	r3, r2
 800107c:	3306      	adds	r3, #6
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	4413      	add	r3, r2
 8001086:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001092:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800109e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010a0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80010a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010a4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	f004 f857 	bl	800515a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80010b8:	4013      	ands	r3, r2
 80010ba:	823b      	strh	r3, [r7, #16]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	8a3a      	ldrh	r2, [r7, #16]
 80010c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010c6:	b292      	uxth	r2, r2
 80010c8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f005 fe24 	bl	8006d18 <HAL_PCD_SetupStageCallback>
 80010d0:	e310      	b.n	80016f4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010d2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f280 830c 	bge.w	80016f4 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80010e8:	4013      	ands	r3, r2
 80010ea:	83fb      	strh	r3, [r7, #30]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	8bfa      	ldrh	r2, [r7, #30]
 80010f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010f6:	b292      	uxth	r2, r2
 80010f8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001102:	b29b      	uxth	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4413      	add	r3, r2
 800110e:	3306      	adds	r3, #6
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	6812      	ldr	r2, [r2, #0]
 8001116:	4413      	add	r3, r2
 8001118:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001124:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d019      	beq.n	8001162 <PCD_EP_ISR_Handler+0x1f0>
 800112e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d015      	beq.n	8001162 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800113c:	6959      	ldr	r1, [r3, #20]
 800113e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001140:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001144:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001146:	b29b      	uxth	r3, r3
 8001148:	f004 f807 	bl	800515a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800114c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800114e:	695a      	ldr	r2, [r3, #20]
 8001150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	441a      	add	r2, r3
 8001156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001158:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800115a:	2100      	movs	r1, #0
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f005 fded 	bl	8006d3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800116c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001174:	2b00      	cmp	r3, #0
 8001176:	f040 82bd 	bne.w	80016f4 <PCD_EP_ISR_Handler+0x782>
 800117a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800117e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001182:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001186:	f000 82b5 	beq.w	80016f4 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001198:	b29b      	uxth	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	4413      	add	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	801a      	strh	r2, [r3, #0]
 80011ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2b3e      	cmp	r3, #62	@ 0x3e
 80011c0:	d91d      	bls.n	80011fe <PCD_EP_ISR_Handler+0x28c>
 80011c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80011ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d102      	bne.n	80011dc <PCD_EP_ISR_Handler+0x26a>
 80011d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011d8:	3b01      	subs	r3, #1
 80011da:	647b      	str	r3, [r7, #68]	@ 0x44
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	029b      	lsls	r3, r3, #10
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	801a      	strh	r2, [r3, #0]
 80011fc:	e026      	b.n	800124c <PCD_EP_ISR_Handler+0x2da>
 80011fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10a      	bne.n	800121c <PCD_EP_ISR_Handler+0x2aa>
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	b29b      	uxth	r3, r3
 800120c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001214:	b29a      	uxth	r2, r3
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	801a      	strh	r2, [r3, #0]
 800121a:	e017      	b.n	800124c <PCD_EP_ISR_Handler+0x2da>
 800121c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	085b      	lsrs	r3, r3, #1
 8001222:	647b      	str	r3, [r7, #68]	@ 0x44
 8001224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <PCD_EP_ISR_Handler+0x2c4>
 8001230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001232:	3301      	adds	r3, #1
 8001234:	647b      	str	r3, [r7, #68]	@ 0x44
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b29a      	uxth	r2, r3
 800123c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800123e:	b29b      	uxth	r3, r3
 8001240:	029b      	lsls	r3, r3, #10
 8001242:	b29b      	uxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b29a      	uxth	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800125c:	827b      	strh	r3, [r7, #18]
 800125e:	8a7b      	ldrh	r3, [r7, #18]
 8001260:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001264:	827b      	strh	r3, [r7, #18]
 8001266:	8a7b      	ldrh	r3, [r7, #18]
 8001268:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800126c:	827b      	strh	r3, [r7, #18]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	8a7b      	ldrh	r3, [r7, #18]
 8001274:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001278:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800127c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001284:	b29b      	uxth	r3, r3
 8001286:	8013      	strh	r3, [r2, #0]
 8001288:	e234      	b.n	80016f4 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800129e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f280 80fc 	bge.w	80014a0 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80012be:	4013      	ands	r3, r2
 80012c0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80012d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012da:	b292      	uxth	r2, r2
 80012dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80012de:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80012f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012f6:	7b1b      	ldrb	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d125      	bne.n	8001348 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001304:	b29b      	uxth	r3, r3
 8001306:	461a      	mov	r2, r3
 8001308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4413      	add	r3, r2
 8001310:	3306      	adds	r3, #6
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	4413      	add	r3, r2
 800131a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001324:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001328:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 8092 	beq.w	8001456 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001338:	6959      	ldr	r1, [r3, #20]
 800133a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800133c:	88da      	ldrh	r2, [r3, #6]
 800133e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001342:	f003 ff0a 	bl	800515a <USB_ReadPMA>
 8001346:	e086      	b.n	8001456 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800134a:	78db      	ldrb	r3, [r3, #3]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d10a      	bne.n	8001366 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001350:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001354:	461a      	mov	r2, r3
 8001356:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f9d9 	bl	8001710 <HAL_PCD_EP_DB_Receive>
 800135e:	4603      	mov	r3, r0
 8001360:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001364:	e077      	b.n	8001456 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	b29b      	uxth	r3, r3
 8001378:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800137c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001380:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	441a      	add	r2, r3
 8001392:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001396:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800139a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800139e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d024      	beq.n	800140e <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	461a      	mov	r2, r3
 80013d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4413      	add	r3, r2
 80013d8:	3302      	adds	r3, #2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	4413      	add	r3, r2
 80013e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013ec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80013f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d02e      	beq.n	8001456 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013fe:	6959      	ldr	r1, [r3, #20]
 8001400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001402:	891a      	ldrh	r2, [r3, #8]
 8001404:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001408:	f003 fea7 	bl	800515a <USB_ReadPMA>
 800140c:	e023      	b.n	8001456 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001416:	b29b      	uxth	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4413      	add	r3, r2
 8001422:	3306      	adds	r3, #6
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	4413      	add	r3, r2
 800142c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001436:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800143a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800143e:	2b00      	cmp	r3, #0
 8001440:	d009      	beq.n	8001456 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001448:	6959      	ldr	r1, [r3, #20]
 800144a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800144c:	895a      	ldrh	r2, [r3, #10]
 800144e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001452:	f003 fe82 	bl	800515a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001458:	69da      	ldr	r2, [r3, #28]
 800145a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800145e:	441a      	add	r2, r3
 8001460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001462:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001466:	695a      	ldr	r2, [r3, #20]
 8001468:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800146c:	441a      	add	r2, r3
 800146e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001470:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <PCD_EP_ISR_Handler+0x514>
 800147a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800147e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	429a      	cmp	r2, r3
 8001484:	d206      	bcs.n	8001494 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	4619      	mov	r1, r3
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f005 fc55 	bl	8006d3c <HAL_PCD_DataOutStageCallback>
 8001492:	e005      	b.n	80014a0 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800149a:	4618      	mov	r0, r3
 800149c:	f002 f928 	bl	80036f0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80014a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80014a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 8123 	beq.w	80016f4 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80014ae:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	3310      	adds	r3, #16
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80014d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80014dc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	441a      	add	r2, r3
 80014ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80014f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80014fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001500:	78db      	ldrb	r3, [r3, #3]
 8001502:	2b01      	cmp	r3, #1
 8001504:	f040 80a2 	bne.w	800164c <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800150a:	2200      	movs	r2, #0
 800150c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800150e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001510:	7b1b      	ldrb	r3, [r3, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 8093 	beq.w	800163e <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001518:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800151c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001520:	2b00      	cmp	r3, #0
 8001522:	d046      	beq.n	80015b2 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001526:	785b      	ldrb	r3, [r3, #1]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d126      	bne.n	800157a <PCD_EP_ISR_Handler+0x608>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800153a:	b29b      	uxth	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001540:	4413      	add	r3, r2
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
 8001544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	011a      	lsls	r2, r3, #4
 800154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154c:	4413      	add	r3, r2
 800154e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001552:	623b      	str	r3, [r7, #32]
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	b29b      	uxth	r3, r3
 800155a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800155e:	b29a      	uxth	r2, r3
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	801a      	strh	r2, [r3, #0]
 8001564:	6a3b      	ldr	r3, [r7, #32]
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	b29b      	uxth	r3, r3
 800156a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800156e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001572:	b29a      	uxth	r2, r3
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	801a      	strh	r2, [r3, #0]
 8001578:	e061      	b.n	800163e <PCD_EP_ISR_Handler+0x6cc>
 800157a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800157c:	785b      	ldrb	r3, [r3, #1]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d15d      	bne.n	800163e <PCD_EP_ISR_Handler+0x6cc>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001590:	b29b      	uxth	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001596:	4413      	add	r3, r2
 8001598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800159a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	011a      	lsls	r2, r3, #4
 80015a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015a2:	4413      	add	r3, r2
 80015a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80015a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ac:	2200      	movs	r2, #0
 80015ae:	801a      	strh	r2, [r3, #0]
 80015b0:	e045      	b.n	800163e <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015ba:	785b      	ldrb	r3, [r3, #1]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d126      	bne.n	800160e <PCD_EP_ISR_Handler+0x69c>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015d4:	4413      	add	r3, r2
 80015d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80015d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	011a      	lsls	r2, r3, #4
 80015de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015e0:	4413      	add	r3, r2
 80015e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80015e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80015e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015f6:	801a      	strh	r2, [r3, #0]
 80015f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001606:	b29a      	uxth	r2, r3
 8001608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800160a:	801a      	strh	r2, [r3, #0]
 800160c:	e017      	b.n	800163e <PCD_EP_ISR_Handler+0x6cc>
 800160e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001610:	785b      	ldrb	r3, [r3, #1]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d113      	bne.n	800163e <PCD_EP_ISR_Handler+0x6cc>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800161e:	b29b      	uxth	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001624:	4413      	add	r3, r2
 8001626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	011a      	lsls	r2, r3, #4
 800162e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001630:	4413      	add	r3, r2
 8001632:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001636:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800163a:	2200      	movs	r2, #0
 800163c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800163e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	4619      	mov	r1, r3
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f005 fb94 	bl	8006d72 <HAL_PCD_DataInStageCallback>
 800164a:	e053      	b.n	80016f4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800164c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d146      	bne.n	80016e6 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001660:	b29b      	uxth	r3, r3
 8001662:	461a      	mov	r2, r3
 8001664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4413      	add	r3, r2
 800166c:	3302      	adds	r3, #2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	4413      	add	r3, r2
 8001676:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001680:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001686:	699a      	ldr	r2, [r3, #24]
 8001688:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800168c:	429a      	cmp	r2, r3
 800168e:	d907      	bls.n	80016a0 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001692:	699a      	ldr	r2, [r3, #24]
 8001694:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001698:	1ad2      	subs	r2, r2, r3
 800169a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800169c:	619a      	str	r2, [r3, #24]
 800169e:	e002      	b.n	80016a6 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80016a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80016a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d106      	bne.n	80016bc <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80016ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	4619      	mov	r1, r3
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f005 fb5c 	bl	8006d72 <HAL_PCD_DataInStageCallback>
 80016ba:	e01b      	b.n	80016f4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80016bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016be:	695a      	ldr	r2, [r3, #20]
 80016c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80016c4:	441a      	add	r2, r3
 80016c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016c8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80016ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016cc:	69da      	ldr	r2, [r3, #28]
 80016ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80016d2:	441a      	add	r2, r3
 80016d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016d6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 f806 	bl	80036f0 <USB_EPStartXfer>
 80016e4:	e006      	b.n	80016f4 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80016e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80016ea:	461a      	mov	r2, r3
 80016ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f91b 	bl	800192a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	b21b      	sxth	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	f6ff ac3b 	blt.w	8000f7c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3758      	adds	r7, #88	@ 0x58
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	4613      	mov	r3, r2
 800171c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d07e      	beq.n	8001826 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001730:	b29b      	uxth	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	3302      	adds	r3, #2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	4413      	add	r3, r2
 8001746:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001750:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	699a      	ldr	r2, [r3, #24]
 8001756:	8b7b      	ldrh	r3, [r7, #26]
 8001758:	429a      	cmp	r2, r3
 800175a:	d306      	bcc.n	800176a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	699a      	ldr	r2, [r3, #24]
 8001760:	8b7b      	ldrh	r3, [r7, #26]
 8001762:	1ad2      	subs	r2, r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	619a      	str	r2, [r3, #24]
 8001768:	e002      	b.n	8001770 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d123      	bne.n	80017c0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800178e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001792:	833b      	strh	r3, [r7, #24]
 8001794:	8b3b      	ldrh	r3, [r7, #24]
 8001796:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800179a:	833b      	strh	r3, [r7, #24]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	441a      	add	r2, r3
 80017aa:	8b3b      	ldrh	r3, [r7, #24]
 80017ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80017b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80017b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017bc:	b29b      	uxth	r3, r3
 80017be:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d01f      	beq.n	800180a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80017e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017e4:	82fb      	strh	r3, [r7, #22]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	441a      	add	r2, r3
 80017f4:	8afb      	ldrh	r3, [r7, #22]
 80017f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80017fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80017fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001802:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001806:	b29b      	uxth	r3, r3
 8001808:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800180a:	8b7b      	ldrh	r3, [r7, #26]
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 8087 	beq.w	8001920 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	6959      	ldr	r1, [r3, #20]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	891a      	ldrh	r2, [r3, #8]
 800181e:	8b7b      	ldrh	r3, [r7, #26]
 8001820:	f003 fc9b 	bl	800515a <USB_ReadPMA>
 8001824:	e07c      	b.n	8001920 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800182e:	b29b      	uxth	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4413      	add	r3, r2
 800183a:	3306      	adds	r3, #6
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	4413      	add	r3, r2
 8001844:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800184e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	699a      	ldr	r2, [r3, #24]
 8001854:	8b7b      	ldrh	r3, [r7, #26]
 8001856:	429a      	cmp	r2, r3
 8001858:	d306      	bcc.n	8001868 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	699a      	ldr	r2, [r3, #24]
 800185e:	8b7b      	ldrh	r3, [r7, #26]
 8001860:	1ad2      	subs	r2, r2, r3
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	619a      	str	r2, [r3, #24]
 8001866:	e002      	b.n	800186e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d123      	bne.n	80018be <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	b29b      	uxth	r3, r3
 8001888:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800188c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001890:	83fb      	strh	r3, [r7, #30]
 8001892:	8bfb      	ldrh	r3, [r7, #30]
 8001894:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001898:	83fb      	strh	r3, [r7, #30]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	441a      	add	r2, r3
 80018a8:	8bfb      	ldrh	r3, [r7, #30]
 80018aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80018ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80018b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d11f      	bne.n	8001908 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80018de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018e2:	83bb      	strh	r3, [r7, #28]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	441a      	add	r2, r3
 80018f2:	8bbb      	ldrh	r3, [r7, #28]
 80018f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80018f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80018fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001900:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001904:	b29b      	uxth	r3, r3
 8001906:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001908:	8b7b      	ldrh	r3, [r7, #26]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d008      	beq.n	8001920 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	6959      	ldr	r1, [r3, #20]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	895a      	ldrh	r2, [r3, #10]
 800191a:	8b7b      	ldrh	r3, [r7, #26]
 800191c:	f003 fc1d 	bl	800515a <USB_ReadPMA>
    }
  }

  return count;
 8001920:	8b7b      	ldrh	r3, [r7, #26]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3720      	adds	r7, #32
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b0a4      	sub	sp, #144	@ 0x90
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	4613      	mov	r3, r2
 8001936:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 81dd 	beq.w	8001cfe <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800194c:	b29b      	uxth	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4413      	add	r3, r2
 8001958:	3302      	adds	r3, #2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	4413      	add	r3, r2
 8001962:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800196c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	699a      	ldr	r2, [r3, #24]
 8001974:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001978:	429a      	cmp	r2, r3
 800197a:	d907      	bls.n	800198c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	699a      	ldr	r2, [r3, #24]
 8001980:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001984:	1ad2      	subs	r2, r2, r3
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	619a      	str	r2, [r3, #24]
 800198a:	e002      	b.n	8001992 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	2200      	movs	r2, #0
 8001990:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 80b9 	bne.w	8001b0e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	785b      	ldrb	r3, [r3, #1]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d126      	bne.n	80019f2 <HAL_PCD_EP_DB_Transmit+0xc8>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b8:	4413      	add	r3, r2
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	011a      	lsls	r2, r3, #4
 80019c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c4:	4413      	add	r3, r2
 80019c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80019ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019da:	801a      	strh	r2, [r3, #0]
 80019dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ee:	801a      	strh	r2, [r3, #0]
 80019f0:	e01a      	b.n	8001a28 <HAL_PCD_EP_DB_Transmit+0xfe>
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	785b      	ldrb	r3, [r3, #1]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d116      	bne.n	8001a28 <HAL_PCD_EP_DB_Transmit+0xfe>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a0e:	4413      	add	r3, r2
 8001a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	011a      	lsls	r2, r3, #4
 8001a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a24:	2200      	movs	r2, #0
 8001a26:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	785b      	ldrb	r3, [r3, #1]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d126      	bne.n	8001a84 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	011a      	lsls	r2, r3, #4
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	4413      	add	r3, r2
 8001a58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	801a      	strh	r2, [r3, #0]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	801a      	strh	r2, [r3, #0]
 8001a82:	e017      	b.n	8001ab4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	785b      	ldrb	r3, [r3, #1]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d113      	bne.n	8001ab4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	4413      	add	r3, r2
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	011a      	lsls	r2, r3, #4
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001aac:	623b      	str	r3, [r7, #32]
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f005 f959 	bl	8006d72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 82fc 	beq.w	80020c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ae6:	82fb      	strh	r3, [r7, #22]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	441a      	add	r2, r3
 8001af6:	8afb      	ldrh	r3, [r7, #22]
 8001af8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001afc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	8013      	strh	r3, [r2, #0]
 8001b0c:	e2da      	b.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d021      	beq.n	8001b5c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b32:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	441a      	add	r2, r3
 8001b44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8001b48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	f040 82ae 	bne.w	80020c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001b70:	441a      	add	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	69da      	ldr	r2, [r3, #28]
 8001b7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001b7e:	441a      	add	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	6a1a      	ldr	r2, [r3, #32]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d30b      	bcc.n	8001ba8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	6a1a      	ldr	r2, [r3, #32]
 8001b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ba0:	1ad2      	subs	r2, r2, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	621a      	str	r2, [r3, #32]
 8001ba6:	e017      	b.n	8001bd8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d108      	bne.n	8001bc2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8001bb0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001bb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001bc0:	e00a      	b.n	8001bd8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	785b      	ldrb	r3, [r3, #1]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d165      	bne.n	8001cac <HAL_PCD_EP_DB_Transmit+0x382>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bf4:	4413      	add	r3, r2
 8001bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	011a      	lsls	r2, r3, #4
 8001bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c00:	4413      	add	r3, r2
 8001c02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c16:	801a      	strh	r2, [r3, #0]
 8001c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c1e:	d91d      	bls.n	8001c5c <HAL_PCD_EP_DB_Transmit+0x332>
 8001c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c24:	095b      	lsrs	r3, r3, #5
 8001c26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <HAL_PCD_EP_DB_Transmit+0x310>
 8001c34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c36:	3b01      	subs	r3, #1
 8001c38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	029b      	lsls	r3, r3, #10
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c58:	801a      	strh	r2, [r3, #0]
 8001c5a:	e044      	b.n	8001ce6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10a      	bne.n	8001c7a <HAL_PCD_EP_DB_Transmit+0x350>
 8001c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c76:	801a      	strh	r2, [r3, #0]
 8001c78:	e035      	b.n	8001ce6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c7e:	085b      	lsrs	r3, r3, #1
 8001c80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HAL_PCD_EP_DB_Transmit+0x36a>
 8001c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c90:	3301      	adds	r3, #1
 8001c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	029b      	lsls	r3, r3, #10
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ca8:	801a      	strh	r2, [r3, #0]
 8001caa:	e01c      	b.n	8001ce6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	785b      	ldrb	r3, [r3, #1]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d118      	bne.n	8001ce6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cc8:	4413      	add	r3, r2
 8001cca:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	011a      	lsls	r2, r3, #4
 8001cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001cda:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ce4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	6959      	ldr	r1, [r3, #20]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	891a      	ldrh	r2, [r3, #8]
 8001cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	f003 f9e9 	bl	80050ce <USB_WritePMA>
 8001cfc:	e1e2      	b.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4413      	add	r3, r2
 8001d12:	3306      	adds	r3, #6
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d26:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d307      	bcc.n	8001d46 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001d3e:	1ad2      	subs	r2, r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	619a      	str	r2, [r3, #24]
 8001d44:	e002      	b.n	8001d4c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f040 80c0 	bne.w	8001ed6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	785b      	ldrb	r3, [r3, #1]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d126      	bne.n	8001dac <HAL_PCD_EP_DB_Transmit+0x482>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d72:	4413      	add	r3, r2
 8001d74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	011a      	lsls	r2, r3, #4
 8001d7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d7e:	4413      	add	r3, r2
 8001d80:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d94:	801a      	strh	r2, [r3, #0]
 8001d96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001da8:	801a      	strh	r2, [r3, #0]
 8001daa:	e01a      	b.n	8001de2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	785b      	ldrb	r3, [r3, #1]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d116      	bne.n	8001de2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	667b      	str	r3, [r7, #100]	@ 0x64
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001dc8:	4413      	add	r3, r2
 8001dca:	667b      	str	r3, [r7, #100]	@ 0x64
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	011a      	lsls	r2, r3, #4
 8001dd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001dda:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ddc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dde:	2200      	movs	r2, #0
 8001de0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	677b      	str	r3, [r7, #116]	@ 0x74
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	785b      	ldrb	r3, [r3, #1]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d12b      	bne.n	8001e48 <HAL_PCD_EP_DB_Transmit+0x51e>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e04:	4413      	add	r3, r2
 8001e06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	011a      	lsls	r2, r3, #4
 8001e0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e10:	4413      	add	r3, r2
 8001e12:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001e1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e2c:	801a      	strh	r2, [r3, #0]
 8001e2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e44:	801a      	strh	r2, [r3, #0]
 8001e46:	e017      	b.n	8001e78 <HAL_PCD_EP_DB_Transmit+0x54e>
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	785b      	ldrb	r3, [r3, #1]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d113      	bne.n	8001e78 <HAL_PCD_EP_DB_Transmit+0x54e>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e5e:	4413      	add	r3, r2
 8001e60:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	011a      	lsls	r2, r3, #4
 8001e68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e70:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e74:	2200      	movs	r2, #0
 8001e76:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f004 ff77 	bl	8006d72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 811a 	bne.w	80020c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eaa:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	441a      	add	r2, r3
 8001ebc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8001ec0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ec4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ec8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	8013      	strh	r3, [r2, #0]
 8001ed4:	e0f6      	b.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d121      	bne.n	8001f24 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001efa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	441a      	add	r2, r3
 8001f0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001f10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	f040 80ca 	bne.w	80020c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001f38:	441a      	add	r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	69da      	ldr	r2, [r3, #28]
 8001f42:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001f46:	441a      	add	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	6a1a      	ldr	r2, [r3, #32]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d30b      	bcc.n	8001f70 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	6a1a      	ldr	r2, [r3, #32]
 8001f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f68:	1ad2      	subs	r2, r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	621a      	str	r2, [r3, #32]
 8001f6e:	e017      	b.n	8001fa0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d108      	bne.n	8001f8a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8001f78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001f7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001f88:	e00a      	b.n	8001fa0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2200      	movs	r2, #0
 8001f96:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	785b      	ldrb	r3, [r3, #1]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d165      	bne.n	800207a <HAL_PCD_EP_DB_Transmit+0x750>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fc2:	4413      	add	r3, r2
 8001fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	011a      	lsls	r2, r3, #4
 8001fcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fce:	4413      	add	r3, r2
 8001fd0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001fd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001fd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fe4:	801a      	strh	r2, [r3, #0]
 8001fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fea:	2b3e      	cmp	r3, #62	@ 0x3e
 8001fec:	d91d      	bls.n	800202a <HAL_PCD_EP_DB_Transmit+0x700>
 8001fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d102      	bne.n	8002008 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002002:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002004:	3b01      	subs	r3, #1
 8002006:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002008:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	b29a      	uxth	r2, r3
 800200e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002010:	b29b      	uxth	r3, r3
 8002012:	029b      	lsls	r3, r3, #10
 8002014:	b29b      	uxth	r3, r3
 8002016:	4313      	orrs	r3, r2
 8002018:	b29b      	uxth	r3, r3
 800201a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800201e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002022:	b29a      	uxth	r2, r3
 8002024:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002026:	801a      	strh	r2, [r3, #0]
 8002028:	e041      	b.n	80020ae <HAL_PCD_EP_DB_Transmit+0x784>
 800202a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10a      	bne.n	8002048 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002032:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800203c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002040:	b29a      	uxth	r2, r3
 8002042:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002044:	801a      	strh	r2, [r3, #0]
 8002046:	e032      	b.n	80020ae <HAL_PCD_EP_DB_Transmit+0x784>
 8002048:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800204c:	085b      	lsrs	r3, r3, #1
 800204e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002050:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <HAL_PCD_EP_DB_Transmit+0x738>
 800205c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800205e:	3301      	adds	r3, #1
 8002060:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002062:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	b29a      	uxth	r2, r3
 8002068:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800206a:	b29b      	uxth	r3, r3
 800206c:	029b      	lsls	r3, r3, #10
 800206e:	b29b      	uxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b29a      	uxth	r2, r3
 8002074:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002076:	801a      	strh	r2, [r3, #0]
 8002078:	e019      	b.n	80020ae <HAL_PCD_EP_DB_Transmit+0x784>
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	785b      	ldrb	r3, [r3, #1]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d115      	bne.n	80020ae <HAL_PCD_EP_DB_Transmit+0x784>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800208a:	b29b      	uxth	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002090:	4413      	add	r3, r2
 8002092:	657b      	str	r3, [r7, #84]	@ 0x54
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	011a      	lsls	r2, r3, #4
 800209a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800209c:	4413      	add	r3, r2
 800209e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80020a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80020a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020ac:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	6959      	ldr	r1, [r3, #20]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	895a      	ldrh	r2, [r3, #10]
 80020ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020be:	b29b      	uxth	r3, r3
 80020c0:	f003 f805 	bl	80050ce <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80020da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020de:	82bb      	strh	r3, [r7, #20]
 80020e0:	8abb      	ldrh	r3, [r7, #20]
 80020e2:	f083 0310 	eor.w	r3, r3, #16
 80020e6:	82bb      	strh	r3, [r7, #20]
 80020e8:	8abb      	ldrh	r3, [r7, #20]
 80020ea:	f083 0320 	eor.w	r3, r3, #32
 80020ee:	82bb      	strh	r3, [r7, #20]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	441a      	add	r2, r3
 80020fe:	8abb      	ldrh	r3, [r7, #20]
 8002100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800210c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002110:	b29b      	uxth	r3, r3
 8002112:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3790      	adds	r7, #144	@ 0x90
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800211e:	b480      	push	{r7}
 8002120:	b087      	sub	sp, #28
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	817b      	strh	r3, [r7, #10]
 800212c:	4613      	mov	r3, r2
 800212e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002130:	897b      	ldrh	r3, [r7, #10]
 8002132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002136:	b29b      	uxth	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00b      	beq.n	8002154 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800213c:	897b      	ldrh	r3, [r7, #10]
 800213e:	f003 0207 	and.w	r2, r3, #7
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	3310      	adds	r3, #16
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4413      	add	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	e009      	b.n	8002168 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002154:	897a      	ldrh	r2, [r7, #10]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4413      	add	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002168:	893b      	ldrh	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d107      	bne.n	800217e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2200      	movs	r2, #0
 8002172:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	b29a      	uxth	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	80da      	strh	r2, [r3, #6]
 800217c:	e00b      	b.n	8002196 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2201      	movs	r2, #1
 8002182:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	b29a      	uxth	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	0c1b      	lsrs	r3, r3, #16
 8002190:	b29a      	uxth	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	371c      	adds	r7, #28
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
	...

080021a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e272      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8087 	beq.w	80022d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c4:	4b92      	ldr	r3, [pc, #584]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d00c      	beq.n	80021ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021d0:	4b8f      	ldr	r3, [pc, #572]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d112      	bne.n	8002202 <HAL_RCC_OscConfig+0x5e>
 80021dc:	4b8c      	ldr	r3, [pc, #560]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e8:	d10b      	bne.n	8002202 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ea:	4b89      	ldr	r3, [pc, #548]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d06c      	beq.n	80022d0 <HAL_RCC_OscConfig+0x12c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d168      	bne.n	80022d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e24c      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x76>
 800220c:	4b80      	ldr	r3, [pc, #512]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a7f      	ldr	r2, [pc, #508]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	e02e      	b.n	8002278 <HAL_RCC_OscConfig+0xd4>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x98>
 8002222:	4b7b      	ldr	r3, [pc, #492]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a7a      	ldr	r2, [pc, #488]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b78      	ldr	r3, [pc, #480]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a77      	ldr	r2, [pc, #476]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002234:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e01d      	b.n	8002278 <HAL_RCC_OscConfig+0xd4>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0xbc>
 8002246:	4b72      	ldr	r3, [pc, #456]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a71      	ldr	r2, [pc, #452]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800224c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b6f      	ldr	r3, [pc, #444]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a6e      	ldr	r2, [pc, #440]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0xd4>
 8002260:	4b6b      	ldr	r3, [pc, #428]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a6a      	ldr	r2, [pc, #424]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b68      	ldr	r3, [pc, #416]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a67      	ldr	r2, [pc, #412]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002272:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002276:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d013      	beq.n	80022a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7fe f8f4 	bl	800046c <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7fe f8f0 	bl	800046c <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	@ 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e200      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	4b5d      	ldr	r3, [pc, #372]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0xe4>
 80022a6:	e014      	b.n	80022d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7fe f8e0 	bl	800046c <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7fe f8dc 	bl	800046c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	@ 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e1ec      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	4b53      	ldr	r3, [pc, #332]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x10c>
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d063      	beq.n	80023a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022de:	4b4c      	ldr	r3, [pc, #304]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00b      	beq.n	8002302 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ea:	4b49      	ldr	r3, [pc, #292]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d11c      	bne.n	8002330 <HAL_RCC_OscConfig+0x18c>
 80022f6:	4b46      	ldr	r3, [pc, #280]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d116      	bne.n	8002330 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002302:	4b43      	ldr	r3, [pc, #268]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <HAL_RCC_OscConfig+0x176>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d001      	beq.n	800231a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e1c0      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231a:	4b3d      	ldr	r3, [pc, #244]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4939      	ldr	r1, [pc, #228]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232e:	e03a      	b.n	80023a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d020      	beq.n	800237a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002338:	4b36      	ldr	r3, [pc, #216]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7fe f895 	bl	800046c <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002346:	f7fe f891 	bl	800046c <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e1a1      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	4b2d      	ldr	r3, [pc, #180]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002364:	4b2a      	ldr	r3, [pc, #168]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4927      	ldr	r1, [pc, #156]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002374:	4313      	orrs	r3, r2
 8002376:	600b      	str	r3, [r1, #0]
 8002378:	e015      	b.n	80023a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800237a:	4b26      	ldr	r3, [pc, #152]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7fe f874 	bl	800046c <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002388:	f7fe f870 	bl	800046c <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e180      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	4b1d      	ldr	r3, [pc, #116]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d03a      	beq.n	8002428 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d019      	beq.n	80023ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ba:	4b17      	ldr	r3, [pc, #92]	@ (8002418 <HAL_RCC_OscConfig+0x274>)
 80023bc:	2201      	movs	r2, #1
 80023be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c0:	f7fe f854 	bl	800046c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c8:	f7fe f850 	bl	800046c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e160      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023e6:	2001      	movs	r0, #1
 80023e8:	f000 fa9c 	bl	8002924 <RCC_Delay>
 80023ec:	e01c      	b.n	8002428 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <HAL_RCC_OscConfig+0x274>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f4:	f7fe f83a 	bl	800046c <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fa:	e00f      	b.n	800241c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fc:	f7fe f836 	bl	800046c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d908      	bls.n	800241c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e146      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	42420000 	.word	0x42420000
 8002418:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241c:	4b92      	ldr	r3, [pc, #584]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1e9      	bne.n	80023fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80a6 	beq.w	8002582 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243a:	4b8b      	ldr	r3, [pc, #556]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10d      	bne.n	8002462 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002446:	4b88      	ldr	r3, [pc, #544]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4a87      	ldr	r2, [pc, #540]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002450:	61d3      	str	r3, [r2, #28]
 8002452:	4b85      	ldr	r3, [pc, #532]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245e:	2301      	movs	r3, #1
 8002460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002462:	4b82      	ldr	r3, [pc, #520]	@ (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d118      	bne.n	80024a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246e:	4b7f      	ldr	r3, [pc, #508]	@ (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a7e      	ldr	r2, [pc, #504]	@ (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247a:	f7fd fff7 	bl	800046c <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002482:	f7fd fff3 	bl	800046c <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b64      	cmp	r3, #100	@ 0x64
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e103      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	4b75      	ldr	r3, [pc, #468]	@ (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x312>
 80024a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6213      	str	r3, [r2, #32]
 80024b4:	e02d      	b.n	8002512 <HAL_RCC_OscConfig+0x36e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x334>
 80024be:	4b6a      	ldr	r3, [pc, #424]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4a69      	ldr	r2, [pc, #420]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	6213      	str	r3, [r2, #32]
 80024ca:	4b67      	ldr	r3, [pc, #412]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	4a66      	ldr	r2, [pc, #408]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f023 0304 	bic.w	r3, r3, #4
 80024d4:	6213      	str	r3, [r2, #32]
 80024d6:	e01c      	b.n	8002512 <HAL_RCC_OscConfig+0x36e>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d10c      	bne.n	80024fa <HAL_RCC_OscConfig+0x356>
 80024e0:	4b61      	ldr	r3, [pc, #388]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4a60      	ldr	r2, [pc, #384]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	6213      	str	r3, [r2, #32]
 80024ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4a5d      	ldr	r2, [pc, #372]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6213      	str	r3, [r2, #32]
 80024f8:	e00b      	b.n	8002512 <HAL_RCC_OscConfig+0x36e>
 80024fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4a5a      	ldr	r2, [pc, #360]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	f023 0301 	bic.w	r3, r3, #1
 8002504:	6213      	str	r3, [r2, #32]
 8002506:	4b58      	ldr	r3, [pc, #352]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4a57      	ldr	r2, [pc, #348]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	f023 0304 	bic.w	r3, r3, #4
 8002510:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d015      	beq.n	8002546 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7fd ffa7 	bl	800046c <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7fd ffa3 	bl	800046c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e0b1      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	4b4b      	ldr	r3, [pc, #300]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0ee      	beq.n	8002522 <HAL_RCC_OscConfig+0x37e>
 8002544:	e014      	b.n	8002570 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002546:	f7fd ff91 	bl	800046c <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7fd ff8d 	bl	800046c <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e09b      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	4b40      	ldr	r3, [pc, #256]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ee      	bne.n	800254e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002570:	7dfb      	ldrb	r3, [r7, #23]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d105      	bne.n	8002582 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002576:	4b3c      	ldr	r3, [pc, #240]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4a3b      	ldr	r2, [pc, #236]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002580:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8087 	beq.w	800269a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800258c:	4b36      	ldr	r3, [pc, #216]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d061      	beq.n	800265c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d146      	bne.n	800262e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a0:	4b33      	ldr	r3, [pc, #204]	@ (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7fd ff61 	bl	800046c <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ae:	f7fd ff5d 	bl	800046c <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e06d      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c0:	4b29      	ldr	r3, [pc, #164]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025d4:	d108      	bne.n	80025e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025d6:	4b24      	ldr	r3, [pc, #144]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	4921      	ldr	r1, [pc, #132]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a19      	ldr	r1, [r3, #32]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f8:	430b      	orrs	r3, r1
 80025fa:	491b      	ldr	r1, [pc, #108]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002600:	4b1b      	ldr	r3, [pc, #108]	@ (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7fd ff31 	bl	800046c <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260e:	f7fd ff2d 	bl	800046c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e03d      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002620:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x46a>
 800262c:	e035      	b.n	800269a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262e:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7fd ff1a 	bl	800046c <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263c:	f7fd ff16 	bl	800046c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e026      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264e:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x498>
 800265a:	e01e      	b.n	800269a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d107      	bne.n	8002674 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e019      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
 8002668:	40021000 	.word	0x40021000
 800266c:	40007000 	.word	0x40007000
 8002670:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002674:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <HAL_RCC_OscConfig+0x500>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	429a      	cmp	r2, r3
 8002686:	d106      	bne.n	8002696 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d001      	beq.n	800269a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000

080026a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0d0      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d910      	bls.n	80026ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b67      	ldr	r3, [pc, #412]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 0207 	bic.w	r2, r3, #7
 80026d2:	4965      	ldr	r1, [pc, #404]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b63      	ldr	r3, [pc, #396]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0b8      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002704:	4b59      	ldr	r3, [pc, #356]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a58      	ldr	r2, [pc, #352]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800270e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800271c:	4b53      	ldr	r3, [pc, #332]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a52      	ldr	r2, [pc, #328]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002726:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002728:	4b50      	ldr	r3, [pc, #320]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	494d      	ldr	r1, [pc, #308]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d040      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b47      	ldr	r3, [pc, #284]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d115      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e07f      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002766:	4b41      	ldr	r3, [pc, #260]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e073      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002776:	4b3d      	ldr	r3, [pc, #244]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e06b      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002786:	4b39      	ldr	r3, [pc, #228]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f023 0203 	bic.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4936      	ldr	r1, [pc, #216]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002798:	f7fd fe68 	bl	800046c <HAL_GetTick>
 800279c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f7fd fe64 	bl	800046c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e053      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	4b2d      	ldr	r3, [pc, #180]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 020c 	and.w	r2, r3, #12
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d1eb      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c8:	4b27      	ldr	r3, [pc, #156]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d210      	bcs.n	80027f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b24      	ldr	r3, [pc, #144]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 0207 	bic.w	r2, r3, #7
 80027de:	4922      	ldr	r1, [pc, #136]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b20      	ldr	r3, [pc, #128]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e032      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002804:	4b19      	ldr	r3, [pc, #100]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4916      	ldr	r1, [pc, #88]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002822:	4b12      	ldr	r3, [pc, #72]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	490e      	ldr	r1, [pc, #56]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002836:	f000 f821 	bl	800287c <HAL_RCC_GetSysClockFreq>
 800283a:	4602      	mov	r2, r0
 800283c:	4b0b      	ldr	r3, [pc, #44]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	490a      	ldr	r1, [pc, #40]	@ (8002870 <HAL_RCC_ClockConfig+0x1c8>)
 8002848:	5ccb      	ldrb	r3, [r1, r3]
 800284a:	fa22 f303 	lsr.w	r3, r2, r3
 800284e:	4a09      	ldr	r2, [pc, #36]	@ (8002874 <HAL_RCC_ClockConfig+0x1cc>)
 8002850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002852:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HAL_RCC_ClockConfig+0x1d0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fd fdc6 	bl	80003e8 <HAL_InitTick>

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40022000 	.word	0x40022000
 800286c:	40021000 	.word	0x40021000
 8002870:	08007300 	.word	0x08007300
 8002874:	2000001c 	.word	0x2000001c
 8002878:	20000020 	.word	0x20000020

0800287c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002896:	4b1e      	ldr	r3, [pc, #120]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x94>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d002      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x30>
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d003      	beq.n	80028b2 <HAL_RCC_GetSysClockFreq+0x36>
 80028aa:	e027      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028ac:	4b19      	ldr	r3, [pc, #100]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ae:	613b      	str	r3, [r7, #16]
      break;
 80028b0:	e027      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	0c9b      	lsrs	r3, r3, #18
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	4a17      	ldr	r2, [pc, #92]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028bc:	5cd3      	ldrb	r3, [r2, r3]
 80028be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d010      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028ca:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x94>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	0c5b      	lsrs	r3, r3, #17
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	4a11      	ldr	r2, [pc, #68]	@ (800291c <HAL_RCC_GetSysClockFreq+0xa0>)
 80028d6:	5cd3      	ldrb	r3, [r2, r3]
 80028d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x98>)
 80028de:	fb03 f202 	mul.w	r2, r3, r2
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	e004      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002920 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028f0:	fb02 f303 	mul.w	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	613b      	str	r3, [r7, #16]
      break;
 80028fa:	e002      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028fc:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x98>)
 80028fe:	613b      	str	r3, [r7, #16]
      break;
 8002900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002902:	693b      	ldr	r3, [r7, #16]
}
 8002904:	4618      	mov	r0, r3
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000
 8002914:	007a1200 	.word	0x007a1200
 8002918:	08007310 	.word	0x08007310
 800291c:	08007320 	.word	0x08007320
 8002920:	003d0900 	.word	0x003d0900

08002924 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800292c:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <RCC_Delay+0x34>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0a      	ldr	r2, [pc, #40]	@ (800295c <RCC_Delay+0x38>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0a5b      	lsrs	r3, r3, #9
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002940:	bf00      	nop
  }
  while (Delay --);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1e5a      	subs	r2, r3, #1
 8002946:	60fa      	str	r2, [r7, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f9      	bne.n	8002940 <RCC_Delay+0x1c>
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	2000001c 	.word	0x2000001c
 800295c:	10624dd3 	.word	0x10624dd3

08002960 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d07d      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800297c:	2300      	movs	r3, #0
 800297e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002980:	4b4f      	ldr	r3, [pc, #316]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10d      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	4a4b      	ldr	r2, [pc, #300]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002996:	61d3      	str	r3, [r2, #28]
 8002998:	4b49      	ldr	r3, [pc, #292]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a4:	2301      	movs	r3, #1
 80029a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a8:	4b46      	ldr	r3, [pc, #280]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d118      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b4:	4b43      	ldr	r3, [pc, #268]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a42      	ldr	r2, [pc, #264]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c0:	f7fd fd54 	bl	800046c <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c6:	e008      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c8:	f7fd fd50 	bl	800046c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	@ 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e06d      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029da:	4b3a      	ldr	r3, [pc, #232]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029e6:	4b36      	ldr	r3, [pc, #216]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d02e      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d027      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a14:	4b2c      	ldr	r3, [pc, #176]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a1a:	4a29      	ldr	r2, [pc, #164]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d014      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fd fd1f 	bl	800046c <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a30:	e00a      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7fd fd1b 	bl	800046c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e036      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a48:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ee      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a54:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4917      	ldr	r1, [pc, #92]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a66:	7dfb      	ldrb	r3, [r7, #23]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6c:	4b14      	ldr	r3, [pc, #80]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	4a13      	ldr	r2, [pc, #76]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a84:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	490b      	ldr	r1, [pc, #44]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002aa2:	4b07      	ldr	r3, [pc, #28]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	4904      	ldr	r1, [pc, #16]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40007000 	.word	0x40007000
 8002ac8:	42420440 	.word	0x42420440

08002acc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	4638      	mov	r0, r7
 8002ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b085      	sub	sp, #20
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002af6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8002afa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b085      	sub	sp, #20
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b1a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8002b1e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	4013      	ands	r3, r2
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b085      	sub	sp, #20
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	4638      	mov	r0, r7
 8002b68:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b09d      	sub	sp, #116	@ 0x74
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8002bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bbe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	78db      	ldrb	r3, [r3, #3]
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d81f      	bhi.n	8002c0a <USB_ActivateEndpoint+0x72>
 8002bca:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd0 <USB_ActivateEndpoint+0x38>)
 8002bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd0:	08002be1 	.word	0x08002be1
 8002bd4:	08002bfd 	.word	0x08002bfd
 8002bd8:	08002c13 	.word	0x08002c13
 8002bdc:	08002bef 	.word	0x08002bef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002be0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002be4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002be8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8002bec:	e012      	b.n	8002c14 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002bee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002bf2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8002bf6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8002bfa:	e00b      	b.n	8002c14 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002bfc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002c00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8002c08:	e004      	b.n	8002c14 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8002c10:	e000      	b.n	8002c14 <USB_ActivateEndpoint+0x7c>
      break;
 8002c12:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	441a      	add	r2, r3
 8002c1e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002c22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	7812      	ldrb	r2, [r2, #0]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	441a      	add	r2, r3
 8002c62:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002c66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	7b1b      	ldrb	r3, [r3, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 8178 	bne.w	8002f74 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	785b      	ldrb	r3, [r3, #1]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8084 	beq.w	8002d96 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	011a      	lsls	r2, r3, #4
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	88db      	ldrh	r3, [r3, #6]
 8002cb6:	085b      	lsrs	r3, r3, #1
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	827b      	strh	r3, [r7, #18]
 8002cd0:	8a7b      	ldrh	r3, [r7, #18]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d01b      	beq.n	8002d12 <USB_ActivateEndpoint+0x17a>
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cf0:	823b      	strh	r3, [r7, #16]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	441a      	add	r2, r3
 8002cfc:	8a3b      	ldrh	r3, [r7, #16]
 8002cfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	78db      	ldrb	r3, [r3, #3]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d020      	beq.n	8002d5c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d30:	81bb      	strh	r3, [r7, #12]
 8002d32:	89bb      	ldrh	r3, [r7, #12]
 8002d34:	f083 0320 	eor.w	r3, r3, #32
 8002d38:	81bb      	strh	r3, [r7, #12]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	441a      	add	r2, r3
 8002d44:	89bb      	ldrh	r3, [r7, #12]
 8002d46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	8013      	strh	r3, [r2, #0]
 8002d5a:	e2d5      	b.n	8003308 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d72:	81fb      	strh	r3, [r7, #14]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	441a      	add	r2, r3
 8002d7e:	89fb      	ldrh	r3, [r7, #14]
 8002d80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	8013      	strh	r3, [r2, #0]
 8002d94:	e2b8      	b.n	8003308 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da6:	4413      	add	r3, r2
 8002da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	011a      	lsls	r2, r3, #4
 8002db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	88db      	ldrh	r3, [r3, #6]
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dda:	4413      	add	r3, r2
 8002ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	011a      	lsls	r2, r3, #4
 8002de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de6:	4413      	add	r3, r2
 8002de8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	801a      	strh	r2, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e04:	d91d      	bls.n	8002e42 <USB_ActivateEndpoint+0x2aa>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <USB_ActivateEndpoint+0x288>
 8002e1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	029b      	lsls	r3, r3, #10
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	801a      	strh	r2, [r3, #0]
 8002e40:	e026      	b.n	8002e90 <USB_ActivateEndpoint+0x2f8>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10a      	bne.n	8002e60 <USB_ActivateEndpoint+0x2c8>
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	801a      	strh	r2, [r3, #0]
 8002e5e:	e017      	b.n	8002e90 <USB_ActivateEndpoint+0x2f8>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	085b      	lsrs	r3, r3, #1
 8002e66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <USB_ActivateEndpoint+0x2e2>
 8002e74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e76:	3301      	adds	r3, #1
 8002e78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	029b      	lsls	r3, r3, #10
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002e9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01b      	beq.n	8002ee0 <USB_ActivateEndpoint+0x348>
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ebe:	843b      	strh	r3, [r7, #32]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	441a      	add	r2, r3
 8002eca:	8c3b      	ldrh	r3, [r7, #32]
 8002ecc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ed0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ed4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d124      	bne.n	8002f32 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002efe:	83bb      	strh	r3, [r7, #28]
 8002f00:	8bbb      	ldrh	r3, [r7, #28]
 8002f02:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002f06:	83bb      	strh	r3, [r7, #28]
 8002f08:	8bbb      	ldrh	r3, [r7, #28]
 8002f0a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002f0e:	83bb      	strh	r3, [r7, #28]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	441a      	add	r2, r3
 8002f1a:	8bbb      	ldrh	r3, [r7, #28]
 8002f1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	8013      	strh	r3, [r2, #0]
 8002f30:	e1ea      	b.n	8003308 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f48:	83fb      	strh	r3, [r7, #30]
 8002f4a:	8bfb      	ldrh	r3, [r7, #30]
 8002f4c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002f50:	83fb      	strh	r3, [r7, #30]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	441a      	add	r2, r3
 8002f5c:	8bfb      	ldrh	r3, [r7, #30]
 8002f5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	8013      	strh	r3, [r2, #0]
 8002f72:	e1c9      	b.n	8003308 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	78db      	ldrb	r3, [r3, #3]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d11e      	bne.n	8002fba <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f92:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	441a      	add	r2, r3
 8002fa0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8002fa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fac:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	8013      	strh	r3, [r2, #0]
 8002fb8:	e01d      	b.n	8002ff6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8002fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fd0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	441a      	add	r2, r3
 8002fde:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003000:	b29b      	uxth	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003006:	4413      	add	r3, r2
 8003008:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	011a      	lsls	r2, r3, #4
 8003010:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003012:	4413      	add	r3, r2
 8003014:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003018:	65bb      	str	r3, [r7, #88]	@ 0x58
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	891b      	ldrh	r3, [r3, #8]
 800301e:	085b      	lsrs	r3, r3, #1
 8003020:	b29b      	uxth	r3, r3
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003028:	801a      	strh	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	657b      	str	r3, [r7, #84]	@ 0x54
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003034:	b29b      	uxth	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303a:	4413      	add	r3, r2
 800303c:	657b      	str	r3, [r7, #84]	@ 0x54
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	011a      	lsls	r2, r3, #4
 8003044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003046:	4413      	add	r3, r2
 8003048:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800304c:	653b      	str	r3, [r7, #80]	@ 0x50
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	895b      	ldrh	r3, [r3, #10]
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	b29b      	uxth	r3, r3
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800305c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	785b      	ldrb	r3, [r3, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f040 8093 	bne.w	800318e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8003078:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800307c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01b      	beq.n	80030bc <USB_ActivateEndpoint+0x524>
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800309a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	441a      	add	r2, r3
 80030a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80030a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80030ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80030cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01b      	beq.n	800310c <USB_ActivateEndpoint+0x574>
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ea:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	441a      	add	r2, r3
 80030f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80030f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003100:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003104:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003108:	b29b      	uxth	r3, r3
 800310a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	b29b      	uxth	r3, r3
 800311a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800311e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003122:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003124:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003126:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800312a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800312c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800312e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003132:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	441a      	add	r2, r3
 800313e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003140:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003144:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003148:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800314c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003150:	b29b      	uxth	r3, r3
 8003152:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003166:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800316a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	441a      	add	r2, r3
 8003176:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003178:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800317c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003180:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003188:	b29b      	uxth	r3, r3
 800318a:	8013      	strh	r3, [r2, #0]
 800318c:	e0bc      	b.n	8003308 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800319e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80031a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d01d      	beq.n	80031e6 <USB_ActivateEndpoint+0x64e>
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031c0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	441a      	add	r2, r3
 80031ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80031d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80031f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d01d      	beq.n	800323e <USB_ActivateEndpoint+0x6a6>
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003218:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	441a      	add	r2, r3
 8003226:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800322a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800322e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003236:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800323a:	b29b      	uxth	r3, r3
 800323c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	78db      	ldrb	r3, [r3, #3]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d024      	beq.n	8003290 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800325c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003260:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003264:	f083 0320 	eor.w	r3, r3, #32
 8003268:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	441a      	add	r2, r3
 8003276:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800327a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800327e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800328a:	b29b      	uxth	r3, r3
 800328c:	8013      	strh	r3, [r2, #0]
 800328e:	e01d      	b.n	80032cc <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	b29b      	uxth	r3, r3
 800329e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032a6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	441a      	add	r2, r3
 80032b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80032b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	441a      	add	r2, r3
 80032f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80032f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003304:	b29b      	uxth	r3, r3
 8003306:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003308:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800330c:	4618      	mov	r0, r3
 800330e:	3774      	adds	r7, #116	@ 0x74
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop

08003318 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003318:	b480      	push	{r7}
 800331a:	b08d      	sub	sp, #52	@ 0x34
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	7b1b      	ldrb	r3, [r3, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f040 808e 	bne.w	8003448 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	785b      	ldrb	r3, [r3, #1]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d044      	beq.n	80033be <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	81bb      	strh	r3, [r7, #12]
 8003342:	89bb      	ldrh	r3, [r7, #12]
 8003344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01b      	beq.n	8003384 <USB_DeactivateEndpoint+0x6c>
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800335e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003362:	817b      	strh	r3, [r7, #10]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	441a      	add	r2, r3
 800336e:	897b      	ldrh	r3, [r7, #10]
 8003370:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003374:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800337c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003380:	b29b      	uxth	r3, r3
 8003382:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	b29b      	uxth	r3, r3
 8003392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003396:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800339a:	813b      	strh	r3, [r7, #8]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	441a      	add	r2, r3
 80033a6:	893b      	ldrh	r3, [r7, #8]
 80033a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	8013      	strh	r3, [r2, #0]
 80033bc:	e192      	b.n	80036e4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	827b      	strh	r3, [r7, #18]
 80033cc:	8a7b      	ldrh	r3, [r7, #18]
 80033ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d01b      	beq.n	800340e <USB_DeactivateEndpoint+0xf6>
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ec:	823b      	strh	r3, [r7, #16]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	441a      	add	r2, r3
 80033f8:	8a3b      	ldrh	r3, [r7, #16]
 80033fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003402:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800340a:	b29b      	uxth	r3, r3
 800340c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	b29b      	uxth	r3, r3
 800341c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003424:	81fb      	strh	r3, [r7, #14]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	441a      	add	r2, r3
 8003430:	89fb      	ldrh	r3, [r7, #14]
 8003432:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003436:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800343a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800343e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003442:	b29b      	uxth	r3, r3
 8003444:	8013      	strh	r3, [r2, #0]
 8003446:	e14d      	b.n	80036e4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	785b      	ldrb	r3, [r3, #1]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f040 80a5 	bne.w	800359c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	843b      	strh	r3, [r7, #32]
 8003460:	8c3b      	ldrh	r3, [r7, #32]
 8003462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01b      	beq.n	80034a2 <USB_DeactivateEndpoint+0x18a>
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800347c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003480:	83fb      	strh	r3, [r7, #30]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	441a      	add	r2, r3
 800348c:	8bfb      	ldrh	r3, [r7, #30]
 800348e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003492:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003496:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800349a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	83bb      	strh	r3, [r7, #28]
 80034b0:	8bbb      	ldrh	r3, [r7, #28]
 80034b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d01b      	beq.n	80034f2 <USB_DeactivateEndpoint+0x1da>
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d0:	837b      	strh	r3, [r7, #26]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	441a      	add	r2, r3
 80034dc:	8b7b      	ldrh	r3, [r7, #26]
 80034de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003508:	833b      	strh	r3, [r7, #24]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	441a      	add	r2, r3
 8003514:	8b3b      	ldrh	r3, [r7, #24]
 8003516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800351a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800351e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003522:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003526:	b29b      	uxth	r3, r3
 8003528:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800353c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003540:	82fb      	strh	r3, [r7, #22]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	441a      	add	r2, r3
 800354c:	8afb      	ldrh	r3, [r7, #22]
 800354e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003552:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003556:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800355a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800355e:	b29b      	uxth	r3, r3
 8003560:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	b29b      	uxth	r3, r3
 8003570:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003578:	82bb      	strh	r3, [r7, #20]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	441a      	add	r2, r3
 8003584:	8abb      	ldrh	r3, [r7, #20]
 8003586:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800358a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800358e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003596:	b29b      	uxth	r3, r3
 8003598:	8013      	strh	r3, [r2, #0]
 800359a:	e0a3      	b.n	80036e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80035aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80035ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d01b      	beq.n	80035ec <USB_DeactivateEndpoint+0x2d4>
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ca:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	441a      	add	r2, r3
 80035d6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80035d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80035fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80035fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003600:	2b00      	cmp	r3, #0
 8003602:	d01b      	beq.n	800363c <USB_DeactivateEndpoint+0x324>
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	b29b      	uxth	r3, r3
 8003612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800361a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	441a      	add	r2, r3
 8003626:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003628:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800362c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003630:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003634:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003638:	b29b      	uxth	r3, r3
 800363a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	b29b      	uxth	r3, r3
 800364a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800364e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003652:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	441a      	add	r2, r3
 800365e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003660:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003664:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003668:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800366c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003670:	b29b      	uxth	r3, r3
 8003672:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800368a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	441a      	add	r2, r3
 8003696:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003698:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800369c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036c2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	441a      	add	r2, r3
 80036ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80036d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3734      	adds	r7, #52	@ 0x34
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b0c2      	sub	sp, #264	@ 0x108
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80036fe:	6018      	str	r0, [r3, #0]
 8003700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003708:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800370a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800370e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	785b      	ldrb	r3, [r3, #1]
 8003716:	2b01      	cmp	r3, #1
 8003718:	f040 86b7 	bne.w	800448a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800371c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699a      	ldr	r2, [r3, #24]
 8003728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800372c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	429a      	cmp	r2, r3
 8003736:	d908      	bls.n	800374a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800373c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003748:	e007      	b.n	800375a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800374a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800374e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800375a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800375e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	7b1b      	ldrb	r3, [r3, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d13a      	bne.n	80037e0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800376a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800376e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6959      	ldr	r1, [r3, #20]
 8003776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800377a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	88da      	ldrh	r2, [r3, #6]
 8003782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003786:	b29b      	uxth	r3, r3
 8003788:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800378c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003790:	6800      	ldr	r0, [r0, #0]
 8003792:	f001 fc9c 	bl	80050ce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800379a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4413      	add	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	011a      	lsls	r2, r3, #4
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4413      	add	r3, r2
 80037cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	801a      	strh	r2, [r3, #0]
 80037dc:	f000 be1f 	b.w	800441e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80037e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	78db      	ldrb	r3, [r3, #3]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	f040 8462 	bne.w	80040b6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80037f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6a1a      	ldr	r2, [r3, #32]
 80037fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	429a      	cmp	r2, r3
 800380c:	f240 83df 	bls.w	8003fce <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003814:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800381e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003836:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800383a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800383e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	441a      	add	r2, r3
 8003854:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003858:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800385c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003860:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003868:	b29b      	uxth	r3, r3
 800386a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800386c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6a1a      	ldr	r2, [r3, #32]
 8003878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800387c:	1ad2      	subs	r2, r2, r3
 800387e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800388a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800388e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 81c7 	beq.w	8003c40 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80038b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80038be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	785b      	ldrb	r3, [r3, #1]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d177      	bne.n	80039be <USB_EPStartXfer+0x2ce>
 80038ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ee:	4413      	add	r3, r2
 80038f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	011a      	lsls	r2, r3, #4
 8003900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003902:	4413      	add	r3, r2
 8003904:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	b29b      	uxth	r3, r3
 8003910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003914:	b29a      	uxth	r2, r3
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	801a      	strh	r2, [r3, #0]
 800391a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800391e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003920:	d921      	bls.n	8003966 <USB_EPStartXfer+0x276>
 8003922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800392c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	2b00      	cmp	r3, #0
 8003936:	d104      	bne.n	8003942 <USB_EPStartXfer+0x252>
 8003938:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800393c:	3b01      	subs	r3, #1
 800393e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	b29a      	uxth	r2, r3
 8003948:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800394c:	b29b      	uxth	r3, r3
 800394e:	029b      	lsls	r3, r3, #10
 8003950:	b29b      	uxth	r3, r3
 8003952:	4313      	orrs	r3, r2
 8003954:	b29b      	uxth	r3, r3
 8003956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800395a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800395e:	b29a      	uxth	r2, r3
 8003960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003962:	801a      	strh	r2, [r3, #0]
 8003964:	e050      	b.n	8003a08 <USB_EPStartXfer+0x318>
 8003966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10a      	bne.n	8003984 <USB_EPStartXfer+0x294>
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	b29b      	uxth	r3, r3
 8003974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800397c:	b29a      	uxth	r2, r3
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	801a      	strh	r2, [r3, #0]
 8003982:	e041      	b.n	8003a08 <USB_EPStartXfer+0x318>
 8003984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003988:	085b      	lsrs	r3, r3, #1
 800398a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800398e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d004      	beq.n	80039a4 <USB_EPStartXfer+0x2b4>
 800399a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800399e:	3301      	adds	r3, #1
 80039a0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	029b      	lsls	r3, r3, #10
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	4313      	orrs	r3, r2
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ba:	801a      	strh	r2, [r3, #0]
 80039bc:	e024      	b.n	8003a08 <USB_EPStartXfer+0x318>
 80039be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	785b      	ldrb	r3, [r3, #1]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d11c      	bne.n	8003a08 <USB_EPStartXfer+0x318>
 80039ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039dc:	b29b      	uxth	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e2:	4413      	add	r3, r2
 80039e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80039e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	011a      	lsls	r2, r3, #4
 80039f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f6:	4413      	add	r3, r2
 80039f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	895b      	ldrh	r3, [r3, #10]
 8003a14:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6959      	ldr	r1, [r3, #20]
 8003a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003a2e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003a32:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003a36:	6800      	ldr	r0, [r0, #0]
 8003a38:	f001 fb49 	bl	80050ce <USB_WritePMA>
            ep->xfer_buff += len;
 8003a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a4c:	441a      	add	r2, r3
 8003a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6a1a      	ldr	r2, [r3, #32]
 8003a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d90f      	bls.n	8003a96 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8003a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6a1a      	ldr	r2, [r3, #32]
 8003a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a86:	1ad2      	subs	r2, r2, r3
 8003a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	621a      	str	r2, [r3, #32]
 8003a94:	e00e      	b.n	8003ab4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8003a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8003aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	785b      	ldrb	r3, [r3, #1]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d177      	bne.n	8003bb4 <USB_EPStartXfer+0x4c4>
 8003ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ac8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ad4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	011a      	lsls	r2, r3, #4
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	4413      	add	r3, r2
 8003afa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	801a      	strh	r2, [r3, #0]
 8003b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b14:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b16:	d921      	bls.n	8003b5c <USB_EPStartXfer+0x46c>
 8003b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d104      	bne.n	8003b38 <USB_EPStartXfer+0x448>
 8003b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b32:	3b01      	subs	r3, #1
 8003b34:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	029b      	lsls	r3, r3, #10
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	801a      	strh	r2, [r3, #0]
 8003b5a:	e056      	b.n	8003c0a <USB_EPStartXfer+0x51a>
 8003b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10a      	bne.n	8003b7a <USB_EPStartXfer+0x48a>
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	801a      	strh	r2, [r3, #0]
 8003b78:	e047      	b.n	8003c0a <USB_EPStartXfer+0x51a>
 8003b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d004      	beq.n	8003b9a <USB_EPStartXfer+0x4aa>
 8003b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b94:	3301      	adds	r3, #1
 8003b96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	029b      	lsls	r3, r3, #10
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	4313      	orrs	r3, r2
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	801a      	strh	r2, [r3, #0]
 8003bb2:	e02a      	b.n	8003c0a <USB_EPStartXfer+0x51a>
 8003bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	785b      	ldrb	r3, [r3, #1]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d122      	bne.n	8003c0a <USB_EPStartXfer+0x51a>
 8003bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	623b      	str	r3, [r7, #32]
 8003bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	4413      	add	r3, r2
 8003be6:	623b      	str	r3, [r7, #32]
 8003be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	011a      	lsls	r2, r3, #4
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003bfe:	61fb      	str	r3, [r7, #28]
 8003c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	891b      	ldrh	r3, [r3, #8]
 8003c16:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6959      	ldr	r1, [r3, #20]
 8003c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003c30:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003c34:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003c38:	6800      	ldr	r0, [r0, #0]
 8003c3a:	f001 fa48 	bl	80050ce <USB_WritePMA>
 8003c3e:	e3ee      	b.n	800441e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	785b      	ldrb	r3, [r3, #1]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d177      	bne.n	8003d40 <USB_EPStartXfer+0x650>
 8003c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c70:	4413      	add	r3, r2
 8003c72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	011a      	lsls	r2, r3, #4
 8003c82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c84:	4413      	add	r3, r2
 8003c86:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c9a:	801a      	strh	r2, [r3, #0]
 8003c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca0:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ca2:	d921      	bls.n	8003ce8 <USB_EPStartXfer+0x5f8>
 8003ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d104      	bne.n	8003cc4 <USB_EPStartXfer+0x5d4>
 8003cba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	029b      	lsls	r3, r3, #10
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ce4:	801a      	strh	r2, [r3, #0]
 8003ce6:	e056      	b.n	8003d96 <USB_EPStartXfer+0x6a6>
 8003ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <USB_EPStartXfer+0x616>
 8003cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d02:	801a      	strh	r2, [r3, #0]
 8003d04:	e047      	b.n	8003d96 <USB_EPStartXfer+0x6a6>
 8003d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d004      	beq.n	8003d26 <USB_EPStartXfer+0x636>
 8003d1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d20:	3301      	adds	r3, #1
 8003d22:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	029b      	lsls	r3, r3, #10
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	4313      	orrs	r3, r2
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d3c:	801a      	strh	r2, [r3, #0]
 8003d3e:	e02a      	b.n	8003d96 <USB_EPStartXfer+0x6a6>
 8003d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	785b      	ldrb	r3, [r3, #1]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d122      	bne.n	8003d96 <USB_EPStartXfer+0x6a6>
 8003d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d70:	4413      	add	r3, r2
 8003d72:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	011a      	lsls	r2, r3, #4
 8003d82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d84:	4413      	add	r3, r2
 8003d86:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	891b      	ldrh	r3, [r3, #8]
 8003da2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003daa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6959      	ldr	r1, [r3, #20]
 8003db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003dbc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003dc0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003dc4:	6800      	ldr	r0, [r0, #0]
 8003dc6:	f001 f982 	bl	80050ce <USB_WritePMA>
            ep->xfer_buff += len;
 8003dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dda:	441a      	add	r2, r3
 8003ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6a1a      	ldr	r2, [r3, #32]
 8003df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d90f      	bls.n	8003e24 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8003e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6a1a      	ldr	r2, [r3, #32]
 8003e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e14:	1ad2      	subs	r2, r2, r3
 8003e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	621a      	str	r2, [r3, #32]
 8003e22:	e00e      	b.n	8003e42 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8003e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8003e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	785b      	ldrb	r3, [r3, #1]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d177      	bne.n	8003f4e <USB_EPStartXfer+0x85e>
 8003e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7e:	4413      	add	r3, r2
 8003e80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	011a      	lsls	r2, r3, #4
 8003e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e92:	4413      	add	r3, r2
 8003e94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea8:	801a      	strh	r2, [r3, #0]
 8003eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eae:	2b3e      	cmp	r3, #62	@ 0x3e
 8003eb0:	d921      	bls.n	8003ef6 <USB_EPStartXfer+0x806>
 8003eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec0:	f003 031f 	and.w	r3, r3, #31
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d104      	bne.n	8003ed2 <USB_EPStartXfer+0x7e2>
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	029b      	lsls	r3, r3, #10
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ef2:	801a      	strh	r2, [r3, #0]
 8003ef4:	e050      	b.n	8003f98 <USB_EPStartXfer+0x8a8>
 8003ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <USB_EPStartXfer+0x824>
 8003efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f10:	801a      	strh	r2, [r3, #0]
 8003f12:	e041      	b.n	8003f98 <USB_EPStartXfer+0x8a8>
 8003f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f18:	085b      	lsrs	r3, r3, #1
 8003f1a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d004      	beq.n	8003f34 <USB_EPStartXfer+0x844>
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2e:	3301      	adds	r3, #1
 8003f30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	029b      	lsls	r3, r3, #10
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	4313      	orrs	r3, r2
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4a:	801a      	strh	r2, [r3, #0]
 8003f4c:	e024      	b.n	8003f98 <USB_EPStartXfer+0x8a8>
 8003f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	785b      	ldrb	r3, [r3, #1]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d11c      	bne.n	8003f98 <USB_EPStartXfer+0x8a8>
 8003f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f72:	4413      	add	r3, r2
 8003f74:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	011a      	lsls	r2, r3, #4
 8003f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f86:	4413      	add	r3, r2
 8003f88:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	895b      	ldrh	r3, [r3, #10]
 8003fa4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6959      	ldr	r1, [r3, #20]
 8003fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003fbe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003fc2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003fc6:	6800      	ldr	r0, [r0, #0]
 8003fc8:	f001 f881 	bl	80050ce <USB_WritePMA>
 8003fcc:	e227      	b.n	800441e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004004:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800400c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	441a      	add	r2, r3
 8004022:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004026:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800402a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800402e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004036:	b29b      	uxth	r3, r3
 8004038:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800403a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800403e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800404a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004054:	b29b      	uxth	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800405a:	4413      	add	r3, r2
 800405c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800405e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	011a      	lsls	r2, r3, #4
 800406c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800406e:	4413      	add	r3, r2
 8004070:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004074:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800407a:	b29a      	uxth	r2, r3
 800407c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800407e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	891b      	ldrh	r3, [r3, #8]
 800408c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6959      	ldr	r1, [r3, #20]
 800409c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80040a6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80040aa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80040ae:	6800      	ldr	r0, [r0, #0]
 80040b0:	f001 f80d 	bl	80050ce <USB_WritePMA>
 80040b4:	e1b3      	b.n	800441e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80040b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6a1a      	ldr	r2, [r3, #32]
 80040c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c6:	1ad2      	subs	r2, r2, r3
 80040c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80040d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80c6 	beq.w	8004288 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80040fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004100:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	673b      	str	r3, [r7, #112]	@ 0x70
 8004108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800410c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	785b      	ldrb	r3, [r3, #1]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d177      	bne.n	8004208 <USB_EPStartXfer+0xb18>
 8004118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800411c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004128:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004132:	b29b      	uxth	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004138:	4413      	add	r3, r2
 800413a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800413c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	011a      	lsls	r2, r3, #4
 800414a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800414c:	4413      	add	r3, r2
 800414e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004152:	667b      	str	r3, [r7, #100]	@ 0x64
 8004154:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	b29b      	uxth	r3, r3
 800415a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800415e:	b29a      	uxth	r2, r3
 8004160:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004162:	801a      	strh	r2, [r3, #0]
 8004164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004168:	2b3e      	cmp	r3, #62	@ 0x3e
 800416a:	d921      	bls.n	80041b0 <USB_EPStartXfer+0xac0>
 800416c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004170:	095b      	lsrs	r3, r3, #5
 8004172:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417a:	f003 031f 	and.w	r3, r3, #31
 800417e:	2b00      	cmp	r3, #0
 8004180:	d104      	bne.n	800418c <USB_EPStartXfer+0xa9c>
 8004182:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004186:	3b01      	subs	r3, #1
 8004188:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800418c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	b29a      	uxth	r2, r3
 8004192:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004196:	b29b      	uxth	r3, r3
 8004198:	029b      	lsls	r3, r3, #10
 800419a:	b29b      	uxth	r3, r3
 800419c:	4313      	orrs	r3, r2
 800419e:	b29b      	uxth	r3, r3
 80041a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041ac:	801a      	strh	r2, [r3, #0]
 80041ae:	e050      	b.n	8004252 <USB_EPStartXfer+0xb62>
 80041b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10a      	bne.n	80041ce <USB_EPStartXfer+0xade>
 80041b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041ca:	801a      	strh	r2, [r3, #0]
 80041cc:	e041      	b.n	8004252 <USB_EPStartXfer+0xb62>
 80041ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d2:	085b      	lsrs	r3, r3, #1
 80041d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80041d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d004      	beq.n	80041ee <USB_EPStartXfer+0xafe>
 80041e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80041e8:	3301      	adds	r3, #1
 80041ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80041ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	029b      	lsls	r3, r3, #10
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	4313      	orrs	r3, r2
 8004200:	b29a      	uxth	r2, r3
 8004202:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004204:	801a      	strh	r2, [r3, #0]
 8004206:	e024      	b.n	8004252 <USB_EPStartXfer+0xb62>
 8004208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800420c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	785b      	ldrb	r3, [r3, #1]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d11c      	bne.n	8004252 <USB_EPStartXfer+0xb62>
 8004218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800421c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004226:	b29b      	uxth	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800422c:	4413      	add	r3, r2
 800422e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	011a      	lsls	r2, r3, #4
 800423e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004240:	4413      	add	r3, r2
 8004242:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004246:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800424c:	b29a      	uxth	r2, r3
 800424e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004250:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	895b      	ldrh	r3, [r3, #10]
 800425e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6959      	ldr	r1, [r3, #20]
 800426e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004272:	b29b      	uxth	r3, r3
 8004274:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004278:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800427c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004280:	6800      	ldr	r0, [r0, #0]
 8004282:	f000 ff24 	bl	80050ce <USB_WritePMA>
 8004286:	e0ca      	b.n	800441e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800428c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	785b      	ldrb	r3, [r3, #1]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d177      	bne.n	8004388 <USB_EPStartXfer+0xc98>
 8004298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800429c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042b8:	4413      	add	r3, r2
 80042ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	011a      	lsls	r2, r3, #4
 80042ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042cc:	4413      	add	r3, r2
 80042ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042de:	b29a      	uxth	r2, r3
 80042e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042e2:	801a      	strh	r2, [r3, #0]
 80042e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80042ea:	d921      	bls.n	8004330 <USB_EPStartXfer+0xc40>
 80042ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80042f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d104      	bne.n	800430c <USB_EPStartXfer+0xc1c>
 8004302:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004306:	3b01      	subs	r3, #1
 8004308:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800430c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	b29a      	uxth	r2, r3
 8004312:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004316:	b29b      	uxth	r3, r3
 8004318:	029b      	lsls	r3, r3, #10
 800431a:	b29b      	uxth	r3, r3
 800431c:	4313      	orrs	r3, r2
 800431e:	b29b      	uxth	r3, r3
 8004320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004328:	b29a      	uxth	r2, r3
 800432a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800432c:	801a      	strh	r2, [r3, #0]
 800432e:	e05c      	b.n	80043ea <USB_EPStartXfer+0xcfa>
 8004330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <USB_EPStartXfer+0xc5e>
 8004338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004346:	b29a      	uxth	r2, r3
 8004348:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800434a:	801a      	strh	r2, [r3, #0]
 800434c:	e04d      	b.n	80043ea <USB_EPStartXfer+0xcfa>
 800434e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004352:	085b      	lsrs	r3, r3, #1
 8004354:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d004      	beq.n	800436e <USB_EPStartXfer+0xc7e>
 8004364:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004368:	3301      	adds	r3, #1
 800436a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800436e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	b29a      	uxth	r2, r3
 8004374:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004378:	b29b      	uxth	r3, r3
 800437a:	029b      	lsls	r3, r3, #10
 800437c:	b29b      	uxth	r3, r3
 800437e:	4313      	orrs	r3, r2
 8004380:	b29a      	uxth	r2, r3
 8004382:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004384:	801a      	strh	r2, [r3, #0]
 8004386:	e030      	b.n	80043ea <USB_EPStartXfer+0xcfa>
 8004388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800438c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	785b      	ldrb	r3, [r3, #1]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d128      	bne.n	80043ea <USB_EPStartXfer+0xcfa>
 8004398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800439c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	461a      	mov	r2, r3
 80043b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043bc:	4413      	add	r3, r2
 80043be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	011a      	lsls	r2, r3, #4
 80043d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043d4:	4413      	add	r3, r2
 80043d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80043da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80043ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	891b      	ldrh	r3, [r3, #8]
 80043f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6959      	ldr	r1, [r3, #20]
 8004406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800440a:	b29b      	uxth	r3, r3
 800440c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004410:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004414:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004418:	6800      	ldr	r0, [r0, #0]
 800441a:	f000 fe58 	bl	80050ce <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800441e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004422:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800442c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	b29b      	uxth	r3, r3
 800443c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004444:	817b      	strh	r3, [r7, #10]
 8004446:	897b      	ldrh	r3, [r7, #10]
 8004448:	f083 0310 	eor.w	r3, r3, #16
 800444c:	817b      	strh	r3, [r7, #10]
 800444e:	897b      	ldrh	r3, [r7, #10]
 8004450:	f083 0320 	eor.w	r3, r3, #32
 8004454:	817b      	strh	r3, [r7, #10]
 8004456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800445a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	441a      	add	r2, r3
 8004470:	897b      	ldrh	r3, [r7, #10]
 8004472:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004476:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800447a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800447e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004482:	b29b      	uxth	r3, r3
 8004484:	8013      	strh	r3, [r2, #0]
 8004486:	f000 bcde 	b.w	8004e46 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800448a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800448e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	7b1b      	ldrb	r3, [r3, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f040 80bb 	bne.w	8004612 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800449c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699a      	ldr	r2, [r3, #24]
 80044a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d917      	bls.n	80044e8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80044b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80044c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699a      	ldr	r2, [r3, #24]
 80044d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d8:	1ad2      	subs	r2, r2, r3
 80044da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	619a      	str	r2, [r3, #24]
 80044e6:	e00e      	b.n	8004506 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80044e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80044f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2200      	movs	r2, #0
 8004504:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800450a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004518:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004522:	b29b      	uxth	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800452a:	4413      	add	r3, r2
 800452c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	011a      	lsls	r2, r3, #4
 800453e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004542:	4413      	add	r3, r2
 8004544:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004548:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800454c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	b29b      	uxth	r3, r3
 8004554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004558:	b29a      	uxth	r2, r3
 800455a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800455e:	801a      	strh	r2, [r3, #0]
 8004560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004564:	2b3e      	cmp	r3, #62	@ 0x3e
 8004566:	d924      	bls.n	80045b2 <USB_EPStartXfer+0xec2>
 8004568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	2b00      	cmp	r3, #0
 800457c:	d104      	bne.n	8004588 <USB_EPStartXfer+0xe98>
 800457e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004582:	3b01      	subs	r3, #1
 8004584:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004588:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	b29a      	uxth	r2, r3
 8004590:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004594:	b29b      	uxth	r3, r3
 8004596:	029b      	lsls	r3, r3, #10
 8004598:	b29b      	uxth	r3, r3
 800459a:	4313      	orrs	r3, r2
 800459c:	b29b      	uxth	r3, r3
 800459e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045ac:	801a      	strh	r2, [r3, #0]
 80045ae:	f000 bc10 	b.w	8004dd2 <USB_EPStartXfer+0x16e2>
 80045b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10c      	bne.n	80045d4 <USB_EPStartXfer+0xee4>
 80045ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045d0:	801a      	strh	r2, [r3, #0]
 80045d2:	e3fe      	b.n	8004dd2 <USB_EPStartXfer+0x16e2>
 80045d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d8:	085b      	lsrs	r3, r3, #1
 80045da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d004      	beq.n	80045f4 <USB_EPStartXfer+0xf04>
 80045ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80045ee:	3301      	adds	r3, #1
 80045f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004600:	b29b      	uxth	r3, r3
 8004602:	029b      	lsls	r3, r3, #10
 8004604:	b29b      	uxth	r3, r3
 8004606:	4313      	orrs	r3, r2
 8004608:	b29a      	uxth	r2, r3
 800460a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800460e:	801a      	strh	r2, [r3, #0]
 8004610:	e3df      	b.n	8004dd2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	78db      	ldrb	r3, [r3, #3]
 800461e:	2b02      	cmp	r3, #2
 8004620:	f040 8218 	bne.w	8004a54 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	785b      	ldrb	r3, [r3, #1]
 8004630:	2b00      	cmp	r3, #0
 8004632:	f040 809d 	bne.w	8004770 <USB_EPStartXfer+0x1080>
 8004636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800463a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004648:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004652:	b29b      	uxth	r3, r3
 8004654:	461a      	mov	r2, r3
 8004656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800465a:	4413      	add	r3, r2
 800465c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	011a      	lsls	r2, r3, #4
 800466e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004672:	4413      	add	r3, r2
 8004674:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004678:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800467c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	b29b      	uxth	r3, r3
 8004684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004688:	b29a      	uxth	r2, r3
 800468a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800468e:	801a      	strh	r2, [r3, #0]
 8004690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b3e      	cmp	r3, #62	@ 0x3e
 800469e:	d92b      	bls.n	80046f8 <USB_EPStartXfer+0x1008>
 80046a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d104      	bne.n	80046d0 <USB_EPStartXfer+0xfe0>
 80046c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ca:	3b01      	subs	r3, #1
 80046cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046dc:	b29b      	uxth	r3, r3
 80046de:	029b      	lsls	r3, r3, #10
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	4313      	orrs	r3, r2
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80046f4:	801a      	strh	r2, [r3, #0]
 80046f6:	e070      	b.n	80047da <USB_EPStartXfer+0x10ea>
 80046f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10c      	bne.n	8004722 <USB_EPStartXfer+0x1032>
 8004708:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004718:	b29a      	uxth	r2, r3
 800471a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800471e:	801a      	strh	r2, [r3, #0]
 8004720:	e05b      	b.n	80047da <USB_EPStartXfer+0x10ea>
 8004722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	085b      	lsrs	r3, r3, #1
 8004730:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d004      	beq.n	8004752 <USB_EPStartXfer+0x1062>
 8004748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800474c:	3301      	adds	r3, #1
 800474e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004752:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29a      	uxth	r2, r3
 800475a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800475e:	b29b      	uxth	r3, r3
 8004760:	029b      	lsls	r3, r3, #10
 8004762:	b29b      	uxth	r3, r3
 8004764:	4313      	orrs	r3, r2
 8004766:	b29a      	uxth	r2, r3
 8004768:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800476c:	801a      	strh	r2, [r3, #0]
 800476e:	e034      	b.n	80047da <USB_EPStartXfer+0x10ea>
 8004770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d12c      	bne.n	80047da <USB_EPStartXfer+0x10ea>
 8004780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004784:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800478e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004792:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800479c:	b29b      	uxth	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80047a4:	4413      	add	r3, r2
 80047a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	011a      	lsls	r2, r3, #4
 80047b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80047bc:	4413      	add	r3, r2
 80047be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80047d8:	801a      	strh	r2, [r3, #0]
 80047da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80047e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f040 809d 	bne.w	8004934 <USB_EPStartXfer+0x1244>
 80047fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800480c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004816:	b29b      	uxth	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800481e:	4413      	add	r3, r2
 8004820:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	011a      	lsls	r2, r3, #4
 8004832:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004836:	4413      	add	r3, r2
 8004838:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800483c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004840:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	b29b      	uxth	r3, r3
 8004848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800484c:	b29a      	uxth	r2, r3
 800484e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004852:	801a      	strh	r2, [r3, #0]
 8004854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	2b3e      	cmp	r3, #62	@ 0x3e
 8004862:	d92b      	bls.n	80048bc <USB_EPStartXfer+0x11cc>
 8004864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004868:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800487a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	2b00      	cmp	r3, #0
 8004888:	d104      	bne.n	8004894 <USB_EPStartXfer+0x11a4>
 800488a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800488e:	3b01      	subs	r3, #1
 8004890:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004894:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	b29a      	uxth	r2, r3
 800489c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	029b      	lsls	r3, r3, #10
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	4313      	orrs	r3, r2
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048b8:	801a      	strh	r2, [r3, #0]
 80048ba:	e069      	b.n	8004990 <USB_EPStartXfer+0x12a0>
 80048bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10c      	bne.n	80048e6 <USB_EPStartXfer+0x11f6>
 80048cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048dc:	b29a      	uxth	r2, r3
 80048de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048e2:	801a      	strh	r2, [r3, #0]
 80048e4:	e054      	b.n	8004990 <USB_EPStartXfer+0x12a0>
 80048e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	085b      	lsrs	r3, r3, #1
 80048f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d004      	beq.n	8004916 <USB_EPStartXfer+0x1226>
 800490c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004910:	3301      	adds	r3, #1
 8004912:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004916:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29a      	uxth	r2, r3
 800491e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004922:	b29b      	uxth	r3, r3
 8004924:	029b      	lsls	r3, r3, #10
 8004926:	b29b      	uxth	r3, r3
 8004928:	4313      	orrs	r3, r2
 800492a:	b29a      	uxth	r2, r3
 800492c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004930:	801a      	strh	r2, [r3, #0]
 8004932:	e02d      	b.n	8004990 <USB_EPStartXfer+0x12a0>
 8004934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	785b      	ldrb	r3, [r3, #1]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d125      	bne.n	8004990 <USB_EPStartXfer+0x12a0>
 8004944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004948:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004952:	b29b      	uxth	r3, r3
 8004954:	461a      	mov	r2, r3
 8004956:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800495a:	4413      	add	r3, r2
 800495c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	011a      	lsls	r2, r3, #4
 800496e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004972:	4413      	add	r3, r2
 8004974:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004978:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800497c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	b29a      	uxth	r2, r3
 800498a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800498e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8218 	beq.w	8004dd2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80049a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80049c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80049c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <USB_EPStartXfer+0x12ea>
 80049ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80049d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10d      	bne.n	80049f6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80049da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80049de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f040 81f5 	bne.w	8004dd2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80049e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80049ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f040 81ee 	bne.w	8004dd2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80049f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a1c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004a3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a4a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	8013      	strh	r3, [r2, #0]
 8004a52:	e1be      	b.n	8004dd2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	78db      	ldrb	r3, [r3, #3]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	f040 81b4 	bne.w	8004dce <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d917      	bls.n	8004ab2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8004a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa2:	1ad2      	subs	r2, r2, r3
 8004aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	619a      	str	r2, [r3, #24]
 8004ab0:	e00e      	b.n	8004ad0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8004ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8004ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2200      	movs	r2, #0
 8004ace:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	785b      	ldrb	r3, [r3, #1]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f040 8085 	bne.w	8004bec <USB_EPStartXfer+0x14fc>
 8004ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ae6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004af4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	461a      	mov	r2, r3
 8004b02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b06:	4413      	add	r3, r2
 8004b08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	011a      	lsls	r2, r3, #4
 8004b1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b1e:	4413      	add	r3, r2
 8004b20:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b40:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b42:	d923      	bls.n	8004b8c <USB_EPStartXfer+0x149c>
 8004b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d104      	bne.n	8004b64 <USB_EPStartXfer+0x1474>
 8004b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004b64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	029b      	lsls	r3, r3, #10
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	4313      	orrs	r3, r2
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b88:	801a      	strh	r2, [r3, #0]
 8004b8a:	e060      	b.n	8004c4e <USB_EPStartXfer+0x155e>
 8004b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10c      	bne.n	8004bae <USB_EPStartXfer+0x14be>
 8004b94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004baa:	801a      	strh	r2, [r3, #0]
 8004bac:	e04f      	b.n	8004c4e <USB_EPStartXfer+0x155e>
 8004bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb2:	085b      	lsrs	r3, r3, #1
 8004bb4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d004      	beq.n	8004bce <USB_EPStartXfer+0x14de>
 8004bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bc8:	3301      	adds	r3, #1
 8004bca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004bce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	029b      	lsls	r3, r3, #10
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	4313      	orrs	r3, r2
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004be8:	801a      	strh	r2, [r3, #0]
 8004bea:	e030      	b.n	8004c4e <USB_EPStartXfer+0x155e>
 8004bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	785b      	ldrb	r3, [r3, #1]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d128      	bne.n	8004c4e <USB_EPStartXfer+0x155e>
 8004bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c20:	4413      	add	r3, r2
 8004c22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	011a      	lsls	r2, r3, #4
 8004c34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c38:	4413      	add	r3, r2
 8004c3a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c3e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004c4c:	801a      	strh	r2, [r3, #0]
 8004c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	785b      	ldrb	r3, [r3, #1]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f040 8085 	bne.w	8004d78 <USB_EPStartXfer+0x1688>
 8004c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c92:	4413      	add	r3, r2
 8004c94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	011a      	lsls	r2, r3, #4
 8004ca6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004caa:	4413      	add	r3, r2
 8004cac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cc6:	801a      	strh	r2, [r3, #0]
 8004cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ccc:	2b3e      	cmp	r3, #62	@ 0x3e
 8004cce:	d923      	bls.n	8004d18 <USB_EPStartXfer+0x1628>
 8004cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cd4:	095b      	lsrs	r3, r3, #5
 8004cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cde:	f003 031f 	and.w	r3, r3, #31
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d104      	bne.n	8004cf0 <USB_EPStartXfer+0x1600>
 8004ce6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cea:	3b01      	subs	r3, #1
 8004cec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cf0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	029b      	lsls	r3, r3, #10
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	4313      	orrs	r3, r2
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d14:	801a      	strh	r2, [r3, #0]
 8004d16:	e05c      	b.n	8004dd2 <USB_EPStartXfer+0x16e2>
 8004d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10c      	bne.n	8004d3a <USB_EPStartXfer+0x164a>
 8004d20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d36:	801a      	strh	r2, [r3, #0]
 8004d38:	e04b      	b.n	8004dd2 <USB_EPStartXfer+0x16e2>
 8004d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d004      	beq.n	8004d5a <USB_EPStartXfer+0x166a>
 8004d50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d54:	3301      	adds	r3, #1
 8004d56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	029b      	lsls	r3, r3, #10
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d74:	801a      	strh	r2, [r3, #0]
 8004d76:	e02c      	b.n	8004dd2 <USB_EPStartXfer+0x16e2>
 8004d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d124      	bne.n	8004dd2 <USB_EPStartXfer+0x16e2>
 8004d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d9e:	4413      	add	r3, r2
 8004da0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	011a      	lsls	r2, r3, #4
 8004db2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004db6:	4413      	add	r3, r2
 8004db8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004dbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004dca:	801a      	strh	r2, [r3, #0]
 8004dcc:	e001      	b.n	8004dd2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e03a      	b.n	8004e48 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004dfc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004e00:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004e04:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004e08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004e0c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004e10:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	441a      	add	r2, r3
 8004e2e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004e32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b085      	sub	sp, #20
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	785b      	ldrb	r3, [r3, #1]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d020      	beq.n	8004ea6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e7a:	81bb      	strh	r3, [r7, #12]
 8004e7c:	89bb      	ldrh	r3, [r7, #12]
 8004e7e:	f083 0310 	eor.w	r3, r3, #16
 8004e82:	81bb      	strh	r3, [r7, #12]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	441a      	add	r2, r3
 8004e8e:	89bb      	ldrh	r3, [r7, #12]
 8004e90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	8013      	strh	r3, [r2, #0]
 8004ea4:	e01f      	b.n	8004ee6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004eb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ebc:	81fb      	strh	r3, [r7, #14]
 8004ebe:	89fb      	ldrh	r3, [r7, #14]
 8004ec0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004ec4:	81fb      	strh	r3, [r7, #14]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	441a      	add	r2, r3
 8004ed0:	89fb      	ldrh	r3, [r7, #14]
 8004ed2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ed6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bc80      	pop	{r7}
 8004ef0:	4770      	bx	lr

08004ef2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b087      	sub	sp, #28
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	7b1b      	ldrb	r3, [r3, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f040 809d 	bne.w	8005040 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	785b      	ldrb	r3, [r3, #1]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d04c      	beq.n	8004fa8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	823b      	strh	r3, [r7, #16]
 8004f1c:	8a3b      	ldrh	r3, [r7, #16]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01b      	beq.n	8004f5e <USB_EPClearStall+0x6c>
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f3c:	81fb      	strh	r3, [r7, #14]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	441a      	add	r2, r3
 8004f48:	89fb      	ldrh	r3, [r7, #14]
 8004f4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	78db      	ldrb	r3, [r3, #3]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d06c      	beq.n	8005040 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f7c:	81bb      	strh	r3, [r7, #12]
 8004f7e:	89bb      	ldrh	r3, [r7, #12]
 8004f80:	f083 0320 	eor.w	r3, r3, #32
 8004f84:	81bb      	strh	r3, [r7, #12]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	441a      	add	r2, r3
 8004f90:	89bb      	ldrh	r3, [r7, #12]
 8004f92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	8013      	strh	r3, [r2, #0]
 8004fa6:	e04b      	b.n	8005040 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	82fb      	strh	r3, [r7, #22]
 8004fb6:	8afb      	ldrh	r3, [r7, #22]
 8004fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01b      	beq.n	8004ff8 <USB_EPClearStall+0x106>
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd6:	82bb      	strh	r3, [r7, #20]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	441a      	add	r2, r3
 8004fe2:	8abb      	ldrh	r3, [r7, #20]
 8004fe4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fe8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b29b      	uxth	r3, r3
 8005006:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800500a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500e:	827b      	strh	r3, [r7, #18]
 8005010:	8a7b      	ldrh	r3, [r7, #18]
 8005012:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005016:	827b      	strh	r3, [r7, #18]
 8005018:	8a7b      	ldrh	r3, [r7, #18]
 800501a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800501e:	827b      	strh	r3, [r7, #18]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	441a      	add	r2, r3
 800502a:	8a7b      	ldrh	r3, [r7, #18]
 800502c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005030:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005034:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800503c:	b29b      	uxth	r3, r3
 800503e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr

0800504c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d103      	bne.n	8005066 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2280      	movs	r2, #128	@ 0x80
 8005062:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr

08005072 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	bc80      	pop	{r7}
 8005084:	4770      	bx	lr

08005086 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr

0800509a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800509a:	b480      	push	{r7}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80050ac:	68fb      	ldr	r3, [r7, #12]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr

080050b8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr

080050ce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b08b      	sub	sp, #44	@ 0x2c
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	4611      	mov	r1, r2
 80050da:	461a      	mov	r2, r3
 80050dc:	460b      	mov	r3, r1
 80050de:	80fb      	strh	r3, [r7, #6]
 80050e0:	4613      	mov	r3, r2
 80050e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80050e4:	88bb      	ldrh	r3, [r7, #4]
 80050e6:	3301      	adds	r3, #1
 80050e8:	085b      	lsrs	r3, r3, #1
 80050ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	005a      	lsls	r2, r3, #1
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005100:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	627b      	str	r3, [r7, #36]	@ 0x24
 8005106:	e01f      	b.n	8005148 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	3301      	adds	r3, #1
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	b21b      	sxth	r3, r3
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	b21a      	sxth	r2, r3
 800511a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800511e:	4313      	orrs	r3, r2
 8005120:	b21b      	sxth	r3, r3
 8005122:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	8a7a      	ldrh	r2, [r7, #18]
 8005128:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	3302      	adds	r3, #2
 800512e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	3302      	adds	r3, #2
 8005134:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	3301      	adds	r3, #1
 800513a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	3301      	adds	r3, #1
 8005140:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	3b01      	subs	r3, #1
 8005146:	627b      	str	r3, [r7, #36]	@ 0x24
 8005148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1dc      	bne.n	8005108 <USB_WritePMA+0x3a>
  }
}
 800514e:	bf00      	nop
 8005150:	bf00      	nop
 8005152:	372c      	adds	r7, #44	@ 0x2c
 8005154:	46bd      	mov	sp, r7
 8005156:	bc80      	pop	{r7}
 8005158:	4770      	bx	lr

0800515a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800515a:	b480      	push	{r7}
 800515c:	b08b      	sub	sp, #44	@ 0x2c
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	4611      	mov	r1, r2
 8005166:	461a      	mov	r2, r3
 8005168:	460b      	mov	r3, r1
 800516a:	80fb      	strh	r3, [r7, #6]
 800516c:	4613      	mov	r3, r2
 800516e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005170:	88bb      	ldrh	r3, [r7, #4]
 8005172:	085b      	lsrs	r3, r3, #1
 8005174:	b29b      	uxth	r3, r3
 8005176:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	005a      	lsls	r2, r3, #1
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800518c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	627b      	str	r3, [r7, #36]	@ 0x24
 8005192:	e01b      	b.n	80051cc <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	3302      	adds	r3, #2
 80051a0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	3301      	adds	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	0a1b      	lsrs	r3, r3, #8
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	3301      	adds	r3, #1
 80051be:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	3302      	adds	r3, #2
 80051c4:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	3b01      	subs	r3, #1
 80051ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80051cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e0      	bne.n	8005194 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80051d2:	88bb      	ldrh	r3, [r7, #4]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d007      	beq.n	80051ee <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	701a      	strb	r2, [r3, #0]
  }
}
 80051ee:	bf00      	nop
 80051f0:	372c      	adds	r7, #44	@ 0x2c
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bc80      	pop	{r7}
 80051f6:	4770      	bx	lr

080051f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	7c1b      	ldrb	r3, [r3, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d115      	bne.n	800523c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005210:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005214:	2202      	movs	r2, #2
 8005216:	2181      	movs	r1, #129	@ 0x81
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f001 fe8e 	bl	8006f3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005224:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005228:	2202      	movs	r2, #2
 800522a:	2101      	movs	r1, #1
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f001 fe84 	bl	8006f3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800523a:	e012      	b.n	8005262 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800523c:	2340      	movs	r3, #64	@ 0x40
 800523e:	2202      	movs	r2, #2
 8005240:	2181      	movs	r1, #129	@ 0x81
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f001 fe79 	bl	8006f3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800524e:	2340      	movs	r3, #64	@ 0x40
 8005250:	2202      	movs	r2, #2
 8005252:	2101      	movs	r1, #1
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f001 fe70 	bl	8006f3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005262:	2308      	movs	r3, #8
 8005264:	2203      	movs	r2, #3
 8005266:	2182      	movs	r1, #130	@ 0x82
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f001 fe66 	bl	8006f3a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005274:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005278:	f001 ff86 	bl	8007188 <USBD_static_malloc>
 800527c:	4602      	mov	r2, r0
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800528a:	2b00      	cmp	r3, #0
 800528c:	d102      	bne.n	8005294 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800528e:	2301      	movs	r3, #1
 8005290:	73fb      	strb	r3, [r7, #15]
 8005292:	e026      	b.n	80052e2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800529a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	7c1b      	ldrb	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80052c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052c8:	2101      	movs	r1, #1
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f001 ff25 	bl	800711a <USBD_LL_PrepareReceive>
 80052d0:	e007      	b.n	80052e2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80052d8:	2340      	movs	r3, #64	@ 0x40
 80052da:	2101      	movs	r1, #1
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 ff1c 	bl	800711a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80052fc:	2181      	movs	r1, #129	@ 0x81
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f001 fe41 	bl	8006f86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800530a:	2101      	movs	r1, #1
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f001 fe3a 	bl	8006f86 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800531a:	2182      	movs	r1, #130	@ 0x82
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f001 fe32 	bl	8006f86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00e      	beq.n	8005350 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005342:	4618      	mov	r0, r3
 8005344:	f001 ff2c 	bl	80071a0 <USBD_static_free>
    pdev->pClassData = NULL;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8005350:	7bfb      	ldrb	r3, [r7, #15]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b086      	sub	sp, #24
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800536a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005374:	2300      	movs	r3, #0
 8005376:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005380:	2b00      	cmp	r3, #0
 8005382:	d039      	beq.n	80053f8 <USBD_CDC_Setup+0x9e>
 8005384:	2b20      	cmp	r3, #32
 8005386:	d17f      	bne.n	8005488 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	88db      	ldrh	r3, [r3, #6]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d029      	beq.n	80053e4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	b25b      	sxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	da11      	bge.n	80053be <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80053a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	88d2      	ldrh	r2, [r2, #6]
 80053ac:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80053ae:	6939      	ldr	r1, [r7, #16]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	88db      	ldrh	r3, [r3, #6]
 80053b4:	461a      	mov	r2, r3
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f001 fa06 	bl	80067c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80053bc:	e06b      	b.n	8005496 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	785a      	ldrb	r2, [r3, #1]
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	88db      	ldrh	r3, [r3, #6]
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80053d4:	6939      	ldr	r1, [r7, #16]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	88db      	ldrh	r3, [r3, #6]
 80053da:	461a      	mov	r2, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f001 fa21 	bl	8006824 <USBD_CtlPrepareRx>
      break;
 80053e2:	e058      	b.n	8005496 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	7850      	ldrb	r0, [r2, #1]
 80053f0:	2200      	movs	r2, #0
 80053f2:	6839      	ldr	r1, [r7, #0]
 80053f4:	4798      	blx	r3
      break;
 80053f6:	e04e      	b.n	8005496 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	2b0b      	cmp	r3, #11
 80053fe:	d02e      	beq.n	800545e <USBD_CDC_Setup+0x104>
 8005400:	2b0b      	cmp	r3, #11
 8005402:	dc38      	bgt.n	8005476 <USBD_CDC_Setup+0x11c>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <USBD_CDC_Setup+0xb4>
 8005408:	2b0a      	cmp	r3, #10
 800540a:	d014      	beq.n	8005436 <USBD_CDC_Setup+0xdc>
 800540c:	e033      	b.n	8005476 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005414:	2b03      	cmp	r3, #3
 8005416:	d107      	bne.n	8005428 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005418:	f107 030c 	add.w	r3, r7, #12
 800541c:	2202      	movs	r2, #2
 800541e:	4619      	mov	r1, r3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f001 f9d1 	bl	80067c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005426:	e02e      	b.n	8005486 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005428:	6839      	ldr	r1, [r7, #0]
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f001 f962 	bl	80066f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005430:	2302      	movs	r3, #2
 8005432:	75fb      	strb	r3, [r7, #23]
          break;
 8005434:	e027      	b.n	8005486 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800543c:	2b03      	cmp	r3, #3
 800543e:	d107      	bne.n	8005450 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005440:	f107 030f 	add.w	r3, r7, #15
 8005444:	2201      	movs	r2, #1
 8005446:	4619      	mov	r1, r3
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f001 f9bd 	bl	80067c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800544e:	e01a      	b.n	8005486 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f001 f94e 	bl	80066f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005458:	2302      	movs	r3, #2
 800545a:	75fb      	strb	r3, [r7, #23]
          break;
 800545c:	e013      	b.n	8005486 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005464:	2b03      	cmp	r3, #3
 8005466:	d00d      	beq.n	8005484 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f001 f942 	bl	80066f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005470:	2302      	movs	r3, #2
 8005472:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005474:	e006      	b.n	8005484 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005476:	6839      	ldr	r1, [r7, #0]
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f001 f93b 	bl	80066f4 <USBD_CtlError>
          ret = USBD_FAIL;
 800547e:	2302      	movs	r3, #2
 8005480:	75fb      	strb	r3, [r7, #23]
          break;
 8005482:	e000      	b.n	8005486 <USBD_CDC_Setup+0x12c>
          break;
 8005484:	bf00      	nop
      }
      break;
 8005486:	e006      	b.n	8005496 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005488:	6839      	ldr	r1, [r7, #0]
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f001 f932 	bl	80066f4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005490:	2302      	movs	r3, #2
 8005492:	75fb      	strb	r3, [r7, #23]
      break;
 8005494:	bf00      	nop
  }

  return ret;
 8005496:	7dfb      	ldrb	r3, [r7, #23]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054b2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80054ba:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d03a      	beq.n	800553c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80054c6:	78fa      	ldrb	r2, [r7, #3]
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	440b      	add	r3, r1
 80054d4:	331c      	adds	r3, #28
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d029      	beq.n	8005530 <USBD_CDC_DataIn+0x90>
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	331c      	adds	r3, #28
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	78f9      	ldrb	r1, [r7, #3]
 80054f0:	68b8      	ldr	r0, [r7, #8]
 80054f2:	460b      	mov	r3, r1
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	440b      	add	r3, r1
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	4403      	add	r3, r0
 80054fc:	3320      	adds	r3, #32
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	fbb2 f1f3 	udiv	r1, r2, r3
 8005504:	fb01 f303 	mul.w	r3, r1, r3
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d110      	bne.n	8005530 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800550e:	78fa      	ldrb	r2, [r7, #3]
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	440b      	add	r3, r1
 800551c:	331c      	adds	r3, #28
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005522:	78f9      	ldrb	r1, [r7, #3]
 8005524:	2300      	movs	r3, #0
 8005526:	2200      	movs	r2, #0
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f001 fdd3 	bl	80070d4 <USBD_LL_Transmit>
 800552e:	e003      	b.n	8005538 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	e000      	b.n	800553e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800553c:	2302      	movs	r3, #2
  }
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	460b      	mov	r3, r1
 8005550:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005558:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800555a:	78fb      	ldrb	r3, [r7, #3]
 800555c:	4619      	mov	r1, r3
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f001 fdfe 	bl	8007160 <USBD_LL_GetRxDataSize>
 8005564:	4602      	mov	r2, r0
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00d      	beq.n	8005592 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800558a:	4611      	mov	r1, r2
 800558c:	4798      	blx	r3

    return USBD_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	e000      	b.n	8005594 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005592:	2302      	movs	r3, #2
  }
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055aa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d014      	beq.n	80055e0 <USBD_CDC_EP0_RxReady+0x44>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80055bc:	2bff      	cmp	r3, #255	@ 0xff
 80055be:	d00f      	beq.n	80055e0 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80055ce:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80055d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	22ff      	movs	r2, #255	@ 0xff
 80055dc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2243      	movs	r2, #67	@ 0x43
 80055f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80055fa:	4b03      	ldr	r3, [pc, #12]	@ (8005608 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	200000b0 	.word	0x200000b0

0800560c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2243      	movs	r2, #67	@ 0x43
 8005618:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800561a:	4b03      	ldr	r3, [pc, #12]	@ (8005628 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800561c:	4618      	mov	r0, r3
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	2000006c 	.word	0x2000006c

0800562c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2243      	movs	r2, #67	@ 0x43
 8005638:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800563a:	4b03      	ldr	r3, [pc, #12]	@ (8005648 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	200000f4 	.word	0x200000f4

0800564c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	220a      	movs	r2, #10
 8005658:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800565a:	4b03      	ldr	r3, [pc, #12]	@ (8005668 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800565c:	4618      	mov	r0, r3
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	bc80      	pop	{r7}
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	20000028 	.word	0x20000028

0800566c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005676:	2302      	movs	r3, #2
 8005678:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8005688:	2300      	movs	r3, #0
 800568a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800568c:	7bfb      	ldrb	r3, [r7, #15]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	bc80      	pop	{r7}
 8005696:	4770      	bx	lr

08005698 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	4613      	mov	r3, r2
 80056a4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056ac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80056b6:	88fa      	ldrh	r2, [r7, #6]
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	371c      	adds	r7, #28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr

080056ca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b085      	sub	sp, #20
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056da:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr

080056f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d01c      	beq.n	8005744 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005710:	2b00      	cmp	r3, #0
 8005712:	d115      	bne.n	8005740 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005732:	b29b      	uxth	r3, r3
 8005734:	2181      	movs	r1, #129	@ 0x81
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f001 fccc 	bl	80070d4 <USBD_LL_Transmit>

      return USBD_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	e002      	b.n	8005746 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005740:	2301      	movs	r3, #1
 8005742:	e000      	b.n	8005746 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005744:	2302      	movs	r3, #2
  }
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800575c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005764:	2b00      	cmp	r3, #0
 8005766:	d017      	beq.n	8005798 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	7c1b      	ldrb	r3, [r3, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d109      	bne.n	8005784 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005776:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800577a:	2101      	movs	r1, #1
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f001 fccc 	bl	800711a <USBD_LL_PrepareReceive>
 8005782:	e007      	b.n	8005794 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800578a:	2340      	movs	r3, #64	@ 0x40
 800578c:	2101      	movs	r1, #1
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f001 fcc3 	bl	800711a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	e000      	b.n	800579a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005798:	2302      	movs	r3, #2
  }
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	4613      	mov	r3, r2
 80057ae:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80057b6:	2302      	movs	r3, #2
 80057b8:	e01a      	b.n	80057f0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	79fa      	ldrb	r2, [r7, #7]
 80057e6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f001 fb31 	bl	8006e50 <USBD_LL_Init>

  return USBD_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d006      	beq.n	800581a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8005814:	2300      	movs	r3, #0
 8005816:	73fb      	strb	r3, [r7, #15]
 8005818:	e001      	b.n	800581e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800581a:	2302      	movs	r3, #2
 800581c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	bc80      	pop	{r7}
 8005828:	4770      	bx	lr

0800582a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f001 fb66 	bl	8006f04 <USBD_LL_Start>

  return USBD_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr

08005856 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	460b      	mov	r3, r1
 8005860:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005862:	2302      	movs	r3, #2
 8005864:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00c      	beq.n	800588a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	78fa      	ldrb	r2, [r7, #3]
 800587a:	4611      	mov	r1, r2
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	4798      	blx	r3
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800588a:	7bfb      	ldrb	r3, [r7, #15]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	78fa      	ldrb	r2, [r7, #3]
 80058aa:	4611      	mov	r1, r2
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	4798      	blx	r3

  return USBD_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b082      	sub	sp, #8
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fed8 	bl	8006682 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80058e0:	461a      	mov	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80058ee:	f003 031f 	and.w	r3, r3, #31
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d016      	beq.n	8005924 <USBD_LL_SetupStage+0x6a>
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d81c      	bhi.n	8005934 <USBD_LL_SetupStage+0x7a>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <USBD_LL_SetupStage+0x4a>
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d008      	beq.n	8005914 <USBD_LL_SetupStage+0x5a>
 8005902:	e017      	b.n	8005934 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800590a:	4619      	mov	r1, r3
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f9cb 	bl	8005ca8 <USBD_StdDevReq>
      break;
 8005912:	e01a      	b.n	800594a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800591a:	4619      	mov	r1, r3
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fa2d 	bl	8005d7c <USBD_StdItfReq>
      break;
 8005922:	e012      	b.n	800594a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800592a:	4619      	mov	r1, r3
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fa6d 	bl	8005e0c <USBD_StdEPReq>
      break;
 8005932:	e00a      	b.n	800594a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800593a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800593e:	b2db      	uxtb	r3, r3
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 fb3e 	bl	8006fc4 <USBD_LL_StallEP>
      break;
 8005948:	bf00      	nop
  }

  return USBD_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	460b      	mov	r3, r1
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005962:	7afb      	ldrb	r3, [r7, #11]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d14b      	bne.n	8005a00 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800596e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005976:	2b03      	cmp	r3, #3
 8005978:	d134      	bne.n	80059e4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	429a      	cmp	r2, r3
 8005984:	d919      	bls.n	80059ba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	1ad2      	subs	r2, r2, r3
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800599c:	429a      	cmp	r2, r3
 800599e:	d203      	bcs.n	80059a8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	e002      	b.n	80059ae <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 ff54 	bl	8006860 <USBD_CtlContinueRx>
 80059b8:	e038      	b.n	8005a2c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d105      	bne.n	80059dc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 ff51 	bl	8006884 <USBD_CtlSendStatus>
 80059e2:	e023      	b.n	8005a2c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80059ea:	2b05      	cmp	r3, #5
 80059ec:	d11e      	bne.n	8005a2c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80059f6:	2100      	movs	r1, #0
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f001 fae3 	bl	8006fc4 <USBD_LL_StallEP>
 80059fe:	e015      	b.n	8005a2c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00d      	beq.n	8005a28 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d108      	bne.n	8005a28 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	7afa      	ldrb	r2, [r7, #11]
 8005a20:	4611      	mov	r1, r2
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	4798      	blx	r3
 8005a26:	e001      	b.n	8005a2c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e000      	b.n	8005a2e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b086      	sub	sp, #24
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	607a      	str	r2, [r7, #4]
 8005a42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005a44:	7afb      	ldrb	r3, [r7, #11]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d17f      	bne.n	8005b4a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3314      	adds	r3, #20
 8005a4e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d15c      	bne.n	8005b14 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d915      	bls.n	8005a92 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	1ad2      	subs	r2, r2, r3
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 febe 	bl	8006800 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a84:	2300      	movs	r3, #0
 8005a86:	2200      	movs	r2, #0
 8005a88:	2100      	movs	r1, #0
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f001 fb45 	bl	800711a <USBD_LL_PrepareReceive>
 8005a90:	e04e      	b.n	8005b30 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	6912      	ldr	r2, [r2, #16]
 8005a9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a9e:	fb01 f202 	mul.w	r2, r1, r2
 8005aa2:	1a9b      	subs	r3, r3, r2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d11c      	bne.n	8005ae2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d316      	bcc.n	8005ae2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d20f      	bcs.n	8005ae2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fe9a 	bl	8006800 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2100      	movs	r1, #0
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f001 fb1d 	bl	800711a <USBD_LL_PrepareReceive>
 8005ae0:	e026      	b.n	8005b30 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d105      	bne.n	8005b04 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005b04:	2180      	movs	r1, #128	@ 0x80
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f001 fa5c 	bl	8006fc4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 fecc 	bl	80068aa <USBD_CtlReceiveStatus>
 8005b12:	e00d      	b.n	8005b30 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d004      	beq.n	8005b28 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d103      	bne.n	8005b30 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005b28:	2180      	movs	r1, #128	@ 0x80
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f001 fa4a 	bl	8006fc4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d11d      	bne.n	8005b76 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f7ff fe81 	bl	8005842 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005b48:	e015      	b.n	8005b76 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00d      	beq.n	8005b72 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d108      	bne.n	8005b72 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	7afa      	ldrb	r2, [r7, #11]
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	4798      	blx	r3
 8005b70:	e001      	b.n	8005b76 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005b72:	2302      	movs	r3, #2
 8005b74:	e000      	b.n	8005b78 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b88:	2340      	movs	r3, #64	@ 0x40
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f001 f9d3 	bl	8006f3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2240      	movs	r2, #64	@ 0x40
 8005ba0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ba4:	2340      	movs	r3, #64	@ 0x40
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	2180      	movs	r1, #128	@ 0x80
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f001 f9c5 	bl	8006f3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2240      	movs	r2, #64	@ 0x40
 8005bba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d009      	beq.n	8005bf8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6852      	ldr	r2, [r2, #4]
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	4798      	blx	r3
  }

  return USBD_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	78fa      	ldrb	r2, [r7, #3]
 8005c12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bc80      	pop	{r7}
 8005c1e:	4770      	bx	lr

08005c20 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2204      	movs	r2, #4
 8005c38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc80      	pop	{r7}
 8005c46:	4770      	bx	lr

08005c48 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d105      	bne.n	8005c66 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr

08005c72 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d10b      	bne.n	8005c9c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005cbe:	2b40      	cmp	r3, #64	@ 0x40
 8005cc0:	d005      	beq.n	8005cce <USBD_StdDevReq+0x26>
 8005cc2:	2b40      	cmp	r3, #64	@ 0x40
 8005cc4:	d84f      	bhi.n	8005d66 <USBD_StdDevReq+0xbe>
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d009      	beq.n	8005cde <USBD_StdDevReq+0x36>
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d14b      	bne.n	8005d66 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	6839      	ldr	r1, [r7, #0]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	4798      	blx	r3
      break;
 8005cdc:	e048      	b.n	8005d70 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	785b      	ldrb	r3, [r3, #1]
 8005ce2:	2b09      	cmp	r3, #9
 8005ce4:	d839      	bhi.n	8005d5a <USBD_StdDevReq+0xb2>
 8005ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cec <USBD_StdDevReq+0x44>)
 8005ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cec:	08005d3d 	.word	0x08005d3d
 8005cf0:	08005d51 	.word	0x08005d51
 8005cf4:	08005d5b 	.word	0x08005d5b
 8005cf8:	08005d47 	.word	0x08005d47
 8005cfc:	08005d5b 	.word	0x08005d5b
 8005d00:	08005d1f 	.word	0x08005d1f
 8005d04:	08005d15 	.word	0x08005d15
 8005d08:	08005d5b 	.word	0x08005d5b
 8005d0c:	08005d33 	.word	0x08005d33
 8005d10:	08005d29 	.word	0x08005d29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f9dc 	bl	80060d4 <USBD_GetDescriptor>
          break;
 8005d1c:	e022      	b.n	8005d64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d1e:	6839      	ldr	r1, [r7, #0]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fb3f 	bl	80063a4 <USBD_SetAddress>
          break;
 8005d26:	e01d      	b.n	8005d64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fb7e 	bl	800642c <USBD_SetConfig>
          break;
 8005d30:	e018      	b.n	8005d64 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fc07 	bl	8006548 <USBD_GetConfig>
          break;
 8005d3a:	e013      	b.n	8005d64 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fc37 	bl	80065b2 <USBD_GetStatus>
          break;
 8005d44:	e00e      	b.n	8005d64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fc65 	bl	8006618 <USBD_SetFeature>
          break;
 8005d4e:	e009      	b.n	8005d64 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fc74 	bl	8006640 <USBD_ClrFeature>
          break;
 8005d58:	e004      	b.n	8005d64 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fcc9 	bl	80066f4 <USBD_CtlError>
          break;
 8005d62:	bf00      	nop
      }
      break;
 8005d64:	e004      	b.n	8005d70 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fcc3 	bl	80066f4 <USBD_CtlError>
      break;
 8005d6e:	bf00      	nop
  }

  return ret;
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop

08005d7c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d92:	2b40      	cmp	r3, #64	@ 0x40
 8005d94:	d005      	beq.n	8005da2 <USBD_StdItfReq+0x26>
 8005d96:	2b40      	cmp	r3, #64	@ 0x40
 8005d98:	d82e      	bhi.n	8005df8 <USBD_StdItfReq+0x7c>
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <USBD_StdItfReq+0x26>
 8005d9e:	2b20      	cmp	r3, #32
 8005da0:	d12a      	bne.n	8005df8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005da8:	3b01      	subs	r3, #1
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d81d      	bhi.n	8005dea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	889b      	ldrh	r3, [r3, #4]
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d813      	bhi.n	8005de0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	4798      	blx	r3
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	88db      	ldrh	r3, [r3, #6]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d110      	bne.n	8005df4 <USBD_StdItfReq+0x78>
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10d      	bne.n	8005df4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fd53 	bl	8006884 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005dde:	e009      	b.n	8005df4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fc86 	bl	80066f4 <USBD_CtlError>
          break;
 8005de8:	e004      	b.n	8005df4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fc81 	bl	80066f4 <USBD_CtlError>
          break;
 8005df2:	e000      	b.n	8005df6 <USBD_StdItfReq+0x7a>
          break;
 8005df4:	bf00      	nop
      }
      break;
 8005df6:	e004      	b.n	8005e02 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fc7a 	bl	80066f4 <USBD_CtlError>
      break;
 8005e00:	bf00      	nop
  }

  return USBD_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	889b      	ldrh	r3, [r3, #4]
 8005e1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e28:	2b40      	cmp	r3, #64	@ 0x40
 8005e2a:	d007      	beq.n	8005e3c <USBD_StdEPReq+0x30>
 8005e2c:	2b40      	cmp	r3, #64	@ 0x40
 8005e2e:	f200 8146 	bhi.w	80060be <USBD_StdEPReq+0x2b2>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <USBD_StdEPReq+0x40>
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	f040 8141 	bne.w	80060be <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	4798      	blx	r3
      break;
 8005e4a:	e13d      	b.n	80060c8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d10a      	bne.n	8005e6e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	4798      	blx	r3
 8005e66:	4603      	mov	r3, r0
 8005e68:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
 8005e6c:	e12d      	b.n	80060ca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	785b      	ldrb	r3, [r3, #1]
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d007      	beq.n	8005e86 <USBD_StdEPReq+0x7a>
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	f300 811b 	bgt.w	80060b2 <USBD_StdEPReq+0x2a6>
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d072      	beq.n	8005f66 <USBD_StdEPReq+0x15a>
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d03a      	beq.n	8005efa <USBD_StdEPReq+0xee>
 8005e84:	e115      	b.n	80060b2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d002      	beq.n	8005e96 <USBD_StdEPReq+0x8a>
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d015      	beq.n	8005ec0 <USBD_StdEPReq+0xb4>
 8005e94:	e02b      	b.n	8005eee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e96:	7bbb      	ldrb	r3, [r7, #14]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00c      	beq.n	8005eb6 <USBD_StdEPReq+0xaa>
 8005e9c:	7bbb      	ldrb	r3, [r7, #14]
 8005e9e:	2b80      	cmp	r3, #128	@ 0x80
 8005ea0:	d009      	beq.n	8005eb6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005ea2:	7bbb      	ldrb	r3, [r7, #14]
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f001 f88c 	bl	8006fc4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005eac:	2180      	movs	r1, #128	@ 0x80
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f001 f888 	bl	8006fc4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005eb4:	e020      	b.n	8005ef8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fc1b 	bl	80066f4 <USBD_CtlError>
              break;
 8005ebe:	e01b      	b.n	8005ef8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	885b      	ldrh	r3, [r3, #2]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10e      	bne.n	8005ee6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005ec8:	7bbb      	ldrb	r3, [r7, #14]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <USBD_StdEPReq+0xda>
 8005ece:	7bbb      	ldrb	r3, [r7, #14]
 8005ed0:	2b80      	cmp	r3, #128	@ 0x80
 8005ed2:	d008      	beq.n	8005ee6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	88db      	ldrh	r3, [r3, #6]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d104      	bne.n	8005ee6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005edc:	7bbb      	ldrb	r3, [r7, #14]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f001 f86f 	bl	8006fc4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fccc 	bl	8006884 <USBD_CtlSendStatus>

              break;
 8005eec:	e004      	b.n	8005ef8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fbff 	bl	80066f4 <USBD_CtlError>
              break;
 8005ef6:	bf00      	nop
          }
          break;
 8005ef8:	e0e0      	b.n	80060bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d002      	beq.n	8005f0a <USBD_StdEPReq+0xfe>
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d015      	beq.n	8005f34 <USBD_StdEPReq+0x128>
 8005f08:	e026      	b.n	8005f58 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f0a:	7bbb      	ldrb	r3, [r7, #14]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00c      	beq.n	8005f2a <USBD_StdEPReq+0x11e>
 8005f10:	7bbb      	ldrb	r3, [r7, #14]
 8005f12:	2b80      	cmp	r3, #128	@ 0x80
 8005f14:	d009      	beq.n	8005f2a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005f16:	7bbb      	ldrb	r3, [r7, #14]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 f852 	bl	8006fc4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005f20:	2180      	movs	r1, #128	@ 0x80
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f001 f84e 	bl	8006fc4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f28:	e01c      	b.n	8005f64 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005f2a:	6839      	ldr	r1, [r7, #0]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fbe1 	bl	80066f4 <USBD_CtlError>
              break;
 8005f32:	e017      	b.n	8005f64 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	885b      	ldrh	r3, [r3, #2]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d112      	bne.n	8005f62 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f3c:	7bbb      	ldrb	r3, [r7, #14]
 8005f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f46:	7bbb      	ldrb	r3, [r7, #14]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 f859 	bl	8007002 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fc97 	bl	8006884 <USBD_CtlSendStatus>
              }
              break;
 8005f56:	e004      	b.n	8005f62 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fbca 	bl	80066f4 <USBD_CtlError>
              break;
 8005f60:	e000      	b.n	8005f64 <USBD_StdEPReq+0x158>
              break;
 8005f62:	bf00      	nop
          }
          break;
 8005f64:	e0aa      	b.n	80060bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d002      	beq.n	8005f76 <USBD_StdEPReq+0x16a>
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	d032      	beq.n	8005fda <USBD_StdEPReq+0x1ce>
 8005f74:	e097      	b.n	80060a6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f76:	7bbb      	ldrb	r3, [r7, #14]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d007      	beq.n	8005f8c <USBD_StdEPReq+0x180>
 8005f7c:	7bbb      	ldrb	r3, [r7, #14]
 8005f7e:	2b80      	cmp	r3, #128	@ 0x80
 8005f80:	d004      	beq.n	8005f8c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8005f82:	6839      	ldr	r1, [r7, #0]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fbb5 	bl	80066f4 <USBD_CtlError>
                break;
 8005f8a:	e091      	b.n	80060b0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	da0b      	bge.n	8005fac <USBD_StdEPReq+0x1a0>
 8005f94:	7bbb      	ldrb	r3, [r7, #14]
 8005f96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	3310      	adds	r3, #16
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	3304      	adds	r3, #4
 8005faa:	e00b      	b.n	8005fc4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005fac:	7bbb      	ldrb	r3, [r7, #14]
 8005fae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fbf8 	bl	80067c8 <USBD_CtlSendData>
              break;
 8005fd8:	e06a      	b.n	80060b0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005fda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	da11      	bge.n	8006006 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005fe2:	7bbb      	ldrb	r3, [r7, #14]
 8005fe4:	f003 020f 	and.w	r2, r3, #15
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	3318      	adds	r3, #24
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d117      	bne.n	800602c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fb78 	bl	80066f4 <USBD_CtlError>
                  break;
 8006004:	e054      	b.n	80060b0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006006:	7bbb      	ldrb	r3, [r7, #14]
 8006008:	f003 020f 	and.w	r2, r3, #15
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	440b      	add	r3, r1
 8006018:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d104      	bne.n	800602c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fb65 	bl	80066f4 <USBD_CtlError>
                  break;
 800602a:	e041      	b.n	80060b0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800602c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006030:	2b00      	cmp	r3, #0
 8006032:	da0b      	bge.n	800604c <USBD_StdEPReq+0x240>
 8006034:	7bbb      	ldrb	r3, [r7, #14]
 8006036:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800603a:	4613      	mov	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	3310      	adds	r3, #16
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	4413      	add	r3, r2
 8006048:	3304      	adds	r3, #4
 800604a:	e00b      	b.n	8006064 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800604c:	7bbb      	ldrb	r3, [r7, #14]
 800604e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006052:	4613      	mov	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	4413      	add	r3, r2
 8006062:	3304      	adds	r3, #4
 8006064:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006066:	7bbb      	ldrb	r3, [r7, #14]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <USBD_StdEPReq+0x266>
 800606c:	7bbb      	ldrb	r3, [r7, #14]
 800606e:	2b80      	cmp	r3, #128	@ 0x80
 8006070:	d103      	bne.n	800607a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	e00e      	b.n	8006098 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800607a:	7bbb      	ldrb	r3, [r7, #14]
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 ffde 	bl	8007040 <USBD_LL_IsStallEP>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2201      	movs	r2, #1
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	e002      	b.n	8006098 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2202      	movs	r2, #2
 800609c:	4619      	mov	r1, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fb92 	bl	80067c8 <USBD_CtlSendData>
              break;
 80060a4:	e004      	b.n	80060b0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fb23 	bl	80066f4 <USBD_CtlError>
              break;
 80060ae:	bf00      	nop
          }
          break;
 80060b0:	e004      	b.n	80060bc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80060b2:	6839      	ldr	r1, [r7, #0]
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fb1d 	bl	80066f4 <USBD_CtlError>
          break;
 80060ba:	bf00      	nop
      }
      break;
 80060bc:	e004      	b.n	80060c8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80060be:	6839      	ldr	r1, [r7, #0]
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fb17 	bl	80066f4 <USBD_CtlError>
      break;
 80060c6:	bf00      	nop
  }

  return ret;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	885b      	ldrh	r3, [r3, #2]
 80060ee:	0a1b      	lsrs	r3, r3, #8
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	2b06      	cmp	r3, #6
 80060f6:	f200 8128 	bhi.w	800634a <USBD_GetDescriptor+0x276>
 80060fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006100 <USBD_GetDescriptor+0x2c>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	0800611d 	.word	0x0800611d
 8006104:	08006135 	.word	0x08006135
 8006108:	08006175 	.word	0x08006175
 800610c:	0800634b 	.word	0x0800634b
 8006110:	0800634b 	.word	0x0800634b
 8006114:	080062eb 	.word	0x080062eb
 8006118:	08006317 	.word	0x08006317
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	7c12      	ldrb	r2, [r2, #16]
 8006128:	f107 0108 	add.w	r1, r7, #8
 800612c:	4610      	mov	r0, r2
 800612e:	4798      	blx	r3
 8006130:	60f8      	str	r0, [r7, #12]
      break;
 8006132:	e112      	b.n	800635a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	7c1b      	ldrb	r3, [r3, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10d      	bne.n	8006158 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006144:	f107 0208 	add.w	r2, r7, #8
 8006148:	4610      	mov	r0, r2
 800614a:	4798      	blx	r3
 800614c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3301      	adds	r3, #1
 8006152:	2202      	movs	r2, #2
 8006154:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006156:	e100      	b.n	800635a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800615e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006160:	f107 0208 	add.w	r2, r7, #8
 8006164:	4610      	mov	r0, r2
 8006166:	4798      	blx	r3
 8006168:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	3301      	adds	r3, #1
 800616e:	2202      	movs	r2, #2
 8006170:	701a      	strb	r2, [r3, #0]
      break;
 8006172:	e0f2      	b.n	800635a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	885b      	ldrh	r3, [r3, #2]
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b05      	cmp	r3, #5
 800617c:	f200 80ac 	bhi.w	80062d8 <USBD_GetDescriptor+0x204>
 8006180:	a201      	add	r2, pc, #4	@ (adr r2, 8006188 <USBD_GetDescriptor+0xb4>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	080061a1 	.word	0x080061a1
 800618c:	080061d5 	.word	0x080061d5
 8006190:	08006209 	.word	0x08006209
 8006194:	0800623d 	.word	0x0800623d
 8006198:	08006271 	.word	0x08006271
 800619c:	080062a5 	.word	0x080062a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00b      	beq.n	80061c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	7c12      	ldrb	r2, [r2, #16]
 80061b8:	f107 0108 	add.w	r1, r7, #8
 80061bc:	4610      	mov	r0, r2
 80061be:	4798      	blx	r3
 80061c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061c2:	e091      	b.n	80062e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fa94 	bl	80066f4 <USBD_CtlError>
            err++;
 80061cc:	7afb      	ldrb	r3, [r7, #11]
 80061ce:	3301      	adds	r3, #1
 80061d0:	72fb      	strb	r3, [r7, #11]
          break;
 80061d2:	e089      	b.n	80062e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00b      	beq.n	80061f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	7c12      	ldrb	r2, [r2, #16]
 80061ec:	f107 0108 	add.w	r1, r7, #8
 80061f0:	4610      	mov	r0, r2
 80061f2:	4798      	blx	r3
 80061f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061f6:	e077      	b.n	80062e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fa7a 	bl	80066f4 <USBD_CtlError>
            err++;
 8006200:	7afb      	ldrb	r3, [r7, #11]
 8006202:	3301      	adds	r3, #1
 8006204:	72fb      	strb	r3, [r7, #11]
          break;
 8006206:	e06f      	b.n	80062e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00b      	beq.n	800622c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	7c12      	ldrb	r2, [r2, #16]
 8006220:	f107 0108 	add.w	r1, r7, #8
 8006224:	4610      	mov	r0, r2
 8006226:	4798      	blx	r3
 8006228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800622a:	e05d      	b.n	80062e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fa60 	bl	80066f4 <USBD_CtlError>
            err++;
 8006234:	7afb      	ldrb	r3, [r7, #11]
 8006236:	3301      	adds	r3, #1
 8006238:	72fb      	strb	r3, [r7, #11]
          break;
 800623a:	e055      	b.n	80062e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00b      	beq.n	8006260 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	7c12      	ldrb	r2, [r2, #16]
 8006254:	f107 0108 	add.w	r1, r7, #8
 8006258:	4610      	mov	r0, r2
 800625a:	4798      	blx	r3
 800625c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800625e:	e043      	b.n	80062e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fa46 	bl	80066f4 <USBD_CtlError>
            err++;
 8006268:	7afb      	ldrb	r3, [r7, #11]
 800626a:	3301      	adds	r3, #1
 800626c:	72fb      	strb	r3, [r7, #11]
          break;
 800626e:	e03b      	b.n	80062e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00b      	beq.n	8006294 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	7c12      	ldrb	r2, [r2, #16]
 8006288:	f107 0108 	add.w	r1, r7, #8
 800628c:	4610      	mov	r0, r2
 800628e:	4798      	blx	r3
 8006290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006292:	e029      	b.n	80062e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fa2c 	bl	80066f4 <USBD_CtlError>
            err++;
 800629c:	7afb      	ldrb	r3, [r7, #11]
 800629e:	3301      	adds	r3, #1
 80062a0:	72fb      	strb	r3, [r7, #11]
          break;
 80062a2:	e021      	b.n	80062e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00b      	beq.n	80062c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	7c12      	ldrb	r2, [r2, #16]
 80062bc:	f107 0108 	add.w	r1, r7, #8
 80062c0:	4610      	mov	r0, r2
 80062c2:	4798      	blx	r3
 80062c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062c6:	e00f      	b.n	80062e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062c8:	6839      	ldr	r1, [r7, #0]
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fa12 	bl	80066f4 <USBD_CtlError>
            err++;
 80062d0:	7afb      	ldrb	r3, [r7, #11]
 80062d2:	3301      	adds	r3, #1
 80062d4:	72fb      	strb	r3, [r7, #11]
          break;
 80062d6:	e007      	b.n	80062e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa0a 	bl	80066f4 <USBD_CtlError>
          err++;
 80062e0:	7afb      	ldrb	r3, [r7, #11]
 80062e2:	3301      	adds	r3, #1
 80062e4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80062e6:	e038      	b.n	800635a <USBD_GetDescriptor+0x286>
 80062e8:	e037      	b.n	800635a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	7c1b      	ldrb	r3, [r3, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d109      	bne.n	8006306 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062fa:	f107 0208 	add.w	r2, r7, #8
 80062fe:	4610      	mov	r0, r2
 8006300:	4798      	blx	r3
 8006302:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006304:	e029      	b.n	800635a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f9f3 	bl	80066f4 <USBD_CtlError>
        err++;
 800630e:	7afb      	ldrb	r3, [r7, #11]
 8006310:	3301      	adds	r3, #1
 8006312:	72fb      	strb	r3, [r7, #11]
      break;
 8006314:	e021      	b.n	800635a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	7c1b      	ldrb	r3, [r3, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10d      	bne.n	800633a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006326:	f107 0208 	add.w	r2, r7, #8
 800632a:	4610      	mov	r0, r2
 800632c:	4798      	blx	r3
 800632e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3301      	adds	r3, #1
 8006334:	2207      	movs	r2, #7
 8006336:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006338:	e00f      	b.n	800635a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f9d9 	bl	80066f4 <USBD_CtlError>
        err++;
 8006342:	7afb      	ldrb	r3, [r7, #11]
 8006344:	3301      	adds	r3, #1
 8006346:	72fb      	strb	r3, [r7, #11]
      break;
 8006348:	e007      	b.n	800635a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f9d1 	bl	80066f4 <USBD_CtlError>
      err++;
 8006352:	7afb      	ldrb	r3, [r7, #11]
 8006354:	3301      	adds	r3, #1
 8006356:	72fb      	strb	r3, [r7, #11]
      break;
 8006358:	bf00      	nop
  }

  if (err != 0U)
 800635a:	7afb      	ldrb	r3, [r7, #11]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d11c      	bne.n	800639a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006360:	893b      	ldrh	r3, [r7, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d011      	beq.n	800638a <USBD_GetDescriptor+0x2b6>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	88db      	ldrh	r3, [r3, #6]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00d      	beq.n	800638a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	88da      	ldrh	r2, [r3, #6]
 8006372:	893b      	ldrh	r3, [r7, #8]
 8006374:	4293      	cmp	r3, r2
 8006376:	bf28      	it	cs
 8006378:	4613      	movcs	r3, r2
 800637a:	b29b      	uxth	r3, r3
 800637c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800637e:	893b      	ldrh	r3, [r7, #8]
 8006380:	461a      	mov	r2, r3
 8006382:	68f9      	ldr	r1, [r7, #12]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fa1f 	bl	80067c8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	88db      	ldrh	r3, [r3, #6]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d104      	bne.n	800639c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fa76 	bl	8006884 <USBD_CtlSendStatus>
 8006398:	e000      	b.n	800639c <USBD_GetDescriptor+0x2c8>
    return;
 800639a:	bf00      	nop
    }
  }
}
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop

080063a4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	889b      	ldrh	r3, [r3, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d130      	bne.n	8006418 <USBD_SetAddress+0x74>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	88db      	ldrh	r3, [r3, #6]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d12c      	bne.n	8006418 <USBD_SetAddress+0x74>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	885b      	ldrh	r3, [r3, #2]
 80063c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80063c4:	d828      	bhi.n	8006418 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	885b      	ldrh	r3, [r3, #2]
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d104      	bne.n	80063e6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f988 	bl	80066f4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063e4:	e01d      	b.n	8006422 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	7bfa      	ldrb	r2, [r7, #15]
 80063ea:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fe4f 	bl	8007096 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fa43 	bl	8006884 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d004      	beq.n	800640e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800640c:	e009      	b.n	8006422 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006416:	e004      	b.n	8006422 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f96a 	bl	80066f4 <USBD_CtlError>
  }
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	885b      	ldrh	r3, [r3, #2]
 800643a:	b2da      	uxtb	r2, r3
 800643c:	4b41      	ldr	r3, [pc, #260]	@ (8006544 <USBD_SetConfig+0x118>)
 800643e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006440:	4b40      	ldr	r3, [pc, #256]	@ (8006544 <USBD_SetConfig+0x118>)
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d904      	bls.n	8006452 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f952 	bl	80066f4 <USBD_CtlError>
 8006450:	e075      	b.n	800653e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006458:	2b02      	cmp	r3, #2
 800645a:	d002      	beq.n	8006462 <USBD_SetConfig+0x36>
 800645c:	2b03      	cmp	r3, #3
 800645e:	d023      	beq.n	80064a8 <USBD_SetConfig+0x7c>
 8006460:	e062      	b.n	8006528 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006462:	4b38      	ldr	r3, [pc, #224]	@ (8006544 <USBD_SetConfig+0x118>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d01a      	beq.n	80064a0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800646a:	4b36      	ldr	r3, [pc, #216]	@ (8006544 <USBD_SetConfig+0x118>)
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2203      	movs	r2, #3
 8006478:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800647c:	4b31      	ldr	r3, [pc, #196]	@ (8006544 <USBD_SetConfig+0x118>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7ff f9e7 	bl	8005856 <USBD_SetClassConfig>
 8006488:	4603      	mov	r3, r0
 800648a:	2b02      	cmp	r3, #2
 800648c:	d104      	bne.n	8006498 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f92f 	bl	80066f4 <USBD_CtlError>
            return;
 8006496:	e052      	b.n	800653e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f9f3 	bl	8006884 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800649e:	e04e      	b.n	800653e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f9ef 	bl	8006884 <USBD_CtlSendStatus>
        break;
 80064a6:	e04a      	b.n	800653e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80064a8:	4b26      	ldr	r3, [pc, #152]	@ (8006544 <USBD_SetConfig+0x118>)
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d112      	bne.n	80064d6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80064b8:	4b22      	ldr	r3, [pc, #136]	@ (8006544 <USBD_SetConfig+0x118>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80064c2:	4b20      	ldr	r3, [pc, #128]	@ (8006544 <USBD_SetConfig+0x118>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff f9e3 	bl	8005894 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f9d8 	bl	8006884 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80064d4:	e033      	b.n	800653e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80064d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006544 <USBD_SetConfig+0x118>)
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d01d      	beq.n	8006520 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7ff f9d1 	bl	8005894 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80064f2:	4b14      	ldr	r3, [pc, #80]	@ (8006544 <USBD_SetConfig+0x118>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80064fc:	4b11      	ldr	r3, [pc, #68]	@ (8006544 <USBD_SetConfig+0x118>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	4619      	mov	r1, r3
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff f9a7 	bl	8005856 <USBD_SetClassConfig>
 8006508:	4603      	mov	r3, r0
 800650a:	2b02      	cmp	r3, #2
 800650c:	d104      	bne.n	8006518 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f8ef 	bl	80066f4 <USBD_CtlError>
            return;
 8006516:	e012      	b.n	800653e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f9b3 	bl	8006884 <USBD_CtlSendStatus>
        break;
 800651e:	e00e      	b.n	800653e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f9af 	bl	8006884 <USBD_CtlSendStatus>
        break;
 8006526:	e00a      	b.n	800653e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f8e2 	bl	80066f4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006530:	4b04      	ldr	r3, [pc, #16]	@ (8006544 <USBD_SetConfig+0x118>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff f9ac 	bl	8005894 <USBD_ClrClassConfig>
        break;
 800653c:	bf00      	nop
    }
  }
}
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	200001d4 	.word	0x200001d4

08006548 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	88db      	ldrh	r3, [r3, #6]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d004      	beq.n	8006564 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f8c9 	bl	80066f4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006562:	e022      	b.n	80065aa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800656a:	2b02      	cmp	r3, #2
 800656c:	dc02      	bgt.n	8006574 <USBD_GetConfig+0x2c>
 800656e:	2b00      	cmp	r3, #0
 8006570:	dc03      	bgt.n	800657a <USBD_GetConfig+0x32>
 8006572:	e015      	b.n	80065a0 <USBD_GetConfig+0x58>
 8006574:	2b03      	cmp	r3, #3
 8006576:	d00b      	beq.n	8006590 <USBD_GetConfig+0x48>
 8006578:	e012      	b.n	80065a0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3308      	adds	r3, #8
 8006584:	2201      	movs	r2, #1
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f91d 	bl	80067c8 <USBD_CtlSendData>
        break;
 800658e:	e00c      	b.n	80065aa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3304      	adds	r3, #4
 8006594:	2201      	movs	r2, #1
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f915 	bl	80067c8 <USBD_CtlSendData>
        break;
 800659e:	e004      	b.n	80065aa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80065a0:	6839      	ldr	r1, [r7, #0]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f8a6 	bl	80066f4 <USBD_CtlError>
        break;
 80065a8:	bf00      	nop
}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b082      	sub	sp, #8
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065c2:	3b01      	subs	r3, #1
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d81e      	bhi.n	8006606 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	88db      	ldrh	r3, [r3, #6]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d004      	beq.n	80065da <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f88e 	bl	80066f4 <USBD_CtlError>
        break;
 80065d8:	e01a      	b.n	8006610 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d005      	beq.n	80065f6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f043 0202 	orr.w	r2, r3, #2
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	330c      	adds	r3, #12
 80065fa:	2202      	movs	r2, #2
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f8e2 	bl	80067c8 <USBD_CtlSendData>
      break;
 8006604:	e004      	b.n	8006610 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f873 	bl	80066f4 <USBD_CtlError>
      break;
 800660e:	bf00      	nop
  }
}
 8006610:	bf00      	nop
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	885b      	ldrh	r3, [r3, #2]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d106      	bne.n	8006638 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f926 	bl	8006884 <USBD_CtlSendStatus>
  }
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006650:	3b01      	subs	r3, #1
 8006652:	2b02      	cmp	r3, #2
 8006654:	d80b      	bhi.n	800666e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	885b      	ldrh	r3, [r3, #2]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d10c      	bne.n	8006678 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f90c 	bl	8006884 <USBD_CtlSendStatus>
      }
      break;
 800666c:	e004      	b.n	8006678 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f83f 	bl	80066f4 <USBD_CtlError>
      break;
 8006676:	e000      	b.n	800667a <USBD_ClrFeature+0x3a>
      break;
 8006678:	bf00      	nop
  }
}
 800667a:	bf00      	nop
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781a      	ldrb	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	785a      	ldrb	r2, [r3, #1]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	3302      	adds	r3, #2
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	3303      	adds	r3, #3
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	4413      	add	r3, r2
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	3304      	adds	r3, #4
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	461a      	mov	r2, r3
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	3305      	adds	r3, #5
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	4413      	add	r3, r2
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	3306      	adds	r3, #6
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	461a      	mov	r2, r3
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	3307      	adds	r3, #7
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	4413      	add	r3, r2
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	80da      	strh	r2, [r3, #6]

}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr

080066f4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80066fe:	2180      	movs	r1, #128	@ 0x80
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fc5f 	bl	8006fc4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006706:	2100      	movs	r1, #0
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fc5b 	bl	8006fc4 <USBD_LL_StallEP>
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b086      	sub	sp, #24
 800671a:	af00      	add	r7, sp, #0
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d032      	beq.n	8006792 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 f834 	bl	800679a <USBD_GetLen>
 8006732:	4603      	mov	r3, r0
 8006734:	3301      	adds	r3, #1
 8006736:	b29b      	uxth	r3, r3
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	b29a      	uxth	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006740:	7dfb      	ldrb	r3, [r7, #23]
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	75fa      	strb	r2, [r7, #23]
 8006746:	461a      	mov	r2, r3
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4413      	add	r3, r2
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	7812      	ldrb	r2, [r2, #0]
 8006750:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006752:	7dfb      	ldrb	r3, [r7, #23]
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	75fa      	strb	r2, [r7, #23]
 8006758:	461a      	mov	r2, r3
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	4413      	add	r3, r2
 800675e:	2203      	movs	r2, #3
 8006760:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006762:	e012      	b.n	800678a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	60fa      	str	r2, [r7, #12]
 800676a:	7dfa      	ldrb	r2, [r7, #23]
 800676c:	1c51      	adds	r1, r2, #1
 800676e:	75f9      	strb	r1, [r7, #23]
 8006770:	4611      	mov	r1, r2
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	440a      	add	r2, r1
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800677a:	7dfb      	ldrb	r3, [r7, #23]
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	75fa      	strb	r2, [r7, #23]
 8006780:	461a      	mov	r2, r3
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	4413      	add	r3, r2
 8006786:	2200      	movs	r2, #0
 8006788:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e8      	bne.n	8006764 <USBD_GetString+0x4e>
    }
  }
}
 8006792:	bf00      	nop
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800679a:	b480      	push	{r7}
 800679c:	b085      	sub	sp, #20
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80067a6:	e005      	b.n	80067b4 <USBD_GetLen+0x1a>
  {
    len++;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	3301      	adds	r3, #1
 80067ac:	73fb      	strb	r3, [r7, #15]
    buf++;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	3301      	adds	r3, #1
 80067b2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1f5      	bne.n	80067a8 <USBD_GetLen+0xe>
  }

  return len;
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bc80      	pop	{r7}
 80067c6:	4770      	bx	lr

080067c8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	4613      	mov	r3, r2
 80067d4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2202      	movs	r2, #2
 80067da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80067de:	88fa      	ldrh	r2, [r7, #6]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80067e4:	88fa      	ldrh	r2, [r7, #6]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80067ea:	88fb      	ldrh	r3, [r7, #6]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	2100      	movs	r1, #0
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 fc6f 	bl	80070d4 <USBD_LL_Transmit>

  return USBD_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	4613      	mov	r3, r2
 800680c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	2100      	movs	r1, #0
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 fc5d 	bl	80070d4 <USBD_LL_Transmit>

  return USBD_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2203      	movs	r2, #3
 8006836:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800683a:	88fa      	ldrh	r2, [r7, #6]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006842:	88fa      	ldrh	r2, [r7, #6]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	2100      	movs	r1, #0
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 fc62 	bl	800711a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	4613      	mov	r3, r2
 800686c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	2100      	movs	r1, #0
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 fc50 	bl	800711a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2204      	movs	r2, #4
 8006890:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006894:	2300      	movs	r3, #0
 8006896:	2200      	movs	r2, #0
 8006898:	2100      	movs	r1, #0
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fc1a 	bl	80070d4 <USBD_LL_Transmit>

  return USBD_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b082      	sub	sp, #8
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2205      	movs	r2, #5
 80068b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068ba:	2300      	movs	r3, #0
 80068bc:	2200      	movs	r2, #0
 80068be:	2100      	movs	r1, #0
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fc2a 	bl	800711a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80068d4:	2200      	movs	r2, #0
 80068d6:	4912      	ldr	r1, [pc, #72]	@ (8006920 <MX_USB_DEVICE_Init+0x50>)
 80068d8:	4812      	ldr	r0, [pc, #72]	@ (8006924 <MX_USB_DEVICE_Init+0x54>)
 80068da:	f7fe ff62 	bl	80057a2 <USBD_Init>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80068e4:	f7f9 fcd0 	bl	8000288 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80068e8:	490f      	ldr	r1, [pc, #60]	@ (8006928 <MX_USB_DEVICE_Init+0x58>)
 80068ea:	480e      	ldr	r0, [pc, #56]	@ (8006924 <MX_USB_DEVICE_Init+0x54>)
 80068ec:	f7fe ff84 	bl	80057f8 <USBD_RegisterClass>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80068f6:	f7f9 fcc7 	bl	8000288 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80068fa:	490c      	ldr	r1, [pc, #48]	@ (800692c <MX_USB_DEVICE_Init+0x5c>)
 80068fc:	4809      	ldr	r0, [pc, #36]	@ (8006924 <MX_USB_DEVICE_Init+0x54>)
 80068fe:	f7fe feb5 	bl	800566c <USBD_CDC_RegisterInterface>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006908:	f7f9 fcbe 	bl	8000288 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800690c:	4805      	ldr	r0, [pc, #20]	@ (8006924 <MX_USB_DEVICE_Init+0x54>)
 800690e:	f7fe ff8c 	bl	800582a <USBD_Start>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006918:	f7f9 fcb6 	bl	8000288 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800691c:	bf00      	nop
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20000148 	.word	0x20000148
 8006924:	200001d8 	.word	0x200001d8
 8006928:	20000034 	.word	0x20000034
 800692c:	20000138 	.word	0x20000138

08006930 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006934:	2200      	movs	r2, #0
 8006936:	4905      	ldr	r1, [pc, #20]	@ (800694c <CDC_Init_FS+0x1c>)
 8006938:	4805      	ldr	r0, [pc, #20]	@ (8006950 <CDC_Init_FS+0x20>)
 800693a:	f7fe fead 	bl	8005698 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800693e:	4905      	ldr	r1, [pc, #20]	@ (8006954 <CDC_Init_FS+0x24>)
 8006940:	4803      	ldr	r0, [pc, #12]	@ (8006950 <CDC_Init_FS+0x20>)
 8006942:	f7fe fec2 	bl	80056ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006946:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006948:	4618      	mov	r0, r3
 800694a:	bd80      	pop	{r7, pc}
 800694c:	2000089c 	.word	0x2000089c
 8006950:	200001d8 	.word	0x200001d8
 8006954:	2000049c 	.word	0x2000049c

08006958 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800695c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800695e:	4618      	mov	r0, r3
 8006960:	46bd      	mov	sp, r7
 8006962:	bc80      	pop	{r7}
 8006964:	4770      	bx	lr
	...

08006968 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	4603      	mov	r3, r0
 8006970:	6039      	str	r1, [r7, #0]
 8006972:	71fb      	strb	r3, [r7, #7]
 8006974:	4613      	mov	r3, r2
 8006976:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006978:	79fb      	ldrb	r3, [r7, #7]
 800697a:	2b23      	cmp	r3, #35	@ 0x23
 800697c:	d84a      	bhi.n	8006a14 <CDC_Control_FS+0xac>
 800697e:	a201      	add	r2, pc, #4	@ (adr r2, 8006984 <CDC_Control_FS+0x1c>)
 8006980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006984:	08006a15 	.word	0x08006a15
 8006988:	08006a15 	.word	0x08006a15
 800698c:	08006a15 	.word	0x08006a15
 8006990:	08006a15 	.word	0x08006a15
 8006994:	08006a15 	.word	0x08006a15
 8006998:	08006a15 	.word	0x08006a15
 800699c:	08006a15 	.word	0x08006a15
 80069a0:	08006a15 	.word	0x08006a15
 80069a4:	08006a15 	.word	0x08006a15
 80069a8:	08006a15 	.word	0x08006a15
 80069ac:	08006a15 	.word	0x08006a15
 80069b0:	08006a15 	.word	0x08006a15
 80069b4:	08006a15 	.word	0x08006a15
 80069b8:	08006a15 	.word	0x08006a15
 80069bc:	08006a15 	.word	0x08006a15
 80069c0:	08006a15 	.word	0x08006a15
 80069c4:	08006a15 	.word	0x08006a15
 80069c8:	08006a15 	.word	0x08006a15
 80069cc:	08006a15 	.word	0x08006a15
 80069d0:	08006a15 	.word	0x08006a15
 80069d4:	08006a15 	.word	0x08006a15
 80069d8:	08006a15 	.word	0x08006a15
 80069dc:	08006a15 	.word	0x08006a15
 80069e0:	08006a15 	.word	0x08006a15
 80069e4:	08006a15 	.word	0x08006a15
 80069e8:	08006a15 	.word	0x08006a15
 80069ec:	08006a15 	.word	0x08006a15
 80069f0:	08006a15 	.word	0x08006a15
 80069f4:	08006a15 	.word	0x08006a15
 80069f8:	08006a15 	.word	0x08006a15
 80069fc:	08006a15 	.word	0x08006a15
 8006a00:	08006a15 	.word	0x08006a15
 8006a04:	08006a15 	.word	0x08006a15
 8006a08:	08006a15 	.word	0x08006a15
 8006a0c:	08006a15 	.word	0x08006a15
 8006a10:	08006a15 	.word	0x08006a15
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006a14:	bf00      	nop
  }

  return (USBD_OK);
 8006a16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop

08006a24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	4809      	ldr	r0, [pc, #36]	@ (8006a58 <CDC_Receive_FS+0x34>)
 8006a32:	f7fe fe4a 	bl	80056ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006a36:	4808      	ldr	r0, [pc, #32]	@ (8006a58 <CDC_Receive_FS+0x34>)
 8006a38:	f7fe fe89 	bl	800574e <USBD_CDC_ReceivePacket>

  strncpy(&Rx_Buf[0],&Buf[0],25);
 8006a3c:	2219      	movs	r2, #25
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	4806      	ldr	r0, [pc, #24]	@ (8006a5c <CDC_Receive_FS+0x38>)
 8006a42:	f000 fbf5 	bl	8007230 <strncpy>
  Rx_Flag = 1;
 8006a46:	4b06      	ldr	r3, [pc, #24]	@ (8006a60 <CDC_Receive_FS+0x3c>)
 8006a48:	2201      	movs	r2, #1
 8006a4a:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 8006a4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	200001d8 	.word	0x200001d8
 8006a5c:	200001b4 	.word	0x200001b4
 8006a60:	200001cd 	.word	0x200001cd

08006a64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006a74:	4b0d      	ldr	r3, [pc, #52]	@ (8006aac <CDC_Transmit_FS+0x48>)
 8006a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a7a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e00b      	b.n	8006aa2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006a8a:	887b      	ldrh	r3, [r7, #2]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	4806      	ldr	r0, [pc, #24]	@ (8006aac <CDC_Transmit_FS+0x48>)
 8006a92:	f7fe fe01 	bl	8005698 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006a96:	4805      	ldr	r0, [pc, #20]	@ (8006aac <CDC_Transmit_FS+0x48>)
 8006a98:	f7fe fe2a 	bl	80056f0 <USBD_CDC_TransmitPacket>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	200001d8 	.word	0x200001d8

08006ab0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	6039      	str	r1, [r7, #0]
 8006aba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	2212      	movs	r2, #18
 8006ac0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ac2:	4b03      	ldr	r3, [pc, #12]	@ (8006ad0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bc80      	pop	{r7}
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	20000164 	.word	0x20000164

08006ad4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	4603      	mov	r3, r0
 8006adc:	6039      	str	r1, [r7, #0]
 8006ade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2204      	movs	r2, #4
 8006ae4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006ae6:	4b03      	ldr	r3, [pc, #12]	@ (8006af4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bc80      	pop	{r7}
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20000178 	.word	0x20000178

08006af8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	4603      	mov	r3, r0
 8006b00:	6039      	str	r1, [r7, #0]
 8006b02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b04:	79fb      	ldrb	r3, [r7, #7]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d105      	bne.n	8006b16 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	4907      	ldr	r1, [pc, #28]	@ (8006b2c <USBD_FS_ProductStrDescriptor+0x34>)
 8006b0e:	4808      	ldr	r0, [pc, #32]	@ (8006b30 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b10:	f7ff fe01 	bl	8006716 <USBD_GetString>
 8006b14:	e004      	b.n	8006b20 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	4904      	ldr	r1, [pc, #16]	@ (8006b2c <USBD_FS_ProductStrDescriptor+0x34>)
 8006b1a:	4805      	ldr	r0, [pc, #20]	@ (8006b30 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b1c:	f7ff fdfb 	bl	8006716 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b20:	4b02      	ldr	r3, [pc, #8]	@ (8006b2c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000c9c 	.word	0x20000c9c
 8006b30:	080072b8 	.word	0x080072b8

08006b34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	6039      	str	r1, [r7, #0]
 8006b3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	4904      	ldr	r1, [pc, #16]	@ (8006b54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006b44:	4804      	ldr	r0, [pc, #16]	@ (8006b58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006b46:	f7ff fde6 	bl	8006716 <USBD_GetString>
  return USBD_StrDesc;
 8006b4a:	4b02      	ldr	r3, [pc, #8]	@ (8006b54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	20000c9c 	.word	0x20000c9c
 8006b58:	080072d0 	.word	0x080072d0

08006b5c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	6039      	str	r1, [r7, #0]
 8006b66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	221a      	movs	r2, #26
 8006b6c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b6e:	f000 f843 	bl	8006bf8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b72:	4b02      	ldr	r3, [pc, #8]	@ (8006b7c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	2000017c 	.word	0x2000017c

08006b80 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	4603      	mov	r3, r0
 8006b88:	6039      	str	r1, [r7, #0]
 8006b8a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d105      	bne.n	8006b9e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	4907      	ldr	r1, [pc, #28]	@ (8006bb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b96:	4808      	ldr	r0, [pc, #32]	@ (8006bb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b98:	f7ff fdbd 	bl	8006716 <USBD_GetString>
 8006b9c:	e004      	b.n	8006ba8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	4904      	ldr	r1, [pc, #16]	@ (8006bb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ba2:	4805      	ldr	r0, [pc, #20]	@ (8006bb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ba4:	f7ff fdb7 	bl	8006716 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ba8:	4b02      	ldr	r3, [pc, #8]	@ (8006bb4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20000c9c 	.word	0x20000c9c
 8006bb8:	080072e4 	.word	0x080072e4

08006bbc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	6039      	str	r1, [r7, #0]
 8006bc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006bc8:	79fb      	ldrb	r3, [r7, #7]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d105      	bne.n	8006bda <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	4907      	ldr	r1, [pc, #28]	@ (8006bf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006bd2:	4808      	ldr	r0, [pc, #32]	@ (8006bf4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006bd4:	f7ff fd9f 	bl	8006716 <USBD_GetString>
 8006bd8:	e004      	b.n	8006be4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	4904      	ldr	r1, [pc, #16]	@ (8006bf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006bde:	4805      	ldr	r0, [pc, #20]	@ (8006bf4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006be0:	f7ff fd99 	bl	8006716 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006be4:	4b02      	ldr	r3, [pc, #8]	@ (8006bf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000c9c 	.word	0x20000c9c
 8006bf4:	080072f0 	.word	0x080072f0

08006bf8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8006c3c <Get_SerialNum+0x44>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006c04:	4b0e      	ldr	r3, [pc, #56]	@ (8006c40 <Get_SerialNum+0x48>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006c44 <Get_SerialNum+0x4c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4413      	add	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d009      	beq.n	8006c32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006c1e:	2208      	movs	r2, #8
 8006c20:	4909      	ldr	r1, [pc, #36]	@ (8006c48 <Get_SerialNum+0x50>)
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 f814 	bl	8006c50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006c28:	2204      	movs	r2, #4
 8006c2a:	4908      	ldr	r1, [pc, #32]	@ (8006c4c <Get_SerialNum+0x54>)
 8006c2c:	68b8      	ldr	r0, [r7, #8]
 8006c2e:	f000 f80f 	bl	8006c50 <IntToUnicode>
  }
}
 8006c32:	bf00      	nop
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	1ffff7e8 	.word	0x1ffff7e8
 8006c40:	1ffff7ec 	.word	0x1ffff7ec
 8006c44:	1ffff7f0 	.word	0x1ffff7f0
 8006c48:	2000017e 	.word	0x2000017e
 8006c4c:	2000018e 	.word	0x2000018e

08006c50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c62:	2300      	movs	r3, #0
 8006c64:	75fb      	strb	r3, [r7, #23]
 8006c66:	e027      	b.n	8006cb8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	0f1b      	lsrs	r3, r3, #28
 8006c6c:	2b09      	cmp	r3, #9
 8006c6e:	d80b      	bhi.n	8006c88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	0f1b      	lsrs	r3, r3, #28
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	440b      	add	r3, r1
 8006c80:	3230      	adds	r2, #48	@ 0x30
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	e00a      	b.n	8006c9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	0f1b      	lsrs	r3, r3, #28
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	4619      	mov	r1, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	440b      	add	r3, r1
 8006c98:	3237      	adds	r2, #55	@ 0x37
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ca4:	7dfb      	ldrb	r3, [r7, #23]
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	3301      	adds	r3, #1
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	4413      	add	r3, r2
 8006cae:	2200      	movs	r2, #0
 8006cb0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	75fb      	strb	r3, [r7, #23]
 8006cb8:	7dfa      	ldrb	r2, [r7, #23]
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d3d3      	bcc.n	8006c68 <IntToUnicode+0x18>
  }
}
 8006cc0:	bf00      	nop
 8006cc2:	bf00      	nop
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bc80      	pop	{r7}
 8006cca:	4770      	bx	lr

08006ccc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8006d10 <HAL_PCD_MspInit+0x44>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d113      	bne.n	8006d06 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006cde:	4b0d      	ldr	r3, [pc, #52]	@ (8006d14 <HAL_PCD_MspInit+0x48>)
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8006d14 <HAL_PCD_MspInit+0x48>)
 8006ce4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ce8:	61d3      	str	r3, [r2, #28]
 8006cea:	4b0a      	ldr	r3, [pc, #40]	@ (8006d14 <HAL_PCD_MspInit+0x48>)
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	2014      	movs	r0, #20
 8006cfc:	f7f9 fcbb 	bl	8000676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006d00:	2014      	movs	r0, #20
 8006d02:	f7f9 fcd4 	bl	80006ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006d06:	bf00      	nop
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	40005c00 	.word	0x40005c00
 8006d14:	40021000 	.word	0x40021000

08006d18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4610      	mov	r0, r2
 8006d30:	f7fe fdc3 	bl	80058ba <USBD_LL_SetupStage>
}
 8006d34:	bf00      	nop
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	460b      	mov	r3, r1
 8006d46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8006d4e:	78fa      	ldrb	r2, [r7, #3]
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	440b      	add	r3, r1
 8006d5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	4619      	mov	r1, r3
 8006d66:	f7fe fdf5 	bl	8005954 <USBD_LL_DataOutStage>
}
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8006d84:	78fa      	ldrb	r2, [r7, #3]
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	440b      	add	r3, r1
 8006d92:	3324      	adds	r3, #36	@ 0x24
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	78fb      	ldrb	r3, [r7, #3]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	f7fe fe4c 	bl	8005a36 <USBD_LL_DataInStage>
}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b082      	sub	sp, #8
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fe ff5c 	bl	8005c72 <USBD_LL_SOF>
}
 8006dba:	bf00      	nop
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	799b      	ldrb	r3, [r3, #6]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d001      	beq.n	8006dda <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006dd6:	f7f9 fa57 	bl	8000288 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006de0:	7bfa      	ldrb	r2, [r7, #15]
 8006de2:	4611      	mov	r1, r2
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7fe ff0c 	bl	8005c02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fe fec5 	bl	8005b80 <USBD_LL_Reset>
}
 8006df6:	bf00      	nop
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fe ff06 	bl	8005c20 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	7a9b      	ldrb	r3, [r3, #10]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d005      	beq.n	8006e28 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e1c:	4b04      	ldr	r3, [pc, #16]	@ (8006e30 <HAL_PCD_SuspendCallback+0x30>)
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	4a03      	ldr	r2, [pc, #12]	@ (8006e30 <HAL_PCD_SuspendCallback+0x30>)
 8006e22:	f043 0306 	orr.w	r3, r3, #6
 8006e26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e28:	bf00      	nop
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	e000ed00 	.word	0xe000ed00

08006e34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7fe ff00 	bl	8005c48 <USBD_LL_Resume>
}
 8006e48:	bf00      	nop
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006e58:	4a28      	ldr	r2, [pc, #160]	@ (8006efc <USBD_LL_Init+0xac>)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a26      	ldr	r2, [pc, #152]	@ (8006efc <USBD_LL_Init+0xac>)
 8006e64:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006e68:	4b24      	ldr	r3, [pc, #144]	@ (8006efc <USBD_LL_Init+0xac>)
 8006e6a:	4a25      	ldr	r2, [pc, #148]	@ (8006f00 <USBD_LL_Init+0xb0>)
 8006e6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006e6e:	4b23      	ldr	r3, [pc, #140]	@ (8006efc <USBD_LL_Init+0xac>)
 8006e70:	2208      	movs	r2, #8
 8006e72:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006e74:	4b21      	ldr	r3, [pc, #132]	@ (8006efc <USBD_LL_Init+0xac>)
 8006e76:	2202      	movs	r2, #2
 8006e78:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006e7a:	4b20      	ldr	r3, [pc, #128]	@ (8006efc <USBD_LL_Init+0xac>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006e80:	4b1e      	ldr	r3, [pc, #120]	@ (8006efc <USBD_LL_Init+0xac>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006e86:	4b1d      	ldr	r3, [pc, #116]	@ (8006efc <USBD_LL_Init+0xac>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006e8c:	481b      	ldr	r0, [pc, #108]	@ (8006efc <USBD_LL_Init+0xac>)
 8006e8e:	f7f9 fc28 	bl	80006e2 <HAL_PCD_Init>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006e98:	f7f9 f9f6 	bl	8000288 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006ea2:	2318      	movs	r3, #24
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	f7fb f939 	bl	800211e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006eb2:	2358      	movs	r3, #88	@ 0x58
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2180      	movs	r1, #128	@ 0x80
 8006eb8:	f7fb f931 	bl	800211e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006ec2:	23c0      	movs	r3, #192	@ 0xc0
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2181      	movs	r1, #129	@ 0x81
 8006ec8:	f7fb f929 	bl	800211e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006ed2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2101      	movs	r1, #1
 8006eda:	f7fb f920 	bl	800211e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006ee4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2182      	movs	r1, #130	@ 0x82
 8006eec:	f7fb f917 	bl	800211e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20000e9c 	.word	0x20000e9c
 8006f00:	40005c00 	.word	0x40005c00

08006f04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7f9 fcd7 	bl	80008ce <HAL_PCD_Start>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 f94e 	bl	80071c8 <USBD_Get_USB_Status>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	4608      	mov	r0, r1
 8006f44:	4611      	mov	r1, r2
 8006f46:	461a      	mov	r2, r3
 8006f48:	4603      	mov	r3, r0
 8006f4a:	70fb      	strb	r3, [r7, #3]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	70bb      	strb	r3, [r7, #2]
 8006f50:	4613      	mov	r3, r2
 8006f52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006f62:	78bb      	ldrb	r3, [r7, #2]
 8006f64:	883a      	ldrh	r2, [r7, #0]
 8006f66:	78f9      	ldrb	r1, [r7, #3]
 8006f68:	f7f9 fe2b 	bl	8000bc2 <HAL_PCD_EP_Open>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 f928 	bl	80071c8 <USBD_Get_USB_Status>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006fa0:	78fa      	ldrb	r2, [r7, #3]
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7f9 fe69 	bl	8000c7c <HAL_PCD_EP_Close>
 8006faa:	4603      	mov	r3, r0
 8006fac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 f909 	bl	80071c8 <USBD_Get_USB_Status>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fba:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006fde:	78fa      	ldrb	r2, [r7, #3]
 8006fe0:	4611      	mov	r1, r2
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7f9 ff11 	bl	8000e0a <HAL_PCD_EP_SetStall>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 f8ea 	bl	80071c8 <USBD_Get_USB_Status>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ff8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b084      	sub	sp, #16
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	460b      	mov	r3, r1
 800700c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007012:	2300      	movs	r3, #0
 8007014:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800701c:	78fa      	ldrb	r2, [r7, #3]
 800701e:	4611      	mov	r1, r2
 8007020:	4618      	mov	r0, r3
 8007022:	f7f9 ff52 	bl	8000eca <HAL_PCD_EP_ClrStall>
 8007026:	4603      	mov	r3, r0
 8007028:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800702a:	7bfb      	ldrb	r3, [r7, #15]
 800702c:	4618      	mov	r0, r3
 800702e:	f000 f8cb 	bl	80071c8 <USBD_Get_USB_Status>
 8007032:	4603      	mov	r3, r0
 8007034:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007036:	7bbb      	ldrb	r3, [r7, #14]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	460b      	mov	r3, r1
 800704a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007052:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007058:	2b00      	cmp	r3, #0
 800705a:	da0b      	bge.n	8007074 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800705c:	78fb      	ldrb	r3, [r7, #3]
 800705e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007062:	68f9      	ldr	r1, [r7, #12]
 8007064:	4613      	mov	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	440b      	add	r3, r1
 800706e:	3312      	adds	r3, #18
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	e00b      	b.n	800708c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800707a:	68f9      	ldr	r1, [r7, #12]
 800707c:	4613      	mov	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	440b      	add	r3, r1
 8007086:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800708a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	bc80      	pop	{r7}
 8007094:	4770      	bx	lr

08007096 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80070b0:	78fa      	ldrb	r2, [r7, #3]
 80070b2:	4611      	mov	r1, r2
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7f9 fd60 	bl	8000b7a <HAL_PCD_SetAddress>
 80070ba:	4603      	mov	r3, r0
 80070bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070be:	7bfb      	ldrb	r3, [r7, #15]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f000 f881 	bl	80071c8 <USBD_Get_USB_Status>
 80070c6:	4603      	mov	r3, r0
 80070c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	607a      	str	r2, [r7, #4]
 80070de:	461a      	mov	r2, r3
 80070e0:	460b      	mov	r3, r1
 80070e2:	72fb      	strb	r3, [r7, #11]
 80070e4:	4613      	mov	r3, r2
 80070e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80070f6:	893b      	ldrh	r3, [r7, #8]
 80070f8:	7af9      	ldrb	r1, [r7, #11]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	f7f9 fe4e 	bl	8000d9c <HAL_PCD_EP_Transmit>
 8007100:	4603      	mov	r3, r0
 8007102:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007104:	7dfb      	ldrb	r3, [r7, #23]
 8007106:	4618      	mov	r0, r3
 8007108:	f000 f85e 	bl	80071c8 <USBD_Get_USB_Status>
 800710c:	4603      	mov	r3, r0
 800710e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007110:	7dbb      	ldrb	r3, [r7, #22]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b086      	sub	sp, #24
 800711e:	af00      	add	r7, sp, #0
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	461a      	mov	r2, r3
 8007126:	460b      	mov	r3, r1
 8007128:	72fb      	strb	r3, [r7, #11]
 800712a:	4613      	mov	r3, r2
 800712c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800713c:	893b      	ldrh	r3, [r7, #8]
 800713e:	7af9      	ldrb	r1, [r7, #11]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	f7f9 fde3 	bl	8000d0c <HAL_PCD_EP_Receive>
 8007146:	4603      	mov	r3, r0
 8007148:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	4618      	mov	r0, r3
 800714e:	f000 f83b 	bl	80071c8 <USBD_Get_USB_Status>
 8007152:	4603      	mov	r3, r0
 8007154:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007156:	7dbb      	ldrb	r3, [r7, #22]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3718      	adds	r7, #24
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007172:	78fa      	ldrb	r2, [r7, #3]
 8007174:	4611      	mov	r1, r2
 8007176:	4618      	mov	r0, r3
 8007178:	f7f9 fdf9 	bl	8000d6e <HAL_PCD_EP_GetRxCount>
 800717c:	4603      	mov	r3, r0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007190:	4b02      	ldr	r3, [pc, #8]	@ (800719c <USBD_static_malloc+0x14>)
}
 8007192:	4618      	mov	r0, r3
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	bc80      	pop	{r7}
 800719a:	4770      	bx	lr
 800719c:	20001174 	.word	0x20001174

080071a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]

}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr

080071b2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	460b      	mov	r3, r1
 80071bc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80071be:	bf00      	nop
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bc80      	pop	{r7}
 80071c6:	4770      	bx	lr

080071c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d817      	bhi.n	800720c <USBD_Get_USB_Status+0x44>
 80071dc:	a201      	add	r2, pc, #4	@ (adr r2, 80071e4 <USBD_Get_USB_Status+0x1c>)
 80071de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e2:	bf00      	nop
 80071e4:	080071f5 	.word	0x080071f5
 80071e8:	080071fb 	.word	0x080071fb
 80071ec:	08007201 	.word	0x08007201
 80071f0:	08007207 	.word	0x08007207
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	73fb      	strb	r3, [r7, #15]
    break;
 80071f8:	e00b      	b.n	8007212 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80071fa:	2302      	movs	r3, #2
 80071fc:	73fb      	strb	r3, [r7, #15]
    break;
 80071fe:	e008      	b.n	8007212 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007200:	2301      	movs	r3, #1
 8007202:	73fb      	strb	r3, [r7, #15]
    break;
 8007204:	e005      	b.n	8007212 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007206:	2302      	movs	r3, #2
 8007208:	73fb      	strb	r3, [r7, #15]
    break;
 800720a:	e002      	b.n	8007212 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800720c:	2302      	movs	r3, #2
 800720e:	73fb      	strb	r3, [r7, #15]
    break;
 8007210:	bf00      	nop
  }
  return usb_status;
 8007212:	7bfb      	ldrb	r3, [r7, #15]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	bc80      	pop	{r7}
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop

08007220 <memset>:
 8007220:	4603      	mov	r3, r0
 8007222:	4402      	add	r2, r0
 8007224:	4293      	cmp	r3, r2
 8007226:	d100      	bne.n	800722a <memset+0xa>
 8007228:	4770      	bx	lr
 800722a:	f803 1b01 	strb.w	r1, [r3], #1
 800722e:	e7f9      	b.n	8007224 <memset+0x4>

08007230 <strncpy>:
 8007230:	4603      	mov	r3, r0
 8007232:	b510      	push	{r4, lr}
 8007234:	3901      	subs	r1, #1
 8007236:	b132      	cbz	r2, 8007246 <strncpy+0x16>
 8007238:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800723c:	3a01      	subs	r2, #1
 800723e:	f803 4b01 	strb.w	r4, [r3], #1
 8007242:	2c00      	cmp	r4, #0
 8007244:	d1f7      	bne.n	8007236 <strncpy+0x6>
 8007246:	2100      	movs	r1, #0
 8007248:	441a      	add	r2, r3
 800724a:	4293      	cmp	r3, r2
 800724c:	d100      	bne.n	8007250 <strncpy+0x20>
 800724e:	bd10      	pop	{r4, pc}
 8007250:	f803 1b01 	strb.w	r1, [r3], #1
 8007254:	e7f9      	b.n	800724a <strncpy+0x1a>
	...

08007258 <__libc_init_array>:
 8007258:	b570      	push	{r4, r5, r6, lr}
 800725a:	2600      	movs	r6, #0
 800725c:	4d0c      	ldr	r5, [pc, #48]	@ (8007290 <__libc_init_array+0x38>)
 800725e:	4c0d      	ldr	r4, [pc, #52]	@ (8007294 <__libc_init_array+0x3c>)
 8007260:	1b64      	subs	r4, r4, r5
 8007262:	10a4      	asrs	r4, r4, #2
 8007264:	42a6      	cmp	r6, r4
 8007266:	d109      	bne.n	800727c <__libc_init_array+0x24>
 8007268:	f000 f81a 	bl	80072a0 <_init>
 800726c:	2600      	movs	r6, #0
 800726e:	4d0a      	ldr	r5, [pc, #40]	@ (8007298 <__libc_init_array+0x40>)
 8007270:	4c0a      	ldr	r4, [pc, #40]	@ (800729c <__libc_init_array+0x44>)
 8007272:	1b64      	subs	r4, r4, r5
 8007274:	10a4      	asrs	r4, r4, #2
 8007276:	42a6      	cmp	r6, r4
 8007278:	d105      	bne.n	8007286 <__libc_init_array+0x2e>
 800727a:	bd70      	pop	{r4, r5, r6, pc}
 800727c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007280:	4798      	blx	r3
 8007282:	3601      	adds	r6, #1
 8007284:	e7ee      	b.n	8007264 <__libc_init_array+0xc>
 8007286:	f855 3b04 	ldr.w	r3, [r5], #4
 800728a:	4798      	blx	r3
 800728c:	3601      	adds	r6, #1
 800728e:	e7f2      	b.n	8007276 <__libc_init_array+0x1e>
 8007290:	0800732c 	.word	0x0800732c
 8007294:	0800732c 	.word	0x0800732c
 8007298:	0800732c 	.word	0x0800732c
 800729c:	08007330 	.word	0x08007330

080072a0 <_init>:
 80072a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a2:	bf00      	nop
 80072a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072a6:	bc08      	pop	{r3}
 80072a8:	469e      	mov	lr, r3
 80072aa:	4770      	bx	lr

080072ac <_fini>:
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ae:	bf00      	nop
 80072b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072b2:	bc08      	pop	{r3}
 80072b4:	469e      	mov	lr, r3
 80072b6:	4770      	bx	lr
